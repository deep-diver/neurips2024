[{"type": "text", "text": "Dynamic 3D Gaussian Fields for Urban Areas ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Tobias Fischer1 Jonas Kulhanek1,3 Samuel Rota Bul\u00f22 Lorenzo Porzi2 Marc Pollefeys1 Peter Kontschieder2 1 ETH Z\u00fcrich 2 Meta Reality Labs 3 CTU Prague https://tobiasfshr.github.io/pub/4dgf/ ", "page_idx": 0}, {"type": "image", "img_path": "xZxXNhndXU/tmp/738e031fb4269147ec3427e44f77a0c586d4776f5b4ac1b36f2d6fa37fc0e257.jpg", "img_caption": ["Figure 1: Summary. Given a set of heterogeneous input sequences that capture a common geographic area in varying environmental conditions (e.g. weather, season, and lighting) with distinct dynamic objects (e.g. vehicles, pedestrians, and cyclists), we optimize a single dynamic scene representation that permits rendering of arbitrary viewpoints and scene configurations at interactive speeds. "], "img_footnote": [], "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "We present an efficient neural 3D scene representation for novel-view synthesis (NVS) in large-scale, dynamic urban areas. Existing works are not well suited for applications like mixed-reality or closed-loop simulation due to their limited visual quality and non-interactive rendering speeds. Recently, rasterization-based approaches have achieved high-quality NVS at impressive speeds. However, these methods are limited to small-scale, homogeneous data, i.e. they cannot handle severe appearance and geometry variations due to weather, season, and lighting and do not scale to larger, dynamic areas with thousands of images. We propose 4DGF, a neural scene representation that scales to large-scale dynamic urban areas, handles heterogeneous input data, and substantially improves rendering speeds. We use 3D Gaussians as an efficient geometry scaffold while relying on neural fields as a compact and flexible appearance model. We integrate scene dynamics via a scene graph at global scale while modeling articulated motions on a local level via deformations. This decomposed approach enables flexible scene composition suitable for real-world applications. In experiments, we surpass the state-of-the-art by over 3 dB in PSNR and more than $200\\times$ in rendering speed. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "The problem of synthesizing novel views from a set of images has received widespread attention in recent years due to its importance for technologies like AR/VR and robotics. In particular, obtaining interactive, high-quality renderings of large-scale, dynamic urban areas under varying weather, lighting, and seasonal conditions is a key requirement for closed-loop robotic simulation and immersive VR experiences. To achieve this goal, sensor-equipped vehicles act as a frequent data 38th Conference on Neural Information Processing Systems (NeurIPS 2024). ", "page_idx": 0}, {"type": "text", "text": "source that is becoming widely available in city-scale mapping and autonomous driving, creating the possibility of building up-to-date digital twins of entire cities. However, modeling these scenarios is extremely challenging as heterogeneous data sources have to be processed and combined: different weather, lighting, seasons, and distinct dynamic and transient objects pose significant challenges to the reconstruction and rendering of dynamic urban areas. ", "page_idx": 1}, {"type": "text", "text": "In recent years, neural radiance fields have shown great promise in achieving realistic novel view synthesis of static [1, 2, 3] and dynamic scenes [4, 5, 6, 7]. While earlier methods were limited to controlled environments, several recent works have explored large-scale, dynamic areas [8, 9, 10]. Among these, many works resort to removing dynamic regions and thus produce partial reconstructions [9, 10, 11, 12, 13, 14]. In contrast, fewer works model scene dynamics [15, 16, 17]. These methods exhibit clear limitations, such as rendering speed which can be attributed to the high cost of ray traversal in volumetric rendering. ", "page_idx": 1}, {"type": "text", "text": "Therefore, rasterization-based techniques [18, 19, 20, 11] have recently emerged as a viable alternative. Most notably, Kerbl et al. [18] propose a scene representation based on 3D Gaussian primitives that can be efficiently rendered with a tile-based rasterizer at a high visual quality. While demonstrating impressive rendering speeds, it requires millions of Gaussian primitives with high-dimensional spherical harmonics coefficients as color representation to achieve good view synthesis results. This limits its applicability to large-scale urban areas due to high memory requirements. Furthermore, due to its explicit color representation, it cannot model transient geometry and appearance variations commonly encountered in city-scale mapping and autonomous driving use cases such as seasonal and weather changes. Lastly, the approach is limited to static scenes which complicates representing dynamic objects such as moving vehicles or pedestrians commonly encountered in urban areas. ", "page_idx": 1}, {"type": "text", "text": "To this end, we propose 4DGF, a method that takes a hybrid approach to modeling dynamic urban areas. In particular, we use 3D Gaussian primitives as an efficient geometry scaffold. However, we do not store appearance as a per-primitive attribute, thus avoiding more than $80\\%$ of its memory footprint. Instead, we use fixed-size neural fields as a compact and flexible alternative. This allows us to model drastically different appearances and transient geometry which is essential to reconstructing urban areas from heterogeneous data. Finally, we model scene dynamics with a graph-based representation that maps dynamic objects to canonical space for reconstruction. We model non-rigid deformations in this canonical space with our neural fields to cope with articulated dynamic objects common in urban areas such as pedestrians and cyclists. This decomposed approach further enables a flexible scene composition suitable to downstream applications. The key contributions of this work are: ", "page_idx": 1}, {"type": "text", "text": "\u2022 We introduce 4DGF, a hybrid neural scene representation for dynamic urban areas that leverages 3D Gaussians as an efficient geometry scaffold and neural fields as a compact and flexible appearance representation. \u2022 We use neural fields to incorporate scene-specific transient geometry and appearances into the rendering process of 3D Gaussian splatting, overcoming its limitation to static, homogeneous data sources while benefitting from its efficient rendering. \u2022 We integrate scene dynamics via i) a graph-based representation, mapping dynamic objects to canonical space, and ii) modeling non-rigid deformations in this canonical space. This enables effective reconstruction of dynamic objects from in-the-wild captures. ", "page_idx": 1}, {"type": "text", "text": "We show that 4DGF effectively reconstructs large-scale, dynamic urban areas with over ten thousand images, achieves state-of-the-art results across four dynamic outdoor benchmarks [21, 22, 17, 23], and is more than $200\\times$ faster to render than the previous state-of-the-art. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Dynamic scene representations. Scene representations are a pillar of computer vision and graphics research [24]. Over decades, researchers have studied various static and dynamic scene representations for numerous problem setups [25, 26, 27, 28, 29, 30, 31, 32, 1, 33, 34]. Recently, neural rendering [35] has given rise to a new class of scene representations for photo-realistic image synthesis. While earlier methods in this scope were limited to static scenes [2, 3, 36, 37, 38], dynamic scene representations have emerged quickly [4]. These scene representations can be broadly classified into implicit and explicit representations. Implicit representations [5, 6, 7, 39, 4, 40, 41, 16] encode the scene as a parametric function modeled as neural network, while explicit representations [42, 43, 44, 45, 44] use a collection of low-level primitives. In both cases, scene dynamics are simulated as i) deformations of a canonical volume [5, 6, 42, 39, 41], ii) particle-level motion such as scene flow [7, 4, 40, 16, 46], or iii) rigid transformations of local geometric primitives [44]. On the contrary, traditional computer graphics literature uses scene graphs to compose entities into complex scenes [47]. Therefore, another area of research explores decomposing scenes into higher-level elements [31, 48, 32, 15, 49, 50, 17], where entities and their spatial relations are expressed as a directed graph. This concept was recently revisited for view synthesis [15, 17]. In this work, we take a hybrid approach that uses i) explicit geometric primitives for fast rendering, ii) implicit neural fields to model appearance and geometry variation, and iii) a scene graph to decompose individual dynamic and static components. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Efficient rendering and 3D Gaussian splatting. Aside from accuracy, the rendering speed of a scene representation is equally important. While rendering speed highly depends on the representation efficiency itself, it also varies with the form of rendering that is coupled with it to generate an image [51]. Traditionally, neural radiance fields [3] use implicit functions and volumetric rendering which produce accurate renderings but suffer from costly function evaluation and ray traversal. To remedy these issues, many techniques for caching and efficient sampling [52, 53, 54, 36, 55, 17] have been developed. However, these approaches often suffer from excessive GPU memory requirements [52] and are still limited in rendering speed [54, 55, 17]. Therefore, researchers have opted to exploit more efficient forms of rendering, baking neural scene representations into meshes for efficient rasterization [19, 20, 11]. This area of research has recently been disrupted by 3D Gaussian splatting [18], which i) represents the scene as a set of anisotropic 3D Gaussian primitives ii) uses an efficient tile-based, differentiable rasterizer, and iii) enables effective optimization by adaptive density control (ADC), which facilitates primitive growth and pruning. This led to a paradigm shift from baking neural scene representations to a more streamlined approach. ", "page_idx": 2}, {"type": "text", "text": "However, the method of Kerbl. et al. [18] exhibits clear limitations, which has sparked a very active field of research with many concurrent works [44, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65]. For instance, several works tackle dynamic scenes by adapting approaches described in the paragraph above [44, 66, 67, 68, 69, 70]. Another line of work focuses on modeling larger-scale scenes [65, 71, 72]. Lastly, several concurrent works investigate the reconstruction of dynamic street scenes [73, 74, 75]. These methods are generally limited to homogeneous data and in scale. In contrast, our method scales to tens of thousands of images and effectively reconstructs large, dynamic urban areas from heterogeneous data while also providing orders of magnitude faster rendering than traditional approaches. ", "page_idx": 2}, {"type": "text", "text": "Reconstructing urban areas. Dynamic urban areas are particularly challenging to reconstruct due to the complexity of both the scenes and the capturing process. Hence, significant research efforts have focused on adapting view synthesis approaches from controlled, small-scale environments to larger, real-world scenes. In particular, researchers have investigated the use of depth priors from e.g. LiDAR, providing additional information such as camera exposure, jointly optimizing camera parameters, and developing specialized sky and light modeling approaches [8, 9, 10, 11, 12, 13, 14]. However, since scene dynamics are challenging to approach, many works simply remove dynamic areas, providing only a partial reconstruction. A few works explicitly model scene dynamics, but suffer from limitations in terms of scalability [15, 49, 45], accuracy [16], rendering speed [17, 76, 77], or modeling of non-rigid and uncommon objects [15, 49, 45, 77, 17]. We introduce a mechanism to handle transient geometry and varying appearance, improve rendering efficiency, and, inspired by how global rigid object motion is handled in [17, 15, 49, 45, 77], propose an approach to model the local articulated motion of non-rigid dynamic objects without using semantic priors. Consequently, our work enables the reconstruction of much larger urban areas with a significantly higher number and diversity of dynamic objects across multiple in-the-wild captures. ", "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 Problem setup ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We are given a set of heterogeneous sequences $S$ that capture a common geographic area from a moving vehicle. The vehicle is equipped with calibrated cameras mounted in a surround-view setup. We denote with $C_{s}$ the set of cameras of sequence $s\\,\\in\\,S$ and with $C$ the total set of cameras, i.e. $\\textstyle C:=\\bigcup_{s\\in S}C_{s}$ . For each camera $c\\in C$ , we assume to know the intrinsic $\\mathtt{K}_{c}$ parameters and the pose $\\mathsf{P}_{c}\\in\\mathrm{SE}(3)$ , expressed in the ego-vehicle reference frame. Ego-vehicle poses $\\mathsf{P}_{s}^{t}\\in\\mathsf{S E}(3)$ are provided for each sequence $s\\in S$ and timesteps $t\\in T_{s}$ and are expressed in the world reference frame that is shared across all sequences. Here, $T_{s}$ denotes a set of timestamps relative to $s$ . Indeed, we assume that timestamps cannot be compared across sequences because we lack a mapping to a global timeline, which is often the case with benchmark datasets due to privacy reasons. For each sequence $s\\in S$ , camera $c\\in C_{s}$ and timestamp $t\\in T_{s}$ we have an RGB image It(s,c) \u2208[0, 1]H\u00d7W \u00d73. Each sequence has additionally an associated set of dynamic objects $O_{s}$ . Dynamic objects $o\\in O_{s}$ are associated with a 3D bounding box track that holds its (stationary) 3D object dimensions $\\mathbf{s}_{o}\\in\\mathbb{R}_{+}^{3}$ and poses $\\{\\xi_{o}^{t_{0}},...,\\xi_{o}^{t_{n}}\\}\\subset\\mathrm{SE(3)}$ w.r.t. the ego-vehicle frame, where $t_{i}\\in T_{o}\\subset T_{s}$ . Our goal is to estimate the plenoptic function for the shared geographic area spanned by the training sequences, i.e. a function $f(\\mathbb{P},\\mathbb{K},t,s)$ , which outputs a rendered RGB image of size $(H,W)$ for a given camera pose $\\mathbb{P}$ with calibration K in the conditions of sequence $s\\in S$ at time $t\\in T_{s}$ . ", "page_idx": 2}, {"type": "image", "img_path": "xZxXNhndXU/tmp/4c50f24708247544130bc19c3e58a6a4bc8e23dce956ee378fd32b16639142ff.jpg", "img_caption": ["Figure 2: Overview. To render an image of sequence $s$ at time $t$ , we first evaluate the scene graph $\\mathcal{G}\\,=$ $(\\boldsymbol{\\nu},\\boldsymbol{\\mathcal{E}})$ which stores latent codes $\\omega$ at its nodes $\\nu$ and coordinate transformations $[\\mathbf{R}|\\mathbf{t}]$ at its edges $\\mathcal{E}$ , i.e. the configuration of the dynamic objects and the overall scene. We then use the scene configuration to determine the active sets of 3D Gaussians $G$ . The 3D Gaussians $G$ and the latent codes $\\omega$ serve as conditioning signals to the neural fields $\\phi$ and $\\psi$ , which output, for each 3D Gaussian ${\\mathfrak{g}}_{k}\\in G$ , an appearance conditioned color $\\mathbf{c}_{k}^{s,t}$ an opacity correction term $\\nu_{k}^{s,t}$ for static Gaussians modeling transient geometry, and a dynamic deformation $\\delta_{k}^{t}$ for non-rigid dynamic 3D Gaussians modeling e.g. pedestrians. Finally, the retrieved information is used to compose a set of 3D Gaussians that represent the dynamic scene at $(s,t)$ from which we render the image. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "3.2 Representation ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We model a parameterized, plenoptic function $f_{\\theta}$ , which depends on the following components: i) a scene graph $\\mathcal{G}$ that provides the scene configuration and latent conditioning signals $\\omega$ for each sequence $s$ , object $o$ , and time $t$ , ii) sets of 3D Gaussians that serve as a geometry scaffold for the scene and objects, and iii) implicit neural fields that model appearance and modulate the geometry scaffold according to the conditioning signals. See Figure 2 for an overview of our method. ", "page_idx": 3}, {"type": "text", "text": "Scene configuration. Inspired by [17], we factorize the scene with a graph representation $\\mathcal{G}=(\\mathcal{V},\\mathcal{E})$ , holding latent conditioning signals at the nodes $\\nu$ and coordinate system transformations along the edges $\\mathcal{E}$ . The nodes $\\mathcal{V}$ consist of a root node $v_{r}$ defining the global coordinate system, camera nodes $\\{v_{c}\\}_{c\\in C}$ , and for each sequence $s\\in S$ , sequence nodes $\\{v_{s}^{t}\\}_{t\\in T_{s}}$ and dynamic object nodes $\\{v_{o}\\}_{o\\in O_{s}}$ . We associate latent vectors $\\omega$ to sequence and object nodes representing local appearance and geometry. Specifically, we model the time-varying sequence appearance and geometry via ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\omega_{s}^{t}:=[\\mathbf{A}_{s}\\gamma(t),\\,\\mathbf{G}_{s}\\gamma(t)]\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathtt{A}_{s}$ and ${\\sf G}_{s}$ are appearance and geometry modulation matrices, respectively, and $\\gamma(\\cdot)$ is a 1D basis function of sines and cosines with linearly increasing frequencies at log-scale [35]. Time $t$ is normalized to $[-1,1]$ via the maximum sequence length $\\mathrm{max}_{s\\in S}\\left|T_{s}\\right|$ . For objects, we use both an object code and a time encoding ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\omega_{o}^{t}:=\\left[\\omega_{o},\\gamma(t)\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Nodes in the graph $\\mathcal{G}$ are connected by oriented edges that define rigid transformations between the canonical frames of the nodes. We have $\\mathsf{P}_{s}^{t}$ for sequence to root edges, $\\mathsf{P}_{c}$ for camera to sequence edges, and $\\xi_{o}^{t}$ for object to sequence edges. ", "page_idx": 3}, {"type": "text", "text": "3D Gaussians. We represent the scene geometry with sets of anisotropic 3D Gaussians primitives $G=\\{G_{r}\\}\\cup\\{G_{o}:o\\stackrel{.}{\\in}O_{s},s\\in S\\}$ . Each 3D Gaussian primitive ${\\mathfrak{g}}_{k}$ is parameterized by its mean ", "page_idx": 3}, {"type": "text", "text": "$\\pmb{\\mu}_{k}$ , covariance matrix $\\Sigma_{k}$ , and a base opacity $\\alpha_{k}$ . The covariance matrix is decomposed into a rotation matrix represented as a unit quaternion $q_{k}$ and a scaling vector $a_{k}\\in\\mathbb{R}_{+}^{3}$ . The geometry of ${\\mathfrak{g}}_{k}$ is represented by ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathfrak{g}_{k}(\\mathbf{x})=\\exp\\left(-\\frac{1}{2}[\\mathbf{x}-\\pmb{\\mu}_{k}]^{\\top}\\Sigma_{k}^{-1}[\\mathbf{x}-\\pmb{\\mu}_{k}]\\right)\\,.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The common scene geometry scaffold is modeled with a single set of 3D Gaussians $G_{r}$ , while we have a separate set $G_{o}$ of 3D Gaussians for each dynamic object $o$ . Indeed, scene geometry is largely consistent across sequences while object geometries are distinct. The 3D Gaussians $G_{r}$ are represented in world frame, while each set $G_{o}$ is represented in a canonical, object-centric coordinate frame, which can be mapped to the world frame by traversing $\\mathcal{G}$ . ", "page_idx": 4}, {"type": "text", "text": "Differently from [18], our 3D Gaussians do not hold any appearance information, reducing the memory footprint of the representation by more than $80\\%$ . Instead, we leverage neural fields to regress a color information $\\mathbf{c}_{k}^{s,t}$ and an updated opacity $\\alpha_{k}^{s,t}$ for each sequence $s\\in S$ and time $t\\in T_{s}$ . For 3D Gaussians in $G_{r}$ modeling the scene scaffolding, we predict an opacity attenuation term $\\nu_{k}^{s,t}$ that is used to model transient geometry by downscaling $\\alpha_{k}$ . Instead, for 3D Gaussians in $G_{o}$ modeling objects the base opacity is left invariant. Hence ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\alpha_{k}^{s,t}:={\\binom{\\nu_{k}^{s,t}\\alpha_{k}}{\\alpha_{k}}}\\quad{\\mathrm{if~}}\\mathfrak{g}_{k}\\in G_{r}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The attenuation term enforces a high base opacity for every 3D Gaussian visible in at least one sequence. Therefore, we can obtain pruning decisions in ADC by thresholding the base opacity $\\alpha_{k}$ , which is directly accessible without computational overhead, without risking the removal of transient geometry. ", "page_idx": 4}, {"type": "text", "text": "Furthermore, in the presence of non-rigid objects $o$ , we predict deformation terms $\\delta_{k}^{t}\\in\\mathbb{R}^{3}$ to the position of 3D primitives in $G_{o}$ via the neural fields, for each time $t\\in T_{o}$ . In this case, the position of the primitive in object-centric space at time $t$ is given by ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\pmb{\\mu}_{k}^{t}:=\\pmb{\\mu}_{k}+\\delta_{k}^{t}\\,.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Appearance and transient geometry. Given the scene graph $\\mathcal{G}$ and the 3D Gaussians $G$ , we use two neural fields to decode the aforementioned parameters for each primitive. In particular, for 3D Gaussians in $G_{r}$ modeling the static scene, the neural field is denoted by $\\phi$ and regresses the opacity attenuation term \u03bdks,t and a color $\\mathbf{c}_{k}^{s,t}$ , given the 3D Gaussian primitive\u2019s position $\\pmb{\\mu}_{k}$ , a viewing direction $\\mathbf{d}$ , the base opacity $\\alpha_{k}$ and the latent code of the node $\\omega_{s}^{t}$ , i.e. ", "page_idx": 4}, {"type": "equation", "text": "$$\n(\\nu_{k}^{s,t},\\,\\mathbf{c}_{k}^{s,t}):=\\phi(\\mu_{k},\\mathbf{d},\\alpha_{k},\\omega_{s}^{t})\\,.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $s\\in S$ and $t\\in T_{s}$ . Note that since the opacity attenuation $\\nu_{k}^{s,t}$ contributes to modeling transient geometry by removing parts of the scene encoded in the original set of Gaussians, it does not depend on the viewing direction $\\mathbf{d}$ . ", "page_idx": 4}, {"type": "text", "text": "For 3D Gaussians in $G_{o}$ modeling dynamic objects, the neural field is denoted by $\\psi$ and regresses a cotlor $\\mathbf{c}_{k}^{s,t}$ t. Besides the primitive\u2019s position and viewing direction, we condition $\\psi$ on latent vectors and $\\omega_{o}^{t}$ to model both local object texture and global sequence appearance such as illumination. Here, the sequence $s$ is the one where $o$ belongs to, i.e. satisfying $o\\in O_{s}$ , and $t\\in T_{o}$ . Accordingly, the color $\\mathbf{c}_{k}^{s,t}$ for a 3D Gaussian in $G_{o}$ is given by ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{c}_{k}^{s,t}:=\\boldsymbol{\\psi}(\\boldsymbol{\\mu}_{k},\\mathbf{d},\\omega_{s}^{t},\\omega_{o}^{t})\\,.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Both $\\pmb{\\mu}_{k}$ and $\\mathbf{d}$ are expressed in the canonical, object-centric space of object $o$ . Using neural fields has three key advantages for our purpose. First, by sharing the parameters of $\\phi$ and $\\psi$ across all 3D Gaussians $G$ , we achieve a significantly more compact representation than in [18] when scaling to large-scale urban areas. Second, it allows us to model sequence-dependent appearance and transient geometry which is fundamental to learning a scene representation from heterogeneous data. Third, information sharing between nodes enables an interaction of sequence and object appearance. ", "page_idx": 4}, {"type": "text", "text": "However, querying a neural field is more complex than a spherical harmonics function as in [18]. Therefore, we i) use efficient hash-grid representations [53] to minimize query complexity and, ii) ", "page_idx": 4}, {"type": "text", "text": "carefully optimize the rendering workflow to minimize the amount of queries. In particular, we skip out-of-view 3D Gaussians and implement a vectorized query function to $\\psi$ that retrieves the parameters of all relevant dynamic objects in parallel. We refer to Section 4.3 for a runtime analysis. ", "page_idx": 5}, {"type": "text", "text": "Non-rigid objects. Street scenes are occupied not only by rigidly moving vehicles but also by, e.g., pedestrians and cyclists that move in a non-rigid manner. These pose a significant challenge due to their unconstrained motion under limited visual coverage. Therefore, we take a decomposed approach to modeling non-rigid objects. First, we represent the local articulated motion of non-rigid objects like pedestrians as deformation in canonical space. We use deformation head $\\chi$ that predicts a local position offset $\\delta_{k}^{t}$ via ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\delta_{k}^{t}:=\\chi(\\mathbf{f}_{\\psi},\\gamma(t))\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "given an intermediate feature representation $\\mathbf{f}_{\\psi}$ of $\\psi$ conditioned on $\\pmb{\\mu}_{k}$ and time $t$ . We deform the position of $\\pmb{\\mu}_{k}$ over time in canonical space as per Equation (5). Second, we use the scene graph $\\mathcal{G}$ to model the global rigid object motion, transforming the objects from object-centric to world space with a rigid body transformation. We use a general design to cover a wide range of scenarios, such as pedestrians holding a stroller or shopping bags, cyclists, and animals. See Figure 10 in our supp. mat. ", "page_idx": 5}, {"type": "text", "text": "Background modeling. To achieve a faithful rendering of far-away objects and the sky, it is important to have a background model. Inspired by [54], where points are sampled along a ray at increasing distance outside the scene bounds, we place 3D Gaussians on spheres around the scene with radius $r2^{i+1}$ for $i\\in\\{1,2,3\\}$ where $r$ is half of the scene bound diameter. To avoid ambiguity with foreground scene geometry and to increase efficiency, we remove all points that are i) below the ground plane, ii) occluded by foreground scene points, or iii) outside of the view frustum of any training view. To uniformly distribute points on each sphere, we utilize the Fibonacci sphere sampling algorithm [78], which arranges points in a spiral pattern using a golden ratio-based formula. Even though this sampling is not optimal, it serves as a faster approximation of the optimal sampling. ", "page_idx": 5}, {"type": "text", "text": "3.3 Composition and Rendering ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Scene composition. To render our representation from the perspective of camera $c$ at time $t$ in sequence $s$ , we traverse the graph $\\mathcal{G}$ to obtain the latent vector $\\omega_{s}^{t}$ and the latent vector $\\omega_{o}^{t}$ of each visible object $o\\in O_{s}$ , i.e. such that $t\\in T_{o}$ . Moreover, for each 3D Gaussian primitive ${\\mathfrak{g}}_{k}$ in $G$ , we use the collected camera parameters, object scale, and pose information to determine the transformation $\\Pi_{k}^{c}$ mapping points from the primitive\u2019s reference frame (e.g. world for $G_{r}$ , object-space for $G_{o}$ ) to the image space of camera $c$ . Opacities $\\alpha_{k}^{s,t}$ are computed as per Equation (4), while colors $\\mathbf{c}_{k}^{s,t}$ are computed for primitives in $G_{r}$ and in $G_{o}$ via Equations (6) and (7), respectively. For non-rigid objects in $G_{o}$ , we compute the primitive positions $\\pmb{\\mu}_{k}^{t}$ via Equation (5). ", "page_idx": 5}, {"type": "text", "text": "Rasterization. To render the scene from camera $c$ , we follow [18] and splat the 3D Gaussians to the image plane. Practically, for each primitive, we compute a 2D Gaussian kernel denoted by ${\\mathfrak{g}}_{k}^{c}$ with mean $\\pmb{\\mu}_{k}^{c}$ given by the projection of the primitive\u2019s position to the image plane, i.e. $\\mu_{k}^{c}:=\\Pi_{k}^{\\ddot{c}}(\\mu_{k})$ , and with covariance given by $\\Sigma_{k}^{c}\\,:=\\,\\mathsf{J}_{k}^{c}\\Sigma_{k}\\mathsf{J}_{k}^{c\\top}$ , where $\\mathtt{J}_{k}^{c}$ is the Jacobian of $\\Pi_{k}^{c}$ evaluated at $\\pmb{\\mu}_{k}$ . Finally, we apply traditional alpha compositing of the 3D Gaussians to render pixels $\\mathbf{p}$ of camera $c$ : ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathbf{c}^{s,t}(\\mathbf{p}):=\\sum_{k=0}^{K}\\mathbf{c}_{k}^{s,t}w_{k}\\prod_{j=0}^{k-1}(1-w_{j})\\qquad{\\mathrm{with}}\\quad w_{k}:=\\alpha_{k}^{s,t}\\mathfrak{g}_{k}^{c}(\\mathbf{p})\\,.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "3.4 Optimization ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "To optimize parameters $\\theta$ of $f_{\\theta}$ , i.e. 3D Gaussian parameters $\\pmb{\\mu}_{k}$ ${\\bf\\Phi}_{\\mathrm{c}},\\,\\alpha_{k},\\,q_{k}$ and $a_{k}$ , sequence latent vectors $\\omega_{s}^{t}$ and implicit neural fields $\\psi$ and $\\phi$ , we use an end-to-end differentiable rendering pipeline. We render both an RGB color image $\\hat{\\mathbb{I}}$ and a depth image $\\hat{\\mathcal D}$ and apply the following loss function: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}(\\hat{\\mathrm{I}},\\mathrm{I},\\hat{D},D)=\\lambda_{\\mathrm{rgb}}\\mathcal{L}_{\\mathrm{rgb}}(\\hat{\\mathrm{I}},\\mathrm{I})+\\lambda_{\\mathrm{sim}}\\mathcal{L}_{\\mathrm{sim}}(\\hat{\\mathrm{I}},\\mathrm{I})+\\lambda_{\\mathrm{dep}}\\mathcal{L}_{\\mathrm{dep}}(\\hat{D},D)\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\mathcal{L}_{\\mathrm{rgb}}$ is the L1 norm, $\\mathcal{L}_{\\mathrm{ssim}}$ is the structural similarity index measure [79], and $\\mathcal{L}_{\\mathrm{dep}}$ is the L2 norm. We use the posed training images and LiDAR measurements as the ground truth. If no depth ground-truth is available, we drop the depth-related loss from $\\mathcal{L}$ . ", "page_idx": 5}, {"type": "text", "text": "Pose optimization. Next to optimizing scene geometry, it is crucial to refine the pose parameters of the reconstruction for in-the-wild scenarios since provided poses often have limited accuracy [10, 17]. ", "page_idx": 5}, {"type": "table", "img_path": "xZxXNhndXU/tmp/734578eeddfca334117a05a1eacac9d1ac311c52d38a321b4f010f043bd8c68a.jpg", "table_caption": [], "table_footnote": ["Table 1: Novel view synthesis on Argoverse 2 [81]. Our method improves substantially over the state-of-the-art while being more than $200\\times$ faster to render at the original $1550\\times2048$ resolution. "], "page_idx": 6}, {"type": "text", "text": "Thus, we optimize the residuals $\\Delta\\mathsf{P}_{s}^{t}\\in\\mathfrak{s e}(3)$ , $\\Delta\\mathsf{P}_{c}\\in\\mathfrak{s e}(3)$ and $\\Delta\\xi_{o}^{t}\\in\\mathfrak{s e}(2)$ jointly with parameters $\\theta$ . We constrain object pose residuals to $\\mathfrak{s e}(2)$ to incorporate the prior that objects move on the ground plane and are oriented upright. See our supp. mat. for details on camera pose gradients. ", "page_idx": 6}, {"type": "text", "text": "Adaptive density control. To facilitate the growth and pruning of 3D Gaussian primitives, the optimization of the parameters $\\theta$ is interleaved by an ADC mechanism [18]. This mechanism is essential to achieve photo-realistic rendering. However, it was not designed for training on tens of thousands of images, and thus we develop a streamlined multi-GPU version of it. We accumulate statistics across processes and, instead of running ADC on GPU 0 and synchronizing the results, we synchronize only non-deterministic parts of ADC, i.e. the random samples drawn from the 3D Gaussians that are being split. These are usually much fewer than the total number of 3D Gaussians and thus avoids communication overhead. Next, the 3D Gaussian parameters are replaced by their updated replicas. However, this will impair the synchronization of the gradients because, in PyTorch DDP [80], parameters are only registered once at model initialization. Therefore, we re-initialize the Reducer upon finishing the ADC mechanism in the low-level API provided in [80]. ", "page_idx": 6}, {"type": "text", "text": "Furthermore, urban street scenes pose some unique challenges to ADC, such as a large variation in scale, e.g. extreme close-ups of nearby cars mixed with far-away buildings and sky. This can lead to blurry renderings for close-ups due to insufficient densification. We address this by using maximum 2D screen size as a splitting criterion.1 In addition, ADC considers the world-space scale $a_{k}$ of a 3D Gaussian to prune large primitives which hurts background regions far from the camera. Hence, we first test if a 3D Gaussian is inside the scene bounds before pruning it according to $a_{k}$ . Finally, the scale of urban areas leads to memory issues when the growth of 3D Gaussian primitives is unconstrained. Therefore, we introduce a threshold that limits primitive growth while keeping pruning in place. See our supp. mat. for more details and analysis. ", "page_idx": 6}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Datasets and metrics. We evaluate our approach across various dynamic outdoor benchmarks. First, we utilize the recently proposed NVS benchmark [17] of Argoverse 2 [81] to compare against the state-of-the-art in the multi-sequence scenario and to showcase the scalability of our method. Second, we use the established Waymo Open [23], KITTI [21] and VKITTI2 [22] benchmarks to compare to existing approaches in single-sequence scenarios. For Waymo, we use the dynamic-32 split of [76], while for KITTI and VKITTI2 we follow [16, 17]. We apply commonly used metrics to measure view synthesis quality: PSNR, SSIM [79], and LPIPS (AlexNet) [82]. ", "page_idx": 6}, {"type": "text", "text": "Implementation details. We use $\\lambda_{\\mathrm{rgb}}:=0.8$ , $\\lambda_{\\mathrm{ssim}}:=0.2$ and $\\lambda_{\\mathrm{depth}}:=0.05$ . We use the LiDAR point clouds as initialization for the 3D Gaussians. We first fliter the points of dynamic objects using the 3D bounding box annotations and subsequently initialize the static scene with the remaining points while using the filtered points to initialize each dynamic object. We use mean voxelization with voxel size $\\tau$ to remove redundant points. See our supp. mat. for more details. ", "page_idx": 6}, {"type": "text", "text": "4.1 Comparison to state-of-the-art ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We compare with prior art across two experimental settings: single-sequence and multi-sequence. In the former, we are given a single input sequence and aim to synthesize hold-out viewpoints from that same sequence. In the latter, we are given multiple, heterogeneous input sequences and aim to synthesize hold-out viewpoints across all of these sequences from a single model. ", "page_idx": 6}, {"type": "table", "img_path": "xZxXNhndXU/tmp/b6fc9507b6f3734e55aa12ac6c794e1c66ef79ed3dea5d0d66a87b21fe0b2f9a.jpg", "table_caption": ["Table 2: Novel view synthesis on KITTI [21] and VKITTI2 [22]. Our method produces state-of-the-art results across both benchmarks and at varying training view fractions. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Multi-sequence setting. In Table 1, we show results on the Argoverse 2 NVS benchmark proposed in [17]. We compare to state-of-the-art approaches [16, 17] and the baselines introduced in [17]. The results highlight that our approach scales well to large-scale dynamic urban scenes, outperforming previous work in performance and rendering speed by a significant margin. Specifically, we outperform [17] by more than $3\\ \\mathrm{dB}$ in PSNR while rendering more than $200\\times$ faster. To examine these results more closely, we show a qualitative comparison in Figure 3. We see that while SUDS [16] struggles with dynamic objects and ML-NSG [17] produces blurry renderings, our work provides sharp renderings and accurately represented dynamic objects, in both RGB color and depth images. Overall, the results highlight that our model can faithfully represent heterogeneous data at high visual quality in a single 3D representation while being much faster to render than previous work. ", "page_idx": 7}, {"type": "text", "text": "Single-sequence setting. In Table 2, we show results on the KITTI [21] and VKITTI [22] benchmarks at varying training view fractions, i.e. from dense towards sparse view setting. Furthermore, we follow the experimental protocol in [77] and show an additional comparison on the KITTI dataset with a different data split that uses also approx. $50\\%$ of views for training in Table 3. Our approach consistently outperforms previous work as well as concurrent 3D Gaussian-based approaches [73]. In Table 4, we show results on Waymo Open [23], specifically on the ", "page_idx": 7}, {"type": "table", "img_path": "xZxXNhndXU/tmp/9a6af356a94002651775793d5dec18ee920a95b6635fca196bb63898b36e9ba0.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Dynamic-32 split proposed in [76]. We outperform previous work by a large margin while our rendering speed is $700\\times$ faster than the best alternative. Note that our rendering speed increases for smaller-scale scenes. Furthermore, we show that, contrary to previous approaches, our method does not suffer from lower view quality in dynamic areas. This corroborates the strength of our contributions, showing that our method is not only scalable to large-scale, heterogeneous street data but also demonstrates superior performance in smaller-scale, homogeneous street data. ", "page_idx": 7}, {"type": "text", "text": "4.2 Ablation studies ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We verify our design choices in both multi- and single-sequence settings. For a fair comparison, we set the global maximum of 3D Gaussians to 8 and 4.1 million, respectively. We perform these ablation studies on the residential split of [17]. We use the full overlap in the multi-sequence setting, while using a single sequence of this split for the single", "page_idx": 7}, {"type": "table", "img_path": "xZxXNhndXU/tmp/2030ad72679ea05e363dd6fed118aca8ab7a4e6d600ca262fef90a2e4ee7427d.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Table 4: Novel view synthesis on Waymo Open [23]. We use the Dynamic-32 split [76]. Contrary to prior work, we do not exhibit lower view quality in dynamic areas. ", "page_idx": 7}, {"type": "text", "text": "sequence setting. In Table 5a, we verify the components that are not specific to the multi-sequence setting. In particular, we show that our approach to modeling scene dynamics is highly effective, evident from the large disparity in performance between the static and the dynamic variants. Next, we show that modeling appearance with a neural field is on par with the proposed solution in [18], while being more memory efficient. In particular, when modeling view-dependent color as a per-Gaussian attribute as in [18] the model uses $8.6\\,\\mathrm{GB}$ of peak GPU memory during training, while it uses only 4.5 GB with fixed-size neural fields. Similarly, storing the parameters of the former takes $922\\,\\mathrm{MB}$ , while the latter takes only 203 MB. Note that this disparity increases with the number of 3D Gaussians per scene. Finally, we achieve the best performance when adding the generated 3D Gaussian background. ", "page_idx": 7}, {"type": "table", "img_path": "xZxXNhndXU/tmp/dd1b236bdaa5135113b31a78306340aceabe45c847a0efe9d406f19ee7050a9f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "xZxXNhndXU/tmp/5bd8fef0246b30d8b43696ef4087645d8630e08cb1006a1dfae796060efb6d94.jpg", "table_caption": ["Table 5: Ablation studies. We show that (a) our approaches to modeling scene dynamics and background regions are effective and neural fields are on-par with spherical harmonics while more memory efficient to train, and (b) using implicit fields for appearance and geometry is crucial for the multi-sequence setting. We control for the maximum number of 3D Gaussians for fair comparison. ", "Table 6: Inference runtime analysis. We report the individual and average timings of our method\u2019s components on two datasets. Overall, scene graph evaluation (1.) and rasterization (5.), dominate the runtime. While total runtime correlates with scene scale and image resolution, we achieve interactive frame rates on both datasets. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "We now scrutinize components specific to multi-sequence data in Table 5b. We compare the view synthesis performance of our model when i) not modeling sequence appearance or transient geometry, ii) only modeling sequence appearance, iii) modeling both sequence appearance and transient geometry. Naturally, we observe a large gap in performance between i) and ii), since the appearance changes between sequences are drastic (see Figure 3). However, there is still a significant gap between ii) and iii), demonstrating that modeling both sequence appearance and transient geometry is important for view synthesis from heterogeneous data sources. Finally, we provide qualitative results for non-rigid object view synthesis in Figure 4, and show that our approach can model articulate motion without the use of domain priors. In our supp. mat., we provide further analysis. ", "page_idx": 8}, {"type": "text", "text": "4.3 Runtime analysis ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We divide our algorithm into its main components and report the individual inference runtimes across two datasets in Table 6. While the runtime clearly correlates with scene complexity and image resolution, we observe that, on average, the runtime is dominated by scene graph evaluation and rasterization, accounting for more than $75\\%$ of the total runtime. This owes to the complexity of rasterizing millions of primitives across a high-resolution image which is computationally demanding even for efficient rasterization algorithms [18], and handling hundreds to thousands of dynamic objects across one or multiple dynamic captures, making the retrieval of the 3D Gaussians and latent codes costly. In contrast, the queries to the neural fields account for only $13.3\\%$ of the average total runtime, making it a viable alternative to the spherical harmonics function in [18]. Overall, our method achieves interactive rendering speeds on both datasets and 20.4 FPS on average. ", "page_idx": 8}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We presented 4DGF, a neural scene representation for dynamic urban areas. 4DGF models highly dynamic, large-scale urban areas with 3D Gaussians as efficient geometry scaffold and compact but flexible neural fields modeling large appearance and geometry variations across captures. We use a scene graph to model dynamic object motion and flexibly compose the representation at arbitrary configurations and conditions. We jointly optimize the 3D Gaussians, the neural fields, and the scene graph, showing state-of-the-art view synthesis quality and interactive rendering speeds. ", "page_idx": 8}, {"type": "image", "img_path": "xZxXNhndXU/tmp/330c309149700ad5673f81a928eac0776f46fae941fb831564b4c78184c0c013.jpg", "img_caption": ["Figure 3: Qualitative results on Argoverse 2 [81]. Our method produces significantly sharper renderings both in foreground dynamic and static background regions, with much fewer artifacts e.g. in areas with transient geometry such as tree branches (left). Best viewed digitally. "], "img_footnote": [], "page_idx": 9}, {"type": "image", "img_path": "xZxXNhndXU/tmp/97ab2cd2709eb7346ba7f058fb72cbbc7b30bcd279083535a65a9facc29f2be2.jpg", "img_caption": ["Figure 4: Qualitative results on Waymo Open [23]. We show a sequence of evaluation views synthesized by our model (top-left to bottom-right). As the woman (marked with a red box) gets out of the car and walks away, we successfully model her articulated motion and changing body poses. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Limitations and future work. While 4DGF improves novel view synthesis in dynamic urban areas, the challenging nature of the problem leaves room for further exploration. Although we model scene dynamics, appearance, and geometry variations, other factors influence image renderings in real-world captures. First, in-the-wild captures often exhibit distortions caused by the physical image formation process. Therefore, modeling phenomena like rolling shutter, white balance, motion and defocus blur, or chromatic aberrations is necessary to avoid reconstruction artifacts. Second, the assumption of a pinhole camera model in [18] persists in our work. Thus, our method falls short of modeling more complex camera models like equirectangular cameras and other sensors such as LiDAR, which may be limiting for certain capturing or simulation settings. ", "page_idx": 9}, {"type": "text", "text": "Broader impact. We expect our work to positively impact real-world use cases like robotic simulation and mixed reality by improving the underlying technology. While we do not expect malicious uses of our method, we note that an inaccurate simulation, i.e. a failure of our system, could misrepresent the robotic system performance, possibly affecting real-world deployment. ", "page_idx": 9}, {"type": "text", "text": "6 Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "The authors thank Haithem Turki, Songyou Peng, Erik Sandstr\u00f6m, Fran\u00e7ois Darmon, and Jonathon Luiten for useful discussions. Tobias Fischer was supported by a Meta SRA. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] L. Mescheder, M. Oechsle, M. Niemeyer, S. Nowozin, and A. Geiger, \u201cOccupancy networks: Learning 3d reconstruction in function space,\u201d in CVPR, 2019.   \n[2] V. Sitzmann, M. Zollh\u00f6fer, and G. Wetzstein, \u201cScene representation networks: Continuous 3d-structureaware neural scene representations,\u201d NeurIPS, 2019.   \n[3] B. Mildenhall, P. P. Srinivasan, M. Tancik, J. T. Barron, R. Ramamoorthi, and R. Ng, \u201cNerf: Representing scenes as neural radiance fields for view synthesis,\u201d Communications of the ACM, vol. 65, no. 1, pp. 99\u2013106, 2021.   \n[4] Z. Li, S. Niklaus, N. Snavely, and O. Wang, \u201cNeural scene flow fields for space-time view synthesis of dynamic scenes,\u201d in CVPR, 2021.   \n[5] A. Pumarola, E. Corona, G. Pons-Moll, and F. Moreno-Noguer, \u201cD-nerf: Neural radiance fields for dynamic scenes,\u201d in CVPR, 2021.   \n[6] E. Tretschk, A. Tewari, V. Golyanik, M. Zollh\u00f6fer, C. Lassner, and C. Theobalt, \u201cNon-rigid neural radiance fields: Reconstruction and novel view synthesis of a dynamic scene from monocular video,\u201d in ICCV, 2021.   \n[7] W. Xian, J.-B. Huang, J. Kopf, and C. Kim, \u201cSpace-time neural irradiance fields for free-viewpoint video,\u201d in CVPR, 2021.   \n[8] R. Martin-Brualla, N. Radwan, M. S. Sajjadi, J. T. Barron, A. Dosovitskiy, and D. Duckworth, \u201cNerf in the wild: Neural radiance fields for unconstrained photo collections,\u201d in CVPR, 2021.   \n[9] K. Rematas, A. Liu, P. P. Srinivasan, J. T. Barron, A. Tagliasacchi, T. Funkhouser, and V. Ferrari, \u201cUrban radiance fields,\u201d in CVPR, 2022.   \n[10] M. Tancik, V. Casser, X. Yan, S. Pradhan, B. Mildenhall, P. P. Srinivasan, J. T. Barron, and H. Kretzschmar, \u201cBlock-nerf: Scalable large scene neural view synthesis,\u201d in CVPR, 2022.   \n[11] J. Y. Liu, Y. Chen, Z. Yang, J. Wang, S. Manivasagam, and R. Urtasun, \u201cReal-time neural rasterization for large scenes,\u201d in ICCV, 2023.   \n[12] Z. Xie, J. Zhang, W. Li, F. Zhang, and L. Zhang, \u201cS-nerf: Neural radiance fields for street views,\u201d arXiv preprint arXiv:2303.00749, 2023.   \n[13] Z. Wang, T. Shen, J. Gao, S. Huang, J. Munkberg, J. Hasselgren, Z. Gojcic, W. Chen, and S. Fidler, \u201cNeural fields meet explicit geometric representations for inverse rendering of urban scenes,\u201d in CVPR, 2023.   \n[14] V. Rudnev, M. Elgharib, W. Smith, L. Liu, V. Golyanik, and C. Theobalt, \u201cNerf for outdoor scene relighting,\u201d in ECCV, 2022.   \n[15] J. Ost, F. Mannan, N. Thuerey, J. Knodt, and F. Heide, \u201cNeural scene graphs for dynamic scenes,\u201d in CVPR, 2021.   \n[16] H. Turki, J. Y. Zhang, F. Ferroni, and D. Ramanan, \u201cSuds: Scalable urban dynamic scenes,\u201d in CVPR, 2023.   \n[17] T. Fischer, L. Porzi, S. Rota Bul\u00f2, M. Pollefeys, and P. Kontschieder, \u201cMulti-level neural scene graphs for dynamic urban environments,\u201d in CVPR, 2024.   \n[18] B. Kerbl, G. Kopanas, T. Leimk\u00fchler, and G. Drettakis, \u201c3d gaussian splatting for real-time radiance field rendering,\u201d ACM Transactions on Graphics, vol. 42, no. 4, 2023.   \n[19] Z. Chen, T. Funkhouser, P. Hedman, and A. Tagliasacchi, \u201cMobilenerf: Exploiting the polygon rasterization pipeline for efficient neural field rendering on mobile architectures,\u201d in CVPR, 2023.   \n[20] F. Lu, Y. Xu, G. Chen, H. Li, K.-Y. Lin, and C. Jiang, \u201cUrban radiance field representation with deformable neural mesh primitives,\u201d in ICCV, 2023.   \n[21] A. Geiger, P. Lenz, and R. Urtasun, \u201cAre we ready for autonomous driving? the kitti vision benchmark suite,\u201d in CVPR, 2012.   \n[22] Y. Cabon, N. Murray, and M. Humenberger, \u201cVirtual kitti 2,\u201d 2020.   \n[23] P. Sun, H. Kretzschmar, X. Dotiwalla, A. Chouard, V. Patnaik, P. Tsui, J. Guo, Y. Zhou, Y. Chai, B. Caine, et al., \u201cScalability in perception for autonomous driving: Waymo open dataset,\u201d in Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pp. 2446\u20132454, 2020.   \n[24] C. Cadena, L. Carlone, H. Carrillo, Y. Latif, D. Scaramuzza, J. Neira, I. Reid, and J. J. Leonard, \u201cPast, present, and future of simultaneous localization and mapping: Toward the robust-perception age,\u201d IEEE Transactions on robotics, vol. 32, no. 6, pp. 1309\u20131332, 2016.   \n[25] C. Shen, J. F. O\u2019Brien, and J. R. Shewchuk, \u201cInterpolating and approximating implicit surfaces from polygon soup,\u201d in ACM SIGGRAPH 2004 Papers, SIGGRAPH \u201904, p. 896\u2013904, 2004.   \n[26] J. Bloomenthal and B. Wyvill, \u201cIntroduction to implicit surfaces,\u201d 1997.   \n[27] M. Kaess, \u201cSimultaneous localization and mapping with infinite planes,\u201d 2015 IEEE International Conference on Robotics and Automation (ICRA), pp. 4605\u20134611, 2015.   \n[28] N. Fairfield, G. A. Kantor, and D. S. Wettergreen, \u201cReal-time slam with octree evidence grids for exploration in underwater tunnels,\u201d Journal of Field Robotics, vol. 24, 2007.   \n[29] Y. Lu and D. Song, \u201cVisual navigation using heterogeneous landmarks and unsupervised geometric constraints,\u201d IEEE Transactions on Robotics, vol. 31, pp. 736\u2013749, 2015.   \n[30] M. Pollefeys, D. Nist\u00e9r, J.-M. Frahm, A. Akbarzadeh, P. Mordohai, B. Clipp, C. Engels, D. Gallup, S. J. Kim, P. C. Merrell, C. Salmi, S. N. Sinha, B. Talton, L. Wang, Q. Yang, H. Stew\u00e9nius, R. Yang, G. Welch, and H. Towles, \u201cDetailed real-time urban 3d reconstruction from video,\u201d IJCV, vol. 78, pp. 143\u2013167, 2007.   \n[31] R. F. Salas-Moreno, R. A. Newcombe, H. Strasdat, P. H. Kelly, and A. J. Davison, \u201cSlam $^{++}$ : Simultaneous localisation and mapping at the level of objects,\u201d in CVPR, 2013.   \n[32] I. Armeni, Z.-Y. He, J. Gwak, A. R. Zamir, M. Fischer, J. Malik, and S. Savarese, \u201c3d scene graph: A structure for unified semantics, 3d space, and camera,\u201d in ICCV, 2019.   \n[33] J. Luiten, T. Fischer, and B. Leibe, \u201cTrack to reconstruct and reconstruct to track,\u201d IEEE Robotics and Automation Letters, vol. 5, no. 2, pp. 1803\u20131810, 2020.   \n[34] A. Schmied, T. Fischer, M. Danelljan, M. Pollefeys, and F. Yu, \u201cR3d3: Dense 3d reconstruction of dynamic scenes from multiple cameras,\u201d in ICCV, 2023.   \n[35] M. Niemeyer, L. Mescheder, M. Oechsle, and A. Geiger, \u201cDifferentiable volumetric rendering: Learning implicit 3d representations without 3d supervision,\u201d in CVPR, 2020.   \n[36] S. Fridovich-Keil, A. Yu, M. Tancik, Q. Chen, B. Recht, and A. Kanazawa, \u201cPlenoxels: Radiance fields without neural networks,\u201d in CVPR, 2022.   \n[37] Q. Xu, Z. Xu, J. Philip, S. Bi, Z. Shu, K. Sunkavalli, and U. Neumann, \u201cPoint-nerf: Point-based neural radiance fields,\u201d in CVPR, 2022.   \n[38] G. Riegler and V. Koltun, \u201cStable view synthesis,\u201d in CVPR, 2021.   \n[39] K. Park, U. Sinha, P. Hedman, J. T. Barron, S. Bouaziz, D. B. Goldman, R. Martin-Brualla, and S. M. Seitz, \u201cHypernerf: A higher-dimensional representation for topologically varying neural radiance fields,\u201d arXiv preprint arXiv:2106.13228, 2021.   \n[40] C. Gao, A. Saraf, J. Kopf, and J.-B. Huang, \u201cDynamic view synthesis from dynamic monocular video,\u201d in CVPR, 2021.   \n[41] T. Wu, F. Zhong, A. Tagliasacchi, F. Cole, and C. Oztireli, \u201cD\u02c6 2nerf: Self-supervised decoupling of dynamic and static objects from a monocular video,\u201d NeurIPS, 2022.   \n[42] J. Fang, T. Yi, X. Wang, L. Xie, X. Zhang, W. Liu, M. Nie\u00dfner, and Q. Tian, \u201cFast dynamic radiance fields with time-aware neural voxels,\u201d in SIGGRAPH Asia 2022 Conference Papers, 2022.   \n[43] B. Park and C. Kim, \u201cPoint-dynrf: Point-based dynamic radiance fields from a monocular video,\u201d 2023.   \n[44] J. Luiten, G. Kopanas, B. Leibe, and D. Ramanan, \u201cDynamic 3d gaussians: Tracking by persistent dynamic view synthesis,\u201d in 3DV, 2024.   \n[45] Z. Yang, Y. Chen, J. Wang, S. Manivasagam, W.-C. Ma, A. J. Yang, and R. Urtasun, \u201cUnisim: A neural closed-loop sensor simulator,\u201d in CVPR, 2023.   \n[46] Z. Li, Q. Wang, F. Cole, R. Tucker, and N. Snavely, \u201cDynibar: Neural dynamic image-based rendering,\u201d in CVPR, 2023.   \n[47] S. Cunningham and M. J. Bailey, \u201cLessons from scene graphs: using scene graphs to teach hierarchical modeling,\u201d Computers & Graphics, vol. 25, no. 4, pp. 703\u2013711, 2001.   \n[48] S. Tulsiani, S. Gupta, D. F. Fouhey, A. A. Efros, and J. Malik, \u201cFactoring shape, pose, and layout from the 2d image of a 3d scene,\u201d in CVPR, 2018.   \n[49] A. Kundu, K. Genova, X. Yin, A. Fathi, C. Pantofaru, L. J. Guibas, A. Tagliasacchi, F. Dellaert, and T. Funkhouser, \u201cPanoptic neural fields: A semantic object-aware neural scene representation,\u201d in CVPR, 2022.   \n[50] A. Rosinol, A. Gupta, M. Abate, J. Shi, and L. Carlone, \u201c3d dynamic scene graphs: Actionable spatial perception with places, objects, and humans,\u201d arXiv preprint arXiv:2002.06289, 2020.   \n[51] A. Tewari, J. Thies, B. Mildenhall, P. Srinivasan, E. Tretschk, W. Yifan, C. Lassner, V. Sitzmann, R. MartinBrualla, S. Lombardi, et al., \u201cAdvances in neural rendering,\u201d in Computer Graphics Forum, vol. 41, pp. 703\u2013735, Wiley Online Library, 2022.   \n[52] S. J. Garbin, M. Kowalski, M. Johnson, J. Shotton, and J. Valentin, \u201cFastnerf: High-fidelity neural rendering at 200fps,\u201d in Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 14346\u201314355, 2021.   \n[53] T. M\u00fcller, A. Evans, C. Schied, and A. Keller, \u201cInstant neural graphics primitives with a multiresolution hash encoding,\u201d ACM Transactions on Graphics (ToG), vol. 41, no. 4, pp. 1\u201315, 2022.   \n[54] J. T. Barron, B. Mildenhall, D. Verbin, P. P. Srinivasan, and P. Hedman, \u201cMip-nerf 360: Unbounded anti-aliased neural radiance fields,\u201d in CVPR, 2022.   \n[55] H. Turki, D. Ramanan, and M. Satyanarayanan, \u201cMega-nerf: Scalable construction of large-scale nerfs for virtual fly-throughs,\u201d in CVPR, 2022.   \n[56] J. C. Lee, D. Rho, X. Sun, J. H. Ko, and E. Park, \u201cCompact 3d gaussian representation for radiance field,\u201d arXiv preprint arXiv:2311.13681, 2023.   \n[57] A. Gu\u00e9don and V. Lepetit, \u201cSugar: Surface-aligned gaussian splatting for efficient 3d mesh reconstruction and high-quality mesh rendering,\u201d arXiv preprint arXiv:2311.12775, 2023.   \n[58] L. Radl, M. Steiner, M. Parger, A. Weinrauch, B. Kerbl, and M. Steinberger, \u201cStopthepop: Sorted gaussian splatting for view-consistent real-time rendering,\u201d arXiv preprint arXiv:2402.00525, 2024.   \n[59] Z. Yu, A. Chen, B. Huang, T. Sattler, and A. Geiger, \u201cMip-splatting: Alias-free 3d gaussian splatting,\u201d arXiv preprint arXiv:2311.16493, 2023.   \n[60] Z. Yu, T. Sattler, and A. Geiger, \u201cGaussian opacity fields: Efficient and compact surface reconstruction in unbounded scenes,\u201d arXiv preprint arXiv:2404.10772, 2024.   \n[61] O. Seiskari, J. Ylilammi, V. Kaatrasalo, P. Rantalankila, M. Turkulainen, J. Kannala, E. Rahtu, and A. Solin, \u201cGaussian splatting on the move: Blur and rolling shutter compensation for natural camera motion,\u201d arXiv preprint arXiv:2403.13327, 2024.   \n[62] F. Darmon, L. Porzi, S. Rota-Bul\u00f2, and P. Kontschieder, \u201cRobust gaussian splatting,\u201d arXiv preprint arXiv:2404.04211, 2024.   \n[63] S. R. Bul\u00f2, L. Porzi, and P. Kontschieder, \u201cRevising densification in gaussian splatting,\u201d arXiv preprint arXiv:2404.06109, 2024.   \n[64] Y. Jiang, J. Tu, Y. Liu, X. Gao, X. Long, W. Wang, and Y. Ma, \u201cGaussianshader: 3d gaussian splatting with shading functions for reflective surfaces,\u201d arXiv preprint arXiv:2311.17977, 2023.   \n[65] J. Lin, Z. Li, X. Tang, J. Liu, S. Liu, J. Liu, Y. Lu, X. Wu, S. Xu, Y. Yan, et al., \u201cVastgaussian: Vast 3d gaussians for large scene reconstruction,\u201d arXiv preprint arXiv:2402.17427, 2024.   \n[66] Z. Yang, X. Gao, W. Zhou, S. Jiao, Y. Zhang, and X. Jin, \u201cDeformable 3d gaussians for high-fidelity monocular dynamic scene reconstruction,\u201d arXiv preprint arXiv:2309.13101, 2023.   \n[67] G. Wu, T. Yi, J. Fang, L. Xie, X. Zhang, W. Wei, W. Liu, Q. Tian, and X. Wang, \u201c4d gaussian splatting for real-time dynamic scene rendering,\u201d arXiv preprint arXiv:2310.08528, 2023.   \n[68] D. Das, C. Wewer, R. Yunus, E. Ilg, and J. E. Lenssen, \u201cNeural parametric gaussians for monocular non-rigid object reconstruction,\u201d arXiv preprint arXiv:2312.01196, 2023.   \n[69] Y. Lin, Z. Dai, S. Zhu, and Y. Yao, \u201cGaussian-flow: 4d reconstruction with dynamic 3d gaussian particle,\u201d arXiv preprint arXiv:2312.03431, 2023.   \n[70] Z. Li, Z. Chen, Z. Li, and Y. Xu, \u201cSpacetime gaussian feature splatting for real-time dynamic view synthesis,\u201d arXiv preprint arXiv:2312.16812, 2023.   \n[71] Y. Liu, H. Guan, C. Luo, L. Fan, J. Peng, and Z. Zhang, \u201cCitygaussian: Real-time high-quality large-scale scene rendering with gaussians,\u201d arXiv preprint arXiv:2404.01133, 2024.   \n[72] B. Kerbl, A. Meuleman, G. Kopanas, M. Wimmer, A. Lanvin, and G. Drettakis, \u201cA hierarchical 3d gaussian representation for real-time rendering of very large datasets,\u201d ACM Transactions on Graphics, vol. 44, no. 3, 2024.   \n[73] Y. Yan, H. Lin, C. Zhou, W. Wang, H. Sun, K. Zhan, X. Lang, X. Zhou, and S. Peng, \u201cStreet gaussians for modeling dynamic urban scenes,\u201d arXiv preprint arXiv:2401.01339, 2024.   \n[74] H. Zhou, J. Shao, L. Xu, D. Bai, W. Qiu, B. Liu, Y. Wang, A. Geiger, and Y. Liao, \u201cHugs: Holistic urban 3d scene understanding via gaussian splatting,\u201d arXiv preprint arXiv:2403.12722, 2024.   \n[75] X. Zhou, Z. Lin, X. Shan, Y. Wang, D. Sun, and M.-H. Yang, \u201cDrivinggaussian: Composite gaussian splatting for surrounding dynamic autonomous driving scenes,\u201d arXiv preprint arXiv:2312.07920, 2023.   \n[76] J. Yang, B. Ivanovic, O. Litany, X. Weng, S. W. Kim, B. Li, T. Che, D. Xu, S. Fidler, M. Pavone, et al., \u201cEmernerf: Emergent spatial-temporal scene decomposition via self-supervision,\u201d arXiv preprint arXiv:2311.02077, 2023.   \n[77] A. Tonderski, C. Lindstr\u00f6m, G. Hess, W. Ljungbergh, L. Svensson, and C. Petersson, \u201cNeurad: Neural rendering for autonomous driving,\u201d in CVPR, 2024.   \n[78] E. J. Stollnitz, T. D. DeRose, and D. H. Salesin, Wavelets for computer graphics: theory and applications. Morgan Kaufmann, 1996.   \n[79] Z. Wang, A. C. Bovik, H. R. Sheikh, and E. P. Simoncelli, \u201cImage quality assessment: from error visibility to structural similarity,\u201d IEEE transactions on image processing, vol. 13, no. 4, pp. 600\u2013612, 2004.   \n[80] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, et al., \u201cPytorch: An imperative style, high-performance deep learning library,\u201d NeurIPS, 2019.   \n[81] B. Wilson, W. Qi, T. Agarwal, J. Lambert, J. Singh, S. Khandelwal, B. Pan, R. Kumar, A. Hartnett, J. K. Pontes, et al., \u201cArgoverse 2: Next generation datasets for self-driving perception and forecasting,\u201d arXiv preprint arXiv:2301.00493, 2023.   \n[82] R. Zhang, P. Isola, A. A. Efros, E. Shechtman, and O. Wang, \u201cThe unreasonable effectiveness of deep features as a perceptual metric,\u201d in CVPR, 2018.   \n[83] Z. Wu, T. Liu, L. Luo, Z. Zhong, J. Chen, H. Xiao, C. Hou, H. Lou, Y. Chen, R. Yang, et al., \u201cMars: An instance-aware, modular and realistic simulator for autonomous driving,\u201d in CAAI International Conference on Artificial Intelligence, pp. 3\u201315, Springer, 2023.   \n[84] M. Li, P. Zhou, J.-W. Liu, J. Keppo, M. Lin, S. Yan, and X. Xu, \u201cInstant3d: Instant text-to-3d generation,\u201d arXiv preprint arXiv:2311.08403, 2023.   \n[85] M. Tancik, E. Weber, E. Ng, R. Li, B. Yi, T. Wang, A. Kristoffersen, J. Austin, K. Salahi, A. Ahuja, et al., \u201cNerfstudio: A modular framework for neural radiance field development,\u201d in ACM SIGGRAPH 2023 Conference Proceedings, pp. 1\u201312, 2023.   \n[86] D. P. Kingma and J. Ba, \u201cAdam: A method for stochastic optimization,\u201d arXiv preprint arXiv:1412.6980, 2014.   \n[87] C.-H. Lin, W.-C. Ma, A. Torralba, and S. Lucey, \u201cBarf: Bundle-adjusting neural radiance fields,\u201d in ICCV, 2021.   \n[88] Z. Pang, Z. Li, and N. Wang, \u201cSimpletrack: Understanding and rethinking 3d multi-object tracking,\u201d arXiv preprint arXiv:2111.09621, 2021. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Appendix ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We provide further details on our method and the experimental setting, as well as additional experimental results. We accompany this supplemental material with a demonstration video. ", "page_idx": 14}, {"type": "text", "text": "A.1 Demonstration Video ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We showcase the robustness of our method by rendering a complete free-form trajectory across five highly diverse sequences using the same model. Specifically, we chose the model trained on the residential split in Argoverse 2 [81]. ", "page_idx": 14}, {"type": "text", "text": "To obtain the trajectory, we interpolate keyframes selected throughout the total geographic area of the residential split into a single, smooth trajectory that encompasses most of its spatial extent. We also apply periodical translations and rotations to this trajectory to increase the variety of synthesized viewpoints. We use a constant speed of 10 meters per second. We choose five different sequences in the data split as the references, spanning sunny daylight conditions in summer to near sunset in winter. Consequently, the appearance of the sequences changes drastically, e.g. from green, fully-leafed trees to empty branches and snow or from bright sunlight to dark clouds. Furthermore, we render each sequence with its unique set of dynamic objects, simulating various distinct traffic scenarios. ", "page_idx": 14}, {"type": "text", "text": "We show that our model is able to perform dynamic view synthesis in all of these conditions at high quality, faithfully representing scene appearance, transient geometry, and dynamic objects in each of the conditions. We highlight that this scenario is extremely difficult, as it requires the model to generalize well beyond the training trajectories, represent totally different appearances and geometry, and model hundreds of dynamic, fast-moving objects. Despite this fact, our method produces realistic renderings, showing its potential for real-world applications. ", "page_idx": 14}, {"type": "text", "text": "A.2 Method ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Neural field architectures. To maximize efficiency, we model $\\phi$ and $\\psi$ with hash grids and tiny MLPs [53]. The hash grids interpolate feature vectors at the nearest voxel vertices at multiple levels. The feature vectors are obtained by indexing a feature table with a hash function. Both neural fields are given input conditioning signals $\\omega_{s}^{t}\\in\\mathbb{R}^{64}$ and $\\omega_{o}^{t}:=[\\omega_{o}\\in\\mathbb{N},\\gamma(t)\\in\\mathbb{R}^{13}]$ and output a color $\\mathbf{c}$ among the other outputs defined in Section 3.2. ", "page_idx": 14}, {"type": "text", "text": "For $\\phi$ , we use the 3D Gaussian mean $\\pmb{\\mu}_{k}$ to query the hash function at a certain 3D position yielding an intermediate feature representation $\\mathbf{f}_{\\phi}$ . We input the feature $\\mathbf{f}_{\\phi}$ , the sequence latent code $\\omega_{s}^{t}$ , and the base opacity $\\alpha_{k}$ into $\\mathrm{MLP}_{\\alpha}$ which outputs the opacity attenuation $\\nu_{k}^{s,t}$ . In a parallel branch, we input $\\mathbf{f}_{\\phi}$ , $\\omega_{s}^{t}$ , and the viewing direction d encoded by a spherical harmonics encoding of degree 4 into the color head $\\mathrm{MLP_{c}}$ of $\\phi$ that will define the final color of the 3D Gaussian. ", "page_idx": 14}, {"type": "text", "text": "For $\\psi$ , we use a 4D hash function while using only three dimensions for interpolation of the feature vectors, effectively modeling a 4D hash grid. We use both the position $\\pmb{\\mu}_{k}$ and the object code $\\omega_{o}$ , i.e. the object identity, as the fourth dimension of the hash grid to model an arbitrarily large number of objects with a single hash table [16] without a linear increase in memory. ", "page_idx": 14}, {"type": "text", "text": "We input the intermediate feature $\\mathbf{f}_{\\psi}$ and the time encoding $\\gamma(t)$ into the deformation head $\\mathrm{MLP}_{\\chi}$ which will output the non-rigid deformation of the object at time $t$ , if applicable. In parallel, we input $\\omega_{s}^{t}$ , $\\mathbf{f}_{\\psi}$ , $\\bar{\\gamma(t)}$ , and the encoded relative viewing direction $\\mathbf{d}$ into the color head $\\mathrm{MLP_{c}}$ to output the final color. Note that relative viewing direction refers to the viewing direction in canonical, object-centric space. As noted in Section 3.2, the MLP heads are shared across all objects. ", "page_idx": 14}, {"type": "text", "text": "We list a detailed overview of the architectures in Table 7. Note that, i) we decrease the hash table size of $\\psi$ in single-sequence experiments to $2^{15}$ as we find this to be sufficient, and ii) we use two identical networks for $\\psi$ to separate rigid from non-rigid object instances. ", "page_idx": 14}, {"type": "text", "text": "Color prediction. The kernel function ${\\mathfrak{g}}_{k}$ prevents a full saturation of the rendered color within the support of the primitive as long as the primitive\u2019s RGB color is bounded in the [0, 1] range. This can be a problem for background and other uniformly textured regions that contain large 3D Gaussians, specifically larger than a single pixel. Therefore, inspired by [84], we use a scaled sigmoid activation ", "page_idx": 14}, {"type": "table", "img_path": "xZxXNhndXU/tmp/7c979d5112814a65affac1f4fc658d0d4bea0b46eb9aebbd87d221fdbbf67f94.jpg", "table_caption": [], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "Table 7: Neural field architectures. We provide the detailed parameter configurations of the neural fields we use to represent scene and object appearances. ", "page_idx": 15}, {"type": "text", "text": "function for the color head $\\mathrm{MLP_{c}}$ : ", "page_idx": 15}, {"type": "equation", "text": "$$\nf(x):={\\frac{1}{c}}\\mathrm{sigmoid}(c x)\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $c:=0.9$ is a constant scaling factor. This allows the color prediction to slightly exceed the valid [0, 1] RGB color space. After alpha compositing, we clamp the rendered RGB to the valid $[0,1]$ range following [18]. ", "page_idx": 15}, {"type": "text", "text": "Time-dependent appearance. In addition to conditioning the object appearance on the sequence at hand, we model the appearance of dynamic objects as a function of time by inputting $\\gamma(t)$ to $\\mathrm{MLP_{c}}$ as described above. This way, our method adapts to changes in scene lighting that are more intricate than the general scene appearance. This could be specular reflections, dynamic indicators such as brake lights, or shadows cast onto the object as it moves through the environment. ", "page_idx": 15}, {"type": "text", "text": "Space contraction. We use space contraction to query unbounded 3D Gaussian locations from the neural fields [54]. In particular, we use the following function for space contraction: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\zeta(\\mathbf{x}):={\\binom{\\mathbf{x},\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\left\\|\\mathbf{x}\\right\\|\\leq1}{\\left(2-{\\frac{1}{\\left\\|\\mathbf{x}\\right\\|}}\\right){\\frac{\\mathbf{x}}{\\left\\|\\mathbf{x}\\right\\|}}},\\quad\\left\\|\\mathbf{x}\\right\\|>1\\,.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "For $\\phi$ , we use $\\|\\cdot\\|_{\\infty}$ as the norm to contract the space, while for $\\psi$ we use the Frobenius norm $\\|\\cdot\\|_{F}$ . Note that we use space contraction for $\\psi$ because 3D Gaussians may extend beyond the 3D object dimensions to represent e.g. shadows, however, most of the representation capacity should be allocated to the object itself. ", "page_idx": 15}, {"type": "text", "text": "Continuous-time object poses. Both Argoverse 2 [81] and Waymo Open [23] provide precise timing information for both the LiDAR pointclouds to which the 3D bounding boxes are synchronized, and the camera images. Thus, we treat the dynamic object poses $\\{\\xi_{o}^{t_{0}},...,\\bar{\\xi}_{o}^{t_{n}}\\}$ as a continuous function of time $\\xi_{o}(t)$ , i.e. we interpolate between at $t_{a}\\leq t<t_{b}$ to time $t$ to compute $\\xi_{o}(t)$ . This also allows us to render videos at arbitrary frame rates with realistic, smooth object trajectories. ", "page_idx": 15}, {"type": "text", "text": "Anti-aliased rendering. Inspired by [59], we compensate for the screen space dilation introduced in [18] when evaluating ${\\mathfrak{g}}_{k}^{c}$ multiplying by a compensation factor: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathfrak{g}_{k}^{c}(\\mathbf{p}):=\\sqrt{\\frac{|\\Sigma_{k}^{c}|}{|\\Sigma_{k}^{c}+b\\mathbf{I}|}}\\,\\exp\\left(-\\frac{1}{2}(\\mathbf{p}-\\pmb{\\mu}_{k}^{c})^{\\top}(\\Sigma_{k}^{c}+b\\mathbf{I})^{-1}(\\mathbf{p}-\\pmb{\\mu}_{k}^{c})\\right)\\,,\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $b$ is chosen to cover a single pixel in screen space. This helps us to render views at different sampling rates. ", "page_idx": 15}, {"type": "text", "text": "Gradients of camera parameters. Different from [18], we not only optimize the scene geometry but also the parameters of the camera poses. This greatly improves view quality in scenarios with imperfect camera calibration which is frequently the case in street scene datasets. In particular, we approximate the gradients w.r.t. a camera pose $[\\mathbf{\\dot{R}}|\\mathbf{t}]$ as: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathcal{L}}{\\partial\\mathbf{t}}\\approx-\\sum_{k}\\frac{\\partial\\mathcal{L}}{\\partial\\mu_{k}}\\,,\\qquad\\frac{\\partial\\mathcal{L}}{\\partial\\mathbf{R}}\\approx-\\left[\\sum_{k}\\frac{\\partial\\mathcal{L}}{\\partial\\mu_{k}}(\\mu_{k}-\\mathbf{t})^{\\top}\\right]\\mathbf{R}\\,.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "This formulation was concurrently proposed in [61], so we refer to them for a detailed derivation. We obtain the gradients w.r.t. the vehicle poses $\\xi$ via automatic differentiation [80]. ", "page_idx": 15}, {"type": "text", "text": "Adaptive density control. We elaborate on the modifications described in Section 3.4. Specifically, we observe that the same 3D Gaussian will be rendered at varying but dominantly small scales. This biases the distribution of positional gradients towards views where the object is relatively small in view space, leading to blurry renderings for close-ups due to insufficient densification. This motivates us to use maximum 2D screen size as an additional splitting criterion. ", "page_idx": 15}, {"type": "image", "img_path": "xZxXNhndXU/tmp/22e1f234640b27b9d20ccb5619daad63e30a014e479d848ec0719c0ef5dd95f5.jpg", "img_caption": ["Figure 5: Qualitative comparison of ADCs. We show an example of a close-up car and observe over-smoothing when using vanilla ADC while our modified ADC leads to a sharper rendering result. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "In addition to the adjustments described above and inspired by recent findings [60], we adapt the criterion of densification during ADC. In particular, Kerbl et al. [18] use the average absolute value of positional gradient \u2202L across multiple iterations. The positional gradient of a projected 3D Gaussian is the sum of the positional gradients across the pixels it covers: ", "page_idx": 16}, {"type": "equation", "text": "$$\n{\\frac{\\partial{\\mathcal{L}}}{\\partial\\pmb{\\mu}_{k}}}=\\sum_{i}{\\frac{\\partial{\\mathcal{L}}}{\\partial\\mathbf{p}_{i}}}{\\frac{\\partial\\mathbf{p}_{i}}{\\partial\\pmb{\\mu}_{k}}}\\,.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "However, this criterion is suboptimal when a 3D Gaussian spans more than a single pixel, a scenario that is particularly relevant for large-scale urban scenes. Specifically, since the positional gradient is composed of a sum of per-pixel gradients, these can point in different directions and thus cancel each other out. Therefore, we threshold ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\sum_{i}\\left\\|\\frac{\\partial\\mathcal{L}}{\\partial\\mathbf{p}_{i}}\\frac{\\partial\\mathbf{p}_{i}}{\\partial\\mu_{k}}\\right\\|_{1}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "as the criterion to drive densification decisions. This ensures that the overall magnitude of the gradients is considered, independent of the direction. However, this leads to an increased expected value, and therefore we increase the densification threshold to 0.0006. ", "page_idx": 16}, {"type": "text", "text": "Hyperparameters. We describe the hyperparameters used for our method, while training details can be found in Appendix A.3. For ADC, we use an opacity threshold of 0.005 to cull transparent 3D Gaussians. To maximize view quality, we do not cull 3D Gaussians after densification stops. We use a near clip plane at a $1.0\\mathrm{m}$ distance, scaled by the global scene scaling factor. We set this threshold to avoid numerical instability in the projection of 3D Gaussians. Indeed, the Jacobian $\\mathtt{J}_{k}^{c}$ used in ${\\mathfrak{g}}_{k}^{c}$ scales inversely with the depth of the primitive, which causes numerical instabilities as the depth of a 3D Gaussian approaches zero. For $\\gamma(t)$ , we use 6 frequencies to encode time $t$ . ", "page_idx": 16}, {"type": "text", "text": "A.3 Experiments ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Data preprocessing. For each dataset, we obtain the initialization of the 3D Gaussians from a point cloud of the scene obtained from the provided LiDAR measurements. To avoid redundant points slowing down training, we voxelize this initial pointcloud with voxel sizes of $\\tau:=0.1\\mathrm{m}$ and $\\tau:=0.15\\mathrm{m}$ for the single- and multi-sequence experiments, respectively. We use the provided 3D bounding box annotations to fliter points belonging to dynamic objects, to initialize the 3D Gaussians for each object, and as our object poses $\\xi$ . ", "page_idx": 16}, {"type": "text", "text": "For KITTI and VKITTI, we follow the established benchmark used in [16, 83, 17, 73]. We use the full resolution $375\\times1242$ images for training and evaluation and evaluate at varying training set fractions. For Argoverse 2, we follow the experimental setup of [17]. In particular, we use the full resolution $1550\\times2080$ images for training and evaluation and use all cameras of every 10th temporal frame as the testing split. Note that we used the provided masks from [17] to mask out parts of the ego-vehicle for both training and evaluation. For Waymo Open, we follow the experimental setup of EmerNeRF [76]. We use the three front cameras (FRONT, FRONT_LEFT, FRONT_RIGHT) and resize the images to $640\\times960$ for both training and evaluation. We use only the first LiDAR return as initial points for our reconstruction. We follow [76] and evaluate the cameras of every 10th temporal frame. ", "page_idx": 16}, {"type": "image", "img_path": "xZxXNhndXU/tmp/d7ab238e8b6ff461166b5e5406f5d67eab71c8d007dc1389958cc70bdf036b72.jpg", "img_caption": ["Figure 6: Qualitative examples of transient geometry. We show four relevant examples from the residential split of Argoverse 2 [81]. We observe a large disparity between our full model and ours without transient geometry modeling (App. only). Transient objects like a banner (left bottom) are completely missing and there are severe depth and color artifacts (e.g. trees). Best viewed digitally. "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "For separate evaluation of dynamic objects, we compute masks from the 2D ground truth camera bounding boxes. We keep only objects exceeding a velocity of $1~\\mathrm{m/s}$ to fliter for potential sensor and annotation noise. We determine the velocities from the corresponding 3D bounding box annotations. Note also that [76] do not undistort the input images, and we follow this setup for a fair comparison. ", "page_idx": 17}, {"type": "text", "text": "Implementation details. For $\\mathcal{L}_{\\mathrm{dep}}$ , we use only the LiDAR measurements at the time of the camera sensor recording as ground truth to ensure dynamic objects receive valid depth supervision. We implement our method in PyTorch [80] with tools from nerfstudio [85]. For visualization of the depth, we use the inferno_r colormap and linear scaling in the 1-82.5 meters range. ", "page_idx": 17}, {"type": "text", "text": "During training, we use the Adam optimizer [86] with $\\beta_{1}\\,:=\\,0.9,\\beta_{2}\\,:=\\,0.999$ . We use separate learning rates for each 3D Gaussian attribute, the neural fields, and the sequence latent codes $\\omega_{s}^{t}$ . In particular, for means $\\pmb{\\mu}$ , we use an exponential decay learning rate schedule from $1.6\\cdot10^{-5}$ to $1.6\\cdot10^{-6}$ , for opacity $\\alpha$ , we use a learning rate of $5\\cdot\\dot{1}0^{-2}$ , for scales $a$ and rotations $q$ , we use a learning rate of $\\bar{10}^{-3}$ . The neural fields are trained with an exponential decay learning rate schedule from $2.5\\cdot10^{-3}$ to $2.5\\cdot10^{-4}$ . The sequence latent vectors $\\bar{\\omega}_{s}^{t}$ are optimized with a learning rate of $5\\cdot10^{-4}$ . We optimize camera and object pose parameters with an exponential decay learning rate schedule from $10^{-5}$ to $10^{-6}$ . To counter pose drift, we apply weight decay with a factor $10^{-\\bar{2}}$ . Note that we also optimize the height of object poses $\\xi$ . We follow previous works [87, 85, 17] and optimize the evaluation camera poses when optimizing training poses to compensate for pose errors introduced by drifting geometry through optimized training poses that may contaminate the view synthesis quality measurement. ", "page_idx": 17}, {"type": "text", "text": "In our multi-sequence experiments in Table 1 and Table 5, we train our model on 8 NVIDIA A100 40GB GPUs for 125,000 steps, taking approximately 2.5 days. In our single-sequence experiments, we train our model on a single RTX 4090 GPU for several hours. On Waymo Open, we train our model for 60,000 steps while for KITTI and VKITTI2 we train the model for 30,000 steps. For ", "page_idx": 17}, {"type": "table", "img_path": "xZxXNhndXU/tmp/337c96378b08af0c43c6b934ecee598e84c97aabfc42ab318d4d3a52cfb3d2d5.jpg", "table_caption": ["(a) Ablation on 3D bounding boxes. We use 3D box annotations and predictions from an off-the-shelf 3D tracker. "], "table_footnote": [], "page_idx": 18}, {"type": "table", "img_path": "xZxXNhndXU/tmp/f6211fb46e1e131141725b9a94a9e0200e7803895a5315c40e51a2069e903765.jpg", "table_caption": ["(b) Ablation on deformation head $\\chi$ . We compare results with and without modeling non-rigid motion as deformations. "], "table_footnote": [], "page_idx": 18}, {"type": "text", "text": "Table 8: Addtional ablation studies. In (a) we show results on a single sequence of the residential area in our benchmark and the full residential area. In (b) we use a subset of the Dynamic-32 split from [76], i.e. the 12 sequences with the highest number of non-rigid objects. ", "page_idx": 18}, {"type": "image", "img_path": "xZxXNhndXU/tmp/203f20e7f5f7817705e602861e7b64e2a46f350543d40074b5c7d04cf98fa96d.jpg", "img_caption": ["Figure 7: Runtime comparison of neural fields vs. spherical harmonics. We compare the runtime of querying neural fields $\\phi$ and $\\psi$ to a spherical harmonics function of degree 3. We report timeper-query in nanoseconds. "], "img_footnote": [], "page_idx": 18}, {"type": "image", "img_path": "xZxXNhndXU/tmp/f478dccf55a6d7b451c947a7ef09388fcadd96e924720851f9e176d18198c350.jpg", "img_caption": ["Figure 8: Histogram of mean 3D Gaussian scales. We use our model trained on Argoverse 2 (residential split). Both axes are in logarithmic scale. The vast majority of 3D Gaussians have a small scale, while there are a few outliers with huge scales. The scene is approximately within [-1, 1]. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "our single-sequence experiments in Table 5 we use a schedule of 100,000 steps. We chose a longer schedule for Waymo Open and Argoverse 2 since the scenes are more complex and contain about $5-10\\times$ as many images as the sequences in KITTI and VKITTI2. ", "page_idx": 18}, {"type": "text", "text": "We linearly scale the number warm-up steps, the steps per ADC, and the maximum step to invoke ADC with the number of training steps. For multi-GPU training, we reduce these parameters linearly with the number of GPUs. However, we observed that scaling the learning rates linearly does perform subpar to the initial learning rates in the multi-GPU setup, and therefore we keep the learning rates the same across all experiments. ", "page_idx": 18}, {"type": "text", "text": "Additional ablation studies. In Table 8a, we show that while our approach benefits from highquality 3D bounding boxes, it is robust to noise and achieves a high view synthesis quality even with noisy predictions acquired from a 3D tracking algorithm [88]. In Table 8b, we demonstrate that the deformation head yields a small, albeit noticeable improvement in quantitative rendering results. This corroborates the utility of deformation head $\\chi$ beyond the qualitative examples shown in Figures 4 and 10. Note that the threshold to distinguish between dynamic and static areas is $1\\mathrm{m/s}$ following [76] so that some instances like slow-moving pedestrians will be classified as static. Also, since non-rigid entities usually cover only a small portion of the scene, expected improvements are inherently small. ", "page_idx": 18}, {"type": "text", "text": "In Table 9, we show that our modified ADC increases view quality in general, and perceptual quality in particular as it avoids blurry close-up renderings. Note that our ADC leads to roughly twice the number of 3D Gaussians belonging to objects compared ", "page_idx": 18}, {"type": "table", "img_path": "xZxXNhndXU/tmp/439f5c6e5d76a875a4ffb9cb31a81f1cde4b7427814733cbff3d16b3e92207f3.jpg", "table_caption": [], "table_footnote": [], "page_idx": 18}, {"type": "text", "text": "Table 9: Ablation study on ADC. We compare the performance of vanilla ADC to our modified variant in the single-sequence setting. ", "page_idx": 18}, {"type": "text", "text": "to vanilla ADC, thus avoiding insufficient densification. We also show a qualitative example in Figure 5, illustrating this effect. The close-up car rendering is significantly sharper using the modified ADC. Note that for both variants, we use the absolute gradient criterion (see Appendix A.2) for a fair comparison. ", "page_idx": 18}, {"type": "text", "text": "Additional runtime and model analysis. In Figure 7, we provide a comparison in terms of time per query of neural fields of different sizes (equivalent to the sizes of our $\\phi$ and $\\psi$ ) versus querying a spherical harmonics function of degree 3 as used in 3DGS [18]. We observe that the SH function is approx. 6 to $8\\times$ faster to evaluate than the neural fields. However, we show that this does not lead to a critical increase in overall runtime in Table 6. Additionally, we note that the SH function is limited in representation capacity: It is not capable of handling varying appearance across input sequences (weather, time of day, season), transient geometry (construction sites, tree leaves), articulated motion of dynamic objects (pedestrians, cyclists), and large-scale scenes with several millions of 3D Gaussians due to memory constraints. Thus, we emphasize that the use of neural fields does not merely improve memory footprint, but enables applications that 3DGS [18] is not capable of modeling. ", "page_idx": 19}, {"type": "text", "text": "In Figure 8, provide an analysis on the distribution of 3D Gaussian scales across a large-scale urban scene reconstruction. We notice that while the vast majority of 3D Gaussians is small $(<0.001$ mean scale), there is a small number of very large 3D Gaussians $(>1.0$ mean scale) compared to the scene bounds that are approximately within [-1.0, 1.0]. This can lead to fog-like artifacts in free-viewpoint renderings. We note that this can be mitigated using a regularization term on the 3D Gaussian scales, however, we did not observe an quantitative improvement in view synthesis metrics and thus we did not include it in the experiments. ", "page_idx": 19}, {"type": "text", "text": "Qualitative results. We provide an additional qualitative comparison of the variants iii) and ii) introduced in Section 4.2, i.e. our model with and without transient geometry modeling. In Figure 6, we show multiple examples confirming that iii) indeed models transient geometry such as tree leaves or temporary advertisement banners (bottom left), and effectively mitigates the severe artifacts present in the RGB renderings of ii). Furthermore, the depth maps show that iii) faithfully represents the true geometry, while ii) lacks geometric variability across sequences. ", "page_idx": 19}, {"type": "text", "text": "In addition, we show qualitative comparisons to the state-of-the-art in Figure 9. Our method continues to produce sharper renderings than the previous best-performing method [17], while also handling articulated objects such as pedestrians which are missing in the reconstruction of previous works (bottom two rows). Finally, we show another temporal sequence of evaluation frames in Figure 10. Our method handles unconstrained motions and can also reconstruct more complicated scenarios such as a pedestrian carrying a stroller (right), or a grocery bag (left). ", "page_idx": 19}, {"type": "image", "img_path": "xZxXNhndXU/tmp/86fc90903b64c13d764350cd467d5198a86eadb8f47bf655a6eee460223c277c.jpg", "img_caption": ["", "Figure 9: Additional qualitative results on Argoverse 2 [81]. We show four examples where the upper two are from the residential area and the lower two are from the downtown area. "], "img_footnote": [], "page_idx": 20}, {"type": "image", "img_path": "xZxXNhndXU/tmp/7da26c9c48451302db5abf9fc757167f7820a65885eaea6f9aa832eabfaae97c.jpg", "img_caption": ["Figure 10: Additional qualitative results on Waymo Open [23]. We show a sequence of evaluation views synthesized by our model (top to bottom). We see two pedestrians on the left and right being faithfully modeled across varying body poses while also carrying objects such as a stroller (right) or a shopping bag (left). "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "The checklist is designed to encourage best practices for responsible machine learning research, addressing issues of reproducibility, transparency, research ethics, and societal impact. Do not remove the checklist: The papers not including the checklist will be desk rejected. The checklist should follow the references and precede the (optional) supplemental material. The checklist does NOT count towards the page limit. ", "page_idx": 22}, {"type": "text", "text": "Please read the checklist guidelines carefully for information on how to answer these questions. For each question in the checklist: ", "page_idx": 22}, {"type": "text", "text": "\u2022 You should answer [Yes] , [No] , or [NA] .   \n\u2022 [NA] means either that the question is Not Applicable for that particular paper or the relevant information is Not Available.   \n\u2022 Please provide a short (1\u20132 sentence) justification right after your answer (even for NA). ", "page_idx": 22}, {"type": "text", "text": "The checklist answers are an integral part of your paper submission. They are visible to the reviewers, area chairs, senior area chairs, and ethics reviewers. You will be asked to also include it (after eventual revisions) with the final version of your paper, and its final version will be published with the paper. ", "page_idx": 22}, {"type": "text", "text": "The reviewers of your paper will be asked to use the checklist as one of the factors in their evaluation. While \"[Yes] \" is generally preferable to \"[No] \", it is perfectly acceptable to answer \"[No] \" provided a proper justification is given (e.g., \"error bars are not reported because it would be too computationally expensive\" or \"we were unable to find the license for the dataset we used\"). In general, answering \"[No] \" or \"[NA] \" is not grounds for rejection. While the questions are phrased in a binary way, we acknowledge that the true answer is often more nuanced, so please just use your best judgment and write a justification to elaborate. All supporting evidence can appear either in the main paper or the supplemental material, provided in appendix. If you answer [Yes] to a question, in the justification please point to the section(s) where related material for the question can be found. ", "page_idx": 22}, {"type": "text", "text": "IMPORTANT, please: ", "page_idx": 22}, {"type": "text", "text": "\u2022 Delete this instruction block, but keep the section heading \u201cNeurIPS paper checklist\", \u2022 Keep the checklist subsection headings, questions/answers and guidelines below. \u2022 Do not modify the questions and only use the provided macros for your answers. ", "page_idx": 22}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: We clearly state the tackled problem, the technical gap in existing work, describe our contributions, and outline our experimental results. These claims are in line with our experimental results presented. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 22}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: We discuss the limitations of our method in the conclusion. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 23}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 23}, {"type": "text", "text": "Answer: [No] ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Justification: Our paper presents a new system for novel view synthesis and thus relies on experimental validation of our claims. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 23}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: We provide extensive implementation details, the hyperparameters, training details of our method, as well as data preprocessing and evaluation protocols in the technical appendix. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 24}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Justification: We released the full source code for reproducing our experiments. All datasets used are publicly available. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why. ", "page_idx": 24}, {"type": "text", "text": "\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable). \u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 25}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: See above, we provide all details on data preprocessing, evaluation splits, and others. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 25}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 25}, {"type": "text", "text": "Answer: [No] ", "page_idx": 25}, {"type": "text", "text": "Justification: Not feasible with the limited computational budget. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 25}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: We provide the number and type of GPUs as well as the wall clock time to run the experiments. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 26}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: We provide details for reproducing results, we respect all data privacy regulations, do not conduct research involving human subjects and discuss the broader impact of our work in our paper. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 26}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Justification: We discuss this throughout the paper and dedicate a paragraph in the conclusion to it. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: The datasets and benchmarks we use are properly licensed and not scraped but collected by the authors. The datasets respect privacy regulations. Our method does not use data-driven priors derived from, e.g., LLMs. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 27}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: We cite the papers of each benchmark when using any assets. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 27}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: We do not release any new assets in our paper. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used. ", "page_idx": 27}, {"type": "text", "text": "\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 28}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 28}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 28}, {"type": "text", "text": "Justification: We did not conduct research involving human subjects. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 28}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 28}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 28}, {"type": "text", "text": "Justification: See above. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 28}]