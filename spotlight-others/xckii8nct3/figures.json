[{"figure_path": "XCkII8nCt3/figures/figures_2_1.jpg", "caption": "Figure 1: Overview of PQCs for approximating continuous functions. (a) Flowchart illustrating the strategy for using PQCs to approximate continuous functions via implementing Bernstein polynomials. The input data x is encoded into the PQC through S(x), with the PQC (blue background) capable of representing parity-constrained polynomials up to degree 3 (as x is encoded three times). The technique of linear combination of unitaries (LCU) is used to aggregate these polynomials together. The output of PQC derives from measurement with a specific observable. Fine-tuning trainable parameters in Rz gates yields a polynomial output depicted in the right panel. (b) Flowchart illustrating the strategy of approximation via local Taylor expansions. We first apply a PQC to localize the input domain into K = 5 regions. For example, for input x \u2208 [0.8, 1], PQC outputs x' = 0.8 as a fixed point. Then x - x' will be fed into a new PQC for implementing the local Taylor expansions at the fixed point x', forming a nesting architecture. Control gates with pink backgrounds implement the Taylor coefficients. Fine-tuning trainable parameters in Rx and Rz gates yields a piecewise polynomial with degree 3 that approximates the target function.", "description": "This figure shows two different approaches for approximating continuous functions using parameterized quantum circuits (PQCs).  (a) uses Bernstein polynomials, encoding the input and applying a series of gates to produce a polynomial approximation.  (b) uses local Taylor expansions, first localizing the input to a smaller region and then applying a Taylor expansion in that region.  Both methods involve fine-tuning parameters within the PQCs to optimize the approximation.", "section": "3 Expressivity of PQCs for multivariate continuous functions"}, {"figure_path": "XCkII8nCt3/figures/figures_6_1.jpg", "caption": "Figure 1: Overview of PQCs for approximating continuous functions. (a) Flowchart illustrating the strategy for using PQCs to approximate continuous functions via implementing Bernstein polynomials. The input data x is encoded into the PQC through S(x), with the PQC (blue background) capable of representing parity-constrained polynomials up to degree 3 (as x is encoded three times). The technique of linear combination of unitaries (LCU) is used to aggregate these polynomials together. The output of PQC derives from measurement with a specific observable. Fine-tuning trainable parameters in Rz gates yields a polynomial output depicted in the right panel. (b) Flowchart illustrating the strategy of approximation via local Taylor expansions. We first apply a PQC to localize the input domain into K = 5 regions. For example, for input x \u2208 [0.8, 1], PQC outputs x' = 0.8 as a fixed point. Then x - x' will be fed into a new PQC for implementing the local Taylor expansions at the fixed point x', forming a nesting architecture. Control gates with pink backgrounds implement the Taylor coefficients. Fine-tuning trainable parameters in Rx and Rz gates yields a piecewise polynomial with degree 3 that approximates the target function.", "description": "This figure illustrates two different strategies for approximating continuous functions using parameterized quantum circuits (PQCs).  The first uses Bernstein polynomials, encoding the input into the PQC and using a linear combination of unitaries to aggregate polynomials.  The second uses local Taylor expansions, first localizing the input into regions and then using PQCs to implement local Taylor expansions in each region.", "section": "3 Expressivity of PQCs for multivariate continuous functions"}, {"figure_path": "XCkII8nCt3/figures/figures_7_1.jpg", "caption": "Figure 3: Simulation results of localization. We use single-qubit PQCs to approximate the localization function D(x) for K = 2 and K = 10 respectively.", "description": "This figure shows the results of using single-qubit parameterized quantum circuits (PQCs) to approximate a piecewise constant localization function D(x).  Two different scenarios are presented: one with K=2 intervals and another with K=10 intervals.  The plots illustrate the PQC output versus the input x, demonstrating the approximation capability of the PQCs.  The approximation improves as the number of intervals (K) increases.", "section": "4 Numerical experiments"}, {"figure_path": "XCkII8nCt3/figures/figures_8_1.jpg", "caption": "Figure 4: Simulation results for learning f(x, y). The left two panels are derived by interpolating and smoothing the output values of PQC on 100 test data points.", "description": "This figure shows the results of numerical experiments for approximating a bivariate polynomial function using PQCs.  The left two panels display the PQC's output for K=2 and K=10, respectively, while the right panel shows the target function.  The approximation process involves two steps: 1) learning a piecewise-constant function; and 2) learning the Taylor expansion of the target function.  The results demonstrate improved approximation performance as K increases, aligning with theoretical findings. The K value represents the number of intervals for the piecewise-constant function.", "section": "Numerical experiments"}, {"figure_path": "XCkII8nCt3/figures/figures_28_1.jpg", "caption": "Figure 1: Overview of PQCs for approximating continuous functions. (a) Flowchart illustrating the strategy for using PQCs to approximate continuous functions via implementing Bernstein polynomials. The input data x is encoded into the PQC through S(x), with the PQC (blue background) capable of representing parity-constrained polynomials up to degree 3 (as x is encoded three times). The technique of linear combination of unitaries (LCU) is used to aggregate these polynomials together. The output of PQC derives from measurement with a specific observable. Fine-tuning trainable parameters in Rz gates yields a polynomial output depicted in the right panel. (b) Flowchart illustrating the strategy of approximation via local Taylor expansions. We first apply a PQC to localize the input domain into K = 5 regions. For example, for input x \u2208 [0.8, 1], PQC outputs x' = 0.8 as a fixed point. Then x - x' will be fed into a new PQC for implementing the local Taylor expansions at the fixed point x', forming a nesting architecture. Control gates with pink backgrounds implement the Taylor coefficients. Fine-tuning trainable parameters in Rx and Rz gates yields a piecewise polynomial with degree 3 that approximates the target function.", "description": "This figure shows two different approaches for approximating continuous functions using parameterized quantum circuits (PQCs). (a) uses Bernstein polynomials, encoding the input and combining multiple polynomials. (b) uses local Taylor expansions, localizing the input and combining Taylor expansions for better approximation. Both methods involve fine-tuning trainable parameters in quantum gates.", "section": "3 Expressivity of PQCs for multivariate continuous functions"}]