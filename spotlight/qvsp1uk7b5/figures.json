[{"figure_path": "QVSP1uk7b5/figures/figures_0_1.jpg", "caption": "Figure 1: 3D assets generated by our proposed TeT-Splatting.", "description": "This figure showcases a diverse range of 3D models generated using the TeT-Splatting method.  The images demonstrate the variety and quality of 3D assets that can be created using the technique, ranging from realistic objects (such as a crown, turkey, and chair) to more stylized or fantastical items (such as an origami crane and a wedding dress made of tentacles). The figure serves as a visual demonstration of the capabilities of TeT-Splatting in generating high-quality 3D models from various prompts.", "section": "1 Introduction"}, {"figure_path": "QVSP1uk7b5/figures/figures_3_1.jpg", "caption": "Figure 2: Left: An overview of TeT-Splatting. To produce the final renderings, we first pre-filter and remove nearly transparent tetrahedra, then project the remaining ones into 2D splats. These are blended based on opacity values derived from the SDF values at specific pixel intersections. Right: TeT-Splatting for 3D generation. We employ TeT-Splatting in the initial stage of the 3D generation pipeline and subsequently transition it to polygonal mesh for texture optimization.", "description": "This figure illustrates the TeT-Splatting process. The left panel shows a step-by-step breakdown of the splatting process, starting with a pre-filtering step to remove transparent tetrahedra, and culminating in the generation of normal, depth, and opacity maps from 2D projections of the tetrahedra. The right panel shows how TeT-Splatting is integrated into a two-stage 3D generation pipeline, first optimizing geometry and then refining the texture using a polygonal mesh.", "section": "3 TeT-Splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_4_1.jpg", "caption": "Figure 3: Normal map comparison during optimization of 3D generation. We utilize DMTet and TeT-Splatting as 3D representations in the geometry modeling stage of the RichDreamer [34]. The first two rows show normal maps obtained from DMTet and TeT-Splatting during optimization. TeT-Splatting achieves more stable and smooth optimization, while DMTet becomes fragmented initially and gets stuck in an undesirable shape. The third row shows the normal maps of meshes extracted from the signed distance field of TeT-Splatting via Marching Tetrahedra [40] (MT). As optimization progresses, TeT-Splatting's behavior aligns with rendering through MT.", "description": "This figure compares the normal map evolution during optimization using DMTet and TeT-splatting methods for 3D generation.  It shows that TeT-splatting provides more stable and smooth optimization, while DMTet results in fragmented and unstable results, especially in the early stages.  The final row illustrates the alignment of TeT-splatting results with the Marching Tetrahedra (MT) method as optimization progresses.", "section": "3.2 Differentiable tetrahedron splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_6_1.jpg", "caption": "Figure 4: Qualitative comparison on 3D generation using vanilla RGB-based diffusion priors. We present visual comparisons of the rendered RGB maps and color maps from various 3D generation methods. The methods, arranged from left to right, are: Magic3D, Fantasia3D, DreamGaussian, and Ours. The comparison is conducted across two tasks, text-to-3D and image-to-3D, with results shown from top to bottom, respectively. Additionally, for each method, we provide the training time and the rendering speed (FPS) for the first stage of the process.", "description": "This figure compares the results of four different methods (Magic3D, Fantasia3D, DreamGaussian, and the authors' method) for 3D generation using vanilla RGB-based diffusion priors.  The comparison is shown for two tasks: text-to-3D and image-to-3D.  For each method, the figure displays the generated 3D models for several example prompts, along with the training time and rendering speed (frames per second) for the first stage of the generation process. This allows for a visual and quantitative comparison of the different methods.", "section": "5.1 Results with vanilla RGB-based diffusion priors"}, {"figure_path": "QVSP1uk7b5/figures/figures_7_1.jpg", "caption": "Figure 5: Visualization of normal maps before and after mesh exportation. Note that the normal maps of DreamGaussian [46] are derived from its depth maps.", "description": "This figure compares the normal maps of 3D models generated by three different methods (Magic3D, DreamGaussian, and the proposed TeT-Splatting) before and after mesh extraction.  It visually demonstrates the quality of the mesh extraction process for each method, highlighting the improved quality and smoothness achieved by TeT-Splatting compared to the other two methods. Note that the normal maps for DreamGaussian are derived from its depth maps, indicating a different approach to normal estimation.", "section": "5.1 Results with vanilla RGB-based diffusion priors"}, {"figure_path": "QVSP1uk7b5/figures/figures_7_2.jpg", "caption": "Figure 6: Qualitative comparison on Text-to-3D with rich diffusion priors. We also report the total training time of each method.", "description": "This figure compares the results of four different methods (Prolific Dreamer, MVDream, RichDreamer, and the proposed TeT-Splatting) for 3D generation using rich diffusion priors.  It shows the generated 3D models for three different text prompts: a porcelain dragon, a cup of pens and pencils, and a turtle wearing a top hat. The visual quality and the training time required for each method are compared.", "section": "5.2 Results with rich diffusion priors"}, {"figure_path": "QVSP1uk7b5/figures/figures_8_1.jpg", "caption": "Figure 7: Normal map comparison between DMTet [40] and TeT-Splatting in the early training iterations.", "description": "This figure compares the normal maps generated by DMTet and TeT-Splatting during the initial stages of training.  It visually demonstrates that TeT-Splatting achieves smoother and more stable optimization compared to DMTet, which exhibits fragmentation and gets stuck in undesirable shapes in the early iterations. The comparison is shown for five different object categories: Bear, Eagle, Piano, Tarantula, and Typewriter.", "section": "5.2 Results with rich diffusion priors"}, {"figure_path": "QVSP1uk7b5/figures/figures_8_2.jpg", "caption": "Figure 8: Visualization of the rendered normal, albedo, and PBR map from the generated 3D assets in the second stage.", "description": "This figure shows the results of the texture refinement stage in the TeT-Splatting 3D generation pipeline.  The second stage takes the geometry optimized in the first stage and generates detailed texture maps.  The image displays three different maps for a generated 3D asset: the normal map (showing surface orientation), the albedo map (showing base color), and the PBR (Physically Based Rendering) map (incorporating surface properties like roughness and metallicness). This visualization demonstrates the quality and realism achieved in the textured 3D model.", "section": "Results with rich diffusion priors"}, {"figure_path": "QVSP1uk7b5/figures/figures_8_3.jpg", "caption": "Figure 8: Visualization of the rendered normal, albedo, and PBR map from the generated 3D assets in the second stage.", "description": "This figure shows the results of applying the TeT-Splatting method to generate 3D assets.  Specifically, it visualizes the normal map, albedo map, and physically based rendering (PBR) map for a set of generated 3D objects. The normal map illustrates surface normals, indicating the direction of surface orientation at each point. The albedo map represents the base color of the objects, while the PBR map incorporates additional material properties, resulting in more realistic rendering. This figure demonstrates the TeT-Splatting method's ability to generate high-quality 3D assets, providing details on surface properties and visual appearance.", "section": "5.2 Results with rich diffusion priors"}, {"figure_path": "QVSP1uk7b5/figures/figures_9_1.jpg", "caption": "Figure 9: Ablation studies on eikonal loss, normal consistency loss and the resolution of the tetrahedral grid.", "description": "This figure presents an ablation study to evaluate the impact of three key components on the performance of TeT-Splatting: eikonal loss, normal consistency loss, and tetrahedral grid resolution.  Each row demonstrates the effect of altering one component while keeping others constant. It shows that both eikonal and normal consistency losses significantly improve the quality of the generated 3D models, and increasing the grid resolution leads to more detailed results. The images provide visual comparisons, showcasing differences in the quality of the mesh and surface details for each configuration.", "section": "5.3 Ablation"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_1.jpg", "caption": "Figure 1: 3D assets generated by our proposed TeT-Splatting.", "description": "This figure showcases a diverse range of 3D models generated using the TeT-Splatting method.  The images demonstrate the technique's ability to create detailed and realistic 3D assets from various categories, including animals, objects, and scenes. This variety highlights the versatility of the TeT-Splatting approach in generating high-quality 3D content.", "section": "Introduction"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_2.jpg", "caption": "Figure 3: Normal map comparison during optimization of 3D generation. We utilize DMTet and TeT-Splatting as 3D representations in the geometry modeling stage of the RichDreamer [34]. The first two rows show normal maps obtained from DMTet and TeT-Splatting during optimization. TeT-Splatting achieves more stable and smooth optimization, while DMTet becomes fragmented initially and gets stuck in an undesirable shape. The third row shows the normal maps of meshes extracted from the signed distance field of TeT-Splatting via Marching Tetrahedra [40] (MT). As optimization progresses, TeT-Splatting's behavior aligns with rendering through MT.", "description": "This figure compares the normal maps generated during the optimization process of 3D generation using DMTet and TeT-Splatting. It demonstrates that TeT-Splatting provides more stable and smoother optimization compared to DMTet, which tends to get stuck in undesirable shapes. The figure also shows how the normal maps obtained from TeT-Splatting using Marching Tetrahedra (MT) align with the rendering results as the optimization progresses.", "section": "3.2 Differentiable tetrahedron splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_3.jpg", "caption": "Figure 3: Normal map comparison during optimization of 3D generation. We utilize DMTet and TeT-Splatting as 3D representations in the geometry modeling stage of the RichDreamer [34]. The first two rows show normal maps obtained from DMTet and TeT-Splatting during optimization. TeT-Splatting achieves more stable and smooth optimization, while DMTet becomes fragmented initially and gets stuck in an undesirable shape. The third row shows the normal maps of meshes extracted from the signed distance field of TeT-Splatting via Marching Tetrahedra [40] (MT). As optimization progresses, TeT-Splatting's behavior aligns with rendering through MT.", "description": "This figure compares the normal map evolution during the optimization process for both DMTet and TeT-splatting methods in 3D generation.  It demonstrates TeT-splatting's superior stability and smoothness compared to DMTet, which exhibits fragmentation and gets stuck in suboptimal shapes. The figure also illustrates how TeT-splatting's normal map aligns with the results obtained through marching tetrahedra (MT) as optimization progresses.", "section": "3.2 Differentiable tetrahedron splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_4.jpg", "caption": "Figure 3: Normal map comparison during optimization of 3D generation. We utilize DMTet and TeT-Splatting as 3D representations in the geometry modeling stage of the RichDreamer [34]. The first two rows show normal maps obtained from DMTet and TeT-Splatting during optimization. TeT-Splatting achieves more stable and smooth optimization, while DMTet becomes fragmented initially and gets stuck in an undesirable shape. The third row shows the normal maps of meshes extracted from the signed distance field of TeT-Splatting via Marching Tetrahedra [40] (MT). As optimization progresses, TeT-Splatting's behavior aligns with rendering through MT.", "description": "This figure compares the normal maps generated during the optimization process of 3D generation using DMTet and TeT-Splatting.  It shows that TeT-Splatting leads to smoother and more stable optimization compared to DMTet, which exhibits fragmentation and gets stuck in unfavorable shapes. The third row shows how TeT-Splatting's behavior eventually aligns with the results obtained from Marching Tetrahedra (MT) mesh extraction, indicating the consistency and accuracy of its approach.", "section": "3.2 Differentiable tetrahedron splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_5.jpg", "caption": "Figure 3: Normal map comparison during optimization of 3D generation. We utilize DMTet and TeT-Splatting as 3D representations in the geometry modeling stage of the RichDreamer [34]. The first two rows show normal maps obtained from DMTet and TeT-Splatting during optimization. TeT-Splatting achieves more stable and smooth optimization, while DMTet becomes fragmented initially and gets stuck in an undesirable shape. The third row shows the normal maps of meshes extracted from the signed distance field of TeT-Splatting via Marching Tetrahedra [40] (MT). As optimization progresses, TeT-Splatting's behavior aligns with rendering through MT.", "description": "This figure compares the normal maps generated during the optimization process of 3D generation using DMTet and TeT-Splatting.  It shows that TeT-Splatting leads to a smoother and more stable optimization process, unlike DMTet which produces fragmented and undesirable results initially. The third row demonstrates the alignment of TeT-Splatting's results with Marching Tetrahedra (MT) as the optimization progresses.", "section": "3.2 Differentiable tetrahedron splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_6.jpg", "caption": "Figure 1: 3D assets generated by our proposed TeT-Splatting.", "description": "This figure showcases a variety of 3D models generated using the TeT-Splatting method presented in the paper.  The models depict a wide range of objects, from everyday items (such as food and furniture) to more fantastical creations (like a wedding dress made of tentacles and an erupting volcano). The diversity of the models highlights the versatility and capabilities of the TeT-Splatting technique.", "section": "Abstract"}, {"figure_path": "QVSP1uk7b5/figures/figures_16_7.jpg", "caption": "Figure 2: Left: An overview of TeT-Splatting. To produce the final renderings, we first pre-filter and remove nearly transparent tetrahedra, then project the remaining ones into 2D splats. These are blended based on opacity values derived from the SDF values at specific pixel intersections. Right: TeT-Splatting for 3D generation. We employ TeT-Splatting in the initial stage of the 3D generation pipeline and subsequently transition it to polygonal mesh for texture optimization.", "description": "The figure shows a schematic of the TeT-Splatting process, highlighting the pre-filtering step, the projection of tetrahedra into 2D splats, and the alpha-blending process.  It also illustrates the two-stage 3D generation pipeline using TeT-Splatting for initial geometry optimization and then switching to polygonal mesh for texture refinement.", "section": "3 TeT-Splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_17_1.jpg", "caption": "Figure 1: 3D assets generated by our proposed TeT-Splatting.", "description": "This figure showcases a diverse range of 3D models generated using the TeT-Splatting method presented in the paper.  The models encompass various objects, demonstrating the versatility of the approach in generating different types of 3D assets. The variety of objects aims to highlight the method's ability to handle complex geometries and details.", "section": "Abstract"}, {"figure_path": "QVSP1uk7b5/figures/figures_18_1.jpg", "caption": "Figure 2: Left: An overview of TeT-Splatting. To produce the final renderings, we first pre-filter and remove nearly transparent tetrahedra, then project the remaining ones into 2D splats. These are blended based on opacity values derived from the SDF values at specific pixel intersections. Right: TeT-Splatting for 3D generation. We employ TeT-Splatting in the initial stage of the 3D generation pipeline and subsequently transition it to polygonal mesh for texture optimization.", "description": "This figure provides a schematic overview of the TeT-Splatting process, showing the pre-filtering step to remove transparent tetrahedra and the projection of remaining tetrahedra into 2D splats for blending.  It also illustrates how TeT-Splatting is integrated into a two-stage 3D generation pipeline: first using TeT-Splatting for geometry optimization, then transitioning to polygonal mesh for texture refinement.", "section": "3 TeT-Splatting"}, {"figure_path": "QVSP1uk7b5/figures/figures_19_1.jpg", "caption": "Figure 2: Left: An overview of TeT-Splatting. To produce the final renderings, we first pre-filter and remove nearly transparent tetrahedra, then project the remaining ones into 2D splats. These are blended based on opacity values derived from the SDF values at specific pixel intersections. Right: TeT-Splatting for 3D generation. We employ TeT-Splatting in the initial stage of the 3D generation pipeline and subsequently transition it to polygonal mesh for texture optimization.", "description": "This figure shows a schematic overview of the TeT-Splatting method (left) and its integration into a 3D generation pipeline (right). The left panel illustrates how the method works: it starts with pre-filtering tetrahedra, projects them into 2D splats, and blends these splats based on opacity values derived from the signed distance field (SDF). The right panel shows how TeT-Splatting is integrated into a two-stage 3D generation pipeline.  First, geometry optimization is performed using TeT-Splatting.  Then, this representation is transitioned to a polygonal mesh to perform texture refinement, leading to final 3D generation.", "section": "3 TeT-Splatting"}]