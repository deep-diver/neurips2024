[{"type": "text", "text": "MaskLLM: Learnable Semi-Structured Sparsity for Large Language Models ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Gongfan Fang\u2663,\u2662\u2020 Hongxu $\\mathbf{Yin}^{\\diamond}$ Saurav Muralidharan\u2662 Greg Heinrich\u2662 Jeff Pool\u2662 Jan Kautz\u2662 Pavlo Molchanov\u2662\u2021 Xinchao Wang\u2663\u2021 ", "page_idx": 0}, {"type": "text", "text": "NVIDIA\u2662 National University of Singapore\u2663 gongfan@u.nus.edu, xinchao@nus.edu.sg {dannyy,sauravm,gheinrich,jpool,jkautz,pmolchanov}@nvidia.com ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large Language Models (LLMs) are distinguished by their massive parameter counts, which typically result in significant redundancy. This work introduces MaskLLM, a learnable pruning method that establishes Semi-structured (or \u201cN:M\u201d) Sparsity in LLMs, aimed at reducing computational overhead during inference. Instead of developing a new importance criterion, MaskLLM explicitly models N:M patterns as a learnable distribution through Gumbel Softmax sampling. This approach facilitates end-to-end training on large-scale datasets and offers two notable advantages: 1) High-quality Masks - our method effectively scales to large datasets and learns accurate masks; 2) Transferability - the probabilistic modeling of mask distribution enables the transfer learning of sparsity across domains or tasks. We assessed MaskLLM using 2:4 sparsity on various LLMs, including LLaMA-2, Nemotron-4, and GPT-3, with sizes ranging from 843M to 15B parameters, and our empirical results show substantial improvements over state-of-the-art methods. For instance, leading approaches achieve a perplexity (PPL) of 10 or greater on Wikitext compared to the dense model\u2019s 5.12 PPL, but MaskLLM achieves a significantly lower 6.72 PPL solely by learning the masks with frozen weights. Furthermore, MaskLLM\u2019s learnable nature allows customized masks for lossless application of 2:4 sparsity to downstream tasks or domains. Code is available at https://github.com/NVlabs/MaskLLM. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large Language Models (LLMs) have demonstrated remarkable effectiveness across a diverse range of tasks [19, 6, 48, 13]. However, the generality and robustness of LLMs are largely attributed to their vast scale, with parameter counts ranging from one billion to several hundred billion [39, 45, 5]. This substantial model size, in turn, makes it challenging and resource-intensive to deploy LLMs in real-world applications. One effective and practical approach to address this issue is semi-structured pruning [29, 32, 12, 38], which introduces N:M sparsity into LLMs to improve both memory and computational efficiency. The N:M pattern, with N non-zero values among M consecutive parameters, is typically hardware-friendly to accelerators like GPUs and has thus garnered considerable attention [12, 38, 32]. ", "page_idx": 0}, {"type": "image", "img_path": "Llu9nJal7b/tmp/d279cfe993a25fa3ff42483b8373cc3b1ac0fd7e860e4fa90a475f488dd2ca5c.jpg", "img_caption": ["Figure 1: Learnable N:M sparsity for Large Language Models. "], "img_footnote": [], "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Despite the simplicity of its core idea, semi-structured pruning still presents considerable challenges within the realm of LLMs. Sparsity aims to identify a subset of parameters that attain a comparable quality to the dense model. Nevertheless, the extensive parameter scale of large language models usually leads to a vast search space. In a fully sparsified LLaMA2-7B model with 2:4 sparsity, for instance, there are 1.6 billion 2:4 masks to be chosen for dense layers. This makes the combinatorial problem of finding the optimal mask set exceedingly challenging. In the literature, leading approaches such as SparseGPT [12] and Wanda [38], utilize a small calibration set and carefully designed importance criteria to identify redundant parameters. While these techniques have demonstrated remarkable results on several large language models, two substantial challenges remain: Firstly, the small calibration set is insufficient to represent the comprehensive knowledge embedded in LLMs, which are pre-trained on extensive and diverse data domains [39, 7, 31]. As demonstrated in our experiments, hand-crafted importance criteria are only applicable to a compact subset of data, and enlarging the calibration set beyond 256 entries does not improve the resulting quality. This limits the generalizability of pruned LLMs in different domains. Secondly, using handcrafted criteria as a proxy for the true discrepancy inevitably results in errors. A considerable gap remains between the real discrepancy induced by pruning and existing importance indicators, such as gradient information [30], weight magnitude [15], and the Hessian Matrix [23, 12]. ", "page_idx": 1}, {"type": "text", "text": "To tackle the outlined challenges, we propose MaskLLM, a learnable method that facilitates end-toend training of LLM sparsity on large-scale datasets. In the context of N:M sparsity, pruning an LLM involves selecting masks from a discrete and finite set. However, the non-differentiability of mask selection and combination hinders the direct use of backpropagation for mask learning. To address this, our work frames the mask selection problem from a probabilistic perspective, associating each candidate mask with a probability and modeling the mask selection as a stochastic sampling process. We incorporate the Gumbel Softmax [21] for differentiable sampling, which re-parameterizes the randomness of sampling into an independent random variable. This makes the probabilities of each mask candidate optimizable with gradient descent. During training, MaskLLM aims to learn appropriate mask distributions, from which the sampled masks can preserve the original quality of dense LLMs. The differentiable mask offers two advantages in addressing the challenges mentioned above: (1) it effectively scales to large-scale datasets, thereby preserving the rich knowledge in LLMs, and (2) the end-to-end training explicitly optimizes the language modeling loss of LLMs, which exactly measures the discrepancy induced by pruning. Furthermore, inspired by the power of transfer learning, we introduce prior masks, a simple strategy to fully leverage pre-computed masks and enable fast transfer learning of sparsity across domains and tasks as illustrated in Figure 1 ", "page_idx": 1}, {"type": "text", "text": "To evaluate the proposed method, we conduct experiments on several LLMs including LLaMA-2 7B, LLaMA-2 13B [39], Nemotron-4 15B [31], and two in-house LLMs, GPT-3 843M and GPT-3 2B pre-trained using Megatron framework [36]. Our method can learn high-quality masks for pruning through end-to-end training on large-scale datasets. For example, compared to SparseGPT which archives a perplexity (PPL) of 10.42 on LLaMA-2 7B, our method improves the PPL to 6.72, without any update to the LLM parameters. Besides, our method facilitates the learning of domain-specific masks, which can even achieve lossless compression of LLMs on some downstream tasks or domains. ", "page_idx": 1}, {"type": "text", "text": "The principal contribution of this work lies in a learnable method for semi-structured pruning of LLMs. MaskLLM is designed to fully harness large-scale datasets to learn accurate masks, applicable to both general-purpose and domain-specific pruning. Additionally, the framework facilitates the transfer learning of sparsity patterns across different tasks, enabling efficient training of sparsity. ", "page_idx": 1}, {"type": "text", "text": "2 Related Works ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Pruning Large Language Models. Network Pruning [15, 30, 17, 18, 41] have been proven an efficient approach to compress pre-trained language models via the removal of redundant parameters. According to the granularity of pruning, existing methods can be classified into three categories: Structured Pruning [26, 43, 24], Unstructured Pruning [17, 15], and Semi-Structured Pruning [12, 38, 29, 32, 33]. Structured pruning physically eliminates substructures like attention heads [26], embeddings or depth [43] in the model, facilitating acceleration independent of specialized hardware or software infrastructure [32]. However, structured approaches typically necessitate huge retraining efforts to recover network quality due to coarse removal of parameters [26, 43, 27, 2]. Conversely, unstructured methods aim to find a sparse model by zeroing out parameters in LLMs, which is characterized by its flexibility and minimal detrimental effect on LLMs\u2019 accuracy [12, 38, 20, 42, 44]. The acceleration of sparse models is typically impeded by the irregular nature of the resulting sparse patterns, presenting challenges in achieving computational efficiency. Positioned between structured and unstructured methods, the semi-structured approach introduces hardware-friendly patterns such as N:M sparsity, which leaves only $N$ nonzero values in each group of $M$ values and thereby harmonizes the acceleration beneftis of a structured pattern with the flexibility of fine-grained sparsity [32, 33, 12]. In this study, we focus on N:M semi-structured sparsity within Large Language Models and present a learnable framework to obtain high-quality masks via end-to-end training. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Learnable Semi-Structured Sparsity. On another hand, a burgeoning interest exists in developing learnable masks [49, 25, 47], especially in the field of vision models. Markedly contrasted with traditional one-shot pruning methods that rely on a predetermined metric of importance, learnable sparsity can fully leverage the rich information in training data, enabling the identification of more effective sparsity masks. A particularly popular strategy is to directly update the network weight, such as pushing partial weights to zero with Sparse-Refined Straight-Through Estimator (SR-STE) [3, 17, 25] or permuting parameters to achieve better quality [33]. Other methods learn additional indicators to reveal the importance of weight, such as differentiable indexing [35], optimizable combination [47], or decaying [22]. In this work, we make the first attempt to learn N:M masks for frozen LLMs, which is much more challenging due to the huge parameter amount and problem scale. ", "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 N:M Sparsity ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We motivate and introduce a learnable framework, MaskLLM, to sparsify Large Language Models (LLMs) for improved inference efficiency. Sparsifying an LLM with N:M patterns imposes the constraint of having (no more than) N non-zero values within each consecutive set of M parameters. This task can be formulated as a mask selection problem with the candidate set of $\\begin{array}{r}{|\\bar{\\bf s}|=\\binom{M}{N}=}\\end{array}$ $\\frac{M!}{N!(M{-}N)!}$ candidates, where $\\lvert\\mathbf{S}\\rvert$ denotes the size of the candidate set, and $\\binom{M}{N}$ represents the combination number of potential N:M masks. For simplicity, this work primarily focuses on 2:4 sparsity, which can be naturally extended to other patterns such as 1:4 and 4:8. Given a parameter block comprising four consecutive parameters, denoted as $\\boldsymbol{\\mathscr{W}}\\in\\mathbb{R}^{1\\times4}$ , the goal of sparsification is to identify the optimal binary mask $\\mathcal{M}^{\\ast}\\in\\mathbb{B}^{1\\times4}$ of the same size, ensuring that the pruned weight maintains its behavior on observed data $x\\sim p(x)$ . For 2:4 sparsity, the binary mask $\\mathcal{M}$ must contain exactly two zeros, resulting in a discrete candidate set $\\mathbf{S}^{2:4}$ with $|\\mathbf{S}^{2:4}|={\\binom{4}{2}}=6$ candidates: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{S}^{2:4}=\\{\\mathcal{M}\\in\\mathbb{B}^{1\\times4}|\\sum\\mathcal{M}=2\\}=\\{\\hat{\\mathcal{M}}_{1},\\hat{\\mathcal{M}}_{2},\\hat{\\mathcal{M}}_{3},\\hat{\\mathcal{M}}_{4},\\hat{\\mathcal{M}}_{5},\\hat{\\mathcal{M}}_{6}\\}}\\\\ &{\\;\\;\\;\\;\\;\\;\\;=\\{[1,1,0,0],[1,0,1,0],[1,0,0,1],[0,1,0,1],[0,1,1,0],[0,0,1,1]\\}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "For an LLM, there exists a substantial number of parameter blocks, denoted as $\\{\\mathcal{W}_{i}\\}$ , each requiring the selection of corresponding masks $\\{\\mathcal{M}_{i}\\}$ . To maintain satisfactory behavior after pruning, it is natural to define the following objective for N:M sparsity: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\left\\{\\mathcal{M}_{i}^{\\ast}\\right\\}=\\operatornamewithlimits{a r g m i n}_{\\left\\{\\mathcal{M}_{i}\\left|\\mathcal{M}_{i}\\in\\mathbf{S}^{2:4}\\right\\}}\\mathbb{E}_{x\\sim p\\left(x\\right)}\\left[\\mathcal{L}_{L M}\\!\\left(x;\\left\\{\\mathcal{W}_{i}\\odot\\mathcal{M}_{i}\\right\\}\\right)\\right],\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\mathcal{L}_{L M}$ refers to the language modeling loss for pre-training. The operator $\\odot$ denotes elementwise multiplication, which masks partial parameters for sparsification. However, finding the optimal combination of masks $\\mathcal{M}^{\\ast}$ can be extremely challenging in the context of LLMs due to the nondifferentiable nature of mask selection and the huge parameter scale. In the following sections, we demonstrate that the mask selection can be transformed into a sampling process. ", "page_idx": 2}, {"type": "text", "text": "3.2 MaskLLM: Learnable Semi-Structured Sparsity ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Consider a single parameter block $\\boldsymbol{\\mathscr{W}}\\in\\mathbb{R}^{1\\times4}$ consisting of only 4 parameters: directly determining the exact optimal mask for this block is not feasible, since the behavior of the pruned LLM also depends on the pruning of other parameter blocks. Nevertheless, it remains feasible to sample masks independently for each block and assess the overall model quality after pruning. To facilitate random sampling of $\\mathcal{M}$ , we define a categorical distribution with class probability $p_{1},p_{2},\\ldots.p_{|S|}$ , which satisfy $\\textstyle\\sum_{j}p_{j}\\,=\\,1$ . During the random sampling phase, if a certain mask achieves good quality during pruning, it\u2019s reasonable to adjust the categorical distribution by increasing the probability of the sampled mask. With sufficient sampling and updates, this process ends with a distribution where the mask with high probability is more likely to maintain good quality after pruning. Formally, we model the combination problem in Equation 3 from the perspective of random sampling: ", "page_idx": 2}, {"type": "image", "img_path": "Llu9nJal7b/tmp/c5fe700b2d24457b89d811d810266f60957a07bb96f6db2f2ba06eca97d7d920.jpg", "img_caption": ["Figure 2: This work introduces learnable semi-structured sparsity for LLMs. MaskLLM models mask selection as a distribution learning problem, enabling the creation of accurate masks through end-to-end training on large-scale datasets. The learned and general mask can be further transferred to downstream tasks or domains, achieving lossless compression. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "equation", "text": "$$\n\\left\\{p^{*}(\\mathcal{M}_{i})\\right\\}=\\underset{\\{p(\\mathcal{M}_{i})\\}}{\\mathrm{argmin}}\\,\\mathbb{E}_{x\\sim p(x),\\mathcal{M}_{i}\\sim p(\\mathcal{M}_{i})}\\left[\\mathcal{L}_{L M}\\big(x;\\{\\mathcal{W}_{i}\\odot\\mathcal{M}_{i}\\}\\big)\\right],\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $p(\\mathcal{M}_{i})$ refers to the categorical distribution of $i$ -th mask $\\mathcal{M}_{i}$ . If it is feasible to get the gradient w.r.t. the distribution, then the above objective can be optimized with gradient descent as demonstrated in Figure 2. Nonetheless, drawing samples from a categorical distribution is still non-differentiable. ", "page_idx": 3}, {"type": "text", "text": "Differentiable Sampling of Masks An effective method to model a sampling operation is Gumbel Max [14], a re-parameterization trick that disentangles the randomness of sampling into a noise variable. This trick introduces a method to draw samples from the categorical distribution $p$ with an additional noise variable $\\epsilon$ . It produces the one-hot index $y$ for sampling: ", "page_idx": 3}, {"type": "equation", "text": "$$\ny=\\mathrm{onehot}(\\underset{i}{\\mathrm{argmax}}[\\mathrm{log}(p_{i})+g_{i}]),\\ g_{i}=-\\log(-\\log\\epsilon_{i}),\\ \\epsilon_{i}\\sim U(0,1),\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\epsilon_{i}$ is a random noise following uniform distribution, and the $g_{i}=-\\log(-\\log\\epsilon_{i})$ is known as the Gumbel noise. With the Gumbel Max trick, the randomness of sampling is parameterized to an independent variable $g_{i}$ . The only issue towards differentiable sampling lies in the argmax and onehot operation. To address this, we leverage Gumbel Softmax [21] to approximate the index with Softmax, leading to a soft and differentiable index $\\tilde{\\mathbf{y}}=[\\tilde{y}_{1},\\tilde{y}_{2},\\dots,\\tilde{y}_{|\\mathbf{S}|}]$ : ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\tilde{y}_{i}=\\frac{\\exp((\\log(p_{i})+g_{i})/\\tau)}{\\sum_{j}\\exp((\\log(p_{j})+g_{j})/\\tau)}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The temperature term $\\tau$ is a hyper-parameter, controlling the hardness of the sampled index. While $\\tau\\rightarrow0$ , the soft index will be more close to a one-hot vector, resulting in $\\tilde{y}_{i}\\rightarrow y_{i}$ . With the soft index $\\tilde{\\mathbf{y}}$ as a row vector and the mask set $\\mathbf{S}$ as a matrix where each row $i$ refers to the $i$ -th candidate mask $\\hat{\\mathcal{M}}_{i}$ , it\u2019s easy to craft a differentiable mask through a simple matrix multiplication: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\tilde{\\mathcal{M}}=\\tilde{\\mathbf{y}}\\times\\mathbf{S}=\\sum_{i=1}^{|\\mathbf{S}|}\\tilde{y}_{i}\\cdot\\hat{\\mathcal{M}}_{i}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "This operation produces a weighted average of candidate masks according to the soft index. As shown in Figure 3, we can find all operations, including the sampling and weighted averaging are differentiable, and the gradient $w.r t$ . the probability $p$ can be easily computed. This allows using the differentiable mask $\\tilde{\\mathcal{M}}$ to optimize the sampling problem defined in Equation 4. ", "page_idx": 3}, {"type": "image", "img_path": "Llu9nJal7b/tmp/d0a26c9d6d2907e9cc6b0d78545544d0f44538dd0a3e0588127aadf24a163a64.jpg", "img_caption": ["Figure 3: Drawing a random mask from the learnable distribution with Gumbel Softmax. Each consecutive M parameters are associated with a learnable distribution for candidate masks. All illustrated computations, including Gumbel Softmax, and the weighted averaging are differentiable. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "Learning Masks for LLMs Equation 7 provides a differentible mask sampled from the underlying distribution $p$ . The gradient flow can easily reach the probability $p_{i}$ , making it an optimizable variable in the system. Typically, we do not directly learn the probability and instead, learn the logits $\\pi_{i}$ with a scaling factor $\\kappa$ , which produces the probability as $\\begin{array}{r}{p_{i}\\,=\\,\\frac{\\dot{\\exp(\\pi_{i}\\cdot\\kappa)}}{\\sum_{j}\\exp(\\pi_{j}\\cdot\\kappa)}}\\end{array}$ ej xepx(p\u03c0(i\u03c0\u00b7\u03baj\u00b7)\u03ba). As will be discussed in Section 4.3, the scaling factor $\\kappa$ will be used to balance the relative magnitude of logits and Gumbel noises, which controls the randomness of sampling. During training, all parameter blocks $\\{\\mathcal{W}_{i}\\}$ are associated with the corresponding distributions $\\bar{\\{p_{\\pi}(M_{i})\\}}$ , and optimal distribution can be learned in an end-to-end manner. However, our empirical experiments on several large language models reveal a new issue with the learnable masks: the gradient may vanish due to the pruning operation that produces zero parameters in the network. This issue will adversely affect downstream transfer and fine-tuning. To address this, we introduce Sparse Weight Regularization, which maintains an appropriately large magnitude in the remaining weights, leading to the following learning objective: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\{p_{\\pi}(M_{i})\\}}\\mathbb{E}_{x,\\tilde{M}_{i}\\sim p_{\\pi}(M_{i})}\\left[\\mathcal{L}_{L M}\\big(x;\\{\\mathcal{W}_{i}\\odot\\tilde{\\mathcal{M}}_{i}\\}\\big)\\right]-\\lambda\\sum_{i}\\|\\mathcal{W}_{i}\\odot\\tilde{\\mathcal{M}}_{i}\\|_{2}^{2}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The regularization term weighted by $\\lambda$ encourages a large magnitude after pruning. ", "page_idx": 4}, {"type": "text", "text": "Transfer Learning of Sparsity. Transfer learning is one of the most popular paradigms in deep learning. In this section, we show the feasibility of transfer learning in sparsity, which crafts new masks by inheriting pre-computed ones. The pre-computed masks can be obtained with oneshot pruning methods like Magnitude Pruning [15], SparseGPT [12] and Wanda [38], or produced by another learning process. Note that given a probability $[p_{1},p_{2},\\cdot\\cdot\\cdot,p_{|}\\mathbf{S}|]$ , the transformation to the final mask is straightforward with a simple argmax. However, if it is possible to map a pre-computed mask back to the class probabilities, then the proposed MaskLLM can begin with a good initialization for sampling. This can hugely improve learning efficiency and quality. To achieve this, we propose Mask Prior, a simple technique to initialize a distribution. Given a prior mask denoted as $\\mathcal{M}_{\\mathrm{0}}$ , we compute its similarity to all candidate masks as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\sin(\\mathcal{M}_{0},\\hat{\\mathcal{M}}_{i})=\\mathcal{M}_{0}\\hat{\\mathcal{M}}_{i}^{\\top}-\\frac{1}{\\lvert\\mathbf{S}\\rvert}\\sum_{i}(\\mathcal{M}_{i}\\hat{\\mathcal{M}}^{\\top})=\\mathcal{M}_{i}\\hat{\\mathcal{M}}^{\\top}-(N/2),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "which computes the inner product of two masks and re-centers the results with the mean. Note that for N:M sparsity, the range of $\\mathcal{M}_{0}\\hat{\\mathcal{M}}_{i}^{\\top}$ will always be $[0,N]$ , the mean value $\\sum_{i}(\\mathcal{M}_{i}\\hat{\\mathcal{M}}^{\\top})=N/2$ is a constant. For candidate masks with high similarity to the prior mask, we increase its probability at the initialization stage with: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\pi_{i}^{\\prime}=\\pi_{i}+\\sigma(\\pi)*\\sin(\\mathcal{M}_{0},\\hat{\\mathcal{M}}_{i})*\\alpha,\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\sigma(o)$ is the standard deviation of logits and $\\alpha$ is a hyper-parameter that controls the strength of prior. When $\\alpha=0$ , we learn the differentiable mask without any prior from one-shot methods. ", "page_idx": 4}, {"type": "text", "text": "Method Summary. The learning process of MaskLLM is straightforward. We begin with randomly initialized logits and update it with prior masks as Equation 10 if available. Then we optimize the logits to solve the objective in Equation 8. The mask $\\mathcal{M}_{i}$ with the largest logits will be taken as the final mask for inference. This process is summarized in Algorithm 1. ", "page_idx": 4}, {"type": "text", "text": "1: procedure DIFFERENTIABLE $\\operatorname{MASK}(\\pi,S)$   \n2: Obtain the soft index ej xepx(p((\u03c0(i\u03c0\u00b7j\u03ba\u00b7+\u03bag+ig)j/)\u03c4/)\u03c4), gi = \u2212log(\u2212log \u03f5i), \u03f5i \u223cU(0, 1).   \n3: Compute the differentiable mask $\\begin{array}{r}{\\tilde{\\mathcal{M}}=\\tilde{\\mathbf{y}}\\times\\mathbf{S}=\\sum_{i=0}^{|\\mathbf{S}|}p_{i}\\cdot\\mathcal{M}_{i}}\\end{array}$   \n4: return $\\tilde{\\mathcal{M}}$   \n5: end procedure   \n6: $\\mathbf{S}=\\left\\{\\hat{\\mathcal{M}}_{1},\\hat{\\mathcal{M}}_{2},\\dotsc,\\hat{\\mathcal{M}}_{|\\mathbf{S}|}\\right\\}=\\left\\{\\left[1,1,0,0\\right],\\left[1,0,1,0\\right],\\dotsc\\left[0,0,1,1\\right]\\right\\}$   \n7: \u25b7Parallel for all parameter blocks $\\mathcal{W}$ :   \n8: Initialize logits $\\bar{\\pi_{i}}\\sim\\mathcal{N}(0,\\sigma)$ for the parameter block $\\mathcal{W}$   \n9: Incorporate prior $\\pi_{i}^{\\prime}=\\pi_{i}+\\sigma(\\pi)*\\sin(\\mathcal{M}_{0},\\hat{\\mathcal{M}}_{i})*\\alpha$ with prior mask $\\mathcal{M}_{\\mathrm{0}}$   \n10: while Training not terminated do   \n11: $\\tilde{\\mathcal{M}}=\\mathrm{DifferentiableMask}(\\pi,\\mathbf{S})$   \n12: Update logits $\\pi$ with $\\nabla_{\\pi}[\\mathcal{L}_{L M}(x;\\mathcal{W}\\odot\\tilde{\\mathcal{M}})-\\lambda\\|\\mathcal{W}\\odot\\tilde{\\mathcal{M}}\\|_{2}^{2}]$   \n13: end while   \n14: Get the index $k=\\mathrm{argmax}(\\pi)$   \n15: Obtain the mask $\\hat{\\mathcal{M}}^{*}=\\hat{\\mathcal{M}}_{k}$ for pruning ", "page_idx": 5}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "4.1 Implementation Details. ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We evaluated MaskLLM on three large language model families, ranging in size from 843M to 15B parameters. This included public models like LLaMA-2 7B and 13B [39], Nemotron-4 15B [31], and two in-house models, multilingual GPT-3 843M and 2B [36]. For LLaMA-2 and Nemotron-4, we collected a blended training set following the original papers [36, 31] for training. For the GPT-3 multilingual models, we used the original training set for mask learning. To learn masks, we trained the Gumbel logits for 2,000 steps without updating the LLM parameters. For evaluation, we follow SparseGPT [12] to use C4 dataset [34] for one-shot pruning and Wikitext [28] for evaluation. In addition, we also deploy LM-Eval-Harness [13] for zero-shot evaluation. More details about the models, datasets, training, and evaluation can be found in the appendix. ", "page_idx": 5}, {"type": "text", "text": "4.2 Learning 2:4 Sparsity in LLMs ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Finding 1. Learnable Sparsity scales effectively to large-scale datasets and can fully leverage computational resources to learn precise masks through end-to-end training. ", "page_idx": 5}, {"type": "text", "text": "End-to-end training yields accurate masks. In Table 1, we report the perplexity and accuracies of our method, compared to three 2:4 sparse baselines: Magnitude Pruning [16], SparseGPT [12], and Wanda [38]. Previous works can produce satisfactory 2:4 masks efficiently but often suffer from inaccurate estimation of weight importance. The inaccuracy mainly arises from two factors: (1) Accuracy of importance metric: Due to the difficulty of computing the error caused by pruning, existing methods use approximated metrics to estimate weight importance, which inevitably results in errors. (2) Scalability: LLMs are usually pre-trained on large-scale datasets with rich knowledge, but the calibration sets used in existing methods contain very limited samples. With the learnable mask, the above challenges can be naturally addressed through end-to-end training on large-scale datasets, which directly optimizes the language modeling loss. As illustrated in Table 1, MaskLLM yields superior results compared to existing baselines. For instance, with the LLaMA-2 7B model, the proposed method learns a mask with a PPL of 6.72, which is better than the PPL of 10.42 obtained by SparseGPT with weight update. More results such as comparison to other baselines (Table 13) and visualization of mask difference (Figure 8) can be found in the appendix. ", "page_idx": 5}, {"type": "text", "text": "Scaling to large-scale datasets. To further elaborate on the above analysis, we illustrate the relationship between the number of consumed samples and the Wikitext PPL of pruned LLaMA2 7B in Figure 4. For one-shot methods such as SparseGPT, all consumed samples are used to compute the Hessian for importance estimation. Increasing the calibration set size from 32 to 256 samples improves the results, but expansion beyond 256 samples yields no notable advantages. ", "page_idx": 5}, {"type": "table", "img_path": "Llu9nJal7b/tmp/25f2bdaa72d716d5cce500ff0d71ba466b5c93bdb5beb9023094ad0374c3472c.jpg", "table_caption": [], "table_footnote": ["Table 1: Evaluation of 2:4 Sparsity with frozen weights (SparseGPT does perform the weight update step). One-shot pruning methods are calibrated with C4 and evaluated on Wikitext-2 following [12]. More results for Llama-3 [1] or other SOTA methods can be found in Table 12 and 13 of the appendix. "], "page_idx": 6}, {"type": "text", "text": "In contrast, our proposed learnable method effectively scales to large datasets. Results in Figure 4 show that increasing the number of samples within our framework consistently improves mask quality, with positive results still observable when scaling up to $512\\mathrm{k}$ samples. Additionally, our method is also data-efficient and thus applicable to low-resource scenarios with only 1280 samples. With a batch size of 256, the learnable mask is updated for only 5 steps and still produces slightly better masks than SparseGPT. If limited to only one or two steps, the training-based method fails to be comparable to one-shot methods, as this limits the random exploration for finding high-quality masks. ", "page_idx": 6}, {"type": "image", "img_path": "Llu9nJal7b/tmp/b0e3aab0f2ae31f05bf912f104363d3de3fd8616db85c084735a515d8ea1f056.jpg", "img_caption": ["Figure 4: Consumed samples vs. PPL on LLaMA2 7B. MaskLLM requires 128 samples for the prior and outperforms SparseGPT after 1280 samples. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "4.3 How to Learn a Good Mask for LLMs ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Finding 2. Taking pre-computed masks as prior improves training efficiency and mask quality. ", "page_idx": 6}, {"type": "text", "text": "Transfer Learning with Mask Prior. An important feature of the proposed method lies in transfer learning. We can initialize the Gumbel logits with pre-computed masks, which significantly accelerate the training. In Table 2, we learn masks using different prior types, including Magnitude prior [15], SparseGPT prior [12], and Wanda prior [38]. Firstly, even without any prior, the learnable mask still achieves superior quality compared to the existing baseline methods, demonstrating its capability to independently discover high-quality masks through end-to-end training. However, learning accurate masks in only 2,000 steps can be challenging due to the massive parameter scale of LLMs. Using prior masks pre-computed by one-shot methods can provide substantial benefits. For example, with the Magnitude prior that can be easily pre-computed according to the weight magnitude, we can improve the wikitext perplexity of LLaMA-2 7B from 9.12 to 6.77. ", "page_idx": 6}, {"type": "image", "img_path": "Llu9nJal7b/tmp/e680dd03563e5cf4735c1683d7c9183f185f721f61700dfef8c4a588c3ceba10.jpg", "img_caption": ["(a) The mask difference between adjacent steps "], "img_footnote": [], "page_idx": 7}, {"type": "image", "img_path": "Llu9nJal7b/tmp/bc3d938d278d24c00bca723e51dd5106a0571d1560c43954ce23dd6327c2b9e7.jpg", "img_caption": ["(b) The Maximum probability of mask distribution "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Figure 5: (a) The L1 distance of sampled masks between adjacent training steps. (b) The maximum probability of mask distribution, serving as an indicator of convergence. In our method, the randomness of mask sampling is regulated by the scaling factor $\\kappa$ . A too-small $\\kappa$ introduces huge randomness, resulting in slow convergence as shown in (b). And an inappropriately large $\\kappa$ will suppress mask exploration and yield zero mask difference throughout the training process in (a). ", "page_idx": 7}, {"type": "table", "img_path": "Llu9nJal7b/tmp/f1849a3bd62e57db0810f1331483c07984deaa3fd98cd979f712a8cef4e2b11e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Table 2: The effectiveness of transfer learning with prior masks. We report the Wikitext PPL of both prior and learned masks. The learned masks use the corresponding prior for initialization and refine the logits through end-to-end training. All results are obtained with frozen weights. ", "page_idx": 7}, {"type": "text", "text": "Finding 3. The randomness of sampling is crucial for mask learning. ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Encouraging stochastic exploration on candidate masks. At the early stage of mask learning, the optimal mask is unknown. The stochastic sampling with Gumbel softmax allows for the exploration of different candidate masks, which is crucial for effective learning. As mentioned in Section 3.2, the scaling factor $\\kappa$ controls the randomness of sampling. To illustrate this, we visualize the learning process in Figures 5a and 5b, showing the mask difference between adjacent steps and the maximum probability of the learnable distribution, respectively. With a large factor, such as $\\kappa{=}1{\\mathrm{e}}5$ , the Gumbel softmax will be dominated mainly by the logits rather than the Gumbel noises, which produce similar masks with high confidence throughout the training process. In contrast, with a small scaling factor, such as $\\kappa{=}1$ , the Gumbel noises contribute more to the sampling. As illustrated in Figure 5a, the mask is continuously changing during training, leading to slow convergence. Therefore, selecting an appropriate scaling factor is crucial, which should guarantee sufficient randomness and an acceptable convergence speed. In this work, we use a $\\kappa{=}1\\mathrm{e}2$ and linearly increase it to 5e2 for all experiments. ", "page_idx": 7}, {"type": "text", "text": "Finding 4. Maintaining a large magnitude of the remaining weights improves downstream tasks. ", "page_idx": 7}, {"type": "text", "text": "Maintaining a large magnitude of the remaining weights. ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In Equation 8, we introduce a regularizer in the form of $\\begin{array}{r}{-\\lambda\\sum_{i}\\|\\mathcal{W}_{i}\\odot\\tilde{\\mathcal{M}}_{i}\\|_{2}^{2}}\\end{array}$ . This regularizer is crucial for both mask learning and transfer learning, as it directly influences the magnitude of gradients during training. For instance, if certain layers are pruned to a small magnitude, the gradients passed to their inputs will also diminish, thereby impeding mask learning and transfer to downstream tasks. In Table 3, we demonstrate the effectiveness of weight regularization under different scenarios, such as mask training, LLM fine-tuning after pruning, and transfer learning to downstream tasks. As will be elaborated in subsequent sections, the proposed regularization helps the learning of lossless masks for downstream tasks. We provide more analysis in Section F of the Appendix. ", "page_idx": 7}, {"type": "table", "img_path": "Llu9nJal7b/tmp/b52fcdb5e34598443b563dbff782e34e7a2c8edb991b4d93c631de23edb3a930.jpg", "table_caption": [], "table_footnote": ["Table 3: Weight Regularization on remaining weights helps mask learning "], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "table", "img_path": "Llu9nJal7b/tmp/d1ac578d42f7009e9ec44a978dadbc045c9acc4c922e8001dc8a3d2bbb415601.jpg", "table_caption": [], "table_footnote": ["Table 4: Learning customized masks for downstream tasks with frozen LLM weights. "], "page_idx": 8}, {"type": "table", "img_path": "Llu9nJal7b/tmp/f498486e1426829f282a0bc54fdd8170635050b5c62701277cfd3a37f172e07b.jpg", "table_caption": [], "table_footnote": ["fective for downstream tasks. "], "page_idx": 8}, {"type": "table", "img_path": "Llu9nJal7b/tmp/c3183563cae1499d5f9efa37a2fa2ff0436fb7998544bd75b926e387ca42e036.jpg", "table_caption": [], "table_footnote": ["Transfer learning is ef- Table 6: Storage and inference cost of of llama-2 7B for downstream task "], "page_idx": 8}, {"type": "text", "text": "4.4 Learning N:M Sparsity for Downstream Tasks ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Finding 5. Learned masks can losslessly adapt frozen LLMs to downstream tasks, offering a $1.4\\times$ wall clock GPU speed up and $73\\%$ memory footprint. ", "page_idx": 8}, {"type": "text", "text": "Large language models can achieve satisfactory quality across a variety of tasks. In many cases, we are more interested in one particular ability of these large models under a specific task, such as programming or translation, for which an LLM is over-parameterized. This naturally introduces a new problem: can we learn a mask for specific tasks to achieve lossless compression? To evaluate this, we learn masks for 2,000 steps separately on different domains and tasks and report the task-wise PPL in Table 4. We considered one-shot pruning as baselines, where we collected 256 samples from the task dataset for calibration. Results show that lossless masks can be learned for many tasks with our method. ", "page_idx": 8}, {"type": "text", "text": "We also evaluated the power of transfer learning for downstream tasks in Table 5. To deploy sparse LLMs for a single task, we can directly pick the pre-computed general mask from Table 1, or train an \u201cexpert\u201d mask from scratch. However, both strategies show a quality drop compared to the dense model $(\\mathbf{PPL}{=}7.42)$ since they either allocate some capacity for other domains $(\\mathrm{PPL}{=}10.61)$ ) or only see limited data from target domains $(\\mathrm{PPL}{=}7.51$ ). Our work leverages the general mask as prior and transfers it to the downstream tasks, which can produce lossless models $({\\mathrm{PPL}}{=}7.39)$ ). ", "page_idx": 8}, {"type": "text", "text": "Updating parameters for downstream tasks results in additional copies of the model for each task, incurring higher storage costs. Learning masks alone allows for encoding task-specific masks with minimal space while keeping only a single, shared copy of the original parameters. As shown in Table 6, task-specific masks only need 0.65 bits per parameter for storage on disk using simple arithmetic coding3 with a static, uniform symbol distribution. For ${\\mathrm{BS}}{=}1$ inference on an A6000 GPU, 2:4 sparsity brings $1.4\\times$ acceleration and $27\\%$ reduction in the memory footprint (broader speedup results appear in Table 16 in the appendix). ", "page_idx": 8}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In this work, we present MaskLLM, a learnable pruning method that crafts accurate N:M sparsity in LLMs, thereby reducing computational overhead during inference. Our empirical experiments on several models show the scalability of MaskLLM to large-scale data and the effectiveness of end-toend training for mask learning. Furthermore, we demonstrate that lossless compression with N:M sparsity is attainable in downstream tasks, underscoring its practicality for real-world applications. ", "page_idx": 8}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This work is in part supported by the Singapore Ministry of Education Academic Research Fund Tier 1 (WBS: A-0009440-01-00). We would like to thank Jorge Albericio Latorre for the fruitful discussion and feedback on the project. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] AI@Meta. Llama 3 model card. 2024. [2] Saleh Ashkboos, Maximilian L Croci, Marcelo Gennari do Nascimento, Torsten Hoefler, and James Hensman. Slicegpt: Compress large language models by deleting rows and columns. arXiv preprint arXiv:2401.15024, 2024.   \n[3] Yoshua Bengio, Nicholas L\u00e9onard, and Aaron Courville. Estimating or propagating gradients through stochastic neurons for conditional computation. arXiv preprint arXiv:1308.3432, 2013.   \n[4] Vladim\u00edr Bo\u017ea. Fast and optimal weight update for pruned large language models. arXiv preprint arXiv:2401.02938, 2024. [5] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:1877\u20131901, 2020. [6] Wei-Lin Chiang, Lianmin Zheng, Ying Sheng, Anastasios Nikolas Angelopoulos, Tianle Li, Dacheng Li, Hao Zhang, Banghua Zhu, Michael Jordan, Joseph E. Gonzalez, and Ion Stoica. Chatbot arena: An open platform for evaluating llms by human preference, 2024.   \n[7] Together Computer. Redpajama: an open dataset for training large language models, October 2023.   \n[8] Rocktim Jyoti Das, Liqun Ma, and Zhiqiang Shen. Beyond size: How gradients shape pruning decisions in large language models. arXiv preprint arXiv:2311.04902, 2023.   \n[9] Peijie Dong, Lujun Li, Zhenheng Tang, Xiang Liu, Xinglin Pan, Qiang Wang, and Xiaowen Chu. Prunerzero: Evolving symbolic pruning metric from scratch for large language models. In Forty-first International Conference on Machine Learning, 2024.   \n[10] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint arXiv:2010.11929, 2020.   \n[11] Jonathan Frankle and Michael Carbin. The lottery ticket hypothesis: Finding sparse, trainable neural networks. arXiv preprint arXiv:1803.03635, 2018.   \n[12] Elias Frantar and Dan Alistarh. Sparsegpt: Massive language models can be accurately pruned in one-shot. In International Conference on Machine Learning, pages 10323\u201310337. PMLR, 2023.   \n[13] Leo Gao, Jonathan Tow, Baber Abbasi, Stella Biderman, Sid Black, Anthony DiPof,i Charles Foster, Laurence Golding, Jeffrey Hsu, Alain Le Noac\u2019h, Haonan Li, Kyle McDonell, Niklas Muennighoff, Chris Ociepa, Jason Phang, Laria Reynolds, Hailey Schoelkopf, Aviya Skowron, Lintang Sutawika, Eric Tang, Anish Thite, Ben Wang, Kevin Wang, and Andy Zou. A framework for few-shot language model evaluation, 12 2023.   \n[14] Emil Julius Gumbel. Statistical theory of extreme values and some practical applications: a series of lectures, volume 33. US Government Printing Office, 1954.   \n[15] Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. International Conference on Learning Representations (ICLR), 2016.   \n[16] Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. International Conference on Learning Representations (ICLR), 2016.   \n[17] Song Han, Jeff Pool, John Tran, and William Dally. Learning both weights and connections for efficient neural network. In Advances in Neural Information Processing Systems, pages 1135\u20131143, 2015.   \n[18] Yihui He, Xiangyu Zhang, and Jian Sun. Channel pruning for accelerating very deep neural networks. In Proceedings of the IEEE international conference on computer vision, pages 1389\u20131397, 2017.   \n[19] Dan Hendrycks, Collin Burns, Steven Basart, Andy Zou, Mantas Mazeika, Dawn Song, and Jacob Steinhardt. Measuring massive multitask language understanding. arXiv preprint arXiv:2009.03300, 2020.   \n[20] Ajay Jaiswal, Shiwei Liu, Tianlong Chen, and Zhangyang Wang. The emergence of essential sparsity in large pre-trained models: The weights that matter. arXiv preprint arXiv:2306.03805, 2023.   \n[21] Eric Jang, Shixiang Gu, and Ben Poole. Categorical reparameterization with gumbel-softmax. arXiv preprint arXiv:1611.01144, 2016.   \n[22] Sheng-Chun Kao, Amir Yazdanbakhsh, Suvinay Subramanian, Shivani Agrawal, Utku Evci, and Tushar Krishna. Training recipe for n: M structured sparsity with decaying pruning mask. arXiv preprint arXiv:2209.07617, 2022.   \n[23] Yann LeCun, John Denker, and Sara Solla. Optimal brain damage. Advances in neural information processing systems, 2, 1989.   \n[24] Zichang Liu, Jue Wang, Tri Dao, Tianyi Zhou, Binhang Yuan, Zhao Song, Anshumali Shrivastava, Ce Zhang, Yuandong Tian, Christopher Re, et al. Deja vu: Contextual sparsity for efficient llms at inference time. In International Conference on Machine Learning, pages 22137\u201322176. PMLR, 2023.   \n[25] Yucheng Lu, Shivani Agrawal, Suvinay Subramanian, Oleg Rybakov, Christopher De Sa, and Amir Yazdanbakhsh. Step: Learning n: M structured sparsity masks from scratch with precondition. In International Conference on Machine Learning, pages 22812\u201322824. PMLR, 2023.   \n[26] Xinyin Ma, Gongfan Fang, and Xinchao Wang. Llm-pruner: On the structural pruning of large language models. In Advances in Neural Information Processing Systems, 2023.   \n[27] Xin Men, Mingyu Xu, Qingyu Zhang, Bingning Wang, Hongyu Lin, Yaojie Lu, Xianpei Han, and Weipeng Chen. Shortgpt: Layers in large language models are more redundant than you expect. arXiv preprint arXiv:2403.03853, 2024.   \n[28] Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. Pointer sentinel mixture models, 2016.   \n[29] Asit Mishra, Jorge Albericio Latorre, Jeff Pool, Darko Stosic, Dusan Stosic, Ganesh Venkatesh, Chong Yu, and Paulius Micikevicius. Accelerating sparse deep neural networks. arXiv preprint arXiv:2104.08378, 2021.   \n[30] Pavlo Molchanov, Arun Mallya, Stephen Tyree, Iuri Frosio, and Jan Kautz. Importance estimation for neural network pruning. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 11264\u201311272, 2019.   \n[31] Jupinder Parmar, Shrimai Prabhumoye, Joseph Jennings, Mostofa Patwary, Sandeep Subramanian, Dan Su, Chen Zhu, Deepak Narayanan, Aastha Jhunjhunwala, Ayush Dattagupta, et al. Nemotron-4 15b technical report. arXiv preprint arXiv:2402.16819, 2024.   \n[32] Jeff Pool, Abhishek Sawarkar, and Jay Rodge. Accelerating inference with sparsity using the nvidia ampere architecture and nvidia tensorrt. NVIDIA Developer Technical Blog, https://developer. nvidia. com/blog/accelerating-inference-with-sparsityusing-ampere-and-tensorrt, 2021.   \n[33] Jeff Pool and Chong Yu. Channel permutations for n: M sparsity. Advances in neural information processing systems, 34:13316\u201313327, 2021.   \n[34] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. arXiv e-prints, 2019.   \n[35] Dibyanshu Shekhar, Sree Harsha Nelaturu, Ashwath Shetty, and Ilia Sucholutsky. End-to-end learnable masks with differentiable indexing. 2023.   \n[36] Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro. Megatron-lm: Training multi-billion parameter language models using model parallelism. arXiv preprint arXiv:1909.08053, 2019.   \n[37] Jianlin Su, Murtadha Ahmed, Yu Lu, Shengfeng Pan, Wen Bo, and Yunfeng Liu. Roformer: Enhanced transformer with rotary position embedding. Neurocomputing, 568:127063, 2024.   \n[38] Mingjie Sun, Zhuang Liu, Anna Bair, and J. Zico Kolter. A simple and effective pruning approach for large language models. arXiv preprint arXiv:2306.11695, 2023.   \n[39] Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288, 2023.   \n[40] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. Advances in neural information processing systems, 30, 2017.   \n[41] Ziheng Wang, Jeremy Wohlwend, and Tao Lei. Structured pruning of large language models. In Bonnie Webber, Trevor Cohn, Yulan He, and Yang Liu, editors, Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 6151\u20136162, Online, November 2020. Association for Computational Linguistics.   \n[42] Haojun Xia, Zhen Zheng, Yuchao Li, Donglin Zhuang, Zhongzhu Zhou, Xiafei Qiu, Yong Li, Wei Lin, and Shuaiwen Leon Song. Flash-llm: Enabling cost-effective and highly-efficient large generative model inference with unstructured sparsity. arXiv preprint arXiv:2309.10285, 2023.   \n[43] Mengzhou Xia, Tianyu Gao, Zhiyuan Zeng, and Danqi Chen. Sheared llama: Accelerating language model pre-training via structured pruning. arXiv preprint arXiv:2310.06694, 2023.   \n[44] Lu Yin, You Wu, Zhenyu Zhang, Cheng-Yu Hsieh, Yaqing Wang, Yiling Jia, Mykola Pechenizkiy, Yi Liang, Zhangyang Wang, and Shiwei Liu. Outlier weighed layerwise sparsity (owl): A missing secret sauce for pruning llms to high sparsity. arXiv preprint arXiv:2310.05175, 2023.   \n[45] Susan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen, Shuohui Chen, Christopher Dewan, Mona Diab, Xian Li, Xi Victoria Lin, et al. Opt: Open pre-trained transformer language models. arXiv preprint arXiv:2205.01068, 2022.   \n[46] Yingtao Zhang, Haoli Bai, Haokun Lin, Jialin Zhao, Lu Hou, and Carlo Vittorio Cannistraci. Plug-andplay: An efficient post-training pruning method for large language models. In The Twelfth International Conference on Learning Representations, 2023.   \n[47] Yuxin Zhang, Mingbao Lin, Zhihang Lin, Yiting Luo, Ke Li, Fei Chao, Yongjian Wu, and Rongrong Ji. Learning best combination for efficient n: M sparsity. Advances in Neural Information Processing Systems, 35:941\u2013953, 2022.   \n[48] Lianmin Zheng, Wei-Lin Chiang, Ying Sheng, Siyuan Zhuang, Zhanghao Wu, Yonghao Zhuang, Zi Lin, Zhuohan Li, Dacheng Li, Eric Xing, et al. Judging llm-as-a-judge with mt-bench and chatbot arena. Advances in Neural Information Processing Systems, 36, 2024.   \n[49] Aojun Zhou, Yukun Ma, Junnan Zhu, Jianbo Liu, Zhijie Zhang, Kun Yuan, Wenxiu Sun, and Hongsheng Li. Learning n: m fine-grained structured sparse neural networks from scratch. arXiv preprint arXiv:2102.04010, 2021. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "A Implementation Details ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "Here we provide more details about the models, training data, training configurations and other resources used in our experiments. ", "page_idx": 12}, {"type": "text", "text": "LLaMA-2 For LLaMA-2, we collected a blended training set following the official paper [39], which consists of corpuses from 69 domains, covering CUDA, VHDL, Reddit etc. For training, we selected a subset of $512\\mathrm{k}$ samples from the dataset and updated the learnable mask for 2,000 steps, with a global batch size of 256. We used 64 A100 GPUs during training with an 8-way tensor parallel configuration. The full training took 1,280 GPU hours for LLaMA-2 7B and 2,304 GPU hours for LLaMA-2 13B. In Table 11, we also provide training results solely using the C4 dataset. ", "page_idx": 12}, {"type": "text", "text": "Nemotron-4 For Nemotron-4, we collected a small training dataset covering three domains: CCMAIN-2021-31, Open Web Math, and Gutenberg Fuzzy. We used a subset of $512\\mathrm{k}$ samples and trained the model with 64 A100 GPUs using an 8-way tensor parallel configuration. The training process took 2,304 GPU hours. ", "page_idx": 12}, {"type": "text", "text": "GPT-3 (An Internal LLM). The GPT-3 multilingual models were pre-trained using the Megatron framework on a corpus of 1.1 trillion tokens. These models share a similar network architecture with the official GPT [5], utilizing the standard transformer architecture [40] with layer normalization, SwiGLU activation function, and Rotary Positional Embeddings (ROPE) [37]. Both the 2B and 843M parameter models comprise 24 transformer layers with 16 attention heads. The hidden sizes are 2048 for the 2B model and 1024 for the 843M model. Furthermore, the maximum sequence length for these models is 4096 tokens. For pre-training, a multilingual dataset was collected, encompassing 110 domains such as HTML, $C++$ , French, etc. ", "page_idx": 12}, {"type": "text", "text": "B Hyper-parameters ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "We summarize the hyper-parameters used in our experiments in Table 7. The main results of hyperparameter tuning are available in Table 10, where we assessed different temperature, logit scaling factors and prior strength with GPT-3 843M. ", "page_idx": 12}, {"type": "table", "img_path": "Llu9nJal7b/tmp/0e4d2e3a3b5c650dfc73141ae9a452c31fe54f15629e0733c2b8589fab8b77e9.jpg", "table_caption": ["Table 10: Hyper-parameter tuning on GPT-3 843M for the logit prior strength "], "table_footnote": ["Table 7: Training details and hyper-parameters for mask training "], "page_idx": 12}, {"type": "image", "img_path": "Llu9nJal7b/tmp/a92942993560c592c21cc9d23d53dfb0205779f59fa0bab1564315b81dedf699.jpg", "img_caption": [], "img_footnote": [], "page_idx": 12}, {"type": "text", "text": "C Mask Learning with the C4 Dataset ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In table 11, we compare the learned masks on the C4 dataset [34] with those on the blended datasets discussed in Section A. Our blended dataset encompasses a broader range of topics and domains compared to the C4 dataset, including coding, different languages, etc. Despite this, the result in table 11 still indicates that MaskLLM is able to learn accurate masks on the C4 dataset, with a minor difference $\\Delta{\\sf P P L}{=}0.07\\$ ) compared to the result obtained on the blended dataset. ", "page_idx": 13}, {"type": "table", "img_path": "Llu9nJal7b/tmp/18e10565e3a052e104907ef8f91f7f3e1cfd7fdb8ee18418cfed8d29b361fa28.jpg", "table_caption": ["Table 11: Wikitext-2 PPL of 2:4 LLaMA-2 7B pruned with different datasets "], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "D 2:4 Results on Llama-3 8B ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In table 12, we present additional pruning results for Llama-3 8B [1], adhering to the same training protocol as described in Table 7. For reproducibility, we utilize the C4 dataset for both calibration and mask learning. ", "page_idx": 13}, {"type": "table", "img_path": "Llu9nJal7b/tmp/fad1d752e38bdd16a5cfe324f582715c3af5be10fd1224a76cff02d6f9b88c34.jpg", "table_caption": ["Table 12: Wikitext-2 PPL of 2:4 LLaMA-3 8B, with the sequence length of 4096. We took the SparseGPT mask as the prior and learned the mask on the C4 dataset. "], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "E Comparison to More Pruning Methods for LLMs ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In Table 13, we compare MaskLLM to several baseline methods that were not implemented using the Megatron framework. We report the official results on Wikitext-2 PPL and LLaMA-2 13B. Even compared to methods that incorporate weight updates, our method achieves superior perplexity results. ", "page_idx": 13}, {"type": "table", "img_path": "Llu9nJal7b/tmp/f039202090dc2753febbad6a3f9d85ebd22aea504384a3d95082597ce8520b61.jpg", "table_caption": [], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "Table 13: Comparison to SOTA 2:4 pruning methods on LLaMA-2 13B, with all results collected from original papers or official implementations. ", "page_idx": 13}, {"type": "text", "text": "F Sparse Weight Regularization ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Weight Norm of Sparse LLMs. In Equation 8, we introduce an additional term to preserve sufficient gradients during training. As shown in Table 14, a larger weight regularization facilitates large gradients during training, which is beneficial for mask exploration. We also illustrate the weight magnitude of pruned LLMs, obtained using magnitude pruning, SparseGPT (Hessian) and MaskLLM in Figures 6a and 6b. These figures show the relative L1 norm of pruned weights compared to the magnitude pruning baseline, which produces the largest weight norm after pruning. An interesting observation is that, even when initialized with a magnitude prior, learnable method may still select some smaller values during pruning, resulting in a $10\\%$ lower norm than magnitude pruning. Introducing sparse weight regularization can effectively improve the weight norm of sparse LLMs and enhance their quality in further transfer learning or fine-tuning for downstream tasks. ", "page_idx": 14}, {"type": "table", "img_path": "Llu9nJal7b/tmp/390a7da287b4b9b65b0ab4dd496ee4b2abde1e89acb5348d57ef6e8aceb9ebda.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Table 14: Average Gradient Norm over the First 500 Training Steps of GPT-3 2B, with Varying Levels of Sparse Weight Regularization. In this study, we use a regularization strength of 1e-5 for mask learning, as it offers a stable gradient while imposing minimal constraints on the search space. ", "page_idx": 14}, {"type": "image", "img_path": "Llu9nJal7b/tmp/641ac3f03b52c65844653e942487f5da994249dcfad7fda6c42d92a582728186.jpg", "img_caption": ["(a) Relative norm of remaining weights (GPT-3 2B). (b) Relative norm of remaining weights (LLaMA2 7B). ", "Figure 6: The relative L1 norm of pruned weights compared to magnitude pruning "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "G Layer Sensitivity ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Sensitivity Analysis with Learnable Method. In Figure 7, we analyze the sensitivity of LLaMA-2 7B using both the learnable and one-shot methods. For efficiency, we update the learnable masks for 500 steps and use Wikitext PPL as the metric. We observe a similar trend in the learned masks and SparseGPT masks, suggesting that a fast one-shot pruning method can reliably indicate sensitivity. Additionally, for 2:4 sparsity, the last layer is typically more sensitive than other layers. To maintain satisfactory results, we can keep the last layer dense, achieving a good trade-off between efficiency and quality. In Table 15, we report the pruning results when a few layers are kept dense. ", "page_idx": 14}, {"type": "image", "img_path": "Llu9nJal7b/tmp/76328d25151705f15f05a9567f87baed14a58dda29351719a51c01140024e711.jpg", "img_caption": ["Figure 7: Layer Sensitivity of LLaMA-2 7B ", "Table 15: Keeping sensitive layers dense can be a way to trade-off quality and efficiency. "], "img_footnote": [], "page_idx": 14}, {"type": "table", "img_path": "Llu9nJal7b/tmp/1a6355c49361409c87bd21a3ac49fe19e9f151f5ba15fe0a552a185d98fd067f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "H Throughput of 2:4 LLaMA-2 7B. ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In Table 16, we benchmark the throughput of LLaMA-2 7B with 2:4 sparsity on an A6000 GPU using TensorRT-LLM for a batch size of 1. Throughput is evaluated as the number of tokens processed per second. Over a variety of input and output lengths, 2:4 sparsity achieves an overall acceleration of $1.36\\times$ to $1.41\\times$ compared to the dense model. ", "page_idx": 15}, {"type": "table", "img_path": "Llu9nJal7b/tmp/3d3c6d8944e33777d1304de7eb039863c56ed96aba907a500c428c8124ea666c.jpg", "table_caption": [], "table_footnote": ["Table 16: Benchmarking LLaMA-2 7B and 13B on A6000 with TensorRT-LLM. "], "page_idx": 15}, {"type": "text", "text": "I Mask Difference ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In Figure 8, we visualize the differences between learned masks and one-shot masks, using SparseGPT as the prior for the learnable mask. We observe that SparseGPT and Wanda produce similar masks, with differences typically ranging from $5\\%$ to $10\\%$ , due to their similar pruning objectives. Our method, however, can produce distinct masks compared to these baselines, as shown in Figures 8a and 8b. Additionally, we find that weight regularization is crucial for effective mask learning. Without weight regularization, the vanished gradient can hinder mask learning, resulting in only a $2.83\\%$ difference from the prior, as shown in Figure 8c. ", "page_idx": 15}, {"type": "image", "img_path": "Llu9nJal7b/tmp/efdcf794776bc8973afddaad0cc085c8ebdc7a49791e87127d9da22b336fd970.jpg", "img_caption": ["(a) Mask Difference on LLaMA-2 (b) Mask Difference on GPT-3 2B (c) Mask difference on LLaMA-2 7B with regularization with regularization 7B without regularization. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Figure 8: (a) & (b) Notable mask difference exists between learned masks and one-shot ones. (c) without sparse weight regularization, the vanished gradient caused by pruning will hinder mask training, leading to a low difference between prior masks and learned masks. ", "page_idx": 15}, {"type": "text", "text": "J MaskLLM for Vision Transformers ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "To evaluate the generalizability of learnable semi-structured sparsity, we further extend the proposed method to Vision Transformers (ViTs) [10]. Table 17 presents the top-1 accuracy on ImageNet-1K by pruning an off-the-shelf ViT-B/16. In the one-shot pruning scenario, we randomly selected 128 samples from the training dataset as the calibration set, and no additional fine-tuning was conducted post-pruning. For MaskLLM, we utilized the SparseGPT mask as a prior and directly optimized the learnable mask on the ImageNet dataset while keeping the model weights frozen. Remarkably, with just a single epoch of optimization, the learnable mask achieved an accuracy of $76.23\\%$ , significantly outperforming SparseGPT\u2019s $71.52\\%$ . Moreover, a fully optimized mask with 20 epochs of training achieved lossless compression $\\Delta\\mathrm{Acc}=+0.31\\%$ ) for the ViT-B/16 model. This observation also suggests the presence of a Lottery Ticket phenomenon [11] in modern Vision Transformers, where a sparse sub-network can match the original model\u2019s performance without any weight update. ", "page_idx": 15}, {"type": "table", "img_path": "Llu9nJal7b/tmp/a0d959ab5848759d97d8735ed855557583326bc9da44e9533ae1c0e47feac718.jpg", "table_caption": [], "table_footnote": ["Table 17: MaskLLM for Vision Transformers "], "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "K Limitations. ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In this work, we explore an end-to-end learning method for semi-structured pruning. Although our method yielded superior results, training LLMs with learnable masks inevitably consumes more resources compared to one-shot methods, which can produce masks efficiently. Improving the training efficiency of learnable masks is an important topic in future works. ", "page_idx": 16}, {"type": "text", "text": "L Broader Impacts. ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "The technique proposed in this paper will not lead to negative societal impact. On the contrary, it offers significant benefits, including the reduction of energy costs and carbon emissions associated with the deployment of Large Language Models. By optimizing for Semi-structured (or \u2018N:M\u2019) Sparsity, our method reduces the computational resources required for inference, thereby contributing to more sustainable and environmentally friendly AI applications. ", "page_idx": 16}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: This submission introduces a learnable method to learn semi-structured sparsity in large language models. ", "page_idx": 17}, {"type": "text", "text": "Guidelines: ", "page_idx": 17}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 17}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Justification: The limitation of this submission was discussed in section K ", "page_idx": 17}, {"type": "text", "text": "Guidelines: ", "page_idx": 17}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 17}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 17}, {"type": "text", "text": "Justification: No theoretical results in this submission. Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 18}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Justification: All hyperparameters and training settings are available in Table 7 of the appendix. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 18}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 18}, {"type": "text", "text": "Answer: [No] ", "page_idx": 19}, {"type": "text", "text": "Justification: This submission is not about data or models. Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 19}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: We discuss our datasets, hyper-parameters, and tuning results in the appendix. Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 19}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 19}, {"type": "text", "text": "Answer: [No] ", "page_idx": 19}, {"type": "text", "text": "Justification: error bar is not available in this submission. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We report the number of GPUs and GPU hours in appendix. Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 20}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: This submission follows the NeurIPS Code of Ethics. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 20}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Justification: This submission discusses potential societal impacts in the appendix Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to ", "page_idx": 20}, {"type": "text", "text": "generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. ", "page_idx": 21}, {"type": "text", "text": "\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. \u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 21}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: This submission is not about data or models. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 21}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: Assets are properly credited. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 21}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: No new asset in this submission. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 22}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 22}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 22}]