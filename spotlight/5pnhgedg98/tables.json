[{"figure_path": "5pnhGedG98/tables/tables_5_1.jpg", "caption": "Table 1: State features for policy and value network.", "description": "This table lists the features used as input to both the policy and value networks in the MultGame.  Each feature represents a different aspect of the state of the game, aiding the reinforcement learning agent in making decisions about which actions to take (adding a half or full adder). The \"Size\" column indicates the dimensionality of each feature.", "section": "3.2 MultGame"}, {"figure_path": "5pnhGedG98/tables/tables_7_1.jpg", "caption": "Table 2: Comparisons of discovered adders in size and area. Smaller sizes are preferable.", "description": "This table compares the size of 64-bit and 128-bit adders designed using different methods.  It shows the theoretical size lower bound and the sizes obtained by the Sklansky adder, an area heuristic method, the previously best-known sizes from literature, and the sizes achieved by the ArithTreeRL method proposed in the paper.  Smaller sizes are generally preferred in hardware design because they result in smaller and faster circuits.", "section": "4.1 Adder Design"}, {"figure_path": "5pnhGedG98/tables/tables_8_1.jpg", "caption": "Table 3: Accuracy of fast synthesis flow.", "description": "This table shows the accuracy of the fast synthesis flow compared to the full synthesis flow for adders with different bit widths.  The fast flow omits the routing step for increased speed.  The accuracy is assessed by comparing the delay and area estimations from the fast flow to the values obtained via the full flow.  The results show a high accuracy for area and over 95% accuracy for delay, demonstrating that the speedup of the fast flow does not come at a significant loss of accuracy. ", "section": "4.1 Adder Design"}, {"figure_path": "5pnhGedG98/tables/tables_9_1.jpg", "caption": "Table 4: Numerical comparison of multipliers in delay (ns) and area (\u00b5m\u00b2). (45nm)", "description": "This table presents a numerical comparison of multipliers in terms of delay (in nanoseconds) and area (in square micrometers), using a 45nm technology node.  The comparison includes several different methods: RL-MUL, PPO with raw flow, the default method, PPO (Proximal Policy Optimization), and the ArithTreeRL method proposed in the paper. For each method, the minimum delay and a trade-off objective (delay + 0.001area) are considered. Results are provided for 8-bit, 16-bit, 32-bit, and 64-bit multipliers.  The table allows for a direct comparison of the performance of each method in terms of both delay and area, highlighting the improvements achieved by the ArithTreeRL approach.", "section": "4.2 Multiplier Design"}, {"figure_path": "5pnhGedG98/tables/tables_16_1.jpg", "caption": "Table 5: Numerical comparison of multipliers in delay (ns) and area (\u00b5m\u00b2). (45nm)", "description": "This table presents a numerical comparison of different multiplier designs in terms of delay (in nanoseconds) and area (in square micrometers), specifically using a 45nm technology.  The comparison includes results from RL-MUL, the PPO method with raw and improved synthesis flow, and the default multiplier generated by the synthesis tool.  Results are shown for minimizing delay, minimizing area, and a trade-off between delay and area.  The table allows for a quantitative assessment of the performance improvements achieved by different approaches.", "section": "4.2 Multiplier Design"}, {"figure_path": "5pnhGedG98/tables/tables_17_1.jpg", "caption": "Table 6: Time cost for Adder Design (hours).", "description": "This table shows the time spent on designing adders using different methods for three different bit sizes (32-bit, 64-bit, and 128-bit).  The methods compared are PrefixRL, PrefixRL with a two-level retrieval strategy, and the authors' proposed ArithTreeRL method. The numbers in the table represent the total time (in hours) required to complete the design process for each method and bit size.  The two-level retrieval strategy significantly reduces the total time for the PrefixRL design process.  ArithTreeRL shows efficient time consumption compared to the other two methods.", "section": "4.1 Adder Design"}, {"figure_path": "5pnhGedG98/tables/tables_19_1.jpg", "caption": "Table 7: Results of a commercial synthesis tool. All designs are the best-discovered multipliers with the OpenROAD tool. Corresponding Verilog codes are input into the Synopsis Design Compiler for synthesis.", "description": "This table presents the results obtained using Synopsys Design Compiler, a commercial synthesis tool, for the best-performing multipliers previously discovered using the OpenROAD tool.  It compares the area and delay of four different multiplier designs (Default, RL-MUL, PPO, and ArithTreeRL) across various bit widths (8-bit, 16-bit, 32-bit, and 64-bit). The data demonstrates the effectiveness of ArithTreeRL in achieving superior performance in terms of both delay and area compared to the baseline methods.", "section": "4.2 Multiplier Design"}, {"figure_path": "5pnhGedG98/tables/tables_19_2.jpg", "caption": "Table 8: Total design time.", "description": "This table shows the total time (in hours) taken to design adders and multipliers with different bit widths using the proposed ArithTreeRL method.  The time includes all steps of the design process, from initial design exploration to final synthesis. The table shows that the design time increases with the number of bits, reflecting the increased complexity of the design process for larger bit-widths.", "section": "4. Experiments"}]