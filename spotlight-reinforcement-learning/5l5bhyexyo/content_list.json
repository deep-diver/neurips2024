[{"type": "text", "text": "Reinforcement Learning Gradients as Vitamin for Online Finetuning Decision Transformers ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Kai Yan Alexander G. Schwing Yu-Xiong Wang ", "page_idx": 0}, {"type": "text", "text": "University of Illinois Urbana-Champaign {kaiyan3, aschwing, yxw}@illinois.edu https://github.com/KaiYan289/RL_as_Vitamin_for_Online_Decision_Transformers ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Decision Transformers have recently emerged as a new and compelling paradigm for offilne Reinforcement Learning (RL), completing a trajectory in an autoregressive way. While improvements have been made to overcome initial shortcomings, online finetuning of decision transformers has been surprisingly under-explored. The widely adopted state-of-the-art Online Decision Transformer (ODT) still struggles when pretrained with low-reward offilne data. In this paper, we theoretically analyze the online-finetuning of the decision transformer, showing that the commonly used Return-To-Go (RTG) that\u2019s far from the expected return hampers the online fine-tuning process. This problem, however, is well-addressed by the value function and advantage of standard RL algorithms. As suggested by our analysis, in our experiments, we hence find that simply adding TD3 gradients to the finetuning process of ODT effectively improves the online finetuning performance of ODT, especially if ODT is pretrained with low-reward offilne data. These findings provide new directions to further improve decision transformers. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "While Reinforcement Learning (RL) has achieved great success in recent years [55, 31], it is known to struggle with several shortcomings, including training instability when propagating a Temporal Difference (TD) error along long trajectories [14], low data efficiency when training from scratch [67], and limited benefits from more modern neural network architectures [12]. The latter point differs significantly from other parts of the machine learning community such as Computer Vision [17] and Natural Language Processing [11]. ", "page_idx": 0}, {"type": "text", "text": "To address these issues, Decision Transformers (DTs) [14] have been proposed as an emerging paradigm for RL, introducing more modern transformer architectures into the literature rather than the still widely used Multi-Layer Perceptrons (MLPs). Instead of evaluating state and state-action pairs, a DT considers the whole trajectory as a sequence to complete, and trains on offilne data in a supervised, auto-regressive way. Upon inception, DTs have been improved in various ways, mostly dealing with architecture changes [37], the token to predict other than return-to-go [22], addressing the problem of being overly optimistic [46], and the inability to stitch together trajectories [5]. Significant and encouraging improvements have been reported on those aspects. ", "page_idx": 0}, {"type": "text", "text": "However, one fundamental issue has been largely overlooked by the community: offline-to-online RL using decision transformers, i.e., finetuning of decision transformers with online interactions. Offilne-to-online RL [72, 41] is a widely studied sub-field of RL, which combines offilne RL learning from given, fixed trajectory data and online RL data from interactions with the environment. By first training on offilne data and then finetuning, the agent can learn a policy with much greater data efficiency, while calibrating the out-of-distribution error from the offilne dataset. Unsurprisingly, this sub-field has become popular in recent years. ", "page_idx": 0}, {"type": "text", "text": "While there are numerous works in the offline-to-online RL sub-field [35, 28, 62], surprisingly few works have discussed the offline-to-online finetuning ability of decision transformers. While there is work that discusses finetuning of decision transformers predicting encoded future trajectory information [64], and work that finetunes pretrained decision transformers with PPO in multi-agent RL [38], the current widely adopted state-of-the-art is the Online Decision Transformer (ODT) [74]: the decision transformer training is continued on online data following the same supervised-learning paradigm as in offline RL. However, this method struggles with low-reward data, as well as with reaching expert-level performance due to suboptimal trajectories [41] (also see Sec. 4). ", "page_idx": 1}, {"type": "text", "text": "To address this issue and enhance online finetuning of decision transformers, we theoretically analyze the decision transformer based on recent results [7], showing that the commonly used conditioning on a high Return-To-Go (RTG) that\u2019s far from the expected return hampers results. To fix, we explore the possibility of using tried-and-true RL gradients. Testing on multiple environments, we find that simply combining TD3 [21] gradients with the original auto-regressive ODT training paradigm is surprisingly effective: it improves results of ODT, especially if ODT is pretrained with low-reward offline data. ", "page_idx": 1}, {"type": "text", "text": "Our contributions are summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "1) We propose a simple yet effective method to boost the performance of online finetuning of decision transformers, especially if offline data is of medium-to-low quality; ", "page_idx": 1}, {"type": "text", "text": "2) We theoretically analyze the online decision transformer, explain its \u201cpolicy update\u201d mechanism when using the commonly applied high target RTG, and point out its struggle to work well with online finetuning; ", "page_idx": 1}, {"type": "text", "text": "3) We conduct experiments on multiple environments, and find that ODT aided by TD3 gradients (and sometimes even the TD3 gradient alone) are surprisingly effective for online finetuning of decision transformers. ", "page_idx": 1}, {"type": "text", "text": "2 Preliminaries ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Markov Decision Process. A Markov Decision Process (MDP) is the basic framework of sequential decision-making. An MDP is characterized by five components: the state space $S$ , the action space $A$ , the transition function $p$ , the reward $r$ , and either the discount factor $\\gamma$ or horizon $H$ . MDPs involve an agent making decisions in discrete steps $t\\in\\{0,1,2,\\dots\\}$ . On step $t$ , the agent receives the current state $s_{t}\\,\\in\\,S$ , and samples an action $a_{t}\\,\\in\\,A$ according to its stochastic policy $\\pi(a_{t}|s_{t})\\,\\in\\,\\Delta(A)$ , where $\\Delta(A)$ is the probability simplex over $A$ , or its deterministic policy $\\mu(s_{t})\\in A$ . Executing the action yields a reward $r\\overline{{(s_{t},a_{t})}}\\,\\overline{{\\in}}\\,\\mathbb{R}$ , and leads to the evolution of the MDP to a new state $s_{t+1}$ , governed by the MDP\u2019s transition function $p(s_{t+1}|s_{t},a_{t})$ . The goal of the agent is to maximize the total reward $\\textstyle\\sum_{t}\\gamma^{t}r(s_{t},a_{t})$ , discounted by the discount factor $\\gamma\\in[0,1]$ for infinite steps, or $\\textstyle\\sum_{t=1}^{H}r(s_{t},a_{t})$ f or finite steps. When the agent ends a complete run, it finishes an episode, and the state(-action) data collected during the run is referred to as a trajectory . ", "page_idx": 1}, {"type": "text", "text": "Offline and Online RL. Based on the source of learning data, RL can be roughly categorized into offline and online RL. The former learns from a given finite dataset of state-action-reward trajectories, while the latter learns from trajectories collected online from the environment. The effort of combining the two is called offilne-to-online RL, which first pre-trains a policy using offilne data, and then continues to finetune the policy using online data with higher efficiency. Our work falls into the category of offline-to-online RL. We focus on improving the decision transformers, instead of Q-learning-based methods which are commonly used in offline-to-online RL. ", "page_idx": 1}, {"type": "text", "text": "Decision Transformer (DT). The decision transformer represents a new paradigm of offline RL, going beyond a TD-error framework. It views a trajectory $\\tau$ as a sequence to be auto-regressively completed. The sequence interleaves three types of tokens: returns-to-go (RTG, the target total return), states, and actions. At step $t$ , the past sequence of context length $K$ is given as the input, i.e., the input is $\\left(\\mathrm{RTG}_{t-K},s_{t-k},a_{t-k},\\ldots,\\mathrm{RTG}_{t},s_{t}\\right)$ , and an action is predicted by the auto-regressive model, which is usually implemented with a GPT-like architecture [11]. The model is trained via supervised learning, considering the past $K$ steps of the trajectory along with the current state and the current return-to-go as the feature, and the sequence of all actions $a$ in a segment as the labels. At evaluation time, a desired return $\\mathbf{RTG_{eval}}$ is specified, since the ground truth future return $\\mathbf{RTG_{real}}$ isn\u2019t known in advance. ", "page_idx": 1}, {"type": "text", "text": "Online Decision Transformer (ODT). ODT has two stages: offilne pre-training which is identical to classic DT training, and online finetuning where trajectories are iteratively collected and the policy is updated via supervised learning. Specifically, the action $a_{t}$ at step $t$ during rollouts is computed by the deterministic policy $\\mu^{\\mathrm{DT}}_{-}(s_{t-T:t},a_{t-T:t-1},\\mathrm{RTG}_{t-T:t},T=T_{\\mathrm{eval}},\\mathrm{RTG}_{t-T:t})\\,,$ $\\mathrm{RTG}=\\mathrm{RTG}_{\\mathrm{eval}}$ ),1 or sampled from the stochastic policy $\\pi^{\\mathrm{DT}}\\big(a_{t}|s_{t-T:t},a_{t-T:t-1},\\mathbf{RTG}_{t-T:t},T=T_{\\mathrm{eval}},$ $\\mathrm{RTG}_{t-T:t},T=T_{\\mathrm{eval}},\\mathrm{RTG}=\\mathrm{RTG}_{\\mathrm{eval}}\\rangle$ . Here, $T$ is the context length (which is $T_{\\mathrm{eval}}$ in evaluation), and $\\mathrm{RTG}_{\\mathrm{eval}}\\in\\mathbb{R}$ is the target return-to-go. The data buffer, initialized with offline data, is gradually replaced by online data during finetuning. ", "page_idx": 2}, {"type": "text", "text": "When updating the policy, the following loss (we use the deterministic policy as an example, and thus omit the entropy regularizer) is minimized: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\sum_{t=1}^{T_{\\mathrm{tain}}}\\left\\|\\mu^{\\mathrm{DT}}\\left(s_{0:t},a_{0:t-1},\\mathrm{RTG}_{0:t},\\mathrm{RTG}=\\mathrm{RTG}_{\\mathrm{real}},T=t\\right)-a_{t}\\right\\|_{2}^{2}.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Note, $T_{\\mathrm{train}}$ is the training context length and $\\mathrm{RTG}_{\\mathrm{real}}$ is the real return-to-go. For better readability, we denote $\\left\\{s_{x+1},s_{x+2},\\ldots,s_{y}\\right\\}$ , $x,y\\in\\mathbb{N}$ as $s_{x:y}$ (i.e., left exclusive and right inclusive), and similarly $\\{a_{x+1},a_{x+2},\\ldots,a_{y}\\}$ as $a_{x:y}$ and $\\left\\{\\mathrm{RTG}_{x+1},\\dotsc,\\mathrm{RTG}_{y}\\right\\}$ as $\\mathrm{RTG}_{x:y}$ . Specially, index $x=y$ represents an empty sequence. For example, when $t=1$ , $a_{0:0}$ is an empty action sequence as the decision transformer is not conditioned on any past action. ", "page_idx": 2}, {"type": "text", "text": "One important observation: the decision transformer is inherently off-policy (the exact policy distribution varies with the sampled starting point, context length and return-to-go), which effectively guides our choice of RL gradients to off-policy algorithms (see Appendix C for more details). ", "page_idx": 2}, {"type": "text", "text": "TD3. Twin Delayed Deep Deterministic Policy Gradient (TD3) [21] is a state-of-the-art online off-policy RL algorithm that learns a deterministic policy $a=\\mu^{\\mathrm{RL}}(s)$ . It is an improved version of an actor-critic (DDPG [32]) with three adjustments to improve its stability: 1) Clipped double $Q_{\\mathrm{~\\,~}}$ - learning, which maintains two critics (estimators for expected return) $Q_{\\phi_{1}},Q_{\\phi_{2}}:|S|\\times|A|\\rightarrow\\mathbb{R}$ and uses the smaller of the two values (i.e., $\\operatorname*{min}\\left(Q_{\\phi_{1}},Q_{\\phi_{2}}\\right)\\overline{{{\\rangle}}}$ to form the target for TD-error minimization. Such design prevents overestimation of the $Q$ -value; 2) Policy smoothing, which adds noise when calculating the $Q$ -value for the next action to effectively prevent overfitting; and 3) Delayed update, which updates $\\mu^{\\mathrm{RL}}$ less frequently than $Q_{\\phi_{1}},Q_{\\phi_{2}}$ to benefit from a better $Q$ -value landscape when updating the actor. TD3 also maintains a set of target networks storing old parameters of the actor and critics that are soft-updated with slow exponential moving average updates from the current, active network. In this paper, we adapt this algorithm to fit the decision transformer architecture so that it can be used as an auxiliary objective in an online finetuning process. ", "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "This section is organized as follows: we will first provide intuition why RL gradients aid online finetuning of decision transformers (Sec. 3.1), and present our method of adding TD3 gradients (Sec. 3.2). To further justify our intuition, we provide a theoretical analysis on how ODT fails to improve during online finetuning when pre-trained with low-reward data (Sec. 3.3). ", "page_idx": 2}, {"type": "text", "text": "3.1 Why RL Gradients? ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In order to understand why RL gradients aid online finetuning of decision transformers, let us consider an MDP which only has a single state $s_{0}$ , one step, a one dimensional action $a\\in[-1,1]$ (i.e., a bandit with continuous action space) and a simple reward function $r(a)=(a+1)^{2}$ if $a\\leq0$ and $r(a)\\,=\\,1\\,-\\,2a$ otherwise, as illustrated in Fig. 1. In this case, a trajectory can be represented effectively by a scalar, which is the action. If the offilne dataset for pretraining is of low quality, i.e., all actions in the dataset are either close to $-1$ or 1, then the decision transformer will obviously not generate trajectories with high RTG after offilne training. As a consequence, during online finetuning, the new rollout trajectory is very likely to be uninformative about how to reach $\\mathrm{RTG}_{\\mathrm{eval}}$ , since it is the decision $\\mathrm{RTG}_{\\mathrm{eval}}$ mer yields exactly the inverse, i.e., $\\frac{\\partial a}{\\partial\\mathrm{RTG}}$ . Sinc nsformer \u2202RTG . However, t invertible $\\operatorname{RTG}(a)$ ", "page_idx": 2}, {"type": "image", "img_path": "5l5bhYexYO/tmp/79ccc98dab31eddfea81cba2e0f4079390a6bcd7c50a14cf40e437415b5a7bf9.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 1: An overview of our work, illustrating why ODT fails to improve with low-return offline data and RL gradients such as TD3 could help. The decision transformer yields gradient $\\frac{\\partial a}{\\partial\\mathrm{RTG}}$ , but local policy improvement requires the opposite, i.e., $\\frac{\\partial\\mathrm{RTG}}{\\partial a}$ . Therefore, the agent cannot recover if the current policy conditioning on high target RTG does not actually lead to high real RTG, which is very likely when the target RTG is too far from the pretrained policy and out-of-distribution. By adding a small coefficient for RL gradients, the agents can improve locally, which leads to better performance. ", "page_idx": 3}, {"type": "image", "img_path": "5l5bhYexYO/tmp/72c0e695cd8f2b4c38059e0ac93674f176016ea675653d4a7270e37c9791d21b.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 2: An illustration of a simple MDP, showing how RL can infer the direction for improvement, while online DT fails. Panels (a) and (b) show, DDPG and $\\mathrm{ODT+DDPG}$ manage to maximize reward and find the correct optimal action quickly, while ODT fails to do so. Panel (c) shows how a DDPG/ODT $^+.$ DDPG critic (from light blue/orange to dark blue/red) manages to fit ground truth reward (green curve). Panel (d) shows that the ODT policy (changing from light gray to dark) fails to discover the hidden reward peak near 0 between two low-reward areas (near $-1$ and 1 respectively) contained in the offline data. Meanwhile, ODT $^+$ DDPG succeeds in finding the reward peak. ", "page_idx": 3}, {"type": "text", "text": "easily estimate the former from the latter. Thus, the hope for policy improvement relies heavily on the generalization of RTG, i.e., policy yielded by high $\\mathrm{RTG}_{\\mathrm{eval}}$ indeed leads to better policy without any data as evidence, which is not the case with our constructed MDP and dataset. ", "page_idx": 3}, {"type": "text", "text": "In contrast, applying traditional RL for continuous action spaces to this setting, we either learn a value function $Q(s_{0},a):\\mathbb{R}\\rightarrow\\mathbb{R}$ , which effectively gives us a direction of action improvement $\\frac{\\partial Q(s_{0},a)}{\\partial a_{.}}$ (e.g., SAC [25], DDPG [32], TD3 [21]), or an advantage $A(s_{0},a)$ that highlights whether focusing on action improves or worsens the policy (e.g., AWR [47], AWAC [40], IQL [28]). Either way provides a direction which suggests how to change the action locally in order to improve the (estimated) return. In our experiment illustrated in Fig. 2 (see Appendix F for details), we found that RL algorithms like DDPG [32] can easily solve the aforementioned MDP while ODT fails. ", "page_idx": 3}, {"type": "text", "text": "Thus, adding RL gradients aids the decision transformer to improve from given low RTG trajectories. While one may argue that the self-supervised training paradigm of ODT [74] can do the same by \u201cprompting\u201d the decision transformer to generate a high RTG trajectory, such paradigm is still unable to effectively improve the policy of the decision transformer pretrained on data with low RTGs. We provide a theoretical analysis for this in Sec. 3.3. In addition, we also explore the possibility of fixing this problem using other existing algorithms, such as JSRL [59] and slowly growing RTG (i.e., curriculum learning). However, we found that those algorithms cannot address this problem well. See Appendix G.8 for ablations. ", "page_idx": 3}, {"type": "text", "text": "3.2 Adding TD3 Gradients to ODT ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In this work, we mainly consider TD3 [21] as the RL gradient for online finetuning. There are two reasons for selecting TD3. First, TD3 is a more robust off-policy RL algorithm compared to other off-policy RL algorithms [54]. Second, the success of $\\mathrm{TD}3\\substack{+\\mathrm{BC}}$ [20] indicates that TD3 is a good candidate when combined with supervised learning. A more detailed discussion and empirical comparison to other RL algorithms can be found in Appendix C. ", "page_idx": 4}, {"type": "text", "text": "Generally, we simply add a weighted standard TD3 actor loss to the decision transformer objective. To do this, we follow classic TD3 and additionally train two critic networks $Q_{\\phi_{1}},Q_{\\phi_{2}}:$ $S\\times A\\,\\rightarrow\\,\\mathbb{R}$ parameterized by $\\phi_{1},\\phi_{2}$ respectively. In the offline pretraining stage, we use the following objective for the actor: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{}&{\\underset{\\mu^{\\mathrm{pr}}}{\\operatorname*{min}}\\mathbb{E}_{\\tau\\sim\\cal D}\\Bigg[\\frac{1}{T_{\\mathrm{train}}}\\sum_{t=1}^{T_{\\mathrm{train}}}\\big[-\\alpha Q_{\\phi_{1}}\\big(s_{t},\\mu^{\\mathrm{DT}}\\big(s_{0:t},a_{0:t-1},\\mathrm{RTG}_{0:t},\\mathrm{RTG}=\\mathrm{RTG}_{\\mathrm{real}},T=t\\big)\\big)+}\\\\ &{}&{\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Here, $\\alpha\\in\\{0,0.1\\}$ is a hyperparameter, and the loss sums over the trajectory segment. For critics $Q_{\\phi_{1}},Q_{\\phi_{2}}$ , we use the standard TD3 critic loss ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\operatorname*{min}_{\\phi_{1},\\phi_{2}}\\mathbb{E}_{\\tau\\sim D}\\sum_{t=1}^{T_{\\mathrm{tain}}}\\left[\\left(Q_{\\phi_{1}}\\big(s_{t},a_{t}\\big)-Q_{\\mathrm{min},t}\\right)^{2}+\\left(Q_{\\phi_{2}}\\big(s_{t},a_{t}\\big)-Q_{\\mathrm{min},t}\\right)^{2}\\right],\\quad\\mathrm{with}}\\\\ &{Q_{\\mathrm{min},t}=r_{t}+\\gamma(1-d_{t})\\displaystyle\\operatorname*{min}_{i\\in\\{1,2\\}}Q_{\\phi_{i,\\mathrm{ur}}}\\left(s_{t},\\mathrm{clip}\\left(\\mu_{\\mathrm{tar}}^{\\mathrm{RL}}(z_{t})+\\mathrm{clip}(\\epsilon,-c,c),a_{\\mathrm{low}},a_{\\mathrm{high}}\\right)\\right),}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\tau=\\{s_{0:T_{\\mathrm{train}}+1},a_{0:T_{\\mathrm{train}}},\\mathrm{{RTG}}_{0:T_{\\mathrm{train}}+1},d_{0:T_{\\mathrm{train}}},r_{0:T_{\\mathrm{train}}},\\mathrm{{RTG}=\\mathrm{{RTG}}_{\\mathrm{real}}}\\}$ is the trajectory segment sampled from buffer $D$ that stores the offilne dataset. Further, $d_{t}$ indicates whether the trajectory ends on the $t$ -th step (true is 1, false is 0), $Q_{\\mathrm{min}}$ is the target to fti, $Q_{\\phi_{i,\\mathrm{tar}}}$ is produced by the target network (stored old parameter), $z_{t}$ is the context for \u201cnext state\u201d at step $t$ . $\\mu_{\\mathrm{tar}}^{\\mathrm{RL}}$ is the target network for the actor (i.e., decision transformer). For an $n$ -dimensional action, $\\mathrm{clip}(a,x,y),a\\in\\mathbb{R}^{n},y\\in\\mathbb{R}^{n},z\\in\\mathbb{R}^{n}$ means clip $a_{i}$ to $[y_{i},z_{i}]$ for $i\\in\\{1,2,\\dots,n\\}$ . $a_{\\mathrm{low}}\\,\\in\\,\\mathbb{R}^{n}$ and $a_{\\mathrm{high}}\\in\\mathbb{R}^{n}$ are the lower and upper bound for every dimension respectively. ", "page_idx": 4}, {"type": "text", "text": "To demonstrate the impact on aiding the exploration of a decision transformer, in this work we choose the simplest form of a critic, which is reflective, i.e., only depends on the current state. This essentially makes the $Q$ -value an average of different context lengths sampled from a near-uniform distribution (see Appendix $\\mathrm{D}$ for the detailed reason and distribution for this). The choice is based on the fact that training a transformer-based value function estimator is quite hard [45] due to increased input complexity (i.e., noise from the environment) which leads to reduced stability and slower convergence. In fact, to avoid this difficulty, many recent works on Large Language Models (LLMs) [13] and vision models [48] which finetune with RL adopt a policy-based algorithm instead of an actor-critic, despite a generally lower variance of the latter. In our experiments, we also found such a critic to be much more stable than a recurrent critic network (see Appendix G for ablations). ", "page_idx": 4}, {"type": "text", "text": "During online finetuning, we again use Eq. (2) and Eq. (3), but always use $\\alpha=0.1$ for Eq. (2). ", "page_idx": 4}, {"type": "text", "text": "While the training paradigm resembles that of $\\mathrm{TD3+BC}$ , our proposed method improves upon $\\mathrm{TD3+BC}$ in the following two ways: 1) Architecture. While $\\mathrm{TD}3\\substack{+\\mathrm{BC}}$ uses MLP networks for single steps, we leverage a decision transformer, which is more expressive and can take more context into account when making decisions. 2) Selected instead of indiscriminated behavior cloning. Behavior cloning mimics all data collected without regard to their reward, while the supervised learning process of a decision transformer prioritizes trajectories with higher return by conditioning action generation on higher RTG. See Appendix G.9 for an ablation. ", "page_idx": 4}, {"type": "text", "text": "3.3 Why Does ODT Fail to Improve the Policy? ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "As mentioned in Sec. 3.1, it is the goal of ODT to \u201cprompt\u201d a policy with a high RTG, i.e., to improve a policy by conditioning on a high RTG during online rollout. However, beyond the intuition provided in Sec. 3.1, in this section, we will analyze more formally why such a paradigm is unable to improve the policy given offline data filled with low-RTG trajectories. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "Our analysis is based on the performance bound proved by Brandfonbrener et al. [7]. Given a dataset drawn from an underlying policy $\\beta$ and given its RTG distribution $P_{\\beta}$ (either continuous or discrete), under assumptions (see Appendix E), we have the following tight performance bound for a decision transformer with policy $\\pi^{\\mathrm{{\\hat{DT}}}}(a|s,\\mathrm{R}\\mathrm{{\\hat{T}}}\\mathrm{{G}_{\\mathrm{{eval}}}})$ conditioned on $\\mathrm{RTG}_{\\mathrm{eval}}$ : ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathrm{RTG}_{\\mathrm{eval}}-\\mathbb{E}_{\\tau=(s_{1},a_{1},\\ldots,s_{H},a_{H})\\sim\\pi^{\\mathrm{DT}}(a|s,\\mathrm{RTG}_{\\mathrm{eval}})}[\\mathrm{RTG}_{\\mathrm{real}}]\\leq\\epsilon\\left(\\frac{1}{\\alpha_{f}}+2\\right)H^{2}.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Here, $\\alpha_{f}\\,=\\,\\operatorname*{inf}_{s_{1}}P_{\\beta}(\\mathbf{RTG}_{\\mathrm{real}}\\,=\\,\\mathbf{RTG}_{\\mathrm{eval}}|\\,s_{1})$ for every initial state $s_{1},\\,\\epsilon\\,>\\,0$ is a constant, $H$ is the horizon of the MDP.2 Based on this tight performance bound, we will show that with high probability,\u03b11f grows superlinearly with respect to $\\mathbf{RTG_{eval}}$ . If true, then the $\\mathrm{RTG}_{\\mathrm{real}}$ term (i.e., the actual return from online rollouts) must decrease to fit into the tight bound, as $\\mathrm{RTG}_{\\mathrm{eval}}$ grows. ", "page_idx": 5}, {"type": "text", "text": "To show this, we take a two-step approach: First, we prove that the probability mass of the RTG distribution is concentrated around low RTGs, i.e., event probability $\\mathrm{Pr}_{\\beta}$ $(\\mathrm{RTG}-\\mathbb{E}_{\\beta}(\\mathrm{RTG}|s)\\geq c|s)$ for $c>0$ decreases superlinearly with respect to $c$ . For this, we apply the Chebyshev inequality, which yields a bound of $\\textstyle O\\left({\\frac{1}{c^{2}}}\\right)$ . However, without knowledge on $P_{\\beta}\\big(\\mathbf{RTG}|s\\big)$ , the variance can be made arbitrarily large by high RTG outliers, hence making the bound meaningless. ", "page_idx": 5}, {"type": "text", "text": "Fortunately, we have knowledge about the RTG distribution $P_{\\beta}(\\mathbf{RTG}|s)$ from the collected data. If we refer to the maximum RTG in the dataset via $\\mathrm{RTG}_{\\beta\\mathrm{max}}$ and if we assume all rewards are non-negative, then all trajectory samples have an RTG in $[0,\\mathrm{RTG}_{\\beta\\mathrm{max}}]$ . Thus, with adequate prior distribution, we can state that with high probability $1-\\delta$ , the probability mass is concentrated in the low RTG area. Based on this, we can prove the following lemma: ", "page_idx": 5}, {"type": "text", "text": "Lemma 1. (Informal) Assume rewards $r(s,a)$ are bounded in $[0,R_{m a x}],^{?}$ and $R T G_{e\\nu a l}\\geq R T G_{\\beta m a x}$ . Then with probability at least $1-\\delta$ , we have the probability of event $\\mathrm{Pr}_{\\beta}$ bounded as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\operatorname*{Pr}_{\\beta}\\left(R T G_{e\\nu a l}-V^{\\beta}(s)\\ge c|s\\right)\\le O\\left(\\frac{R_{m a x}^{2}T^{2}}{c^{2}}\\right),}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\delta$ depends on the number of trajectories in the dataset and prior distribution (see Appendix $E$ for a concrete example and a more accurate bound). $V^{\\beta}(s)$ is the value function of the underlying policy $\\beta(a|s)$ that generates the dataset, for which we have $V^{\\beta}(s)=\\mathbb{E}_{\\beta}(R T G|s)$ . ", "page_idx": 5}, {"type": "text", "text": "The second step uses the bound of probability mass $\\operatorname*{Pr}_{\\beta}\\bigl(\\mathbf{RTG}\\geq c|s\\bigr)$ to derive the bound for $\\alpha_{f}$ . For the discrete case where the possibly obtained RTGs are finite or countably infinite (note, state and action space can still be continuous), this is simple, as we have ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{P_{\\beta}\\left(\\mathrm{RTG}=V^{\\beta}(s)+c|s\\right)=\\operatorname*{Pr}_{\\beta}\\left(\\mathrm{RTG}=V^{\\beta}(s)+c|s\\right)\\leq\\operatorname*{Pr}_{\\beta}\\left(\\mathrm{RTG}\\geq V^{\\beta}(s)+c|s\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Thus $\\alpha_{f}=\\operatorname*{inf}_{s_{1}}P_{\\beta}(\\mathbf{RTG}|s_{1})$ can be conveniently bounded by Lemma 1. For the continuous case, the proof is more involved as probability density $P_{\\beta}(\\mathbf{RTG}|s)$ can be very high on an extremely short interval of RTG, making the total probability mass arbitrarily small. However, assuming that $P_{\\beta}(\\mathbf{RTG}|s)$ is Lipschitz when $\\mathrm{RTG}\\geq\\mathrm{RTG}_{\\beta\\mathrm{max}}$ (i.e., RTG area not covered by dataset), combined with the discrete distribution case, we can still get the following (see Appendix E for proof): ", "page_idx": 5}, {"type": "text", "text": "Corollary 1. (Informal) If the RTG distribution is discrete (i.e., number of possible different RTGs are at most countably infinite), then with probability at least- $\\textstyle1-\\delta,\\;{\\frac{1}{\\alpha_{f}}}$ grows on the order of $\\Omega(R T G_{e\\nu a l}^{2})$ with respect to $R T G_{e v a l}$ . For continuous RTG distributions satisfying a Lipschitz continuous RTG density $p_{\\beta}$ , $\\frac{1}{\\alpha_{f}}$ grows on the order of $\\Omega(R T G_{e\\nu a l}^{1.5})$ . ", "page_idx": 5}, {"type": "text", "text": "Here, $\\Omega(\\cdot)$ refers to the big-Omega notation (asymptotic lower bound). ", "page_idx": 5}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "In this section, we aim to address the following questions: a) Does our proposed solution for decision transformers indeed improve its ability to cope with low-reward pretraining data. b) Is improving what to predict, while still using supervised learning, the correct way to improve the finetuning ability of decision transformers? c) Does the transformer architecture, combined with RL gradients, work better than TD3+BC? d) Is it better to combine the use of RL and supervised learning, or better to simply abandon the supervised loss in online finetuning? e) How does online decision transformer with TD3 gradient perform compared to other offilne RL algorithms? f) How much does TD3 improve over DDPG which was used in Fig. 2? ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "Baselines. In this section, we mainly compare to six baselines: the widely recognized state-of-the-art DT for online finetuning, Online Decision Transformer (ODT) [74]; PDT, a baseline improving over ODT by predicting future trajectory information instead of return-to-go; $\\mathbf{TD3+BC}$ [20], a MLP offilne RL baseline; TD3, an ablated version of our proposed solution where we use TD3 gradients only for decision transformer finetuning (but only use supervised learning of the actor for offline pretraining); IQL [28], one of the most popular offline RL algorithms that can be used for online finetuning; DDPG $[32]\\mathbf{+0DF}$ , which is the same as our approach but with DDPG instead of TD3 gradients (for ablations using SAC [25], IQL [28], PPO [52], AWAC [40] and AWR [47], see Appendix C). Each of the baselines corresponds to one of the questions a), b), c), d), e) and f) above. ", "page_idx": 6}, {"type": "text", "text": "Metrics. We use the normalized average reward (same as D4RL\u2019s standard [19]) as the metric, where higher reward indicates better performance. If the final performance is similar, the algorithm with fewer online examples collected to reach that level of performance is better. We report the reward curve, which shows the change of the normalized reward\u2019s mean and standard deviation with 5 different seeds, with respect to the number of online examples collected. The maximum number of steps collected is capped at 500K (for mujoco) or 1M (for other environments). We also report evaluation results using the rliable [3] library in Fig. 7 of Appendix B. ", "page_idx": 6}, {"type": "text", "text": "Experimental Setup. We use the same architecture and hyperparameters such as learning rate (see Appendix F.2 for details) as ODT [74]. The architecture is a transformer with 4 layers and 4 heads in each layer. This translates to around 13M parameters in total. For the critic, we use Multi-Layer Perceptrons (MLPs) with width 256 and two hidden layers and ReLU [1] activation function. Specially, for the random dataset, we collect trajectories until the total number of steps exceeds 1000 in every epoch, which differs from ODT, where only 1 trajectory per epoch is collected. This is because many random environments, such as hopper, have very short episodes when the agent does not perform well, which could lead to overfitting if only a single trajectory is collected per epoch. For fairness, we use this modified rollout for ODT in our experiments as well. Not doing so does not affect ODT results since it does generally not work well on random datasets, but will significantly increase the time to reach a certain number of online transitions. After rollout, we train the actor for 300 gradient steps and the critic for 600 steps following TD3\u2019s delayed update trick. ", "page_idx": 6}, {"type": "text", "text": "4.1 Adroit Environments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Environment and Dataset Setup. We test on four difficult robotic manipulation tasks [49], which are the Pen, Hammer, Door and Relocate environment. For each environment, we test three different datasets: expert, cloned and human, which are generated by a finetuned RL policy, an imitation learning policy and human demonstration respectively. See Appendix F.1 for details. ", "page_idx": 6}, {"type": "text", "text": "Results. Fig. 3 shows the performance of each method on Adroit before and after online finetuning. $\\mathrm{TD3+BC}$ fails on almost all tasks and often diverges with extremely large $Q$ -value during online finetuning. ODT and PDT perform better but still fall short of the proposed method, ${\\mathrm{TD3+ODT}}$ . Note, IQL, TD3 and $\\mathrm{TD}3\\mathrm{+ODT}$ all perform decently well (with similar average reward as shown in Tab. 2 in Appendix B). However, we found that TD3 often fails during online finetuning, probably because the environments are complicated and TD3 struggles to recover from a poor policy generated during online exploration (i.e., it has a catastrophic forgetting issue). To see whether there is a simple fix, in Appendix G.7, we ablate whether an action regularizer pushing towards a pretrain policy similar to $\\mathrm{TD3+BC}$ helps, but find it to hinder performance increase in other environments. IQL is overall much more stable than TD3, but improves much less during online finetuning than $\\mathrm{TD}3\\mathrm{+ODT}$ . ODT can achieve good performance when pretrained on expert data, but struggles with datasets of lower quality, which validates our motivation. DDPG $^{\\cdot+}$ ODT starts out well in the online finetuning stage but fails quickly, probably because DDPG is less stable compared to TD3. ", "page_idx": 6}, {"type": "image", "img_path": "5l5bhYexYO/tmp/5d483b897b0e2884ae11b4b99b1a0caa0e09b16e2edd905462423b9fdc059974.jpg", "img_caption": [], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Figure 3: Results on Adroit [49] environments. The proposed method, $\\mathrm{TD3+ODT}$ , improves upon baselines. Note that TD3, IQL, and $\\mathrm{TD}3\\mathrm{+ODT}$ all perform decently at the beginning of online finetuning, but TD3 fails while $\\mathrm{TD}3\\mathrm{+ODT}$ improves much more than IQL during online finetuning. ", "page_idx": 7}, {"type": "image", "img_path": "5l5bhYexYO/tmp/e42a50109374cb4448e89a49235a519b4a7455a23d0bd397490430964df26d43.jpg", "img_caption": [], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Figure 4: Reward curves for each method in Antmaze environments. IQL works best on the large maze, while our proposed method works the best on the medium maze and umaze. DDPG+ODT works worse than our method and IQL but much better than the rest of the baselines, which again validates our motivation that adding RL gradients to ODT is helpful. ", "page_idx": 7}, {"type": "text", "text": "4.2 Antmaze Environments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Environment and Dataset Setup. We further test on a harder version of the Maze2D environment in D4RL [19] where the pointmass is substituted by a robotic ant. We study six different variants, which are umaze, umaze-diverse, medium-play, medium-diverse, large-play and large-diverse. ", "page_idx": 7}, {"type": "text", "text": "Results. Fig. 4 lists the results of each method on umaze and medium maze before and after online finetuning (see Appendix C for reward curves and Appendix B for results summary on large antmaze). $\\mathrm{TD}3\\mathrm{+ODT}$ works the best on umaze and medium maze, and significantly outperforms TD3. This shows that RL gradients alone are not enough for offline-to-online RL of the decision transformer. Though $\\mathrm{TD}3\\mathrm{+ODT}$ does not work on large maze, we found that I $\\mathrm{QL+ODT}$ works decently well. However, we choose $\\mathrm{TD}3\\mathrm{+ODT}$ in this work because I $\\scriptstyle\\mathrm{2L+ODT}$ does not work well on the random datasets. This is probably because IQL aims to address the Out-Of-Distribution (OOD) estimation problem [28], which makes it better at utilizing offline data but worse at online exploration. See Appendix C for a detailed discussion and results. DDPG $^{\\cdot+}$ ODT works worse than $\\mathrm{TD}3\\mathrm{+ODT}$ but much better than baselines except IQL. ", "page_idx": 7}, {"type": "text", "text": "4.3 MuJoCo Environments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Environment and Dataset Setup. We further test on four widely recognized standard environments [58], which are the Hopper, Halfcheetah, Walker2d and Ant environment. For each environment, we study three different datasets: medium, medium-replay, and random. The first and second one contain trajectories of decent quality, while the last one is generated with a random agent. ", "page_idx": 7}, {"type": "table", "img_path": "5l5bhYexYO/tmp/812f24f76564541ed6d46a10cb1ff240fc3d6134376078e4580541ff5616698a.jpg", "table_caption": [], "table_footnote": ["Table 1: Average reward for each method in MuJoCo environments before and after online finetuning. The best performance for each environment is highlighted in bold font, and any result $>90\\%$ of the best performance is underlined. To save space, the name of the environments and datasets are abbreviated as follows: for the environments $\\mathrm{Ho}{=}]$ Hopper, Ha=HalfCheetah, Wa=Walker2d, $\\scriptstyle\\mathrm{An}=\\mathrm{Ant}$ ; for the datasets M=Medium, MR $\\qquad=$ Medium-Replay, $\\scriptstyle\\mathbf{R}=$ Random. The format is \u201cfinal(+increase after finetuning)\u201d. The proposed solution performs well. "], "page_idx": 8}, {"type": "text", "text": "Results. Fig. 6 shows the results of each method on MuJoCo before and after online finetuning. We observe that autoregressive-based algorithms, such as ODT and PDT, fail to improve the policy on MuJoCo environments, especially from low-reward pretraining with random datasets. With RL gradients, $\\mathrm{TD3+BC}$ and IQL can improve the policy during online finetuning, but less than a decision transformer (TD3 and $\\mathrm{TD3+ODT}$ ). In particular, we found IQL to struggle on most random datasets, which are well-solved by decision transformers with TD3 gradients. $\\mathrm{TD}3\\mathrm{+ODT}$ still outperforms TD3 with an average final reward of 88.51 vs. 84.23. See Fig. 6 in Appendix B for reward curves. ", "page_idx": 8}, {"type": "text", "text": "Ablations on $\\alpha$ . Fig. 5 (a) shows the result of using different $\\alpha$ (i.e., RL coefficients) on different environments. We observe an increase of $\\alpha$ to improve the online finetuning process. However, if $\\alpha$ is too large, the algorithm may get unstable. ", "page_idx": 8}, {"type": "text", "text": "Ablations on evaluation context length $T_{\\mathbf{eval}}$ . Fig. 5 (b) shows the result of using different $T_{\\mathrm{eval}}$ on halfcheetah-medium-replay-v2 and hammer-cloned-v1. The result shows that $T_{\\mathrm{eval}}$ needs to be balanced between more information for decision-making and potential training instability due to a longer context length. As shown in the halfcheetah-medium-replay-v2 result, $T_{\\mathrm{eval}}$ too long or too short can both lead to performance drops. More ablations are available in Appendix G. ", "page_idx": 8}, {"type": "image", "img_path": "5l5bhYexYO/tmp/85ed6a027f65db880e03c5f7b4421c726eea49974cede715961641731922f82c.jpg", "img_caption": ["Figure 5: Panel (a) shows ablations on RL coefficient $\\alpha$ . While higher $\\alpha$ aids exploration as shown in the halfcheetah-medium-replay-v2 case, it may sometimes introduce instability, which is shown in the hammer-human-v1 case. Panel (b) shows ablations on $T_{\\mathrm{eval}}$ . $T_{\\mathrm{eval}}$ balances training stability and more information for decision-making. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "5 Related Work ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Online Finetuning of Decision Transformers. While there are many works on generalizing decision transformers (e.g., predicting waypoints [5], goal, or encoded future information instead of return-togo [22, 5, 57, 36]), improving the architecture [37, 16, 53, 65] or addressing the overly-optimistic [46] or trajectory stitching issue [63]), there is surprisingly little work beyond online decision transformers that deals with online finetuning of decision transformers. There is some loosely related literature: MADT [31] proposes to finetune pretrained decision transformers with PPO. PDT [64] also studies online finetuning with the same training paradigm as ODT [74]. QDT [66] uses an offline RL algorithm to re-label returns-to-go for offline datasets. AFDT [76] and STG [75] use decision transformers offline to generate an auxiliary reward and aid the training of online RL algorithms. A few works study in-context learning [33, 34] and meta-learning [60, 30] of decision transformers, where improvements with evaluations on new tasks are made possible. However, none of the papers above focuses on addressing the general online finetuning issue of the decision transformer. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Transformers as Backbone for RL. Having witnessed the impressive success of transformers in Computer Vision (CV) [17] and Natural Language Processing (NLP) [11], numerous works also studied the impact of transformers in RL either as a model for the agent [45, 38] or as a world model [39, 50]. However, a large portion of state-of-the-art work in RL is still based on simple MultiLayer Perceptrons (MLPs) [35, 28]. This is largely because transformers are significantly harder to train and require extra effort [45], making their ability to better memorize long trajectories [42] harder to realize compared to MLPs. Further, there are works on using transformers as feature extractors for a trajectory [37, 45] and works that leverage the common sense of transformer-based Large Language Model\u2019s for RL priors [10, 9, 70]. In contrast, our work focuses on improving the new \u201cRL via Supervised learning\u201d (RvS) [7, 18] paradigm, aiming to merge this paradigm with the benefits of classic RL training. ", "page_idx": 9}, {"type": "text", "text": "Offline-to-Online RL. Offline-to-online RL bridges the gap between offline RL, which heavily depends on the quality of existing data while struggling with out-of-distribution policies, and online RL, which requires many interactions and is of low data efficiency. Mainstream offilne-to-online RL methods include teacher-student [51, 6, 59, 72] and out-of-distribution handling (regularization [21, 29, 62], avoidance [28, 23], ensembles [2, 15, 24]). There are also works on pessimistic $\\mathrm{{Q}}.$ -value initialization [69], confidence bounds [26], and a mixture of offilne and online training [56, 73]. However, all the aforementioned works are based on Q-learning and don\u2019t consider decision transformers. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we point out an under-explored problem in the Decision Transformer (DT) community, i.e., online finetuning. To address online finetuning with a decision transformer, we examine the current state-of-the-art, online decision transformer, and point out an issue with low-reward, sub-optimal pretraining. To address the issue, we propose to mix TD3 gradients with decision transformer training. This combination permits to achieve better results in multiple testbeds. Our work is a complement to the current DT literature, and calls out a new aspect of improving decision transformers. ", "page_idx": 9}, {"type": "text", "text": "Limitations and Future Works. While our work theoretically analyzes an ODT issue, the conclusion relies on several assumptions which we expect to remove in future work. Empirically, in this work we propose a simple solution orthogonal to existing efforts like architecture improvements and predicting future information rather than return-to-go. To explore other ideas that could further improve online finetuning of decision transformers, next steps include the study of other environments and other ways to incorporate RL gradients into decision transformers. Other possible avenues for future research include testing our solution on image-based environments, and decreasing the additional computational cost compared to ODT (an analysis for the current time cost is provided in Appendix H). ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This work was supported in part by NSF under Grants 2008387, 2045586, 2106825, MRI 1725729, NIFA Award 2020-67021-32799, the IBM-Illinois Discovery Accelerator Institute, the Toyota Research Institute, and the Jump ARCHES endowment through the Health Care Engineering Systems Center at Illinois and the OSF Foundation. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Agarap, A. F. Deep learning using rectified linear units (relu). arXiv preprint arXiv:1803.08375, 2018.   \n[2] Agarwal, R., Schuurmans, D., and Norouzi, M. An optimistic perspective on offline reinforcement learning. In ICML, 2020. [3] Agarwal, R., Schwarzer, M., Castro, P. S., Courville, A., and Bellemare, M. G. Deep reinforcement learning at the edge of the statistical precipice. In NeurIPS, 2021.   \n[4] Ba, J. L., Kiros, J. R., and Hinton, G. E. Layer normalization. arXiv preprint arXiv:1607.06450, 2016. [5] Badrinath, A., Flet-Berliac, Y., Nie, A., and Brunskill, E. Waypoint transformer: Reinforcement learning via supervised learning with intermediate targets. In NeurIPS, 2023.   \n[6] Bastani, O., Pu, Y., and Solar-Lezama, A. Verifiable reinforcement learning via policy extraction. In NeurIPS, 2018.   \n[7] Brandfonbrener, D., Bietti, A., Buckman, J., Laroche, R., and Bruna, J. When does returnconditioned supervised learning work for offline reinforcement learning? In NeurIPS, 2022.   \n[8] Brockman, G., Cheung, V., Pettersson, L., Schneider, J., Schulman, J., Tang, J., and Zaremba, W. Openai gym. arXiv preprint arXiv:1606.01540, 2016.   \n[9] Brohan, A., Brown, N., Carbajal, J., Chebotar, Y., Chen, X., Choromanski, K., Ding, T., Driess, D., Dubey, A., Finn, C., et al. Rt-2: Vision-language-action models transfer web knowledge to robotic control. arXiv preprint arXiv:2307.15818, 2023.   \n[10] Brohan, A., Chebotar, Y., Finn, C., Hausman, K., Herzog, A., Ho, D., Ibarz, J., Irpan, A., Jang, E., Julian, R., et al. Do as i can, not as i say: Grounding language in robotic affordances. In CoRL, 2023.   \n[11] Brown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D., Dhariwal, P., Neelakantan, A., Shyam, P., Sastry, G., Askell, A., et al. Language models are few-shot learners. In NeurIPS, 2020.   \n[12] Chebotar, Y., Vuong, Q., Hausman, K., Xia, F., Lu, Y., Irpan, A., Kumar, A., Yu, T., Herzog, A., Pertsch, K., et al. Q-transformer: Scalable offline reinforcement learning via autoregressive q-functions. In CoRL, 2023.   \n[13] Chen, C., Wang, X., Jin, Y., Dong, V. Y., Dong, L., Cao, J., Liu, Y., and Yan, R. Semi-offline reinforcement learning for optimized text generation. In ICML, 2023.   \n[14] Chen, L., Lu, K., Rajeswaran, A., Lee, K., Grover, A., Laskin, M., Abbeel, P., Srinivas, A., and Mordatch, I. Decision transformer: Reinforcement learning via sequence modeling. In NeurIPS, 2021.   \n[15] Chen, X., Wang, C., Zhou, Z., and Ross, K. Randomized ensembled double q-learning: Learning fast without a model. In ICLR, 2021.   \n[16] David, S. B., Zimerman, I., Nachmani, E., and Wolf, L. Decision s4: Efficient sequence-based rl via state spaces layers. In ICLR, 2022.   \n[17] Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., Dehghani, M., Minderer, M., Heigold, G., Gelly, S., et al. An image is worth 16x16 words: Transformers for image recognition at scale. In ICLR, 2021.   \n[18] Emmons, S., Eysenbach, B., Kostrikov, I., and Levine, S. Rvs: What is essential for offilne rl via supervised learning? In ICLR, 2022.   \n[19] Fu, J., Kumar, A., Nachum, O., Tucker, G., and Levine, S. D4rl: Datasets for deep data-driven reinforcement learning. arXiv preprint arXiv:2004.07219, 2020.   \n[20] Fujimoto, S. and Gu, S. S. A minimalist approach to offilne reinforcement learning. In NeurIPS, 2021.   \n[21] Fujimoto, S., Hoof, H., and Meger, D. Addressing function approximation error in actor-critic methods. In ICML, 2018.   \n[22] Furuta, H., Matsuo, Y., and Gu, S. S. Generalized decision transformer for offline hindsight information matching. In ICLR, 2022.   \n[23] Garg, D., Hejna, J., Geist, M., and Ermon, S. Extreme q-learning: Maxent rl without entropy. In ICLR, 2023.   \n[24] Ghasemipour, S. K. S., Schuurmans, D., and Gu, S. S. Emaq: Expected-max q-learning operator for simple yet effective offline and online rl. In ICML, 2021.   \n[25] Haarnoja, T., Zhou, A., Abbeel, P., and Levine, S. Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor. In ICML, 2018.   \n[26] Hong, J., Kumar, A., and Levine, S. Confidence-conditioned value functions for offline reinforcement learning. In ICLR, 2023.   \n[27] Kingma, D. P. and Ba, J. Adam: A method for stochastic optimization. In ICLR, 2015.   \n[28] Kostrikov, I., Nair, A., and Levine, S. Offilne reinforcement learning with implicit q-learning. arXiv preprint arXiv:2110.06169, 2021.   \n[29] Kumar, A., Zhou, A., Tucker, G., and Levine, S. Conservative q-learning for offline reinforcement learning. In NeurIPS, 2020.   \n[30] Lee, J., Xie, A., Pacchiano, A., Chandak, Y., Finn, C., Nachum, O., and Brunskill, E. In-context decision-making from supervised pretraining. In ICML Workshop on New Frontiers in Learning, Control, and Dynamical Systems, 2023.   \n[31] Lee, K.-H., Nachum, O., Yang, M. S., Lee, L., Freeman, D., Guadarrama, S., Fischer, I., Xu, W., Jang, E., Michalewski, H., et al. Multi-game decision transformers. In NeurIPS, 2022.   \n[32] Lillicrap, T. P., Hunt, J. J., Pritzel, A., Heess, N. M. O., Erez, T., Tassa, Y., Silver, D., and Wierstra, D. Continuous control with deep reinforcement learning. In ICLR, 2016.   \n[33] Lin, L., Bai, Y., and Mei, S. Transformers as decision makers: Provable in-context reinforcement learning via supervised pretraining. In ICLR, 2024.   \n[34] Liu, H. and Abbeel, P. Emergent agentic transformer from chain of hindsight experience. In ICML, 2023.   \n[35] Lyu, J., Ma, X., Li, X., and Lu, Z. Mildly conservative q-learning for offline reinforcement learning. In NeurIPS, 2022.   \n[36] Ma, Y., Xiao, C., Liang, H., and Hao, J. Rethinking decision transformer via hierarchical reinforcement learning. arXiv preprint arXiv:2311.00267, 2023.   \n[37] Mao, H., Zhao, R., Chen, H., Hao, J., Chen, Y., Li, D., Zhang, J., and Xiao, Z. Transformer in transformer as backbone for deep reinforcement learning. In AAMAS, 2024.   \n[38] Meng, L., Wen, M., Yang, Y., Le, C., Li, X., Zhang, W., Wen, Y., Zhang, H., Wang, J., and Xu, B. Offline pre-trained multi-agent decision transformer: One big sequence model tackles all smac tasks. arXiv preprint arXiv:2112.02845, 2021.   \n[39] Micheli, V., Alonso, E., and Fleuret, F. Transformers are sample efficient world models. In ICLR, 2023.   \n[40] Nair, A., Dalal, M., Gupta, A., and Levine, S. Accelerating online reinforcement learning with offline datasets. arXiv preprint arXiv:2006.09359, 2020.   \n[41] Nakamoto, M., Zhai, Y., Singh, A., Mark, M. S., Ma, Y., Finn, C., Kumar, A., and Levine, S. Cal-ql: Calibrated offline rl pre-training for efficient online fine-tuning. In NeurIPS, 2023. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "[42] Ni, T., Ma, M., Eysenbach, B., and Bacon, P.-L. When do transformers shine in rl? decoupling memory from credit assignment. In NeurIPS, 2023. ", "page_idx": 12}, {"type": "text", "text": "[43] Oh, J., Guo, Y., Singh, S., and Lee, H. Self-imitation learning. In ICML, 2018.   \n[44] Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., Schulman, J., Hilton, J., Kelton, F., Miller, L., Simens, M., Askell, A., Welinder, P., Christiano, P. F., Leike, J., and Lowe, R. Training language models to follow instructions with human feedback. In NeurIPS, 2022.   \n[45] Parisotto, E., Song, F., Rae, J., Pascanu, R., Gulcehre, C., Jayakumar, S., Jaderberg, M., Kaufman, R. L., Clark, A., Noury, S., et al. Stabilizing transformers for reinforcement learning. In ICML, 2020.   \n[46] Paster, K., McIlraith, S., and Ba, J. You can\u2019t count on luck: Why decision transformers and rvs fail in stochastic environments. In NeurIPS, 2022.   \n[47] Peng, X. B., Kumar, A., Zhang, G., and Levine, S. Advantage-weighted regression: Simple and scalable off-policy reinforcement learning. arXiv preprint arXiv:1910.00177, 2019.   \n[48] Pinto, A. S., Kolesnikov, A., Shi, Y., Beyer, L., and Zhai, X. Tuning computer vision models with task rewards. In ICML, 2023.   \n[49] Rajeswaran, A., Kumar, V., Gupta, A., Vezzani, G., Schulman, J., Todorov, E., and Levine, S. Learning Complex Dexterous Manipulation with Deep Reinforcement Learning and Demonstrations. In RSS, 2018.   \n[50] Robine, J., H\u00f6ftmann, M., Uelwer, T., and Harmeling, S. Transformer-based world models are happy with 100k interactions. In ICLR, 2023.   \n[51] Schmitt, S., Hudson, J. J., Zidek, A., Osindero, S., Doersch, C., Czarnecki, W. M., Leibo, J. Z., Kuttler, H., Zisserman, A., Simonyan, K., et al. Kickstarting deep reinforcement learning. arXiv preprint arXiv:1803.03835, 2018.   \n[52] Schulman, J., Wolski, F., Dhariwal, P., Radford, A., and Klimov, O. Proximal policy optimization algorithms. arXiv preprint arXiv:1707.06347, 2017.   \n[53] Shang, J., Kahatapitiya, K., Li, X., and Ryoo, M. S. Starformer: Transformer with state-actionreward representations for visual reinforcement learning. In ECCV, 2022.   \n[54] Sharif, A. and Marijan, D. Evaluating the robustness of deep reinforcement learning for autonomous and adversarial policies in a multi-agent urban driving environment. In QRS, 2021.   \n[55] Silver, D., Hubert, T., Schrittwieser, J., Antonoglou, I., Lai, M., Guez, A., Lanctot, M., Sifre, L., Kumaran, D., Graepel, T., Lillicrap, T. P., Simonyan, K., and Hassabis, D. Mastering chess and shogi by self-play with a general reinforcement learning algorithm. Science, 2018.   \n[56] Song, Y., Zhou, Y., Sekhari, A., Bagnell, J. A., Krishnamurthy, A., and Sun, W. Hybrid rl: Using both offline and online data can make rl efficient. In ICLR, 2023.   \n[57] Sudhakaran, S. and Risi, S. Skill decision transformer. Foundation Models for Decision Making Workshop at NeurIPS, 2022.   \n[58] Todorov, E., Erez, T., and Tassa, Y. Mujoco: A physics engine for model-based control. In IROS, 2012.   \n[59] Uchendu, I., Xiao, T., Lu, Y., Zhu, B., Yan, M., Simon, J., Bennice, M., Fu, C., Ma, C., Jiao, J., et al. Jump-start reinforcement learning. In ICML, 2023.   \n[60] Wang, Z., Wang, H., and Qi, Y. J. T3gdt: Three-tier tokens to guide decision transformer for offline meta reinforcement learning. In Robot Learning Workshop: Pretraining, Fine-Tuning, and Generalization with Large Scale Models in NeurIPS, 2023.   \n[61] Wo\u0142czyk, M., Cupia\u0142, B., Ostaszewski, M., Bortkiewicz, M., Zaj a\u02dbc, M., Pascanu, R., Kucin\u00b4ski, \u0141., and Mi\u0142os\u00b4, P. Fine-tuning reinforcement learning models is secretly a forgetting mitigation problem. In ICML, 2024.   \n[62] Wu, J., Wu, H., Qiu, Z., Wang, J., and Long, M. Supported policy optimization for offline reinforcement learning. In NeurIPS, 2022.   \n[63] Wu, Y.-H., Wang, X., and Hamaya, M. Elastic decision transformer. In NeurIPS, 2023.   \n[64] Xie, Z., Lin, Z., Ye, D., Fu, Q., Wei, Y., and Li, S. Future-conditioned unsupervised pretraining for decision transformer. In ICML, 2023.   \n[65] Xu, M., Lu, Y., Shen, Y., Zhang, S., Zhao, D., and Gan, C. Hyper-decision transformer for efficient online policy adaptation. In ICLR, 2023.   \n[66] Yamagata, T., Khalil, A., and Santos-Rodriguez, R. Q-learning decision transformer: Leveraging dynamic programming for conditional sequence modelling in offline rl. In ICML, 2023.   \n[67] Yan, K., Schwing, A., and Wang, Y.-X. Ceip: Combining explicit and implicit priors for reinforcement learning with demonstrations. In NeurIPS, 2022.   \n[68] You, Y., Li, J., Reddi, S., Hseu, J., Kumar, S., Bhojanapalli, S., Song, X., Demmel, J., Keutzer, K., and Hsieh, C.-J. Large batch optimization for deep learning: Training bert in 76 minutes. In ICLR, 2020.   \n[69] Yu, Z. and Zhang, X. Actor-critic alignment for offline-to-online reinforcement learning. In ICML, 2023.   \n[70] Yuan, H., Zhang, C., Wang, H., Xie, F., Cai, P., Dong, H., and Lu, Z. Plan4MC: Skill reinforcement learning and planning for open-world Minecraft tasks. In Foundation Models for Decision Making Workshop at NeurIPS 2023, 2023.   \n[71] Yue, Y., Lu, R., Kang, B., Song, S., and Huang, G. Understanding, predicting and better resolving q-value divergence in offline-rl. NeurIPS, 2024.   \n[72] Zhang, H., Xu, W., and Yu, H. Policy expansion for bridging offline-to-online reinforcement learning. In ICLR, 2023.   \n[73] Zheng, H., Luo, X., Wei, P., Song, X., Li, D., and Jiang, J. Adaptive policy learning for offline-to-online reinforcement learning. In AAAI, 2023.   \n[74] Zheng, Q., Zhang, A., and Grover, A. Online decision transformer. In ICML, 2022.   \n[75] Zhou, B., Li, K., Jiang, J., and Lu, Z. Learning from visual observation via offline pretrained state-to-go transformer. In NeurIPS, 2023.   \n[76] Zhu, D., Wang, Y., Schmidhuber, J., and Elhoseiny, M. Guiding online reinforcement learning with action-free offline pretraining. arXiv preprint arXiv:2301.12876, 2023. ", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "Appendix: Reinforcement Learning Gradients as Vitamin for Online Finetuning Decision Transformers ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "The Appendix is organized as follows. In Sec. A, we discuss the potential positive and negative social impact of the paper. Then, we summarize the performance shown in the main paper in Sec. B. After this, we will explain our choice of RL gradients in the paper in Sec. C, and why our critic serves as an average of policies generated by different context lengths in Sec. D. We then provide rigorous statements for the theroetical analysis appearing in the paper in Sec. E, and list the environment details and hyperparameters in Sec. F. We then present more experiment and ablation results in Sec. G. Finally, we list our computational resource usage and licenses of related assets in Sec. H and Sec. I respectively. ", "page_idx": 14}, {"type": "text", "text": "A Broader Societal Impacts ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Our work generally helps automation of decision-making by improving the use of online interaction data of a pretrained decision transformer agent. While this effort improves the efficiency of decisionmakers and has the potential to boost a variety of real-life applications such as robotics and resource allocation, it may also cause several negative social impacts, such as potential job losses, human de-skilling (making humans less capable of making decisions without AI), and misuse of technology (e.g., military). ", "page_idx": 14}, {"type": "text", "text": "B Performance Summary ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In this section, we summarize the average reward achieve by each method on different environments and datasets, where the result for Adroit is shown in Tab. 2, and the result for Antmaze is shown in Tab. 3. As the summary table for MuJoCo is already presented in Sec. 4, we show the reward curves in Fig. 6. For a more rigorous evaluation, we also report other metrics including the median, InterQuartile Mean (IQM) and optimality gap using the rliable [3] library. See Fig. 7 for details. Breakdown analysis for each environment can be downloaded by browsing to https://kaiyan289. github.io/assets/breakdown_rliable.rar. ", "page_idx": 14}, {"type": "table", "img_path": "5l5bhYexYO/tmp/f2e51c6f693649dac527137fee3a01b7286457ae622b41d4170f01d6f7813b3f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Table 2: Average reward for each method in Adroit Environments before and after online finetuning. The best result for each setting is marked in bold font and all results $>90\\%$ of the best performance are underlined. To save space, the name of the environments and datasets are abbreviated as follows: $\\scriptstyle\\mathrm{P=Pen}$ , $\\mathrm{H}{=}$ Hammer, $\\scriptstyle\\mathrm{D=Door}$ , $\\scriptstyle\\mathbf{R}=$ Relocate for environment, and $E{=}$ Expert, $C{=}$ cloned, $\\mathrm{H}{=}$ Human for the dataset. It is apparent that while both IQL, TD3 and $\\mathrm{TD}3\\mathrm{+ODT}$ perform decently well before online finetuning, our proposed solution significantly outperforms all baselines on the adroit testbed. DDPG+ODT starts out well in the online stage, but fails probably due to DDPG\u2019s training instability compared to TD3. ", "page_idx": 14}, {"type": "text", "text": "C Why Do We Choose TD3 to Provide RL Gradients? ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In this section, we provide an ablation analysis on which RL gradient fits the decision transformer architecture best. Fig. 8 illustrates the result of using a pure RL gradient for online finetuning of a pretrained decision transformer (for those RL algorithms with stochastic policy, we adopt the same architecture as ODT which outputs a squashed Gaussian distribution with trainable mean and standard deviation). It is apparent that TD3 [21] and SAC [25] are the RL algorithms that suit the decision transformer best. Fig. 9 further shows the performance comparison between a decision transformer with $\\mathrm{SAC+ODT}$ mixed gradient and $\\mathrm{TD}3\\mathrm{+ODT}$ mixed gradient (both with coefficient 0.1). The result shows that TD3 is the better choice when paired with supervised learning. ", "page_idx": 14}, {"type": "table", "img_path": "5l5bhYexYO/tmp/8e920a0d5ddb0277ce4cf4de22483d1136a6d1e98797efdc72f3b2ebc8ade652.jpg", "table_caption": [], "table_footnote": ["Table 3: Average reward for each method in Antmaze Environments before and after online finetuning. The best result is marked in bold font and all results $>90\\%$ fo the best performance are underlined. To save space, the name of the environments and datasets are abbreviated as follows: $\\mathrm{U}{=}$ Umaze, UD $\\mathrel{\\mathop:}$ Umaze-Diverse, $\\mathbf{M}\\mathbf{P}\\!\\!=\\!\\!\\mathrm{]}$ Medium-Play, MD $\\vDash$ Medium-Diverse, ${\\mathrm{LP}}{=}{\\mathrm{I}}$ arge-Play and LD=LargeDiverse. $\\scriptstyle\\mathrm{U}+\\mathrm{M}=\\mathrm{U}$ maze and Medium maze. Our method performs the best on umaze and medium maze, while IQL performs the best on large maze. Both methods are much better than the rest on average. $\\mathrm{TD3+BC}$ diverges on antmaze in our experiments. "], "page_idx": 15}, {"type": "image", "img_path": "5l5bhYexYO/tmp/efe48f7baa6f122e9a8a39a4416e4b43e08e4e2c97bcfd5704f3726c57cbe1e7.jpg", "img_caption": ["Figure 6: Results on MuJoCo [58] Environments. The TD3 gradient significantly improves the overall performance of the decision transformer; autoregressive algorithms, such as ODT and PDT, fails to improve policy in most cases (especially on random dataset), while $\\mathrm{TD3+BC}$ and IQL\u2019s improvement during finetuning is generally limited. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "Note, While PPO is generally closely related with transformers (e.g., Reinforcement Learning from Human Feedback (RLHF) [44]), and was used in some prior work for online finetuning of decision transformers with a small, discrete action space [38], in our experiments, we find PPO generally does not work with the decision transformer architecture. The main reason for this is the importance sampling issue: PPO has the following objective for an actor $\\pi_{\\theta}$ parameterized by $\\theta$ : ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{\\theta}\\operatorname*{min}_{\\theta}\\left(\\mathbb{E}_{(s,a)\\sim\\pi_{\\theta_{\\mathrm{odd}}}}\\frac{\\pi_{\\theta}(a|s)}{\\pi_{\\theta_{\\mathrm{odd}}}(a|s)}A^{\\pi_{\\theta_{\\mathrm{odd}}}}(s,a),\\mathrm{clip}\\left(\\frac{\\pi_{\\theta}(a|s)}{\\pi_{\\theta_{\\mathrm{odd}}}(a|s)},1-\\epsilon,1+\\epsilon\\right)A^{\\pi_{\\theta_{\\mathrm{odd}}}}(s,a)\\right).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Here, $\\pi_{\\theta_{\\mathrm{old}}}$ is the policy at the beginning of the training for the current epoch. Normally, the denominator of the red part, $\\pi_{\\theta_{\\mathrm{old}}}(a|s)$ , would be reasonably large, as the data is sampled from that distribution. However, because of the offilne nature caused by different RTGs and context lengths at rollout and training time, the denominator for the red part in Eq. (7) could be very small in training, which will lead to a very small loss if $A_{\\theta_{\\mathrm{old}}}^{\\pi}(s,a)>0$ . This introduces significant instability during the training process. Fig. 10 illustrates the instability and degrading performance of a PPO-finetuned decision transformer. ", "page_idx": 15}, {"type": "image", "img_path": "5l5bhYexYO/tmp/c2eaf5db20ff4b4a0c2dec53d14dd58dadac6cf099126a453351ac995e6a37f3.jpg", "img_caption": ["Figure 7: Our main final results re-evaluated using the rliable library with 10000 bootstrap replications. The $\\mathbf{X}$ -axes are normalized scores (optimality gap is $\\begin{array}{r}{\\int_{0}^{100}\\mathrm{Pr}(\\mathrm{reward}\\leq x)d x)}\\end{array}$ . Our method indeed outperforms all baselines on Adroit, MuJoCo and antmaze (umaze and medium). "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "In contrast, RLHF, does not exhibit such a problem: it does not use different return-to-go and context length in evaluation and training. Thus RLHF does not encounter the problem described above. ", "page_idx": 16}, {"type": "text", "text": "Besides the RL gradients mentioned above, as IQL works well on large Antmazes, we also explore the possibility of using IQL as the RL gradient for decision transformer instead of TD3. We found that IQL gradients, when applied to the decision transformer, indeed lead to much better results on antmaze-large. However, IQL fails to improve the policy when the offilne dataset subsumes very low reward trajectories, which does not conform with our motivation. This is probably because IQL, as an offline RL algorithm, aims to address out-of-distribution evaluation issue, which is a much more important source of improvement in exploration in the online case. Thus, we choose TD3 as the RL gradient applied to decision transformer finetuning in this work. Fig. 11 shows the result of adding TD3 gradient vs. adding IQL gradient on Antmaze-large-play-v2 and hopper-random-v2. ", "page_idx": 16}, {"type": "text", "text": "D Why Our Critic Serves as an Average of Policies Generated by Different Context Lengths? ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "As we mentioned in Sec. 2, When updating a deterministic DT policy, the following loss is minimized: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\sum_{t=1}^{T_{\\mathrm{tain}}}\\left\\|\\mu^{\\mathrm{DT}}\\left(s_{0:t},a_{0:t-1},\\mathrm{RTG}_{0:t},\\mathrm{RTG}=\\mathrm{RTG}_{\\mathrm{real}},T=t\\right)-a_{t}\\right\\|_{2}^{2},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $T_{\\mathrm{train}}$ is the training context length and $\\mathrm{RTG}_{\\mathrm{real}}$ is the real return-to-go. ", "page_idx": 16}, {"type": "image", "img_path": "5l5bhYexYO/tmp/a98f34a3c1ad56c0cb0c972c1aecc2131c7b74cf7a26dced67b8b005d2e4e4fc.jpg", "img_caption": ["Figure 8: Performance comparison of different, pure RL gradients for online finetuning on standard D4RL benchmarks, with TD3 [21], SAC [25], AWAC [40], AWR [47] and PPO [52]. We also plot ODT\u2019s performance as a reference. The result shows that generally, TD3 and SAC work the best, while PPO does not work at all. "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "5l5bhYexYO/tmp/47ade49d3f575938445db88e5733961422f6d82a5b789db0993c3b48d89d10cf.jpg", "img_caption": ["Figure 9: Performance comparison between $\\mathrm{SAC+ODT}$ and $\\mathrm{TD}3\\mathrm{+ODT}$ on standard D4RL benchmarks. $\\mathrm{TD}3\\mathrm{+ODT}$ significantly outperforms $\\mathrm{SAC+ODT}$ . "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "However, if we consider a particular action $a_{t}$ in some trajectory $\\tau$ of the dataset, during training (both offline pretraining and online finetuning), the policy generated by the decision transformer fitting $a_{t}$ will be ", "page_idx": 17}, {"type": "equation", "text": "$$\na_{t}=\\mu^{\\mathrm{{DT}}}(s_{t-T:t},a_{t-T:t-1},\\mathrm{{RTG}}_{t-T:t},T\\sim U^{\\prime}(1,T_{\\mathrm{{train}}}),\\mathrm{{RTG}=R T G_{\\mathrm{{real}}})},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "$T$ is actually sampled from a distribution $U^{\\prime}(1,T_{\\mathrm{train}})$ over integers between 1 and $T_{\\mathrm{train}}$ inclusive; this distribution $U^{\\prime}$ is introduced by the randomized starting step of the sampled trajectory segments, and is almost a uniform distribution on integers, except that a small asymmetry is created because the context length will be capped at the beginning of each trajectory. See Fig. 12 for an illustration. ", "page_idx": 17}, {"type": "text", "text": "Therefore, online decision transformers (and plain decision transformers) are actually trained to predict with every context length between 1 and $T_{\\mathrm{train}}$ . During the training process, the context length is randomly sampled according to $U^{\\prime}$ , and a critic is trained to predict an \u201caverage value\u201d for the policy generated with context length sampled from $U^{\\prime}$ . ", "page_idx": 17}, {"type": "image", "img_path": "5l5bhYexYO/tmp/419ee58ad3c3637a7d934bdef76c8fbec4daa465e4cf0c4ac4235365c96b4f12.jpg", "img_caption": [], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "Figure 10: An illustration of the training instability and the corresponding performance of a PPOfinetuned decision transformer. The $x$ axis is $300\\times$ the number of gradient steps. ", "page_idx": 18}, {"type": "image", "img_path": "5l5bhYexYO/tmp/8aca5f23559fd410b4bf73bd48452019af87a43b580d0dae589983d88c75174b.jpg", "img_caption": ["Figure 11: Performance comparison between $\\mathrm{IQL+ODT}$ and ${\\mathrm{TD3+ODT}}$ . While IQL gradient is good at both large antmaze environments, it is much easier to fall into local minima in low-reward offilne dataset such as Hopper-random-v2. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "E Mathematical Proofs ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "In this section, we will state the theoretical analysis summarized in Sec. 3.3 more rigorously. We will first provide an explanation on how the decision transformer improves its policy during online finetuning, linking it to an existing RL method in Sec. E.1 and Sec. E.2. We will then bound its performance in Sec. E.3. ", "page_idx": 18}, {"type": "text", "text": "E.1 Preliminaries ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Advantage-Weighted Actor Critic (AWAC) [40] is an offline-to-online RL algorithm, where the replay buffer is filled with offline data during offline pretraining and then supplemented with online experience during online finetuning. AWAC uses standard $Q$ -learning to train the critic $Q:|S|\\times$ $|\\bar{A}|\\rightarrow\\mathbb{R}$ , and update the actor using weighted behavior cloning, where the weight is exponentiated advantage (i.e., $\\exp\\left({\\frac{A(s,a)}{\\lambda}}\\right)$ where $\\lambda>0$ is some constant). ", "page_idx": 18}, {"type": "text", "text": "E.2 Connection between Decision Transformer and AWAC ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "We denote $\\beta$ as the underlying policy of the dataset, and $P_{\\beta}$ as the distribution over states, actions or returns induced by $\\beta$ . Note such $P_{\\beta}$ can be either discrete or continuous. By prior work [7], for decision transformer policy $\\pi^{\\mathrm{DT}}$ , we have the following formula holds for any return-to-go $\\mathrm{RTG}\\in\\mathbb{R}$ of the future trajectory: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\pi^{\\mathrm{DT}}(a|s,\\mathrm{RTG})=P_{\\beta}(a|s,\\mathrm{RTG})=\\frac{P_{\\beta}(a|s)P_{\\beta}(\\mathrm{RTG}|s,a)}{P_{\\beta}(\\mathrm{RTG}|s)}=\\beta(a|s)\\frac{P_{\\beta}(\\mathrm{RTG}|s,a)}{P_{\\beta}(\\mathrm{RTG}|s)}.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Based on Eq. (10), we have the following lemma: ", "page_idx": 18}, {"type": "text", "text": "Lemma 2. For state-action pair $(s,a)$ in an MDP, $R T G\\in\\mathbb{R},$ , assume the distributions of return-to-go (RTG) $P_{\\beta}(R T G|s,a)$ and $P_{\\beta}(R T G|s)$ are Laplace distributions with scale $\\sigma$ , then for any RTG large ", "page_idx": 18}, {"type": "image", "img_path": "5l5bhYexYO/tmp/aea300fb436327fe08c4af82ac5694b4c19bbfaa2f32d3539a89a5221a7fcd3d.jpg", "img_caption": ["(a) Context length $T_{2}$ during training ", "(b) Distribution $U^{\\prime}$ of $T_{2}$ "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Figure 12: a) illustrates the context length $T_{2}$ during training; $T_{\\mathrm{eval}}$ is the context length of $a_{2}$ upon sampling and evaluation. It is easy to see that $T_{2}$ is randomized during training due to the left endpoint of the sampled trajectory segment. $\\mathbf{b}$ ) shows the distribution $U^{\\prime}$ of $T_{2}$ ; while $T_{2}^{\\prime}$ for step $j\\geq T_{\\mathrm{train}}$ is uniformly sampled between 1 and $T_{\\mathrm{train}}$ because the start of the segment is uniformly sampled, $T_{2}$ for step $i<T_{\\mathrm{train}}$ will be capped at the start of the trajectory. Thus $U^{\\prime}$ is not exactly uniform. ", "page_idx": 19}, {"type": "image", "img_path": "5l5bhYexYO/tmp/79fec5a88fcdd33b6f3925b91fc7a0e05fa2813b43114b30b6da0f14a80e3c3f.jpg", "img_caption": ["Figure 13: An illustration of how decision transformer policy update at $\\mathrm{RTG}_{\\mathrm{eval}}$ is related to AWAC. Though the assumption is strong to form the exact same formula, it shows the basic idea of how we link $\\bar{P}^{\\beta}(\\mathbf{R}\\mathbf{T}\\mathbf{G})$ to its distance to $V^{\\beta}(s)$ and $Q^{\\beta}(s,a)$ in this paper. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "enough (more rigorously, $R T G\\geq\\operatorname*{max}\\{Q^{\\beta}(s,a),V^{\\beta}(s)\\})$ , $\\pi(a|s,R T G)$ is updated in the same way as AWAC.4 ", "page_idx": 19}, {"type": "text", "text": "Proof. If return-to-go are Laplace distributions, then by the symmetric property of such distributions, the mean of RTG given $s$ or $(s,a)$ would be the expected future return, which by definition are value functions for $\\beta$ , i.e., $V^{\\beta}(s)$ for $P_{\\beta}(\\mathbf{RTG}|s)$ and $Q^{\\beta}(s,a)$ for $P_{\\beta}(\\mathbf{RTG}|s,a)$ . See Fig. 13 as an illustration. As ${\\mathrm{RTG}}_{\\mathrm{eval}}\\geq\\operatorname*{max}\\{Q^{\\beta}(s,a),V^{\\beta}(s)\\}$ , we have ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{P_{\\beta}(\\mathrm{RTG}|s,a)=p_{\\beta}(\\mathrm{RTG}|s,a)=\\cfrac{1}{2\\sigma}\\exp\\left(-\\cfrac{\\mathrm{RTG}-Q^{\\beta}(s,a)}{\\sigma}\\right),}\\\\ &{\\,\\,\\,\\,P_{\\beta}(\\mathrm{RTG}|s)=p_{\\beta}(\\mathrm{RTG}|s,a)=\\cfrac{1}{2\\sigma}\\exp\\left(-\\cfrac{\\mathrm{RTG}-V^{\\beta}(s)}{\\sigma}\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "And thus we have $\\begin{array}{r}{\\frac{P_{\\beta}(\\mathrm{RTG}|s,a)}{P_{\\beta}(\\mathrm{RTG}|s)}=\\exp\\left(\\frac{Q^{\\beta}(s,a)-V^{\\beta}(s)}{\\sigma}\\right)=\\exp(\\frac{A^{\\beta}(s,a)}{\\sigma})}\\end{array}$ , where $A^{\\beta}$ is the advantage function. \u53e3 ", "page_idx": 19}, {"type": "text", "text": "While the Laplace distribution assumption in this lemma is strict and impractical for real-life applications, it gives us three crucial insights for a decision transformer: ", "page_idx": 19}, {"type": "text", "text": "\u2022 For any state $s$ or state-action pair $(s,a)$ , we have $\\mathbb{E}_{\\beta}[\\mathrm{RTG}|s,a]=Q^{\\beta}(s,a),\\mathbb{E}_{\\beta}[\\mathrm{RTG}|s]=$ $V^{\\beta}(s)$ , which is an important property of $P_{\\beta}$ on RTG; ", "page_idx": 19}, {"type": "text", "text": "\u2022 For decision transformer, the ability to improve the policy by collecting rollouts with high RTG, similar to AWAC, is closely related to advantage. In the above lemma, for example, if the two Laplace distributions have different scales $\\sigma_{V},\\sigma_{Q}$ , we will have the ratio $\\displaystyle\\frac{P_{\\beta}(\\mathbf{R}\\bar{\\mathrm{TG}}|s,a)}{P_{\\beta}(\\mathbf{R}\\mathrm{TG}|s)}$ being Q\u03c3(s,a)\u2212V \u03c3(s) ; if the distributions are Gaussian, we will get similar results but with quadratic terms of ${\\dot{Q}}^{\\beta}$ and $V^{\\beta}$ .   \n\u2022 Different from AWAC, the \u201cpolicy improvement\u201d of online decision transformers heavily relies on the global property of the return-to-go as $\\mathrm{RTG}_{\\mathrm{eval}}$ moves further away from $Q^{\\tilde{\\beta}}$ and $V^{\\beta}$ . If the return-to-go is far away from the support of the data, we will have almost no data to evaluate $P_{\\beta}$ , and its estimation can be very uncertain (let alone ratios). In this case, it is very unlikely for the decision transformer to collect rollouts with high $\\mathrm{RTG}_{\\mathrm{true}}$ and get further improvement. This is partly supported by the corollary of Brandfonbrener et al. [7], where the optimal conditioning return they found on evaluation satisfies $\\mathrm{RTG}_{\\mathrm{eval}}=V^{\\beta}(\\Bar{s}_{1})$ at the initial state $s_{1}$ . This is also supported by our single-state MDP experiment discussed in Sec. 3.1 and illustrated in Fig. 2. ", "page_idx": 20}, {"type": "text", "text": "Those important insights lead to the intuition that decision transformers, when finetuned online, lack the ability to improve \u201clocally\u201d from low $\\mathrm{RTG}_{\\mathrm{true}}$ data, and encourages to study the scenario where $P_{\\beta}(\\mathbf{RTG}|s)$ and $\\grave{P_{\\beta}}(\\mathbf{R}\\mathrm{TG}|s,\\dot{a})$ are small. ", "page_idx": 20}, {"type": "text", "text": "E.3 Failure of ODT Policy Update with Low Quality Data ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "As mentioned in Sec. E.2, we study the performance of decision transformers in online finetuning when $P_{\\beta}\\big(\\mathbf{RTG}|s\\big)$ and $P_{\\beta}(\\mathbf{RTG}|s,a)$ is small. Specially, in this section, $r(s,a)$ is not a reward function, but a reward distribution conditioned on $(s,a)$ ; $r_{i}\\,\\sim\\,r(s_{i},a_{i})$ is the reward obtained on $i$ -th step. Such notation takes the noise of reward into consideration and forms a more general framework. Also, as the discrete or continuous property of $\\beta$ is important in this section, we will use $\\mathrm{Pr}_{\\beta}$ to represent probability mass (for discrete distribution or cumulative distribution for continuous distribution) and $p_{\\beta}$ to represent probability density (for probability density function for continuous distribution). ", "page_idx": 20}, {"type": "text", "text": "By prior work [7], we have the following performance bound tight up to a constant factor for decision transformer for every iteration of updates: ", "page_idx": 20}, {"type": "text", "text": "Theorem E.1. For any MDP with transition function $p(\\cdot|s,a)$ and reward random variable $r(s,a)$ , and any condition function $f$ , assume the following holds: ", "page_idx": 20}, {"type": "text", "text": "\u2022 Return coverage: $P_{\\beta}(g=f(s_{1})|s_{1})\\geq\\alpha_{f}$ for any initial state $s_{1}$ ; \u2022 Near determinism: for any state-action pair $(s,a)$ , \u2203 $s^{\\prime}$ such that $\\operatorname*{Pr}(s^{\\prime}|s,a)\\geq1-\\epsilon$ , and \u2203 $r_{0}(s,a)$ such that $\\operatorname*{Pr}(r(s,a)=r_{0}(s,a))\\geq1-\\epsilon,$ ; \u2022 Consistency of $f$ : $f(s)=f(s^{\\prime})+r$ for all s when transiting to next state $s^{\\prime}$ . ", "page_idx": 20}, {"type": "text", "text": "Then we have ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathbb{E}_{s_{1}\\sim p_{i n}}\\left[f(s_{1})\\right]-\\mathbb{E}_{\\tau=(s_{1},a_{1},\\ldots,s_{H},a_{H})\\sim\\pi^{D T}(\\cdot\\,|s,f(s))}\\left[\\sum_{i=1}^{H}\\mathbb{E}_{r_{i}\\sim r(s_{i},a_{i})}r_{i}\\right]\\le\\epsilon\\left(\\frac{1}{\\alpha_{f}}+2\\right)H^{2},\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $\\alpha_{f}>0,\\epsilon>0$ are constants, $p_{i n i}$ is the initial state distribution, and $H$ is the horizon of the MDP. $\\pi^{D T}$ is the learned policy by $E q$ . (10). ", "page_idx": 20}, {"type": "text", "text": "Proof. See Brandfonbrener et al. [7]. ", "page_idx": 20}, {"type": "text", "text": "In our case, we define $f(s)$ as follows: ", "page_idx": 20}, {"type": "text", "text": "Definition E.2. $f(s_{1})=\\mathrm{RTG}_{\\mathrm{eval}}$ for all initial states $s_{1}$ , $f(s_{i+1})=f(s_{i})-r_{i}$ for the $(i+1)$ -th step following $i$ -th step $(i\\in\\{1,2,\\ldots,T-1\\})$ . ", "page_idx": 20}, {"type": "text", "text": "Further, we enforce the third assumption in Thm. E.1 by including the cumulative reward so far in the state space (as described in the paper of Brandforbrener et al. [7]). Under such definition, we have a tight bound on the regret between our target $\\mathrm{RTG}_{\\mathrm{eval}}$ and the true return-to-go $\\begin{array}{r}{\\mathrm{RTG}_{\\mathrm{true}}=\\sum_{i=1}^{H}r_{i}}\\end{array}$ by our learned policy at optimal, based on current replay buffer in online finetuning. ", "page_idx": 21}, {"type": "text", "text": "We will now prove that under certain assumptions, $\\frac{1}{\\alpha_{f}}$ grows superlinearly with respect to RTG; as the bound is tight, the expected cumulative return term $\\begin{array}{r}{\\mathbb{E}_{\\tau=(s_{1},a_{1},\\dots,s_{H},a_{H})\\sim\\beta}\\left[\\sum_{i=1}^{H}\\mathbb{E}_{r_{i}\\sim r(s_{i},a_{i})}r_{i}\\right]}\\end{array}$ will be decreasing to meet the bounds. ", "page_idx": 21}, {"type": "text", "text": "To do this, we start with the following assumptions: ", "page_idx": 21}, {"type": "text", "text": "Assumption E.3. We assume the following statements to be true: ", "page_idx": 21}, {"type": "text", "text": "\u2022 (Bounded reward) We assume the reward is bounded in $[0,R_{\\mathrm{max}}]$ for any state-action pairs.   \n\u2022 (High evaluation RTG) $\\mathrm{RTG}_{\\mathrm{eval}}\\geq\\mathrm{RTG}_{\\beta\\mathrm{max}}$ , where $\\mathrm{RTG}_{\\beta\\mathrm{max}}$ is the largest $\\mathrm{RTG}_{\\mathrm{true}}$ in the dataset of $n$ trajectories generated by $\\beta$ .   \n\u2022 (Beta prior) We assign the prior distribution of RTG generated by policy $\\beta$ to be a Beta distribution $\\mathrm{Beta}(1,1)$ for the binomial likelihood of RTG falling on $[0,\\mathrm{RTG}_{\\beta\\mathrm{max}}]$ or $[\\mathrm{RTG}_{\\beta\\mathrm{max}},T R_{\\mathrm{max}}]$ . ", "page_idx": 21}, {"type": "text", "text": "Remark E.4. The Beta distribution can be changed to any reasonable distribution; we use Beta distribution only for a convenient derivation. Considering the fact that by common sense, trajectories with high return are very hard to obtain, we can further strengthen the conclusion by changing the prior distribution. ", "page_idx": 21}, {"type": "text", "text": "We then prove the following lemma: ", "page_idx": 21}, {"type": "text", "text": "Lemma 3. Under the Assumption $E.3$ , given underlying policy $\\beta$ of the dataset, for any state s with value function $V^{\\beta}(s)$ and any state-action pair $(s,a)$ with $Q$ -function $Q^{\\beta}(s,a)$ , any $c\\ge0$ and $R T G_{e\\nu a l}\\in\\mathbb{R},$ , with probability $1-\\delta$ , we have ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{}&{\\operatorname*{Pr}_{\\beta}\\bigl(R T G_{e v a l}-V^{\\beta}(s)\\geq c|s\\bigr)\\leq\\frac{(1-\\epsilon)R T G_{\\beta m a x}+\\epsilon R_{m a x}^{2}T^{2}-\\big[V^{\\beta}(s)\\big]^{2}}{c^{2}},\\ \\ \\ }\\\\ &{}&{\\operatorname*{Pr}_{\\beta}\\bigl(R T G_{e v a l}-Q^{\\beta}(s,a)\\geq c|s,a\\bigr)\\leq\\frac{(1-\\epsilon)R T G_{\\beta m a x}+\\epsilon R_{m a x}^{2}T^{2}-\\big[Q^{\\beta}(s,a)\\big]^{2}}{c^{2}},\\ \\ \\ }\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "where $\\delta=1-C D F_{B e t a(n+1,1)}(\\epsilon)$ , and the CDF is the cumulative distribution function. ", "page_idx": 21}, {"type": "text", "text": "Proof. With the beta prior assumption in Assumption E.3, we know that with $n$ samples where $\\mathrm{RTG}\\,\\leq\\,\\mathrm{RTG}_{\\beta\\mathrm{max}}$ , we have the posterior distribution to be Bet $\\mathfrak{z}(n+1,1)$ , i.e., with probability $1-\\mathrm{CDF}_{\\mathrm{Beta}(n+1,1)}(\\epsilon)$ , we have $\\operatorname*{Pr}_{\\beta}(\\mathbf{RTG}\\geq\\mathbf{RTG}_{\\beta\\operatorname*{max}})\\leq\\epsilon$ for $\\epsilon>0$ . ", "page_idx": 21}, {"type": "text", "text": "Thus, by Chebyshev inequality, we know ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\operatorname*{Pr}_{\\beta}\\left(\\mathbf{RTG}-V^{\\beta}(s)\\geq c|s\\right)\\leq\\frac{\\mathbb{E}_{\\beta}\\left[\\mathbf{RTG}^{2}\\right]-\\mathbb{E}_{\\beta}^{2}\\left[\\mathbf{RTG}\\right]}{c^{2}}}\\\\ &{\\qquad\\qquad\\qquad\\qquad\\leq\\frac{(1-\\epsilon)\\mathbf{RTG}_{\\beta\\operatorname*{max}}+\\epsilon R_{\\operatorname*{max}}^{2}T^{2}-\\left[V^{\\beta}(s)\\right]^{2}}{c^{2}},}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "and a similar conclusion holds for $\\operatorname{\\sf{r}}_{\\beta}\\left({\\bf{R T G}}-Q^{\\beta}(s,a)\\geq c|s,a\\right)$ . Thus, the probability decays superlinearly with respect to RTG. \u53e3 ", "page_idx": 21}, {"type": "text", "text": "Given this lemma, it remains to connect the bound of $\\mathrm{Pr}_{\\beta}(\\mathbf{RTG}\\geq c_{0})$ to $P_{\\beta}(\\mathbf{R}\\mathbf{T}\\mathbf{G}=c_{0})$ on RTG, $c_{0}\\in\\mathbb{R}$ . For discrete distribution, the connection is straightforward: $\\operatorname*{Pr}_{\\beta}(\\mathbf{RTG}\\geq c_{0})\\geq\\operatorname*{Pr}_{\\beta}(\\mathbf{RTG}=$ $c_{0})=P_{\\beta}(\\mathrm{RTG}=c_{0})$ for any condition $s$ or $(s,a)$ . ", "page_idx": 21}, {"type": "text", "text": "Thus, we immediately get the following corollary: ", "page_idx": 21}, {"type": "text", "text": "Corollary 2. Assume the reward is bounded in $[0,R_{m a x}]$ for any state and action, and the number of possible different return-to-go one can get is finite or countably infinite. Then for the $f$ condition function defined in Def. E.2, with probability of at least 1\u2212\u03b4, we have \u03b1f \u2264 (1\u2212\u03f5)RTG(\u03b2RmTaxG+\u2212\u03f5VR 2m\u03b2a(xsT) 2)2\u2212[V \u03b2(s)]2, i.e., $\\frac{1}{\\alpha_{f}}$ grows in the order of $\\Omega(R T G_{e\\nu a l}^{2})$ . ", "page_idx": 22}, {"type": "text", "text": "Remark E.5. While the limitation on return-to-go seems strong theoretically, it is very easy to satisfy such assumption in practice because it has no requirement on the discreteness of state and action space. Such corollary can be applied on reward discretization with arbitrary precision (including implicit ones by float precision). ", "page_idx": 22}, {"type": "text", "text": "For continuous distribution, to bound $p_{\\beta}(\\mathbf{R}\\mathbf{T}\\mathbf{G}=c_{0})$ with $\\mathrm{Pr}_{\\beta}\\big(\\mathbf{R}\\mathbf{T}\\mathbf{G}\\geq c_{0}\\big)$ on RTG, we would need to assume that \u201cpeak\u201d does not exist (see Fig. 14 for illustration), i.e. there does not exist cases where $p_{\\beta}$ is large but $\\mathrm{Pr}_{\\beta}$ is small. Thus, we made the following assumption: ", "page_idx": 22}, {"type": "text", "text": "Assumption E.6. (Lipschitzness on uncovered RTG distribution) $p_{\\beta}\\big(\\mathbf{RTG}|s\\big)$ is $K_{V}$ -Lipschitz where RTG is larger than $\\mathrm{RTG}_{\\beta\\mathrm{max}}$ . ", "page_idx": 22}, {"type": "text", "text": "Remark E.7. The assumption is reasonable because when RTG is larger than any of the $\\mathrm{\\mathbf{RTG}_{\\mathrm{true}}}$ in the dataset, we have no data coverage for the performance of the underlying policy $\\beta$ under such RTG, and thus we can choose any inductive bias for $\\beta$ . ", "page_idx": 22}, {"type": "text", "text": "Remark E.8. Note the Lipschitzness of $p_{\\beta}$ does not rely on the Lipschitzness of the reward function. For example, consider a single-state, single-step MDP where we have a uniformly random policy $a\\sim U(0,\\bar{1})$ with reward $\\begin{array}{r}{r(\\check{a})=2-\\frac{1}{a}}\\end{array}$ . The reward is clearly not Lipschitz on $a\\in(0,1)$ , but the distribution of $r$ is $\\begin{array}{r}{p_{r}(r_{0})\\,=\\,p_{a}\\bigl(r^{-1}\\bigl(\\bar{r_{0}}\\bigr)\\bigr)\\cdot\\frac{\\partial r^{-1}(r_{0})}{\\partial r}\\,=\\,\\frac{1}{(r-2)^{2}}}\\end{array}$ = (r\u221212)2 , which is Lipschitz on (\u2212\u221e, 1) as $a\\in(0,1)$ . ", "page_idx": 22}, {"type": "text", "text": "With such assumption, we have the following corollary: ", "page_idx": 22}, {"type": "text", "text": "Corolla\u221ary 3. Under assumption $E.6,$ , for the $f$ condition function defined in Def. E.2, we have $\\alpha_{f}\\,\\leq\\,\\sqrt{2K_{V}}\\Omega\\,\\big(R T G_{e\\nu a l}^{-1.5}\\big)$ , i.e., $\\frac{1}{\\alpha_{f}}$ grows in the order of $\\bar{\\Omega}(R T G_{e\\nu a l}^{1.5})$ with probability of at least $1-\\delta$ . ", "page_idx": 22}, {"type": "text", "text": "Proof. Under assumption E.6, by Lipschitzness, for any RTG where $p_{\\beta}(\\mathbf{RTG}|s)\\,>\\,p_{0}$ , we have $p_{\\beta}\\bigl(\\mathrm{RTG}+c|s\\bigr)>p_{0}-K_{V}\\cdot c$ for any $c\\in[0,\\frac{p_{0}}{K_{V}}]$ . ", "page_idx": 22}, {"type": "text", "text": "Thus, we know that if $\\exists\\,\\mathrm{RTG}_{0}>\\mathrm{RTG}_{\\beta\\mathrm{max}}$ such that $p_{\\beta}\\big(\\mathbf{RTG}_{0}|s\\big)>p_{0}$ , then we have ${\\mathrm{Pr}}_{\\beta}(\\mathbf{R}\\mathbf{T}\\mathbf{G}\\geq$ $\\begin{array}{r}{\\mathrm{RTG}_{0}|s)\\,>\\,\\frac{p_{0}^{2}}{2K_{V}}}\\end{array}$ (See Fig. 14 for an illustration). By the contra-positive statement of the above conclusion, we know that ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\operatorname*{Pr}_{\\beta}\\left(\\mathrm{RTG}\\geq\\mathrm{RTG}_{0}|s\\right)\\leq\\frac{p_{0}^{2}}{2K_{V}}\\Rightarrow\\forall\\mathrm{RTG}\\geq\\mathrm{RTG}_{0},\\;p_{\\beta}(\\mathrm{RTG}|s)\\leq p_{0},}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "and $\\mathrm{RTG}_{\\mathrm{eval}}$ is applicable to the inequality above by the high evaluation RTG assumption in Assumption E.3. We then apply the proof lemma 3, but apply the inequality P (x \u2212E[x] \u2265c) \u2264E(x\u2212cE3[x])3 instead of Chebyshev inequality which leads to the conclusion. ", "page_idx": 22}, {"type": "text", "text": "F Experimental Details ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "F.1 Environment and Dataset Details ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "F.1.1 Single-State MDP ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "The single-state MDP studied in Sec. 3.1 motivates why RL gradients are useful for online finetuning. It has a single state, a single action $a\\in[-1,1]$ , and a reward function $r(a)=(a+1)^{2}$ if $a\\leq0$ and $r(a)=1-2a$ otherwise. ", "page_idx": 22}, {"type": "text", "text": "Datasets. The dataset has a size of 128, with 100 actions uniformly sampled in $(-1,0.95)$ , and the remaining 28 actions uniformly sampled in (0.5, 1). The dataset is designed to conceal the reward peak in the middle. DDPG and ODT $^{\\ast}$ DDPG successfully recognized the reward peak but ODT failed. ", "page_idx": 22}, {"type": "image", "img_path": "5l5bhYexYO/tmp/b125b50dde5b58a5491df1124c4f92b172d1602803921fd6a8bcdce4e2040984.jpg", "img_caption": ["Figure 14: An illustration of how Lipschitzness on the distribution of $p_{\\beta}\\big(\\mathbf{RTG}|s\\big)$ could link the bound between $\\operatorname*{Pr}(\\mathrm{RTG}\\geq V^{\\beta}(s)+c|s)$ and $p_{\\beta}(\\mathbf{RTG}|s)$ . Note we do not take the left-hand side probability mass of $p_{0}$ into account because the triangle of probability mass could be truncated by $\\bar{V}^{\\beta}(s)$ . "], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "F.1.2 Adroit Environments ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Environments. Adroit is a set of more difficult benchmark than Mujoco in D4RL, and is becoming increasingly popular in recent offline and offline-to-online RL works [28, 23]. We test four environments in adroit in our experiments: pen, hammer, door and relocate. Fig. 15 shows an illustration of the four environments. ", "page_idx": 23}, {"type": "image", "img_path": "5l5bhYexYO/tmp/22d84e7e51d8ba9fd11b343f9202bd3efc5fe0b88b564feeb58d8e0c8d44521e.jpg", "img_caption": ["Figure 15: Illustration of Adroit environments used in Sec. 4 based on OpenAI Gym [8] and D4RL [19]. "], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "1. Pen. Pen is a locomotion environment where the agent needs to control a robotic hand to manipulate a pen, such that its orientation matches the target. It has a 24-dimensional action space, each of which controls a joint on the wrist or fingers. The state space is 45-dimensional, which contains the pose of the palm, the angular position of the joints, and the pose of the target and current pen. ", "page_idx": 23}, {"type": "text", "text": "2. Hammer. Hammer is an environment where the agent needs to control a robotic hand to pick up a hammer and use it to drive a nail into a board. The action space is 26-dimensional, each of which corresponds to a joint on the hand. The state space is 46-dimensional, which describes the angular position of the fingers, the pose of the palm, and the status of hammer and nail.   \n3. Door. In the door environment, the agent needs to use a robotic hand to open a door by undoing the latch and swinging it. The environment has a 28-dimensional action space, which are the absolute angular positions of the hand joints. It also has 39-dimensional observation space which describes each joint, the pose of the palm, and the door with its latch.   \n4. Relocate. In the relocate environment, the agent needs to control a robotic hand to move a ball from its initial location towards a goal, both of which are randomized in the environment. The environment has a 30-dimensional action space which describes the angular position of the joints on the hand, and a 39-dimensional space which describes the hand as well as the ball and target. ", "page_idx": 23}, {"type": "table", "img_path": "5l5bhYexYO/tmp/affe0491f35f3201aca3051155576faaea75fdd13fc3d0ae622ebfae8fd24d8f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "Datasets. For each of the four environments, we test our method across three different qualities of datasets: expert, cloned and human, all of which provided by the DAPG [49] repository. The expert dataset is generated by a fine-tuned RL policy; the cloned dataset is collected from an imitation policy on the demonstrations from the other two datasets; and the human dataset is collected from human demonstrations. Tab. 4 shows the size and average reward of each dataset. ", "page_idx": 24}, {"type": "text", "text": "F.1.3 Antmaze Environments ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Environments. Antmaze is a more difficult version of Maze2D, where the agent controls a robotic ant instead of a point mass through the maze. It has a 27 dimensional-state space and a 8-dimensional action space. We test our method on six variants of antmaze: Umaze, Umaze-Diverse, Medium-Play, Medium-Diverse, Large-Play and Large-Diverse, where \u201cUmaze\u201d, \u201cMedium\u201d and \u201cLarge\u201d describes the size of the maze (see Fig. 16 for an illustration), and the \u201cDiverse\u201d and \u201cPlay\u201d describes the type of the dataset. More specifically, \u201cDiverse\u201d means that in the offline dataset, the starting point and the goal of the agent are randomly generated, while \u201cPlay\u201d means that the goal is generated by a handcraft design. \u201cUmaze\u201d without suffix is the simplest environment where both the starting point and the goal are fixed. ", "page_idx": 24}, {"type": "image", "img_path": "5l5bhYexYO/tmp/9698c334d378a4582e63b96d06e7d4fbd21466f7732ca88ad9011bc4941d9561.jpg", "img_caption": ["Figure 16: Illustration of mazes in antmaze and maze2D environment, where the red point is the goal and the green point is the current location of the agent. "], "img_footnote": ["Table 4: The size and the average and standard deviation of the normalized reward of the Adroit datasets from D4RL [19] used in our experiments. "], "page_idx": 24}, {"type": "text", "text": "Datasets. Similar to Adroit and MuJoCo, we test our method on datasets provided by D4RL. Tab. 5 shows the size and normalized reward of each dataset. Note, following IQL [28] and CQL [29], we conduct reward shaping: subtracting from all rewards in the dataset and environment the value 1 during training of both our method and baselines to provide denser reward signal for all antmaze environments. However, we still count original sparse reward when comparing the performance. ", "page_idx": 24}, {"type": "text", "text": "F.1.4 MuJoCo ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Environments. We test our method on four widely used environments: Hopper, Halfcheetah, Walker2d and Ant. Fig. 17 shows an illustration of the four environments. ", "page_idx": 24}, {"type": "table", "img_path": "5l5bhYexYO/tmp/3e9b43af4940ef53f7981b7769b6925a3f376c6c63987fcdcc9a622e3ae84488.jpg", "table_caption": [], "table_footnote": [], "page_idx": 25}, {"type": "image", "img_path": "5l5bhYexYO/tmp/7e7be546b1a10892af8f99abe78845a3edb6d173894a2a7cb47ddf61ee1e8056.jpg", "img_caption": ["Figure 17: Illustration of MuJoCo environments used in Sec. 4 based on OpenAI Gym [8] and D4RL [19]. "], "img_footnote": ["Table 5: The size and the average and standard deviation of the normalized reward of the Antmaze datasets from D4RL [19] used in our experiments. "], "page_idx": 25}, {"type": "text", "text": "1. Hopper. Hopper is a locomotion task on a 2D vertical plane, where the agent manipulates a single-legged robot to hop forward. Its state is 11-dimensional, which describes the angle and velocity for the robot\u2019s joints. Its action is 3-dimensional, which corresponds to the torques applied on the three joints for the current time step respectively.   \n2. Halfcheetah. Halfcheetah is also a 2D environment which requires the agent to control a cheetah-like robot to run forward. The states are 17-dimensional, containing the coordinate and velocity of the joints The actions are 6-dimensional, which control the torques on the joints of the robot.   \n3. Ant. In Ant, the agent controls a four-legged 8-DoF robotic ant to walk in a 3D environment and tries to move forward. It has a 111-dimensional state space describing the coordinates and velocities of the joints.   \n4. Walker2d. Walker2d is a 2D environment in which the agent needs to manipulate a 8-DoF two-legged robot to walk forward under the agent\u2019s control. Its state space is 27-dimensional. ", "page_idx": 25}, {"type": "text", "text": "Datasets. We test our method across three different qualities of datasets: medium, medium-replay and random. The medium dataset contains trajectories collected by an agent trained with RL, but early-stopped at medium-level performance. The medium-replay dataset is the collection of trajectories sampled in the training process of the agent mentioned above. The random dataset contains trajectories collected by an agent with random policy. Tab. 6 shows the size and normalized reward of each dataset. ", "page_idx": 25}, {"type": "text", "text": "F.1.5 Maze2D Environments ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Environments. Maze2D is another set of D4RL environment, where the agent needs to control a point mass to navigate through a 2D maze and arrive at a fixed goal. It has a 4-dimensional state space describing its coordinate and velocity, and a 2-dimensional action describing its acceleration. The reward is determined by its current distance to the goal. We test our method on four variants of maze: Open, Umaze, Medium and Large with increasing difficulty. The map of each maze is illustrated in Fig. 16. Maze2D environment is tested in Sec. G.2. ", "page_idx": 25}, {"type": "text", "text": "Datasets. We again test our method on datasets provided by D4RL. Tab. 7 shows the size and normalizeed reward of each dataset. ", "page_idx": 25}, {"type": "table", "img_path": "5l5bhYexYO/tmp/a2ff08789e881173c8d4082ee6ca15fdaaad0f3b266d0138fb72f1d6f344f905.jpg", "table_caption": [], "table_footnote": ["Table 6: The size and the average and standard deviation of the normalized reward of the MuJoCo datasets from D4RL [19] used in our experiments. "], "page_idx": 26}, {"type": "table", "img_path": "5l5bhYexYO/tmp/b1e0a9a7cca01a0d62bf8fb081dcad28618fd66d27fc0902877d7f5696edc074.jpg", "table_caption": [], "table_footnote": ["Table 7: The size and the average and standard deviation of the normalized reward of the Maze2D datasets from D4RL [19] used in our experiments. "], "page_idx": 26}, {"type": "text", "text": "F.2 Hyperparameters ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "F.2.1 Single-State MDP ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "For all networks, we use a simple MDP with two hidden layers of width 128, and ReLU [1] as activation function. We add a Tanh activation function to limit the output for ODT and the actor of DDPG to $[-1,1]$ . For both methods, we use Adam [27] as the optimizer, and the learning rate is set to $10^{-3}$ . We pretrain 5 epochs on offilne data (20 gradient steps) and 16 epochs for online finetuning, with a batch size of 32 for gradient update and collect 64 new rollout states for each epoch (thus we train $2n+4$ steps for the $n$ -th online finetuning epoch). $\\mathrm{RTG}_{\\mathrm{eval}}$ is set at 1, which serves as the (constant) input for ODT rollout and DDPG actor. Both DDPG and ODT uses deterministic actor with an exploration noise uniform in $\\left[-0.01,0.01\\right]$ during online rollouts. ", "page_idx": 26}, {"type": "text", "text": "F.2.2 Other Experiments ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Tab. 8 summarizes hyperparameters that are common across all environments, and Tab. 9 summarizes hyperparameters that are different across environments. For environments that exist in ODT [74], we follow the hyperparameters from ODT medium environments. We did not use positional embedding as suggested by ODT [74]. Specially, for antmaze, we remove most (all but 10) 1-step trajectories, because the size of the replay buffer for decision transformers is controlled by the number of trajectories, and antmaze dataset contains a large number of 1-step trajectories due to its data generation mechanism (immediately terminate an episode when the agent is close to the goal, but do not reset the agent location). Also, we add Layernorm [4] after each hidden layer of the critic for Adroit, Maze and Antmaze environments, according to Yue et al. [71]\u2019s advice. We found that such practice stabilizes the training process (see Sec. G.5 for ablation). ", "page_idx": 26}, {"type": "text", "text": "For ODT and TD3 baseline, we use the same code as our $\\mathrm{TD3+ODT},$ , while setting coefficients for RL and supervised gradients accordingly. For PDT baseline, we use the default hyperparameter in PDT paper, and pretrain PDT for 40K steps for all experiments. For $\\mathrm{TD3+BC}$ and IQL, we use the default hyperparameter in their codebase, and pretrain them for 1M steps for all experiments (remaining the same as that in the codebase). ", "page_idx": 26}, {"type": "table", "img_path": "5l5bhYexYO/tmp/e5d76f5726e0bd019e8f73d379e2f48093785d5c1f4134d7cad97b55d6cd8c1b.jpg", "table_caption": [], "table_footnote": ["Table 8: The common hyperparameters across all environments used in our experiments. "], "page_idx": 27}, {"type": "table", "img_path": "5l5bhYexYO/tmp/88d8a13904d8df5b614ce864e409c3fc77cb04af99fdef086a92ce1067163465.jpg", "table_caption": [], "table_footnote": ["Table 9: Environment-specific hyperparameters, where $\\overline{{T_{\\mathrm{train}}}}$ and $\\overline{{T_{\\mathrm{eval}}}}$ stands for training and evaluation context length, $\\mathrm{RTG}_{\\mathrm{eval}}$ and $\\mathrm{RTG}_{\\mathrm{online}}$ represents RTG during evaluation and online rollout respectively, $\\alpha$ is the coefficient for RL gradient, $\\gamma$ is the discount factor, $l r_{c}$ is the critic learning rate, and $l r_{a}$ is the actor learning rate. Buffer size is counted in the number of trajectories. Note RTGs of antmaze have been modified according to our reward shaping. "], "page_idx": 27}, {"type": "text", "text": "G More Results ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "G.1 Delayed Reward ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Though we have tested MuJoCo environments in Sec. 4, it is worth noting that many offline RL algorithms have addressed the MuJoCo benchmark quite well [28, 23]. Thus, we also tested settings where RL struggles to obtain good performance to further analyze the performance of using RL gradients for decision transformers. ", "page_idx": 27}, {"type": "text", "text": "Environment and Experimental Setup. In this experiment, we use the same experiment and dataset as in Sec. 4 except for one major difference: the rewards are not given immediately after each step. Instead, the cumulative reward during a short period of $M$ steps is given only at the end of the period, while the rewards observed by the agents within a period are all zero. We adopt such a setting from prior influential work [43], which creates a sparse-reward setting where RL algorithms struggle. We test $M=5$ in this experiment. ", "page_idx": 27}, {"type": "text", "text": "Results. We use the same baselines as that in Sec. 4; Tab. 10 summarizes the performance of each method. Generally, DT with TD3 gradient still works very well, much better than ODT. While $\\mathrm{TD3+BC}$ works well in several scenarios, it struggles on random environments. See Fig. 18 for reward curves. ", "page_idx": 27}, {"type": "table", "img_path": "5l5bhYexYO/tmp/d2bbd14f27fb7c5460742d8c9bfd56892a7fd2b64cae4b53db04654b8f715f9e.jpg", "table_caption": [], "table_footnote": ["Table 10: Average reward for each method in MuJoCo Environments before and after online finetuning with delayed rewards. To save space, the name of the environments and datasets are compressed, where Ho=Hopper, $\\mathrm{Ha}{=}$ HalfCheetah, $\\mathrm{{Wa}=}$ Walker2d, $\\scriptstyle\\mathrm{An}=\\mathrm{Ant}$ for the environment, and $\\mathbf{M}\\!=$ Medium, MR $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=$ Medium-Replay, $\\mathbf{R}{=}$ Random for the dataset. The format is \"final(+increase)\". The best result for each setting is highlighted in bold font, and any result $>90\\%$ of the best performance is underlined. "], "page_idx": 28}, {"type": "image", "img_path": "5l5bhYexYO/tmp/ef98ce360947afdcd9c597332a5353d9aee4941eb8f6c4038f6d4e470c3b127a.jpg", "img_caption": ["Figure 18: Reward curves for MuJoCo environments with delayed reward. "], "img_footnote": [], "page_idx": 28}, {"type": "text", "text": "", "page_idx": 28}, {"type": "text", "text": "G.2 Maze2D Environment ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "We test on navigation tasks in D4RL [19] where the agents need to control a pointmass through four different mazes: Open, Umaze, Medium and Large with different dataset respectively. Fig. 19 lists the performance of each method on Maze2D before and after online finetuning, and Tab. 11 summarizes the performance before and after online finetuning. The result shows that our method again significantly outperforms autoregressive-based algorithms such as ODT and PDT, which validates our motivation in Sec. 3.1. DDPG $^{+}$ ODT works similarly well as $\\mathrm{TD}3\\mathrm{+ODT}$ in this environment with simple state and action space. ", "page_idx": 28}, {"type": "table", "img_path": "5l5bhYexYO/tmp/b7e40455b7537dbd2556499599489b15fb2ce74e8dcf6970f94a7bddfef0966e.jpg", "table_caption": [], "table_footnote": ["Table 11: Average reward for each method in Maze2D Environments before and after online finetuning. Our method works slightly worse than IQL but better than all other baselines. "], "page_idx": 28}, {"type": "image", "img_path": "5l5bhYexYO/tmp/6c38d038b8448d9e3f3084a0eb1fc0b0e76241fe4f65e265a8eedfe537b02367.jpg", "img_caption": ["Figure 19: Reward curve for each method in Maze2D Environments. Again, autoregressive algorithms such as ODT and PDT does not perform well in this case. "], "img_footnote": [], "page_idx": 29}, {"type": "image", "img_path": "5l5bhYexYO/tmp/fa4496e01140e481add8898656e739a8034eda10b8cb8667a9c4d9f2a41ddcdd.jpg", "img_caption": ["Figure 20: The reward curves on hammer-cloned-v1 with different $T_{\\mathrm{train}}$ and $T_{\\mathrm{eval}}=1$ . While longer $T_{\\mathrm{train}}$ leads to faster convergence in this environment, runs with too long $T_{\\mathrm{train}}$ are also unstable. "], "img_footnote": [], "page_idx": 29}, {"type": "text", "text": "G.3 Ablations on training context length $T_{\\mathbf{train}}$ ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Fig. 20 shows the result of using different context lengths on hammer-cloned-v1 environment (in this experiment, we use $T_{\\mathrm{eval}}=1$ to demonstrate the effect of more different $T_{\\mathrm{train.}}$ ). It is shown from the experiment that the selection of $T_{\\mathrm{train}}$ needs to be balanced between more information taken into account and training stability; while longer $T_{\\mathrm{train}}$ brings faster convergence when growing from 1 to 5, the reward curves with $T_{\\mathrm{train}}\\in\\{10,20\\}$ oscillates more than that with $T_{\\mathrm{train}}=5$ . ", "page_idx": 29}, {"type": "text", "text": "G.4 Longer Training Process ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "In some environments, such as hopper-random-v2, walker2d-random-v2 and ant-random-v2, our proposed method still seems to be improving after 500K online samples. In Fig. 21, we show the finetuning result of our proposed method with more online transitions, which effectively shows that our method has greater potential in online finetuning when finetuned for more gradient steps. ", "page_idx": 29}, {"type": "text", "text": "G.5 The Effect of Layernorm ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "As we have mentioned in Sec. F.2, as suggested by Yue et al. [71], we apply Layernorm [4] to critic networks for environment other than MuJoCo for better stability in training. In our experiment, we found that it greatly stabilizes the critic on complicated environments such as Adroit, but makes online policy improvement less efficient on easier MuJoCo environments. Fig. 22 shows the performance and critic MSE loss comparison on some environments with and without layernorm; it is clearly shown that layernorm helps stabilizes online finetuning in some cases such as pen-cloned-v1, but hinders performance increase on other environments such as halfcheetah-medium-v2. ", "page_idx": 29}, {"type": "text", "text": "G.6 Recurrent Critic ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "As mentioned in Sec. 3.2, we use reflexive critics (i.e., critics that only take the current state nand action) to add RL gradients to decision transformer, and this creates an average effect among policies generated by different context lengths (see Sec. D in the appendix for detail). In this section, we explore recurrent critic by substituting the MLP critic using a LSTM, such that for a trajectory segment, the evaluation for the $i$ -th action $a_{i}$ is based on all state-action pairs $(s_{1},a_{1}),\\ldots,(s_{i-1},a_{i-1})$ and current state $s_{i}$ . As shown in Fig. 23, we found that recurrent critics are much less stable than reflexive critics, and the instability increases as the training context length $T_{\\mathrm{train}}$ grows; on the contrary, reflexive critic can well-handle the case where $T_{\\mathrm{train}}$ is long. ", "page_idx": 29}, {"type": "image", "img_path": "5l5bhYexYO/tmp/3300f0c7abc85b07663514b2c2c56be8d38c363f8cbfbb016832e3e3d9fcbc3c.jpg", "img_caption": ["Figure 21: The reward curves of our method when finetuned for more steps (we only report curves until the black line in Fig. 6). It is clearly shown that our method has greater potential for improvement when finetuned for more steps. "], "img_footnote": [], "page_idx": 30}, {"type": "image", "img_path": "5l5bhYexYO/tmp/dbfb568534a6a0527f7b85f9bf4666f60d11cf8af49e157e848e9654f3342cf1.jpg", "img_caption": ["Figure 22: The reward curve and critic MSE loss comparison between runs with and without layernorm. Layernorm effectively stabilizes online finetuning in pen-cloned-v1, but hinders performance increase in halfcheetah-medium-v2. "], "img_footnote": [], "page_idx": 30}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "G.7 Regularizer for Pure TD3 Gradients ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "In the Adroit environment results discussed in Sec. 4, we found that the baseline of ODT finetuned using pure TD3 gradients struggles due to catastrophic forgetting. Inspired by Wo\u0142czyk et al. [61], we test whether adding a KL regularizer can fix the forgetting problem. Though our policy is deterministic, we can approximately interpret the policy as Gaussian with a very small variance. Thus, a KL regularizer can be simply added using $\\bar{c_{0}}\\cdot\\|\\bar{a}-{a_{\\mathrm{old}}}\\|^{2}$ , where $a$ is the current action and $a_{\\mathrm{old}}$ is the action predicted by the pretrained policy. We set $c_{0}=0.05$ and test this method on the Adroit cloned and expert dataset. We illustrate the result in Fig. 24. We find that the KL regularizer effectively addresses the issue on expert environments for both TD3 and $\\mathrm{TD}3\\mathrm{+ODT}$ . But it can sometimes hinder the policy improvement of $\\mathrm{TD}3\\mathrm{+ODT}$ with low return during online finetuning. ", "page_idx": 30}, {"type": "image", "img_path": "5l5bhYexYO/tmp/c40c48faf2844dfaac993e3da032e74b2842f32c9520e32aefcfc3ddbba362da.jpg", "img_caption": ["Figure 23: The performance of reflexive critic vs. recurrent critic on hopper-medium-v2. It is clearly shown that recurrent critic is much harder to train, and its performance decreases as the training context length $T_{\\mathrm{train}}$ grows. "], "img_footnote": [], "page_idx": 30}, {"type": "image", "img_path": "5l5bhYexYO/tmp/c12547c055fd59f8b0171205b5d8f21e4a3fe7d057fb16138fbf471fac026e58.jpg", "img_caption": ["Figure 24: The result of ODT with better exploration (only in cloned dataset) and TD3/TD3 $^{\\cdot+}$ ODT forgetting mitigation. The result shows that 1) ODT with curriculum RTG does not work; 2) even with exploration supported by an oracle, ODT can still fail on some environments such as hammer; 3) JSRL with the pretrained policy does not work for forgetting mitigation; 4) KL regularizer effectively addresses the issue on expert environments for both TD3 and $\\mathrm{TD3+ODT}$ , but it can hinder the improvement of $\\mathrm{TD}3\\mathrm{+ODT}$ with low return. "], "img_footnote": [], "page_idx": 31}, {"type": "text", "text": "G.8 Other possible exploration improvement techniques ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "In Sec. 3.1, we state that ODT cannot explore the high-RTG region when pretrained with low-quality offline data, and we ran a simple experiment to verify this (Fig. 2). In this section, we test two potential alternatives for addressing the exploration problem: JSRL [59] and curriculum learning. ", "page_idx": 31}, {"type": "text", "text": "For JSRL, an expert policy is used for the first $n$ steps in an episode, before ODT takes over. We set $n=100$ ( $100\\%$ max episode length for adroit pen, $50\\%$ max episode length for other adroit environments) initially, and apply an exponential decay rate of 0.99 for every episode. We test two settings of JSRL: the expert policy being the offline pretrained policy, and the expert policy being oracle, i.e., an IQL policy trained on the Adroit expert dataset. ", "page_idx": 31}, {"type": "text", "text": "For curriculum learning, we use ODT with a gradually increasing target RTG with the current RTG for rollouts being $\\mathrm{RTG}_{\\mathrm{eval}}^{-}-0.99^{N}\\mathrm{(RTG_{eval}-R T G_{d a t a})}$ . Here, $N$ is the number of episodes sampled in online stage, and $\\mathbf{RTG}_{\\mathrm{data}}$ is the average RTG of the offline dataset. ", "page_idx": 31}, {"type": "text", "text": "Results are summarized in Fig. 24. We found that curriculum RTG does not work, probably because the task is too hard and cannot be improved by random exploration without gradient guidance. Further, even with oracle exploration, ODT is not guaranteed to succeed: it fails on the hammer environment where $\\mathrm{TD}3\\mathrm{+ODT}$ succeeds, probably because of insufficient expert-level data and an inability to improve with random exploration. ", "page_idx": 31}, {"type": "text", "text": "G.9 Ablations on the Architecture ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "In this section, we further examine the source of the performance gain of our method compared to $\\mathrm{TD3+BC}$ . There are two key differences as stated in Sec. 3.2: The architecture and RL via Supervised (RvS) learning [18]. We can hence assess two more baselines: $\\mathrm{TD3+BC}$ with our transformer architecture and $\\mathrm{TD}3\\mathrm{+RvS}$ using $\\mathrm{TD3+BC}$ \u2019s architecture. We present the ablation result on the Adroit cloned environment in Fig. 25. The result shows that only $\\mathrm{TD3+BC}$ with our architecture works (albeit still worse than our method). We hypothesize that this is because a simple MLP is hard to model the complicated policy which takes both RTG and state into account. ", "page_idx": 31}, {"type": "text", "text": "To further assess if simply adding more layers to the MLP works, we conduct an ablation on the number of layers for $\\mathrm{TD}3\\mathrm{+}\\mathrm{Rv}\\mathrm{S}$ . The result is illustrated in Fig. 26. It shows that simply adding a few layers to the MLP does not aid performance. We speculate that it is probably the transformer architecture that helps modeling the state-and-RTG-conditioned policy. ", "page_idx": 31}, {"type": "image", "img_path": "5l5bhYexYO/tmp/af36a071a7a5af89ca9f34e1348ed0432dd314fa94e451255e9f272bbe2ef3c7.jpg", "img_caption": [], "img_footnote": [], "page_idx": 32}, {"type": "text", "text": "Figure 25: The result of ODT and $\\mathrm{TD3+BC}$ ablations ${}\\mathrm{TD}3{+}\\mathrm{RVS}$ , $\\scriptstyle\\mathrm{{DDPG}+\\mathrm{{ODT}}}$ , $\\mathrm{TD3+BC}$ with our architecture and curriculum RTG for ODT) on Adroit environments. The result shows that only $\\mathrm{TD3+BC}$ with our architecture works. However, it remains worse than our method. ", "page_idx": 32}, {"type": "image", "img_path": "5l5bhYexYO/tmp/ddcd72aae907a1ebadc88b87172b41ff91aba7e5e4e6272db62954dac57a3a50.jpg", "img_caption": ["Figure 26: Results of adding more layers to $\\mathrm{TD}3\\mathrm{+}\\mathrm{Rv}\\mathrm{S}$ . The result shows that simply adding MLP layers does not help $\\mathrm{TD}3\\mathrm{+}\\mathrm{Rv}\\mathrm{S}$ match the performance of ODT and ${\\mathrm{TD3+ODT}}$ . "], "img_footnote": [], "page_idx": 32}, {"type": "text", "text": "H Computational Resources ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "We conduct all experiments with a single NVIDIA RTX 2080Ti GPU on an Ubuntu 18.04 server equipped with 72 Intel Xeon Gold 6254 CPUs $\\ @\\ 3.10\\mathrm{GHz}$ . Mujoco experiments takes about $6-8$ hours, and the bottleneck is the gradient update; about $50\\%$ time is spent on backpropagation and update of parameters. Our critic appended to ODT only takes up about $20\\%$ time to train, in which $9\\bar{0}\\%$ of the critic training time is spent on decision transformer inference to get action for \u201cnext state\u201d. For the actor, the training overhead of our method is negligible since it only contains an MLP critic inference to get the Q-value. Therefore, overall our method only uses $20\\%$ extra time compared to ODT for training, but attains much better results. ", "page_idx": 32}, {"type": "text", "text": "I Dataset and Algorithm Licenses ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Our code is developed upon multiple algorithm repositories and environment testbeds. ", "page_idx": 32}, {"type": "text", "text": "Algorithm Repositories. We implement our method on the basis of online decision transformer repository, which has a CC BY-NC 4.0 license. We also refer to IQL [28], PDT [64] and $\\mathrm{TD3+BC}$ [20] repository when running baselines, all of which have MIT licenses. ", "page_idx": 32}, {"type": "text", "text": "Environment Testbeds. We utilize OpenAI gym [8], MuJoCo [58], and D4RL [19] as testbed, which have an MIT license, an Apache-2.0 license, and an Apache-2.0 license respectively. ", "page_idx": 32}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: Please refer to the abstract and introduction. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 33}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: See Sec. 6. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 33}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: See Appendix E. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 34}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: See Appendix F. Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 34}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 35}, {"type": "text", "text": "Justification: See https://github.com/KaiYan289/RL_as_Vitamin_for_Online_ Decision_Transformers for the code. The data is available in public D4RL dataset. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 35}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 35}, {"type": "text", "text": "Justification: See Appendix F. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 35}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Justification: See Sec. 4 and Appendix G. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 35}, {"type": "text", "text": "", "page_idx": 36}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: See Appendix H. ", "page_idx": 36}, {"type": "text", "text": "Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 36}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: Our research in the paper fully conforms with the NeurIPS Code of Ethics. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 36}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Justification: See Appendix A. ", "page_idx": 36}, {"type": "text", "text": "Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 36}, {"type": "text", "text": "", "page_idx": 37}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 37}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 37}, {"type": "text", "text": "Justification: The paper poses no such risks. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 37}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 37}, {"type": "text", "text": "Justification: See Appendix I. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 37}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 38}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 38}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 38}, {"type": "text", "text": "Justification: We attach our code in the supplementary material, and has published it on Github (https://github.com/KaiYan289/RL_as_Vitamin_for_Online_ Decision_Transformers). ", "page_idx": 38}, {"type": "text", "text": "Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 38}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 38}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 38}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 38}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 38}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 38}]