[{"figure_path": "oBvaZJ1C71/figures/figures_0_1.jpg", "caption": "Figure 1: GAVEL overview. Left: a dataset of games in the Ludii game description language is used to train a code large language model using the fill-in-the-middle objective on parenthetical expressions. Right: the trained code language model can then be used as the mutation operator for evolutionary quality-diversity optimization with the MAP-Elites algorithm. Fitness is determined with a suite of automatic evaluation metrics, and the Ludii game description language also affords a large number of semantic game \"concepts\" that are used to determine game novelty.", "description": "This figure shows a schematic overview of the GAVEL system.  The left side illustrates the training process: a dataset of games in the Ludii language is used to train a large language model (LLM) using a fill-in-the-middle approach. This model learns to modify game rules expressed as code. The right side shows how the trained LLM is used within an evolutionary algorithm (MAP-Elites). The LLM acts as a mutation operator, generating new game variants which are then evaluated based on automatic metrics and novelty scores (Ludii concepts).", "section": "1 Introduction"}, {"figure_path": "oBvaZJ1C71/figures/figures_1_1.jpg", "caption": "Figure 1: GAVEL overview. Left: a dataset of games in the Ludii game description language is used to train a code large language model using the fill-in-the-middle objective on parenthetical expressions. Right: the trained code language model can then be used as the mutation operator for evolutionary quality-diversity optimization with the MAP-Elites algorithm. Fitness is determined with a suite of automatic evaluation metrics, and the Ludii game description language also affords a large number of semantic game \"concepts\" that are used to determine game novelty.", "description": "This figure illustrates the GAVEL system's architecture.  The left side shows how a dataset of games in the Ludii language is processed to train a code large language model. This model learns to fill in missing parts of game rule expressions. The right side shows how this trained model is used within an evolutionary algorithm (MAP-Elites) to generate new games. The fitness of these games, along with their novelty (as measured by Ludii concepts), guides the evolutionary process.", "section": "1 Introduction"}, {"figure_path": "oBvaZJ1C71/figures/figures_3_1.jpg", "caption": "Figure 2: Left: the game of Havannah by Christian Freeling rendered in the Ludii game description language. Center: the same game as it appears in the training dataset, with functional references expanded and game / piece names replaced with abstract identifiers. Right: a variant of Havannah produced by GAVEL. Changes are highlighted in yellow.", "description": "This figure shows three versions of the game Havannah. The leftmost image displays the original game in Ludii's game description language. The middle image shows the same game but with function references expanded and game/piece names replaced with abstract identifiers to increase generality for the training dataset. The rightmost image is a variant of Havannah generated by GAVEL, highlighting the changes made by the model.", "section": "4 Methods"}, {"figure_path": "oBvaZJ1C71/figures/figures_6_1.jpg", "caption": "Figure 3: A visualization of the fitness of games generated by GAVEL over time. Starting from an initial archive of 14 games, GAVEL produced in this run 185 novel variations within 500 generations, of which 130 are playable and meet our minimal criteria. Further, 62 generated games occupy cells not covered by any game in the Ludii dataset and 29 of these games meet our minimal criteria.", "description": "This figure shows the evolution of the game fitness over 500 generations using the GAVEL method. It starts with 14 initial games and generates 185 novel variations, with a significant portion meeting the minimum quality criteria. Notably, a subset of these games explores regions of the game space not covered by existing games in the Ludii dataset.", "section": "Experiments"}, {"figure_path": "oBvaZJ1C71/figures/figures_8_1.jpg", "caption": "Figure 4: Example of play between MCTS agents in a game generated by GAVEL. The game is descended from Yavalath (an n-in-a-row style game) and combines a modification of its ending rules with the enclosure capture mechanics of Go. Search-based agents reach interesting and strategically deep game positions, hinting at its potential interest to human players as well.", "description": "This figure shows an example of a game generated by the GAVEL system, illustrating gameplay between two Monte Carlo Tree Search (MCTS) agents.  The game combines mechanics from Yavalath (a game where players try to get n pieces in a row) and Go (which includes an enclosure mechanic where surrounding your opponent's pieces removes them). The game demonstrates that GAVEL can create games with interesting and strategically complex situations.", "section": "Discussion and Limitations"}, {"figure_path": "oBvaZJ1C71/figures/figures_17_1.jpg", "caption": "Figure 2: Left: the game of Havannah by Christian Freeling rendered in the Ludii game description language. Center: the same game as it appears in the training dataset, with functional references expanded and game / piece names replaced with abstract identifiers. Right: a variant of Havannah produced by GAVEL. Changes are highlighted in yellow.", "description": "The figure shows three versions of the game Havannah: the original game in Ludii game description language, the processed version used in training (abstract identifiers are used), and a modified version generated by GAVEL. The differences between the original and the GAVEL-generated version are highlighted in yellow.", "section": "Methods"}, {"figure_path": "oBvaZJ1C71/figures/figures_19_1.jpg", "caption": "Figure 2: Left: the game of Havannah by Christian Freeling rendered in the Ludii game description language. Center: the same game as it appears in the training dataset, with functional references expanded and game / piece names replaced with abstract identifiers. Right: a variant of Havannah produced by GAVEL. Changes are highlighted in yellow.", "description": "This figure shows three versions of the game Havannah. The leftmost image displays the original game's code. The middle image shows the same game after preprocessing for the training dataset, where functional references are expanded, and game and piece names are replaced with abstract identifiers to increase generality. The rightmost image presents a variant of Havannah generated by GAVEL, highlighting the changes introduced by the model in yellow.", "section": "4 Methods"}, {"figure_path": "oBvaZJ1C71/figures/figures_20_1.jpg", "caption": "Figure 2: Left: the game of Havannah by Christian Freeling rendered in the Ludii game description language. Center: the same game as it appears in the training dataset, with functional references expanded and game / piece names replaced with abstract identifiers. Right: a variant of Havannah produced by GAVEL. Changes are highlighted in yellow.", "description": "This figure shows three versions of the game Havannah. The left shows the original game description in the Ludii language. The center shows the game after preprocessing for the training data, with functional references expanded and names replaced with abstract identifiers. The right shows a variant of the game generated by GAVEL, highlighting the changes made.", "section": "Methods"}]