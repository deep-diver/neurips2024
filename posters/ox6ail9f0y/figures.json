[{"figure_path": "oX6aIl9f0Y/figures/figures_23_1.jpg", "caption": "Algorithm 6: SVT(D, {qi}i\u2208[T], C, L, R, \u03c4)", "description": "Algorithm 6 is a subroutine used in Algorithm 7, which is the main algorithm for smooth functions.  This algorithm implements the sparse vector technique (SVT) to ensure differential privacy while handling heavy-tailed gradients. It takes as input a dataset D, a sequence of queries {qi}, a count threshold c, a query threshold L, a scale parameter R, and a truncation threshold \u03c4. The algorithm iteratively processes the queries, adding bounded Laplace noise, and if a query is below the threshold, outputs 1; otherwise, outputs T and increments a counter. The algorithm halts either when the counter reaches c or all queries are processed. The outputs, a sequence of 1s and Ts, indicating whether each query was below the threshold or not, are used to determine the algorithm's stability in Algorithm 7, enabling privacy.", "section": "C Fast Algorithms for Smooth Functions"}, {"figure_path": "oX6aIl9f0Y/figures/figures_24_1.jpg", "caption": "Algorithm 7: Localized-Clipped-DP-SGD(D, xo, \u03b7, c, \u03b5, \u03b4)", "description": "Algorithm 7 is a clipped DP-SGD algorithm which uses a localization framework to achieve near-optimal rates for heavy-tailed DP-SCO. The algorithm uses a combination of clipping, adding noise, and sparse vector techniques to ensure both privacy and utility.  The algorithm iteratively refines a solution by processing mini-batches of data, clipping gradients to control sensitivity and adding noise to ensure differential privacy.  A crucial component involves dynamically adjusting the clipping threshold to account for the heavy-tailed nature of the gradients.", "section": "C Fast Algorithms for Smooth Functions"}]