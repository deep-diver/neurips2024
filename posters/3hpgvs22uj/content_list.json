[{"type": "text", "text": "Adaptive $Q$ -Aid for Conditional Supervised Learning in Offline Reinforcement Learning ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Jeonghye ${\\bf K i m}^{1}$ , Suyoung Lee1, Woojun $\\mathbf{Kim^{2}}$ , Youngchul Sung1 1KAIST 2Carnegie Mellon University ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Offline reinforcement learning (RL) has progressed with return-conditioned supervised learning (RCSL), but its lack of stitching ability remains a limitation. We introduce $Q$ -Aided Conditional Supervised Learning (QCS), which effectively combines the stability of RCSL with the stitching capability of $Q$ -functions. By analyzing $Q$ -function over-generalization, which impairs stable stitching, QCS adaptively integrates $Q$ -aid into RCSL\u2019s loss function based on trajectory return. Empirical results show that QCS significantly outperforms RCSL and valuebased methods, consistently achieving or exceeding the maximum trajectory returns across diverse offline RL benchmarks. The project page is available at https://beanie00.com/publications/qcs. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Offline reinforcement learning (RL) is a vital framework for acquiring decision-making skills from fixed datasets, particularly when online interactions are impractical. This is especially relevant in fields such as robotics, autonomous driving, and healthcare, where the costs and risks of real-time experimentation are significant. ", "page_idx": 0}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/917e2aa5f08079858b2066ccc8093bbdec5c66157d9e2b10c45c84cfbf637876.jpg", "img_caption": ["Figure 1: Conceptual idea of QCS: Follow RCSL when learning from optimal trajectories where it predicts actions confidently but the $Q$ -function may stitch incorrectly. Conversely, refer to the $Q$ - function when learning from sub-optimal trajectories where RCSL is less certain but the $Q$ -function is likely accurate. "], "img_footnote": [], "page_idx": 0}, {"type": "text", "text": "A promising approach in offline RL is returnconditioned supervised learning (RCSL) [10, 12, 20]. By framing offline RL as sequence modeling tasks, RCSL allows an agent to leverage past experiences and condition on the target outcome, facilitating the generation of future actions that are likely to achieve desired outcomes. This method builds on recent advancements in super", "page_idx": 0}, {"type": "text", "text": "vised learning (SL) [41, 9, 11, 30], and thus benefits from the inherent stability and scalability of SL. However, RCSL is significantly limited by its lack of \u2018stitching ability\u2019, the ability to combine suboptimal trajectory segments to form better overall trajectories [13, 27, 53, 16, 7, 58]. As a result, its effectiveness is restricted to the best trajectories within the dataset. ", "page_idx": 0}, {"type": "text", "text": "Conversely, the $Q$ -function possesses the ability to stitch together multiple sub-optimal trajectories, dissecting and reassembling them into an optimal trajectory through dynamic programming. Therefore, to address the weakness of RCSL, prior works have attempted to enhance stitching ability through the $Q$ -function [53, 16]. However, these prior works employ the $Q$ -function as a conditioning factor for RCSL and do not fully leverage the $Q$ -function\u2019s stitching ability, resulting in either negligible performance improvements or even reduced performance. The primary challenge lies in the fact that utilizing the $Q$ -function through conditioning, without managing the conditions for stable $Q$ -guided stitching, can result in a sub-optimal algorithm. ", "page_idx": 0}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/13aa3e4e464812d9f675fe45110f2cea5d7851494083f0a07b4c92f24b9efabd.jpg", "img_caption": ["Figure 2: Mean normalized return in MuJoCo medium, medium-replay, medium-expert, and AntMaze large. The scores of RCSL, the value-based methods, and the combined methods represent the maximum mean performances within their respective groups. The full scores are in Section 6.2. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "In this work, we aim to fully synergize the stable and scalable learning framework of RCSL with the stitching ability of the $Q$ -function. To effectively utilize the $Q$ -function, it is crucial to identify when it can benefti RCSL and to integrate its assistance, termed $Q$ -aid. Our contributions to achieving the effective utilization of $Q$ -aid in RCSL are as follows: (1) We discovered that in-sample $Q$ -learning on an expert dataset, which predominantly consists of optimal actions with similar $Q$ -values within a constrained action range, causes the $Q$ -function to receive improper learning signals and become over-generalized. (2) To prevent errors from this $Q$ -generalization and to incorporate stitching ability within RCSL\u2019s stable framework, we propose $Q$ -Aided Conditional Supervised Learning (QCS), which adaptively integrates $Q$ -aid into the RCSL\u2019s loss function based on trajectory returns. ", "page_idx": 1}, {"type": "text", "text": "Despite its simplicity, the effectiveness of QCS is empirically demonstrated across offline RL benchmarks, showing significant advancements over existing state-of-the-art (SOTA) methods, including both RCSL and value-based methods. Especially, QCS surpasses the maximal dataset trajectory return across diverse MuJoCo datasets, under varying degrees of sub-optimality, as shown in Fig. 2. Furthermore, QCS significantly outperforms the baseline methods in the challenging AntMaze Large environment. This notable achievement underscores the practical effectiveness of QCS in offline RL. ", "page_idx": 1}, {"type": "text", "text": "2 Preliminaries ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "We consider a Markov Decision Process (MDP) [6], described as a tuple $\\mathcal{M}=(\\mathcal{S},\\mathcal{A},\\mathcal{P},\\rho_{0},r,\\gamma)$ . $\\boldsymbol{S}$ is the state space, and $\\boldsymbol{\\mathcal{A}}$ is the action space. $\\mathcal{P}:S\\times\\mathcal{A}\\mapsto\\Delta(S)$ is the transition dynamics, $\\rho_{0}\\in\\Delta(S)$ is the initial state distribution, $r:S\\times A\\mapsto\\mathbb{R}$ is the reward function, and $\\gamma\\in[0,1)$ is a discount factor. The objective of offline RL is to learn a policy $\\pi(\\cdot|s)$ that maximizes the expected cumulative discounted reward, $\\begin{array}{r l}{\\mathbb{E}_{a_{t}\\sim\\pi\\left(\\cdot\\vert s_{t}\\right),s_{t+1}\\sim\\mathcal{P}\\left(\\cdot\\vert s_{t},a_{t}\\right)}\\left[\\sum_{t=0}^{\\infty}\\gamma^{t}r\\left(s_{t},a_{t}\\right)\\right]}&{{}}\\end{array}$ , using a static dataset $\\mathcal{D}=\\{\\tau^{(i)}\\}_{i=1}^{D}$ comprising a set of traje\u223cct(o\u22c5\u2223rie)s $\\tau^{(i)}$ .P (E\u22c5\u2223ach t)raject=ory $\\tau^{(i)}$ consists of transitions over a time horizo=n $T$ , collected from an unknown behavior policy $\\beta$ . ", "page_idx": 1}, {"type": "text", "text": "2.1 Value-Based Offline Reinforcement Learning ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Offilne RL effectively employs off-policy RL techniques, allowing a divergence between the behavior policy $\\beta$ used for data acquisition and the target policy $\\pi$ being optimized [25, 14, 23]. Off-policy methods primarily utilize the $Q$ -function, which is learned through temporal-difference (TD) bootstrapping. In actor-critic off-policy approaches, both the $Q$ -function $\\hat{Q}_{\\theta}$ and the policy $\\hat{\\pi}$ are updated iteratively. This process can cause a shift in the action distribution, leading $\\hat{\\pi}$ to select actions that significantly deviate from those in the training dataset. These deviations can inadvertently result in overestimation errors, especially for out-of-distribution (OOD) actions, as offilne RL cannot correct incorrect $Q$ -values through interactions with the environment. ", "page_idx": 1}, {"type": "text", "text": "Unlike actor-critic methods, in-sample learning methods use only in-sample actions to learn the optimal $Q$ -function, thereby preventing the querying of OOD action Q-values during training [34, 32, 23, 51]. Implicit $Q$ -Learning (IQL) [23] is a representative in-sample learning method. It utilizes expectile regression, defined as ${\\mathit{L}}_{\\mathit{\\eta}}^{2}(u)\\;=\\;|\\eta-{\\mathit{\\dot{\\mathbb{1}}}}(u\\;<\\;0)|u^{2}$ where $\\eta\\,\\in\\,[0.5,\\bar{1})$ , to formulate the asymmetrical loss function for the value network $V_{\\psi}$ . Through this loss, $V_{\\psi}$ can approximate the implicit maximum of the TD target, $\\operatorname*{max}_{a}Q_{\\hat{\\theta}}(s,a)$ . Formally, for a parameterized critic $Q_{\\theta}(s,a)$ with a target critic $Q_{\\hat{\\theta}}(s,a)$ , the value loss function is given by ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "equation", "text": "$$\n\\mathcal{L}_{V}(\\psi)=\\underset{(s,a)\\sim\\mathcal{D}}{\\mathbb{E}}\\left[L_{\\eta}^{2}\\left(Q_{\\hat{\\theta}}(s,a)-V_{\\psi}(s)\\right)\\right].\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Intuitively, this loss function suggests placing more emphasis when $Q_{\\hat{\\theta}}$ is greater than $V_{\\psi}(s)$ . Subsequently, the critic network $Q_{\\theta}$ is updated by treating the learned $V_{\\psi}\\!\\left(s^{\\prime}\\right)$ as $\\mathrm{max}_{a^{\\prime}\\in\\mathcal{D}(s^{\\prime})}\\,Q_{\\hat{\\theta}}(s^{\\prime},a^{\\prime})$ , where $\\mathcal{D}(\\boldsymbol{s}^{\\prime})$ denotes the in-sample actions for the given state $s^{\\prime}$ , i.e., $(s^{\\prime},a^{\\prime})\\in\\mathcal{D}$ : ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\mathcal{L}_{Q}(\\theta)=\\underset{(s,a,s^{\\prime})\\sim\\mathcal{D}}{\\mathbb{E}}\\left[\\left(r(s,a)+\\gamma V_{\\psi}(s^{\\prime})-Q_{\\theta}(s,a)\\right)^{2}\\right].\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "We use IQL to pretrain the $Q$ -function used to aid RCSL, as we found that this method, without conservatism during $Q$ -function training, can provide good stitching ability when well integrated. A comparison with a different $Q$ -learning method, CQL [25], is provided in Appendix H.1. ", "page_idx": 2}, {"type": "text", "text": "2.2 Return-Conditioned Supervised Learning (RCSL) ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "RCSL is an emerging approach to addressing challenges in offline RL. It focuses on learning the action distribution conditioned on return-to-go (RTG), defined as the cumulative sum of future rewards $\\begin{array}{r}{\\hat{R}_{t}\\,=\\,\\sum_{t^{\\prime}=t}^{T}r_{t^{\\prime}}}\\end{array}$ through supervised learning (SL) [10, 12, 20]. Due to the stability of SL, RCSL is capable o=f learning decision-making by extracting and mimicking useful information from the dataset. In particular, Decision Transformer (DT) [10] applies the Transformer architecture [41] to reframe the RL as a sequence modeling problem. It constructs input sequences to the Transformer by using sub-trajectories, each spanning $K$ timesteps and comprising RTGs, states, and actions: $\\tau_{t-K+1:t}=\\big(\\hat{R}_{t-K+1},s_{t-K+1},a_{t-K+1},...,\\hat{R}_{t-1},s_{t-1},a_{t-1},\\hat{R}_{t},s_{t}\\big)$ . The model is then trained to predict t\u2212he +ac\u2236tion $a_{t}$ \u2212bas+ed on\u2212 $\\tau_{t-K+1:t}$ . +Recently, \u2212Kim \u2212et al. \u2212[20] proposed Decision ConvFormer (DC) to simplify the attention mod\u2212ule+ o\u2236f DT and better model the local dependency in the dataset, yielding performance gains over DT with reduced complexity. These methods have shown effective planning capabilities, but they lack stitching ability, which causes difficulties with datasets that contain many sub-optimal trajectories. This will be discussed in more detail in Section 3.1. ", "page_idx": 2}, {"type": "text", "text": "2.3 Neural Tangent Kernel of $Q$ -Function ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "The Neural Tangent Kernel (NTK) [19] provides insightful analysis of function approximation errors of $Q$ -function, $Q_{\\theta}$ , especially those related to generalization. The NTK, denoted as $k_{\\theta}(\\bar{s},\\bar{a},s,a)$ , is defined as the inner product of two gradient vectors, $\\nabla_{\\theta}Q_{\\theta}(\\bar{s},\\bar{a})$ and $\\nabla_{\\theta}Q_{\\theta}(s,a)$ , i.e., $k_{\\theta}(\\bar{s},\\bar{a},s,a):=$ $\\nabla_{\\theta}Q_{\\theta}(\\bar{s},\\bar{a})^{\\top}\\nabla_{\\theta}Q_{\\theta}\\bar{(}s,a)$ . The NTK offers a valuable perspective on the impact of parameter updates in function approximation, particularly in gradient descent scenarios. It essentially measures the degree of influence a parameter update for one state-action pair $(s,a)$ exerts on another pair $({\\bar{s}},{\\bar{a}})$ . A high value of $k_{\\theta}(\\bar{s},\\bar{a},s,a)$ implies that a single update in the $Q_{\\theta}$ for the pair $(s,a)$ could lead to substantial changes for the pair $({\\bar{s}},{\\bar{a}})$ . We guide the readers to Appendix $\\mathrm{D}$ for a deeper understanding of the NTK. ", "page_idx": 2}, {"type": "text", "text": "3 When Is $Q$ -Aid Beneficial for RCSL? ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "When is it beneficial for RCSL to receive assistance from the $Q$ -function, denoted as $Q_{\\theta}$ , and how should this assistance be provided? To explore this, we trained two policies, RCSL policy and a max- $\\cdot Q$ policy that selects the best action according to $Q_{\\theta}$ , on two different quality datasets from D4RL [13] MuJoCo, comparing their performances in Table 1. Note that the performance is not directly linked to the policy\u2019s accuracy across all states; even if the agent accurately predicts actions in several states, errors in some states can lead to path deviations and accumulated errors, resulting in a test-time distribution shift and a lower trajectory return. However, these results can provide insight into when $Q$ -aid might be helpful. ", "page_idx": 2}, {"type": "text", "text": "For the RCSL algorithm, we used the Decision Transformer (DT) [10]. To train the max- $Q$ policy, we first trained the $Q_{\\theta}$ using the in-sample $Q$ -learning method outlined in Eqs. (1) and (2). Then, we extracted the max- $\\cdot Q$ policy to select the action that directly maximizes $Q_{\\theta}(s,\\cdot)$ for each state $s$ by using a 3-layer MLP and the loss function $\\mathcal{L}_{\\operatorname*{max}\\_Q}(\\phi)=\\mathbb{E}_{s\\sim\\mathcal{D}}\\left[-Q_{\\theta}\\left(s,\\operatorname*{max}\\!-\\!Q_{\\phi}\\!\\left(s\\right)\\right)\\right]$ . ", "page_idx": 2}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/b8ecbd8670178557d426aa92bb320698be1e402bf76c96cd2a0befbc9c1b61bd.jpg", "table_caption": ["Table 1: Performance comparison of DT and max- $Q$ on expert and medium-replay quality datasets in MuJoCo. "], "table_footnote": [], "page_idx": 3}, {"type": "text", "text": "Observing Table 1, we see that the dataset quality favoring RCSL contrasts with that benefiting the max- $\\cdot Q$ policy. RCSL tends to perform well by mimicking actions in high-return trajectory datasets [29, 31]. However, this method is less effective with datasets predominantly containing suboptimal trajectories, even though RTG conditioning helps predict actions that yield higher returns. On the other hand, the max- $Q$ policy excels with suboptimal datasets but shows notably poor results with optimal datasets. From these observations, a motivating question arises: \u201cWhy does the simple max- $Q$ policy outperforms RCSL on suboptimal datasets yet fails on optimal datasets? If so, how can we effectively combine the two methods to achieve optimal performance?\u201d ", "page_idx": 3}, {"type": "text", "text": "3.1 How Can Max- $Q$ Policy Surpass RCSL in Suboptimal Datasets? ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We present a toy example demonstrating the limitation of RCSL, as illustrated in Fig. 3. Suppose the dataset is composed of two sub-optimal trajectories. At the initial state $s^{1}$ , the agent has two options: the $\\uparrow$ action connected to trajectory 2 (the orange trajectory) with an RTG of 5, and the $\\rightarrow$ action connected to trajectory 1 (the purple trajectory) with an RTG of 6. RCSL makes the agent choose the $\\rightarrow$ action with a high RTG and follow the path of trajectory 1, which is not optimal. This example demonstrates that RCSL alone is insufficient for the agent to learn to assemble the parts of beneficial sub-trajectories. ", "page_idx": 3}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/ed6083d192502e1b5fa39d64aed43c765faaa73707147e725ba8f101361b01cb.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 3: An example demonstrating the limit of RCSL: The dataset consists of two trajectories, with a time limit of $T=3$ and a discount factor $\\gamma\\ =\\ 1$ . The black dashed arrow represents the optimal policy yielding a maximum return of 7. ", "page_idx": 3}, {"type": "text", "text": "In contrast, a $Q$ -function can develop stitching ability. Consider the example in Fig. 3 again. We can compute the $Q$ -values for the actions $\\uparrow$ and $\\rightarrow$ at state $s_{1}$ with dynamic programming: $Q(s^{1},\\uparrow)=3+\\operatorname*{max}\\left(Q(s^{2},\\to),Q(s^{2},\\searrow)\\right)=7,$ , $Q(s^{1},\\to)=1+\\operatorname*{max}\\left(Q(s^{3},\\to),Q(s^{3},\\ltimes)\\right)=6$ . ", "page_idx": 3}, {"type": "text", "text": "With the $Q$ -values, the agent will select the $\\uparrow$ action at $s^{1}$ and then the $\\rightarrow$ action at $s^{2}$ . Consequently, using the $Q$ -function, the agent can select the optimal action that yields the maximum return of 7. Therefore, integrating RCSL with $Q$ -function in situations with abundant sub-optimal trajectories can be beneficial for developing the stitching ability required for optimal decision-making. ", "page_idx": 3}, {"type": "text", "text": "3.2 Why Does Max- $Q$ Policy Struggle with Optimal Datasets? ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Despite the potential advantages of using $Q_{\\mathrm{{}}}$ -values, incorporating values from a learned $Q_{\\mathrm{{}}}$ -function, $Q_{\\theta}$ , to aid RCSL can introduce errors due to inaccuracies in learning. These inaccuracies are particularly significant when $Q_{\\theta}$ is learned from optimal trajectories. Suppose we have an optimal policy $\\pi^{*}$ . Optimal trajectories are visit logs containing actions performed by $\\pi^{*}$ , yielding the best $Q$ -value for a given state $s$ . Due to the stochasticity of $\\pi^{*}$ , multiple similar actions can be sampled from $\\pi^{*}$ , namely $a_{1}^{*},a_{2}^{*},\\ldots,a_{n(s)}^{*}\\;\\sim\\;\\pi^{*}(\\cdot|s)$ for a given state $s$ . In this case, we have $Q^{*}(s,a_{i}^{*})\\,\\approx\\,Q^{*}(s,a_{j}^{*})$ and $a_{i}^{*}\\;\\approx\\;a_{j}^{*}\\;\\;\\;\\;\\forall i,j\\;\\in\\;\\{1,2,...\\,,n(s)\\}$ due to the optimality of these actions. When learning $Q_{\\theta}$ from such limited information, where the values at the narrow action points are almost identical for each given state, it is observed that the learned $Q_{\\theta}(s,a)$ tends to be over-generalized to the OOD action region. This means that the nearly identical value at the in-sample actions $a_{1}^{*},a_{2}^{*},\\ldots,a_{n(s)}^{*}$ is extrapolated to OOD actions, yielding a nearly flat $Q$ -value over the entire action space for e(ac)h given state, i.e., $Q_{\\theta}(s,a_{00\\mathrm{D}})\\approx Q_{\\theta}(s,a_{1}^{*})$ with $Q_{\\theta}(s,a)$ being a function of $s$ only. This over-generalization makes $Q_{\\theta}$ noise-sensitive, potentially assigning high values to incorrect actions and causing state distribution shifts in the test phase, as shown in Fig. 7. ", "page_idx": 3}, {"type": "text", "text": "We present a simple experiment to verify that learning $Q_{\\theta}$ indeed induces over-generalization when trained on optimal trajectories. The experiment consists of an MDP with one-dimensional discrete states and actions, each divided into 500 bins. This environment simulates a car, where the state indicates the agent\u2019s position, ranging from -5 to 5, as illustrated in Fig. 4 (a). The action range is between -1 and 1, allowing the agent to move according to the direction and twice the magnitude of the action. The objective is to reach position 0, which grants a reward of 100, while larger actions incur penalties given as $-30\\cdot a^{2}$ . Due to its discrete nature, we can compute the true optimal $Q$ -values through value iteration [37], which is shown in the bottom row of Fig. 4 (a). ", "page_idx": 3}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/86a5faa63eb7b10ce9c2d9b235044d39ae16cedad4a7bf422a7059751b0f1b86.jpg", "img_caption": ["Figure 4: (a) the view of the environment and true $Q$ calculated through value iteration, (b) training datasets with color representing the true $Q$ for each sample, (c) $Q_{\\theta}$ learned through regression with a medium dataset (upper) and an expert dataset (bottom), (d) $Q_{\\theta}$ learned through IQL with a medium dataset (upper) and an expert dataset (bottom). "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "With this environment, we generated two datasets, medium and expert. The medium dataset consisted of actions varying within the range of $\\pm0.5$ perturbed from the optimal action determined by the true optimal $Q$ -values, while the expert dataset consisted of actions varying within the range of $\\pm0.05$ perturbed from the optimal action. (Refer to Fig. 4 (b)) We then adopted a 3-layer MLP as the structure of $Q_{\\theta}$ and performed regression to follow the true $Q$ -value at each sample point $(s,a)$ in the trajectories. Note that in-sample $Q$ -learning can essentially be regarded as regression with the target value obtained from bootstrapping. ", "page_idx": 4}, {"type": "text", "text": "The learned $Q_{\\theta}$ with the medium and expert datasets are shown in Fig. 4 (c). Indeed, the learned $Q_{\\theta}$ with the expert dataset, containing nearly-optimal actions, shows that the value is flat over the entire action space for each state. This means that the nearly identical value of in-sample expert actions with a small spread is projected to the entire action space for each state. In contrast, the learned $Q_{\\theta}$ with the medium dataset well estimates the true $Q$ -function. This is because the medium dataset has diverse actions with diverse values for each state that facilitate the regression process. We additionally present the results from $Q_{\\theta}$ obtained through IQL in Fig. 4 (d), which shows a similar trend to the results from regression. ", "page_idx": 4}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/24eb1a91627328135cc4f2f25381ddd5083f8bf11caccc5a83f371083825e25e.jpg", "img_caption": [], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "Figure 5: We present the estimated $Q_{\\theta}(s,\\bar{a})$ for $\\begin{array}{r l r}{\\bar{a}}&{{}\\in}&{A}\\end{array}$ and the normalized NTK $k_{\\theta}\\bar{(}s,\\bar{a},s,a_{\\mathrm{ref}})/\\|\\bar{\\nabla_{\\theta}}Q_{\\theta}(s,a_{\\mathrm{ref}})\\|_{2}^{2}$ across four datasets with a 1D action space for Inverted Double Pendulum and a 3D action space for Hopper. In these figures, we fix the state $s$ and the fixed reference action $a_{\\mathrm{ref}}$ at zero (marked as $\\star$ ), and sweep over all actions $\\bar{a}\\in\\mathcal{A}$ . For Hopper, we use axes for action dimensions and color to represent $Q$ -values in 3D plots. Additionally, in the NTK plot, we only include the high-NTK regions for values over 0.9. Refer to Appendix E for details. ", "page_idx": 4}, {"type": "text", "text": "The over-generalization tendency in $Q_{\\theta}$ with optimal trajectories is not limited to the simple experiment above but also applies to complex RL tasks. We analyze how $Q_{\\theta}(s,\\cdot)$ varies over the action space in the Gym Inverted Double Pendulum [8] and MuJoCo Hopper environments [39, 8] trained on expert and medium-quality datasets with IQL. The details of the analysis are in Appendix E. As depicted in the upper row of Fig. 5 (a) and (b), and on the left side of the upper row of (c) and (d), the expert dataset shows concentrated action distribution, while the medium dataset has a broader spread, as expected. The concentration and similarity of true $Q$ -values of the actions for a given state in the expert dataset cause over-generalization in $Q_{\\theta}(s,\\cdot)$ , yielding constant flat values across the entire action space. This is further supported by the results in Appendix E.2, which visualize the weights of the learned $Q$ -function. ", "page_idx": 5}, {"type": "text", "text": "For a deeper understanding of the over-generalization in $Q_{\\theta}$ , we analyze the gradient similarity, captured as the Neural Tangent Kernel (NTK), between an arbitrary action $\\bar{a}$ and the reference action $a_{\\mathrm{ref}}$ for a given state $s$ . A higher NTK value signifies that the gradient update of $Q_{\\theta}\\big(s,a_{\\mathrm{ref}}\\big)$ has a substantial impact on $Q_{\\theta}(s,\\bar{\\bar{a}})$ . This indicates that even when $a_{\\mathrm{ref}}$ and $\\bar{a}$ are dissimilar or unrelated actions, a high NTK value suggests that the $Q_{\\theta}$ network is misjudging the relationship between these actions and over-generalizing. In Fig. 5, $Q_{\\theta}$ trained with the expert dataset shows uniformly high normalized NTK values across actions, indicating that the gradient at one action equally affects all others. In contrast, $Q_{\\theta}$ trained with the medium dataset shows NTK values that are higher near the reference action and decrease with action distance, reflecting more precise generalization. This analysis reveals that datasets consisting of optimal trajectories exhibit more aggressive generalization, which can negatively impact the accuracy of the learned $Q$ -function in offline RL. ", "page_idx": 5}, {"type": "text", "text": "4 $Q$ -Aided Conditional Supervised Learning ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "According to Section 3, RCSL faces challenges with suboptimal datasets, whereas $Q_{\\theta}$ can effectively serve as a critic for stitching ability, favoring the use of $Q$ -aid. In contrast, in an optimal dataset, $Q_{\\theta}$ tends to over-generalize, leading to inaccuracies of learned $Q_{\\theta}$ , while RCSL excels by mimicking the optimal behavior without requiring external assistance. Recognizing this dynamic, it is crucial to integrate $Q$ -aid into RCSL adaptively. The following subsections explain how to effectively adjust the level of $Q$ -aid and facilitate the integration of the two methods, leading to the proposal of $Q$ -Aided Conditional Supervised Learning (QCS). ", "page_idx": 5}, {"type": "text", "text": "4.1 Controlling $Q$ -Aid Based on Trajectory Returns ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Given the complementary relationship, how can we adjust the degree of $Q$ -aid? Since RCSL\u2019s preference for mimicking datasets and the $Q$ -function\u2019s over-generalization issue is tied to trajectory optimality, we can apply varying degrees of $Q$ -aid based on the trajectory return for each subtrajectory in RCSL. Therefore, we set the degree of $Q$ -aid, denoted as the QCS weight $w(R(\\tau))$ for a trajectory $\\tau$ , as a continuous, monotone-decreasing function of the return of $\\tau,R(\\tau)$ , such that ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\forall\\tau_{1},\\tau_{2},\\,\\,\\,R(\\tau_{1})<R(\\tau_{2})\\Rightarrow w(R(\\tau_{1}))\\geq w(R(\\tau_{2})),\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where continuity is imposed for gradual impact change. Among various choices, we find that simple options such as linear decay are sufficient to produce good results, i.e., $w(R(\\tau))=\\lambda\\cdot(R^{*}-R(\\bar{\\tau}))$ with some $\\lambda>0$ , where $R^{*}$ represents the optimal return of the task. Practically, $R^{*}$ can be obtained from an expert dataset or from the maximum value in the dataset. For details on how to calculate $R^{*}$ , please refer to Appendix F. Note that $R(\\tau)$ differs from RTG $\\hat{R}_{t}$ which is the sum of future rewards after timestep $t$ and decreases as timestep $t$ goes, thereby failing to represent the trajectory\u2019s optimality accurately. ", "page_idx": 5}, {"type": "text", "text": "4.2 Integrating $Q$ -Aid into the RCSL Loss Function ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Instead of using the $Q$ -function as the conditioning factor for RCSL as in previous works, we propose a more explicit approach by integrating $Q.$ -assistance into the loss function and dynamically adjusting the degree of assistance based on Section 4.1. As a result, the overall policy loss is given as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\pi}^{\\mathrm{QCS}}(\\phi)=\\mathbb{E}_{\\tau\\sim\\mathcal{D}}\\left[\\frac{1}{K}\\sum_{j=0}^{K-1}\\underbrace{\\|a_{t+j}-\\pi_{\\phi}\\left(\\tau_{t:t+j}\\right)\\|_{2}^{2}}_{\\mathrm{RCSL}}-\\underbrace{\\lambda\\cdot\\left(R^{*}-R(\\tau)\\right)}_{\\mathrm{QCS~weight}}\\cdot\\underbrace{Q_{\\theta}^{\\mathrm{UL}}\\left(s_{t+j},\\pi_{\\phi}\\big(\\tau_{t:t+j}\\big)\\right)}_{Q\\mathrm{\\,Aid}}\\right],\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $Q_{\\theta}^{\\mathrm{IQL}}(\\cdot,\\cdot)$ denotes the fixed $Q$ -function pretrained with IQL. $R(\\tau)$ is the return of the entire trajectory $\\tau$ containing the sub-trajectory $\\tau_{t:t+K-1}$ . The overall input to the policy at time $t$ is the subtrajectory of context length $K$ starting from\u2236 t+im\u2212e $t$ , $\\tau_{t:t+K-1}=\\left(\\bar{\\hat{R}}_{t},s_{t},a_{t},\\ldots,\\hat{R}_{t+K-1},s_{t+K-1}\\right)\\subset\\tau.$ . ", "page_idx": 6}, {"type": "text", "text": "Our new loss function enables adaptive learning strategies depending on the trajectory\u2019s quality to which the subtrajectory belongs. For optimal trajectories, action selection follows RCSL. On the other hand, for suboptimal trajectories $\\tau$ with $\\bar{R(\\tau)}<R^{*}$ , the $Q$ -aid term kicks in and its impact increases as $R(\\tau)$ decreases. We describe the details of the QCS weight $w(R(\\tau))$ and the policy update with the loss function in Appendix J.2 and our full algorithm\u2019s pseudocode in Appendix A. ", "page_idx": 6}, {"type": "text", "text": "4.3 Implementation ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Base Architecture. For implementing $\\pi_{\\phi}$ , a general RCSL policy can be used. When $K\\,=\\,1$ , meaning only the current time step is considered to estimate the action, we use an MLP network. When $K\\geq2$ , we use a history-based policy network, such as DT [10] or DC [20]. ", "page_idx": 6}, {"type": "text", "text": "Conditioning. We consider two conditioning approaches as proposed by RvS [12]: one for tasks maximizing returns and the other for tasks aiming at reaching specific goals. For return-maximizing tasks, we employ RTG conditioning, and our algorithm is named QCS-R. For goal-reaching tasks, we additionally use subgoal conditioning, and our algorithm is named QCS-G. For subgoal selection, we randomly select a state that the agent will visit in the future. The ablations on conditioning are in Appendix H.2. ", "page_idx": 6}, {"type": "text", "text": "5 Related Work ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Prompting RCSL with Dynamic Programming. Recent studies have recognized the limitations of RCSL in stitching abilities [27, 7, 58]. Our work contributes to the ongoing efforts to imbue RCSL with this capability. Notably, $Q$ -learning Decision Transformer (QDT) [53] and Advantage Conditioned Transformer (ACT) [16] have proposed integrating dynamic programming into RCSL by modifying the RTG prompt to $Q.$ -value or advantage prompt. Our approach, QCS, parallels these efforts by leveraging dynamic programming for action guidance and trajectory stitching. However, unlike these methods, which implicitly incorporate dynamic programming through conditioning, QCS explicitly augments its loss function with the learned $Q$ -function. ", "page_idx": 6}, {"type": "text", "text": "Incorporating RCSL with Stitching Ability. In a distinct vein, recently proposed Critic-Guided Decision Transformer (CGDT) [43] identifies the gap between target RTG and expected returns of actions as key to RCSL\u2019s limited stitching. To mitigate this, it adjusts DT\u2019s output with the critic network\u2019s Monte-Carlo return predictions and target RTG. In contrast, QCS uses $Q$ -values learned through dynamic programming to guide actions, enhancing stitching ability explicitly. Another approach, the Elastic Decision Transformer (EDT) [49], recommends variable context lengths during inference, using longer contexts for optimal trajectories and shorter ones for sub-optimal trajectories to identify optimal paths better. QCS similarly adapts based on trajectory optimality but differentiates itself by modifying its learning approach during training, leveraging the complementary strengths of the $Q$ -function and RCSL. ", "page_idx": 6}, {"type": "text", "text": "Furthermore, POR [50] integrates imitation learning techniques with stitching ability by generating high-value states using additional networks and value functions. These states are then used as conditions for predicting actions. Unlike QCS, which focuses on action stitching, POR emphasizes state stitching, allowing agents to choose actions that lead to high-value states, albeit with the need for additional networks. By concentrating on action stitching, QCS can avoid the computational demands associated with high-dimensional state prediction. ", "page_idx": 6}, {"type": "text", "text": "State-Adaptive Balance Coefficient Regarding the sub-trajectory-adaptive weight used in QCS, FamO2O [42] employs state-adaptive weight coefficients to balance policy improvement and constraints in the offline-to-online RL framework. Although FamO2O is an offline-to-online method that incorporates additional online samples, we provide a performance comparison with this work in Appendix G.2 to further demonstrate the effectiveness of QCS. ", "page_idx": 6}, {"type": "text", "text": "6 Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In the experiment section, we conduct various experiments across different RL benchmarks to answer the following questions: ", "page_idx": 7}, {"type": "text", "text": "\u2022 How well does QCS perform in decision-making compared to prior SOTA methods across datasets of varying quality and tasks with diverse characteristics, especially those requiring stitching ability? \u2022 To what extent does the dynamic nature of QCS weights, informed by trajectory return, contribute to effective decision-making, and how robust are these dynamic weights to hyperparameters? \u2022 Can QCS effectively acquire stitching ability while preventing test-time distribution shift? ", "page_idx": 7}, {"type": "text", "text": "6.1 Experimental Setup ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Baseline Methods. To address a range of questions, we conduct a comprehensive benchmarking against 12 representative baselines that are state-of-the-art in each category. For the value-based category, we assess 4 methods: $\\mathrm{TD3+BC}$ [14], IQL [23], and CQL [25], SQL [52]. For RCSL, we assess 3 methods: DT [10], DC [20], RvS [12]. Additionally, we evaluate 5 advanced RCSL methods proposed to integrate stitching capabilities: QDT [53], EDT [49], CGDT [43], ACT [16], and POR [50]. For more details on the setup and the baselines, refer to Appendix B. ", "page_idx": 7}, {"type": "text", "text": "Benchmarks. We evaluated QCS against various baselines using datasets with diverse characteristics, including tasks focused on return maximization or goal-reaching, and those with dense or sparse rewards and varying sub-optimality levels. ", "page_idx": 7}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/7fd465d6aa12cc3c07daebdd92b23b4d41d37509d2fddc539b87994dcdf8a026.jpg", "img_caption": ["Figure 6: Views of tasks used in our experiments. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Our primary focus was on the D4RL [13] MuJoCo, AntMaze, and Adroit domains. The MuJoCo domain [39, 8] features several continuous locomotion tasks with dense rewards. We conducted experiments in three environments: Halfcheetah, Hopper, and Walker2d, utilizing three distinct v2 datasets\u2014medium, medium-replay, and medium-expert\u2014each representing different levels of data quality. AntMaze is a domain featuring goal-reaching environments with sparse rewards, encompassing variously sized and shaped maps. It is an ideal testing bed for evaluating an agent\u2019s capability to stitch trajectories and perform long-range planning. We conduct experiments using six v2 datasets: umaze, umaze-diverse, medium-play, medium-diverse, large-play, and large-diverse, where umaze, medium, and large indicate map sizes, and play and diverse refer to data collection strategies. The Adroit domain [35] comprises various tasks designed to evaluate the effectiveness of algorithms in high-dimensional robotic manipulation tasks. In our experiments, we utilize the human and cloned datasets for the pen task. ", "page_idx": 7}, {"type": "text", "text": "Performance results for the MuJoCo and AntMaze domains are presented in Table 2 and Table 3, while results for the Adroit domain are included in Appendix G. ", "page_idx": 7}, {"type": "text", "text": "Hyperparameters and Backbone Architecture. We adopted two sets of hyperparameters per domain to determine the gradient of the monotonic decreasing function $w(R(\\bar{\\tau}))$ . The detailed hyperparameters we used are provided in Appendix J, and the impact of $\\lambda$ is detailed in Appendix 6.3. Additionally, we implemented QCS based on DT, DC, and a simple MLP, and compared the performance of each. Detailed results for each architectural choice are provided in Appendix H.2. We observed that the DC-based approach performs best, although the performance gap is minor. ", "page_idx": 7}, {"type": "text", "text": "Evaluation Metric. In all evaluations of QCS, we assess the expert-normalized returns [13] of 10 episodes at each evaluation checkpoint (every $10^{3}$ gradient steps). Subsequently, we compute the running average of these normalized returns over ten consecutive checkpoints. We report the mean and standard deviations of the final scores across five random seeds. ", "page_idx": 7}, {"type": "text", "text": "6.2 Overall Performance ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Table 2: Performance of QCS and baselines in the MuJoCo domain. The dataset names are abbreviated as follows: medium to $\\mathbf{\\omega}^{\\star}\\mathbf{m}\\,^{\\star}$ , medium-replay to $\\cdot_{\\mathrm{m-r}^{\\circ}}$ , medium-expert to $\\cdot_{\\mathrm{m-e}^{\\prime}}$ . The boldface numbers denote the maximum score or comparable one among the algorithms. ", "page_idx": 8}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/ad5f639c4e06fc18f9c0adc065d1b8ca6a4036f0627ff5c33cf239f2a94caa3b.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Table 3: Performance of QCS and baselines in the AntMaze domain. The dataset names are abbreviated as follows: umaze to $\\mathbf{\\dot{u}}^{\\prime}$ , umaze-diverse to \u2018u-d\u2019, medium-play to $\\langle\\mathbf{m}{\\cdot}\\mathbf{p}^{\\prime}$ , medium-diverse to $\\leftarrow\\infty\\cdots$ , large-play to $\\mathbf{\\nabla}^{*}\\mathbf{l}{-}\\mathbf{p}^{\\prime}$ , and large-diverse to $\\mathbf{\\hat{\\Pi}}^{*}\\mathbf{l}{\\hat{\\mathbf{\\Pi}}}^{*}$ . The boldface numbers denote the maximum score or comparable one among the algorithms. ", "page_idx": 8}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/ea27c9756dba16909957542dc981c3df0f3e9cf6d232924e5fd05774cd26088b.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "As shown in Table 2 and Table 3, QCS significantly outperforms prior value-based methods, RCSL, and combined methods across the datasets. Specifically, QCS outperforms both IQL and DC, upon which it is based, across all datasets, unlike the contradictory results between RCSL and the max- $\\cdot Q$ policy shown in Table 1. This empirically confirms that QCS successfully combines the strengths of both RCSL and the $Q_{\\mathrm{{}}}$ -function. A particularly remarkable achievement of QCS is its ability to substantially improve efficiency in goal-reaching tasks, AntMaze, especially in Large environments, where prior RCSL methods exhibited notably low performance. This enhancement is largely attributed to the stitching ability introduced by the $Q$ -aid of QCS. These results underscore QCS\u2019s robustness and superiority in a wide array of offline RL contexts. The training curves for Tables 2 and 3 are shown in Appendix I, demonstrating stable learning curves across all datasets. ", "page_idx": 8}, {"type": "text", "text": "6.3 Ablation Studies ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "To further analyze how each design element influences performance, we conducted additional experiments. More ablation studies are detailed in Appendix H, including the use of $Q$ -function trained by CQL and the impact of base architecture and conditioning. ", "page_idx": 8}, {"type": "text", "text": "The Importance of Weights Relative to Trajectory Return. ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "To assess the impact of dynamically setting the QCS weight $w(R(\\tau))$ based on trajectory return, we compare our approach with a constant QCS weight, $w(R(\\tau))=c$ . We test five constant weights $c\\in\\{1,2.5,5,7.5,10\\}$ and report the maximum score among these values in Table 4. The QCS method with the dynamic weight based on trajectory return outperforms the highest scores obtained with various constant weight settings across datasets, as shown in Table 4. ", "page_idx": 8}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/6c8ba9d782e1c080369baac31be8bd6382e5cc05010f62ca3a5d1c0e9d1c093f.jpg", "table_caption": ["Table 4: Comparison of constant QCS weight and the dynamic weight. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "This demonstrates that our dynamic weight control, grounded in trajectory return, is more effective and robust in integrating $Q$ -aids. ", "page_idx": 9}, {"type": "text", "text": "Impact of the QCS weight $\\lambda$ . We examined the effect of $\\lambda$ by varying it from 0.2 to 1.5. As shown in Table 5, except for the walker2d-medium, we found that even the smallest values achieved with changing $\\lambda$ either matched or surpassed the performance of existing value-based methods and RCSL\u2019s representative methods, including IQL, CQL, DT, DC, and RvS. This demonstrates QCS\u2019s relative robustness regarding hyperparameters. For walker2d-medium, we found that performance begins to decrease when $\\lambda$ exceeds the initial setting of 0.5. While increasing the gradient steps from 500K to 1M improves performance at $\\lambda=1$ , further increasing $\\lambda$ to 1.5 leads to greater instability. ", "page_idx": 9}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/1e3705821ab655213a8b301073a46c103091c66b21fc6ac76ef7f230b182a818.jpg", "table_caption": ["Table 5: Performance of QCS in the Mujoco domain with varying $\\lambda$ values. The boldface numbers denote the maximum score or a comparable one. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "Test Time State Distribution Shift. ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "To validate whether QCS effectively acquires stitching ability while preventing a shift in the test-time state distribution, as discussed in Section 3.2, we present Fig. 7. This figure compares the state distributions explored by RCSL, max$Q$ , and QCS policies during evaluation. RCSL and max- $Q$ , representing QCS\u2019s extremes, were trained using specific loss configurations: RCSL loss as QCS loss in Eq. 3 with $\\lambda=0$ and max- $Q$ loss as QCS loss without the RCSL term, i.e., selecting actions as $\\mathrm{argmax}_{a\\in\\mathcal{A}}\\,Q_{\\theta}^{\\mathrm{IQL}}(s,a)$ . Fig. 7 illustrates RCSL\u2019s adherenc\u2208eA to dataset states, contrasting with the notable state distribution shift of the max- $Q$ policy. QCS inherits RCSL\u2019s ", "page_idx": 9}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/f7abfb6751b0558a238dd5acbb2735d08ba1d834405d95de4a2ac48217ec2a95.jpg", "img_caption": ["Figure 7: t-SNE [40] analysis of states visited by policies trained with RCSL, max- $\\cdot Q$ $(\\mathrm{argmax}_{a\\in\\mathcal{A}}\\,Q_{\\theta}^{\\mathrm{IQL}}(s,a))$ , and QCS losses during evalu\u2208aAtion, alongside dataset\u2019s states in walker2d-medium. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "stability but surpasses its performance, indicating an effective blend of transition recombination without straying excessively from the state distribution. ", "page_idx": 9}, {"type": "text", "text": "7 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In conclusion, QCS effectively combines the stability of RCSL with the stitching ability of the $Q$ -function. Anchored by thorough observation of $Q$ -function generalization error, QCS adeptly modulates the extent of $Q$ -assistance. This strategic fusion enables QCS to exceed the performance of existing SOTA methods in both efficacy and stability, particularly in complex offilne RL benchmarks encompassing a wide range of optimality. ", "page_idx": 9}, {"type": "text", "text": "In addressing our initial motivating question on integrating RCSL and $Q$ -function, QCS opens up promising future research directions. While we have established a correlation between trajectory return and the mixing weight, we have considered simple linear weights to control the level of $Q$ -aid. It is also plausible that the mixing weight might be influenced by other dataset characteristics, such as the dimensions of the state and actions. We believe QCS will stand as a motivating work, inspiring new advancements in the field. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was supported in part by Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.2022-0-00469, Development of Core Technologies for Task-oriented Reinforcement Learning for Commercialization of Autonomous Drones, $50\\%$ ) and in part by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT) (NRF-2021R1A2C2009143 Information Theory-Based Reinforcement Learning for Generalized Environments, $50\\%$ ). ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] J. Achiam, E. Knight, and P. Abbeel. Towards characterizing divergence in deep q-learning. arXiv preprint arXiv:1903.08894, 2019.   \n[2] A. F. Agarap. Deep learning using rectified linear units (relu). arXiv preprint arXiv:1803.08375, 2018.   \n[3] G. An, S. Moon, J.-H. Kim, and H. O. Song. Uncertainty-based offilne reinforcement learning with diversified q-ensemble. Advances in Neural Information Processing Systems, 34:7436\u2013 7447, 2021.   \n[4] J. L. Ba, J. R. Kiros, and G. E. Hinton. Layer normalization. arXiv preprint arXiv:1607.06450, 2016.   \n[5] P. J. Ball, L. Smith, I. Kostrikov, and S. Levine. Efficient online reinforcement learning with offline data. In International Conference on Machine Learning, pages 1577\u20131594. PMLR, 2023.   \n[6] R. Bellman. A markovian decision process. Journal of Mathematics and Mechanics, pages 679\u2013684, 1957.   \n[7] D. Brandfonbrener, A. Bietti, J. Buckman, R. Laroche, and J. Bruna. When does returnconditioned supervised learning work for offline reinforcement learning? Advances in Neural Information Processing Systems, 35:1542\u20131553, 2022.   \n[8] G. Brockman, V. Cheung, L. Pettersson, J. Schneider, J. Schulman, J. Tang, and W. Zaremba. Openai gym. arXiv preprint arXiv:1606.01540, 2016.   \n[9] T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, et al. Language models are few-shot learners. Advances in Neural Information Processing Systems, 33:1877\u20131901, 2020.   \n[10] L. Chen, K. Lu, A. Rajeswaran, K. Lee, A. Grover, M. Laskin, P. Abbeel, A. Srinivas, and I. Mordatch. Decision transformer: Reinforcement learning via sequence modeling. Advances in Neural Information Processing Systems, 34:15084\u201315097, 2021.   \n[11] A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani, M. Minderer, G. Heigold, S. Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale. In International Conference on Learning Representations, 2020.   \n[12] S. Emmons, B. Eysenbach, I. Kostrikov, and S. Levine. Rvs: What is essential for offline RL via supervised learning? In International Conference on Learning Representations, 2022. URL https://openreview.net/forum?id $=$ S874XAIpkR-.   \n[13] J. Fu, A. Kumar, O. Nachum, G. Tucker, and S. Levine. D4rl: Datasets for deep data-driven reinforcement learning. arXiv preprint arXiv:2004.07219, 2020.   \n[14] S. Fujimoto and S. S. Gu. A minimalist approach to offline reinforcement learning. Advances in Neural Information Processing Systems, 34:20132\u201320145, 2021.   \n[15] S. Fujimoto, D. Meger, and D. Precup. Off-policy deep reinforcement learning without exploration. In International Conference on Machine Learning, pages 2052\u20132062. PMLR, 2019.   \n[16] C. Gao, C. Wu, M. Cao, R. Kong, Z. Zhang, and Y. Yu. Act: Empowering decision transformer with dynamic programming via advantage conditioning. arXiv preprint arXiv:2309.05915, 2023.   \n[17] A. Gupta, V. Kumar, C. Lynch, S. Levine, and K. Hausman. Relay policy learning: Solving long-horizon tasks via imitation and reinforcement learning. In Conference on Robot Learning, pages 1025\u20131037. PMLR, 2020.   \n[18] T. Haarnoja, A. Zhou, P. Abbeel, and S. Levine. Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor. In International Conference on Machine Learning, pages 1861\u20131870. PMLR, 2018.   \n[19] A. Jacot, F. Gabriel, and C. Hongler. Neural tangent kernel: Convergence and generalization in neural networks. Advances in Neural Information Processing Systems, 31, 2018.   \n[20] J. Kim, S. Lee, W. Kim, and Y. Sung. Decision convformer: Local filtering in metaformer is sufficient for decision making. In International Conference on Learning Representations, 2024.   \n[21] D. P. Kingma and J. Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.   \n[22] I. Kostrikov, R. Fergus, J. Tompson, and O. Nachum. Offline reinforcement learning with fisher divergence critic regularization. In International Conference on Machine Learning, pages 5774\u20135783. PMLR, 2021.   \n[23] I. Kostrikov, A. Nair, and S. Levine. Offilne reinforcement learning with implicit q-learning. In International Conference on Learning Representations, 2021.   \n[24] A. Kumar, J. Fu, M. Soh, G. Tucker, and S. Levine. Stabilizing off-policy q-learning via bootstrapping error reduction. Advances in Neural Information Processing Systems, 32, 2019.   \n[25] A. Kumar, A. Zhou, G. Tucker, and S. Levine. Conservative q-learning for offilne reinforcement learning. Advances in Neural Information Processing Systems, 33:1179\u20131191, 2020.   \n[26] A. Kumar, R. Agarwal, T. Ma, A. Courville, G. Tucker, and S. Levine. Dr3: Value-based deep reinforcement learning requires explicit regularization. In International Conference on Learning Representations, 2021.   \n[27] A. Kumar, J. Hong, A. Singh, and S. Levine. When should we prefer offline reinforcement learning over behavioral cloning? arXiv preprint arXiv:2204.05618, 2022.   \n[28] J. Lee, L. Xiao, S. Schoenholz, Y. Bahri, R. Novak, J. Sohl-Dickstein, and J. Pennington. Wide neural networks of any depth evolve as linear models under gradient descent. Advances in Neural Information Processing Systems, 32, 2019.   \n[29] S. Levine, A. Kumar, G. Tucker, and J. Fu. Offline reinforcement learning: Tutorial, review, and perspectives on open problems. arXiv preprint arXiv:2005.01643, 2020.   \n[30] Z. Liu, Y. Lin, Y. Cao, H. Hu, Y. Wei, Z. Zhang, S. Lin, and B. Guo. Swin transformer: Hierarchical vision transformer using shifted windows. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 10012\u201310022, 2021.   \n[31] I. Mediratta, Q. You, M. Jiang, and R. Raileanu. A study of generalization in offilne reinforcement learning. In NeurIPS 2023 Workshop on Generalization in Planning, 2023.   \n[32] A. Nair, A. Gupta, M. Dalal, and S. Levine. Awac: Accelerating online reinforcement learning with offline datasets. arXiv preprint arXiv:2006.09359, 2020.   \n[33] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, et al. Pytorch: An imperative style, high-performance deep learning library. Advances in Neural Information Processing Systems, 32, 2019.   \n[34] X. B. Peng, A. Kumar, G. Zhang, and S. Levine. Advantage-weighted regression: Simple and scalable off-policy reinforcement learning. arXiv preprint arXiv:1910.00177, 2019.   \n[35] A. Rajeswaran, V. Kumar, A. Gupta, G. Vezzani, J. Schulman, E. Todorov, and S. Levine. Learning complex dexterous manipulation with deep reinforcement learning and demonstrations. Robotics: Science and Systems XIV, 2018.   \n[36] H. Singh, N. Misra, V. Hnizdo, A. Fedorowicz, and E. Demchuk. Nearest neighbor estimates of entropy. American Journal of Mathematical and Management Sciences, 2003.   \n[37] R. S. Sutton and A. G. Barto. Reinforcement learning: An introduction. MIT press, 2018.   \n[38] R. S. Sutton, A. G. Barto, et al. Introduction to reinforcement learning, volume 135. MIT press Cambridge, 1998.   \n[39] E. Todorov, T. Erez, and Y. Tassa. Mujoco: A physics engine for model-based control. In 2012 IEEE/RSJ international Conference on Intelligent Robots and Systems, pages 5026\u20135033. IEEE, 2012.   \n[40] L. Van der Maaten and G. Hinton. Visualizing data using t-sne. Journal of Machine Learning Research, 9(11), 2008.   \n[41] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, \u0141. Kaiser, and I. Polosukhin. Attention is all you need. Advances in Neural Information Processing Systems, 30, 2017.   \n[42] S. Wang, Q. Yang, J. Gao, M. Lin, H. Chen, L. Wu, N. Jia, S. Song, and G. Huang. Train once, get a family: State-adaptive balances for offilne-to-online reinforcement learning. Advances in Neural Information Processing Systems, 36, 2024.   \n[43] Y. Wang, C. Yang, Y. Wen, Y. Liu, and Y. Qiao. Critic-guided decision transformer for offline reinforcement learning. arXiv preprint arXiv:2312.13716, 2023.   \n[44] Z. Wang, A. Novikov, K. Zolna, J. S. Merel, J. T. Springenberg, S. E. Reed, B. Shahriari, N. Siegel, C. Gulcehre, N. Heess, et al. Critic regularized regression. Advances in Neural Information Processing Systems, 33:7768\u20137778, 2020.   \n[45] Z. Wang, J. J. Hunt, and M. Zhou. Diffusion policies as an expressive policy class for offline reinforcement learning. In The Eleventh International Conference on Learning Representations, 2022.   \n[46] J. Wu, H. Wu, Z. Qiu, J. Wang, and M. Long. Supported policy optimization for offline reinforcement learning. Advances in Neural Information Processing Systems, 35:31278\u201331291, 2022.   \n[47] Y. Wu, G. Tucker, and O. Nachum. Behavior regularized offilne reinforcement learning. arXiv preprint arXiv:1911.11361, 2019.   \n[48] Y. Wu, S. Zhai, N. Srivastava, J. Susskind, J. Zhang, R. Salakhutdinov, and H. Goh. Uncertainty weighted actor-critic for offilne reinforcement learning. arXiv preprint arXiv:2105.08140, 2021.   \n[49] Y.-H. Wu, X. Wang, and M. Hamaya. Elastic decision transformer. In Advances in Neural Information Processing Systems, 2023.   \n[50] H. Xu, L. Jiang, L. Jianxiong, and X. Zhan. A policy-guided imitation approach for offline reinforcement learning. Advances in Neural Information Processing Systems, 35:4085\u20134098, 2022.   \n[51] H. Xu, L. Jiang, J. Li, Z. Yang, Z. Wang, V. W. K. Chan, and X. Zhan. Offline rl with no ood actions: In-sample learning via implicit value regularization. In International Conference on Learning Representations, 2022.   \n[52] H. Xu, L. Jiang, J. Li, Z. Yang, Z. Wang, V. W. K. Chan, and X. Zhan. Offline rl with no ood actions: In-sample learning via implicit value regularization. arXiv preprint arXiv:2303.15810, 2023.   \n[53] T. Yamagata, A. Khalil, and R. Santos-Rodriguez. Q-learning decision transformer: Leveraging dynamic programming for conditional sequence modelling in offline rl. In International Conference on Machine Learning, pages 38989\u201339007. PMLR, 2023.   \n[54] T. Yu, G. Thomas, L. Yu, S. Ermon, J. Y. Zou, S. Levine, C. Finn, and T. Ma. Mopo: Modelbased offline policy optimization. Advances in Neural Information Processing Systems, 33: 14129\u201314142, 2020.   \n[55] T. Yu, A. Kumar, R. Rafailov, A. Rajeswaran, S. Levine, and C. Finn. Combo: Conservative offilne model-based policy optimization. Advances in Neural Information Processing Systems, 34:28954\u201328967, 2021.   \n[56] Y. Yue, R. Lu, B. Kang, S. Song, and G. Huang. Understanding, predicting and better resolving q-value divergence in offline-rl. In Advances in Neural Information Processing Systems, 2023.   \n[57] Q. Zheng, A. Zhang, and A. Grover. Online decision transformer. In International Conference on Machine Learning, pages 27042\u201327059. PMLR, 2022.   \n[58] Z. Zhou, C. Zhu, R. Zhou, Q. Cui, A. Gupta, and S. S. Du. Free from bellman completeness: Trajectory stitching via model-based return-conditioned supervised learning. In International Conference on Learning Representations, 2024. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "Appendices ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "A Pseudocode ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "The QCS algorithm first learns the $Q$ -function using a dynamic programming and then trains the policy based on the aid of the learned $Q$ -function. Detailed pseudocode can be found in Algorithm 1. In this work, we utilized IQL [23] as the $Q$ training algorithm, but other $Q$ training algorithms can be employed. A comparison with using a $Q$ -function trained by CQL [25] can be found in Appendix H.1. ", "page_idx": 14}, {"type": "text", "text": "Algorithm 1 IQL-aided QCS ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Hyperparameters: Total critic gradient steps $M$ , critic learning rate $\\alpha_{\\mathrm{{critic}}}$ , target update rate $\\chi$ , total policy gradient steps $N$ , policy learning rate $\\alpha_{\\mathrm{policy}}$ , context length $K$   \nInitialize parameters: $\\theta,\\hat{\\theta},\\psi$ , and $\\phi$   \n// IQL Pretraining   \nfor $m=1$ to $M$ do $\\psi\\leftarrow\\psi-\\alpha_{\\mathrm{critic}}\\nabla\\mathcal{L}_{V}(\\psi)$ using Eq. 1 $\\theta\\leftarrow\\theta-\\alpha_{\\mathrm{critic}}\\nabla\\mathcal{L}_{Q}(\\theta)$ using Eq. 2 $\\hat{\\theta}\\leftarrow\\chi\\theta+\\big(1-\\chi\\big)\\hat{\\theta}$   \nend for   \n// QCS Policy Training   \nfor $n=1$ to $N$ do Sample trajectory $\\tau\\sim\\mathcal{D}$ Sample sub-trajectory $\\tau_{t:t+K-1}\\sim\\tau$ with random initial timestep t $\\phi\\leftarrow\\\"\\phi-\\alpha_{\\mathrm{policy}}\\overset{\\cdot}{\\nabla}\\mathcal{L}_{\\pi}^{\\mathrm{QCS}}(\\phi)$ +usi\u2212ng Eq. 3   \nend for ", "page_idx": 14}, {"type": "text", "text": "B Baseline Details ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We evaluated the performance of QCS against twelve different baseline methods. This group consists of four value-based methods: $\\mathrm{TD}3\\substack{+\\mathrm{BC}}$ [14], IQL [23], CQL [25] and SQL [52]; three RCSL algorithms: DT [10], DC [20], and RvS [12]; and five combined methods that signify progress in RCSL by integrating stitching abilities: QDT [53], EDT [49], and CGDT [43], ACT [16], and POR [50]. The performance for these baselines was sourced from their respective original publications, with two exceptions. For CQL [25], the performance data in the original paper was based on the MuJoCo v0 environment, which differs from the v2 version used in our study. Therefore, for CQL, we referenced the performance score reported in [23] to ensure a consistent and fair comparison across all methods. ", "page_idx": 14}, {"type": "text", "text": "In addition, for antmaze-medium and antmaze-large, since there were no reported DT [10] and DC [20] scores, we conducted evaluations using the official codebase. When training on antmaze-medium and large, we used 512 as the embedding dimension in the default hyperparameter setting. We found that removing the positional embedding slightly improved performance, as also discussed in Zheng et al. [57], so we trained without it. For the target RTG, we used values of 1 and 100 and reported the higher score obtained from the two values. ", "page_idx": 14}, {"type": "text", "text": "C Dataset Return Distributions ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "To gain a deeper understanding of the scenarios in which offline RL is applied and the necessity of learning good policies, we plotted the trajectory return distributions for three different datasets in each of the three MuJoCo environments in Fig. 8. For these return distribution histograms, we set the number of bins to 50. The \u2018Count\u2019 label denotes the number of trajectories corresponding to each normalized return. ", "page_idx": 14}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/cd482f863f907ee489bee87dd163a61184dc6c6e8ec35b878b229baba8011829.jpg", "img_caption": ["Figure 8: Distribution of trajectory returns in the MuJoCo datasets, including the dataset\u2019s maximum trajectory return and the QCS score. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "As shown in Fig. 8, the medium-replay datasets encompass wide varieties of returns. Additionally, the medium-expert dataset, a combination of the medium and expert datasets, exhibits two peaks, indicating a division in the range of returns. This observation reveals that each dataset exhibits a distinct distribution pattern of returns. In this graph, alongside the return distribution, the dataset\u2019s maximum trajectory return and the score of our QCS method are also presented. QCS is observed to achieve results that are close to or surpass the maximum return. This is particularly notable in datasets with diverse return distribution characteristics, such as the medium-replay dataset, where the distribution of low return trajectories is prevalent. ", "page_idx": 15}, {"type": "text", "text": "D Brief Derivation of the Neural Tangent Kernel ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "To understand the influence of parameter updates in function approximation across different stateaction pairs, the Neural Tangent Kernel (NTK) emerges as a crucial tool [19, 28, 1, 26, 56]. For comprehensive insights, we direct readers to Achiam et al. [1], while here we distill the essential concepts. The NTK framework becomes particularly relevant in the context of deep $Q$ -learning, where the parameterized $Q$ -function, denoted as $Q_{\\theta}$ , is updated as follows [37]: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\theta^{\\prime}=\\theta+\\alpha_{_{s,a\\sim\\rho}}\\!\\left[\\delta_{\\theta}(s,a)\\nabla_{\\theta}Q_{\\theta}(s,a)\\right],\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $\\alpha$ is the learning rate, $\\rho$ is the distribution of transitions in the dataset, and $\\delta_{\\theta}(s,a)=r(s,a)+$ $\\gamma\\operatorname*{max}_{a^{\\prime}}Q_{\\theta}(s^{\\prime},a^{\\prime})-\\bar{Q}_{\\theta}(s,\\dot{a})$ is the temporal difference (TD) error. On the other hand, the first-order Taylor expansion around $\\theta$ at an out-of-sample pair $({\\bar{s}},{\\bar{a}})$ yields ", "page_idx": 15}, {"type": "equation", "text": "$$\nQ_{\\theta^{\\prime}}\\!\\left(\\bar{s},\\bar{a}\\right)=Q_{\\theta}\\!\\left(\\bar{s},\\bar{a}\\right)+\\nabla_{\\theta}Q_{\\theta}\\!\\left(\\bar{s},\\bar{a}\\right)^{\\top}\\!\\left(\\theta^{\\prime}-\\theta\\right)\\!.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Substituting (4) into (5), we have ", "page_idx": 15}, {"type": "equation", "text": "$$\nQ_{\\theta^{\\prime}}(\\bar{s},\\bar{a})=Q_{\\theta}(\\bar{s},\\bar{a})+\\alpha_{s,a\\sim\\rho}^{\\mathbb{E}}\\left[k_{\\theta}\\big(\\bar{s},\\bar{a},s,a\\big)\\delta_{\\theta}\\big(s,a\\big)\\right],\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $k_{\\theta}(\\bar{s},\\bar{a},s,a)$ , referred to as the NTK, is defined as the inner product between two gradient vectors $\\nabla_{\\theta}Q_{\\theta}(\\bar{s},\\bar{a})$ and $\\nabla_{\\theta}Q_{\\theta}(s,a)$ , i.e., ", "page_idx": 15}, {"type": "equation", "text": "$$\nk_{\\theta}(\\bar{s},\\bar{a},s,a):=\\nabla_{\\theta}Q_{\\theta}(\\bar{s},\\bar{a})^{\\top}\\nabla_{\\theta}Q_{\\theta}(s,a).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "(6) together with (7) explains how the parameter update with function approximation for a sample pair $(s,a)$ affects the $Q$ -value change for another sample pair $({\\bar{s}},{\\bar{a}})$ . When the NTK $k_{\\theta}(\\bar{s},\\bar{a},s,a)$ is large, the TD-error $\\delta_{\\theta}(s,a)$ has a more pronounced impact on the update difference $Q_{\\theta^{\\prime}}(\\bar{s},\\bar{a})-Q_{\\theta}(\\bar{s},\\bar{a})$ . Thus, the single update based on the TD-error at a sample pair $(s,a)$ can induce a significant change in the $Q$ -function for another pair $({\\bar{s}},{\\bar{a}})$ . ", "page_idx": 16}, {"type": "text", "text": "E Details and Extended Analysis of $Q$ -Function and NTK ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In Section 3.2, we conduct an NTK analysis of the $Q$ -function trained with IQL in the Inverted Double Pendulum and Hopper environments, which have state dimensions of 2 and 11, and action dimensions of 1 and 3, respectively. This section details the analysis methods, provides extended results, and offers further clarity by presenting the action distributions for the datasets of each environment. ", "page_idx": 16}, {"type": "text", "text": "E.1 Analysis Methods ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Inverted Double Pendulum. We chose the Inverted Double Pendulum for analysis of $Q$ - values and NTK due to its one-dimensional action space. For training the $Q$ -function, as no prior open-source offline dataset existed for this environment, we first created one. The dataset was generated by training an online Soft Actor-Critic [18], using an implementation in RLkit, available at https://github.com/rail-berkeley/rlkit.git. ", "page_idx": 16}, {"type": "text", "text": "We created two datasets: expert and medium. The expert dataset consists of $10^{5}$ samples generated by an optimal policy, while the medium dataset includes $10^{5}$ samples from a medium policy, whose performance is approximately one-third of the optimal policy. Given the continuous nature of the state and action spaces in the Inverted Double Pendulum, which complicates analysis, we initially quantized both spaces. For state quantization, we set the range from a minimum of -5 to a maximum of 10 (the minimum and maximum values across all dimensions in both datasets) and divided each dimension into 80 equal segments. For action quantization, the range was set from $^-1$ to 1, divided into 500 equal segments. ", "page_idx": 16}, {"type": "text", "text": "When plotting the $Q$ -values, we calculated the $Q$ -value for each quantized state across all quantized actions. Fig. 5 shows the results for the state chosen in each dataset, based on the highest count of in-sample actions. In the NTK analysis, we computed the following equation for the reference action and the remaining quantized actions with index $i\\in{1,\\ldots,500}$ , where $a_{1}=-1$ , $a_{500}=1$ , and $a_{\\mathrm{ref}}=0$ . ", "page_idx": 16}, {"type": "text", "text": "MuJoCo Hopper. For Hopper environment, we use open-source D4RL [13] hopper-expert and hopper-medium-replay datasets. In the case of Hopper, similar to what was done in the Inverted Double Pendulum environment, we quantized the continuous state and action space for analysis. More specifically, for the state space, we divided the values of each dimension into 100 equal segments, ranging from $^-10$ to 10. As for the action space, we divided the values of each dimension into 50 equal segments, ranging from -1 to 1. In the case of Hopper, with its 3D action dimension, visualizing it similarly to the 1D action dimension in the Inverted Double Pendulum posed a challenge. Consequently, in the 3D plots, we assigned each axis to one of the action dimensions and utilized color to indicate the $Q$ -value, as shown in Fig. 5. Additionally, in NTK analysis, representing the relationships between the reference action and all quantized actions within a single graph is challenging. We marked high-NTK regions in gray, where the normalized NTK values are greater than 0.9. ", "page_idx": 16}, {"type": "text", "text": "E.2 $Q$ -Network Weights Visualization ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Figure 9, illustrating the neural network\u2019s learned weights for actions in two distinct datasets, provides a compelling visual representation of the over-generalization results presented in Figure 5. Specifically, the figure displays the first layer\u2019s weight matrix $W_{1}$ from a two-layer MLP $Q$ - network trained on the Inverted Double Pendulum using Implicit $Q$ -Learning (IQL). This network is defined as $Q(s,a)\\,=\\,W_{2}\\mathrm{ReLU}\\left(W_{1}(s,a)+b_{1}\\right)+b_{2}$ , where $W_{1}$ is a key focus due to its direct interaction with the concatenated state and action inputs. The dimensions of the weight matrix $W_{1}$ are $32\\times(\\dim(S)+\\dim(A))$ , where $\\dim(S)=11$ and $\\dim({\\mathcal{A}})=1$ represent the dimensions of the state and action spaces, respectively. The figure contrasts the learned weights in datasets with different action spreads and the diversity of the $Q$ -values: a narrow spread (expert dataset) and a wider spread (medium dataset). ", "page_idx": 16}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/b0529a44f8c11f18f8727e3e9487414ace567a393005abb6ced5e1b06742fd0f.jpg", "img_caption": ["Figure 9: The first layer\u2019s weight matrix $W_{1}$ of a two-layer MLP $Q$ -network trained on the Inverted Double Pendulum using IQL. The matrix dimensions are $32\\times(\\dim(S)+\\dim(A))$ . For the expert dataset, the action-related elements of $W_{1}$ are learned as zero, indicating the network\u2019s training to not differentiate actions across all states. "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "For the expert dataset (Fig. 9(a)), the action-related elements of $W_{1}$ (the last column elements) are learned as zero. This intriguing result indicates that the network, during its training, learns not to differentiate between actions across all states, leading to uniformly flat $Q$ -values for all actions. Such behavior is characteristic of datasets with a narrower action spread, where the actions are more clustered and coherent. The network\u2019s tendency to not distinguish between different actions in such a dataset is a direct consequence of the limited diversity, requiring less differentiation in the action representation. ", "page_idx": 17}, {"type": "text", "text": "In contrast, for the medium dataset (Fig. 9(b)), which represents a wider action spread, the actionrelated elements of $W_{1}$ show variation. This variation signifies that the network has learned to differentiate between actions to a greater extent, a necessity in a dataset where actions are more diverse and dispersed. The network\u2019s capacity to distinguish between various actions and assign different levels of importance to each reflects the need for a more nuanced understanding of the action space in datasets with a wider spread. ", "page_idx": 17}, {"type": "text", "text": "This visual evidence from the learned weights substantiates our understanding of how neural networks adapt their learning based on the diversity in the action space of the dataset. In datasets with narrower action spreads with similar $Q$ -values, the network learns a more uniform approach towards different actions, while in those with wider spreads with diverse $Q$ -values, it adopts a more differentiated and discerning strategy. This adaptive learning aligns with the principles of regression demonstrating the network\u2019s response to the diversity and distribution of actions in the training data. ", "page_idx": 17}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/1bce99f61a21b98da15a91f19cb9e7bcf1c961489ce1696f9a20576134a92e00.jpg", "img_caption": ["E.3 Extended NTK Visualization ", "Figure 10: Normalized NTKs $k_{\\theta}(s,\\bar{a},s,a)/\\|\\nabla_{\\theta}Q_{\\theta}(s,a)\\|_{2}^{2}$ for three different fixed states from each dataset and for all reference action $a\\in\\mathcal{A}$ and contrastive action ${\\bar{a}}\\in A$ . The figures below illustrate the cross sections of figures above at $a=a_{\\mathrm{ref}}=0.0$ . "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "In Fig. 5 (a) and (b) in Section 3.2, we visualize the NTK for a fixed state and a reference action $a_{\\mathrm{ref}}$ at zero in the Inverted Double Pendulum environment. Here, we present the extended results with three different fixed states and a varying reference action across the action space $a_{\\mathrm{ref}}\\in\\left[-1.0,1.0\\right]$ . In Fig. 10, the diagonal symmetry of the normalized NTK as a function of action distance is observed. Generally, in the medium dataset, the NTK is high between two actions that are close to each other and low between actions that are far apart. However, in the expert dataset, this distinction becomes blurred, regardless of the proximity of the actions. ", "page_idx": 18}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/4f102724ccd9307b64b3767df26526437871154ae9c06eb40739f99d63c3b181.jpg", "img_caption": ["E.4 Action Distributions ", "Figure 11: The average L2 distance between different actions within each quantized state in the Inverted Double Pendulum and MuJoCo Hopper environments. All histograms are plotted with 50 bins. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "In this subsection, we examine the action distributions of datasets within the Inverted Double Pendulum and MuJoCo Hopper environments. The continuous nature and multi-dimensionality of these action spaces pose significant challenges for directly visualizing the exact action distributions. To address this, we define the average action distribution spread of a dataset $\\mathcal{D}$ , quantified as the expectation over the states of the dataset as: ", "page_idx": 18}, {"type": "equation", "text": "$$\nH(\\mathcal{D}):=\\mathbb{E}_{s\\in\\mathcal{D}}\\left[\\mathbb{E}_{a,\\bar{a}\\in\\mathcal{D}(s)}\\left[\\left\\|a-\\bar{a}\\right\\|_{2}\\right]\\right].\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We then visualize the distribution of the L2 distance among all actions within each quantized state across the dataset using Eq. (8). This approach is based on the characteristics of the action dimensions in both the Inverted Double Pendulum and the Hopper, which are bounded between $^{-1}$ and 1. For action distribution visualization, we maintain the same state and action quantization as outlined in Appendix E.1. ", "page_idx": 18}, {"type": "text", "text": "Fig. 11 presents the results. As depicted in this figure, in both the Inverted Double Pendulum and Hopper environments, the expert datasets exhibit a small average L2 distance between actions coexisting in the same quantized state. This indicates a denser clustering of actions within these datasets, which is linked to high-return datasets typically exhibiting a more concentrated action distribution on average since they primarily perform exploitation actions instead of exploration actions. ", "page_idx": 18}, {"type": "text", "text": "F Calculating $R^{*}$ ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "In Section 4.1, we define the QCS weight $w(R(\\tau))$ as $\\lambda\\cdot(R^{*}-R(\\tau))$ , where $R^{*}$ is the optimal return for the task. For calculating $R^{*}$ , we consider the two methods described below. ", "page_idx": 18}, {"type": "text", "text": "(i) Set $R^{*}$ with the optimal return for the environment. In our experiments, we set $R^{*}$ for the environments with optimal returns as follows: Hopper $\\left.R^{*}\\right.=3500)$ ), Walker2d $\\left.R^{*}\\right.=5000)$ ), Halfcheetah $\\langle R^{*}\\,=\\,11000\\rangle$ , and AntMaze $\\left.R^{*}\\right.=1)$ . Note that prior RCSL algorithms such as Decision Transformer [10] and RvS [12] used predefined $R^{*}$ for target RTG conditioning during inference. Therefore, using $R^{*}$ based on the optimal return introduces no additional assumptions compared to previous RCSL methods. As noted in Appendix J.2, QCS does not use $R^{*}$ for target RTG conditioning but instead relies on the maximum trajectory return, requiring only one $R^{*}$ per algorithm. ", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "(ii) Set $R^{*}$ to the maximum trajectory return within the dataset. An alternative approach for setting $R^{*}$ is to use the maximum trajectory return from the dataset. When obtaining the true optimal return from the environment is challenging, the maximum trajectory return can serve as an approximation. Table 6 presents additional results using this method for $R^{*}$ . ", "page_idx": 19}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/d36d6549a46dc52c65b7164fd7cbf76ce6163e54b0981c69cf441939851e0d9e.jpg", "table_caption": ["Table 6: QCS performance with $R^{*}$ as the optimal environment and maximum dataset returns. "], "table_footnote": [], "page_idx": 19}, {"type": "text", "text": "As shown in Table 6, setting $R^{*}$ with the optimal environment return is slightly better than setting it with the maximum dataset return, but setting it with the maximum dataset return still outperforms the baselines. Therefore, we propose using the optimal environment return for $R^{*}$ ; however, when it is hard to determine, using the maximum dataset return can be a good alternative. ", "page_idx": 19}, {"type": "text", "text": "G More Experiments Results ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "G.1 Additional Performance Comparison ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "In addition to the performance comparison in the MuJoCo and AntMaze domains, as discussed in Section 6.2, we also compare the performance of QCS in the Adroit domain using extensive baselines, similar to those mentioned in Section 6.2. Since there are no reported results for $\\mathrm{TD3+BC}$ [14], SQL [52], RvS [12], QDT [53], EDT [49], CGDT [43], ACT [16], POR [50] in the Adroit domain, we only compare with the value-based baselines (IQL [23], CQL [25]) and RCSL baselines (DT [10], DC [20], RvS [12]). For DT and DC, we evaluate the score using their official codebase. ", "page_idx": 19}, {"type": "text", "text": "Table 7 displays the performance of QCS alongside the baseline performances. As indicated by the results, QCS-R outperforms other baselines in the Adroit Pen task. This outcome reiterates that QCS is a robust framework, excelling in a range of tasks with varying features. It also underscores findings from our earlier experiments, which demonstrate that strategically blending RCSL with $Q$ -function can significantly enhance performance. ", "page_idx": 19}, {"type": "text", "text": "Table 7: The performance of QCS and baselines in the Adroit domain. The boldface numbers denote the maximum score. ", "page_idx": 19}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/c9acce7e6e3f0f2b0dd799f44463784100b7e574bb057e09b00435a0eb8965d8.jpg", "table_caption": [], "table_footnote": [], "page_idx": 19}, {"type": "text", "text": "G.2 Comparison with FamO2O ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "FamO2O [42] is an offline-to-online RL method that facilitates state-adaptive balancing between policy improvement and constraints. During offline pre-training, it develops a set of policies with various balance coefficients. In the subsequent online fine-tuning phase, FamO2O determines the most suitable policy for each state by selecting the corresponding balance coefficient from this set. The major difference between QCS and FamO2O is that FamO2O additionally uses $10^{6}$ online samples to find a suitable balance coefficient, while QCS only utilizes the offilne dataset and adjusts the balance coefficient (QCS weight) based on the trajectory return. Moreover, unlike FamO2O, which utilizes a state-adaptive balance coefficient, QCS is based on historical architecture and uses a sub-trajectory-adaptive balance coefficient. Although it is not a fair comparison between FamO2O, an offline-to-online algorithm, and QCS, a purely offline algorithm, we present the performance comparison to demonstrate the effectiveness of QCS even when compared with an offline-to-online algorithm. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/c46e147ea2166ce335817e2e8a2ec4a5394ca513e2a87d6d06d25ae26acc230f.jpg", "table_caption": ["Table 8: Performance Comparison between FamO2O and QCS in the MuJoCo domain. "], "table_footnote": [], "page_idx": 20}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/a0311ec46d2b5f37b8fcf87656225d3367e56392105b1fb9e085754f583cea72.jpg", "table_caption": ["Table 9: Performance Comparison between FamO2O and QCS in the AntMaze domain. "], "table_footnote": [], "page_idx": 20}, {"type": "text", "text": "H More Ablation Studies ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "H.1 Comparing Assistance from Actor-Critic Learned $Q$ -Values ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "To compare the performance of QCS using $Q$ -function learned through actor-critic algorithms, we use representative actor-critic algorithms such as CQL [25] for benchmarking. As shown in Table 10, the performance of CQL-aided QCS generally improved compared to the original CQL, but it does not match the performance of IQL-aided QCS for the MuJoCo domain. The reason can be attributed to two factors: (1) the $Q$ -function may be bounded by the actor\u2019s representation ability, and (2) CQL might impose excessive conservatism on the $Q$ -function. Moreover, in the case of antmaze-umaze-diverse, IQL-aided QCS underperforms CQL, but CQL-aided QCS outperforms CQL. Since QCS is a general framework that proposes a new combination of RCSL and $Q$ -function on trajectory return, there is a wide range of potential integrations of RCSL and offline $Q$ -learning methods. The most impactful aspect will differ depending on the characteristics of each RCSL and $Q$ -learning method when combined. Exploring this would be an interesting research area, which we leave as future work. ", "page_idx": 20}, {"type": "text", "text": "Table 10: The performance of CQL, CQL-aided QCS, and IQL-aided QCS. The dataset names are abbreviated as follows: medium as $\\mathbf{\\dot{m}}$ , medium-replay as $\\mathbf{\\omega}^{\\bullet}\\mathbf{m}^{-\\mathbf{r}^{\\bullet}}$ , and umaze-diverse as \u2018u-d\u2019. ", "page_idx": 20}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/12bd73d95acafe106c1919693e5d566d74e1e83d7aa1528cbbcc648675acbeaa.jpg", "table_caption": [], "table_footnote": [], "page_idx": 20}, {"type": "text", "text": "H.2 Impact of Base Architecture and Conditioning ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "In Section 4.3, we discussed QCS variants with different base architectures and conditioning. To assess the impact of these on performance, we conducted additional comparisons between QCS implementations with and without conditioning across three base architectures: DT, DC, and MLP. Table 11 reveals that the choice of base architecture does not significantly impact performance, except for the Adroit Pen. However, conditioning proves to be particularly beneficial for complex tasks and datasets with diverse trajectory optimality. Generally, we found that the DC base architecture is advantageous. ", "page_idx": 20}, {"type": "text", "text": "Table 11: Comparison of the base architecture of QCS and the ablations on conditioning. For the MuJoCo and Adroit domains, we utilize QCS-R, and for the AntMaze domain, we utilize QCS-G for evaluation. The dataset names are abbreviated as follows: medium to $\\mathbf{\\dot{m}}$ , medium-replay to $\\cdot_{\\mathrm{m-r}^{\\circ}}$ , medium-expert to $\\omega_{}-\\mathrm{{e}}'$ , umaze to $\\mathbf{\\dot{u}}^{\\prime}$ , umaze-diverse to \u2018u-d\u2019, medium-play to \u2018m$\\mathrm{p}'$ , medium-diverse to $\\cdot_{\\mathrm{m-d}}\\cdot$ , large-play to ${\\bf\\nabla}^{\\bullet}\\mathrm{l-p}^{\\bullet}$ , and large-diverse to \u2018l-d\u2019. The boldface number represents the higher value when comparing the base architecture. ", "page_idx": 21}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/25ddb1a2b073320d22fff498d82eeab180c309786b0c5eca2615fa70edf2e65a.jpg", "table_caption": [], "table_footnote": [], "page_idx": 21}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/f386bc069987141a7b024bf36367d67a2ce0da8c6e1b1c29c7e28d37099c27db.jpg", "table_caption": [], "table_footnote": [], "page_idx": 21}, {"type": "text", "text": "I Training Curves ", "text_level": 1, "page_idx": 22}, {"type": "image", "img_path": "3HpgVs22UJ/tmp/038792ceea10e361e5f0395e3aee798684effd88885d8c2900251cbca940f66e.jpg", "img_caption": ["Figure 12: Training curves of QCS-R and QCS-G in the MuJoCo and AntMaze domains. "], "img_footnote": [], "page_idx": 22}, {"type": "text", "text": "J Implementation and Hyperparameters ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "J.1 Training the $Q$ -Function ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "QCS utilizes $Q$ -aid, where the $Q$ -function is learned through IQL [23], using the open-source implementation of IQL (https://github.com/Manchery/iql-pytorch) and following the common hyperparameters recommended by the authors, as listed in Table 12. For AntMaze, we set the expectile to 0.8, whereas for other domains, we set it to 0.7. Moreover, inspired by RLPD [5] and SPOT [46], we employed Layer Normalization [4] and a larger discount 0.995 for the $Q$ and $V$ networks in AntMaze. For a fair comparison, we retrained IQL using these modified hyperparameters, and the results are shown in Table 13. Since this modified setting had a negative effect on IQL, we used the IQL performances from the IQL paper [23] for Table 3. ", "page_idx": 23}, {"type": "text", "text": "Table 12: Common hyperparameters for QCS $Q$ -function training. ", "page_idx": 23}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/8ce27c1b7ac4b4c4e827145e8c6f56dd1b22f69b9ca13a7e54e07f5c23e5269a.jpg", "table_caption": [], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "Table 13: Comparison of the IQL performances reported in the IQL paper [23] with our results using modified hyperparameters. ", "page_idx": 23}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/b258ff60d4ceae64875a5c5a8b408a3d5c603b9b5305c0b8b232cf5de2df8248.jpg", "table_caption": [], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "J.2 Policy Training ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Detailed description of the loss function. ", "text_level": 1, "page_idx": 23}, {"type": "equation", "text": "$$\n\\cdot_{\\pi}^{\\mathrm{QCS}}(\\phi)=\\mathbb{E}_{B\\sim\\mathcal{D}}\\left[\\frac{1}{B}\\sum_{i=1}^{B}\\frac{1}{K}\\sum_{j=0}^{K-1}\\underbrace{\\Big\\lVert\\alpha_{t_{i}+j}^{(i)}-\\pi_{\\phi}\\left(\\tau_{t_{i}:t_{i}+j}^{(i)}\\right)\\Big\\rVert_{2}^{2}}_{\\mathrm{RCSL}}-\\frac{\\lambda\\cdot\\left(R^{*}-R(\\tau^{(i)})\\right)}{\\bar{Q}_{\\theta}^{\\mathrm{UL}}}\\underbrace{Q_{\\theta}^{\\mathrm{UL}}\\left(s_{t_{i}+j}^{(i)},\\pi_{\\phi}\\left(\\tau_{t_{i}:t_{i}+j}^{(i)}\\right)\\right)}_{Q\\mathrm{\\Aid}}\\right]\\right]\\,,\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "where each component of the loss function is as follows: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The batch sampled over the entire dataset $\\mathcal{D}$ (e.g., hopper-medium): ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\mathcal{B}=\\left\\{\\tau_{t_{1}:t_{1}+K-1}^{(1)},\\dotsc...\\,,\\tau_{t_{B}:t_{B}+K-1}^{(B)}\\right\\},B=|\\mathcal{B}|.\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "\u2022 $i$ -th sub-trajectory in the batch for $i=1,\\ldots,B$ : ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\tau_{t_{i}:t_{i}+K-1}^{(i)}=\\left(\\hat{R}_{t_{i}}^{(i)},s_{t_{i}}^{(i)},a_{t_{i}}^{(i)},\\cdot\\cdot\\cdot,\\hat{R}_{t_{i}+K-1}^{(i)},s_{t_{i}+K-1}^{(i)}\\right).\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "\u2022 Dataset-level $Q$ -normalizer: ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\bar{Q}_{\\theta}^{\\mathrm{IQL}}=\\frac{1}{|\\mathcal{D}|}\\sum_{(s,a)\\in\\mathcal{D}}Q_{\\theta}^{\\mathrm{IQL}}\\left(s,a\\right),\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "i.e., the dataset-level $Q$ -normalizer $\\bar{Q}_{\\mathrm{IQL}}$ is the mean of the $Q$ -value for all samples in the dataset. ", "page_idx": 23}, {"type": "text", "text": "Implementations. After training the $Q$ -function, we train our policy with three different base architectures: DT [10], DC [20], and MLP. For DT-based QCS, we utilize the official DT codebase (https://github.com/kzl/decision-transformer) for our implementation. Similarly, for DC-based QCS, we use the official DC codebase (https://github.com/beanie00/ Decision-ConvFormer) for our implementation. ", "page_idx": 24}, {"type": "text", "text": "Hyperparameters. For the AntMaze domain, we used $10^{6}$ gradient steps, and for the other domains, we used $\\mathrm{5\\times10^{5}}$ gradient steps for training the policy. For all domains and base architectures, QCS uses a dropout rate of 0.1, ReLU as the nonlinearity function, a weight decay of 1e-4, and a LambdaLR scheduler [33] with a linear warmup of $10^{4}$ gradient steps. In addition, we use a context length $K$ of 20 for DT-based QCS, 8 for DC-based QCS, and 1 for MLP-based QCS. We found that the impact of action information and positional embedding on performance was negligible, so we excluded them from training. In QCS-R, we set our target RTG to the highest trajectory return in the dataset. For the MuJoCo and Adroit domains, we evaluate the target RTG at double this value. In the AntMaze domain, we test it at 100 times the value. This method aims to leverage the RTG generalization effect observed by Kim et al. [20]. We then report the best score achieved across the two target RTGs. From Table 14 to 15, we provide detailed hyperparameter settings for actor training. ", "page_idx": 24}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/f36b98a49cf884ee96ed8e27d0b85c023cb775f69a974766002bbe5747a74aa9.jpg", "table_caption": ["Table 14: Per-domain hyperparameters of DTbased QCS and DC-based QCS. "], "table_footnote": [], "page_idx": 24}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/c75f0b1c224f5acbca90b1b261528ab24b59e0727c159900d752f2582b41552f.jpg", "table_caption": ["Table 15: Per-domain hyperparameters of MLPbased QCS. "], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "QCS Weight Relative to Trajectory Return. Our analysis suggests setting the QCS weight $w(R(\\tau))$ as a continuous, monotone-decreasing function of the trajectory return $R(\\tau)$ . We explored various functional forms, including linear, quadratic, and exponential decay, but found that a simple linear decay $w(R(\\tau))\\;=\\;\\lambda\\,(R^{\\ast}\\,\\bar{-}\\,R(\\tau))$ suffices. In addition, we found that for some datasets, clipping $w(R(\\tau))$ to a minimum of 10 is beneficial, particularly for walker2d-medium-expert and QCS-R AntMaze, except umaze-diverse. The choice of $\\lambda$ for each dataset is presented in Table 16 to 18. ", "page_idx": 24}, {"type": "table", "img_path": "3HpgVs22UJ/tmp/f2bd896d0baadeced26860b92c353f21fcde2cb3eb469cf131683b9cf5415f87.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "K Training Time ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "We compare QCS training time complexity with IQL [23], CQL [25], and QDT [53]. QCS requires a pre-trained Q learned using the IQL method, while QDT requires a pre-trained Q learned using the CQL method. Therefore, the time was measured by incorporating the Q pretraining time for both algorithms. ", "page_idx": 24}, {"type": "text", "text": "The training times for IQL, CQL, QDT, and QCS are as follows: IQL - 80 min, CQL - 220 min, QDT - $400\\;\\mathrm{min}$ , and QCS - 215 min. ", "page_idx": 24}, {"type": "text", "text": "The results show that QCS takes longer than IQL but has a total time similar to CQL. Notably, compared to QDT, which requires CQL pretraining, QCS can be trained in nearly half the time but demonstrates superior performance to QDT as shown in our main results in Table 2. ", "page_idx": 25}, {"type": "text", "text": "L Limitations ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "In this paper, we leveraged the complementary relationship between RCSL and $Q$ -function overgeneralization to determine the QCS weight as a linear function of the trajectory return, which is readily obtainable from the dataset. This approach was tested on MuJoCo, AntMaze, and Adroit, where it showed promising results. However, depending on the task, a more advanced method that can efficiently evaluate $Q$ -functions\u2019s over-generalization and provide appropriate $Q$ -aid might be necessary. Additionally, this method entails the extra burden of pre-training the $Q$ -function. ", "page_idx": 25}, {"type": "text", "text": "M Borader Impacts ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "This research is centered on enhancing the strengths of two promising approaches in the field of offilne reinforcement learning: RCSL and value-based methods. By overcoming each of their limitations and creating better trajectories than the maximum quality trajectories of existing datasets, it contributes to the advancement of offline reinforcement learning. As foundational research in machine learning, this study does not lead to negative societal outcomes. ", "page_idx": 25}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: The abstract and introduction reflect all contributions in the paper well. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 26}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Justification: See Appendix L. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 26}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 26}, {"type": "text", "text": "Justification: The paper does not deal with theoretical results. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 27}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: See Appendix J. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 27}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: The project page is available at https://beanie00.com/publications/ qcs. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 28}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: See Section 6.1 and Appendix J. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 28}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: In our main experimental results, Table 2 and Table 3 in Section 6, and Table 7 in Appendix G, we provide the mean and standard deviations for the five random seeds. Moreover, we provide the training curves in Fig. 12 in Appendix I. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 28}, {"type": "text", "text": "", "page_idx": 29}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: See Appendix K. Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 29}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: The authors have read the https://neurips.cc/public/ EthicsGuidelines and ensured that this paper conforms to it. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 29}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: See Appendix M. Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 29}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: This paper poses no such risks. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 30}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: See Appendix E.1 and J. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 30}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 31}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: See our anonymized zip file. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 31}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 31}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 31}]