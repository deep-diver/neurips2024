[{"figure_path": "dVqZ0a7LdP/figures/figures_1_1.jpg", "caption": "Figure 1: Simplified architecture of the proposed ReMAP. The corrupt inputs Xamp from the individuals with mobility challenges are mapped to clean inputs Xcorr computed from able-bodied individuals, and the corrected inputs are used to produce the desired motion variables for the individuals with mobility challenges \u0177amp using a frozen foundation module pretrained for able-bodied subjects.", "description": "This figure illustrates the ReMAP architecture, showing how it adapts a model pretrained on able-bodied data to predict motion for individuals with mobility impairments.  The 'Refurbish module' maps impaired inputs (Xamp) to corrected inputs (Xcorr) using a 'Template mapping' process which finds similar able-bodied data.  These corrected inputs are then fed into the frozen 'Foundation module' which generates the predicted motion (\u0177amp).", "section": "4 Method"}, {"figure_path": "dVqZ0a7LdP/figures/figures_1_2.jpg", "caption": "Figure 2: Illustration of computation of the correction input Xcorr corresponding to the k-th input sample Xamp of the mobility-impaired individual. The able-bodied input Xab that produces the most similar output as that of the desired mobility-impaired individual output yamp is searched in the input-output space of the trained able-bodied foundation module. Instead of searching based on a single desired motion variable yk, a sequence of values {yam, ...,yamp,...,yk+m} (marked by the red region in the lower left curve) is used and the able-bodied input Xab corresponding to the midpoint of the sequence is considered. Further, a neighborhood of radius e is considered around Xab and the correction input Xcorr is computed as a weighted sum of samples in this neighborhood with weights decreasing (linearly or exponentially) with increasing distance from the center Xab.", "description": "This figure illustrates how the correction input (Xcorr) for a mobility-impaired individual is calculated.  It leverages the pre-trained able-bodied model's input-output space.  Instead of finding a single able-bodied input matching the desired output, it uses a sequence of outputs to find a more robust matching input.  Finally, it averages the inputs within a small radius (epsilon-neighborhood) of the best match, weighting closer points more heavily.", "section": "Retrieval-augmented template mapping"}, {"figure_path": "dVqZ0a7LdP/figures/figures_7_1.jpg", "caption": "Figure 3: Effect of foundation model architecture on the performance for different training strategies. (task-shared: model with shared backbone and a common prediction head for all tasks, task-specific: model with shared backbone and task-specific heads)", "description": "This figure compares the performance of models with different architectures (task-shared vs. task-specific) across various training strategies.  Task-shared models use a single prediction head for all tasks, while task-specific models use separate heads for each task. The results show how the architecture interacts with different training methods (direct mapping, target-based, neighbor search, hybrid methods using both neighbor search and network inversion) and varying training dataset sizes, ultimately impacting the accuracy of motion prediction.", "section": "5.2 Ablation results"}, {"figure_path": "dVqZ0a7LdP/figures/figures_7_2.jpg", "caption": "Figure 4: (Left) Effect of weightage \u03b2 of the target-based loss on the performance of models with task-specific prediction heads trained with hybrid strategy for refurbishing. The weightage \u03b1 of input-based loss is set to be 1. The blue curve on the left (\u03b1 = 1, \u03b2 = 0) represents purely neighbor-based refurbishing. (Right) Effect of sequence length 2m + 1 and number of nearest neighbors n on the performance of models with shared and task-specific prediction heads trained using input-based and hybrid strategies. For hybrid strategy, \u03b1 = 1 and \u03b2 = 20 was selected. The combination which gave the best prediction performance in each case is marked with a red square (Please note that there exists multiple combinations which gave similar accuracies).", "description": "This figure analyzes the impact of different hyperparameters on the model's performance. The left panel shows how the weighting of the target-based loss in the hybrid training strategy affects the performance, particularly for models with task-specific prediction heads. The right panel investigates the effect of sequence length and the number of nearest neighbors considered when computing correction templates using either neighbor-based or hybrid strategies. It highlights the optimal hyperparameter combinations for improved prediction accuracy.", "section": "5.2 Ablation results"}, {"figure_path": "dVqZ0a7LdP/figures/figures_8_1.jpg", "caption": "Figure 5: (Left) Performance of models trained with different strategies. For hybrid strategies, \u03b1 = 1 and \u03b2 = 20 was selected. For neighbor-based strategies, m and n were selected based on the best-performing values computed in the previous section. (Right) The correction template Xcorr computed using different strategies and the corresponding predictions from the refurbish module. For target-based strategy, no correction template was computed, and the visualization shows the output of the refurbish module in this case.", "description": "This figure shows the performance comparison of different training strategies for the proposed ReMAP model in predicting motion for lower-limb impaired individuals. The left panel shows the R-squared values for three training strategies (direct mapping, hybrid (neighbor), hybrid (inversion)) across various training data sizes.  The right panel visualizes the correction templates (Xcorr) and corresponding predictions from the refurbish module (Predicted Xcorr) for each of the training strategies, and also shows the actual target (Yamp) values.", "section": "5 Experiments"}]