[{"type": "text", "text": "Dual Cone Gradient Descent for Training Physics-Informed Neural Networks ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Youngsik Hwang Artificial Intelligence Graduate School UNIST hys3835@unist.ac.kr ", "page_idx": 0}, {"type": "text", "text": "Dong-Young Lim\u2217   \nDepartment of Industrial Engineering   \nArtificial Intelligence Graduate School UNIST dlim@unist.ac.kr ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Physics-informed neural networks (PINNs) have emerged as a prominent approach for solving partial differential equations (PDEs) by minimizing a combined loss function that incorporates both boundary loss and PDE residual loss. Despite their remarkable empirical performance in various scientific computing tasks, PINNs often fail to generate reasonable solutions, and such pathological behaviors remain difficult to explain and resolve. In this paper, we identify that PINNs can be adversely trained when gradients of each loss function exhibit a significant imbalance in their magnitudes and present a negative inner product value. To address these issues, we propose a novel framework for multi-objective optimization, Dual Cone Gradient Descent (DCGD), which adjusts the direction of the updated gradient to ensure it falls within a dual cone region. This region is defined as a set of vectors where the inner products with both the gradients of the PDE residual loss and the boundary loss are non-negative. Theoretically, we analyze the convergence properties of DCGD algorithms in a non-convex setting. On a variety of benchmark equations, we demonstrate that DCGD outperforms other optimization algorithms in terms of various evaluation metrics. In particular, DCGD achieves superior predictive accuracy and enhances the stability of training for failure modes of PINNs and complex PDEs, compared to existing optimally tuned models. Moreover, DCGD can be further improved by combining it with popular strategies for PINNs, including learning rate annealing and the Neural Tangent Kernel (NTK). Codes are available at https://github.com/youngsikhwang/Dual-Cone-Gradient-Descent. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Physics-informed Neural Networks (PINNs) proposed in Raissi et al. [1] have created a new paradigm in deep learning for solving forward and inverse problems involving partial differential equations (PDEs). The key idea of PINNs is to integrate physical constraints, governed by PDEs, into the loss function of neural networks. This is in turn equivalent to finding optimal parameters for the neural network by minimizing a loss function that combines boundary loss and PDE residual loss. Thanks to their strong approximation ability and mesh-free advantage, PINNs have achieved great success in a wide range of applications [2\u20138]. ", "page_idx": 0}, {"type": "text", "text": "Building upon this success, the applications of PINNs have been extended to solve other functional equations, including integro-differential equations [9], fractional PDEs [10], and stochastic PDEs [11]. Moreover, numerous variants of PINNs have been developed to enhance their computational efficiency and accuracy via domain decomposition methods [12, 13], advanced neural network architectures [14\u201318], modified loss functions [19\u201321], different sampling strategies [22\u201324], and probabilistic PINNs [25, 26]. Recent studies have also explored optimizing PINNs by leveraging function space geometry, providing an alternative perspective to enhance accuracy and computational efficiency [27, 28]. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Despite these achievements, several studies have reported that PINNs often fail to learn correct solutions for given problems ranging from highly complex to relatively simple PDEs [29\u201331]. Due to the unclear nature of pathologies in the training of PINNs, it has become a critical research topic to explain and mitigate these phenomena. For example, [32, 33] observed that PINNs tends to get stuck at trivial solutions while violating given PDE constraints over collocation points. The imbalance between PDE residual loss and boundary loss was explored in Wang et al. [30], and a spectral bias of PINNs was studied in Wang et al. [31]. Yao et al. [34] discussed the gap between the loss function and the actual performance. Even with the insights from the aforementioned studies, a comprehensive understanding of PINN\u2019s failure modes remains largely unexplored in various scenarios. ", "page_idx": 1}, {"type": "text", "text": "In this paper, we explore these challenges from a novel perspective of multi-objective optimization. We first provide a geometric analysis showing that PINNs can be adversely trained when the gradients of each loss function exhibit a significant imbalance in their magnitudes, coupled with a negative inner product value. Based on this finding, we characterize a dual cone region where both PDE residual loss and boundary loss can be decreased simultaneously without the adverse training phenomenon. We then propose a novel optimization framework, Dual Cone Gradient Descent (DCGD), for training PINNs which updates the gradient direction to be contained in the dual cone region at each iteration. Furthermore, we study the convergence properties of DCGD in a non-convex setting. In particular, we find that DCGD can converge to a Pareto-stationary point. We validate the superior empirical performance and universal applicability of DCGD through extensive experiments. ", "page_idx": 1}, {"type": "text", "text": "2 Preliminaries ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Notation. The Euclidean scalar product is denoted by $\\langle\\cdot,\\,\\cdot\\rangle$ , with $\\|\\cdot\\|$ standing for the Euclidean norm (where the dimension of the space may vary depending on the context). For a subspace $W$ of a vector space $V$ , its orthogonal complement $\\overrightharpoon{W}^{\\perp}$ is defined as ", "page_idx": 1}, {"type": "equation", "text": "$$\nW^{\\perp}:=\\{v\\in V|\\langle u,\\,v\\rangle=0,\\quad u\\in W\\}.\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "For a vector $v\\,\\in\\,V$ , the projection of $v$ on a nontrivial subspace $W$ is denoted by $v_{\\parallel W}$ . Unless otherwise specified, $V$ represents $\\mathbb{R}^{d}$ throughout the paper. ", "page_idx": 1}, {"type": "text", "text": "Related Works. Among various research directions in PINNs, we focus on reviewing optimization strategies for PINNs. These can be broadly categorized into three main approaches: adaptive loss balancing, gradient manipulation, and Multi-Task Learning (MTL). As an example of adaptive loss balancing algorithms, Wang et al. [30] proposed a learning rate annealing (LRA) algorithm that balances the loss terms by utilizing gradient statistics. Wang et al. [31] utilized the eigenvalues of the Neural Tangent Kernel (NTK) to address the disparity in convergence rates among different losses of PINNs. For gradient manipulation algorithms, the Dynamic Pulling Method (DPM) was proposed in [35] to prioritize the reduction of the PDE residual loss. In [36], the authors used the PCGrad algorithm, proposed in [37], for training PINNs to address multi-task learning challenges. Li et al. [38] developed an adaptive gradient descent algorithm (AGDA) that resolves the conflict by projecting boundary condition loss gradient to the normal plane of the PDE residual loss gradient. Yao et al. [34] recently developed MultiAdam, a scale-invariant optimizer, to mitigate the domain scaling effect in PINNs. Another important line of gradient manipulation involves Multi-Task Learning (MTL) algorithms, which optimize a single model to perform multiple tasks simultaneously [39, 40, 37, 41\u201344]. We will discuss that several MTL algorithms can be unified within the proposed DCGD framework. ", "page_idx": 1}, {"type": "text", "text": "Physics-Informed Neural Networks. Let $\\Omega\\subseteq\\mathbb{R}^{D}$ be a domain and $\\partial\\Omega$ be the boundary of $\\Omega$ . We consider the following nonlinear PDEs: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\mathcal{N}[u](\\pmb{x})=f(\\pmb{x}),}&{{}\\pmb{x}\\in\\Omega}\\\\ {\\mathcal{B}[u](\\pmb{x})=g(\\pmb{x}),}&{{}\\pmb{x}\\in\\partial\\Omega}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "where $\\mathcal{N}$ and $\\boldsymbol{\\mathrm{\\Delta}}\\boldsymbol{\\mathrm{\\Omega}}_{\\boldsymbol{B}}$ denote a nonlinear differential operator and a boundary condition operator, respectively. We approximate $u({\\boldsymbol{x}})$ by a deep neural network $u(\\pmb{x};\\pmb{\\theta})$ parameterized by $\\theta$ . To train the ", "page_idx": 1}, {"type": "text", "text": "neural network, the framework of PINNs minimizes the total loss function ${\\mathcal{L}}(\\theta)$ , which is a weighted sum of PDE residual loss ${\\mathcal{L}}_{r}(\\theta)$ and boundary condition loss $\\mathcal{L}_{b}(\\theta)$ , defined by: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{c}{\\displaystyle\\mathcal{L}(\\theta):=\\omega_{r}\\mathcal{L}_{r}(\\theta)+\\omega_{b}\\mathcal{L}_{b}(\\theta)\\quad\\mathrm{with}\\qquad\\qquad\\qquad\\qquad\\quad(2),}\\\\ {\\displaystyle\\mathcal{L}_{r}(\\theta):=\\frac{1}{N_{r}}\\sum_{i=1}^{N_{r}}|\\mathcal{N}[u(\\cdot;\\theta)](x_{r}^{i})-f(x_{r}^{i})|^{2},\\quad\\mathscr{L}_{b}(\\theta):=\\displaystyle\\frac{1}{N_{b}}\\sum_{i=1}^{N_{b}}|\\mathcal{B}[u(\\cdot;\\theta)](x_{b}^{i})-g(x_{b}^{i})|^{2},}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\omega_{r},\\omega_{b}\\,\\geq\\,0$ are weights of each loss term, $\\{\\pmb{x}_{r}^{i}\\}_{i=1}^{N_{r}}$ denotes a set of collocation points that are randomly sampled in $\\Omega$ , and $\\{\\pmb{x}_{b}^{i}\\}_{i=1}^{N_{b}}$ the boundary sample points. Here, we set $\\omega_{r}=\\omega_{b}=1$ throughout the paper. We note that the training of PINNs falls into the category of multi-objective learning due to its structure of the loss function ${\\mathcal{L}}(\\theta)$ in Eq. (2.2). ", "page_idx": 2}, {"type": "text", "text": "3 Empirical Observations and Issues in Training PINNs ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "This section investigates issues that are frequently observed during the training of PINNs in the context of multi-objective learning. The parameter for the PINN solution $u(\\pmb{x};\\pmb{\\theta})$ is typically estimated by minimizing the total loss function ${\\mathcal{L}}(\\theta)$ with a (stochastic) gradient descent method2: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\theta_{t+1}=\\theta_{t}-\\lambda\\nabla\\mathcal{L}(\\theta_{t}),\\quad t\\in\\mathbb{N}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\nabla{\\mathcal{L}}(\\theta)$ is the gradient of the total loss function ${\\mathcal{L}}(\\theta)$ with respect to $\\theta$ . However, a careless adoption of standard gradient descent methods may lead to an incorrect solution, as reducing the total loss does not necessarily imply a decrease in both the PDE residual loss and boundary loss. This phenomenon is clearly illustrated in Figure 1, which displays the curves of the total loss, PDE residual loss, and boundary loss over epochs for solving the viscous Burger\u2019s equation. Notably, while the total loss consistently decreases throughout the training, the PDE loss adversely increases. ", "page_idx": 2}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/a9f0380bad69f2b331649385789bf3b5a5e156d7fc256bb17808ffcc4024f6d1.jpg", "img_caption": ["Figure 1: Training curves for the total loss $\\mathcal{L}$ $\\mathcal{C}\\left(:=\\mathcal{L}_{r}+\\mathcal{L}_{b}\\right)$ ), PDE residual loss ${\\mathcal{L}}_{r}$ , and boundary loss $\\mathcal{L}_{b}$ for viscous Burgers\u2019 equation. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Confilcting and dominating gradients in PINNs. This issue is highly related with discrepancies in the direction and magnitude between two gradients of the PDE residual and boundary loss. Specifically, we define two gradients to be conflicting at the $t$ -th iteration if they have a negative inner product value, i.e., $\\begin{array}{r}{\\frac{\\pi}{2}<\\phi_{t}\\leq\\pi}\\end{array}$ where $\\phi_{t}$ is the angle between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ . When there are conflicting gradients, parameter updates to minimize one loss function might increase the other, leading to an inefficient learning process such as oscillating between optimizing for the two loss functions and resulting in degraded solution quality [19]. Another problem arises when one gradient is much larger than the other, i.e., $\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|\\ll\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|$ or $\\|\\bar{\\nabla}\\mathcal{L}_{r}({\\boldsymbol{\\theta}}_{t})\\|\\gg\\|\\nabla\\mathcal{L}_{b}({\\boldsymbol{\\theta}}_{t})\\|$ . The significant differences3in the magnitudes of gradients in PINNs might create a situation where the optimization algorithm primarily minimizes one loss function while neglecting the other. This often results in slow convergence and overshooting, as the smaller gradient, though neglected, may be more crucial in finding a better solution. To mitigate the imbalance in the gradients, loss balancing approaches to rescale the weights of each loss term have been proposed [30, 31]. ", "page_idx": 2}, {"type": "text", "text": "To examine these challenges in training PINNs, we record cosine value of the angle between $\\nabla{\\mathcal{L}}_{r}$ and $\\nabla\\mathcal{L}_{b}$ , and the ratios of their magnitudes while training a PINN for the Helmholtz equation. Figure 2(a) shows that conflicting gradients are observed in about half of the total iterations. Moreover, we observe that the magnitude of the gradient of the PDE residual is several tens to hundreds of times larger than that of the boundary loss (See Figure 2(b)). That is, confilcting and dominating gradients are prevalent issues in the training of PINNs. ", "page_idx": 2}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/f2efeaadbecc04257020e4afc723cf8fac63f4364b86c1aa553f7505f26cca3d.jpg", "img_caption": ["Figure 2: Conflicting and dominating gradients in PINNs. Here, $\\phi$ is defined as the angle between $\\nabla{\\mathcal{L}}_{r}$ and $\\nabla\\mathcal{L}_{b}$ , $R=\\frac{\\|\\nabla\\mathcal{L}_{r}\\|}{\\|\\nabla\\mathcal{L}_{b}\\|}$ is the magnitude ratio between gradients. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "4 Methodology ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we provide a geometric analysis to identify a dual cone region where both the PDE residual loss and the boundary loss can decrease simultaneously. Subsequently, we introduce a general framework for DCGD algorithms, ensuring that the updated gradient falls within this region. We then propose three specifications of DCGD algorithms: projection, average, and center. All proofs for main results in this section can be found in Appendix A. ", "page_idx": 3}, {"type": "text", "text": "4.1 Dual Cone Region ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "The concept of a dual cone plays a pivotal role in our DCGD algorithm. Formally, a dual cone is defined as a set of vectors that have nonnegative inner product values with a given cone. ", "page_idx": 3}, {"type": "text", "text": "Definition 4.1. (Dual cone) Let $\\mathbf{K}$ be a cone of $\\mathbb{R}^{d}$ . Then, the set ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{K}^{*}=\\{y|\\langle x,\\,y\\rangle\\geq0\\quad{\\mathrm{for~all~}}x\\in\\mathbf{K},y\\in\\mathbb{R}^{d}\\}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "is called the dual cone of $\\mathbf{K}$ . ", "page_idx": 3}, {"type": "text", "text": "For each iteration $t$ , consider a cone denoted by $\\mathbf{K}_{t}$ , which is generated by rays of two gradients, $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla{\\mathcal{L}}_{b}(\\theta_{t})$ : ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{K}_{t}:=\\{c x|c\\geq0,x\\in\\{\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\nabla\\mathcal{L}_{b}(\\theta_{t})\\}\\}\\,.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "In the context of PINNs, the dual cone of $\\mathbf{K}_{t}$ , denoted by $\\mathbf{K}_{t}^{*}$ , represents the set of gradient vectors where each vector is neither confilcting with the gradient of the PDE loss nor with the gradient of the boundary loss, i.e., for $u\\in\\mathbf{K}_{t}^{*}$ , $\\langle u,\\,\\bar{\\nabla}{\\mathcal L}_{r}(\\theta_{t})\\rangle\\geq0$ and $\\langle u,\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle\\geq0.$ . ", "page_idx": 3}, {"type": "text", "text": "In other words, when the total gradient $\\nabla{\\mathcal{L}}(\\theta_{t})$ is in $\\mathbf{K}_{t}^{*}$ (as depicted by the region of the red line in Figure 1), the standard gradient descent taking the direction $\\nabla{\\mathcal{L}}(\\theta_{t})$ will decrease both the PDE and boundary losses for a suitable step size. On the other hand, if $\\nabla\\mathcal{L}(\\boldsymbol{\\theta}_{t})\\notin\\mathbf{K}_{t}^{*}$ (the region indicated by the blue line in Figure 1), one of the two losses will adversely increase even with sufficiently small step sizes. ", "page_idx": 3}, {"type": "text", "text": "This indicates that the training process of PINNs can significantly vary depending on whether the total gradient belongs to the dual cone region. The following theorem establishes the necessary and sufficient conditions under which the total gradient falls within the dual cone region in terms of the angle and relative magnitude between the gradients of the PDE residual and boundary loss. ", "page_idx": 3}, {"type": "text", "text": "Theorem 4.2. Suppose that $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ are given at each iteration $t$ . Let $\\phi_{t}$ be the angle between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ , and $\\begin{array}{r}{R\\,=\\,\\frac{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|}}\\end{array}$ be their relative magnitude. Then, $\\nabla{\\mathcal{L}}(\\theta_{t})\\in\\mathbf{K}_{t}^{*}$ if and only if ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{(i)~\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),~\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\ge0\\,,\\,o r}\\\\ &{(i i)~\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),~\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle<0\\,a n d\\,-\\cos\\phi_{t}\\le R\\le-\\frac{1}{\\cos\\phi_{t}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Theorem 4.2 provides a clear criterion for when confilcting and dominating gradients lead to adverse training in PINNs. For instance, the condition (ii) in Theorem 4.2 implies that the larger $\\phi_{t}$ (the more confilcting they are), even a slight difference in their magnitudes can result in adverse training. In particular, Theorem 4.2 quantifies the extent of problematic relative magnitude between the two gradients, thereby clarifying the concept of dominating gradients, which has not been previously defined in the literature. ", "page_idx": 3}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/d3d4131c5a8b3b0e9e93e862293d216d68e14a61483335e3c7de5d3694318488.jpg", "img_caption": ["Figure 3: Visualization of dual cone region $\\mathbf{K}_{t}^{*}$ and its subspace $\\mathbf{G}_{t}$ "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "Thus, our strategy aims to devise an algorithm that chooses the updated gradient within the dual cone region at each gradient descent step. For notational simplicity, we write $\\nabla_{t}\\mathcal{L}_{\\parallel\\nabla{\\mathcal{L}}_{r}^{\\perp}}$ and $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ to represent $\\nabla\\mathcal{L}(\\theta_{t})_{\\parallel(\\nabla\\mathcal{L}_{r}(\\theta_{t}))^{\\perp}}$ and $\\nabla\\mathcal{L}(\\theta_{t})_{\\parallel(\\nabla\\mathcal{L}_{b}(\\theta_{t}))^{\\perp}}$ , respectively. In particular, we are interested in a simple and explicit subspace $\\mathbf{G}_{t}$ , defined as the set of conic combinations of $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{r}^{\\perp}}$ and \u2207tL\u2225\u2207Lb\u22a5 : ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf G_{t}:=\\left\\{c_{1}\\nabla_{t}\\mathcal L_{\\|\\nabla{L}_{r}^{\\perp}}+c_{2}\\nabla_{t}\\mathcal L_{\\|\\nabla{\\mathcal L}_{b}^{\\perp}}\\big|c_{1},c_{2}\\geq0\\right\\},}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "for two reasons. Firstly, all vectors in $\\mathbf{G}_{t}$ are easily computable due to the explicit expression of $\\mathbf{G}_{t}$ , whereas the dual cone $\\mathbf{K}^{*}$ is implicitly defined. Secondly, $\\mathbf{G}_{t}$ contains two important components of $\\mathbf{K}_{t}^{*}$ , which are the projections of $\\nabla{\\mathcal{L}}(\\theta_{t})$ onto $\\nabla\\mathcal{L}_{r}(\\theta_{t}\\big)^{\\perp}$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})^{\\perp}$ by its construction. The next proposition shows that $\\mathbf{G}_{t}$ always belongs to the dual cone region as illustrated in Figure 3. ", "page_idx": 4}, {"type": "text", "text": "Proposition 4.3. Suppose that $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla{\\mathcal{L}}_{b}(\\theta_{t})$ are given at each iteration $t$ . Consider $\\mathbf{G}_{t}$ , the set of conic combinations of $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{r}^{\\perp}}$ and $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ , defined in Eq. (4.1). Then, $\\mathbf{G}_{t}\\subseteq\\mathbf{K}_{t}^{*}$ . ", "page_idx": 4}, {"type": "text", "text": "Consequently, the DCGD algorithm defines the updated gradient denoted by $g_{t}^{\\mathrm{dual}}$ within $\\mathbf{G}_{t}$ at each iteration $t$ . A general framework for DCGD is presented in Algo 1. ", "page_idx": 4}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/a4a8c0cfaa21fca03e4085d4cd2a31b238ce9a45f458eff32e79fd55a9ba7eec.jpg", "table_caption": [], "table_footnote": [], "page_idx": 4}, {"type": "text", "text": "4.2 Convergence Analysis ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "To discuss the convergence properties of DCGD, we introduce the concept of Pareto optimality (adapted to the PINN setting), which is a key in multi-objective optimization [46, 40]. ", "page_idx": 4}, {"type": "text", "text": "Definition 4.4. (Pareto optimal and stationary) A point $\\theta\\in\\ensuremath{\\mathbb{R}}^{d}$ is said to be Pareto-optimal if there does not exist $\\theta^{\\prime}\\in\\mathbb{R}^{d}$ such that ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{r}(\\theta^{\\prime})\\leq\\mathcal{L}_{r}(\\theta)\\quad\\mathrm{and}\\quad\\mathcal{L}_{b}(\\theta^{\\prime})\\leq\\mathcal{L}_{b}(\\theta).}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In addition, a point $\\theta\\in\\ensuremath{\\mathbb{R}}^{d}$ is said to be Pareto-stationary if there exists $\\alpha_{1},\\alpha_{2}$ such that ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\alpha_{1}\\nabla\\mathcal{L}_{r}(\\theta)+\\alpha_{2}\\nabla\\mathcal{L}_{b}(\\theta)=0,\\quad\\alpha_{1},\\alpha_{2}\\geq0,\\quad\\alpha_{1}+\\alpha_{2}=1.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Intuitively, a Pareto-stationary point implies there is no feasible descent direction that would decrease all loss functions simultaneously. For example, consider a point $\\theta_{t}$ at which the cosine of the angle $\\phi_{t}$ between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla{\\mathcal{L}}_{b}({\\dot{\\theta}}_{t})$ is $-1$ , i.e., $\\cos(\\phi_{t})=-\\bar{1}$ . Such a point is Pareto-stationary. ", "page_idx": 4}, {"type": "text", "text": "The following theorem guarantees the convergence of the DCGD algorithm proposed in Algo 1 under some regularities in a non-convex setting. Assume $\\textstyle{\\mathcal{L}}(\\theta^{*}):=\\operatorname*{inf}_{\\theta\\in\\mathbb{R}^{d}}{\\mathcal{L}}(\\theta)^{-}>{\\mathrm{-}}\\infty$ . ", "page_idx": 5}, {"type": "text", "text": "Theorem 4.5. Assume that both loss functions, $\\mathcal{L}_{b}(\\cdot)$ and $\\mathcal{L}_{r}(\\cdot)$ , are differentiable and the total gradient $\\nabla{\\mathcal{L}}(\\cdot)$ is $L$ -Lipschitz continuous with $L>0$ . If $g_{t}^{d u a l}$ satisfies the following two conditions: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathit{\\Omega}^{\\left(i\\right)}\\mathrm{\\Omega}^{2}\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\;g_{t}^{d u a l}\\rangle-\\|g_{t}^{d u a l}\\|^{2}\\geq0,\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "then, for $\\begin{array}{r}{\\lambda\\le\\frac{1}{2L}}\\end{array}$ , DCGD in Algo. 1 converges to a Pareto-stationary point, or converges as ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\frac{1}{T+1}\\sum_{t=0}^{T}\\|\\nabla\\mathcal{L}(\\theta_{t})\\|^{2}\\leq\\frac{2\\left(\\mathcal{L}(\\theta_{0})-\\mathcal{L}(\\theta^{*})\\right)}{\\lambda M(T+1)}.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Theorem 4.5 states that DCGD converges to either a Paret\u221ao-stationary point, characterized by $\\phi_{t}$ such that $\\cos(\\phi_{t})=-1$ , or a stationary point at a rate of ${\\mathcal{O}}(1/{\\sqrt{T}})$ in the nonconvex setting. Unlike singleobjective (nonconvex) optimization where the goal is to pursue a stationary point, in multi-objective optimization, it is ideal to find a Pareto-stationary point that balances all loss functions. Thus, DCGD offers significant theoretical and empirical advantages over popular optimization algorithms like SGD and ADAM, which are only guaranteed to converge to a stationary point. The convergence of DCGD to a Pareto-stationary point is empirically verified in Section 4.4. ", "page_idx": 5}, {"type": "text", "text": "4.3 Dual Cone Gradient Descent: Projection, Average, and Center ", "text_level": 1, "page_idx": 5}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/1250577ef56ed3eab416a4033bdb137aceb7d3922a2653ce4ed3d6f8e6915e62.jpg", "img_caption": ["Figure 4: The updated gradient $g_{t}^{\\mathrm{dual}}$ of three DCGD algorithms. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "Different variants of DCGD can be designed by properly choosing the updated gradient $g_{t}^{\\mathrm{dual}}$ in $\\mathbf{G}_{t}$ satisfying the conditions (i), (ii) of Theorem 4.5. We present three specific algorithms: projection, average, and center. ", "page_idx": 5}, {"type": "text", "text": "The first algorithm, named DCGD (Projection), uses the projection of the total gradient $\\nabla{\\mathcal{L}}(\\theta_{t})$ onto $\\mathbf{G}_{t}$ when $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}$ , which is the closest vector within $\\mathbf{G}_{t}$ to $\\nabla{\\mathcal{L}}(\\theta_{t})$ . Specifically, the DCGD (Projection) algorithm specifies $g_{t}^{\\mathrm{dual}}$ as follows: (i) $\\nabla{\\mathcal{L}}(\\theta_{t})$ if $\\nabla{\\mathcal{L}}(\\theta_{t})\\in\\mathbf{K}_{t}^{*}$ , (ii) $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{r}^{\\perp}}$ $(c_{1}=1,c_{2}=0)$ ) if $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}$ and $\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle<0.$ , (iii) $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ $(c_{1}=0,c_{2}=1)$ ) if $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}$ and $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle<0$ . See also Eq. (E.1) and Algo. 2. ", "page_idx": 5}, {"type": "text", "text": "DCGD (Average) algorithm takes the average of $\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\pmb{\\mathscr{L}}}_{r}^{\\perp}}$ and $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ when the total gradient is outside $\\mathbf{K}_{t}^{*}$ , i.e., $\\begin{array}{r}{c_{1}=c_{2}=\\frac{1}{2}}\\end{array}$ if $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}$ . See Eq. (E.2) and Algo. 3. ", "page_idx": 5}, {"type": "text", "text": "We note that both DCGD (Projection) and DCGD (Average) use $\\nabla{\\mathcal{L}}(\\theta_{t})$ as $g_{t}^{\\mathrm{dual}}$ without any manipulation when $\\nabla{\\mathcal{L}}(\\theta_{t})\\,\\in\\,{\\mathbf{K}}_{t}^{*}$ . Moreover, they require determining if the total gradient is contained in the dual cone at each iteration, which may incur additional computational costs. On the other hand, $g_{t}^{\\mathrm{dual}}$ of DCGD (Center) is given by ", "page_idx": 5}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{dual}}:=\\frac{\\langle g_{t}^{c},\\,\\nabla\\mathcal{L}(\\theta_{t})\\rangle}{\\|g_{t}^{c}\\|^{2}}g_{t}^{c}\\,\\,\\mathrm{where}\\,\\,g_{t}^{c}=\\frac{\\nabla\\mathcal{L}_{b}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|}+\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "which is geometrically interpreted as the projection of $\\nabla{\\mathcal{L}}(\\theta_{t})$ onto the angle bisector $g_{t}^{c}$ of $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ . The following proposition shows that $g_{t}^{\\mathrm{dual}}$ of DCGD (Center) resides within $\\mathbf{G}_{t}$ ", "page_idx": 5}, {"type": "text", "text": "Proposition 4.6. Consider the updated gradient $g_{t}^{d u a l}$ of DCGD (Center) defined in Eq. (4.3). Then, gtdual\u2208Gt. ", "page_idx": 5}, {"type": "text", "text": "The visualization of these three algorithms can be found in Figure 4 and their pseudocodes are provided in Appendix E. Moreover, the proposed DCGD algorithms satisfy the conditions (i) and (ii) of Theorem 4.5. Consequently, the following Corollary summarizes the convergence of the proposed DCGD algorithms. ", "page_idx": 6}, {"type": "text", "text": "Corollary 4.7. We impose the same assumptions as in Theorem 4.5. Then, DCGD (Projection), DCGD (Average), and DCGD (Center) converge to either a Pareto-stationary point or a stationary point. ", "page_idx": 6}, {"type": "text", "text": "In addition to the theoretical result in Corollary 4.7, Appendix D.1 provides an ablation study on the empirical performance of three specific algorithms for solving benchmark PDEs. ", "page_idx": 6}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/8a321b9b489614f750de33581202a2206bae056564f0422d1dcbb407da4c6c84.jpg", "img_caption": ["Figure 5: Distribution of $\\cos(\\varphi_{t}^{\\mathrm{max}})$ for each algorithm with $\\varphi_{t}^{\\mathrm{max}}=\\operatorname*{max}\\{\\varphi_{t}^{r},\\varphi_{t}^{b}\\}$ where $\\varphi_{t}^{r}$ is the angle between the updated vector and $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ , and $\\varphi_{t}^{b}$ is the angle between the updated vector and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ . "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "4.4 Benefits of the DCGD framework ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "This subsection discusses benefits of DCGD through illustrative examples. We first investigate how the proposed DCGD algorithms resolve the conflicting gradient issue discussed in Section 3. Given each algorithm, at each iteration $t$ , we define $\\varphi_{t}^{r}$ as the angle between the updated vector and $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ , and $\\varphi_{t}^{b}$ as the angle between the updated vector and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ . Also, let $\\varphi_{t}^{\\mathrm{max}}=\\operatorname*{max}\\{\\varphi_{t}^{r},\\varphi_{t}^{b}\\}$ . We highlight that both $\\varphi_{t}^{r}$ and $\\varphi_{t}^{b}$ are less than $\\pi/2$ under DCGD algorithms, as they ensure that the updated vectors always belong to the dual cone. Figure 5 plots the distributions of $\\cos(\\varphi_{t}^{\\operatorname*{max}})$ for four different optimization algorithms: ADAM, DCGD (Projection), DCGD (Average), and DCGD (Center) during the training of PINNs for solving the Helmholtz equation. It shows that three DCGD algorithms completely eliminate conflicting gradients in contrast to ADAM. Moreover, we observe that the distributions of $\\cos(\\varphi_{t}^{\\operatorname*{max}})$ for DCGD (Projection) and DCGD (Average) are highly skewed toward zero, which implies that one of the two losses is unlikely to significantly improve. On the contrary, DCGD (Center) has a bell-shaped distribution with a mean of about 0.719, indicating that the two gradients are more aligned. This leads to a continuous reduction in both losses in a harmonious manner. Consistent with this observation, DCGD (Center) consistently outperforms DCGD (Projection) and DCGD (Average) in our experiments. Please refer to the ablation study D.1 for further comparisons. ", "page_idx": 6}, {"type": "text", "text": "We empirically demonstrate that DCGD can converge to a Pareto-stationary point. Consider a (slightly modified) toy example shown in [37, 41], which has two objective functions; see Appendix C.2 for more details. We solve the problem with 1,600 uniformly sampled initial points using ADAM, DCGD (Projection), DCGD (Average), and DCGD (Center). Then, we mark with a red dot the point at which the algorithm fails to reach a Paretostationary point. Figure 6 shows that while ADAM does not reach a Pareto-stationary point across many areas, all DCGD algorithms achieve convergence to Paretostationary points throughout the entire space. ", "page_idx": 6}, {"type": "text", "text": "Several MTL algorithms, such as PCGrad [37], MGDA [40], CAGrad [41], Aligned-MTL [44], and ", "page_idx": 6}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/e71b99e091aeb11b0c3593e733f1b8b56d138fd9c611a8f2da29c424f57bedf6.jpg", "img_caption": ["Figure 6: Toy example: the region where the algorithm fails to reach a Paretostationary point in multi-objective optimization ", "(a) ADAM (b) DCGD "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "Nash-MTL [43] have been developed based on different and independent approaches. In contrast, the proposed DCGD framework provides a principled solution to the problem of conflicting gradients by directly characterizing the dual cone. As a result, our framework unifies many of these MTL algorithms as special cases, offering significant contributions not only to PINNs but also to the MTL domain. Proofs for the unification of MTL algorithms within the DCGD framework can be found in Appendix B. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "5 Numerical Experiment ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "This section demonstrates the superiority of DCGD through three distinct perspectives. In Section 5.1, we compare the performance of DCGD on five benchmark equations with that of a range of methods, including ADAM [45], Learning Rate Annealing (LRA) [30], Neural Tangent Kernel (NTK) [31], PCGrad [37], MGDA [40], CAGrad [41], Aligned-MTL [44], MultiAdam [34], and DPM [35]. Section 5.2 shows that DCGD can provide more accurate solutions for failure modes of PINNs and complex PDEs where vanilla PINNs fail. In Section 5.3, we explore the compatibility of DCGD with existing loss balancing schemes such as LRA and NTK. ", "page_idx": 7}, {"type": "text", "text": "To compare the effectiveness of DCGD with other optimization algorithms, we measure the accuracy of the PINN solution trained by each optimizer using the relative $L^{2}$ -error. Then, we run each experiment across 10 independent trials and report the mean, standard deviation, max, and min of the best accuracy. ", "page_idx": 7}, {"type": "text", "text": "5.1 Comparison on benchmark equations ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We solve three popular benchmark equations (the Helmholtz equation, the viscous Burgers\u2019 equation, and the Klein-Gordon equation) and two high-dimensional PDEs (5D-Heat equation and 3D-Helmholtz equation) using vanilla PINNs with different optimization techniques. For DCGD, we employ an adaptive gradient version of the DCGD (Center) algorithm, the DCGD (Center) combined with ADAM (see Algo 5) by default for all experiments, provided in Appendix D.1. For other methods, we perform careful hyperparameter tuning based on the recommendations in their papers. The PDE equations and detailed experimental setting are provided in Appendix C.4. However, we do not report the performance of DPM because it is not only highly sensitive to hyperparameters but also exhibit poor performance, consistently observed in [47]. ", "page_idx": 7}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/a374cc10bbce6848cc9267e9ab187792b32a781733a43e305435ff918568e637.jpg", "table_caption": ["Table 1: Average of relative $L^{2}$ errors in 10 independent trials for each algorithm on three benchmark PDEs (3 independent trials for two high-dimensional PDEs). The value within the parenthesis indicates the standard deviation. \u2018-\u2019 denotes that the optimizer failed to converge. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Table 1 displays the mean and standard deviation of the relative $L^{2}$ errors for each optimization algorithm applied to the three PDE equations. The error plots of approximated PINN solutions and other statistics of relative $L^{2}$ errors are summarized in Appendix C.4. In the result tables, we highlight the best and the second-best methods. While the second best methods vary across experiments, the proposed method consistently outperforms other algorithms achieving the lowest $L^{\\dagger}$ errors. This result underscores the robustness and adaptability of our method for solving various PDEs. ", "page_idx": 7}, {"type": "text", "text": "5.2 Failure mode of PINNs and Complex P(I)DEs ", "text_level": 1, "page_idx": 7}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/35e40a13a365703701083e6e10b51bf4bdbeb49acf3fb11148bf36bb334f34ba.jpg", "img_caption": ["Figure 7: Double pendulum problem: prediction of each method. SGD and ADAM find shifted solutions, but DCGD successfully approximates the reference solution. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "We explore more challenging problems, including failure modes of PINNs and complex PDEs, where vanilla PINNs fail to approximate solutions, and highlight the universal applicability of DCGD. We refer to Appendix C.5 for detailed experimental settings. ", "page_idx": 8}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/b7d1f194ebcf99d6a42ae322b268f70778477ebf48f10438af1b6d5b3794eed3.jpg", "table_caption": ["Table 2: Relative $L^{2}$ errors for DCGD (Center) on Chaotic KS equation, Convection equation and Volterra IDEs. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "First, we revisit the problem of a double pendulum in Steger et al. [32], which is highly sensitive to initial conditions. The goal is to solve the trajectory of $\\{(\\theta_{1}(t),\\theta_{2}(t))\\}_{t\\geq t_{0}}$ , governed by the nonlinear differential equation as discussed in Eq. (C.1). The reference solution and its first-order derivative are represented by the blue solid and dotted lines, respectively, in Figure 7. We train PINNs with SGD and ADAM to solve the double pendulum problem, where their solutions are depicted by the red solid and dotted lines in Figure 7a and Figure 7b, respectively. The PINN solutions trained with SGD and ADAM fail to accurately approximate the reference solution. In contrast, the reference solution is successfully recovered by our DCGD algorithm (see Figure 7c). Second, we present the performance of DCGD for two challenging PDEs: the chaotic Kuramoto-Sivashinsky (KS) equation and the convection equation. For the chaotic KS equation, we combine DCGD with the causal training scheme of [22], the current state-of-the art result. For the convection equation, DCGD is applied to PINNsFormer of [15]. As shown in Table 2, DCGD achieves the lowest relative $L^{2}$ errors for the complex PDEs compared to the existing optimally tuned strategies, demonstrating its effectiveness in overcoming failure modes of PINNs. Third, the universal applicability of DCGD is not limited to specific architectures, sampling techniques, and training schemes. For example, A-PINN, designed for solving integral equations and integro-differential equations, achieves state-of-the art results in nonlinear Volterra IDEs [9]. DCGD significantly improves the performance of A-PINN for solving Volterra IDEs, as shown in Table 2. Moreover, Table 4 shows that the performance of SPINN can be highly improved by applying DCGD for solving multi-dimensional PDEs. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "5.3 Compatibility of DCGD with existing methods ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "The proposed DCGD framework can be easily combined with existing PINN training strategies, including loss balancing methods. To illustrate this advantage, we have designed DCGD algorithms that integrate with LRA and NTK, named DCGD (Center) $^+$ LRA and DCGD (Center) $+\\;\\mathrm{NTK}$ , respectively. Please refer to Algo. 6 for the detailed implementation. ", "page_idx": 8}, {"type": "text", "text": "We apply DCGD (Center) $+\\,{\\mathrm{LRA}}$ and DCGD (Center) $^+$ NTK to the same experiments described in Section 5.1. Tables 1 and 3 demonstrate that the performance of DCGD algorithms can be further enhanced across all the experiments in terms of the mean, maximum, and minimum of relative $L^{2}$ errors by integrating existing ideas from the literature. ", "page_idx": 8}, {"type": "text", "text": "6 Conclusion and Discussion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In this work, we provided a clear criterion for when PINNs might be adversely trained, in terms of the angle and relative magnitude ratio of the gradients of the PDE residual and boundary loss, through a geometric analysis. Based on this theoretical insight, we characterized a dual cone region where both losses can decrease simultaneously without gradient pathologies. We then proposed a general framework for DCGD, which ensures that the updated gradient falls within the dual cone region, and provided a convergence analysis. Within this general framework, we introduced three specific DCGD algorithms and conduct extensive empirical experiments. Our experimental results demonstrate that the proposed DCGD algorithms outperform other optimization algorithms. In particular, DCGD is efficient in solving challenging problems such as failure modes of PINNs and complex PDEs compared to the current state-of-the art approaches. Furthermore, DCGD can be easily combined with other strategies and applied to variants of PINNs. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Although we have presented a novel optimization algorithm, DCGD, to address challenging issues in PINNs, there still remain some interesting and important questions. For instance, one could design a more powerful DCGD specification within the dual cone region that goes beyond the projection, average, and center techniques. Also, while we mainly consider multi-objective optimization for PINNs, future work can focus on more general and complex types of multi-task learning problems. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgement ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This work was supported by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT) (No.RS-2023-00253002), the Institute of Information & communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.2020- 0-01336, Artificial Intelligence Graduate School Program (UNIST)), and Startup Research Fund (1.220132.01) of UNIST (Ulsan National Institute of Science & Technology). ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal of Computational physics, 378:686\u2013707, 2019.   \n[2] Erik Laurin Strelow, Alf Gerisch, Jens Lang, and Marc E. Pfetsch. Physics informed neural networks: A case study for gas transport problems. Journal of Computational Physics, 481:112041, 2023. ISSN 0021-9991.   \n[3] Pushan Sharma, Wai Tong Chung, Bassem Akoush, and Matthias Ihme. A Review of Physics-Informed Machine Learning in Fluid Mechanics. Energies, 16(5):2343, 2023.   \n[4] Peter R. Wiecha, Arnaud Arbouet, Christian Girard, and Otto L. Muskens. Deep learning in nano-photonics: inverse design and beyond. Photon. Res., 9(5):B182\u2013B200, May 2021.   \n[5] Mahmudul Islam, Md Shajedul Hoque Thakur, Satyajit Mojumder, and Mohammad Nasim Hasan. Extraction of material properties through multi-fidelity deep learning from molecular dynamics simulation. Computational Materials Science, 188:110187, 2021.   \n[6] Jonthan D Smith, Zachary E Ross, Kamyar Azizzadenesheli, and Jack B Muir. HypoSVI: Hypocentre inversion with Stein variational inference and physics informed neural networks. Geophysical Journal International, 228(1):698\u2013710, 2022.   \n[7] Yogesh Verma, Markus Heinonen, and Vikas Garg. ClimODE: Climate Forecasting With Physics-informed Neural ODEs. In The Twelfth International Conference on Learning Representations, 2024.   \n[8] Yuyan Ni, Shikun Feng, Wei-Ying Ma, Zhi-Ming Ma, and Yanyan Lan. Sliced Denoising: A PhysicsInformed Molecular Pre-Training Method. arXiv preprint arXiv:2311.02124, 2023.   \n[9] Lei Yuan, Yi-Qing Ni, Xiang-Yun Deng, and Shuo Hao. A-PINN: Auxiliary physics informed neural networks for forward and inverse problems of nonlinear integro-differential equations. Journal of Computational Physics, 462:111260, 2022.   \n[10] Guofei Pang, Lu Lu, and George Em Karniadakis. fPINNs: Fractional physics-informed neural networks. SIAM Journal on Scientific Computing, 41(4):A2603\u2013A2626, 2019.   \n[11] Dongkun Zhang, Ling Guo, and George Em Karniadakis. Learning in modal space: Solving time-dependent stochastic PDEs using physics-informed neural networks. SIAM Journal on Scientific Computing, 42(2): A369\u2013A665, 2020.   \n[12] Ehsan Kharazmi, Zhongqiang Zhang, and George Em Karniadakis. hp-VPINNs: Variational physicsinformed neural networks with domain decomposition. Computer Methods in Applied Mechanics and Engineering, 374:113547, 2021.   \n[13] Ameya D Jagtap and George E Karniadakis. Extended Physics-informed Neural Networks (XPINNs): A Generalized Space-Time Domain Decomposition based Deep Learning Framework for Nonlinear Partial Differential Equations. In AAAI spring symposium: MLPS, volume 10, 2021.   \n[14] Benjamin Wu, Oliver Hennigh, Jan Kautz, Sanjay Choudhry, and Wonmin Byeon. Physics Informed RNN-DCT Networks for Time-Dependent Partial Differential Equations. In International Conference on Computational Science, pages 372\u2013379. Springer, 2022.   \n[15] Liyang Liu, Yi Li, Zhanghui Kuang, J Xue, Yimin Chen, Wenming Yang, Qingmin Liao, and Wayne Zhang. PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks. International Conference on Learning Representations, 2024.   \n[16] Woojin Cho, Kookjin Lee, Donsub Rim, and Noseong Park. Hypernetwork-based Meta-Learning for Low-Rank Physics-Informed Neural Networks. In Advances in Neural Information Processing Systems, 2023.   \n[17] Junwoo Cho, Seungtae Nam, Hyunmo Yang, Seok-Bae Yun, Youngjoon Hong, and Eunbyung Park. Separable Physics-Informed Neural Networks. In Advances in Neural Information Processing Systems, 2023.   \n[18] Jihun Han and Yoonsang Lee. Hierarchical learning to solve partial differential equations using physicsinformed neural networks. arXiv preprint arXiv:2211.08064v2, 2023.   \n[19] Jeremy Yu, Lu Lu, Xuhui Meng, and George Em Karniadakis. Gradient-enhanced physics-informed neural networks for forward and inverse PDE problems. Computer Methods in Applied Mechanics and Engineering, 393:114823, 2022.   \n[20] Hwijae Son, Sung Woong Cho, and Hyung Ju Hwang. Enhanced Physics-Informed Neural Networks with Augmented Lagrangian Relaxation Method (AL-PINNs). Neurocomputing, page 126424, 2023.   \n[21] Chuwei Wang, Shanda Li, Di He, and Liwei Wang. Is $L^{2}$ Physics Informed Loss Always Suitable for Training Physics Informed Neural Network? In Advances in Neural Information Processing Systems, volume 35, pages 8278\u20138290, 2022.   \n[22] Sifan Wang, Shyam Sankaran, and Paris Perdikaris. Respecting causality is all you need for training physics-informed neural networks. arXiv preprint arXiv:2203.07404, 2022.   \n[23] Chenxi Wu, Min Zhu, Qinyang Tan, Yadhu Kartha, and Lu Lu. A comprehensive study of non-adaptive and residual-based adaptive sampling for physics-informed neural networks. Computer Methods in Applied Mechanics and Engineering, 403:115671, 2023.   \n[24] Arka Daw, Jie Bu, Sifan Wang, Paris Perdikaris, and Anuj Karpatne. Mitigating Propagation Failures in Physics-informed Neural Networks using Retain-Resample-Release (R3) Sampling. In International Conference on Machine Learning, volume 202 of Proceedings of Machine Learning Research, pages 7264\u20137302. PMLR, 23\u201329 Jul 2023.   \n[25] Arnaud Vadeboncoeur, \u00d6mer Deniz Akyildiz, Ieva Kazlauskaite, Mark Girolami, and Fehmi Cirak. Fully probabilistic deep models for forward and inverse problems in parametric PDEs. Journal of Computational Physics, 491:112369, 2023.   \n[26] Arnaud Vadeboncoeur, Ieva Kazlauskaite, Yanni Papandreou, Fehmi Cirak, Mark Girolami, and \u00d6mer Deniz Akyildiz. Random Grid Neural Processes for Parametric Partial Differential Equations. In Proceedings of the 40th International Conference on Machine Learning, volume 202 of Proceedings of Machine Learning Research, pages 34759\u201334778, 23\u201329 Jul 2023.   \n[27] Johannes M\u00fcller and Marius Zeinhofer. Achieving High Accuracy with PINNs via Energy Natural Gradient Descent. In International Conference on Machine Learning, pages 25471\u201325485. PMLR, 2023.   \n[28] Johannes M\u00fcller and Marius Zeinhofer. Position: Optimization in SciML Should Employ the Function Space Geometry. In Forty-first International Conference on Machine Learning, 2024.   \n[29] Aditi Krishnapriyan, Amir Gholami, Shandian Zhe, Robert Kirby, and Michael W Mahoney. Characterizing possible failure modes in physics-informed neural networks. In Advances in Neural Information Processing Systems, volume 34, pages 26548\u201326560, 2021.   \n[30] Sifan Wang, Yujun Teng, and Paris Perdikaris. Understanding and mitigating gradient flow pathologies in physics-informed neural networks. SIAM Journal on Scientific Computing, 43(5):A3055\u2013A3081, 2021.   \n[31] Sifan Wang, Xinling Yu, and Paris Perdikaris. When and why PINNs fail to train: A neural tangent kernel perspective. Journal of Computational Physics, 449:110768, 2022.   \n[32] Sophie Steger, Franz M. Rohrhofer, and Bernhard C Geiger. How PINNs cheat: Predicting chaotic motion of a double pendulum. In The Symbiosis of Deep Learning and Differential Equations II, 2022.   \n[33] Jian Cheng Wong, Chinchun Ooi, Abhishek Gupta, and Yew-Soon Ong. Learning in sinusoidal spaces with physics-informed neural networks. IEEE Transactions on Artificial Intelligence, 2022.   \n[34] Jiachen Yao, Chang Su, Zhongkai Hao, Songming Liu, Hang Su, and Jun Zhu. MultiAdam: Parameter-wise Scale-invariant Optimizer for Multiscale Training of Physics-informed Neural Networks. In International Conference on Machine Learning, volume 202 of Proceedings of Machine Learning Research, pages 39702\u201339721. PMLR, 23\u201329 Jul 2023.   \n[35] Jungeun Kim, Kookjin Lee, Dongeun Lee, Sheo Yon Jhin, and Noseong Park. DPM: A novel training method for physics-informed neural networks in extrapolation. In AAAI Conference on Artificial Intelligence, number 9, pages 8146\u20138154, 2021.   \n[36] Bahador Bahmani and WaiChing Sun. Training multi-objective/multi-task collocation physics-informed neural network with student/teachers transfer learnings. arXiv preprint arXiv:2107.11496, 2021.   \n[37] Tianhe Yu, Saurabh Kumar, Abhishek Gupta, Sergey Levine, Karol Hausman, and Chelsea Finn. Gradient Surgery for Multi-Task Learning. In Advances in Neural Information Processing Systems, volume 33, pages 5824\u20135836, 2020.   \n[38] Xiaojian Li, Yuhao Liu, and Zhengxian Liu. Physics-informed neural network based on a new adaptive gradient descent algorithm for solving partial differential equations of flow problems. Physics of Fluids, 35(6), 2023.   \n[39] Ozan Sener and Vladlen Koltun. Multi-task learning as multi-objective optimization, 2018.   \n[40] Jean-Antoine D\u00e9sid\u00e9ri. Multiple-gradient descent algorithm (MGDA) for multiobjective optimization. Comptes Rendus Mathematique, 350(5):313\u2013318, 2012.   \n[41] Bo Liu, Xingchao Liu, Xiaojie Jin, Peter Stone, and Qiang Liu. Confilct-Averse Gradient Descent for Multitask learning. In Advances in Neural Information Processing Systems, volume 34, pages 18878\u201318890, 2021.   \n[42] Liyang Liu, Yi Li, Zhanghui Kuang, J Xue, Yimin Chen, Wenming Yang, Qingmin Liao, and Wayne Zhang. Towards impartial multi-task learning. In International Conference on Learning Representations, 2021.   \n[43] Aviv Navon, Aviv Shamsian, Idan Achituve, Haggai Maron, Kenji Kawaguchi, Gal Chechik, and Ethan Fetaya. Multi-Task Learning as a Bargaining Game. In Kamalika Chaudhuri, Stefanie Jegelka, Le Song, Csaba Szepesvari, Gang Niu, and Sivan Sabato, editors, Proceedings of the 39th International Conference on Machine Learning, volume 162 of Proceedings of Machine Learning Research, pages 16428\u201316446. PMLR, 17\u201323 Jul 2022.   \n[44] Dmitry Senushkin, Nikolay Patakin, Arseny Kuznetsov, and Anton Konushin. Independent Component Alignment for Multi-Task Learning. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 20083\u201320093, 2023.   \n[45] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.   \n[46] Harold M. Hochman and James D. Rodgers. Pareto optimal redistribution. The American economic review, 59(4):542\u2013557, 1969.   \n[47] Lukas Fesser, Richard Qiu, and Luca D\u2019Amico-Wong. Understanding and Mitigating Extrapolation Failures in Physics-Informed Neural Networks. arXiv preprint arXiv:2306.09478v2, 2023.   \n[48] Xavier Glorot and Yoshua Bengio. Understanding the difficulty of training deep feedforward neural networks. In International Conference on Artificial Intelligence and Statistics, pages 249\u2013256. JMLR Workshop and Conference Proceedings, 2010.   \n[49] Zhongkai Hao, Jiachen Yao, Chang Su, Hang Su, Ziao Wang, Fanzhi Lu, Zeyu Xia, Yichi Zhang, Songming Liu, Lu Lu, et al. PINNacle: A comprehensive benchmark of physics-informed neural networks for solving PDEs. arXiv preprint arXiv:2306.08827, 2023. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "A Proofs for Section 4 ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "Proof of Theorem 4.2. Recall that $\\phi_{t}$ is the angle between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla{\\mathcal{L}}_{b}(\\theta_{t})$ , and $R\\,\\,=$ $\\frac{\\|\\nabla{\\mathcal{L}_{r}}(\\theta_{t})\\|}{\\|\\nabla{\\mathcal{L}_{b}}(\\theta_{t})\\|}$ at each iteration $t$ . Consider a cone $K_{t}$ , defined as ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\mathbf{K}_{t}:=\\{c x|c\\geq0,x\\in\\{\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\nabla\\mathcal{L}_{b}(\\theta_{t})\\}\\}\\,.\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Case (i). Suppose that $\\langle\\nabla{\\mathcal L}_{b}(\\theta_{t}),\\,\\nabla{\\mathcal L}_{r}(\\theta_{t})\\rangle\\geq0$ . Observe that ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle=\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle+\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|^{2}\\geq0,}\\\\ &{\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle=\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle+\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|^{2}\\geq0.}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Therefore, by the definition of the dual cone, we have $\\nabla{\\mathcal{L}}(\\theta_{t})\\in\\mathbf{K}_{t}^{*}$ . ", "page_idx": 12}, {"type": "text", "text": "Case (ii). Suppose that $\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle<0$ and $\\begin{array}{r}{-\\cos(\\phi_{t})\\le R\\le-\\frac{1}{\\cos(\\phi_{t})}}\\end{array}$ . By multiplying $\\|\\nabla{\\mathcal{L}}_{b}\\|\\|\\nabla{\\mathcal{L}}_{r}\\|$ to $-\\cos(\\phi_{t})\\leq R$ , we get ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{-\\cos(\\phi_{t})\\leq R\\Leftrightarrow-\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|\\cos(\\phi_{t})\\leq\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|^{2},}\\\\ &{\\qquad\\qquad\\Leftrightarrow\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle+\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\geq0,}\\\\ &{\\qquad\\qquad\\Leftrightarrow\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\geq0.}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "On the other hand, by multiplying $\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|^{2}\\cos(\\phi_{t})$ to $\\begin{array}{r}{R\\leq-\\frac{1}{\\cos(\\phi_{t})}}\\end{array}$ cos(\u03d5t), we have ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{R\\leq-\\frac{1}{-\\cos(\\phi_{t})}\\Leftrightarrow\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|\\cos(\\phi_{t})\\geq-\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|^{2},}\\\\ &{\\qquad\\qquad\\qquad\\Leftrightarrow\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle+\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle\\geq0,}\\\\ &{\\qquad\\qquad\\Leftrightarrow\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle\\geq0.}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Therefore, we conclude that if $\\langle\\nabla{\\mathcal{L}}_{b}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{r}(\\theta_{t})\\rangle\\;<\\;0$ , then $\\begin{array}{r}{-\\cos(\\phi_{t})\\;\\leq\\;R\\;\\leq\\;-\\frac{1}{\\cos(\\phi_{t})}}\\end{array}$ is equivalent to $\\nabla{\\mathcal{L}}(\\theta_{t})\\in\\mathbf{K}_{t}^{*}$ . ", "page_idx": 12}, {"type": "text", "text": "Proof of Proposition 4.3. Recall that ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf G_{t}:=\\left\\{c_{1}\\nabla_{t}\\mathcal L_{\\|\\nabla{L}_{r}^{\\perp}}+c_{2}\\nabla_{t}\\mathcal L_{\\|\\nabla{\\mathcal L}_{b}^{\\perp}}\\big|c_{1},c_{2}\\geq0\\right\\}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "It is enough to show that we have $\\langle g,\\,\\nabla{\\mathcal{L}}_{r}(\\theta_{t})\\rangle\\geq0$ and $\\langle g,\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle\\geq0$ for any $g\\in\\mathbf{G}_{t}$ . By the definition of $\\mathbf{G}_{t}$ , there exists $c_{1},c_{2}\\geq0$ such that $g=c_{1}\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{r}^{\\perp}}+c_{2}\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ for all $g\\in\\mathbf{G}_{t}$ . One can easily check that ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\langle g,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle=\\langle c_{2}\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{b}^{\\perp}},\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle}\\\\ &{\\quad\\quad\\quad\\quad=\\langle c_{2}\\left(\\nabla\\mathcal{L}_{r}(\\theta_{t})-\\frac{\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\ \\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle}{\\Vert\\nabla\\mathcal{L}_{b}(\\theta_{t})\\Vert^{2}}\\nabla\\mathcal{L}_{b}(\\theta_{t})\\right),\\ \\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle}\\\\ &{\\quad\\quad\\quad=c_{2}\\left(\\Vert\\nabla\\mathcal{L}_{r}(\\theta_{t})\\Vert^{2}-\\frac{\\vert\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\ \\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\vert^{2}}{\\Vert\\nabla\\mathcal{L}_{b}(\\theta_{t})\\Vert^{2}}\\right)}\\\\ &{\\quad\\quad\\quad=c_{2}\\Vert\\nabla\\mathcal{L}_{r}(\\theta_{t})\\Vert^{2}(1-\\cos(\\phi_{t}))}\\\\ &{\\quad\\quad\\quad\\geq0}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "where $\\phi_{t}$ is the angle between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla{\\mathcal{L}}_{b}(\\theta_{t})$ . One can derive that $\\langle g,\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle\\geq0$ in the same manner. Therefore, we conclude that ${\\bf G}_{t}\\subset{\\bf K}_{t}^{*}$ . ", "page_idx": 12}, {"type": "text", "text": "Proof of Theorem 4.5. Let $\\phi_{t}$ be the angle between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ , and $\\psi_{t}$ be the angle between $g_{t}^{\\mathrm{dual}}$ and $\\nabla{\\mathcal{L}}(\\theta_{t})$ at the $t$ -th iteration. Note that $\\theta_{t+1}=\\theta_{t}-\\lambda g_{t}^{\\mathrm{dual}}$ where $g_{t}^{\\mathrm{dual}}$ satisfies the conditions (i), (ii) of Theorem 4.5. ", "page_idx": 12}, {"type": "text", "text": "First of all, DCGD algorithm reaches a Pareto-stationary point if $\\phi_{t}=-1$ by Definition 4.4, at which the optimization process is stopped. ", "page_idx": 13}, {"type": "text", "text": "Otherwise, we first observe from the differentiability and $L$ -Lipschitz continuity condition of $\\nabla{\\mathcal{L}}(\\cdot)$ for all $x,y\\in\\mathbb{R}^{d}$ : ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\mathcal{L}(x)-\\mathcal{L}(y)=\\displaystyle\\int_{0}^{1}\\langle\\nabla\\mathcal{L}(y+t(x-y)),\\,x-y\\rangle\\mathrm{d}t}&{}\\\\ &{\\quad\\quad\\quad\\leq\\langle\\nabla\\mathcal{L}(y),\\,x-y\\rangle+\\displaystyle\\int_{0}^{1}\\langle\\nabla\\mathcal{L}(y+t(x-y))-\\nabla\\mathcal{L}(y),\\,x-y\\rangle\\mathrm{d}t}\\\\ &{\\quad\\quad\\quad\\leq\\langle\\nabla\\mathcal{L}(y),\\,x-y\\rangle+\\displaystyle\\int_{0}^{1}\\|\\nabla\\mathcal{L}(y+t(x-y))-\\nabla\\mathcal{L}(y)\\|\\|x-y\\|\\mathrm{d}t}\\\\ &{\\quad\\quad\\quad\\leq\\langle\\nabla\\mathcal{L}(y),\\,x-y\\rangle+\\displaystyle\\int_{0}^{1}L t\\|x-y\\|^{2}\\mathrm{d}t}\\\\ &{\\quad\\quad\\quad=\\langle\\nabla\\mathcal{L}(y),\\,x-y\\rangle+\\displaystyle\\frac{L}{2}\\|x-y\\|^{2},}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where we have used Cauchy-Schwarz inequality for the third inequality. Using Eq. (A.4) and Conditions (i), (ii) of Theorem 4.5, one calculates that for $\\begin{array}{r}{\\lambda\\leq\\frac{1}{2L}}\\end{array}$ , ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\mathcal{L}(\\theta_{t+1})-\\mathcal{L}(\\theta_{t})\\leq-\\lambda\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,g_{t}^{\\mathrm{dual}}\\rangle+\\frac{L\\lambda^{2}}{2}\\|g_{t}^{\\mathrm{dual}}\\|^{2}}&{}\\\\ {\\leq-\\lambda\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,g_{t}^{\\mathrm{dual}}\\rangle+\\frac{\\lambda}{4}\\|g_{t}^{\\mathrm{dual}}\\|^{2}}&{}\\\\ {=-\\frac{\\lambda}{4}\\left(2\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,g_{t}^{\\mathrm{dual}}\\rangle-\\|g_{t}^{\\mathrm{dual}}\\|^{2}+2\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,g_{t}^{\\mathrm{dual}}\\rangle\\right)}&{}\\\\ {\\leq-\\frac{\\lambda}{2}\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,g_{t}^{\\mathrm{dual}}\\rangle}&{\\phantom{=}\\cdots\\mathrm{condition~(i)}}\\\\ {\\leq-\\frac{\\lambda M}{2}\\|\\nabla\\mathcal{L}(\\theta_{t})\\|^{2}}&{\\because\\mathrm{Cauchy\\-Swartz~inequality~and~condition}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "By using telescoping sums, we further obtain ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\sum_{t=0}^{T}\\mathcal{L}(\\theta_{t+1})-\\mathcal{L}(\\theta_{t})=\\mathcal{L}(\\theta_{T+1})-\\mathcal{L}(\\theta_{0})}\\\\ &{\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\leq-\\displaystyle\\frac{\\lambda M}{2}\\sum_{t=0}^{T}\\|\\nabla\\mathcal{L}(\\theta_{t})\\|^{2},}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "which yields ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{\\frac{1}{T+1}\\sum_{t=0}^{T}\\|\\nabla\\mathcal{L}({\\boldsymbol{\\theta}}_{t})\\|^{2}\\leq\\frac{2\\,(\\mathcal{L}({\\boldsymbol{\\theta}}_{0})-\\mathcal{L}({\\boldsymbol{\\theta}}_{T+1}))}{\\lambda M(T+1)}}}\\\\ &{}&{\\leq\\frac{2\\,(\\mathcal{L}({\\boldsymbol{\\theta}}_{0})-\\mathcal{L}({\\boldsymbol{\\theta}}^{*}))}{\\lambda M(T+1)}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Proof of Proposition 4.6. Note that $g_{t}^{c}$ is the angle bisector of $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ . From the formula of vector projection, $g_{t}^{\\mathrm{dual}}$ of DCGD (Center) is the projection of $\\dot{\\nabla}\\mathcal{L}(\\theta_{t})$ on to $g_{t}^{c}$ . Thus, it is enough to show that $g_{t}^{c}$ is included in $\\mathbf{G}_{t}$ . ", "page_idx": 13}, {"type": "text", "text": "We observe that ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{r}^{\\perp}}=\\nabla\\mathcal{L}(\\theta_{t})-\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\Vert\\nabla\\mathcal{L}_{r}(\\theta_{t})\\Vert^{2}}}\\\\ &{\\quad\\quad\\quad=\\nabla\\mathcal{L}_{b}(\\theta_{t})-\\langle\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\Vert\\nabla\\mathcal{L}_{r}(\\theta_{t})\\Vert^{2}},}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "and ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{b}^{\\perp}}=\\nabla\\mathcal{L}(\\theta_{t})-\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle\\frac{\\nabla\\mathcal{L}_{b}(\\theta_{t})}{\\Vert\\nabla\\mathcal{L}_{b}(\\theta_{t})\\Vert^{2}}}\\\\ &{\\qquad\\quad=\\nabla\\mathcal{L}_{r}(\\theta_{t})-\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle\\frac{\\nabla\\mathcal{L}_{b}(\\theta_{t})}{\\Vert\\nabla\\mathcal{L}_{b}(\\theta_{t})\\Vert^{2}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Then, by defining $\\begin{array}{r}{c_{1}=\\frac{1}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|(1-\\cos(\\phi_{t}))}}\\end{array}$ and $\\begin{array}{r}{c_{2}=\\frac{1}{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|(1-\\cos(\\phi_{t}))}}\\end{array}$ , one can easily see that ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{c_{1}\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{r}^{\\perp}}+c_{2}\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{b}^{\\perp}}=\\nabla\\mathcal{L}_{b}(\\theta_{t})\\left(c_{1}-c_{2}\\frac{\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\ \\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle}{\\Vert\\nabla\\mathcal{L}_{b}(\\theta_{t})\\Vert^{2}}\\right)}\\\\ &{\\phantom{c_{1}\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{r}^{\\perp}}+}+\\nabla\\mathcal{L}_{r}(\\theta_{t})\\left(c_{2}-c_{1}\\frac{\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\ \\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle}{\\Vert\\nabla\\mathcal{L}_{r}(\\theta_{t})\\Vert^{2}}\\right)}\\\\ &{\\phantom{c_{1}\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{b}^{\\perp}}+}=\\frac{\\nabla\\mathcal{L}_{b}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|}+\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|}}\\\\ &{\\phantom{c_{2}\\nabla_{t}\\mathcal{L}_{\\Vert\\nabla\\mathcal{L}_{b}^{\\perp}}+}=g_{t}^{c}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "That is, $g_{t}^{c}$ can be expressed as $c_{1}\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{r}^{\\perp}}+c_{2}\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ for some $c_{1},c_{2}\\geq0$ . Therefore, $g_{t}^{c}$ is in Gt. \u53e3 ", "page_idx": 14}, {"type": "text", "text": "Proof of Corollary 4.7. We will show that $g_{t}^{\\mathrm{dual}}$ of each DCGD algorithm satisfies the conditions (i), (ii) of Theorem 4.5. Three algorithms are summarized in Algo. 2, Algo. 3, and Algo. 4. We note that a confilct threshold $\\alpha$ is introduced as a stopping condition for DCGD algorithms, as they can reach a Pareto-stationary point characterized by $\\phi_{t}=\\pi$ . That is, the algorithm stops when the parameter converges close to a Pareto-stationary point such that $\\pi-\\alpha<\\phi_{t}\\leq\\pi$ . Here, we assume $\\alpha\\geq0$ is fixed. ", "page_idx": 14}, {"type": "text", "text": "1. DCGD (Projection): Note that it is trival to show that $\\begin{array}{r l r}{g_{t}^{\\mathrm{dual}}}&{{}=}&{\\nabla{\\mathcal L}(\\theta_{t})}\\end{array}$ , when $\\langle\\nabla{\\mathcal L}(\\theta_{t}),\\,\\nabla{\\mathcal L}_{b}(\\theta_{t})\\rangle\\;\\geq\\;0$ , satisfies the conditions (i), (ii). Thus, we focus on the case when $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle<0$ . ", "page_idx": 14}, {"type": "text", "text": "First of all, we need to show the condition (i) ", "page_idx": 14}, {"type": "equation", "text": "$$\n2\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,g_{t}^{\\mathrm{dual}}\\rangle-\\|g_{t}^{\\mathrm{dual}}\\|^{2}=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|^{2}-\\|g_{t}^{\\mathrm{dual}}-\\nabla\\mathcal{L}(\\theta_{t})\\|^{2}\\geq0,\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "which is equivalent to that $\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\ge\\|g_{t}^{\\mathrm{dual}}-\\nabla\\mathcal{L}(\\theta_{t})\\|$ . Using Eq. (A.6), one directly calculates that ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|2\\nabla_{t}\\mathcal{L}_{\\|\\mathcal{L}_{r}^{\\perp}}-\\nabla\\mathcal{L}(\\theta_{t})\\|^{2}=\\bigg\\|\\nabla\\mathcal{L}(\\theta_{t})-\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|^{2}}\\bigg\\|^{2}}\\\\ &{\\qquad\\qquad\\qquad\\qquad=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|^{2}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "In the same manner, we have $\\lVert2\\nabla_{t}\\mathcal{L}_{\\parallel\\mathcal{L}_{b}^{\\perp}}-\\nabla\\mathcal{L}(\\theta_{t})\\rVert^{2}=\\lVert\\nabla\\mathcal{L}(\\theta_{t})\\rVert^{2}$ . Since $g_{t}^{\\mathrm{dual}}$ is chosen in $\\mathbf{G}_{t}$ , specifically $c_{1}=1,c_{2}=0$ or $c_{1}=0,c_{2}=0$ , we can write ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{g_{t}^{\\mathrm{aual}}-\\nabla\\mathcal{L}(\\theta_{t})\\|=\\left\\|\\left(c_{1}\\nabla\\mathcal{L}_{\\|}\\mathcal{L}_{\\tau}\\left(\\theta_{t}\\right)+c_{2}\\nabla\\mathcal{L}_{\\|}\\mathcal{L}_{\\hat{c}_{h}}^{\\perp}(\\theta_{t})\\right)-\\nabla\\mathcal{L}(\\theta_{t})\\right\\|}&{}\\\\ {\\leq\\left\\|\\left(c_{1}\\nabla\\mathcal{L}_{\\|}\\mathcal{L}_{\\tau}\\left(\\theta_{t}\\right)+c_{2}\\nabla\\mathcal{L}_{\\|}\\mathcal{L}_{\\hat{c}_{h}}^{\\perp}(\\theta_{t})\\right)-\\frac{c_{1}+c_{2}}{2}\\nabla\\mathcal{L}(\\theta_{t})\\right\\|+\\left\\|\\left(\\frac{c_{1}+c_{2}}{2}-1\\right)\\nabla\\mathcal{L}(\\theta_{t})\\right\\|}&{}\\\\ {\\leq\\left\\|\\frac{c_{1}}{2}\\left(2\\nabla\\mathcal{L}_{\\|}\\mathcal{L}_{\\hat{c}_{h}}^{\\perp}(\\theta_{t})-\\nabla\\mathcal{L}(\\theta_{t})\\right)\\right\\|+\\left\\|\\frac{c_{2}}{2}\\left(2\\nabla\\mathcal{L}_{\\|}\\mathcal{L}_{\\hat{c}_{h}}^{\\perp}(\\theta_{t})-\\nabla\\mathcal{L}(\\theta_{t})\\right)\\right\\|+\\left\\|\\left(\\frac{c_{1}+c_{2}}{2}-1\\right)\\nabla\\mathcal{L}(\\theta_{t})\\right\\|}&{}\\\\ {=\\frac{c_{1}}{2}\\|\\nabla\\mathcal{L}(\\theta_{t})\\|+\\frac{c_{2}}{2}\\|\\nabla\\mathcal{L}(\\theta_{t})\\|+\\left\\|\\frac{c_{1}+c_{2}}{2}-1\\right\\|\\|\\nabla\\mathcal{L}(\\theta_{t})\\|}&{}\\\\ {=\\left(\\frac{c_{1}+c_{2}}{2}+\\left|\\frac{c_{1}+c_{2}}{2}-1\\right|\\right)\\|\\nabla\\mathcal{L}(\\theta_{t})\\|}&{~~~~~~~~~~~~~~~~~~~~~~~~~(\\mathrm{A.10})}\\\\ {=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where we have used $c_{1}+c_{2}=1$ for obtaining the last inequality. Therefore, the condition (i) is satisfied. ", "page_idx": 14}, {"type": "text", "text": "We further suppose that $\\langle\\nabla\\mathcal{L}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle\\,<\\,0$ . Then, $g_{t}^{\\mathrm{dual}}\\,=\\,\\nabla_{t}\\mathcal{L}_{\\parallel\\mathcal{L}_{b}^{\\perp}}$ . Let $\\phi_{t}$ be the angle between $\\nabla{\\mathcal{L}}_{b}(\\theta_{t})$ and $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ , and $\\psi_{t}$ be the angle between $g_{t}^{\\mathrm{dual}}$ and $\\nabla{\\mathcal{L}}(\\theta_{t})$ . Note that $\\phi_{t}\\leq\\pi\\!-\\!\\alpha$ where $\\alpha$ is conflict threshold. Otherwise, the algorithm stops when $\\pi-\\alpha<\\phi_{t}\\leq\\pi$ (see Algo. 2). Then, since $\\begin{array}{r}{\\psi_{t}=\\phi_{t}-\\frac{\\pi}{2}}\\end{array}$ , we have ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|g_{t}^{\\mathrm{dual}}\\|=\\|\\nabla_{t}\\mathcal{L}_{\\|\\mathcal{L}_{b}}\\|}\\\\ &{\\quad\\quad\\quad=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos(\\psi_{t})}\\\\ &{\\quad\\quad\\quad=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos\\left(\\phi_{t}-\\frac{\\pi}{2}\\right)}\\\\ &{\\quad\\quad\\quad\\geq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos\\left(\\frac{\\pi}{2}-\\alpha\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Thus, by choosing $\\begin{array}{r}{M=\\cos\\left(\\frac{\\pi}{2}-\\alpha\\right)}\\end{array}$ , the condition (ii) is satisfied. We repeat the same analysis for the case when $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle<0$ . ", "page_idx": 15}, {"type": "text", "text": "2. DCGD (Average): Similarly to DCGD (Projection), we focus on the case where DCGD (Average) specifies $\\begin{array}{r}{\\bar{c}_{1}=c_{2}=\\frac{1}{2}}\\end{array}$ , given by ", "page_idx": 15}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{dual}}=\\frac{1}{2}\\left(\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{r}^{\\perp}}+\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{b}^{\\perp}}\\right),\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "when $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}$ . Eq A.10 with $c_{1}=c_{2}=1/2$ directly leads to ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\|g_{t}^{\\mathrm{dual}}-\\nabla\\mathcal{L}(\\theta_{t})\\|\\leq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|,\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "implying that the condition (i) is satisfied. ", "page_idx": 15}, {"type": "text", "text": "Next, suppose $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle<0$ . Then, the condition (ii) is satisfied with $\\begin{array}{r}{M=\\frac{1}{2}\\cos\\left(\\frac{\\pi}{2}-\\alpha\\right)}\\end{array}$ since ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\lefteqn{\\|g_{t}^{\\mathrm{dual}}\\|=\\frac{1}{2}\\left\\|\\nabla_{t}\\mathcal{L}_{\\|\\mathcal{L}_{r}^{\\perp}}+\\nabla_{t}\\mathcal{L}_{\\|\\mathcal{L}_{b}^{\\perp}}\\right\\|}}\\\\ &{\\geq\\frac{1}{2}\\|\\nabla_{t}\\mathcal{L}_{\\|\\mathcal{L}_{b}^{\\perp}}\\|}\\\\ &{=\\frac{1}{2}\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos\\left(\\phi_{t}-\\frac{\\pi}{2}\\right)}\\\\ &{\\geq\\frac{1}{2}\\cos\\left(\\frac{\\pi}{2}-\\alpha\\right)\\|\\nabla\\mathcal{L}(\\theta_{t})\\|.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "When $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{r}(\\theta_{t})\\rangle<0$ , the condition (ii) is also satisfied with $\\begin{array}{r}{M=\\frac{1}{2}\\cos\\left(\\frac{\\pi}{2}-\\alpha\\right)}\\end{array}$ . ", "page_idx": 15}, {"type": "text", "text": "3. DCGD (Center): the updated vector of DCGD (Center) is given by ", "page_idx": 15}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{dual}}=\\frac{\\left\\langle g_{t}^{c},\\,\\nabla\\mathcal{L}(\\theta_{t})\\right\\rangle}{\\|g_{t}^{c}\\|^{2}}g_{t}^{c}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where gt =\u2225\u2207Lbb(\u03b8tt)\u2225+\u2225\u2207Lrr(\u03b8tt)\u2225 . Since $g_{t}^{\\mathrm{dual}}$ is the angle bisector of $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ (see Proof of Proposition 4.6), $\\psi_{t}$ , the angle between $\\nabla{\\mathcal{L}}(\\theta_{t})$ and $g_{t}^{\\mathrm{dual}}$ , is less or equal to $\\phi_{t}/2$ , i.e., $\\begin{array}{r}{\\psi_{t}\\leq\\frac{\\phi_{t}}{2}\\leq\\frac{\\pi}{2}}\\end{array}$ . From the fact that $g_{t}^{\\mathrm{dual}}$ is the projection of $\\nabla{\\mathcal{L}}(\\theta_{t})$ onto $g_{t}^{c}$ , we have ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|\\nabla\\mathcal{L}(\\theta_{t})-g_{t}^{\\mathrm{dual}}\\|=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\sin(\\psi_{t})}\\\\ &{\\quad\\quad\\quad\\quad\\quad\\leq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\sin\\left(\\frac{\\phi_{t}}{2}\\right)}\\\\ &{\\quad\\quad\\quad\\quad\\leq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\sin\\left(\\frac{\\pi-\\alpha}{2}\\right)}\\\\ &{\\quad\\quad\\quad\\quad\\leq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|,}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "and ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|g_{t}^{\\mathrm{dua}}\\|=\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos(\\psi_{t})}\\\\ &{\\quad\\quad\\quad\\geq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos\\left(\\frac{\\phi_{t}}{2}\\right)}\\\\ &{\\quad\\quad\\quad\\geq\\|\\nabla\\mathcal{L}(\\theta_{t})\\|\\cos\\left(\\frac{\\pi-\\alpha}{2}\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Consequently, the conditions (i) and (ii) are satisfied for DCGD (Center). ", "page_idx": 16}, {"type": "text", "text": "Remark A.1. Suppose that one employs a decaying scheme for the conflict threshold $\\alpha_{t}$ such that $\\alpha_{t}=O(t^{-\\gamma})$ with where $0\\leq\\gamma<1$ , for example, $\\alpha_{t}=t^{-\\gamma}$ . In this case, the convergence rate of the DCGD algorithm to a stationary point becomes $\\mathcal{O}\\left(\\frac{1}{T^{1-\\gamma}}\\right)$ , as $M$ in condition (ii) may depend on the conflict threshold $\\alpha_{t}$ . For all our experiments, we set $\\alpha$ to be fixed. ", "page_idx": 16}, {"type": "text", "text": "B Unification of MTL algorithms within the DCGD framework ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In this section, we prove that several MTL algorithms can be understood as special cases of the DCGD framework under the PINN\u2019s formulation. ", "page_idx": 16}, {"type": "text", "text": "Proof. 1. MGAD [40]: The updated gradient $g_{t}^{\\mathrm{MGDA}}$ of MGDA is defined by selecting the minimumnorm element from the convex combinations of $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ if there is gradient conflict $\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle<0$ : ", "page_idx": 16}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{MGDA}}:=\\operatorname*{argmin}_{\\alpha_{1},\\alpha_{2}\\geq0}\\|u\\|,\\qquad\\qquad\\mathrm{s.t.}\\ u=\\alpha_{1}\\nabla\\mathcal{L}_{r}(\\theta_{t})+\\alpha_{2}\\nabla\\mathcal{L}_{b}(\\theta_{t}),\\alpha_{1}+\\alpha_{2}=1.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "One can easily show that $\\langle g_{t}^{\\mathrm{MGDA}},\\,g_{t}^{\\mathrm{MGDA}}\\rangle=\\langle g_{t}^{\\mathrm{MGDA}},\\,\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rangle=\\langle g_{t}^{\\mathrm{MGDA}},$ $\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle\\geq0$ ", "page_idx": 16}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{MGDA}}\\in\\mathbf{K}_{t}^{*}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "2. PCGrad [37]: PCGrad uses the same update direction with DCGD (Average) when $\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle<0$ , ", "page_idx": 16}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{PCGrad}}=\\frac{1}{2}\\left(\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{r}^{\\perp}}+\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{b}^{\\perp}}\\right)\\in\\mathbf{K}_{t}^{*}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "and takes $\\nabla\\mathcal{L}_{r}(\\theta_{t})+\\nabla\\mathcal{L}_{b}(\\theta_{t})$ when $\\langle\\nabla{\\mathcal{L}}_{r}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle\\geq0$ . The latter case is also contained in Kt\u2217 . Therefore, g tPCGrad\u2208Kt\u2217 . ", "page_idx": 16}, {"type": "text", "text": "3. Nash-MTL [43]: Nash-MTL considers a Nash bargaining solution to balance the loss gradients. The update gradient gtNash-MTLis be defined by ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{g_{t}^{\\mathrm{Nash-MTL}}:=G_{t}v_{t},}\\\\ &{\\mathrm{s.t.~}G_{t}^{\\top}G_{t}v_{t}=v_{t}^{-1}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $G_{t}=[\\nabla{\\mathcal{L}}_{r}(\\theta_{t}),\\nabla{\\mathcal{L}}_{b}(\\theta_{t})]$ . We can find the solution $v_{t}$ satisfying Eq. (B.2) as following. By letting $v_{t}=\\binom{\\displaystyle v_{1}}{\\displaystyle v_{2}}$ we have ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\left[\\langle\\nabla{\\mathcal{L}}_{r}(\\theta_{t})||^{2}\\rangle\\quad\\langle\\nabla{\\mathcal{L}}_{r}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle\\right]\\left[v_{2}\\right]=\\left[{\\frac{1}{v_{1}}}\\right],\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "which is equivalent to ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\int\\lVert\\nabla\\mathcal{L}_{r}(\\theta_{t})\\rVert^{2}v_{1}^{2}+\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle v_{1}v_{2}=1}&{{}}\\\\ {\\lVert\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rVert^{2}v_{2}^{2}+\\langle\\nabla\\mathcal{L}_{r}(\\theta_{t}),\\,\\nabla\\mathcal{L}_{b}(\\theta_{t})\\rangle v_{1}v_{2}=1}&{{}}\\end{array}\\,.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Therefore, we can derive $\\begin{array}{r}{v_{2}\\,=\\,\\frac{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|}v_{1}}\\end{array}$ . Substituting $\\begin{array}{r}{v_{2}\\,=\\,\\frac{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|}v_{1}}\\end{array}$ back into the first equation of Eq. (B.3) leads to ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|^{2}v_{1}^{2}+\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|^{2}\\cos(\\phi_{t})v_{1}^{2}=1}\\\\ &{\\Leftrightarrow v_{1}=\\sqrt{\\frac{1}{1+\\cos\\phi_{t}}}\\frac{1}{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|}}\\\\ &{\\Leftrightarrow v_{2}=\\frac{\\left\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\right\\|}{\\left\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\right\\|}v_{1}=\\sqrt{\\frac{1}{1+\\cos\\phi_{t}}}\\frac{1}{\\left\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\right\\|}}\\\\ &{\\Leftrightarrow G_{t}v_{t}=\\sqrt{\\frac{1}{1+\\cos\\phi_{t}}}\\left(\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\left\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\right\\|}+\\frac{\\nabla\\mathcal{L}_{b}(\\theta_{t})}{\\left\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\right\\|}\\right)}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\phi_{t}$ is the angle between $\\nabla{\\mathcal{L}}_{r}(\\theta_{t})$ and $\\nabla\\mathcal{L}_{b}(\\theta_{t})$ . Thus, the update gradient tNash-MTLhas same direction with DCGD (Center). That is, tNash-MTL\u2208Kt\u2217 . ", "page_idx": 17}, {"type": "text", "text": "C Experimental details ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "C.1 Software and hardware environments ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "We conduct all experiments with PYTHON 3.10.9 and PYTORCH 1.13.1, CUDA 11.6.2, NVIDIA Driver 510.10 on Ubuntu 22.04.1 LTS server which equipped with AMD Ryzen Threadripper PRO 5975WX, NVIDIA A100 80GB and NVIDIA RTX A6000. ", "page_idx": 17}, {"type": "text", "text": "C.2 Toy example ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "We slightly modify the toy example in [41] to show our proposed method can expand the region of initial points that converge to the Pareto set. Consider the following loss functions with $\\theta=$ $(\\theta_{1},\\theta_{2})\\in\\mathbf{\\dot{R}}^{2}$ : ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{L_{1}(\\theta)=2c_{1}(\\theta)f_{1}(\\theta)+c_{2}(\\theta)g_{1}(\\theta)\\mathrm{~and~}L_{2}(\\theta)=c_{1}(\\theta)f_{2}(\\theta)+c_{2}(\\theta)_{3}}\\\\ &{f_{1}(\\theta)=\\log(\\operatorname*{max}(0.5(-\\theta_{1}-7)-\\operatorname{tanh}(-\\theta_{2}),0.00005))+6,}\\\\ &{f_{2}(\\theta)=\\log(\\operatorname*{max}(0.5(-\\theta_{1}+3)-\\operatorname{tanh}(-\\theta_{2})+2,0.000005))+6,}\\\\ &{g_{1}(\\theta)=((-\\theta_{1}+7)^{2}+0.1\\cdot(-\\theta_{2}-8)^{2})/10-20,}\\\\ &{g_{2}(\\theta)=((-\\theta_{1}-7)^{2}+0.1\\cdot(-\\theta_{2}-8)^{2})/10-20,}\\\\ &{c_{1}(\\theta)=\\operatorname*{max}(\\operatorname{tanh}(0.5\\cdot\\theta_{2}),0),}\\\\ &{c_{2}(\\theta)=\\operatorname*{max}(\\operatorname{tanh}(-0.5\\cdot\\theta_{2}),0).}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "The landscape and contour map of above loss function are shown in Figure 8. The Pareto set is highlighted in gray in Figure 8b. We solve the above problem using ADAM, DCGD (Projection), DCGD (Average), DCGD (Center) for 100,000 epochs with different initial points. The initial points are selected as 1, 600 uniform grid points within $[-10,10]\\times[-10,10]$ . Then, we mark with a red dot the point at which the optimizer fails to converge to the Pareto set. ", "page_idx": 17}, {"type": "text", "text": "C.3 Details for Figure 2, Figure 1, and Figure 5 ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In this experiment, we use the 7-layer fully connected neural network with 20 neurons per layer and a hyperbolic tangent activation function. We train PINN models using SGD with the learning rate of 0.01 for $10,000$ epochs. In addition, 100 data points are sampled in boundaries and 10,000 points in the domain. ", "page_idx": 17}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/e0f768f9422a43332041262bdc5333590acd056db56c04f6794ed3c0e07f524e.jpg", "img_caption": ["Figure 8: The loss landscape and contour map of the toy example. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "C.4 Details for Section 5.1 ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Benchmark equations We consider Helmholtz equation, viscous Burgers\u2019 equation, and KleinGordon equation as the benchmark equations. ", "page_idx": 18}, {"type": "text", "text": "The Helmholtz equation is described by ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\Delta u(x,y)+k^{2}u(x,y)=f(x,y),\\quad(x,y)\\in\\Omega,}\\\\ &{u(x,y)=0,\\quad(x,y)\\in\\partial\\Omega,}\\\\ &{\\Omega=[-1,1]\\times[-1,1].}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "The solution is given by $u^{*}(x,y)=\\sin(a_{1}\\pi x)\\sin(a_{2}\\pi y)$ where ", "page_idx": 18}, {"type": "equation", "text": "$$\nf(x,y)=\\left(k^{2}-a_{1}^{2}\\pi^{2}-a_{2}^{2}\\pi^{2}\\right)\\sin(a_{1}\\pi x)\\sin(a_{2}\\pi y)\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "In our experiment, we choose parameters: $k=1,a_{1}=1,a_{2}=4$ as in [30]. ", "page_idx": 18}, {"type": "text", "text": "The Viscous Burgers\u2019 equation is given by ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{u_{t}(t,x)+u u_{x}(t,x)-\\nu u_{x x}(t,x)=0,(x,t)\\in[0,1]\\times\\Omega,}\\\\ &{u(0,x)=-\\sin(\\pi x),x\\in\\Omega,}\\\\ &{u(t,-1)=u(t,1)=0,t\\in[0,1],}\\\\ &{\\Omega=[-1,1]}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where \u03bd = 0.01. ", "page_idx": 18}, {"type": "text", "text": "The Klein-Gordon equation is ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\Delta u(t,x)+\\gamma u^{k}(t,x)=f(t,x),(t,x)\\in[0,T]\\times\\Omega,}\\\\ &{u(0,x)=g_{1}(x),x\\in\\Omega}\\\\ &{u_{t}(0,x)=g_{2}(x),x\\in\\Omega}\\\\ &{u(t,x)=h(t,x),(t,x)\\in[0,T]\\times\\partial\\Omega}\\\\ &{\\Omega=[0,1]}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We set parameters to $k=3,\\gamma=1,T=1$ and the initial conditions, $g_{1}(x)=x,g_{2}(x)=0$ for all $x\\in\\Omega$ following [30]. Then we can use the solution $u^{*}(t,x)=x\\cos(5\\pi t)+(t x)^{3}$ where $f(t,x)$ is derived by given equation . ", "page_idx": 18}, {"type": "text", "text": "We employ a 3-layer fully connected neural network with 50 neurons per layer and use the hyperbolic tangent activation function for all experiments in Section 5.1. At each iteration, 128 points are randomly sampled in boundaries and 10 times more points in the domain as the collocation points. We just randomly sample the points in the boundaries if there exists an analytic solution, otherwise the points were resampled from a pre-generated set for each iteration. More specifically, for the case of Viscous Burger\u2019s equation, there is pre-determined 456 boundary points and we randomly sample in this set of points. We train PINNs for 50,000 epochs with Glorot normal initialization [48] using DCGD algorithms, ADAM [45], LRA [30], NTK [31], PCGrad [37], MultiAdam [34], and DPM [35]. ", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "We search for the initial learning rate among $\\lambda=\\{10^{-3},10^{-4},10^{-5}\\}$ and use a exponential decay scheduler with a decay rate of 0.9 and a decay step $=1,000$ . For ADAM, we use the default parameters: $\\beta_{1}=0.9$ , $\\beta_{2}=0.999$ , $\\epsilon=10^{-8}$ as in [45]. For LRA, we set $\\alpha=0.1$ , which is the best hyperparameter reported in [30]. For MultiAdam, we use $\\beta_{1},\\beta_{2}=0.99$ as recommended in [34]. For DPM, we test $\\dot{\\delta}=\\{10^{-1},10^{-2},10^{-3}\\},\\epsilon=\\{10^{-1},10^{-2},10^{-3}\\},w=\\{1,1.01,1.001\\}$ . ", "page_idx": 19}, {"type": "text", "text": "To compute the effectiveness of various optimization algorithms, we evaluate the accuracy of the PINN solutions $u(\\cdot;\\theta)$ using the relative $L^{2}$ -error defined as: ", "page_idx": 19}, {"type": "equation", "text": "$$\n{\\mathrm{Relative~}}L^{2}{\\mathrm{~error~}}={\\frac{\\sqrt{\\sum_{i=1}^{N}|u(\\pmb{x}_{i};\\pmb{\\theta})-u(\\pmb{x}_{i})|^{2}}}{\\sqrt{\\sum_{i=1}^{N}|u(\\pmb{x}_{i})|^{2}}}}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where $u(\\cdot)$ is the true solution and $\\{{\\pmb x}_{i}\\}_{i=1}^{N}$ is the set of test samples. Unless the equation has an analytic solution, we use the numerical reference solution for $u({\\boldsymbol{x}})$ , which solved by finite element method [1]. ", "page_idx": 19}, {"type": "text", "text": "In Table 3, we report the best and worst-case relative $L^{2}$ errors of each method across 10 independent trials (3 independent trials for two high-dimensional PDEs). ", "page_idx": 19}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/4d25dfe999eb7c1baffb9ee061439b6055cc7a49fe0c444e02c32744ee0b1869.jpg", "table_caption": [], "table_footnote": ["Table 3: Maximum and minimum of relative $L^{2}$ errors in 10 independent trials (3 independent trials for two high-dimensional PDEs) for each algorithm. "], "page_idx": 19}, {"type": "text", "text": "We plot the exact solution, PINN solution, and its error for each benchmark equation in Figures 10, 11, and 9 ", "page_idx": 19}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/b25cefd2da408a5c788ee7c285ed5f718a6b725ce6583a30d04073de23b934fa.jpg", "img_caption": ["Figure 9: Helmholtz equation: approximated solution versus the reference solution. "], "img_footnote": [], "page_idx": 19}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/762f7be6ac13ff5f1be6c81e97cb6a3e5cef64841450e8496147b7da869b62f4.jpg", "img_caption": ["Figure 10: Burgers\u2019 equation: approximated solution versus the reference solution. "], "img_footnote": [], "page_idx": 20}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/49a437f2f29f123ac47caf12c8fd958712c6fd0a4bc3c99cb5d1cddbd7a37223.jpg", "img_caption": ["Figure 11: Klein-Gordon equation: approximated solution versus the reference solution. "], "img_footnote": [], "page_idx": 20}, {"type": "text", "text": "High-dimensional equations We consider the following 3-dimensional Helmholtz equation ", "page_idx": 20}, {"type": "text", "text": "$\\begin{array}{r l}&{\\Delta u(x,y,z)+k^{2}u(x,y,z)=f(x,y,z),}\\\\ &{u(x,y,z)=0,}\\\\ &{\\Omega=[-1,1]^{3}.}\\end{array}$ $\\begin{array}{r}{(x,y,z)\\in\\Omega,}\\\\ {(x,y,z)\\in\\partial\\Omega,}\\end{array}$ ", "page_idx": 20}, {"type": "text", "text": "The solution is given by $u^{\\ast}(x,y)=\\sin(a_{1}\\pi x)\\sin(a_{2}\\pi y)\\sin(a_{3}\\pi z)$ where ", "page_idx": 20}, {"type": "equation", "text": "$$\nf(x,y,z)=(k^{2}-a_{1}^{2}\\pi^{2}-a_{2}^{2}\\pi^{2}-a_{3}^{2}\\pi^{2})\\sin(a_{1}\\pi x)\\sin(a_{2}\\pi y)\\sin(a_{3}\\pi z)\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "with $k=1,a_{1}=4,a_{2}=4,a_{3}=3.$ . ", "page_idx": 20}, {"type": "text", "text": "We employ a 5-layer fully connected neural network with 128 neurons per layer and use the hyperbolic tangent activation function. At each iteration, 128 points are randomly sampled in boundaries and 500 times more points in the domain as the collocation points. We train PINNs for 30,000 epochs with Glorot normal initialization. ", "page_idx": 20}, {"type": "text", "text": "We use initial learning rate among $\\lambda=10^{-3}$ and use a exponential decay scheduler with a decay rate of 0.9 and a decay st $\\mathbf{ep}=1,000$ . ", "page_idx": 20}, {"type": "text", "text": "For 5-dimensional Heat equation, we follow the experiment setting in Hao et al. [49]. The PDE can be expressed as following: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{u_{t}=k\\Delta u+f(x,t),\\qquad\\qquad\\qquad\\qquad}&{x\\in\\Omega\\times[0,1]}\\\\ &{\\mathbf{n}\\cdot\\nabla u=g(x,t),}&{x\\in\\partial\\Omega\\times[0,1]}\\\\ &{u(x,0)=g(x,0),}&{x\\in\\Omega}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where the geometric domain $\\Omega=\\{x:||x||\\leq1\\}$ and ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{l}{f(x,t):=-\\displaystyle\\frac{1}{d}||x||^{2}\\exp\\left(-\\displaystyle\\frac{1}{2}||x||^{2}+t\\right)}\\\\ {g(x,t):=\\exp\\left(-\\displaystyle\\frac{1}{2}||x||^{2}+t\\right)}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "C.5 Details for Section 5.2 ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Double pendulum problem Consider the double pendulum which have two point mass pendulums with masses $m_{1},m_{2}$ , two rod with length $l_{1},l_{2}$ . Let $\\theta_{1},\\theta_{2}$ is the angle that the pendulums each make with the vertical and $\\Delta\\theta=\\theta_{1}-\\theta_{2}$ . Set the gravitational acceleration $g=9.81$ . (see Figure 12) ", "page_idx": 21}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/e26241c1fc1e17824ed4b9cef40dc35ebb7d1c8c8aa5485557ac7600fcbb0eb7.jpg", "img_caption": ["Figure 12: Simple double pendulum example "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "Then the dynamics of double pendulum can be described by following nonlinear differential equation system with $y=[\\theta_{1},\\theta_{2}]^{T}$ : ", "page_idx": 21}, {"type": "equation", "text": "$$\ny^{\\prime\\prime}=\\left[{f_{1}}(y,y^{\\prime})\\right]{\\mathrm{~subject~to~}}y(t_{0})=\\left[\\theta_{1}(t_{0})\\right],y^{\\prime}(t_{0})=\\left[\\omega_{1}(t_{0})\\right],\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "where ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\omega_{1}=\\theta_{1},}\\\\ &{\\omega_{2}=\\dot{\\theta}_{2},}\\\\ &{f_{1}(y,y^{\\prime\\prime})=\\frac{m_{2}l_{1}\\omega_{1}^{2}\\sin(2\\Delta\\theta)+2m_{2}l_{2}\\omega_{2}^{2}\\sin\\Delta\\theta+2g m_{2}\\cos\\theta_{2}\\sin\\Delta\\theta+2g m_{1}\\sin\\theta_{1}}{2l_{1}\\left(m_{1}+m_{2}\\sin^{2}\\Delta\\theta\\right)},}\\\\ &{f_{2}(y,y^{\\prime\\prime})=\\frac{m_{2}l_{2}\\omega_{2}^{2}\\sin(2\\Delta\\theta)+2\\left(m_{1}+m_{2}\\right)l_{1}\\omega_{1}^{2}\\sin\\Delta\\theta+2g\\left(m_{1}+m_{2}\\right)\\cos\\theta_{1}\\sin\\Delta\\theta}{2l_{2}\\left(m_{1}+m_{2}\\sin^{2}\\Delta\\theta\\right)}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "In this experiment, the initial conditions are $\\theta_{1}(t_{0})=\\theta_{2}(t_{0})=\\theta_{0}=150^{\\circ}$ , $\\omega_{1}(t_{0})=\\omega_{2}(t_{0})=0.$ . ", "page_idx": 21}, {"type": "text", "text": "We replicate the experiment setup done in [32]. We use a six-layer feed-forward network of 30 neurons on each layer with the swish activation function. We train this model with ADAM optimizer with the default hyperparameters for 20,000 epochs. We also train the same model using DCGD (Center). Figure 13 shows the training curves of ADAM and DCGD. ", "page_idx": 21}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/2af6d3f8849ec655ed63b31cf0b111ab2dcb6473ccf642033ce2732606b45281.jpg", "img_caption": ["Figure 13: Loss trajectory of each method in the double pendulum problem. "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "Convection equation We train PINNsFormer in Liu et al. [15] to solve convection equation which can expressed as following: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{u_{t}+\\beta u_{x}=0,\\quad\\forall x\\in[0,2\\pi],t\\in[0,1]}\\\\ &{u(x,0)=\\sin(x),}\\\\ &{u(0,t)=u(2\\pi,t)}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Where $\\beta=50$ . we follow the default setting of [15] and train the model by 500 epochs. ", "page_idx": 21}, {"type": "text", "text": "chotic Kuramoto-Sivashinsky equation We use causal training in Wang et al. [22] to solve chaotic Kuramoto-Sivashinsky equation. We use 5 layers modifed-MLP with 64 neurons per layer. and train this model 50,000 epochs for each tolerance. ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{u_{t}+\\alpha u u_{x}+\\beta u_{x x}+\\gamma u_{x x x x}=0,\\quad\\forall x\\in[0,2\\pi],t\\in[0,0.5]}\\\\ &{u(0,x)=\\cos(x)(1+\\sin(x))}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where $\\alpha=100/16,\\beta=100/16^{2},\\gamma=100/16^{4}.$ ", "page_idx": 22}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/dcc184f4afb6a2311529200464e6e111ab9f5ba928aac99ee691e92cd4034ea2.jpg", "img_caption": ["Figure 14: Convection equation: approximated solution versus the reference solution. "], "img_footnote": [], "page_idx": 22}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/ce01442dbedd16222e197ae865b08138cdfd60753a292eb21cd2e40cb2421315.jpg", "img_caption": ["Figure 15: 2D-Volterra equation: approximated solution versus the reference solution. "], "img_footnote": [], "page_idx": 22}, {"type": "text", "text": "Auxiliary-PINN: Nonlinear integro-differential equation A-PINN is a variant of PINNs, designed to solve integro-differential equations [9]. We apply our DCGD algorithms to A-PINN for solving the following nonlinear 2-dimensional Volterra IDE: ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\frac{\\partial^{2}u(t,x)}{\\partial t^{2}}=\\frac{\\partial u(t,x)}{\\partial x}-\\frac{\\partial u(t,x)}{\\partial t}-u(t,x)+g(t,x)+\\lambda\\int_{0}^{x}\\int_{0}^{t}f\\cos(y_{1}-y_{2})u(y_{1},y_{2})d y_{1}d y_{2}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where the boundary conditions are $u(0,x)=x$ \u2202u(\u22020t,x) = sin(x), and u(t, 0) = t sin(t), 0 \u2264t, x \u2264 1. The analytic solution is $u^{*}(t,x)=x+t\\sin(t+x)$ with $\\lambda=1$ where $g(t,x)$ is derived by given equation. ", "page_idx": 22}, {"type": "text", "text": "Within the framework of A-PINN, it converts the above integral equation into the following equation by representing integrals as auxiliary output variables: ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\frac{\\partial^{2}u(t,x)}{\\partial t^{2}}=\\frac{\\partial u(t,x)}{\\partial x}-\\frac{\\partial u(t,x)}{\\partial t}-u(t,x)+g(t,x)+\\lambda v(t,x),}\\\\ {\\frac{\\partial v(t,x)}{\\partial x}=\\int_{0}^{t}f\\cos(y_{1}-x)u(y_{1},x)d y_{1}=t w(t,x),}\\\\ {\\frac{\\partial w(t,x)}{\\partial t}=\\cos(t-x)u(t,x),}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where the new variables $v$ and $w$ satisfies the boundary condition $v(t,0)=0$ , $w(0,x)=0$ . ", "page_idx": 22}, {"type": "text", "text": "For A-PINNs, we employ a 3-layer fully connected neural network with 50 neurons per layer and a hyperbolic tangent activation function. For training, 128 points are randomly sampled in boundaries and 10 times more points in the domain as the collocation points in each epochs. We train A-PINN models for 5, 000 epochs. ", "page_idx": 23}, {"type": "text", "text": "Separable PINN: 3-dimensional Helmholtz equation SPINN is a a novel architecture designed to effectively reduce the computational cost of PINNs, especially when addressing high-dimensional PDEs [17]. To test the performance of DCGD for SPINNs, we consider the following 3-dimensional Helmholtz equation ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\Delta u(x,y,z)+k^{2}u(x,y,z)=f(x,y,z),\\quad(x,y,z)\\in\\Omega,}\\\\ &{u(x,y,z)=0,\\quad(x,y,z)\\in\\partial\\Omega,}\\\\ &{\\Omega=[-1,1]^{3}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "The solution is given by $u^{\\ast}(x,y)=\\sin(a_{1}\\pi x)\\sin(a_{2}\\pi y)\\sin(a_{3}\\pi z)$ where ", "page_idx": 23}, {"type": "equation", "text": "$$\nf(x,y,z)=(k^{2}-a_{1}^{2}\\pi^{2}-a_{2}^{2}\\pi^{2}-a_{3}^{2}\\pi^{2})\\sin(a_{1}\\pi x)\\sin(a_{2}\\pi y)\\sin(a_{3}\\pi z)\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "with $k=1,a_{1}=4,a_{2}=4,a_{3}=3.$ . ", "page_idx": 23}, {"type": "text", "text": "We follow the optimal hyperparameter setting reported in [17]. For ADAM and DCGD (Center), the learning rate is 0.001. The input points are resampled every 100 epochs. Regarding model architecture, we use the SOTA model, so called (SPINN $^+$ Modified MLP). We record the mean and standard deviation of relative $L^{2}$ errors from 3 independent trials in Table 4, indicating that the performance of SPINN can be significantly improved when trained with DCGD for a varying number of collocation points. ", "page_idx": 23}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/0087b7a03dc827e4d11b39a9cd38752f37fd36f62382c0cf8bf437da1e8843dc.jpg", "table_caption": [], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "Table 4: Helmholtz Equation (3d): Relative $L^{2}$ errors and training speed. $N_{c}$ is the number of collocation points. ", "page_idx": 23}, {"type": "image", "img_path": "gvtCR7dHJ3/tmp/73f5b9c5ad4aae568653ab917b5cd2109215669f7ee23ba6610f332b5ea97b3d.jpg", "img_caption": ["Figure 16: 3D-Helmholtz equation: approximated solution versus the reference solution. "], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "D Supplemental results ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "D.1 Ablation study ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "In Section 4.3, we introduce three specific algorithms: DCGD (Projection), DCGD (Average), and DCGD (Center). We conduct an ablation study to investigate the impact of different updated gradient schemes within the dual cone region. More specifically, we compare the performance of these three algorithms on five benchmark equations. Detailed experimental settings can be found in Appendices C.4. ", "page_idx": 24}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/daf16a0a8b16cf2b879bd06d03d70628b758688abac5c9f09a65831cc7b6923e.jpg", "table_caption": ["Tables 5 and 6 demonstrate that DCGD (Center) outperforms the other DCGD algorithms across all experiments. Therefore, we consider DCGD (Center) as the default DCGD algorithm. "], "table_footnote": [], "page_idx": 24}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/ac41bcf53c3e0fab47404c637cd1fb0df2e4eb706a7f7d02e3afe33e762be32f.jpg", "table_caption": ["Table 5: Average and standard deviation of relative $L^{2}$ errors in 10 independent trials (3 independent trials for two high-dimensional PDEs) for each DCGD algorithm. "], "table_footnote": ["Table 6: Min and Max Relative $L^{2}$ errors in 10 independent trials (3 independent trials for two high-dimensional PDEs) for each DCGD algorithm. "], "page_idx": 24}, {"type": "text", "text": "D.2 Computational cost ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "In this section, we acknowledge that our proposed method incurs higher computational costs due to the need for backpropagation for each individual loss. Nonetheless, through a comparison of training speeds, we empirically demonstrate that DCGD achieves superior performance with computational costs comparable to those of existing competitors. ", "page_idx": 24}, {"type": "table", "img_path": "gvtCR7dHJ3/tmp/f31e25664bd4bd223f341c01131f855151664c73586f8c9db4a3e5714540c3ab.jpg", "table_caption": ["Table 7: Training speed in higher dimensional equations example "], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "E Pseudo codes of algorithms ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "This section provides pseudo codes for the proposed DCGD algorithms. ", "page_idx": 25}, {"type": "text", "text": "Firstly, DCGD (Projection) uses the projection of the total gradient $\\nabla{\\mathcal{L}}(\\theta_{t})$ onto $\\mathbf{G}_{t}$ when $\\nabla{\\mathcal{L}}(\\theta_{t})\\ {\\notin}$ $\\mathbf{K}_{t}^{*}$ . Otherwise, $\\nabla{\\mathcal{L}}(\\theta_{t})$ is used. Then the update vector $\\bar{g_{t}^{\\mathrm{dual}}}$ can be defined as follow: ", "page_idx": 25}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{dual}}=\\left\\{\\!\\!\\begin{array}{l l}{\\nabla\\mathcal{L}(\\theta_{t}),}&{\\mathrm{if~}\\nabla\\mathcal{L}(\\theta_{t})\\in\\mathbf{K}_{t}^{*}}\\\\ {\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{r}^{\\perp}},}&{\\mathrm{if~}\\nabla\\mathcal{L}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}\\mathrm{~and~}\\langle\\nabla\\mathcal{L}(\\theta_{t}),~\\nabla\\mathcal{L}_{r}(\\theta_{t})<0\\rangle}\\\\ {\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{b}^{\\perp}}.}&{\\mathrm{if~}\\nabla\\mathcal{L}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}\\mathrm{~and~}\\langle\\nabla\\mathcal{L}(\\theta_{t}),~\\nabla\\mathcal{L}_{b}(\\theta_{t})<0\\rangle}\\end{array}\\!\\!\\right.\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "Secondly, DCGD (Average) uses the the average of $\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{r}^{\\perp}}$ and $\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ when the total gradient is outside $\\mathbf{K}_{t}^{*}$ . Otherwise, $\\nabla{\\mathcal{L}}(\\theta_{t})$ is used. The update vector $g_{t}^{\\mathrm{dual}}$ of DCGD (Average) is defined as follow: ", "page_idx": 25}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{dual}}=\\left\\{\\nabla\\mathcal{L}(\\theta_{t})\\quad}&{\\mathrm{if}\\;\\nabla\\mathcal{L}(\\theta_{t})\\in\\mathbf{K}_{t}^{*}\\right.}\\\\ {\\left.\\frac{1}{2}(\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{r}^{\\perp}}+\\nabla_{t}\\mathcal{L}_{\\|\\nabla{\\mathcal{L}}_{b}^{\\perp}}),}&{\\mathrm{if}\\;\\nabla\\mathcal{L}(\\theta_{t})\\notin\\mathbf{K}_{t}^{*}\\right.}\\end{array}\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "Thirdly, DCGD (Center) employs the following update vector $g_{t}^{\\mathrm{dual}}$ , regardless of whether the total gradient $\\nabla{\\mathcal{L}}(\\theta_{t})$ is included in $\\mathbf{K}_{t}^{*}$ : ", "page_idx": 25}, {"type": "equation", "text": "$$\ng_{t}^{\\mathrm{dual}}={\\frac{\\langle g_{t}^{c},\\,\\nabla{\\mathcal{L}}(\\theta_{t})\\rangle}{\\|g_{t}^{c}\\|^{2}}}g_{t}^{c}{\\mathrm{~where~}}g_{t}^{c}={\\frac{\\nabla{\\mathcal{L}}_{b}(\\theta_{t})}{\\|\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\|}}+{\\frac{\\nabla{\\mathcal{L}}_{r}(\\theta_{t})}{\\|\\nabla{\\mathcal{L}}_{r}(\\theta_{t})\\|}}\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "Here, pseudo codes of these algorithms are summarized in Algorithms 2, 3, and 4. Note that we introduce a conflict threshold $\\alpha$ as a stopping condition for DCGD algorithms, as they can reach a Pareto-stationary point characterized by $\\phi_{t}=\\pi$ . That is, the algorithm stops when the parameter converges close to a Pareto-stationary point such that $|\\cos(\\phi_{t})\\!-\\!\\pi|<\\alpha$ . Throughout our experiments, we set $\\bar{\\alpha}=10^{-8}$ . ", "page_idx": 25}, {"type": "text", "text": "Algorithm 2 DCGD (Projection) ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Require: learning rate $\\lambda$ , max epoch $T$ , initial point $\\theta_{0}$ , gradient threshold $\\varepsilon$ , confilct threshold $\\alpha$   \nfor $t=1$ to $T$ do if $\\pi-\\alpha<\\phi_{t}\\leq\\pi$ or $\\|\\nabla\\mathcal{L}(\\theta_{t})\\|<\\varepsilon$ then break end if if $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}^{*}$ then $g_{t}^{d u a l}=\\nabla\\mathcal{L}(\\theta_{t})$ else if $\\nabla{\\mathcal{L}}(\\theta_{t})\\in\\mathbf{K}^{*}$ and $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{r}(\\theta_{t})\\rangle<0$ then $g_{t}^{d u a l}=\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{r}^{\\perp}}$ else if $\\nabla{\\mathcal{L}}(\\theta_{t})\\in\\mathbf{K}^{*}$ and $\\langle\\nabla{\\mathcal{L}}(\\theta_{t}),\\,\\nabla{\\mathcal{L}}_{b}(\\theta_{t})\\rangle<0$ then $g_{t}^{d u a l}=\\nabla_{t}\\mathcal{L}_{||\\nabla{\\mathcal{L}}_{b}^{\\perp}}$ end if   \nend for ", "page_idx": 25}, {"type": "text", "text": "DCGD algorithms can be easily combined with other optimizers or strategies thanks to its flexible framework. For example, one can design a DCGD algorithm combined with ADAM to leverage advantages of adaptive gradient methods, see Algo. 5. For our experiments, we consider the DCGD (center) combined with ADAM as the default. Algorithm 6 presents the psedo code for DCGD combined with a loss balancing method such as LRA and NTK. ", "page_idx": 25}, {"type": "text", "text": "Require: learning rate $\\lambda$ , max epoch $T$ , initial point $\\theta_{0}$ , gradient threshold $\\varepsilon$ , confilct threshold $\\alpha$   \nfor $t=1$ to $T$ do if $\\pi-\\alpha<\\phi_{t}\\leq\\pi$ or $\\|\\nabla\\mathcal{L}(\\theta_{t})\\|<\\varepsilon$ then break end if if $\\nabla{\\mathcal{L}}(\\theta_{t})\\notin\\mathbf{K}^{*}$ then $g_{t}^{d u\\dot{a}l}=\\textstyle{\\frac{1}{2}}\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{r}^{\\perp}}+\\frac{1}{2}\\nabla_{t}\\mathcal{L}_{\\|\\nabla\\mathcal{L}_{b}^{\\perp}}$ else $g_{t}^{d u a l}=\\nabla\\mathcal{L}(\\theta_{t})$ end if $\\theta_{t}=\\theta_{t-1}-\\lambda g_{t}^{d u a l}$   \nend for ", "page_idx": 26}, {"type": "text", "text": "Algorithm 4 DCGD (Center) ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Require: learning rate $\\lambda$ , max epoch $T$ , initial point $\\theta_{0}$ , gradient threshold $\\varepsilon$ , confilct threshold $\\alpha$   \nfor $t=1$ to $T$ do if $\\pi-\\alpha<\\phi_{t}\\leq\\pi$ or $\\|\\nabla{\\mathcal{L}}(\\theta_{t})\\|<\\varepsilon$ then break end if $\\begin{array}{r}{g_{t}^{c}=\\frac{\\nabla\\mathcal{L}_{b}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{b}(\\theta_{t})\\|}+\\frac{\\nabla\\mathcal{L}_{r}(\\theta_{t})}{\\|\\nabla\\mathcal{L}_{r}(\\theta_{t})\\|}}\\end{array}$ gtdual= \u27e8gtc ,\u2225 g\u2207c L\u2225(2\u03b8t)\u27e9gtc \u03b8t = \u03b8t\u22121 \u2212\u03bbgtdual   \nend for ", "page_idx": 26}, {"type": "text", "text": "Algorithm 5 DCGD with ADAM ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Require: learning rate $\\lambda$ , max epoch $T$ , betas $\\beta_{1},\\beta_{2}$ , DCGD operator DCGD(\u00b7)   \nfor $t=1$ to $T$ do $g_{t}^{d u a l}=\\operatorname{DCGD}(\\mathcal{L}_{r}(\\theta),\\mathcal{L}_{b}(\\theta))$ gt \u2190gtdual mt \u2190\u03b21mt\u22121 + (1 \u2212\u03b21)gt vt \u2190\u03b22vt\u22121 + (1 \u2212\u03b22)gt2 mt \u21901\u2212\u03b2tt \u03b8t \u2190\u03b8t\u22121 \u2212\u03b3t\u221av mtt+\u03f5   \nend for ", "page_idx": 26}, {"type": "text", "text": "Algorithm 6 DCGD with a loss balancing method ", "page_idx": 26}, {"type": "text", "text": "Require: learning rate $\\lambda$ , max epoch $T$ , loss balancing operator LB(\u00b7)   \nfor $t=1$ to $T$ do (\u03b2r, \u03b2b)t = LB(Lr(\u03b8t), Lb(\u03b8t)) Lb(\u03b8t) \u2190\u03b2bLb(\u03b8t) Lr(\u03b8t) \u2190\u03b2rLr(\u03b8t) Choose gtdual\u2208Kt\u2217   \n\u03b8t = \u03b8t\u22121 \u2212\u03bbgtdual   \nend for ", "page_idx": 26}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] Our abstract and introduction accurately reflect the paper\u2019s contributions and scope. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 27}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] We have discussed the limitations of our work in Section 6. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 27}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] We have stated the explicit assumptions and provide complete proofs for main results in Appendix A. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 28}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] The pseudo code of our algorithms can be found in Appendix E, and we have stated detailed instructions in Appendix C. We have also provided code to reproduce the results of main experiments in supplementary material. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 28}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] We have provided our code to reproduce the results of main experiments in supplementary material. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 29}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] All experimental setting is explained in Appendix C including hyperparameter choices, training and test details. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 29}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "We repeated the main experiments in several times and reported several statistics including min, max, and the standard deviations for our numerical results. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 29}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] See Application C.1 for details of resources. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 30}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 30}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. ", "page_idx": 30}, {"type": "text", "text": "\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. \u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 31}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 31}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] The overall experiments followed the existing experimental setup which have cited, and the code and data are available for use under the MIT license. For CausalPINNs in [22], the code is available under the CC-BY-NC-SA 4.0 license. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 31}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 32}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 32}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 32}]