[{"type": "text", "text": "Large Pre-trained time series models for cross-domain Time series analysis tasks ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Harshavardhan Kamarthi ", "page_idx": 0}, {"type": "text", "text": "B. Aditya Prakash ", "page_idx": 0}, {"type": "text", "text": "College of Computing Georgia Institute of Technology harsha.pk@gatech.edu ", "page_idx": 0}, {"type": "text", "text": "College of Computing Georgia Institute of Technology badityap@cc.gatech.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large pre-trained models have been vital in recent advancements in domains like language and vision, making model training for individual downstream tasks more efficient and provide superior performance. However, tackling time-series analysis tasks usually involves designing and training a separate model from scratch leveraging training data and domain expertise specific to the task. We tackle a significant challenge for pre-training a foundational time-series model from multidomain time-series datasets: extracting semantically useful tokenized inputs to the model across heterogenous time-series from different domains. We propose Large Pre-trained Time-series Models (LPTM) that introduces a novel method of adaptive segmentation that automatically identifies optimal dataset-specific segmentation strategy during pre-training. This enables LPTM to perform similar to or better than domain-specific state-of-art model when fine-tuned to different downstream time-series analysis tasks and under zero-shot settings. LPTM achieves superior forecasting and time-series classification results taking up to $40\\%$ less data and $50\\%$ less training time compared to state-of-art baselines. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Time-series analysis tasks are important well-studied problems such as forecasting (Hyndman and Athanasopoulos, 2018) and classification (Chowdhury et al., 2022) with applications in wide-ranging domains such as retail, meteorology, economics, and health. Recent works (Chen et al., 2021; Wang et al., 2022; Zeng et al., 2023) have shown the efficacy of purely data-driven deep learning models. However, most state-of-art neural models are known to be data-hungry and require substantial training data. Motivated by language and vision foundational models Bommasani et al. (2021), recent body of works build pre-trained time-series models Das et al. (2023b); Ansari et al. (2024); Jin et al. (2024); Rasul et al. (2023). These models are trained on diverse datasets from different domains during pre-training. They require less training resources and data and produce superior performance. These models can also be deployed without any training, in a zero-shot or few-shot setting. ", "page_idx": 0}, {"type": "text", "text": "These foundational models, however, require large amounts of data for pre-training, which is still a challenge for time-series datasets. Moreover, they do not provide consistent performance improvement across all the domains. We identify an important challenge to building a unified pre-trained model for time-series that is pre-trained on and deployed to multiple domains: representation of diverse time-series input into these models. ", "page_idx": 0}, {"type": "text", "text": "Most neural sequential models input time-series values for each time-step separately. However, unlike text data, each individual time stamp may not provide enough semantic meaning about local temporal patterns of the time series. To tackle this, Nie et al. (2022) proposed to segment the time series and input each segment as individual tokens to their transformer-based model. This simple segmentation method of tokenizing time-series has been used by recent pre-trained models Woo et al. ", "page_idx": 0}, {"type": "text", "text": "(2024); Das et al. (2023b) to provide superior performance across multiple applications. However, segmenting input time-series uniformly with fixed-length segments, while simple, can be a very inflexible tokenizing method, especially when dealing with datasets from multiple domains with different set of underlying generative dynamics, sampling rate, noise, etc. For example, among two datasets, a dataset with a lower sampling rate (such as GDP time-series) may require longer segments than those with higher sampling rates to capture similar patterns in the model (such as heart sensors collecting data in milliseconds). However, note that the dynamics of the same time-series may vary with time Liu et al. (2024a). For, time intervals that are smoother with less complex dynamics, using longer segment sizes may suffice but intervals where time-series are complex and have multiple temporal patterns may require finer-grained segmentation. For example, for seasonal epidemics, time-series is smoother during the off-season and has more complex dynamics during outbreaks and times of higher incidence. ", "page_idx": 1}, {"type": "text", "text": "We tackle this important problem of representing diverse time-series datasets when training a pretrained foundational model for time-series and propose Large Pre-trained Time-series Models (LPTM), a novel method for generating pre-trained models for time-series data across multiple domains. LPTM uses a simple transformer-based architecture and leverages masking-based selfsupervised pre-training to train on multiple datasets from different domains. Our main contribution focuses on how we input time-series segments as tokens to the transformer. To overcome the challenges associated with segmentation on diverse datasets discussed above, we propose a novel adaptive segmentation module that segments the time-series of each domain based on how well it performs on self-supervised pre-training. The segmentation module uses a novel scoring mechanism during pre-training to identify an effective segmentation strategy for a domain. LPTM can be finetuned or deployed in a zero-shot setting to various forecasting and classification tasks in domains such as epidemiology, energy, economics, behavioural datasets, etc. LPTM provides performance on par with state-of-art models with lesser pre-training data, training data and fewer training steps. Our main contributions can be summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "\u2022 Multi-domain Pre-trained time-series model We propose a framework for generating foundational pre-trained models for time-series that are trained on multiple datasets across varied domains. LPTM solves the tokenization problem for cross-domain time-series data and proposes a novel adaptive segmentation module which is important to build pre-trained models for time-series similar to foundational models for text and vision. ", "page_idx": 1}, {"type": "text", "text": "\u2022 Adaptive segmentation for cross-domain pre-training To optimally extract semantically useful information from time-series of different domains with varied dynamics and sampling rates for pre-training, we propose a novel adaptive segmentation module that learns segmentation strategy for each domain based on losses from self-supervised learning tasks. ", "page_idx": 1}, {"type": "text", "text": "\u2022 State-of-art and efficient performance in diverse downstream time-series tasks We evaluate LPTM on downstream forecasting and classification tasks from multiple domains and observe that LPTM consistently provides performance similar to or better than previous state-of-art models usually under zero-shot evaluation as well as when fine-tuned with lesser training data and compute time. Overall, we also observe that LPTM typically requires less than $80\\%$ of training data used by state-of-art baselines to provide similar or better performance. ", "page_idx": 1}, {"type": "text", "text": "2 Problem Setup ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Time-series analysis tasks Our pre-trained model can be used for many time-series tasks including forecasting and classification from multiple benchmarks and domains. For a given downstream task let $\\mathcal{D}^{T}$ be the time-series dataset consisting of time series $\\mathbf{y}^{1\\ldots T}$ . A time-series analysis task\u2019s goal is to predict important properties of the time-series. For example, the forecasting task involves predicting the future values $\\mathbf{y}^{T+1\\therefore T+K}$ whereas classification involves predicting the class label of the input time-series based on labelled training data. ", "page_idx": 1}, {"type": "text", "text": "Self-supervised pre-training on multi-domain datasets The goal of our work is to learn useful knowledge and patterns from time-series datasets from time-series from different domains. Formally, we have access to time-series datasets from $K$ domains where the datasets of domain $k$ is denoted as $\\mathcal{D}_{k}^{\\prime}=\\{\\mathcal{D}_{k,i}^{\\prime}\\}_{i=1}^{N(k)}$ where $N(k)$ is the number of datasets in domain $k$ . Examples of these domains include epidemiology, energy forecasting, macroeconomics, traffic prediction, etc. The entire set of heterogenous multi-domain pre-train dataset is denoted as $\\mathcal{D}_{\\mathrm{pre}}=\\{\\mathcal{D}_{1}^{\\prime},\\mathcal{D}_{2}^{\\prime},\\ldots,\\mathcal{D}_{K}^{\\prime}\\}$ . In order to effectively pre-train LPTM on $\\mathcal{D}_{\\mathrm{pre}}$ we formulate the problem as a set of self-supervised learning tasks $\\mathcal{T}_{\\mathrm{pre}}=\\{\\mathcal{T}_{i}\\}_{i=1}^{R}$ on the set of pre-training datasets $\\mathcal{D}_{\\mathrm{pre}}$ . During pre-training, we sample $(D_{k,i}^{\\prime},k)$ , a dataset and its domain label from $\\mathcal{D}_{\\mathrm{pre}}$ and train the model on each of the self-supervised learning tasks in ${\\mathcal T}_{\\mathrm{pre}}$ . The tasks in $\\mathcal{T}_{\\mathrm{pre}}$ are self-supervised and do not require additional labels or other ground truth. These tasks mask patches of the input data and train the model to recover the original input. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Therefore, our problem can be formally stated as: Given a heterogeneous set of multi-domain datasets $\\mathcal{D}_{p r e}$ and their domain labels, we train a model leveraging SSL tasks $\\mathcal{T}_{p r e}$ that learns important patterns and knowledge that can be leveraged on fine-tuning the model to any time-series analysis task on any novel dataset from any of the domains $d\\in\\{1,2,\\ldots,K\\}$ . ", "page_idx": 2}, {"type": "text", "text": "3 Methodology ", "text_level": 1, "page_idx": 2}, {"type": "image", "img_path": "vMMzjCr5Zj/tmp/ecc38f4cd4a9962754d48e7f743f3206f10fa60fcaa4233b953df26d293db92e.jpg", "img_caption": ["Figure 1: Overview of LPTM. The input time-series $y^{(1\\ldots T)}$ is first segmented based on a scoring function optimized using SSL loss. The segments are fed as individual tokens to the transformer encoder to get output embeddings of time-series that are used for downstream tasks. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "Similar to model pipelines used in NLP and vision, we first train a pre-trained model $M(\\theta_{p r e})$ on multiple pre-training datasets $\\mathcal{D}_{\\mathrm{pre}}$ . Most parameters of the pre-trained model $\\theta_{p r e}$ are trained over all the datasets and tasks. However, we use a separate segmentation module for each dataset domain to capture varied sizes of segments that differ across datasets. These segments are used as tokens for a transformer model that shares the parameters across all the tasks. For each pre-trained and downstream task, we append a final linear layer on the output embeddings of the transformer to generate the final prediction. Note that during fine-tuning on downstream tasks we update the parameters of all the modules of LPTM. ", "page_idx": 2}, {"type": "text", "text": "3.1 Adaptive Segmentation module ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Previous works input each time-step of a time-series as individual tokens or fixed-sized segments. Unlike text, individual time-steps do not typically provide any semantic meaning about the temporal patterns of the time-series. Therefore, Nie et al. (2022) proposed to segment the input time-series into uniform length segments and use each of the segments as tokens to the transformer model. Segments of fixed size are also too inflexible to capture semantics of sequences that show varied behaviour across time and across datasets. Different pre-trained datasets may have varied temporal scales, periodicity and other temporal dynamics that cannot be encompassed by a single uniform segmentation strategy. For example, epidemic time-series are usually observed weekly and may have characteristic properties like seasonality, peaks and sudden outbreaks that should be captured by segmentation. Economic time-series, in contrast, are typically captured every quarter and are more monotone with sudden anomalies and changes in data distribution. Moreover, using a uniform segmentation may not be ideal for time series with multi-scale trends with some time-stamps having denser temporal information requiring finer-graned segmentation than others. Therefore, our goal is to identify an independent segmentation strategy for each domain of time-series dataset. ", "page_idx": 2}, {"type": "text", "text": "Overview LPTM automatically identifies an effective segmentation strategy for each dataset domain during pre-training. The overarching goal of the segmentation module involves identifying segments that lead to lower SSL loss. The segmentation module first scores all possible segments of the input time-series and the segments with the highest scores are then chosen as the output segments used to tokenise the time-series. The scoring function is trained such that the score of the segments will reflect how likely the chosen segments will lower the SSL loss. ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "Details For a given input time-series $\\mathbf{y}^{(1\\ldots t)}$ , we pass it through a GRU to get hidden embeddings $\\{\\mathbf{z}^{(i)}\\}_{i=1}^{t}$ that models the temporal patterns of the input: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\{\\mathbf{z}^{(i)}\\}_{i=1}^{t}=\\operatorname{GRU}_{1}(\\{y^{(i)}\\}_{i=1}^{t}).\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "We then introduce a segment score function $s$ that provides a scalar score for any subsequence of the input time-series: ", "page_idx": 3}, {"type": "equation", "text": "$$\ns(i,j)=\\mathbf{v}^{T}\\operatorname{tanh}\\left(\\mathbf{W}_{1}\\mathbf{z}_{i}+\\mathbf{W}_{2}\\mathbf{z}_{j}+\\mathbf{b}\\right).\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Intuitively, the score $s(i,j)$ for a subsequence from time-stamp $i$ to $j$ denotes how good the given segment is for the dataset when optimizing for the SSL loss. ", "page_idx": 3}, {"type": "text", "text": "In next step, we sample subset $S(y^{(1\\ldots t)})$ of subsequences over the time-series that a) covers the entire input time-series, b) has a high score function value. While retrieving the optimal $S(y^{(1\\ldots t)})$ is an interesting combinatorial optimization problem, we generate $S(y^{(1\\ldots t)})$ using a simple process as fsToeolg lromewednsut: c sfeto atrr hteiena cgn huf $i\\in\\{1,2,\\ldots,t-1\\}$ , e w wiete e grdeaentinevroeatlteye $\\begin{array}{r}{h(i)=\\arg\\operatorname*{max}_{j\\in\\{i+1\\ldots,t-1\\}}s(i,j)}\\end{array}$ $i$ $\\hat{S}(y^{(1\\ldots t)})=\\{(i,h(i))\\}_{i=1}^{t-1}$ cannot remove any more segments without having time-steps not covered by any segments in the set. The final set of segments after pruning is denoted as $\\bar{S}(\\bar{y^{(1\\ldots t)}})$ . The segmentation procedure is summarized in Alg. 1. ", "page_idx": 3}, {"type": "text", "text": "Algorithm 1: Adaptive Segmentation Module ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Input :Time-series $\\mathbf{y}^{(1\\ldots t)}=\\{y^{(i)}\\}_{i=1}^{t}$   \n1 Procedure GetScores $(\\mathbf{y}^{(1\\ldots t)})$   \n2 $\\{\\mathbf{z}^{(i)}\\}_{i=1}^{t}\\leftarrow\\operatorname{GRU}(\\{y^{(i)}\\}_{i=1}^{t})$ ; // Encode time-series with GRU   \n3 for $i\\in\\{1,2,\\ldots,t-1\\}$ do   \n4 for $j\\in\\{i+1,\\ldots,t\\}$ do   \n5 L $s(i,j)\\gets\\mathbf{v}^{T}$ tanh $\\left(\\mathbf{W}_{1}\\mathbf{z}^{(i)}+\\mathbf{W}_{2}\\mathbf{z}^{(j)}+\\mathbf{b}\\right);$ // Scores for all segments   \n6 return {s(i, j)}ii,<jj\u2208{1,...,t};   \n7 Procedure ChooseSegments({s(i, j)}ii,<jj\u2208{1,...,t})   \n8 for $i\\in\\{1,2,\\ldots,t-1\\}$ do   \n9 $\\lfloor\\;\\;h(i)\\leftarrow\\arg\\operatorname*{max}_{j\\in\\{i+1,...,t\\}}s(i,j)$ ; // Best segment starting at index i   \n10 $\\hat{S}\\gets\\{(i,h(i))\\}_{i=1}^{t-1}$ ;   \n11 $i\\gets\\mathrm{arg\\,min}_{j:(j,h(j))\\in\\hat{S}}\\,h(j)$ ; // Select lowest scoring segment   \n12 while Segments in $\\hat{S}-\\{(i,h(i))\\}$ doesn\u2019t cover all time-steps $\\{1,2,\\ldots,t\\}$ do   \n13 $\\hat{S}\\gets\\hat{S}-\\{(i,h(i))\\}$ ;   \n14 $i\\leftarrow\\arg\\operatorname*{min}_{j:(j,h(j))\\in\\hat{S}}h(j);$ ;   \n15 return $S\\gets\\hat{S}$ ; ", "page_idx": 3}, {"type": "text", "text": "To generate the token embeddings $\\hat{\\mathbf{e}}(i,j)$ for each segment $(i,j)$ , we pass the embeddings $\\{\\mathbf{z}^{(i)},\\mathbf{z}^{(i+1)},\\ldots,\\mathbf{z}^{(j)}\\}$ through a self-attention layer used in transformers and aggregate the output embeddings. ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{e}}(i,j)=\\sum_{k=i}^{j}\\mathrm{Self-Atten}\\{\\mathbf{z}^{(i)},\\mathbf{z}^{(i+1)},\\boldsymbol{\\cdot}\\cdot\\boldsymbol{\\cdot},\\mathbf{z}^{(j)}\\}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Additionally, we concatenate the following features to the token embedding of each segment token to provide information regarding the position and length of the segment: (1) Positional encoding of the starting time-step of the segment $p o s(i)$ defined as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathrm{pos}(i)=\\left\\{\\!\\!\\!\\begin{array}{l l}{\\sin(i/10^{5i/D})}&{\\mathrm{if~}i\\mathrm{~is~even}}\\\\ {\\cos(i/10^{5(i-1)/D})}&{\\mathrm{if~}i\\mathrm{~is~odd.}}\\end{array}\\!\\!\\right.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $D$ is the dimensions of output embedding of self-attention over $\\{\\hat{\\mathbf{e}}_{i},\\hat{\\mathbf{e}}_{i+1},\\dots,\\hat{\\mathbf{e}}_{R}\\}$ . (2) Positional encoding of the length of the segment $\\overrightarrow{p o s(j-i)}$ . The final output of the segmentation module is a sequence $\\{{\\bf e}_{i}\\}_{i=1}^{R}$ where $R$ number of segments. The segments are arranged based on the ascending order of the first time-stamp of each segment. The token embeddings are fed into a stack of transformer layers similar to the encoder of the transformer Vaswani et al. (2017). The output of the transformer layers is a sequence of output embeddings denoted as $\\{{\\bf o}_{i}\\}_{i=1}^{R}$ . ", "page_idx": 4}, {"type": "text", "text": "3.2 Self-supervised learning Tasks ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Pre-training on a wide range of heterogeneous datasets from multiple domains helps LPTM learn from useful patterns and latent knowledge across these domains that can be generalized to range downstream tasks on different domains. We propose two general self-supervised learning tasks motivated by pre-trained language models to enable LPTM to learn from all pre-trained datasets. We leverage a transformer model and use the segment token embeddings of the segmentation module. The two pre-training SSL tasks are Random Masking (RANDMASK) and Last token masking (LASTMASK). RANDMASK allows the model to extrapolate and interpolate masked segments of the input time-series. RANDMASK has also been explored for representation learning in previous works (Zerveas et al., 2021; Nie et al., 2022) but are applied on the same dataset as that used for training unlike our data and task-agnostic pre-training setup. Formally, we mask each input segment token with a probability of $\\gamma$ and decode the values of time-series of the masked segments from the output embeddings of the transformer. We use a simple GRU with a single hidden layer on the output embedding of the masked token to decode the values of the segment. We use mean-squared error as the loss $\\mathcal{L}_{S S L}$ . LASTMASK is similar to RANDMASK except we mask last $\\gamma$ fraction of the segments. This allows the model to forecast the future values of the time-series, an important task in many time-series domains. ", "page_idx": 4}, {"type": "text", "text": "3.3 Training details ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Instance normalization The values of the time-series of each dataset can vary widely based on the time-series domain. Therefore, as part of pre-processing, we first normalize the time-series of each dataset of pre-train datasets independently. Moreover, the data distribution and the magnitude of the time-series can vary across time. We use reversible instance normalization (REVIN) layer Kim et al. (2021). REVIN performs instance normalization on the input time-series and reverses the normalization of the output values. The normalization step is part of the neural model and gradients are calculated over the normalization and reverse normalization layers. ", "page_idx": 4}, {"type": "text", "text": "Training the score function We use the loss from the SSL tasks to train the score function of the segmentation module and GRU in Eqn. 1. Since there is no direct gradient flow between the score function and the final predictions, due to the discrete nature of choosing the segments, we match the aggregated scores of all the chosen segments in $S(y^{(1\\ldots t)})$ to the negative logarithm of the total MSE loss of both SSL tasks: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{g}=\\left(\\sum_{(i,j)\\in S(y^{(1...t)})}s(i,j)+\\log(\\mathcal{L}_{S S L})\\right)^{2}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\mathcal{L}_{S S L}$ is the total loss of both SSL tasks. We also backpropagate over $\\mathcal{L}_{g}$ once every 10 batches to stabilize training since changing the segmentation strategy for every batch leads to unstable and inefficient training. ", "page_idx": 4}, {"type": "text", "text": "Linear-probing and fine-tuning Kumar et al. (2022) showed that fine-tuning all the parameters of the pre-trained model for a specific downstream task can perform worse than just fine-tuning only the last layer (linear probing), especially for downstream tasks that are out-of-distribution to pre-trained data. To alleviate this, they suggest performing a two-stage fine-tuning process: we first perform linear probing followed by fine-tuning all the parameters. ", "page_idx": 4}, {"type": "text", "text": "4 Related Works ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Neural models for time-series analysis DeepAR Salinas et al. (2020) is a popular forecasting model that trains an auto-regressive recurrent network to predict the parameters of the forecast distributions. Deep Markov models Krishnan et al. (2017); Rangapuram et al. (2018); Li et al. (2021); Gu et al. (2021) model the transition and emission components with neural networks. Recent works have also shown the efficacy of transformer-based models on general time-series forecasting Oreshkin et al. (2019); Zhou et al. (2021); Chen et al. (2021); Zhou et al. (2022); Liu et al. (2021). However, these methods do not perform pre-training and are trained independently for each application domain. therefore, they do not leverage cross-domain datasets to generate generalized models that can be used for a wide range of benchmarks and tasks. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "Self-supervised learning for time-series Recent works have shown the efficacy of self-supervised representation learning for time-series for various classification and forecasting tasks in a wide range of applications such as modeling behavioral datasets Merrill and Althoff (2022); Chowdhury et al. (2022), power generation Zhang et al. (2019), health care Zhang et al. (2022). Franceschi et al. (2019) used triplet loss to discriminate segments of the same time-series from others. These works use methods such as contrastive losses Eldele et al. (2021); Yue et al. (2022) or other similarity metric-based techniques Tonekaboni et al. (2021). However, all these methods apply SSL on the same dataset that is used for training and may not adapt well to multi-domain datasets. There has been some recent works leveraging foundational models like LLMs for time-series forecasting across multiple applications. One set of works directly uses LLMs without fine-tuning to perform time-series forecasting via careful prompting Gruver et al. (2024); Jin et al. (2024); Liu et al. (2024d). Other works fine-tune LLMs specifically for time-series forecasting Zhou et al. (2023); Rasul et al. (2023); Ansari et al. (2024). The time-series representation used by these models includes using individual time-steps as input Ansari et al. (2024), converting each digit of the time-series to character embeddings to be directly used by LLMs Gruver et al. (2024); Jin et al. (2024) and uniform segmentation Das et al. (2023b); Woo et al. (2024); Zhou et al. (2023). LPTM performs superior to these methods while being 10x to $100\\mathrm{x}$ smaller than the large LLMs used as backbones. ", "page_idx": 5}, {"type": "text", "text": "5 Experiment Setup ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Datasets We derive pre-train time-series datasets from multiple domains: \u2022 Epidemics: We use a large number of epidemic time-series aggregated by Project Tycho (van Panhuis et al., 2018). from 1888 to 2021 for different diseases collected at state and city levels in the US. We remove time series with missing data and use time series for 11 diseases of very diverse epidemic dynamics such as seasonality, biology, geography, etc.: Hepatitis A, measles, mumps, pertussis, polio, rubella, smallpox, diphtheria, influenza, typhoid and Cryptosporidiosis (Crypto.). \u2022 Electricity: We use ETT electricity datasets (ETT1 and ETT2) collected from (Zhou et al., 2021) at 1 hour intervals over 2 years. We use the default 12/4/4 train/val/test split and use the train split for pre-training as well. \u2022 Traffic Datasets: We use 2 datasets related to traffic speed prediction. PEMS-Bays (PEM-B) and METR-LA (Li et al., 2017) are datasets of traffic speed at various spots collected by the Los Angeles Metropolitan Transportation Authority and California Transportation Agencies over 4-5 months. \u2022 Demand Datasets: We use bike and taxi demand datasets (NY-B, NY-T) from New York City collected from April to June 2016 sampled every 30 minutes. We all but the last 5 days of data for training and pre-training. \u2022 Stock forecasting: We also collect the time-series of daily stock prices of Nasdaq and S&P 500 index using Yahoo finance data $\\mathrm{Xu}$ and Berkely, 2014) from July 2014 to June 2019. We train and pre-train using the first 800 trading days and use the last 400 for testing. \u2022 M4 competition time-series: We also used the 3003 time-series of M4 forecasting competition (Makridakis and Hibon, 2000) which contains time-series from multiple domains including demographics, finance, and macroeconomics. \u2022 Motion and behavioral sensor datasets: We use the set of sensor datasets extracted from UEA archive (Bagnall et al., 2018) and UCI Machine learning repository (Asuncion and Newman, 2007) similar to (Chowdhury et al., 2022). Note that our publicly accessible pre-training dataset is significantly smaller than other pre-trained datasets used by past work Ansari et al. (2024); Das et al. (2023b) some of which use confidential data inaccessible to us. We also do not use any synthetic datasets like Das et al. (2023b); Ansari et al. (2024). ", "page_idx": 5}, {"type": "text", "text": "Downstream tasks We test the pre-trained LPTM trained on datasets discussed above on multiple forecasting and time-series classification tasks. We perform forecasting on the influenza incidence time series in US and Japan. Specifically, we use the aggregated and normalized counts of outpatients exhibiting influenza-like symptoms released weekly by CDC1. For influenza in Japan, we use influenza-affected patient counts collected by $\\mathrm{NIID}^{2}$ . We forecast up to 4 weeks ahead over the period of 2004 to 2019 flu seasons using a similar setup as Flusight competitions Reich et al. (2019). ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "We also perform electricity forecasting on the ETT1 and ETT2 datasets using the train/test split mentioned previously. The last $10\\%$ of PEM-Bays dataset is used for traffic forecasting up to 1 hour ahead and the last 5 days of New York demand datasets for demand forecasting up to 120 minutes in the future. We also perform forecasting on the Nasdaq dataset for up to 5 days ahead and M3 time-series for 1 month ahead. We use 6 of the sensor datasets from Asuncion and Newman (2007) for time-series classification tasks. We use an 80-20 train-test split similar to Chowdhury et al. (2022). ", "page_idx": 6}, {"type": "text", "text": "Baselines We compared LPTM\u2019s performance in various time-series tasks against twenty two state-of-the-art general forecasting and domain-specific baselines. First, we compare against recent pre-trained foundational time-series models: (1) LLM-Time Gruver et al. (2024), (2) TimesFM Das et al. (2023b), (3) Lag-LLAMA Rasul et al. (2023), (4) Chronos Ansari et al. (2024) and (5) MOIRAI Woo et al. (2024). We skip models like Time-LLM Jin et al. (2024), MOMENT Goswami et al. (2024) and Autotimes Liu et al. (2024b) which cannot perform zero-shot forecasting across domains and are outperformed by the aforementioned recent models when fine-tuned. We compared with (6) Informer Zhou et al. (2021), (7) Autoformer Chen et al. (2021), (8) iTransformer Liu et al. (2023) and (9) PatchTST Nie et al. (2022), four state-of-the-art transformer-based forecasting models. We also compare against other recent model (10) MICN (Wang et al., 2022), (11) TiDE Das et al. (2023a) (12) TFT Lim et al. (2021) and (13) TimesNeT Wu et al. (2023). We also compare with (14) N-HITS Challu et al. (2023) which uses multi-scale interpolation and (15) AutoARIMA Hyndman and Khandakar (2008) a ARIMA based model that does automatic hyperparameter search. We also compare it against three other state-of-art self-supervised methods for time-series: (16) TS2Vec (Yue et al., 2022), (17) TS-TCC (Eldele et al., 2021) and (18) SimMTM Dong et al. (2024) uses masking as pre-trained task for time-series classification. ", "page_idx": 6}, {"type": "text", "text": "Finally, we compared against the best models for individual tasks for each domain. For influenza forecasting, we compared against previous state-of-art models (19) EpiFNP Kamarthi et al. (2021) and (20) ColaGNN Deng et al. (2020) respectively. We also compare against (21) STEP Shao et al. (2022) a SOTA model for demand forecasting, traffic prediction, and stock prediction benchmarks among the baselines by automatically modelling sparse relations between multiple features of the time-series. For classification tasks, we compare against (22) TARNet Chowdhury et al. (2022). ", "page_idx": 6}, {"type": "text", "text": "6 Results ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Table 1: Average zero-shot forecast performance (measured as RMSE over 10 runs) of LPTM and pre-trained baselines. The best model is in bold. ", "page_idx": 6}, {"type": "table", "img_path": "vMMzjCr5Zj/tmp/403a6fe11964dfb9b2b96bf1dae5c95fe9b08dd1237e514180a4e94d95d92309.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "The code for implementation of LPTM and datasets are provided at anonymized $\\mathrm{link}^{3}$ and hyperparameters are discussed in the Appendix. LPTM consists of 10 layers for the transformer and overall has about 100M parameters which $2\\mathbf{x}$ to over 10x smaller than other pre-trained time-series models. ", "page_idx": 6}, {"type": "text", "text": "Zero-shot forecasting An important benefti of foundational models in language and vision is their ability to adapt to novel tasks without any fine-tuning in a zero-shot setting Brown et al. (2020). We evaluate the zero-shot performance of LPTM and other pre-trained baselines. Similar to Gruver et al. (2024) we use the last $20\\%$ of the datasets for zero-shot evaluation. We do not fine-tune the models but only input the normalized time-series for new tasks directly during inference. The results are summarized in Table 1. LPTM outperforms all the baselines significantly. Moreover, the baselines such as TS2Vec, TS-TCC and SimMTM which are not designed to handle datasets from multiple domains perform much worse than other pre-trained methods. This shows the importance of adaptive segmentation-based tokenization of LPTM to better generalize across multiple domains. ", "page_idx": 6}, {"type": "table", "img_path": "vMMzjCr5Zj/tmp/2aee95095d60c990ce80509e5210a9a58e918bc6ab119c7735b86cf3fc47d2d6.jpg", "table_caption": ["Table 2: Average forecast performance (measured as RMSE over 10 runs) of LPTM and baselines over different domains. The best model is in bold and the second best is underlined. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Fine-tuned forecasting We also train the models with training data to evaluate fine-tuned performance. The forecasting performance are shown in Table 2. We evaluated LPTM against seventeen other forecasting baselines. LPTM is either the first or a close second best-performing model in all the benchmarks. LPTM generally outperforms general time-series forecasting methods as well as 2recent pre-trained models in all benchmarks despite its much lower parameter count (2-10x lower). Further, it is competitive or superior in performance to domain-specific methods designed specifically for the given domains (such as EpiFNP and STEP). LPTM beats the previous state-of-art domain-specific baselines in five of the benchmarks and comes second in four more. Finally, LPTM improves upon the state-of-art on electricity forecasting, traffic forecasting, and M3 datasets. ", "page_idx": 7}, {"type": "text", "text": "Time-series classification Unlike other autoregressive foundational models designed for forecasting, LPTM can be used for classification due to its encoder-style architecture. We add a single classification layer over pooled output embeddings $\\{\\mathbf{o}^{(i)}\\}_{i=1}^{R}$ (i)}iR=1 to predict the class logits. We evaluate LPTM and baselines on the classification of 35 sensor and behavioral datasets from UCI classification repositiry(Asuncion and Newman, 2007). We report the accuracy scores in Table 3. We observe that LPTM has highest mean rank and largest number of times it outperforms all baselines. ", "page_idx": 7}, {"type": "text", "text": "Data efficiency A significant advantage of leveraging pre-trained models is that we do not require large datasets for fine-tuning to a specific task. We evaluate the efficacy of LPTM to train with a fraction of training data. For each time-series analysis task, we fine-tune the model using only $k\\%$ of training data for different values of $k$ . We use the first $k\\%$ of the timestamps\u2019 values. We do not choose a random sample to prevent data mixing from the rejected portion of training data. We also performed the similar experiment on the best baseline for each task and compare data efficiency of baseline with LPTM. The comparison plots are shown in Figure 2. With lesser data, the performance ", "page_idx": 7}, {"type": "text", "text": "Table 3: Average classification performance (measured as accuracy score over 10 runs) of LPTM and baselines over different domains. The best model is in bold and the second best is underlined. The best model is statistically significant over the baselines $(p\\leq0.05)$ when it beats the previous state-of-art. ", "page_idx": 8}, {"type": "table", "img_path": "vMMzjCr5Zj/tmp/c99183772b1afe1cbf8ae9b34eaa429e6bd518e5f87bf835adb73b8ce5d397d7.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "vMMzjCr5Zj/tmp/79c3b50030315171f609064b9cc7744c20aae46de34f030e8373f3a4986f03b2.jpg", "img_caption": ["Figure 2: Performance of LPTM and best baseline with varying fractions of training data. In most cases LPTM significantly outperforms baselines with lower amount of data. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "of the baseline is much worse whereas LPTM typically requires much less data to provide similar performance to when we have access to the full dataset. This shows the importance of pre-training to quickly ramp up the performance of the model with much less data, a problem we encounter is many real-world settings such as when we need to deploy a forecasting model on novel applications such as a new pandemic with sparse data availability. ", "page_idx": 8}, {"type": "text", "text": "Training efficiency An important advantage of pre-trained models is that they require much less training time and resources to fine-tune to a downstream task compared to time required for pretraining or even training from scratch. We compare the fine-tuning time of LPTM with baselines on benchmarks from different domains. We also measure the average time required by LPTM to reach the performance of the best baseline in cases where we eventually outperform them. The training times are summarized in Appendix Table 4. We observe that the time taken by LPTM to reach the performance of best best-performing baseline (LPTM-TB) is significantly smaller than the time taken by any other baselines. Even when LPTM doesn\u2019t outperform the best baseline, it typically converges much faster. ", "page_idx": 8}, {"type": "text", "text": "Ablation and Sensitivity Studies We study the impact of our adaptive segmentation as well as pre-training and linear probing via the ablation models LPTM-NoSegment, LPTM-NoPreTrain and LPTM-NoLinProb. We also investigate the individual impact of both SSL task via the ablation models LPTM-OnlyRandMask and LPTM-OnlyLastMask. The performance of the ablation variants are also shown in Tables 2. We observe that the ablation variants\u2019 performances are significantly worse than the variants, underperforming some of the baselines. The worst performing variant is usually LPTMNoSegment, showing the importance of deriving good time-series segments to improve representation learning of time-series for each dataset. We also examined the sensitivity of hyperparameter $\\gamma$ for SSL tasks and found the optimal value at 0.4 for LASTMASK and 0.2 for RANDMASK. The sensitivity analysis plots are in Appendix Fig. 5. ", "page_idx": 9}, {"type": "text", "text": "Segments generated by LPTM We also visualized the segments in Fig. 3. We observe that the segment sizes are smaller in regions of high variance or important parts of the time-series such as peak of the epidemic whereas simpler trends have longer segments which matches our intuition. ", "page_idx": 9}, {"type": "image", "img_path": "vMMzjCr5Zj/tmp/7f035e66c8fe7691374db5bd3e2af1e287190535e0accbce063507d783bae2c6.jpg", "img_caption": ["Figure 3: Segmentation learned by LPTM "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "7 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We make a significant contribution towards general pre-trained models for time-series analysis tasks replicating the success of large pre-trained models in language and vision domains. We introduce LPTM, a general pre-trained model that provides state-of-art performance on a wide range of forecasting and classification tasks from varied domains and applications. LPTM provides similar to or better performance to state-of-art domain-specific models in applications such as epidemiology, energy, traffic, and economics and significantly beats recent time-series foundational models. We also observe that LPTM required significantly lesser pre-training and training data to reach optimal performance compared to other baselines in most benchmarks. ", "page_idx": 9}, {"type": "text", "text": "Our work mainly focuses on the important challenge of providing semantically meaningful inputs to the model that caters to learning time-series segmentation strategies specific to each domain. This is crucial when pre-training on diverse datasets, a key challenge for time-series data. The underlying model architecture is a straightforward transformer encoder that uses well-known masking techniques for self-supervised pre-training. Therefore, our method can be extended to leverage novel time-series model architectures and SSL methods. Extending our methods to provide calibrated forecasts that provide reliable uncertainty measures is also another important direction of research. We can also extend it to leverage multimodal datasets like text that provide important contextual information about the dataset Liu et al. (2024c). ", "page_idx": 9}, {"type": "text", "text": "Since our model can be applied to any generic time-series analysis tasks including those in critical domains such as public health, medicine, economics, etc., important steps need to be taken to address potential misuse of the our methods such as testing for fairness, data quality issues, ethical implications of predictions, etc. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This paper was supported in part bythe NSF (Expeditions CCF-1918770, CAREER IIS-2028586, Medium IIS-1955883, Medium IIS-2403240, Medium IIS-2106961, PIPP CCF-2200269), CDC MInD program, Meta faculty gifts, and funds/computing resources from Georgia Tech. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "Abdul Fatir Ansari, Lorenzo Stella, Caner Turkmen, Xiyuan Zhang, Pedro Mercado, Huibin Shen, Oleksandr Shchur, Syama Sundar Rangapuram, Sebastian Pineda Arango, Shubham Kapoor, et al. 2024. Chronos: Learning the language of time series. arXiv preprint arXiv:2403.07815 (2024). ", "page_idx": 10}, {"type": "text", "text": "Arthur Asuncion and David Newman. 2007. UCI machine learning repository.   \nAnthony Bagnall, Hoang Anh Dau, Jason Lines, Michael Flynn, James Large, Aaron Bostrom, Paul Southam, and Eamonn Keogh. 2018. The UEA multivariate time series classification archive, 2018. arXiv preprint arXiv:1811.00075 (2018).   \nRishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, et al. 2021. On the opportunities and risks of foundation models. arXiv preprint arXiv:2108.07258 (2021).   \nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. 2020. Language models are few-shot learners. Advances in neural information processing systems 33 (2020), 1877\u20131901.   \nCristian Challu, Kin G Olivares, Boris N Oreshkin, Federico Garza Ramirez, Max Mergenthaler Canseco, and Artur Dubrawski. 2023. Nhits: Neural hierarchical interpolation for time series forecasting. In Proceedings of the AAAI Conference on Artificial Intelligence, Vol. 37. 6989\u20136997.   \nMinghao Chen, Houwen Peng, Jianlong Fu, and Haibin Ling. 2021. Autoformer: Searching transformers for visual recognition. In Proceedings of the IEEE/CVF international conference on computer vision. 12270\u201312280.   \nRanak Roy Chowdhury, Xiyuan Zhang, Jingbo Shang, Rajesh K Gupta, and Dezhi Hong. 2022. TARNet: Task-Aware Reconstruction for Time-Series Transformer. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining. 212\u2013220.   \nAbhimanyu Das, Weihao Kong, Andrew Leach, Shaan Mathur, Rajat Sen, and Rose Yu. 2023a. Long-term forecasting with tide: Time-series dense encoder. arXiv preprint arXiv:2304.08424 (2023).   \nAbhimanyu Das, Weihao Kong, Rajat Sen, and Yichen Zhou. 2023b. A decoder-only foundation model for time-series forecasting. arXiv preprint arXiv:2310.10688 (2023).   \nSonggaojun Deng, Shusen Wang, Huzefa Rangwala, Lijing Wang, and Yue Ning. 2020. ColaGNN: Cross-location Attention based Graph Neural Networks for Long-term ILI Prediction. In Proceedings of the 29th ACM International Conference on Information & Knowledge Management. 245\u2013254.   \nJiaxiang Dong, Haixu Wu, Haoran Zhang, Li Zhang, Jianmin Wang, and Mingsheng Long. 2024. Simmtm: A simple pre-training framework for masked time-series modeling. Advances in Neural Information Processing Systems 36 (2024).   \nEmadeldeen Eldele, Mohamed Ragab, Zhenghua Chen, Min Wu, Chee Keong Kwoh, Xiaoli Li, and Cuntai Guan. 2021. Time-series representation learning via temporal and contextual contrasting. arXiv preprint arXiv:2106.14112 (2021).   \nJean-Yves Franceschi, Aymeric Dieuleveut, and Martin Jaggi. 2019. Unsupervised scalable representation learning for multivariate time series. Advances in neural information processing systems 32 (2019).   \nMononito Goswami, Konrad Szafer, Arjun Choudhry, Yifu Cai, Shuo Li, and Artur Dubrawski. 2024. Moment: A family of open time-series foundation models. arXiv preprint arXiv:2402.03885 (2024).   \nNate Gruver, Marc Finzi, Shikai Qiu, and Andrew G Wilson. 2024. Large language models are zero-shot time series forecasters. Advances in Neural Information Processing Systems 36 (2024).   \nAlbert Gu, Karan Goel, and Christopher R\u00e9. 2021. Efficiently modeling long sequences with structured state spaces. arXiv preprint arXiv:2111.00396 (2021).   \nRob J Hyndman and George Athanasopoulos. 2018. Forecasting: principles and practice. OTexts.   \nRob J Hyndman and Yeasmin Khandakar. 2008. Automatic time series forecasting: the forecast package for R. Journal of statistical software 27 (2008), 1\u201322.   \nMing Jin, Shiyu Wang, Lintao Ma, Zhixuan Chu, James Y Zhang, Xiaoming Shi, Pin-Yu Chen, Yuxuan Liang, Yuan-Fang Li, Shirui Pan, et al. 2024. Time-llm: Time series forecasting by reprogramming large language models. ICLR (2024).   \nHarshavardhan Kamarthi, Lingkai Kong, Alexander Rodr\u00edguez, Chao Zhang, and B Aditya Prakash. 2021. When in doubt: Neural non-parametric uncertainty quantification for epidemic forecasting. Advances in Neural Information Processing Systems 34 (2021), 19796\u201319807.   \nTaesung Kim, Jinhee Kim, Yunwon Tae, Cheonbok Park, Jang-Ho Choi, and Jaegul Choo. 2021. Reversible instance normalization for accurate time-series forecasting against distribution shift. In International Conference on Learning Representations.   \nRahul Krishnan, Uri Shalit, and David Sontag. 2017. Structured inference networks for nonlinear state space models. In Proceedings of the AAAI Conference on Artificial Intelligence, Vol. 31.   \nAnanya Kumar, Aditi Raghunathan, Robbie Jones, Tengyu Ma, and Percy Liang. 2022. Fine-Tuning can Distort Pretrained Features and Underperform Out-of-Distribution. ArXiv abs/2202.10054 (2022).   \nLongyuan Li, Junchi Yan, Xiaokang Yang, and Yaohui Jin. 2021. Learning interpretable deep state space model for probabilistic time series forecasting. arXiv preprint arXiv:2102.00397 (2021).   \nYaguang Li, Rose Yu, Cyrus Shahabi, and Yan Liu. 2017. Diffusion convolutional recurrent neural network: Data-driven traffic forecasting. arXiv preprint arXiv:1707.01926 (2017).   \nBryan Lim, Sercan \u00d6 Ar\u0131k, Nicolas Loeff, and Tomas Pfister. 2021. Temporal fusion transformers for interpretable multi-horizon time series forecasting. International Journal of Forecasting 37, 4 (2021), 1748\u20131764.   \nHaoxin Liu, Harshavardhan Kamarthi, Lingkai Kong, Zhiyuan Zhao, Chao Zhang, and B Aditya Prakash. 2024a. Time-Series Forecasting for Out-of-Distribution Generalization Using Invariant Learning. In Forty-first International Conference on Machine Learning.   \nHaoxin Liu, Shangqing Xu, Zhiyuan Zhao, Lingkai Kong, Harshavardhan Kamarthi, Aditya B Sasanur, Megha Sharma, Jiaming Cui, Qingsong Wen, Chao Zhang, and B Aditya Prakash. 2024c. Time-MMD: A New Multi-Domain Multimodal Dataset for Time Series Analysis. Advances in Neural Information Processing Systems (2024).   \nHaoxin Liu, Zhiyuan Zhao, Jindong Wang, Harshavardhan Kamarthi, and B Aditya Prakash. 2024d. LSTPrompt: Large Language Models as Zero-Shot Time Series Forecasters by Long-Short-Term Prompting. In The 62nd Annual Meeting of the Association for Computational Linguistics. https: //openreview.net/forum?id=wZStCNmoqN   \nShizhan Liu, Hang Yu, Cong Liao, Jianguo Li, Weiyao Lin, Alex X Liu, and Schahram Dustdar. 2021. Pyraformer: Low-complexity pyramidal attention for long-range time series modeling and forecasting. In International conference on learning representations.   \nYong Liu, Tengge Hu, Haoran Zhang, Haixu Wu, Shiyu Wang, Lintao Ma, and Mingsheng Long. 2023. itransformer: Inverted transformers are effective for time series forecasting. arXiv preprint arXiv:2310.06625 (2023).   \nYong Liu, Guo Qin, Xiangdong Huang, Jianmin Wang, and Mingsheng Long. 2024b. AutoTimes: Autoregressive Time Series Forecasters via Large Language Models. arXiv preprint arXiv:2402.02370 (2024).   \nSpyros Makridakis and Michele Hibon. 2000. The M3-Competition: results, conclusions and implications. International journal of forecasting 16, 4 (2000), 451\u2013476.   \nMike A Merrill and Tim Althoff. 2022. Self-supervised Pretraining and Transfer Learning Enable Flu and COVID-19 Predictions in Small Mobile Sensing Datasets. arXiv preprint arXiv:2205.13607 (2022).   \nYuqi Nie, Nam H Nguyen, Phanwadee Sinthong, and Jayant Kalagnanam. 2022. A Time Series is Worth 64 Words: Long-term Forecasting with Transformers. arXiv preprint arXiv:2211.14730 (2022).   \nBoris N Oreshkin, Dmitri Carpov, Nicolas Chapados, and Yoshua Bengio. 2019. N-BEATS: Neural basis expansion analysis for interpretable time series forecasting. arXiv preprint arXiv:1905.10437 (2019).   \nSyama Sundar Rangapuram, Matthias W Seeger, Jan Gasthaus, Lorenzo Stella, Yuyang Wang, and Tim Januschowski. 2018. Deep state space models for time series forecasting. Advances in neural information processing systems 31 (2018).   \nKashif Rasul, Arjun Ashok, Andrew Robert Williams, Arian Khorasani, George Adamopoulos, Rishika Bhagwatkar, Marin Bilo\u0161, Hena Ghonia, Nadhir Vincent Hassen, Anderson Schneider, et al. 2023. Lag-llama: Towards foundation models for time series forecasting. arXiv preprint arXiv:2310.08278 (2023).   \nNicholas G. Reich, Logan C. Brooks, Spencer J. Fox, Sasikiran Kandula, Craig J. McGowan, Evan Moore, Dave Osthus, Evan L. Ray, Abhinav Tushar, Teresa K. Yamana, Matthew Biggerstaff, Michael A. Johansson, Roni Rosenfeld, and Jeffrey Shaman. 2019. A collaborative multiyear, multimodel assessment of seasonal influenza forecasting in the United States. Proceedings of the National Academy of Sciences of the United States of America 116, 8 (2019), 3146\u20133154. https://doi.org/10.1073/pnas.1812594116   \nDavid Salinas, Valentin Flunkert, Jan Gasthaus, and Tim Januschowski. 2020. DeepAR: Probabilistic forecasting with autoregressive recurrent networks. International Journal of Forecasting 36, 3 (2020), 1181\u20131191.   \nZezhi Shao, Zhao Zhang, Fei Wang, and Yongjun Xu. 2022. Pre-training enhanced spatial-temporal graph neural network for multivariate time series forecasting. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining. 1567\u20131577.   \nSana Tonekaboni, Danny Eytan, and Anna Goldenberg. 2021. Unsupervised representation learning for time series with temporal neighborhood coding. arXiv preprint arXiv:2106.00750 (2021).   \nWillem G van Panhuis, Anne Cross, and Donald S Burke. 2018. Project Tycho 2.0: a repository to improve the integration and reuse of data for global population health. Journal of the American Medical Informatics Association 25, 12 (2018), 1608\u20131617.   \nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. Advances in neural information processing systems 30 (2017).   \nHuiqiang Wang, Jian Peng, Feihu Huang, Jince Wang, Junhui Chen, and Yifei Xiao. 2022. Micn: Multi-scale local and global context modeling for long-term series forecasting. In The Eleventh International Conference on Learning Representations.   \nGerald Woo, Chenghao Liu, Akshat Kumar, Caiming Xiong, Silvio Savarese, and Doyen Sahoo. 2024. Unified training of universal time series forecasting transformers. arXiv preprint arXiv:2402.02592 (2024).   \nHaixu Wu, Tengge Hu, Yong Liu, Hang Zhou, Jianmin Wang, and Mingsheng Long. 2023. Timesnet: Temporal 2d-variation modeling for general time series analysis. ICLR (2023).   \nSelene Yue Xu and CU Berkely. 2014. Stock price forecasting using information from Yahoo finance and Google trend. UC Brekley (2014).   \nZhihan Yue, Yujing Wang, Juanyong Duan, Tianmeng Yang, Congrui Huang, Yunhai Tong, and Bixiong Xu. 2022. Ts2vec: Towards universal representation of time series. In Proceedings of the AAAI Conference on Artificial Intelligence, Vol. 36. 8980\u20138987.   \nAiling Zeng, Muxi Chen, Lei Zhang, and Qiang Xu. 2023. Are transformers effective for time series forecasting?. In Proceedings of the AAAI conference on artificial intelligence, Vol. 37. 11121\u201311128.   \nGeorge Zerveas, Srideepika Jayaraman, Dhaval Patel, Anuradha Bhamidipaty, and Carsten Eickhoff. 2021. A transformer-based framework for multivariate time series representation learning. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining. 2114\u20132124.   \nChuxu Zhang, Dongjin Song, Yuncong Chen, Xinyang Feng, Cristian Lumezanu, Wei Cheng, Jingchao Ni, Bo Zong, Haifeng Chen, and Nitesh V Chawla. 2019. A deep neural network for unsupervised anomaly detection and diagnosis in multivariate time series data. In Proceedings of the AAAI conference on artificial intelligence, Vol. 33. 1409\u20131416.   \nXiang Zhang, Ziyuan Zhao, Theodoros Tsiligkaridis, and Marinka Zitnik. 2022. Self-supervised contrastive pre-training for time series via time-frequency consistency. arXiv preprint arXiv:2206.08496 (2022).   \nHaoyi Zhou, Shanghang Zhang, Jieqi Peng, Shuai Zhang, Jianxin Li, Hui Xiong, and Wancai Zhang. 2021. Informer: Beyond efficient transformer for long sequence time-series forecasting. In Proceedings of the AAAI conference on artificial intelligence, Vol. 35. 11106\u201311115.   \nTian Zhou, Ziqing Ma, Qingsong Wen, Xue Wang, Liang Sun, and Rong Jin. 2022. Fedformer: Frequency enhanced decomposed transformer for long-term series forecasting. In International Conference on Machine Learning. PMLR, 27268\u201327286.   \nTian Zhou, Peisong Niu, Liang Sun, Rong Jin, et al. 2023. One fits all: Power general time series analysis by pretrained lm. Advances in neural information processing systems 36 (2023), 43322\u2013 43355. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "Appendix for Large Pre-trained time series models for crossdomain Time series analysis tasks ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "A Hyperparameters ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "The model is run on Intel Xeon CPU with 64 cores and 128 GB RAM. We use a single A100 GPU with 80GB memory. For GRU we use a single hidden layer of 50 hidden units. Dimension of v is also 50. The transformer architecture consists of 10 layers with 8 attention heads each. For forecasting tasks, we train a separate decoder module with 4 more layers during fine-tuning whereas for classification we aggregate the embeddings $\\{e_{i}\\}_{i=1}^{R}$ of the last transformer layer and feed them into a single linear layer that provides logits for all classes. The SSL pre-training was done till convergence via early stopping with patience of 1000 epochs. We observed that LPTM takes 5000-8000 epochs to finish pre-training which takes around 3-4 hours. (Note that pre-training is a one-time step and downstream fine-tuning takes much less time and epochs). For both pre-training and fine-tuning, we used the Adam optimizer with a learning rate of 0.001. The hyperparameters are tuned sparingly for both LPTM and baselines from their default settings. For RANDMASK, we found the optimal $\\gamma=0.4$ , and for LASTMASK $\\gamma=0.2$ was optimal. ", "page_idx": 14}, {"type": "text", "text": "B Data efficiency ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Table 4: Average training time (minutes) till convergence for LPTM and neural baselines. LPTM-TB shows the time taken by LPTM to reach performance of top baseline (in benchmarks where LPTM outperforms it). Since some baselines are specific to forecasting or classification and we do not beat the state-of-art in few benchmarks we designate these cells in the table as NA. ", "page_idx": 14}, {"type": "table", "img_path": "vMMzjCr5Zj/tmp/c6e5a73bc7e1de03ecace1e570a848784a4c2376e5197bbe6f1ea22ce4f39ecf.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "image", "img_path": "vMMzjCr5Zj/tmp/c1665270c2d0b529052bb4a3e13b24359d24ab3be9c0dc45fa9b57d5617b4321.jpg", "img_caption": ["Figure 4: Performance of LPTM and best baseline with varying fractions of training data. In most cases LPTM significantly outperforms baselines with lower amount of data. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "C Effect of SSL hyperparameter $\\gamma$ ", "text_level": 1, "page_idx": 16}, {"type": "image", "img_path": "vMMzjCr5Zj/tmp/e3a2dae4a2a3685c77a82635a59121fdec6807c78d342f04f3b7b3fefdae36b0.jpg", "img_caption": [], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "Figure 5: Effect of $\\gamma$ on performance(RMSE) for different benchmarks ", "page_idx": 16}, {"type": "table", "img_path": "vMMzjCr5Zj/tmp/997d7df385a4080071eb96c186b7b9757841395c6ab86a7cba05dc72d3bc4c13.jpg", "table_caption": ["Table 5: Std. dev across 10 runs "], "table_footnote": [], "page_idx": 17}, {"type": "table", "img_path": "vMMzjCr5Zj/tmp/a1affc556adddb04c583cff65dd8d875fecdc45e355637aa86cb0427940c318e.jpg", "table_caption": [], "table_footnote": ["Table 6: Mean rank of models in Table 2 "], "page_idx": 17}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: The contributions listed in the Introduction are clearly expanded in Methodology and Results ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 18}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Justification: Conclusions discuss limitiations such as not applicable to probabilistic and multivariate forecasts and potential extensions as future work. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 18}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 18}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "Justification: No theoretical results. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 19}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: We provide model architecture and training details in methodology, link to the anonymized repo and hyperparameters in Appendix A. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 19}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: Data and code available in https://github.com/AdityaLab/LPTM/ ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 20}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: Specific details on hyperparameters are in Appendix A. Training details are in Section 3.3. Experiment setup, dataset splits are in Sec 5. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 20}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We perform multiple (10) runs of each experiment and report the average scores. We highlight the instances where LPTM in statistically significantly better than all baselines. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. ", "page_idx": 20}, {"type": "text", "text": "\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 21}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We mention the compute resources used in Appendix A and training time in Appendix B. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 21}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Justification: We went through and confirm the paper follows all the statements in the code of ethics. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 21}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 21}, {"type": "text", "text": "Answer: [No] ", "page_idx": 21}, {"type": "text", "text": "Justification: Our work is a general purpose time-series model that can be utilized towards wide range of applications. Care should be taken to assess the ethics of the decision taken by the predictions, clean the data for any sensitive information and ensure fairness and positive utility in the resulting outcome. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 22}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [No] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: Since this work is a general-purpose foundational work on time-series and we do not focus on any potentially sensitive applications, providing safeguards for release of our work is not applicable. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 22}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: All assets in code are either created by authors or are derived from open-source works and are cited appropriately. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: The code is the only original asset which is released as an anonymous repo linked in the paper. We will make a public release of this on acceptance. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 23}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: No crowdsourcing research. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 23}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 23}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: This work doesn\u2019t deal with research requiring IRB review. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 24}]