[{"type": "text", "text": "SS1: Accelerating Inference with Fast and Expressive Sketch Structured Transform ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Kimia Saedi1 \u2217 Aditya Desai1 \u2217 Apoorv Walia1 Jihyeong Lee2 \u2020 Keren Zhou2 Anshumali Shrivastava1,3 1Rice University 2George Mason University 3Ken Kennedy Institute, ThirdAI Corp., Xmad.ai {ks152,apd10,aw82,as143}@rice.edu {jlee436,kzhou6}@gmu.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Tensor multiplication with learned weight matrices is the fundamental building block in deep learning models. These matrices can often be sparsified, decomposed, quantized, or subjected to random parameter sharing without losing accuracy, suggesting the possibility of more efficient transforms. Although many variants of weight matrices exist, unstructured ones are incompatible with modern hardware, slowing inference and training. On the other hand, structured variants often limit expressivity or fail to deliver the promised latency benefits. We present Sketch Structured Transform(SS1), an expressive and GPU-friendly operator that accelerates inference. SS1 leverages parameter sharing in a random yet structured manner to reduce computation while retraining the rich expressive nature of parameter sharing. We confirm empirically that SS1 offers better quality-efficiency tradeoffs than competing variants. Interestingly SS1 can be combined with Quantization to achieve gains unattainable by either method alone, a finding we justify via theoretical analysis. The analysis may be of independent interest. Moreover, existing pre-trained models can be projected onto SS1 and finetuned for efficient deployment. Surprisingly, these projected models can perform reasonably well even without finetuning. Our experiments highlight various applications of the SS1: (a) Training GPT2 and DLRM models from scratch for faster inference. (b) Finetuning projected BERT models for $1.31\\times$ faster inference while maintaining GLUE scores. (c) Proof of concept with Llama-3-8b, showing $1.11\\times$ faster wall clock inference using projected SS1 layers without finetuning. Our code is open-source.3 ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Tensor-matrix multiplication is one of the fundamental operations in deep learning models across various domains. Linear transformation are especially crucial in transformer architectures, which form the backbone of foundational models responsible for the advanced capabilities of Large Language Models (LLMs). A significant portion of the computational load in LLMs comes from linear layers. For example, with a batch size of 4 at full sequence length, the MLP workload of even the smallest Llama-3-8B model [1] involves $(32768\\times4096\\times4096)$ operations in attention and $(32768\\times4096$ $\\times~14336)$ in the MLP. Larger models have even larger workloads. Given these demands, finding efficient and expressive alternatives to standard linear layers is a crucial research direction. ", "page_idx": 0}, {"type": "text", "text": "Deep learning models often have significant redundancies that can be removed using various techniques. Popular approaches include Sparsification [2, 3, 4, 5, 6], Quantization [2, 7], Randomized ", "page_idx": 0}, {"type": "text", "text": "Parameter Sharing (RPS) [8, 9, 10], and Low-rank decomposition [11, 3]. Unstructured sparsity, while expressive, is inefficient on modern hardware. Structured sparsity [12, 13, 14] and low-rank are efficient but often compromise quality. Recently, it was shown in [15] that sparsity is theoretically weaker than RPS methods regarding the quality of learned models under compression. However, traditional RPS methods only focus on reducing the parameter memory footprint and do not affect FLOPs or latency. This paper proposes Sketch Structured Transform (SS1), an RPS scheme that reduces FLOPs while maintaining quality and improving wall-clock inference for machine learning models. ", "page_idx": 1}, {"type": "text", "text": "Randomized parameter sharing (RPS) reduces the model\u2019s memory footprint by randomly tying parameters across the model. While these methods offer a superior memory-quality tradeoff, they do not alter the computational graph, resulting in similar FLOPs and latency. Addressing this issue \u2013 reducing computation and latency while retaining the memory-quality tradeoff \u2013 has been a key challenge with RPS methods. In this paper, we propose a random yet structured parameter-sharing method that maintains superior quality, reduces the number of FLOPs, and improves the wall-clock latency of linear layers which are compute bound in most workloads. ", "page_idx": 1}, {"type": "text", "text": "The key idea in SS1 is to tie parameters inside a single neuron weight. This weight-tying can be equivalently implemented as the input being reduced in dimension first and then multiplied with the compressed weight vector which reduces FLOPs and memory movement in a neuron computation. We show how to devise this tying in a GPU-friendly manner using what we call $K-$ and $N-$ coalescing. Additionally, SS1 can be integrated with existing RPS methods to obtain independent control of parameter memory and computation during training and inference. While SS1 layers can be used to build a model itself, we can also obtain SS1 models from pre-trained models. This is especially important since many useful models are pre-trained once, and weights are open-sourced for public usage. For this purpose, we provide a projection function to project full matrices onto SS1 matrices, which can transfer knowledge from pre-trained models. Moreover, we demonstrate that SS1 can be effectively combined with post-training quantization to harness the advantages of both approaches. Additionally, we present theoretical insights explaining why the integration of SS1 and quantization leads to performance improvements that neither method can achieve independently. ", "page_idx": 1}, {"type": "text", "text": "We evaluate SS1 layers on a broad set of settings and use cases. A summary of our findings is below. ", "page_idx": 1}, {"type": "text", "text": "\u2022 SS1 has better quality-efficiency tradeoff than competing methods like Monarch[16] (state-of-theart structured sparsity) and LowRank[2] across various domains. With SS1, we can build better models at lower parameter counts while delivering superior inference latency. For example, we achieve up to a $1.30\\times$ improvement in GPT2 [17] model inference throughput. \u2022 Pretrained models can be projected onto SS1 and further finetuned to deploy fast models. We show that we can maintain the GLUE[18] score of BERT[19] while speeding up inference by $1.31\\times$ . \u2022 SS1 projected models can be used even without finetuning with reasonable accuracies. We show proof-of-concept benefits in the Llama-3-8B model[1] with $1.11\\times$ faster inference. \u2022 Quantization[2] is a highly effective technique for improving efficiency that can be combined with SS1. Not only do we see this empirically, but we can also see it in theory. \u2022 SS1 also impacts CPU ML workloads significantly. For instance, we reduce the MLP workload of DLRM[20] MLPerf Model, which contributes over $70\\%$ inference latency, by approximately $2\\times$ using SS1 layers without compromising model quality. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work and Background ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Unstructured Sparsity: The redundancy in the deep learning model can be removed by sparsifying the model using iterative procedure [2, 3, 4]. Another related line of work is that of Lottery ticket hypothesis [5, 6, 21], which tries to find a sparse model at the start of training. Apart from expensive procedures to find these subnetworks, the unstructured sparsity still needs to deliver on the promise of latency improvements for inference. ", "page_idx": 1}, {"type": "text", "text": "Structured Sparsity: Linear transformations that are efficient and expressive has been an active line of research for over a decade. The general direction here is to create a combination of sparse, diagonal, permutation, and sub-linear transformations such as FFT, DCT, and Hadamard [14, 22, 13, 23, 24]. Some of them also used fixed random sparse/diagonal matrices. Structured matrices proposed in this line of research for transformation of size $K\\times K$ have $O(K)$ parameters and $O(K\\bar{l}o g(K))$ FLOPs. The actual speed-up obtained on modern hardware using these methods is limited. More importantly, the expressivity of these matrices is severely restricted due to very few learnable parameters. A recent line of work exploits butterfly matrices [25, 16] and their variations, such as Monarch to obtain expressive transformations. These matrices also fti the general recipe of structured matrices specified above. However, a critical distinction in Monarch matrices is the presen\u221ace of many more parameters. Specifically, \u221athe pure monarch matrices are supposed to contain $O(K{\\sqrt{K}})$ parameters and FLOPs when using $\\sqrt{K}$ blocks or factors (more blocks imply fewer parameters). However, practically, the matrices that have enough representative power in deep learning context generally use two or four blocks [16], i.e. $O(K^{2})$ parameters and FLOPs. Nevertheless, Monarch shows great latency beneftis for training with scheduled different-sized monarch decomposition. However, to our knowledge, the inference beneftis for these matrices are limited. Our paper compares SS1 against Monarch since it is the SOTA representative for this class of matrices. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Quantization: Post training quantization [2] is currently one of the most successful tools for improving large models\u2019 efficiency. The basic idea is to reduce the precision of the weights and activations to reduce the memory footprint of the model and also exploit integer arithmetic [7] for better compute throughput. The literature on quantization is vast, and more details can be found in the survey [26]. In this paper, we show that we can combine SS1 with quantization techniques to further improve latency. We also explore the theory of combining quantization with SS1 approximation in section 4, which can be of independent interest. ", "page_idx": 2}, {"type": "text", "text": "Randomized Parameter Sharing: Randomized parameter sharing was first introduced in [8] as a general model compression tool. RPS is primarily used to reduce the parameter memory footprint of models. The parameter memory is separated from the model\u2019s actual computational graph. Each model\u2019s weight is mapped to the parameter memory using a random hash function. The value of the weight is then the value from the parameter accessed via hash functions. Essentially, if two weights are mapped to the same value in parameter memory, they are tied together and share a single learnable parameter. ", "page_idx": 2}, {"type": "text", "text": "The randomness of weight tying that leads to theoretical guarantees concerning projection quality was also the reason behind the extremely slow systemic performance of the proposal. The systemic performance was fixed using block-based hash mappings showing practical applications in various domains [10, 9, 27]. Surprisingly, the projection quality improves with block-based projections[10] leading to a strictly superior RPS system. RPS quality was further enhanced using global parameter sharing (parameter sharing across modules) which is superior to module-specific parameter sharing [9]. This, however, leads to additional challenges regarding the stability of training the model. These challenges were resolved in [15]. This work also proved a missing link in the theoretical analysis of RPS methods \u2013 it showed that the quality of dimensionality reduction (alt. projection quality) directly correlates with the quality of models learned under projection for linear models. Further, it was shown that random dense projections (which underlie RPS) are superior to random sparse projections (which underlie Pruning) which justifies why RPS methods convincingly outperform pruning methods, especially at high compressions in [15]. Interestingly, most of the RPS literature is strictly focused on reducing the memory footprint and does not affect the computational workload. In this work, we further improve the utility of RPS techniques by deploying them to reduce computation. ", "page_idx": 2}, {"type": "text", "text": "2.1 Background on Randomized Parameter Sharing required for SS1 ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Tying of parameters using hash functions $(h,g)$ : Under RPS, there is a single parameter memory $\\mathcal{M}$ , $|{\\mathcal{M}}|=m$ , and each weight inside the model is mapped to one of the parameters in the memory using hash functions. Let the flattened weight vector of the entire model be $\\theta$ , $|\\theta|=n$ . A weight, say $\\theta[i]$ , is uniquely identified using a set of integers (module number, location inside the module, etc.), say $i d(i)\\in\\mathbf{N}^{k}$ for some $k$ , and then the value of the weight is ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\theta[i]=g(i d(i))\\mathcal{M}[h(i d(i))]\\qquad h:\\mathbf{N}^{k}\\to[m],g:\\mathbf{N}^{k}\\to\\{\\pm1\\}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $[m]=\\{0,1,...,m{-}1\\}$ . ", "page_idx": 2}, {"type": "text", "text": "Sketch representation of recovery: We can write the entire recovery of the vector $\\theta$ as a linear projection from $\\mathcal{M}$ using a sketch matrix $S\\in R^{n\\times m}$ which is defined as ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\forall i\\in[n],S[i,h(i d(i))]=g(i d(i)),\\qquad\\forall j\\neq h(i d(i)),S[i,j]=0\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Then the weight $\\theta$ and the parameter memory $\\mathcal{M}$ is related by, $\\theta=S M$ ", "page_idx": 2}, {"type": "text", "text": "Dimensionality reduction problem: Traditionally, random projections are used as a dimensionality reduction technique for data points. The projection is considered better if it can maintain the structure of the dataset (inter-point distances or equivalently inner products between points). The ", "page_idx": 2}, {"type": "image", "img_path": "nrgyOGU7ZP/tmp/7de623cacb1eb140066a155a6c83445cd32f3827decb896364eafaf7a7bfd489.jpg", "img_caption": ["Figure 1: Illustration of weight tying in SS1. Same colored weights imply that they are tied to the same parameter in memory "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "standard theoretical setup is as follows. Consider two arbitrary vectors $x,y\\ \\in\\ R^{n}$ , Consider a projection function PROJ (or compression technique in general), then $\\hat{x},\\hat{y}$ are projected vectors, $\\hat{x}=\\operatorname{PROJ}(x),\\hat{y}=\\operatorname{PROJ}(y)$ . Then, the quality of the projection is measured by ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathrm{MSE}(\\langle\\hat{x},\\hat{y}\\rangle)=\\mathbf{E}\\left(\\lvert\\lvert\\langle x,y\\rangle-\\langle\\hat{x},\\hat{y}\\rangle\\lvert\\rvert_{2}^{2}\\right)\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where the expectation is over the randomization scheme of the projection. This problem is of interest to evaluate RPS-based learning since the quality of the learned model under projection $f(S\\mathcal M)$ correlates with the quality of data projection $S^{\\top}$ for the standard dimensionality reduction problem with ${\\hat{x}}=S^{\\top}x$ and $\\dot{\\hat{y}}=\\dot{S}^{\\top}y$ [15]. ", "page_idx": 3}, {"type": "text", "text": "3 Sketch Structured Transform(SS1) ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "The SS1 layer falls into the category of RPS methods. We will use small case letters for scalars, boldface small cases for vectors, and boldface capitals for matrices. We use numpy notation of indexing. For instance $\\mathbf{z}[(\\mathrm{range}(n)+5)\\%n][i:j]$ first rotates the vector $\\mathbf{z}$ by 5 places and then selects a subarray from $i$ to $j$ . ", "page_idx": 3}, {"type": "text", "text": "3.1 Parameter sharing in SS1 ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In standard RPS, where the weights are mapped into a single memory $\\mathcal{M}$ , with a high probability, weights corresponding to a single neuron are not tied together. While this seems advantageous for expressivity, it is also the reason why RPS methods cannot reduce computation since we need to perform $O(K)$ multiplications for a single neuron. In SS1, we perform restricted parameter sharing where parameters are tied inside a single neuron only. Consider a linear transform $\\mathbf{y}^{\\top}=\\mathbf{x}^{\\top}\\bar{\\mathbf{W}}$ where $\\dot{\\mathbf{x}}\\in\\mathbb{R}^{K}$ , $\\mathbf{y}\\in\\mathbb{R}^{N}$ and ${\\bf W}:\\mathbb{R}^{K\\times N}$ matrix. ", "page_idx": 3}, {"type": "text", "text": "Single Neuron RPS: Let us consider a single neuron $y=\\mathbf{x}^{\\top}\\mathbf{w}$ . Under SS1, the weights $\\mathbf{w}\\in\\mathbb{R}^{K}$ come from compressed parameter vector $\\mathbf{z}\\in\\mathbb{R}^{K//c}$ where $c$ is the compression factor. We use $//$ to denote integer division. For simplicity, we assume throughout the section that $c$ is an integer and $c|K$ . Each neuron has its own ${\\bf z}$ . Weights w are recovered from $\\mathbf{z}$ using standard RPS. i.e., ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{w}[i]=g(i)\\mathbf{z}[h(i)]\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Equivalently, w can be represented as ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{w}=\\mathbf{S}\\mathbf{z}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathbf{S}:K\\times K//c$ is sparse matrix according to Equation 1. When parameters are shared in this manner, the computation can be reduced. ", "page_idx": 3}, {"type": "equation", "text": "$$\ny=\\mathbf{x}^{\\top}\\mathbf{w}=\\mathbf{x}^{\\top}\\left(\\mathbf{S}\\mathbf{z}\\right)=\\left(\\mathbf{x}^{\\top}\\mathbf{S}\\right)\\mathbf{z}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Thus computing $y$ needs only $K//c$ multiplications since $\\mathbf{x}^{\\top}\\mathbf{S}$ , a sketch of input $\\mathbf{x}$ , can be implemented using only additions and subtractions. As is, this randomized mapping will not be cache-efficient and thus is not GPU-friendly. We show how to make it GPU-friendly using $K$ and $N-$ coalescing in the subsequent parts of this section. ", "page_idx": 3}, {"type": "text", "text": "$\\mathbf{K}$ \u2212coalescing: The single-neuron computation shown above is not GPU-friendly for arbitrary choice of RPS mapping hash function $h$ . We now explain the hash function $h$ used in SS1. ", "page_idx": 3}, {"type": "text", "text": "The parameter tying is illustrated in Figure 1. We first divide the weight vector w into chunks or groups of size $\\mathrm{B_{K}}$ , a hyper-parameter. The chunk-id and offset inside the chunk of weight can be written as, ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{C}(i)=i/\\mathrm{B_{K}}\\qquad\\mathcal{O}(i)=i\\%\\mathrm{B_{K}}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Then $c$ ( recall that $c$ is the integral compression factor ) chunks are grouped together into 1D supergroups. The 1D super group ID of the weight can be written as, ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{G}_{1}(i)=\\mathcal{C}(i)/\\langle c\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We want to restrict the hash function in SS1 to ensure the following, ", "page_idx": 4}, {"type": "text", "text": "1. Each chunk of size $\\mathrm{B_{K}}$ is contiguously located in $\\mathbf{z}$ and do not share weights.   \n2. chunks that belong to the same 1D supergroup share weights among each other. ", "page_idx": 4}, {"type": "text", "text": "We use the following mapping $h^{\\prime}:[K]\\to[K//c]$ to satisfy both conditions. Let $h:\\mathbf{N}\\times\\mathbf{N}\\rightarrow\\mathbf{N}$ be a universal hash function. Then, ", "page_idx": 4}, {"type": "equation", "text": "$$\nh^{\\prime}(i)=\\mathcal{G}_{1}(i)\\mathrm{B_{K}}+(h(\\mathcal{G}_{1}(i),\\mathcal{C}(i))+\\mathcal{O}(i))\\%\\mathrm{B_{K}}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Note that many hash functions which follow the two conditions exist. However, we will stick with this hash function since this is the function we implement. With this hash function, the $j^{t h}$ chunk of $i^{t h}$ 1D super group in w can be written as, ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{w}[(i c+j)\\mathbf{B}_{\\mathrm{K}}:(i c+j+1)\\mathbf{B}_{\\mathrm{K}}]=\\mathbf{z}[i\\mathbf{B}_{\\mathrm{K}}:(i+1)\\mathbf{B}_{\\mathrm{K}}][(\\mathcal{R}(0:\\mathbf{B}_{\\mathrm{K}})+h(i,j))\\mathcal{V}\\mathbf{B}_{\\mathrm{K}}]\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\mathcal{R}(0:n)\\,=\\,(0,1,...,n-1)$ is the range function. In matrix form using Equation 1, let $\\mathbf{S}_{i,j}:\\mathrm{B}_{\\mathrm{K}}\\times\\mathrm{B}_{\\mathrm{K}}$ be the matrix representation of above hash function restricted to $j^{t h}$ chunk of $i^{t h}$ 1D supergroup. Then, ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{w}[(i c+j)\\mathrm{B_{K}}:(i c+j+1)\\mathrm{B_{K}}]=\\mathbf{S}_{i,j}\\mathbf{z}[i\\mathrm{B_{K}}:(i+1)\\mathrm{B_{K}}]\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Then, we can write the single neuron computation as, ", "page_idx": 4}, {"type": "equation", "text": "$$\ny=\\mathbf{x}^{\\top}\\mathbf{w}=\\sum_{i=0}^{(K/\\lceil\\mathrm{B_{K}}//c\\rceil-1}\\left(\\sum_{j=0}^{c-1}\\mathbf{x}^{\\top}[(i c+j)\\mathrm{B_{K}}:(i c+j+1)\\mathrm{B_{K}}]\\mathbf{S}_{i,j}\\right)\\mathbf{z}[i\\mathrm{B_{K}}:(i+1)\\mathrm{B_{K}}]\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We can implement the above computation as follows: Bring in one chunk of ${\\bf z}$ ; then bring in $c$ chunks belonging to the 1D super group of $\\mathbf{x}$ one at a time and aggregate them into a single chunk of size $\\mathrm{B_{K}}$ using sketch matrices S; perform the dot product on the chunk of $\\mathbf{z}$ and aggregated chunk of $\\mathbf{x}$ and move on to the next chunk of ${\\bf z}$ and 1D supergroup of $\\mathbf{x}$ . Note that we can perform this operation in a block manner and using exactly one read of $\\mathbf{z}$ and $\\mathbf{x}$ due to the nature of the hash function. ", "page_idx": 4}, {"type": "text", "text": "$\\mathbf{N}$ \u2212coalescing: Now let us move our discussion from single neuron computation in SS1 to computing all the neurons, i.e. the entire matrix multiplication. In this case we have the complete weight matrix $\\mathbf{W}:K\\times N$ which is derived from a compressed matrix $\\mathbf{Z}:K//c\\times N$ . Apart from $K_{\\cdot}$ - coalescing specific to each neuron, to fully utilize the GPU capabilities, we further restrict parameter sharing along the $N$ dimension. The weight mapping is illustrated in Figure 1. We divide the weights along the $N$ dimension in column blocks of size $\\mathrm{B_{N}}$ . Each neuron that belongs to the same block will have the same set of hash functions. This allows us to do a block-based computation as, ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{y}[:\\mathrm{B_{N}}]=\\mathbf{x}^{\\top}\\mathbf{W}[:,:\\mathrm{B_{N}}]=\n$$", "text_format": "latex", "page_idx": 4}, {"type": "equation", "text": "$$\n\\sum_{i=0}^{(K/\\sqrt)_{\\mathrm{R}}/\\prime)-1}\\left(\\sum_{j=0}^{c-1}\\mathbf{x}^{\\top}[(i c+j)\\mathbf{B}_{\\mathrm{K}}:(i c+j+1)\\mathbf{B}_{\\mathrm{K}}]\\mathbf{S}_{i,j}\\right)\\mathbf{Z}[i\\mathbf{B}_{\\mathrm{K}}:(i+1)\\mathbf{B}_{\\mathrm{K}},:\\mathbf{B}_{\\mathrm{N}}]\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Note that each neuron has its own parameter space in $\\mathbf{Z}$ . The complete algorithm is presented in Algorithm 1. It considers batched multiplication and uses $\\mathrm{B_{M}}$ hyper-parameter, which is standard in matrix multiplication. Also, it uses a slightly different notation for ease of expression. However, it maintains the principles introduced in this section. The kernel implementation and optimization details are deferred to Appendix $\\boldsymbol{\\mathrm E}$ for lack of space. ", "page_idx": 4}, {"type": "text", "text": "3.2 SS1 projection from the pre-trained model ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "A pre-trained model can be projected into SS1 and fine-tuned for downstream tasks. The complete model projection boils down to projecting each full matrix in a linear layer, say $\\mathbf{W}:K\\times N$ into parameter tied SS1 matrix $\\mathbf{Z}:(K//c)\\times N$ . Recall that SS1 has parameter sharing independent in each neuron. Thus, we just have to find the projection for each neuron\u2019s weight. Consider the neuron ", "page_idx": 4}, {"type": "text", "text": "Require: $\\mathbf{X}\\in\\mathbb{R}^{M\\times K}$ : data matrix, $c\\in\\mathbb{N}$ : integral compression factor, $\\mathbf{Z}\\in\\mathbb{R}^{(K//c)\\times N}$ : weight matrix, $\\mathrm{B_{M}}$ , $\\mathrm{B_{K},B_{N}}$ : coalescing parameters, $\\bar{h}:\\mathbb{N}^{3}\\,\\dot{\\rightarrow}\\,\\{0,\\dots,B_{K}-1\\}$ , $g:\\mathbb{N}^{3}\\to\\{\\pm1\\}$   \nRequire: $c\\mathrm{B}_{\\mathrm{K}}|K$   \nEnsure: $\\mathbf{Y}\\in\\mathrm{\\dot{R}}^{M\\times N}=\\mathrm{SS1}(\\mathbf{X},\\mathbf{Z})$   \n1: $\\mathbf{T}_{x}{\\mathrm{=TILE}}(\\mathrm{B_{M}},\\mathrm{B_{K}})$ , $\\mathbf{T}_{\\boldsymbol{y}}{=}\\mathrm{TILE}(\\mathrm{B_{M}},\\mathrm{B_{N}})\\,\\boldsymbol{\\triangleright}$ Allocate 2D tiles. ${\\bf T}_{x}$ will store the intermediate input sketch and $\\mathbf{T}_{\\boldsymbol{y}}$ will store intermediate result   \n2: for $i\\in\\left[\\lceil M/\\mathbf{B_{M}}\\rceil\\right]^{\\cdot}$ do   \n3: for $\\dot{j}\\in[\\lceil N/\\dot{\\mathbf{B_{N}}}\\rceil]\\}$ do   \n4: $\\mathbf{T}_{\\boldsymbol{y}}[:,:]{=}0$ \u25b7reset output tile   \n5: for $\\dot{k}\\in[\\lceil K/c\\rceil]\\}$ do   \n6: $\\mathbf{T}_{\\boldsymbol{x}}[:,:]{=}0$ $\\triangleright$ reset input tile   \n7: for l \u2208[c] do $\\triangleright$ Iterate over $c$ blocks to create input sketch   \n8: $a{=}\\overleftarrow{\\mathbf{X}}[i\\mathrm{{B}_{M}:}(i+1)\\mathrm{{B}_{M}},(k c{+}l)\\mathrm{{B}_{K}}{\\mathrel{:}}(k c{+}l{+}1)\\mathrm{{B}_{K}}]\\,{\\vDash}\\,\\mathrm{{F}}$ Bring in one chunk of input   \n9: $\\begin{array}{r l}&{\\ddot{a}\\!=g(j,k,l)a[:,\\!(\\!\\mathcal{R}(\\boldsymbol{0}:\\mathrm{B}_{\\mathrm{K}})\\!+\\!h(j,k,l))\\%\\mathrm{B}_{\\mathrm{K}}]\\!\\circ\\mathrm{R}}\\\\ &{\\ddot{\\mathbf{T}}\\!\\!\\lrcorner\\!\\doteq\\!a}\\end{array}$ otate input by a random offset   \n10: Tx+ = a \u25b7Aggregate the sketch   \n11: end for   \n12: $\\mathbf{T}_{\\boldsymbol{y}}\\!=\\!\\mathbf{T}_{\\boldsymbol{y}}\\!+\\!\\mathbf{M}\\mathbf{M}(\\boldsymbol{x},\\!Z[k\\mathrm{B}_{\\mathrm{K}};(k\\!+\\!1)\\mathrm{B}_{\\mathrm{K}},j\\mathrm{B}_{\\mathrm{N}};(j\\!+\\!1)\\mathrm{B}_{\\mathrm{N}}])\\,\\,\\,|$ $\\triangleright$ Fetch block of $\\mathbf{Z}$ , perform MM with sketched input and aggregate in tile $\\mathbf{T}_{\\boldsymbol{y}}$   \n13: end for   \n14: $\\mathbf{Y}[i\\mathrm{B_{M}}\\mathrm{:}(i{+}1)\\mathrm{B_{M}},j\\mathrm{B_{N}}\\mathrm{:}(j{+}1)\\mathrm{B_{N}}]{=}\\mathbf{T}_{\\boldsymbol{y}}$   \n15: end for   \n16: end for ", "page_idx": 5}, {"type": "text", "text": "$y=\\mathbf{x}^{\\top}\\mathbf{w}$ and corresponding compressed with ${\\bf z}$ and recovery sketch matrix S. Given w, we want to find ${\\bf z}$ that minimizes ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathbf{z}^{\\ast}=\\mathrm{argmin}_{z}||\\mathbf{w}-\\mathbf{S}\\mathbf{z}||_{2}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "The solution is that of linear regression, $\\mathbf{z}^{\\ast}\\,=\\,(\\mathbf{S}^{\\top}\\mathbf{S})^{-1}\\mathbf{S}^{\\top}\\mathbf{w}$ . Note that $(\\mathbf{S}^{\\top}\\mathbf{S})$ is a diagonal matrix with non-zero diagonal elements. Once we solve for the value of ${\\bf z}$ for each neuron in each weight matrix, we have our overall projection onto SS1. The algorithm for projection can also be implemented in a blocked manner and is given in Algo 2 in Appendix G ", "page_idx": 5}, {"type": "text", "text": "3.3 SS1 combined with standard RPS. ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "SS1, which reduces the computation of the linear layers, can be combined with RPS methods, which reduce the parameter memory to create a holistic efficiency system \u2013 one that lets you control both memory and computation independently. The only change to Algo 1 is in where we read the weight tile. In the current algorithm, we maintain $\\mathbf{Z}:\\dot{K}//c\\dot{\\times}N$ , the compressed weight matrix, in a row-major format. Under RPS, we can locate the tile $\\mathbf{Z}[k\\mathrm{B}_{\\mathrm{K}}:(k+1)\\mathrm{B}_{\\mathrm{K}}$ , $j_{\\mathrm{B_{N}}}:(\\bar{j}+1)\\mathrm{B_{N}}\\rceil$ in the RPS memory, say $\\mathcal{M}$ , using another hash function, say $h^{\\prime}$ , at $\\mathcal{M}[h^{\\prime}(k,j)\\%|\\mathcal{M}|-\\mathrm{B_{K}B_{N}}]$ . ", "page_idx": 5}, {"type": "text", "text": "4 Theoretical aspects of SS1 ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Quantization $\\mathbf{+\\,SS1}$ can beat the individual methods: In this ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "section, we analyze a combination of quantization and SS1 (i.e., projection) in the standard dimensionality reduction setup. We consider stochastic integer quantization for our analysis. Consider two vectors $\\mathbf{x},\\mathbf{y}\\in\\mathbb{R}^{n}$ . We aim to reduce the memory by a factor of $c$ . In case of quantization, assuming initial precision as $F$ , $c=b/F$ if we are using b-bit quantization. Similarly, for projection, $c=m/n$ if projecting the data to $\\mathbb{R}^{m}$ . In case of projection the compressed vector can be represented: ", "page_idx": 5}, {"type": "image", "img_path": "nrgyOGU7ZP/tmp/a0dfd08f021ac6396c581b85eda90b74f7f1f855ecbee236dc769ab1acaff40d.jpg", "img_caption": ["Figure 2: Upper bound on variance "], "img_footnote": [], "page_idx": 5}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{x}}_{p}[i]=\\sum_{j=1}^{n}\\left(g(j)\\mathbf{1}(h(j){=}i)\\mathbf{x}[i]\\right)\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Let the component values be restricted to $(-D/2,D/2)$ for some $D$ . The compressed vector in case of stochastic quanti", "page_idx": 5}, {"type": "text", "text": "zation can be written as, ", "page_idx": 6}, {"type": "equation", "text": "$$\n{\\hat{\\mathbf{x}}}_{q}[i]=\\lfloor\\mathbf{x}[i]\\rfloor_{q}+\\mathbf{1}\\quad{\\mathrm{where~}}\\mathbf{1}={\\left\\{\\begin{array}{l l}{1{\\mathrm{~with~prob~}}p={\\frac{(\\mathbf{x}[i]-\\lfloor\\mathbf{x}[i]\\rfloor_{q})}{D/2^{b}}}}\\\\ {0{\\mathrm{~with~prob~}}(1-p)}\\end{array}\\right.}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "The range $D$ is divided into $2^{b}$ buckets and $\\lfloor.\\rfloor_{q}$ rounds the value down in the buckets. The variance of the inner product between $\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle$ for projection, quantization, and combination that first performs b-bit quantization followed by projection is given below, ", "page_idx": 6}, {"type": "text", "text": "Theorem 1 Consider two arbitrary vectors $\\mathbf{x},\\mathbf{y}\\in R^{n}$ such that $||\\mathbf x||\\leq1,||\\mathbf y||\\leq1$ in $F$ precision. For some fixed value $k$ in [1, 2], ", "page_idx": 6}, {"type": "equation", "text": "$$\nQ(c)={\\frac{2}{2^{2c F}}}+{\\frac{n}{2^{4c F}}}\\,\\,\\,P(c)={\\frac{k}{c n}}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "The variance of quantization $(V(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle_{q}))$ , projection $(V(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle_{p}))$ with compression $c$ , can be tightly bounded by ", "page_idx": 6}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle_{q})\\leq Q(c)\\;\\;\\;V(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle_{p})\\leq P(c)\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "The variance of combination with compression $c\\,=\\,c_{p}c_{q}$ with quantization with compression $c_{q}$ followed by projection with $c_{p}$ is bounded by ", "page_idx": 6}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle_{p q})\\leq Q(c_{q})\\left(1+\\frac{1}{c_{p}}\\right)+P(c_{p})\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "The best way to understand this theorem is to plot the variance as a function of compression as shown in the Figure 2. In the plot, we use $c_{q}=0.3,n=128$ and $k=1.5$ for illustration. As we can see with the combination, the variance is better than individual methods in certain regions. The reason is that both methods do quite well in the low compression regime, and explode steeply at very high compression. Thus, when we combine the two methods, we can remain in relatively low error zones for both methods while obtaining greater overall compression. ", "page_idx": 6}, {"type": "text", "text": "Analyzing parameters of SS1: This section discusses the new aspects of SS1 and how it affects the quality of SS1. Specifically, we discuss the effect of parameters $\\mathrm{B_{K}}$ and $\\mathrm{B_{N}}$ . From a latency viewpoint, it is natural that these parameters should be autotuned to optimize for latency, which is standard for matrix multiplication. However, since these parameters affect the weight tying, it is important to investigate their effect on the quality of models. We consider the standard dimensionality reduction setup to evaluate the changes in mapping performed by SS1. We find that $\\mathrm{B_{K}}$ is a pure latency parameter with no impact on learning quality. We present this as the following result. ", "page_idx": 6}, {"type": "text", "text": "Theorem 2 Consider two vectors $\\mathbf{x}$ , $\\mathbf{y}\\in R^{n}$ in higher dimensional space. Also, let $h$ and $g$ be the SS1 hash functions used to project these vectors to $\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\in R^{m}$ $m<n)$ . Let $\\mathrm{B_{K}}$ be the $K_{}$ -coalescing factor of $h$ . Then, under compression $c=n/m$ and assuming $c\\mathrm{B}_{\\mathrm{K}}|m|n,$ , the inner product estimation is unbiased and has variance, ", "page_idx": 6}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)=\\frac{1}{\\mathrm{B}_{\\mathrm{K}}}\\sum_{i,j=1}^{n}\\sum_{j=1,j\\neq i}^{n}I(i,j)\\left(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j}\\right)\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where $I(i,j)$ is a Kronecker delta function indicating if i and $j$ belong to the different groups in the super group of size $c\\mathrm{B_{K}}$ . Under permutation p of elements of $x$ and $y$ before projection, ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\mathbf{E}_{p}\\left(V(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle-\\langle\\mathbf{x},\\mathbf{y}\\rangle)\\right)=\\frac{(c-1)}{(n-1)}\\sum_{i=1}^{n}\\sum_{j=1,j\\neq i}^{n}\\left(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j}\\right)\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "In the above theorem, we find that the quality of projection is unaffected by the parameter $\\mathrm{B_{K}}$ . This can be understood by considering a specific element in $\\mathbf{x}$ . The number of other elements with which it can interact under projection depends only on the compression factor $c=n/m$ and not on $\\mathrm{B_{K}}$ . We know from [15], that the quality of projection is directly related to the quality of learned linear models under compression. Thus, $\\mathrm{B_{K}}$ does not have any impact on learning quality as well. We analyse the effect of $\\mathrm{B_{N}}$ as well. But the analysis is deferred to the appendix (see section F.2) for lack of space. ", "page_idx": 6}, {"type": "text", "text": "Table 1: This table presents the quality and latency of NLP and vision experiments. Overall across both the domains, SS1 gives best quality models under similar parameters and better quality per unit compute. In terms of inference latency, we see upto $1.3\\times$ increase in throughput. Exact experimental details are present in Appendix I. ", "page_idx": 7}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/5b7d75adb418db16698c9c8a8ce619432c0733ec58d41baf535f1516b3dd1e9f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/386a8e08f171926735a23da4024953144198509430d22b33249b28d207f37503.jpg", "table_caption": ["(a) GPT models on wikitext-103 (standard deviation $:$ around $0.2\\mathrm{PPL}$ measured for baseline model) "], "table_footnote": ["(b) MLPMixer models on CIFAR datasets (Stdev: 0.001 (2x), 0.002 (4x), 0.02 (8x)) "], "page_idx": 7}, {"type": "text", "text": "Table 2: PPL(loss) for [Left]: Applying quantization on some saved checkpoints of original and SS1 models. The effect of quantization on SS1 is similar to that on full model. [Right]: SS1 models can outperform standard models. The std-deviation is around 0.2PPL for these experiments. ", "page_idx": 7}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/1b65e0e63229e13852e7525f2f2c9d0c552d90d88be7d1eeda41469b21c5fa9f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "5.1 Accuracy vs. Latency evaluation of SS1 ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We first evaluate the expressiveness and latency of our SS1 against popular baselines of Monarch, SOTA structured sparsity-based transformation, and LowRank transformation. We benchmark various shapes for the \"nn.Linear\", Monarch, LowRank, and SS1 kernels to evaluate the standalone kernel latency. We use the official Monarch implementation by the authors4with number of blocks (nb) as the compression controlling factor. The results are deferred to the appendix due to space constraints. We also measure end-to-end model latency improvement for various sizes of GPT2 and MLPMixer (MM) [28] models. We show the latency of three sizes of models (small: S, medium:M, ", "page_idx": 7}, {"type": "text", "text": "Table 3: [Left:]BERT pretrained model projected onto SS1 and finetuned on GLUE benchmark. Due to the descripancy, we report both online and our local results of full model. The SS1 model is $\\mathbf{1.31\\times}$ faster for higher batch sizes. Details are available in I.2 [Right:] Proof of concept of applications in Llama-3-8B. We obtain $1.11\\times$ speed up in latency by compressing selective layers, without any form of retraining or finetuning. Details of the experiment are in I.3 ", "page_idx": 8}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/2e4a74557d4ea4e656debaa4d593012f307d23f5fa650f00229febdc05df64a1.jpg", "table_caption": ["SS1 projection followed by finetuning SS1 projection without finetuning "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Table 4: The time spent by 100GB sized DLRM MLperf benchmark model in various components. Specifically $70\\%$ latency is spent in Top MLP. We can reduce MLP workload by factor of $2\\times$ by training SS1 layers without compromising quality of the model. (Statistical significance: multiple runs gives 0.8032) ", "page_idx": 8}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/abf9c1f915d68c91219031336ae2cd9aaa19a3f6c2efd6a8855e48d7c2afcfa9.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "and large:L)for both architectures. Exact details are provided in appendix I) Additionally, we perform quality experiments in end-to-end training using these matrices for two domains: (a) NLP: GPT2-S model on wikitext-103 dataset [29] using test perplexity (PPL) and loss as the metric (b) Vision: MLPMixer on CIFAR (C10, C100)[30] and Tiny-Imagenet datasets [31] using accuracy as the metric. The results are presented in Table 1. The details of these experiments can be found in the Appendix I. We make the following observations. ", "page_idx": 8}, {"type": "text", "text": "\u2022 In our kernel latency evaluation, SS1 consistently outperforms Monarch and LowRank under similar parameter budgets (Table 4 in appendix). Monarch is generally worse than full multiplication except in larger shapes. LowRank is competitive with SS1 for higher compression. \u2022 The kernel-level latency beneftis also translate to end-to-end model latency (Table 1 and Table 1b). This can be seen across both Transformer and MLPMixer architectures, two of the SOTA architectures for deep learning. Although, at times, LowRankLinear gives better performance at higher compression, the quality of the model obtained is inferior to SS1. With larger models, we see an increase of around $1.3\\times$ in end-to-end throughput with SS1. It also enables us to run larger batches. \u2022 In terms of quality, SS1 consistently outperforms Monarch and LowRank across NLP and Vision domains on GPT and MLPMixer architectures under similar parameter budgets. \u2022 Overall, we see that SS1 allows better quality per unit compute than its structured competitors. ", "page_idx": 8}, {"type": "text", "text": "Building expressive and faster models: Should we build and train models with SS1 layers instead of standard linear layers? Although answering this question requires a broader evaluation, we cautiously believe that the answer might be yes. We can indeed obtain better quality models by using SS1 layers instead of \"nn.Linear\" layer. This is demonstrated in Table 2. The quality of the SS1 model with 74M parameters is better than that of standard models with similar or more parameters. ", "page_idx": 8}, {"type": "text", "text": "5.2 $\\mathbf{S}\\mathbf{S}\\mathbf{1}+$ Quantization ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Quantization is an important efficiency technique to improve inference time memory and latency. Although SS1 already reduces the memory footprint and improves inference latency, it can be combined with quantization to obtain further inference beneftis. One might wonder if combining two approximations (SS1 and quantization) can lead to worse-quality models. We show that SS1 can be combined with quantization without significantly impacting quality (also supported by theory) In fact, the effect of quantization on SS1 is similar to the full standard model. The quality details before ", "page_idx": 8}, {"type": "text", "text": "Table 5: PPL(latency) for GPT-2(124M) model trained with different compressions SS1 and ROAST PPL(Latency) ", "page_idx": 9}, {"type": "text", "text": "and after quantization are in Table 2. To measure the latency benefits, we would have to implement quantized SS1 kernels, which is out of the scope of this paper. ", "page_idx": 9}, {"type": "text", "text": "5.3 Dense-to-structured finetuning of pre-trained models for efficiency ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We show that pre-trained models can be projected onto SS1-structured space and finetuned for downstream tasks. We demonstrate this by projecting selected linear transformations in BERT to SS1 and training the resulting model on the GLUE Benchmark. We obtain a $1.31\\times$ faster model which gives a similar GLUE score in downstream tasks. More details are mentioned in I. The results are summarized in Table 3 ", "page_idx": 9}, {"type": "text", "text": "We find that we can improve inference of Llama-3-8B model for downstream tasks if we project carefully selected layers onto SS1. The selection is done on a calibration dataset that corresponds to the task at hand. We show that, even without finetuning, we can reduce the computation involved in the model while maintaining reasonable accuracy. Results can potentially improve if we finetune post-projection as we see in BERT. The results are summarized in Table 3. ", "page_idx": 9}, {"type": "text", "text": "5.4 Improving CPU workloads e.g. DLRM MLPerf Benchmark ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "While this paper focuses on providing GPU kernel for SS1, the algorithm can also be utilized to improve the inference performance of CPU deployments. Specifically, recommendation workloads of models such as the Deep learning recommendation model (DLRM) are often run on CPUs due to humungous embedding tables. We consider the DLRM MLPerf Benchmark, which has 100GB embedding tables and 10MB MLP layers. Nevertheless, on CPUs, the latency bottleneck is that of matrix multiplications. Specifically, $71.3\\%$ of the time is spent in the top MLP component (see Table 4). We show that we can train from scratch a SS1 version of DLRM, which has half the parameters in MLP and maintains the quality of the full model. While CPU-kernel implementation of SS1 is out of the scope of this paper, we expect that beneftis shown on GPUs will also translate to CPUs, and thus, with SS1, we can improve the throughput of DLRM MLPerf Benchmark on CPUs without compromising the quality of the model. ", "page_idx": 9}, {"type": "text", "text": "5.5 Comparison with standard RPS method ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We also compare SS1 with standard RPS method. Since SS1 focuses on compressing linear layers, we compare it with ROAST-MM compression with each matrix having its individual separate memory. The results are presented in Table 5. As expected, RPS methods do not improve the latency. ", "page_idx": 9}, {"type": "text", "text": "Limitations: Our work is mainly limited on two aspects. On the theoretical side, our analysis of parameters and the combination of quantization with SS1 is conducted mainly over linear models, which is a reasonable starting point. However, these results may not necessarily extend to deep learning models, and we plan to explore this in future research. Additionally, regarding our SS1 proposal, the efficiency gains are marginal beyond an $8\\times$ compression of parameters. In future work, we aim to develop efficient structures where the efficiency gains are more closely aligned with the degree of parameter reduction. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we introduce an efficient structured linear transformation termed SS1. We demonstrate that SS1 outperforms state-of-the-art structured baselines in terms of quality per unit of computation. Additionally, we show that SS1 provides immediate benefits across diverse applications, including language understanding, generative AI, and recommendations. Furthermore, we illustrate how SS1 can be combined with the popular quantization approach to achieve further improvements. We also theoretically explain the underlying reasons that may be of independent interest. ", "page_idx": 9}, {"type": "text", "text": "7 Acknowledgments ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was supported by National Science Foundation SHF-2211815 and grants from Adobe, Intel, Total, and VMware. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timoth\u00e9e Lacroix, Baptiste Rozi\u00e8re, Naman Goyal, Eric Hambro, Faisal Azhar, et al. Llama: Open and efficient foundation language models. arXiv preprint arXiv:2302.13971, 2023.   \n[2] Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. ICLR, 2016.   \n[3] Song Han, Jeff Pool, John Tran, and William Dally. Learning both weights and connections for efficient neural network. Advances in neural information processing systems, 28, 2015.   \n[4] Song Han, Jeff Pool, Sharan Narang, Huizi Mao, Enhao Gong, Shijian Tang, Erich Elsen, Peter Vajda, Manohar Paluri, John Tran, et al. Dsd: Dense-sparse-dense training for deep neural networks. arXiv preprint arXiv:1607.04381, 2016.   \n[5] Jonathan Frankle and Michael Carbin. The lottery ticket hypothesis: Finding sparse, trainable neural networks. arXiv preprint arXiv:1803.03635, 2018.   \n[6] Jonathan Frankle, Gintare Karolina Dziugaite, Daniel M Roy, and Michael Carbin. Stabilizing the lottery ticket hypothesis. arXiv preprint arXiv:1903.01611, 2019.   \n[7] Benoit Jacob, Skirmantas Kligys, Bo Chen, Menglong Zhu, Matthew Tang, Andrew Howard, Hartwig Adam, and Dmitry Kalenichenko. Quantization and training of neural networks for efficient integer-arithmetic-only inference. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 2704\u20132713, 2018.   \n[8] Wenlin Chen, James Wilson, Stephen Tyree, Kilian Weinberger, and Yixin Chen. Compressing neural networks with the hashing trick. In International conference on machine learning, pages 2285\u20132294. PMLR, 2015.   \n[9] Aditya Desai, Keren Zhou, and Anshumali Shrivastava. Hardware-Aware Compression with Random Operation Access Specific Tile (ROAST) Hashing. In International Conference on Machine Learning, pages 7732\u20137749. PMLR, 2023.   \n[10] Aditya Desai, Li Chou, and Anshumali Shrivastava. Random Offset Block Embedding (ROBE) for compressed embedding tables in deep learning recommendation systems. In D. Marculescu, Y. Chi, and C. Wu, editors, Proceedings of Machine Learning and Systems, volume 4, pages 762\u2013778, 2022.   \n[11] Tara N Sainath, Brian Kingsbury, Vikas Sindhwani, Ebru Arisoy, and Bhuvana Ramabhadran. Low-rank matrix factorization for deep neural network training with high-dimensional output targets. In 2013 IEEE international conference on acoustics, speech and signal processing, pages 6655\u20136659. IEEE, 2013.   \n[12] Trevor Gale, Erich Elsen, and Sara Hooker. The state of sparsity in deep neural networks. arXiv preprint arXiv:1902.09574, 2019.   \n[13] Marcin Moczulski, Misha Denil, Jeremy Appleyard, and Nando de Freitas. Acdc: A structured efficient linear layer. arXiv preprint arXiv:1511.05946, 2015.   \n[14] Quoc Viet Le, Tam\u00e1s Sarl\u00f3s, and Alexander Johannes Smola. Fastfood: Approximate kernel expansions in loglinear time. arXiv preprint arXiv:1408.3060, 2014.   \n[15] Aditya Desai and Anshumali Shrivastava. In defense of parameter sharing for model compression. In The Twelfth International Conference on Learning Representations, 2024.   \n[16] Tri Dao, Beidi Chen, Nimit S Sohoni, Arjun Desai, Michael Poli, Jessica Grogan, Alexander Liu, Aniruddh Rao, Atri Rudra, and Christopher R\u00e9. Monarch: Expressive structured matrices for efficient and accurate training. In International Conference on Machine Learning, pages 4690\u20134721. PMLR, 2022.   \n[17] Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models are unsupervised multitask learners. 2019.   \n[18] Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R Bowman. Glue: A multi-task benchmark and analysis platform for natural language understanding. arXiv preprint arXiv:1804.07461, 2018.   \n[19] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.   \n[20] Maxim Naumov, Dheevatsa Mudigere, Hao-Jun Michael Shi, Jianyu Huang, Narayanan Sundaraman, Jongsoo Park, Xiaodong Wang, Udit Gupta, Carole-Jean Wu, Alisson G Azzolini, et al. Deep learning recommendation model for personalization and recommendation systems. arXiv preprint arXiv:1906.00091, 2019.   \n[21] Jonathan Frankle, Gintare Karolina Dziugaite, Daniel Roy, and Michael Carbin. Linear mode connectivity and the lottery ticket hypothesis. In International Conference on Machine Learning, pages 3259\u20133269. PMLR, 2020.   \n[22] Yu Cheng, Felix X Yu, Rogerio S Feris, Sanjiv Kumar, Alok Choudhary, and Shi-Fu Chang. An exploration of parameter redundancy in deep networks with circulant projections. In Proceedings of the IEEE international conference on computer vision, pages 2857\u20132865, 2015.   \n[23] Vikas Sindhwani, Tara Sainath, and Sanjiv Kumar. Structured transforms for small-footprint deep learning. Advances in Neural Information Processing Systems, 28, 2015.   \n[24] Zichao Yang, Marcin Moczulski, Misha Denil, Nando De Freitas, Alex Smola, Le Song, and Ziyu Wang. Deep fried convnets. In Proceedings of the IEEE international conference on computer vision, pages 1476\u20131483, 2015.   \n[25] Tri Dao, Beidi Chen, Kaizhao Liang, Jiaming Yang, Zhao Song, Atri Rudra, and Christopher Re. Pixelated butterfly: Simple and efficient sparse training for neural network models. arXiv preprint arXiv:2112.00029, 2021.   \n[26] Amir Gholami, Sehoon Kim, Zhen Dong, Zhewei Yao, Michael W Mahoney, and Kurt Keutzer. A survey of quantization methods for efficient neural network inference. In Low-Power Computer Vision, pages 291\u2013326. Chapman and Hall/CRC, 2022.   \n[27] Aditya Desai and Anshumali Shrivastava. The trade-offs of model size in large recommendation models: 100GB to 10MB Criteo-tb DLRM model. In S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, editors, Advances in Neural Information Processing Systems, volume 35, pages 33961\u201333972. Curran Associates, Inc., 2022.   \n[28] Ilya Tolstikhin, Neil Houlsby, Alexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Thomas Unterthiner, Jessica Yung, Andreas Steiner, Daniel Keysers, Jakob Uszkoreit, Mario Lucic, and Alexey Dosovitskiy. Mlp-mixer: An all-mlp architecture for vision, 2021.   \n[29] Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. Pointer sentinel mixture models, 2016.   \n[30] Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images. 2009.   \n[31] Ya Le and Xuan S. Yang. Tiny imagenet visual recognition challenge. 2015.   \n[32] Guangxuan Xiao, Ji Lin, Mickael Seznec, Hao Wu, Julien Demouth, and Song Han. Smoothquant: Accurate and efficient post-training quantization for large language models. In International Conference on Machine Learning, pages 38087\u201338099. PMLR, 2023. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "[33] Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, R\u00e9mi Louf, Morgan Funtowicz, et al. Huggingface\u2019s transformers: State-of-the-art natural language processing. arXiv preprint arXiv:1910.03771, 2019. ", "page_idx": 12}, {"type": "text", "text": "[34] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, Alban Desmaison, Andreas Kopf, Edward Yang, Zachary DeVito, Martin Raison, Alykhan Tejani, Sasank Chilamkurthy, Benoit Steiner, Lu Fang, Junjie Bai, and Soumith Chintala. Pytorch: An imperative style, highperformance deep learning library. In H. Wallach, H. Larochelle, A. Beygelzimer, F. d'Alch\u00e9- Buc, E. Fox, and R. Garnett, editors, Advances in Neural Information Processing Systems, volume 32. Curran Associates, Inc., 2019.   \n[35] Philippe Tillet, Hsiang-Tsung Kung, and David Cox. Triton: an intermediate language and compiler for tiled neural network computations. In Proceedings of the 3rd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages, pages 10\u201319, 2019.   \n[36] Paulius Micikevicius, Sharan Narang, Jonah Alben, Gregory Diamos, Erich Elsen, David Garcia, Boris Ginsburg, Michael Houston, Oleksii Kuchaiev, Ganesh Venkatesh, et al. Mixed precision training. arXiv preprint arXiv:1710.03740, 2017.   \n[37] Tri Dao, Dan Fu, Stefano Ermon, Atri Rudra, and Christopher R\u00e9. Flashattention: Fast and memory-efficient exact attention with io-awareness. In S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, editors, Advances in Neural Information Processing Systems, volume 35, pages 16344\u201316359. Curran Associates, Inc., 2022.   \n[38] Dan Hendrycks, Collin Burns, Steven Basart, Andy Zou, Mantas Mazeika, Dawn Song, and Jacob Steinhardt. Measuring massive multitask language understanding, 2021.   \n[39] Keisuke Sakaguchi, Ronan Le Bras, Chandra Bhagavatula, and Yejin Choi. Winogrande: An adversarial winograd schema challenge at scale, 2019.   \n[40] Leo Gao, Jonathan Tow, Baber Abbasi, Stella Biderman, Sid Black, Anthony DiPof,i Charles Foster, Laurence Golding, Jeffrey Hsu, Alain Le Noac\u2019h, Haonan Li, Kyle McDonell, Niklas Muennighoff, Chris Ociepa, Jason Phang, Laria Reynolds, Hailey Schoelkopf, Aviya Skowron, Lintang Sutawika, Eric Tang, Anish Thite, Ben Wang, Kevin Wang, and Andy Zou. A framework for few-shot language model evaluation, 12 2023.   \n[41] Felipe Maia Polo, Lucas Weber, Leshem Choshen, Yuekai Sun, Gongjun Xu, and Mikhail Yurochkin. tinybenchmarks: evaluating llms with fewer examples, 2024. ", "page_idx": 12}, {"type": "text", "text": "A Additional Details for checklist ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": ". Resource Details: ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "\u2022 MLPMixer experiments: Each run takes 2 hours on a single RTX Quadro 8000 machine   \n\u2022 GPT2-Small experiments: Each run takes around 13 hours on four 32-GB V100 GPUs   \n\u2022 BERT experiments: QQP, the largest dataset for finetuning with BERT-Large, takes around 7-8 hours on RTX-8000 Quadro.   \n\u2022 Llama experiments: on MMLU takes 1 hour on 1 40GB A100 ", "page_idx": 13}, {"type": "text", "text": "2. License details: ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "\u2022 MLPMixer Experiments uses: CIFAR-10 , CIFAR-100 datasets [30] (license: could not find) with MLPMixer GitHub https://github.com/omihub777/MLP-Mixer-CIFAR (MIT License)   \n\u2022 GPT2 Experiments uses: Wikitext-103 dataset [29] (Creative Commons AttributionShareAlike License (CC BY-SA 4.0) License) the code is obtained from fly GitHub repo: https://github.com/HazyResearch/fly presented in [16] (Apache-2.0 license), the quantization experiments on GPT2 uses the quantization method employed in [32] with GitHub repo: https://github.com/mit-han-lab/smoothquant (MIT License) Codes are generally obtained from the HuggingFace Transformers library[33] including GPT2 tokenzier the repo is at https://github.com/huggingface/transformers with Apache-2.0 License. The backend of experiments is Pytorch[34] at https://github.com/pytorch/pytorch   \n\u2022 Llama3 [1] pre-trained weights and code are obtained from https://github.com/metallama/llama3 (META LLAMA 3 COMMUNITY LICENSE AGREEMENT)   \n\u2022 The kernels are implemented with Triton [35] with GitHub repo: https://github.com/triton-lang/triton (MIT License)   \n\u2022 Massive Multitask Language Understanding Dataset - MIT License. Obtained via HuggingFace Dataset library.   \n\u2022 Winogrande Dataset - Apache 2.0 License. Obtained via HuggingFace Dataset library.   \n\u2022 The Microsoft Research Paraphrase Corpus - License unknown. Obtained via HuggingFace Dataset library.   \n\u2022 The Multi-Genre Natural Language Inference Corpus - MIT License. Obtained via HuggingFace Dataset library.   \n\u2022 The Quora Question Pairs2 dataset Licensed by Quora. https://www.quora.com/about/tos. Obtained via HuggingFace Dataset library.   \n\u2022 The Corpus of Linguistic Acceptability - Obtained via HuggingFace Dataset library.   \n\u2022 The Recognizing Textual Entailment (RTE) datasets - Unknown license. Obtained via HuggingFace Dataset library.   \n\u2022 The Stanford Sentiment Treebank - CC0: Public Domain license. Obtained via HuggingFace Dataset library.   \n\u2022 The Semantic Textual Similarity Benchmark - Unknown license. Obtained via HuggingFace Dataset library.   \n\u2022 The Winograd Schema Challenge - Unknown license. Obtained via HuggingFace Dataset library.   \n\u2022 Question-answering NLI dataset - CC BY-SA 4.0 license. Obtained via HuggingFace Dataset library. ", "page_idx": 13}, {"type": "text", "text": "B Predicted Common Questions (PCQ) ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": ". Q: How do you choose datasets? ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "We begin with what Monarch evaluated w.r.t deep learning \u2013 train GPT and finetune BERT. Additionally, we wanted to do a quality tradeoff analysis on wider data. So, we chose the vision datasets that LTH uses. Apart from that, we choose the DLRM MLPerf benchmark as a representative of recommendation models. ", "page_idx": 13}, {"type": "text", "text": "2. Q: Do you see any training latency benefits? ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "The computation in the backward pass is not reduced in SS1. So, in general, the backward pass costs the same as the full model. In this sense, SS1 is geared towards inference beneftis. We might see some improvements due to the lower overall memory footprint and metadata that the optimizer stores. But beyond that, we do not expect to see training latency beneftis. Under the assumption that inference is more costly than training, this seems to be an okay thing. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "3. Q: Why have you not measured latency with Quantization? ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "To measure latency with Quantization, we would have to write a quantized SSL kernel. For this paper, we want to restrict our code development to a single kernel. Thus, we only show the quality preservation with $s s1+$ Quantization. Having said that, we expect the gains from Quantization to be present in $S S1+$ Quantization. ", "page_idx": 14}, {"type": "text", "text": "4. Q: Does this mean standard linear layers should always be replaced by the SS1 ? ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We would like to believe there is an \"additional\" representative value in SS1 layers that can push the boundary of quality per unit compute. However, we want to be cautious while making this claim, and we will be rigorously evaluating SS1 in the future. ", "page_idx": 14}, {"type": "text", "text": "5. Q: Why not block-sparse as a baseline? ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Most of our experiments were done in FP16. Also, our kernels are optimized for FP16. Pytorch block sparse does not have a stable implementation when it comes to FP16. We see segmentation faults. Thus, we skip Block sparse as a baseline. Additionally, with recent work on sparsity vs. RPS, we believe that RPS should beat Block sparsity in quality per unit parameters. ", "page_idx": 14}, {"type": "text", "text": "6. Q: Monarch performance seems lower than what was reported in the original paper. We were surprised as well. We expected Monarch to do better. However, the paper also spoke only about the training times. In our paper, we measure inference times. Additionally, we confirmed with the authors that we were benchmarking the correct code. ", "page_idx": 14}, {"type": "text", "text": "7. Q: Why was expressivity of SS1 not analyzed the way it has been done for other methods such as Monarch? While the analysis of Monarch is interesting and a valuable piece of knowledge, it is debatable if the expressivity analysis is representative of deep learning requirements. Indeed, we show that SS1 beats Monarch in quality vs. parameters ( and compute), emphasizing that deep learning may not align with the notion of common transformations. ", "page_idx": 14}, {"type": "text", "text": "8. Q: Will the results on GPT translate to bigger models such as Llama? It is hard to say. But we believe that whenever the model is at capacity with the information it can learn, having these layers in a slightly bigger model ( so it has a similar computation as a smaller model) can help boost the quality. ", "page_idx": 14}, {"type": "text", "text": "9. Q: Where is the code? Visit our landing page: https://github.com/apd10/Sketch-StructuredLinear for all the details. ", "page_idx": 14}, {"type": "text", "text": "10. Q: What care needs to be taken for dense-to-structured finetuning? Different layers have different sensitivity to compression, especially when we want to preserve the accuracy of the pre-trained model. Thus, we have to identify layers that cannot withstand the approximation. This can be done using some calibration data. ", "page_idx": 14}, {"type": "text", "text": "11. Q: Isn\u2019t this just feature hashing? No. Feature hashing (followed by linear transformation) is a low-rank operation, with the first matrix being the fixed sketch matrix. Also, feature hashing is not GPU-aware and has bad latency performance. SS1 applies feature hashing but for each neuron separately. The independence makes SS1 full rank with high probability. Also, due to the coalescing factors, we make SS1 GPU aware and efficient. ", "page_idx": 14}, {"type": "text", "text": "C How does learning rate tuning affect the quality? ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In our experiments, we always use the hyperparameters that are optimal for the original model. However, these hyperparameters are not optimal for different methods. We perform learning rate tuning for Monarch, a competitive baseline, and find that, while the perplexity improves for all methods with finetuning, the findings remain unchanged. The results are shown in 6 ", "page_idx": 14}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/bf83aaab9531581e997df0a1a47f014c95805321925cb0ae17f7e6bed2dea536.jpg", "table_caption": [""], "table_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "nrgyOGU7ZP/tmp/90313b64ac65f95f756b76cc72ec332a745f21a64bcedf8c30ff067a4a45902d.jpg", "img_caption": ["Figure 3: Latency vs. Perplexity Plot for GPT-S "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "D Different representation of latency quality results ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "The plot of latency vs. quality for GPT-2 is presented in figure 3. ", "page_idx": 15}, {"type": "text", "text": "E Latency vs. Parameters and Kernel Details ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We have implemented three kernels for SS1, including forward, backward-weight-gradient, and backward-input-gradient. Our implementations can be used on GPUs with or without tensor cores and support multiple precisions, such as float16 and float32 (TF32). ", "page_idx": 15}, {"type": "text", "text": "We implemented permutation by adjusting the addresses to load instead of permuting the data in shared memory. If permuting is done in shared memory, we have to permute the data again to adjust the value distribution to fit the tensor core operands, thus wasting instructions on shared memory accesses and time in synchronizing threads within a CTA (Cooperative Thread Array). ", "page_idx": 15}, {"type": "text", "text": "In the forward kernel, we launch $\\mathrm{\\Delta}\\mathrm{\\lceil}M/\\mathrm{B_{M}}\\mathrm{\\rceil}\\,\\times\\,\\mathrm{\\lceil}N/\\mathrm{B_{N}}\\mathrm{\\rceil}$ CTAs. Each CTA, while accumulating along the $K$ dimension, permutes the input block (i.e., $X$ ) with each data load. In the backward-inputgradient kernel, each CTA permutes the weight block while accumulating along the $N$ dimension. In the backward-weight-gradient kernel, each CTA only permutes the result before storing it in DRAM using atomicAdd. ", "page_idx": 15}, {"type": "text", "text": "We have introduced the following optimizations to improve the performance of SS1 kernels: ", "page_idx": 15}, {"type": "text", "text": "1. Vectorized Memory Load. Rather than permuting individual elements, we permute larger chunks of $V E C$ elements along the $K$ dimension to maximize the GPU\u2019s memory bandwidth efficiency. The size of $V E C$ can be selected from 1, 2, 4, or 8.   \n2. Pipelining. Utilizing asynchronous memory load instructions supported by the GPU architecture, we preload $N_{s t a g e s}$ blocks prior to the main accumulation loop to overlap compute and memory transactions.   \n3. Autotuning. To optimize performance across different tensor shapes, we implemented an autotuner to select the ideal $\\mathrm{B_{M}}$ , $\\mathrm{B_{N}}$ , $\\mathrm{B_{K}}$ , and $N_{s t a g e s}$ . We also prune configurations that exceed the GPU\u2019s shared memory capacity before compilation and benchmarking. ", "page_idx": 15}, {"type": "text", "text": "4. Fusion. We have fused bias computation directly into the forward kernel to reduce kernel launch and memory access overhead. ", "page_idx": 16}, {"type": "text", "text": "SS1\u2019s forward kernel reduces the number of load instructions and computational overhead compared to full matrix multiplications. However, the backward kernels of SS1 maintain the same level of load instructions and computational demand as those of full matrix multiplications, leading to similar performance outcomes. ", "page_idx": 16}, {"type": "image", "img_path": "nrgyOGU7ZP/tmp/30408a6b37a7f5da028c3f095d70682a9dbb04ade1f7f3db5aa976ed69f3f23c.jpg", "img_caption": ["Figure 4: Latency(ms) vs. Parameters for an instance of workload in GPT2 "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "F Theoretical Results ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "F.1 Claim: $\\mathrm{B_{K}}$ is a pure latency parameter ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We will evaluate this under the standard dimensionality reduction setup (which we now know is related to learned model quality). Consider two vectors $\\mathbf{x}$ and $\\mathbf{y}$ in $\\mathbb{R}^{n}$ space. Also, consider the smaller dimension $m$ to which these vectors are being projected using hash functions defined in section 3 with ${\\bf K}$ -coalescing factor $\\mathrm{B_{K}}$ . Let the final mapping be $h$ . The inner product can be written as, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\langle{\\hat{\\bf x}},{\\hat{\\bf y}}\\rangle=\\sum_{i=1}^{m}\\left(\\sum_{j=1}^{n}g(j){\\bf1}(h(j)=i)x_{j}\\right)\\left(\\sum_{j=1}^{n}g(j){\\bf1}(h(j)=i)y_{j}\\right)\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Assume that $\\mathrm{B}\\mathrm{K}|m|n$ for simplicity. Then, the inner product can be written as, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle=\\langle\\mathbf{x},\\mathbf{y}\\rangle+\\sum_{i\\neq j}^{n}g(i)g(j)\\mathbf{1}(h(i){=}h(j))x_{i}y_{j}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "The estimator is unbiased since $E(g(i))=0$ . The variance is, ", "page_idx": 16}, {"type": "equation", "text": "$$\nV(\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle)=E\\left((\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle-\\langle{\\mathbf{x}},{\\mathbf{y}}\\rangle)^{2}\\right)=E\\left(\\sum_{i\\neq j}^{n}g(i)g(j){\\mathbf{1}}(h(i){=}h(j))x_{i}y_{j}\\right)^{2}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "equation", "text": "$$\nE\\left(\\sum_{\\substack{i_{1}\\neq j_{1},i_{2}\\neq j_{2}}}^{n}g(i_{1})g(j_{1})g(i_{2})g(j_{2})\\mathbf{1}(h(i_{1})\\!\\!=\\!h(j_{1}))\\mathbf{1}(h(i_{2})\\!\\!=\\!h(j_{2}))x_{i_{1}}y_{j_{1}}x_{i_{2}}y_{j_{2}}\\right)\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Nonzero terms appear if either of the two cases holds: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\bullet~(i_{1}=i_{2}~\\mathrm{and}~j_{1}=j_{2})}\\\\ {\\bullet~(i_{1}=j_{2}~\\mathrm{and}~i_{2}=j_{1})}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{V(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle-\\langle x,y\\rangle)=E\\left(\\displaystyle\\sum_{i\\neq j=1}^{n}\\mathbf{1}(h(i){=}h(j))x_{i}^{2}y_{j}^{2}\\right)+E\\left(\\displaystyle\\sum_{i\\neq j=1}^{n}\\mathbf{1}(h(i){=}h(j))x_{i}y_{i}x_{j}y_{j}\\right)}\\\\ &{\\quad\\quad\\quad\\quad\\quad\\quad=\\left(\\displaystyle\\sum_{i\\neq j=1}^{n}\\mathbf{P}(h(i){=}h(j))x_{i}^{2}y_{j}^{2}\\right)+\\left(\\displaystyle\\sum_{i\\neq j=1}^{n}\\mathbf{P}(h(i){=}h(j))x_{i}y_{i}x_{j}y_{j}\\right)}\\\\ &{\\quad\\quad\\quad\\quad\\quad=\\displaystyle\\sum_{i=1}^{n}\\displaystyle\\sum_{j=1,j\\neq i}^{n}\\mathbf{P}(h(i){=}h(j))\\left(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j}\\right)}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Note that ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{P}(h(i)\\!=\\!h(j))={\\left\\{\\begin{array}{l l}{{\\frac{1}{\\mathrm{B_{K}}}}}&{{\\mathrm{i.j~belong~to~different~groups~inside~same~1D~super~group}}}\\\\ {0}&{{\\mathrm{otherwise}}}\\end{array}\\right.}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Let $I(i,j)$ be the delta function that $i,j$ belong to different groups inside same 1D supergroup ", "page_idx": 17}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle-\\langle\\mathbf{x},\\mathbf{y}\\rangle)=\\frac{1}{\\mathrm{BK}}\\sum_{i=1}^{n}\\sum_{j=1,j\\neq i}^{n}I(i,j)\\left(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j}\\right)\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Under a permutation $p$ of the initial input $x$ and $y$ , the following is the probability since every element can interact with all the elements from other groups inside the same supergroup. ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{P}_{p}(I(i,j))=\\frac{(c-1)\\mathrm{B}_{K}}{n-1}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Thus, under permutation, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{E}_{p}\\left(V\\big(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle-\\langle\\mathbf{x},\\mathbf{y}\\rangle\\big)\\right)=\\frac{(c-1)\\mathrm{B}_{\\mathrm{K}}}{(n-1)\\mathrm{B}_{\\mathrm{K}}}\\sum_{i=1}^{n}\\sum_{j=1,j\\neq i}^{n}\\big(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j}\\big)\n$$", "text_format": "latex", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{E}_{p}\\left(V(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle-\\langle\\mathbf{x},\\mathbf{y}\\rangle)\\right)=\\frac{c-1}{(n-1)}\\sum_{i=1}^{n}\\sum_{j=1,j\\neq i}^{n}\\left(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j}\\right)\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Thus, $\\mathrm{B_{K}}$ is a pure latency parameter and should be chosen for optimizing shared memory usage. ", "page_idx": 17}, {"type": "text", "text": "F.2 How does $\\mathbf{B_{N}}$ affect the quality? ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "To investigate the effect of $\\mathrm{B_{N}}$ , let us consider how neurons in the same 2D super group and different 2D super groups affect each other. We present the result in the following theorem, ", "page_idx": 17}, {"type": "text", "text": "Theorem 3 Consider two neurons $y_{1},y_{2}\\in R$ output from a linear transformation under SS1. Let $h_{1},h_{2},g_{1},g_{2}$ be the hash functions used for the neurons. Let the weights for these two neurons be $p,q\\,\\in\\,R^{m}$ . Let the input be $x\\,\\in\\,R^{n}$ . Then, under the assumption that each signal in $x\\sim\\mathcal{D}$ is independent, the Covariance between the values of neurons can be written as, ", "page_idx": 17}, {"type": "equation", "text": "$$\nC o v_{\\mathscr{D}}(y_{1},y_{2})=\\sum_{i_{1}=1}^{m}\\sum_{i_{1}=1}^{m}\\sum_{j=1}^{n}p_{i_{1}}q_{i_{2}}g_{1}(j)g_{2}(j)\\mathbf{1}(h_{1}(j){=}i_{1})\\mathbf{1}(h_{2}(j){=}i_{2})\\sigma_{x_{j}}^{2}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{E}_{h_{1},g_{1},h_{2},g_{2}}(C o v_{\\mathcal{D}}(y_{1},y_{2}))={\\left\\{\\begin{array}{l l}{{\\frac{m}{n}}||\\sigma_{x}||^{2}\\langle p,q\\rangle}&{\\;{\\mathrm{~}}i f\\,h_{1}=h_{2},g_{1}=g_{2}}\\\\ {0}&{\\;{\\mathrm{~}}i f\\,g_{1}\\neq g_{2}}\\end{array}\\right.}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "The above theorem points out that if two neurons belong to the same group, i.e., they share the hash functions, then the neuron outputs have unintended correlations and, thus, mutual information. So the larger value of $\\mathrm{B_{N}}$ implies more neurons having interdependency and, consequently, lesser expressivity. Fortunately, in our experiments, we find that larger values of $\\mathrm{B_{N}}$ also work well, and we optimize it for latency. ", "page_idx": 18}, {"type": "text", "text": "details: Intuitively, sharing the mapping functions across neurons will restrict the representative power of neurons since they will sketch the same parts of the input vector $x$ with the same hash functions. We verify this intuition here. Consider the following two neurons under SS1 with weight vectors $p,q$ ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{y_{1}=\\displaystyle\\sum_{i=1}^{m}p_{i}\\left(\\sum_{j=1}^{n}g_{1}(j)\\mathbf{1}(h_{1}(j){=}i)x_{j}\\right)}}\\\\ {{y_{2}=\\displaystyle\\sum_{i=1}^{m}q_{i}\\left(\\sum_{j=1}^{n}g_{2}(j)\\mathbf{1}(h_{2}(j){=}i)x_{j}\\right)}}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Consider the mutual information between $y_{1}$ and $y_{2}$ . Since we are dealing with linear computations, we measure the Covariance of the two neurons, ", "page_idx": 18}, {"type": "equation", "text": "$$\nC o v_{\\mathcal{D}}(y_{1},y_{2})=C o v\\left(\\sum_{i=1}^{m}p_{i}\\left(\\sum_{j=1}^{n}g_{1}(j)\\mathbf{1}(h_{1}(j)\\!=\\!i)x_{j}\\right),\\sum_{i=1}^{m}q_{i}\\left(\\sum_{j=1}^{n}g_{2}(j)\\mathbf{1}(h_{2}(j)\\!=\\!i)x_{j}\\right)\\right).\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n\\Im o v_{D}(y_{1},y_{2})=\\sum_{i_{1}=1}^{m}\\sum_{j_{1}=1}^{n}\\sum_{i_{1}=1}^{m}\\sum_{j_{1}=1}^{n}C o v\\left(p_{i_{1}}\\left(g_{1}(j_{1})\\mathbf{1}(h_{1}(j_{1})\\!\\!=\\!\\!i_{1})x_{j_{1}}\\right),q_{i_{2}}\\left(g_{2}(j_{2})\\mathbf{1}(h_{2}(j_{2})\\!\\!=\\!\\!i_{2})x_{j_{2}}\\right)\\right),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n\\Im o v_{D}(y_{1},y_{2})=\\sum_{i_{1}=1}^{m}\\sum_{j_{1}=1}^{n}\\sum_{i_{1}=1}^{m}\\sum_{j_{1}=1}^{n}C o v\\left(p_{i_{1}}\\left(g_{1}(j_{1})\\mathbf{1}(h_{1}(j_{1})\\!\\!=\\!\\!i_{1})x_{j_{1}}\\right),q_{i_{2}}\\left(g_{2}(j_{2})\\mathbf{1}(h_{2}(j_{2})\\!\\!=\\!\\!i_{2})x_{j_{2}}\\right)\\right),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\nC o v_{\\mathcal{D}}(y_{1},y_{2})=\\sum_{i_{1}=1}^{m}\\sum_{j_{1}=1}^{n}\\sum_{i_{1}=1}^{m}p_{i_{1}}q_{i_{2}}g_{1}(j_{1})g_{2}(j_{2})\\mathbf{1}(h_{1}(j_{1}){=}i_{1})\\mathbf{1}(h_{2}(j_{2}){=}i_{2})C o v(x_{j_{1}},x_{j_{2}})\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Assuming independent signals in $x$ ", "page_idx": 18}, {"type": "equation", "text": "$$\nC o v_{\\mathscr D}(y_{1},y_{2})=\\sum_{i_{1}=1}^{m}\\sum_{i_{1}=1}^{m}\\sum_{j=1}^{n}p_{i_{1}}q_{i_{2}}g_{1}(j)g_{2}(j){\\bf1}(h_{1}(j){=}i_{1}){\\bf1}(h_{2}(j){=}i_{2})\\sigma_{j}^{2}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Case 1: $y_{1}$ and $y_{2}$ belong to the same 2D super group ", "text_level": 1, "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathbf{E}_{h,g}(C o v_{D}(y_{1},y_{2})=\\left(\\sum_{i_{1}=1}^{m}\\sum_{i_{1}=1}^{m}\\sum_{j=1}^{n}p_{i_{1}}q_{i_{2}}g(j)^{2}\\mathbf{1}(h(j)\\!=\\!i_{1})\\mathbf{1}(h(j)\\!=\\!i_{2})\\sigma_{j}^{2}\\right)\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathbf{E}_{h,g}(C o v_{\\mathcal{D}}(y_{1},y_{2})=\\left(\\sum_{i_{1}=1}^{m}\\sum_{i_{2}=1}^{m}\\sum_{j=1}^{n}p_{i_{1}}q_{i_{2}}E(\\mathbf{1}(h(j){=}i_{1})\\mathbf{1}(h(j){=}i_{2}))\\sigma_{j}^{2}\\right)\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Only non-zero terms when $i_{1}=i_{2}$ since $h(j)$ can only have one value ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{c}{\\displaystyle\\mathbf{E}_{h,g}(C o v_{\\mathcal{D}}(y_{1},y_{2})=\\left(\\displaystyle\\sum_{i=1}^{m}\\sum_{j=1}^{n}p_{i}q_{i}E(\\mathbf{1}(h(j)\\!\\!=\\!\\!i))\\sigma_{j}^{2}\\right)}\\\\ {\\displaystyle\\mathbf{E}_{h,g}(C o v_{\\mathcal{D}}(y_{1},y_{2}))=\\frac{m}{n}||\\sigma||^{2}\\langle p,q\\rangle}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Case 2: $y_{1}$ and $y_{2}$ belong to the different 2D super group ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\mathbf{E}_{h,g}(C o v_{\\mathcal{D}}(y_{1},y_{2}))=0\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Thus, if two neurons are in the same 2D group, the structure imposes the two neurons to be correlated and thus reduces the expressive power of the model. ", "page_idx": 19}, {"type": "text", "text": "F.3 Quantization $^+$ SS1: How combining them results in a better method for compression. ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Analysing quantization under standard dimensionality reduction Consider two vectors $x,y$ with values from the range $[-D/2,D/2]$ . Under stochastic Quantization for $\\mathbf{b}$ bits, we will have ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{x}}=x+\\Delta\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where $\\Delta[i]=(\\lceil x\\rceil-x)\\mathbf{1}(i)+(\\lfloor x\\rfloor-x)(1-\\mathbf{1}(i))$ where ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\mathbf{1}(i)=\\left\\{{\\frac{1{\\mathrm{~with~prob~}}p={\\frac{(x-\\lfloor x\\rfloor)}{D/2^{b}}}}{0{\\mathrm{~with~prob~}}(1-p)}}\\right.\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "the inner product ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle=\\langle\\mathbf{x},\\mathbf{y}\\rangle+\\langle x,\\Delta_{y}\\rangle+\\langle\\Delta_{x},y\\rangle+\\langle\\Delta_{x},\\Delta_{y}\\rangle\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "The estimator is unbiased. ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle-\\langle{\\mathbf{x}},{\\mathbf{y}}\\rangle=\\sum_{j=1}^{n}(x_{j}\\Delta_{y}[j]+y_{j}\\Delta_{x}[j]+\\Delta_{x}[j]\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\nV(\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle)=\\sum_{j=1}^{n}V(x_{j}\\Delta_{y}[j]+y_{j}\\Delta_{x}[j]+\\Delta_{x}[j]\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\bf x},\\hat{\\bf y}\\rangle)=\\sum_{j=1}^{n}C o v(x_{j}\\Delta_{y}[j]+y_{j}\\Delta_{x}[j]+\\Delta_{x}[j]\\Delta_{y}[j],x_{j}\\Delta_{y}[j]+y_{j}\\Delta_{x}[j]+\\Delta_{x}[j]\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{V(\\langle\\hat{\\bf x},\\hat{\\bf y}\\rangle)=\\sum_{j=1}^{n}V(x_{j}\\Delta_{y}[j])+V(y_{j}\\Delta_{x}[j])+V(\\Delta_{x}[j]\\Delta_{y}[j])}}\\\\ &{}&{+C o v(x_{j}\\Delta_{y}[j],\\Delta_{x}[j]\\Delta_{y}[j])+C o v(y_{j}\\Delta_{x}[j],\\Delta_{x}[j]\\Delta_{y}[j])}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Convince yourself that covariance terms are 0. ", "page_idx": 19}, {"type": "equation", "text": "$$\nV(\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle)=\\sum_{j=1}^{n}V(x_{j}\\Delta_{y}[j])+V(y_{j}\\Delta_{x}[j])+V(\\Delta_{x}[j]\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\nV\\big(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle\\big)=\\sum_{j=1}^{n}x_{j}^{2}\\sigma_{y j}^{2}+y_{j}^{2}\\sigma_{x j}^{2}+\\sigma_{y j}^{2}\\sigma_{x j}^{2}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\n\\sigma_{x j}^{2}=V(([x]-x)\\mathbf{1}(i)+(\\lfloor x\\rfloor-x)(1-\\mathbf{1}(i)))\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\n\\sigma_{x j}^{2}=\\left({\\frac{D}{2^{b}}}\\right)^{2}V(1(j))=\\left({\\frac{D}{2^{b}}}\\right)^{2}{\\frac{(x-\\lceil x\\rceil)}{D/2^{b}}}{\\frac{\\left(D/2^{b}-(x-\\lceil x\\rceil)\\right)}{D/2^{b}}}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "equation", "text": "$$\n\\sigma_{x j}^{2}=\\left(x-\\lfloor x\\rfloor\\right)\\left(D/2^{b}-\\left(x-\\lfloor x\\rfloor\\right)\\right)=w^{2}p_{x j}(1-p_{x j})\\leq{\\frac{w^{2}}{4}}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Note that the inequality is tight and occurs when all the values of $x$ are exactly at the midpoint of the bin. ", "page_idx": 20}, {"type": "text", "text": "where $w=D/2^{b}$ ", "page_idx": 20}, {"type": "equation", "text": "$$\nV_{q}(\\langle{\\hat{\\bf x}},{\\hat{\\bf y}}\\rangle)=\\sum_{j=1}^{n}x_{j}^{2}\\sigma_{y j}^{2}+y_{j}^{2}\\sigma_{x j}^{2}+\\sigma_{y j}^{2}\\sigma_{x j}^{2}\\leq_{t}{\\frac{w^{2}}{4}}\\left(||x||^{2}+||y||^{2}\\right)+n{\\frac{w^{4}}{16}}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "It follows that this inequality is also tight. ", "page_idx": 20}, {"type": "text", "text": "The equation for projection is ", "page_idx": 20}, {"type": "equation", "text": "$$\nV_{p}(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)=\\frac{1}{m}\\sum_{i\\neq j}(x_{i}^{2}y_{j}^{2}+x_{i}y_{i}x_{j}y_{j})\n$$", "text_format": "latex", "page_idx": 20}, {"type": "equation", "text": "$$\nV_{p}(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)=\\frac{1}{m}\\left(||x||^{2}||y||^{2}+\\langle x,y\\rangle^{2}-2||x\\circ y||^{2}\\right)\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "if $||x||\\leq1,||y||\\leq1$ ", "page_idx": 20}, {"type": "equation", "text": "$$\nV_{q}(\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle)\\leq{\\frac{w^{2}}{2}}+{\\frac{n w^{4}}{16}}\\leq{\\frac{2}{2^{2b}}}+{\\frac{n}{2^{4b}}}=Q(b)\n$$", "text_format": "latex", "page_idx": 20}, {"type": "equation", "text": "$$\nV_{p}(\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle)\\leq_{t}{\\frac{k}{m}}=P(m)\\leq{\\frac{2}{m}}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "we use $\\leq_{t}$ to show that it is tight. The tight upper bound can be represented using some $1\\leq k\\leq2$ Under same budget $\\begin{array}{r}{m={\\frac{n b}{F}}}\\end{array}$ where $F=32$ or $F=16$ . for whatever precision width we are using for the original vectors. ", "page_idx": 20}, {"type": "equation", "text": "$$\nV_{p}(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)\\leq\\frac{k F}{n b}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "F.3.1 Combined ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Let us consider $x$ and $y$ with norm 1. Let us consider the procedure where we first apply projections to get $\\hat{\\mathbf{x}}_{1}$ and $\\hat{\\mathbf{y}}_{1}$ , and then Quantization is applied to obtain $\\hat{\\mathbf{x}}_{2}$ and $\\hat{\\mathbf{y}}_{2}$ . Let us assume that the bit width for Quantization is $b$ and the projection is into $m$ . ", "page_idx": 20}, {"type": "text", "text": "Let\u2019s apply Quantization and then projection. The resulting estimator can be written as ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle=\\langle x+\\Delta_{x},y+\\Delta_{y}\\rangle+\\sum_{i\\neq j}^{n}g(i)g(j)\\mathbf{1}(h(i)==h(j))(x_{i}+\\Delta_{x}[i])(y_{j}+\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "The estimator is unbiased. Now let us look at the variance w.r.t all stochastic elements. ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\hat{\\bf x},\\hat{\\bf y}\\rangle=\\langle x,y\\rangle+\\langle x,\\Delta_{y}\\rangle+\\langle\\Delta_{x},y\\rangle+\\langle\\Delta_{x},\\Delta_{y}\\rangle+\\sum_{i\\ne j}^{n}g(i)g(j){\\bf1}(h(i)==h(j))(x_{i}+\\Delta_{x}[i])(y_{j}+\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 20}, {"type": "equation", "text": "$$\n\\hat{\\bf x},\\hat{\\bf y}\\rangle-\\langle x,y\\rangle=\\langle x,\\Delta_{y}\\rangle+\\langle\\Delta_{x},y\\rangle+\\langle\\Delta_{x},\\Delta_{y}\\rangle+\\sum_{i\\neq j}^{n}g(i)g(j){\\bf1}(h(i)==h(j))(x_{i}+\\Delta_{x}[i])(y_{j}+\\Delta_{y}[j])\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Note that each of the term on the right side has covariance 0 with each other since $E(A B)\\;=\\;$ $E(A)E(B)=0$ , so $C o v(A,B)=0$ Hence, ", "page_idx": 20}, {"type": "equation", "text": "$$\n^{\\prime}(\\langle\\hat{\\bf x},\\hat{\\bf y}\\rangle)=V(\\langle x,\\Delta_{y}\\rangle+\\langle\\Delta_{x},y\\rangle+\\langle\\Delta_{x},\\Delta_{y}\\rangle)+V(\\sum_{i\\neq j}^{n}g(i)g(j){\\bf1}(h(i)==h(j))(x_{i}+\\Delta_{x}[i])(y_{j}+\\Delta_{y}[i])+V(\\sum_{i\\neq j}^{n}g(i)g(j){\\bf1}(h(i)==h(j))),\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{\\mathcal{\\ell}(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)=V_{q}(x,y)+}}\\\\ &{}&{E_{q}\\left(\\frac{1}{m}\\sum_{i\\neq j}((x_{i}+\\Delta_{x}[i])^{2}(y_{j}+\\Delta_{y}[i])^{2}+(x_{i}+\\Delta_{x}[i])(y_{i}+\\Delta_{y}[i])(x_{j}+\\Delta_{x}[j])(y_{j}+\\Delta_{y}[i])(y_{i}+\\Delta_{x}[j])\\right)+\\right.}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\bf x},\\hat{\\bf y}\\rangle)=V_{q}(x,y)+\\left(\\frac{1}{m}\\sum_{i\\neq j}((x_{i}^{2}+\\sigma_{x i}^{2})(y_{j}^{2}+\\sigma_{y j}^{2})+x_{i}y_{i}x_{j}y_{j})\\right)\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\nV(\\langle\\hat{\\bf x},\\hat{\\bf y}\\rangle)=V_{q}(x,y)+V_{p}(x,y)+\\left(\\frac{1}{m}\\sum_{i\\neq j}((x_{i}^{2}\\sigma_{y j}^{2}+y_{j}^{2}\\sigma_{x i}^{2}+\\sigma_{y j}^{2}\\sigma_{x i}^{2})\\right)\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\n\\left(\\frac{1}{m}\\sum_{i\\neq j}((x_{i}^{2}\\sigma_{y j}^{2}+y_{j}^{2}\\sigma_{x i}^{2}+\\sigma_{y j}^{2}\\sigma_{x i}^{2})\\right)\\leq\\frac{1}{m}\\frac{w^{2}}{4}\\left(2(n-1)\\right)+\\frac{1}{m}\\frac{n(n-1)}{1}\\frac{w^{4}}{16}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Thus, ", "page_idx": 21}, {"type": "equation", "text": "$$\nV_{p q}(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)\\leq\\frac{w^{2}}{2}+\\frac{n w^{4}}{16}+\\frac{k}{m}+\\frac{1}{m}\\frac{w^{2}}{2}\\left((n-1)\\right)+\\frac{1}{m}\\frac{n(n-1)}{1}\\frac{w^{4}}{16}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "where $w=D/2^{b}=2/2^{b}$ ", "page_idx": 21}, {"type": "equation", "text": "$$\nV_{p q}(\\langle{\\hat{\\mathbf{x}}},{\\hat{\\mathbf{y}}}\\rangle)\\leq Q(b)\\left(1+{\\frac{n-1}{m}}\\right)+P(m)\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "effective bits per element is $B=(m b)/n=F(m/n)(b/F))=c_{p}c_{q}F$ . ", "page_idx": 21}, {"type": "equation", "text": "$$\nV_{p q}(\\langle\\hat{\\mathbf{x}},\\hat{\\mathbf{y}}\\rangle)\\leq Q(b)\\left(1+\\frac{n-1}{m}\\right)+P(m)\\approx Q(c_{q})(1+\\frac{1}{c_{p}})+P(c_{p})\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\nQ(c_{q})={\\frac{2}{2^{2b}}}+{\\frac{n}{2^{4b}}}={\\frac{2}{2^{2c_{q}F}}}+{\\frac{n}{2^{4c_{q}F}}}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\nQ(c_{q})={\\frac{2}{2^{2b}}}+{\\frac{n}{2^{4b}}}={\\frac{2}{2^{2c_{q}F}}}+{\\frac{n}{2^{4c_{q}F}}}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\nP(c_{p})={\\frac{k}{c_{p}n}}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\nR(c_{p}c_{q})=\\tilde{R}(c_{p},c_{q})=Q(c_{q})\\left(1+\\frac{1}{c_{p}}\\right)+P(c_{p})\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "G Projection Details ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Firstly, note that parameter sharing in SS1 is only inside a single neuron. So, there are independent RPS instances for each neuron. Thus, the projection of the $K\\times N$ weight matrix is independently projecting each neuron. Consider a single neuron under RPS $y^{\\top}=x^{\\top}w$ and $w=S z$ . Given $w$ , the solution to get best $z$ which minimizes $||\\boldsymbol{w}-\\boldsymbol{S}\\boldsymbol{z}||_{2}$ is nothing but solution of linear regression, i.e. $z=(S^{\\top}S)^{\\bar{-}1})S^{\\top}w$ . Also, since S is a sparse matrix with exactly one non-zero in each row, $S^{\\top}S$ is a diagonal matrix. The hash function defined in the paper ensures that all elements of the diagonal are non-zero. Thus, it is invertible. In fact, if you view S as a mapping matrix that maps each element of $w$ (i.e., range K) to some element of $z$ ( range $K/c)$ , then the value of ${\\bf Z}$ is just an aggregation of all those elements from $w$ that map to this element in $z$ ( computed via $S^{\\top}w_{\\prime}^{\\mathrm{\\ell}}$ ) and then normalized by the total number of elements from $w$ that map to this element in $z$ ( computed via $S^{\\top}S)^{-1}$ ). This is straightforward to implement and can be done in a blocked manner for the entire matrix $Z$ . This is presented in the Algo 2. ", "page_idx": 22}, {"type": "text", "text": "Algorithm 2 SS1-project(W) ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Require: $c\\in\\mathbb{N}$ : compression factor, $\\mathbf{W}\\in\\mathbb{R}^{K\\times N}$ : full weight matrix, $\\mathrm{B}_{\\mathrm{M}},\\mathrm{B}_{\\mathrm{K}},\\mathrm{B}_{\\mathrm{N}}$ : coalescing parameters, $h:\\mathbb{N}^{3}\\,{\\stackrel{-}{\\to}}\\,\\{0,\\dots,B_{K}-1\\}$ , $g:\\mathbb{N}^{3}\\to\\{\\pm1\\}$ , $\\bar{c}\\mathrm{B}_{\\mathrm{K}}|K$   \nEnsure: $\\begin{array}{r}{\\mathbf{Z}^{*}=\\mathrm{argmin}_{Z}||\\mathbf{W}-S S1(\\mathbf{Z},I(K))||_{F}}\\end{array}$   \n1: $\\mathbf{Z}^{*}{=}\\mathrm{Zero{-}M a t r i x}(K//c,N)$   \n2: $\\mathbf{T}_{w}{=}\\mathrm{TILE}(\\mathrm{B}_{\\mathrm{K}},\\mathrm{B}_{\\mathrm{N}})$   \n3: for $j\\in[\\lceil N/\\mathbf{B_{N}}\\rceil]$ do   \n4: for $k\\in[\\lceil K/\\slash c\\rceil]$ do   \n5: $\\mathbf{T}_{\\boldsymbol{w}}[:,:]=0$   \n6: for $l\\in[c]$ do   \n7: $a{=}\\dot{\\mathbf{T}}_{w}[(k c{+}l)\\mathrm{B_{K}}{:}(k c{+}l{+}1)\\mathrm{B_{K}},$ $j_{\\mathrm{BN}}{:}(j{+}1)\\mathrm{B_{N}}]$   \n8: $a{=}a[(\\mathrm{RG}(\\mathrm{B_{K}}){-}h(j,k,l))\\%\\mathrm{B_{K}},:]$   \n9: Tw+=g(j, k, l)a   \n10: end for   \n11: Tw=Tw/c   \n12: Z\u2217[kBK:(k+1)BK, jBN:(j+1)BN]=Tw   \n13: end for   \n14: end for ", "page_idx": 22}, {"type": "text", "text": "H Backward kernel algorithms ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "We implement both the forward and backward kernels with Triton [35]. The backward pass computes the compressed weight gradients and also the input gradients with respect to the hash functions used in the forward pass. It includes two kernels to output the SS1 weight gradients and input gradients. ", "page_idx": 22}, {"type": "text", "text": "The algorithms used in the backward kernels are presented in Algo 3 and Algo 4. ", "page_idx": 22}, {"type": "text", "text": "Algorithm 3 SS1-backward: weight grad ", "page_idx": 23}, {"type": "text", "text": "Require: $c\\in\\mathbf{N}$ : compression factor   \nRequire: $O\\in\\mathbb{R}^{M\\times N^{\\prime}}$ : output gradient   \nRequire: $X\\in\\mathbb{R}^{M\\times N}$ : data matrix   \nRequire: $\\mathrm{B_{M}},\\mathrm{B_{K}},\\mathrm{B_{N}}$ : coalescing parameters   \nRequire: $h:\\mathbb{N}^{3}\\rightarrow\\{0,\\dots,B_{K}-1\\}$   \nRequire: $g:\\mathbb{N}^{3}\\to\\{\\pm1\\}$   \nRequire: $c\\mathrm{B}_{\\mathrm{K}}|K$   \nEnsure: $W_{g}\\in\\mathbb{R}^{N\\times(K/c)}$ 1: $\\boldsymbol{w}{=}\\mathrm{TILE}(\\mathrm{B_{N},B_{K}})$ 2: for $m\\in[\\lceil K/\\mathbf{B_{K}}\\rceil]$ do 3: for $j\\in\\left[\\left\\lceil N/\\mathbf{B_{N}}\\right\\rceil\\right]$ do 4: $w[:,:]=0$ 5: 6: for $\\begin{array}{r}{i\\in[|M/\\mathbf{B}_{\\mathbf{M}}||\\,\\mathbf{d}\\mathbf{o}\\,\\,\\,}\\\\ {w=w+\\mathbf{M}\\mathbf{M}(O^{T}[j\\mathrm{B_{N}}\\colon(j+1)\\mathrm{B_{N}},i\\mathrm{B_{M}}\\colon(i+1)\\mathrm{B_{M}}],}\\\\ {X[i\\mathrm{B_{M}}\\colon(i+1)\\mathrm{B_{M}},m\\mathrm{B_{K}}\\colon(m+1)\\mathrm{B_{K}}])}\\end{array}$ 7: end for 8: k = m//c $\\triangleright$ Index of block in SS1matrix 9: l = k%c $\\triangleright$ Offset of block in full matrix used for hashing   \n10: w=w/c $\\triangleright$ Scaling down gradients by compression factor   \n11: $\\begin{array}{r l}&{W_{g}[j\\mathrm{B_{N}}\\colon(j\\mathrm{+}1)\\mathrm{B_{N}},k B_{k}\\mathrm{+}(\\mathrm{RG}(\\mathrm{B_{K}})-h(j,k,\\bar{l}))\\%\\mathrm{B_{K}}]=}\\\\ &{\\ \\mathrm{~\\}g(j,k,l)w+W_{g}[:,k\\mathrm{B_{K}};(k\\mathrm{+}1)\\mathrm{B_{K}}]}\\end{array}$   \n12: end for   \n13: end for ", "page_idx": 23}, {"type": "text", "text": "Algorithm 4 SS1-backward: input grad ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Require: $c\\in\\mathbf{N}$ : compression factor   \nRequire: $O\\in\\mathbb{R}^{M\\times N}$ : output gradient   \nRequire: $W\\in\\mathbb{R}^{K//c\\times N}$ : SS1matrix   \nRequire: $\\mathrm{B_{M}},\\mathrm{B_{K}},\\mathrm{B_{N}}$ : coalescing parameters   \nRequire: $h:\\mathbb{N}_{-}^{3}\\rightarrow\\{0,\\dots,B_{K}-1\\}$   \nRequire: $g:\\mathbb{N}^{3}\\to\\{\\pm1\\}$   \nRequire: $c\\mathrm{B}_{\\mathrm{K}}|K$   \nEnsure: $X_{g}\\in\\mathbb{R}^{M\\times K}$ 1: $\\boldsymbol{x}{=}\\mathrm{TILE}(\\mathrm{B_{M},B_{K}})$ 2: for $l\\in[c]$ do 3: for $\\dot{k}\\in[\\lceil K//c/\\mathbf{B}_{\\mathbf{K}}\\rceil]$ do 4: for $i\\dot{\\in}\\dot{[\\lceil M/\\mathbf{B_{M}}\\rceil]}$ do 5: 6: $\\begin{array}{r l}&{x[:,:]=0}\\\\ &{\\mathbf{for}\\ j\\in[[N/\\mathbf{B}_{\\mathrm{N}}]]\\,\\mathbf{do}}\\\\ &{\\quad\\,x=x+\\mathbf{M}\\mathbf{M}(\\ O[i\\mathrm{B}_{\\mathrm{M}};(i+1)\\mathrm{B}_{\\mathrm{M}},j\\mathrm{B}_{\\mathrm{N}};(j+1)\\mathrm{B}_{\\mathrm{N}}],}\\\\ &{\\quad\\,\\mathbf{end}\\,\\mathbf{for}}\\\\ &{\\mathbf{xp}(i\\mathrm{B}_{\\mathrm{M}};(i+1)\\mathrm{B}_{\\mathrm{M}},(k+l)\\mathrm{B}_{\\mathrm{K}}+:(k+l+1)\\mathrm{B}_{\\mathrm{K}}]{=}x}\\end{array}$ 7: 8: 9:   \n10: end for   \n11: end for   \n12: end for ", "page_idx": 23}, {"type": "text", "text": "I Experiment settings ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "I.1 GPT experiment settings ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We follow the standard GPT2-Small implementation of monarch paper [16] from the HazyResearch group at fly repo (https://github.com/HazyResearch/fly.git). ", "page_idx": 23}, {"type": "text", "text": "To optimize training the GPT model on our GPUs, we replaced Huggingface\u2019s transformers[33] \u2019Conv1D\u2019 layers with PyTorch[34] \u2019nn.Linear\u2019 in the feedforward blocks, as the transformation remains the same. The architecture of the GPT2 models used in these experiments is detailed in 7. All models are trained using mixed-precision-training [36] with FP16 precision and implemented using PyTorch [34] AMP. We use V100-32GB GPUs to train the models from scratch. ", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 24}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/1df22e8f46b205c7024127dea4af68efbfc2ebce8f468f29026d2ee6b64d6777.jpg", "table_caption": ["Table 7 "], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "Hyperparameters: For training we use the AdamW optimizer with $\\alpha{=}6\\mathrm{e{-}}4$ , $\\beta_{1}{=}0.9$ , $\\beta_{2}{=}0.999$ , $\\epsilon=1e-08$ and weight_decay $=0.1$ we employ a linear schedule and wramup $1\\%$ of steps. The effective batch size is 512, which is not achievable on our hardware memory; thus, we perform gradient accumulation every 32 step to reach that. All models are trained for 100 epochs. The hyperparameters are adopted from the Monarch paper [16]. ", "page_idx": 24}, {"type": "text", "text": "Dataset: We use wikitext-103 [29] to train, evaluate, and test the model. The reported perplexity numbers are based on an evaluation of the test dataset. The length of the generated sequence is 1024. ", "page_idx": 24}, {"type": "text", "text": "I.1.1 Baselines ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "SS1: To build SS1 models, we substitute the transformer\u2019s feedforward linear layers with our SS1 layer. We use a fixed block size of Block_Size_ $\\mathrm{~K~}=\\,32$ , Block_Size $\\mathrm{~N~}=~32$ , and Block_Size_ $\\mathbf{M}=64$ for both the forward and backward kernels across all layers during training and testing. Additionally, each SS1 layer is assigned a different seed to ensure reproducibility of the hash functions used. In addition to the coalescing parameters, the vectorization parameter $\\mathrm{E}\\,V E C$ is set to 4. ", "page_idx": 24}, {"type": "text", "text": "Monarch: : For Monarch baseline, we convert the same layers as SS1 from the original Monarch implementation [16] and change the number of blocks to achieve different compression rates. ", "page_idx": 24}, {"type": "text", "text": "Lowrank: To implement the Lowrank layer, we take the linear layer matrix and parameterize it into two consecutive smaller matrices (linear layers) with reduced intermediate dimensions. The intermediate dimension in the replaced layer will be: ", "page_idx": 24}, {"type": "equation", "text": "$$\nK_{l r}=(K_{s}\\times N_{s})//(K_{s}\\!+\\!N_{s})\\times c\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "Where $K_{s}$ and $N_{s}$ are the input and output channels of the original matrix respectively, $c\\in\\mathbb{N}$ is the compression factor, and $K_{l r}$ is the intermediate dimension of Lowrank matrices. Afterward, like the other baselines, we swapped the linear layers of feedforward and replaced them with the Lowrank layer. ", "page_idx": 24}, {"type": "text", "text": "Smallmodel: The Smallmodel baseline aims to assess if the mlp layers of feedforward blocks of Large Language Models (LLM) are overparameterized and the impact on model quality by choosing smaller matrices for those layers. To achieve this, we take the same modules of the standard model and adjust the inner_dimension of the linear layers by a compression factor c where $c\\in\\mathbb{N}$ . ", "page_idx": 24}, {"type": "text", "text": "We were surprised to find that the smaller version of the model had moderate accuracy degradation. We also experimented with combining the small model and SS1 by training the small model with SS1 matrices for the FFN layers. We observed improved performance with the same number of parameters for \u2019Smallmodel $\\mathrm{\\kx{+}S S12x}^{\\,}$ compared to \u2019Smallmodel8x\u2019. The conversion process is the same as what we did in SS1-conversion. ", "page_idx": 24}, {"type": "text", "text": "BlockSparse: A pruning baseline that we sought to conduct the same experiment for was pytorch block sparse5. However, pytorch block sparse is constrained to fp32 precision training, and for the large models such as GPT2, it does not fit our available GPU memory space. ", "page_idx": 24}, {"type": "text", "text": "FlashAttention [37] suggests a significant latency of the inference phase lies in applying the softmax function on attention scores, which is a memory-bound operation. Using FlashAttention kernels shifts the workload from memory-bound to compute-bound; we know from the [37] that linear transformations are compute-bound because of the extensive matrix multiply operations. Considering all that, the performance contribution of SS1 is in the compute-bound setting because of reducing the inner dimension of the linear matrices. Thus, in GPT2 latency measurement experiments, we use the Pytorch kernel abstraction of FlashAttention, the scaled-dot-product-attention (SDPA). As the FlashAttention kernels are yet to be released for older GPUs such as V100, we were not able to apply them in the training phase on V100 GPUs; thus, we only replaced them in the latency measurement experiments for all the baselines above. For the latency measurement, we employ a single A100-40GB GPU. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "I.1.2 Quantization ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "To unravel the potential of SS1 in the quantization domain, we utilize uniform post-training Quantization. The method is as follows: ", "page_idx": 25}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{S=\\displaystyle\\operatorname*{max}_{i}\\left\\lvert X_{i}\\right\\rvert}}\\\\ {{\\hat{S}=\\displaystyle(\\frac{S}{2^{n}-1})}}\\\\ {{\\hat{X}=\\displaystyle\\left\\lvert\\frac{X}{\\hat{S}}\\right\\rvert}}\\end{array}\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "Where $X$ is a floating point tensor, and $\\hat{X}$ is its quantized version to an integer with $n$ number of bits. $S$ is the scale and $\\hat{S}$ is the quantization level. $\\lfloor\\cdot\\rceil$ denotes rounding to the nearest integer. We have chosen the scale to be $\\operatorname*{max}(|X|)$ as suggested by [32] due to its effectiveness in mitigating the impact of large activations in LLMs. ", "page_idx": 25}, {"type": "text", "text": "In our application, we implement the proposed method to reduce the precision of activation and weight tensors from 16 to 8 bits during the inference mode. For weight quantization, we apply the per-channel activation, meaning the scale is computed based on values of the tensor for each output channel; for activation quantization, we do per-token Quantization based on [32]. The quantization process is dynamic in our case. The results are obtained from testing the pre-trained GPT2-standard and SS1 models that we trained. ", "page_idx": 25}, {"type": "text", "text": "I.2 BERT finetuning settings ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "We conducted experiments to show that pre-trained linear layers can be projected onto SS1 layers while retaining previous knowledge. To validate this, we project the encoder layers of BERT-base and BERT-large models [19] onto SS1. BERT (Bidirectional Encoder Representations from Transformers) consists of a stack of Transformer encoder layers, each containing a self-attention mechanism and a feedforward neural network. In this work, we focus on two BERT model sizes: BERT-base (12 encoder layers, 768 hidden size, 12 attention heads, 110M parameters) and BERT-large (24 encoder layers, 1024 hidden size, 16 attention heads, 340M parameters). We then finetune these models on the GLUE (General Language Understanding Evaluation) benchmark [18]. Hyperparameters used during the finetuning stage are provided in Tables 10 and 11. GLUE consists of a collection of diverse natural language understanding tasks, such as textual entailment, question answering, and sentiment analysis. For our experiments, we utilize the GLUE dataset provided by the Hugging Face Datasets library. ", "page_idx": 25}, {"type": "text", "text": "The results are presented in Tables 8 and 9. We are able to achieve $50\\%$ compression of the encoder layers on both BERT-base and BERT-large models, with only a minimal drop in model quality across the GLUE tasks. This reduction in parameters is not achieved by uniformly compressing all layers in the encoder. Instead, we only project layers 1, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 (14 out of 24) for BERT-large and layers 1, 7, 8, 9, 10, 11, 12 (7 out of 12) for BERT-base at 8x compression. This leads to a net compression ratio of $\\textstyle1-{\\frac{14/8+10}{12}}=0.51$ BERT-large and $\\textstyle1-{\\frac{7/8+5}{12}}=0.51$ for BERT-base, approximately $50\\%$ compression for both models. These specific layers are selected using the RTE (Recognizing Textual Entailment) task from GLUE as calibration data. We treat RTE as a development set to determine which layers are less sensitive to compression. Layer sensitivity is measured by the degree of performance degradation on RTE when applying SS1 compression to individual layers in the model. The layers chosen by this method are able to generalize well to all other GLUE tasks, achieving evaluation metrics that closely match those of the full-sized BERT models with linear layers. ", "page_idx": 25}, {"type": "text", "text": "In addition to parameter reduction, BERT models with SS1 layers are able to achieve up to $1.31\\mathbf{x}$ increase in inference throughput. Detailed latency measurements are provided in Table 12. On the GLUE task, our BERT-large model with SS1 compression attains an accuracy of 79.76 (2.6 drop compared to the full model), while our compressed BERT-base model reaches 79.9 accuracy (2.2 drop) - demonstrating that our SS1 projection method can maintain strong performance with significantly reduced parameters and runtime. ", "page_idx": 26}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/699d4034b36d9813784043da9baf1dd3ac0387a6d3d1f5dfac210bf57ee8109b.jpg", "table_caption": ["Table 8: Fine-tuning results for Bert Large "], "table_footnote": [], "page_idx": 26}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/037f9b5053661e37adf627ba832f5c3885dd59ec0011fe5daba5afc4173d7e04.jpg", "table_caption": ["Table 9: Fine-tuning results for Bert Base "], "table_footnote": [], "page_idx": 26}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/06838dc83ee8b563c9bd61192cb01f4417fcb32bc455122ccbb9ccc121f81f2a.jpg", "table_caption": ["Table 10: Hyper parameters for Bert(SS1) Large "], "table_footnote": [], "page_idx": 26}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/7437ffbde09fe1272ed9bc4a946f77f6d3b9c2fd5b555b0192f5034260f35b78.jpg", "table_caption": ["Table 11: Hyper parameters for Bert(SS1) Base "], "table_footnote": [], "page_idx": 26}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/9c6f7ae1a83bed4a630ddc9e0f6033b0b3a490cf15d0ac7d0056690600180876.jpg", "table_caption": [""], "table_footnote": [], "page_idx": 26}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/3c864d2065f455618807755e3bcbee348c415fc89bdc49c9cb6d88b39f52a903.jpg", "table_caption": [], "table_footnote": [], "page_idx": 26}, {"type": "text", "text": "I.3 Llama experiments ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Meta\u2019s Llama family has emerged as one of the most powerful open-source Large Language Models. They are designed to be powerful and efficient models for various natural language processing tasks. In this work, we focus on the Llama3-8B model, which has 32 decoder layers, a hidden size of 4096, and 32 attention heads, resulting in approximately 8 billion parameters. ", "page_idx": 26}, {"type": "text", "text": "We conduct experiments to demonstrate that the pre-trained linear layers in Llama can be directly projected onto SS1 layers without any finetuning while maintaining model performance. This is a significant finding, as it highlights the effectiveness of our SS1 compression method in preserving the knowledge captured by the pre-trained model. By avoiding the need for finetuning, our approach offers substantial computational savings and facilitates more efficient deployment of compressed models. To validate our approach, we project the transformer layers of the Llama3-8B model onto SS1 layers. Specifically, we use the \u2019meta-llama/Meta-Llama-3-8b\u2019 model provided by the Hugging Face Transformers library. We then evaluate the compressed model on the MMLU (Massive Multitask Language Understanding) [38] and Winogrande [39] tasks without any further training or finetuning using Language Model Evaluation Harness [40]. ", "page_idx": 26}, {"type": "text", "text": "", "page_idx": 27}, {"type": "text", "text": "For calibration purposes, we utilize two small datasets: tinyMMLU and tinyWinogrande [41]. These datasets consist of 100 curated examples from the original MMLU and Winogrande datasets, respectively. By using these tiny datasets, we aim to identify the layers that are less sensitive to compression while minimizing the computational overhead of the calibration process. The results of our experiments are presented in Table 9. We achieve a $25\\%$ compression ratio of the decoder layers in Llama3-8B without any finetuning. This compression is obtained by projecting layers 18, 19,20, 21, 22, 23, 24, 25, 26, 27 in the case of MMLU and layers 18, 19, 20, 21, 22, 23, 24, 25, 26, 30 in the case of Winogrande onto SS1 at 8x compression, resulting in a net compression ratio of approximately 0.25. The selection of layers for compression is based on their sensitivity to compression, as determined by the performance on the tinyMMLU and tinyWinogrande datasets. The layers chosen using the tiny calibration datasets generalize well to the full MMLU and Winogrande datasets. This observation suggests that the compressed model retains the essential knowledge captured by the pre-trained Llama model, enabling it to perform competitively on the complete datasets without any finetuning. ", "page_idx": 27}, {"type": "text", "text": "Table 9 presents the evaluation metrics of the compressed Llama model on the full MMLU and Winogrande datasets. On MMLU, our compressed model achieves an accuracy of $61.26\\%$ , which is only a slight decrease from the $65.05\\%$ accuracy of the original Llama3-8B model. Similarly, on Winogrande, the compressed model obtains an accuracy of $69.93\\%$ , compared to the $76.1\\%$ accuracy of the uncompressed model. These results demonstrate the effectiveness of our SS1 compression method in maintaining the performance of the Llama model while significantly reducing its parameter count. Furthermore, the compressed Llama model exhibits improved inference speed, achieving up to $1.1\\mathtt{x}$ increase in throughput compared to the original model. ", "page_idx": 27}, {"type": "text", "text": "The ability to compress large language models like Llama without finetuning opens up new possibilities for efficient deployment and utilization of these models in various applications. Our SS1 compression method offers a practical solution for reducing the computational and memory requirements of large models while preserving their performance on downstream tasks. ", "page_idx": 27}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/0ca294e4955a33a75a626be62fc8f11e126bae8920aa7551771e3d2aa1a29aa0.jpg", "table_caption": ["Table 13: Llama Projection Results "], "table_footnote": [], "page_idx": 27}, {"type": "text", "text": "I.4 Vision ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "We use the following MLPMixer models We use the repository: https://github.com/omihub777/MLP", "page_idx": 27}, {"type": "table", "img_path": "nrgyOGU7ZP/tmp/408d1c4b8c245350ed56e75fcd352ba45e14fbf15064a62d88b1df771ea0146a.jpg", "table_caption": [], "table_footnote": [], "page_idx": 27}, {"type": "text", "text": "Mixer-CIFAR with default settings for all runs. We do not use hyperparameter tuning for compression methods. ", "page_idx": 27}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 28}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 28}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 29}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: We give our main kernel implementation.(link in PCQs in appendix) The experiment section is created using set of patched github repositories forked from original implementations. We will release our experimentation repository after acceptance. We detail our experiment methodology in appendix ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 29}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 30}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 30}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 30}, {"type": "text", "text": "", "page_idx": 31}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We have added resource details to the appendix section A ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 31}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 31}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: To the best of our knowledge there is no specific societal impact of our work apart from that we are contributing to faster AI. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 32}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks. ", "page_idx": 32}, {"type": "text", "text": "\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 32}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: We have provided all the information at sec A ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 32}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 33}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] Justification: Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 33}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] Justification: Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 33}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] Justification: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 33}]