[{"type": "text", "text": "Improving Deep Learning Optimization through Constrained Parameter Regularization ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "J\u00f6rg K.H. Franke University of Freiburg, Germany ", "page_idx": 0}, {"type": "text", "text": "Michael Hefenbrock RevoAI, Karlsruhe, Germany ", "page_idx": 0}, {"type": "text", "text": "Gregor Koehler German Cancer Research Center (DKFZ) Heidelberg, Germany ", "page_idx": 0}, {"type": "text", "text": "Frank Hutter ELLIS Institute T\u00fcbingen, Germany University of Freiburg, Germany ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Regularization is a critical component in deep learning. The most commonly used approach, weight decay, applies a constant penalty coefficient uniformly across all parameters. This may be overly restrictive for some parameters, while insufficient for others. To address this, we present Constrained Parameter Regularization (CPR) as an alternative to traditional weight decay. Unlike the uniform application of a single penalty, CPR enforces an upper bound on a statistical measure, such as the $\\mathrm{L_{2}}$ -norm, of individual parameter matrices. Consequently, learning becomes a constraint optimization problem, which we tackle using an adaptation of the augmented Lagrangian method. CPR introduces only a minor runtime overhead and only requires setting an upper bound. We propose simple yet efficient mechanisms for initializing this bound, making CPR rely on no hyperparameter or one, akin to weight decay. Our empirical studies on computer vision and language modeling tasks demonstrate CPR\u2019s effectiveness. The results show that CPR can outperform traditional weight decay and increase performance in pre-training and fine-tuning. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Deep neural networks are the bedrock of many state-of-the-art machine learning applications [1]. While these models have exhibited unparalleled expressivity, they also possess millions, sometimes trillions, of parameters [2]. This massive capacity makes them susceptible to overftiting, where models memorize nuances of the training data but underperform on unseen examples. To mitigate this, many different regularization techniques have been adopted, with weight decay and $\\mathrm{L_{2}}$ regularization [3, 4, 5] being the most popular. $\\mathrm{L_{2}}$ regularization penalizes the squared magnitude of model parameters and (decoupled) weight decay (which is equivalent to $\\mathrm{L_{2}}$ regularization for non-adaptive gradient algorithms [6]) multiplies all weights with a constant at every step. This seemingly simple ", "page_idx": 0}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/d9b5b331692c875885add84bd745034364871c98c7bba839b3c640f85cbb21ba.jpg", "img_caption": ["Figure 1: GPT2s training using Adam with weight decay or CPR (Kappa-IP). AdamCPR outperforms AdamW with the same budget and only requires $2/3$ of the budget to reach the same score. "], "img_footnote": [], "page_idx": 0}, {"type": "text", "text": "act offers numerous beneftis by curbing the growth of individual weights, reducing the risk of relying on any particular feature excessively, and thus promoting model generalization. ", "page_idx": 0}, {"type": "text", "text": "However, not all parameters in a neural network have the same role or importance and different weights could benefit from different regularization. Similarly, it is unclear if a single weight decay value is optimal for the entire duration of optimization, especially for large-scale training. Indeed, Ishii and Sato [7] showed that a small deep learning model could benefit from layer-wise weight decay values, and various works showed that scheduling weight decay could improve final performance [8, 9, 10, 11]. This indicates that a dynamic penalty for each individual parameter matrix (e.g., a weight matrix in a linear layer) could be beneficial for neural network training. Since both scheduling and parameter-wise weight decay require additional hyperparameters that are often sensitive to the task, we propose a different approach to obtain customized, dynamic parameter regularization. Instead of uniformly penalizing weights, we propose to keep them in a certain range, thus ensuring stability without imposing regularization where it is unnecessary. Constraining parameters, especially based on statistical measures like the $\\mathrm{L_{2}}$ norm, provide a flexible and adaptive form of regularization that accounts for the heterogeneity of parameters. ", "page_idx": 1}, {"type": "text", "text": "In this paper, we propose Constrained Parameter Regularization (CPR), which enforces an upper bound on a statistical measure of individual parameter matrices. Consequently, regularization is expressed as a constrained optimization problem, which we address by an adaptation of the augmented Lagrangian method. The regularization of each parameter matrix is handled by a separate constraint and Lagrange multiplier, resulting in an individual regularization strength that adapts over time. The method requires the selection of desired constraint values as well as an update rate for the Lagrange multipliers. We found that the update rate can be fixed to 1.0. For choosing constraint values, we introduce four strategies, three of which require a single hyperparameter, while the last one is hyperparameter-free. We show in our experiments performance improvements over weight decay when pre-training or finetuning models for image classification (CIFAR100 and ImageNet), language modeling (OpenWebText), and medical image segmentation. For example, when training a GPT2s model, we achieved the same performance as AdamW but only require $2/{\\bar{3}}$ of the budget, see Figure 1. Applying our method for fine-tuning, we find performance improvements and less catastrophic forgetting. In the following, and after discussing related work (Section 2) and background on weight decay and the augmented Lagrangian method (Section 3), we make the following contributions: ", "page_idx": 1}, {"type": "text", "text": "\u2022 Introducing CPR for individualized and dynamic weight regularization1. Specifically, formulating regularization as a constraint optimization problem and proposing CPR as a solution (Section 4.1). \u2022 Identifying four different strategies for initializing this constraint (Section 4.3). One of them, Kappa-WS, has a strong default that outperforms tuned AdamW; and another one, Kappa-IP, is entirely hyperparameter-free and yields even better performance in pre-training. \u2022 Showing improved performance over weight decay in image classification, medical image segmentation, and pretraining and fine-tuning language models (Section 5). ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Weight decay is an effective regularization technique to improve the generalization and model performance [12], and the idea of adapting parameter regularization during training is not new. Lewkowycz and Gur-Ari [8] investigated the effect of $\\mathrm{L_{2}}$ regularization on overparameterized networks and found the time it takes the network to reach peak performance is proportional to the $\\mathrm{L_{2}}$ regularization parameter. They proposed an initialization scheme for $\\mathrm{L_{2}}$ regularization and an annealing schedule for the $\\mathrm{L_{2}}$ parameter. Yun et al. [9] use a combination of weight decay scheduling and knowledge distillation to improve performance on computer vision tasks. More recent works on self-supervised vision transformers also use a weight decay schedule [10, 11]. In contrast to our work, none of these proposes a dynamic and individual adaptation of each regularized parameter matrix. Also, a schedule comes with varying hyperparameter choices while CPR adapts arbitrarily many parameter matrices with only two hyperparameters (out of which one is fixed in all our experiments). Instead of using a schedule, Nakamura and Hong [13] proposes AdaDecay, where the $L_{2}$ penalty is scaled by standardized gradient norms and a sigmoid function. Ghiasi et al. [14] propose another gradient-based approach, Adaptive Weight Decay (AWD), which dynamically adjusts the weight decay based on the ratio of weight norms to gradient norms to balance the contributions from the cross-entropy and regularization losses aiming to improve the robustness. AMOS [15] leverages model-specific information for initialization and gradients to adapt L2 regularization during the training. Another way to regularize parameters is to fix the norm of individual parameter matrices [16], to schedule the weight norm [17], or to limit the total norm of all parameters [18] to a fixed value. This fixed value is a more sensitive hyperparameter than the hyperparameter in our work. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Our proposed method is not the first to use Lagrangian methods in machine learning [19]. Its application in deep learning so far focuses on variational methods and generative models: Rezende and Viola [20] introduced the Generalized ELBO with Constrained Optimization algorithm to optimize VAEs using Lagrange multipliers optimized by the min-max scheme, and Kohl et al. [21] and Franke et al. [22] adapted the Lagrangian method from Rezende and Viola [20] to train probabilistic U-nets and probabilistic Transformer models. While these works adopt Lagrangian methods to handle several losses in joint optimization problems, our work leverages them to enable individual regularization strengths. ", "page_idx": 2}, {"type": "text", "text": "3 Background ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 $\\mathbf{L}_{2}$ Regularization and Weight Decay ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Regularization methods, such as $\\mathrm{L_{2}}$ -regularization or weight decay, are commonly used to restrict parameter updates and enhance generalization by reducing unnecessary complexity [3, 4, 5]. Both can be motivated by introducing a \u201ccost\" to weight magnitudes. Specifically, in $\\mathrm{L_{2}}$ -regularization, instead of minimizing only the loss function $L(\\pmb\\theta,X,\\pmb y)$ with parameters $\\pmb{\\theta}$ and data $\\bar{\\cal D}=\\{({\\cal X}_{n},{\\pmb y}_{n})\\}_{n=0}^{N}$ , a weighted penalty (regularization) term $R(\\pmb\\theta)$ is added to the loss, resulting in the training objective ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\pmb{\\theta}}\\quad L(\\pmb{\\theta},\\pmb{X},\\pmb{y})+\\gamma\\cdot R(\\pmb{\\theta}),\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\begin{array}{r}{R(\\pmb\\theta)=\\frac{1}{2}\\|\\pmb\\theta\\|_{2}^{2}}\\end{array}$ denotes the regularization function and $\\gamma\\in\\mathbb{R}^{+}$ the strength of the penalty. On the other hand, weight decay directly modifies the update rule of the parameters to ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\pmb{\\theta}_{t+1}\\leftarrow\\pmb{\\theta}_{t}+\\mathrm{Opt}(L,\\eta)-\\eta\\cdot\\gamma\\cdot\\pmb{\\theta}_{t},\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\mathrm{Opt}(L,\\eta)$ denotes an optimizer providing the gradient-based update at iteration $t$ and $\\boldsymbol{L}=\\boldsymbol{L}(\\pmb{\\theta}_{t},\\dot{\\boldsymbol{X}}_{t},\\dot{\\pmb{y}}_{t})$ the loss. For example, $\\mathrm{Opt}(\\bar{L^{\\prime}}\\eta)=\\stackrel{\\bar{\\mathrm{~}}}{-}\\eta\\cdot\\nabla_{\\theta}L(\\theta_{t},\\bar{X_{t}^{\\prime}},y_{t})$ with learning rate $\\eta\\,\\in\\,\\mathbb{R}^{+}$ in case of gradient descent. Thus, the main difference between weight decay and $\\mathrm{L_{2}}$ - regularization is that the gradients of the regularization accumulate in momentum terms in the case of $\\mathrm{L_{2}}$ -regularisation, while they are treated separately in (decoupled) weight decay. This has also been extensively discussed by Loshchilov and Hutter [6] with the introduction of the AdamW optimizer. ", "page_idx": 2}, {"type": "text", "text": "3.2 The augmented Lagrangian method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We briefly review the augmented Lagrangian method for constrained optimization, see e.g. Bertsekas [23], which our method is based on. For the derivation, we follow the motivation of Nocedal and Wright [24, pp. 523-524]. Consider the following inequality-constrained optimization problem ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{minimize}_{\\pmb{x}}f(\\pmb{x})\\quad\\mathrm{s.t.}\\quad c(\\pmb{x})\\leq0,\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "with $f(\\pmb{x}):\\mathbb{R}^{n}\\rightarrow\\mathbb{R}$ and a constraint $c(\\mathbf{\\alpha}\\mathbf{x}):\\mathbb{R}^{n}\\rightarrow\\mathbb{R}$ . One way to address the constraint is to find an equivalent, unconstrained problem with the same optimal solution. For example, ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{minimize}_{x}F(x)\\quad{\\mathrm{with}}\\quad F(x)=\\operatorname*{max}_{\\lambda\\geq0}\\ f(\\pmb{x})+\\lambda\\cdot c(\\pmb{x}).\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Unfortunately, even if $f({\\boldsymbol{x}})$ and $c({\\pmb x})$ are differentiable, $F(x)$ is not differentiable. This is due to the maximization over $\\lambda$ in $F(x)$ , where in case of $c({\\pmb x})>0$ , $\\begin{array}{r}{F(\\pmb{x})\\rightarrow\\infty}\\end{array}$ . Consequently, we cannot run gradient-based optimization on this objective. ", "page_idx": 2}, {"type": "text", "text": "To alleviate this problem, we consider a smooth approximation of $F(x)$ , namely ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\hat{F}({\\pmb x},\\lambda_{t},\\mu)=\\operatorname*{max}_{\\lambda\\geq0}\\ f({\\pmb x})+\\lambda\\cdot c({\\pmb x})-\\frac{1}{2\\mu}(\\lambda-\\lambda_{t})^{2},\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\lambda_{t}\\,\\in\\,\\mathbb{R}$ may be seen as a point we wish to remain proximal to and $\\mu\\,\\in\\,\\mathbb{R}^{+}$ as a factor determining the strength with which this proximity is enforced. For $\\mu\\to\\infty$ , $\\hat{F}({\\pmb x},\\lambda_{t},{\\pmb\\mu})\\rightarrow F({\\pmb x})$ . ", "page_idx": 2}, {"type": "text", "text": "The maximization in $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ has a closed form solution with $\\lambda^{\\star}=(\\lambda_{t}+\\mu\\cdot c({\\pmb x}))^{+}$ , where $(\\cdot)^{+}=\\operatorname*{max}\\{0,\\cdot\\}$ , see Appendix A for the derivation. Consequently, $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ can be written as ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{F}({\\pmb x},\\lambda_{t},\\mu)=f({\\pmb x})+h({\\pmb x},\\lambda_{t},\\mu)\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "with ", "page_idx": 3}, {"type": "equation", "text": "$$\nh(\\pmb{x},\\lambda_{t},\\mu)=\\left\\{c(\\pmb{x})(\\lambda_{t}+\\frac{\\mu}{2}c(\\pmb{x})),\\begin{array}{l}{\\mathrm{if}\\quad\\lambda_{t}+\\mu\\cdot c(\\pmb{x})\\geq0}\\\\ {\\mathrm{else}.}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The constraint thus only interferes with the minimization (gradient) of $f({\\pmb x})$ if $\\lambda_{t}+\\mu\\cdot c({\\pmb x})\\geq0$ . We can now try to solve the unconstrained problem minimize $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ with familiar methods, such as gradient descent, and obtain an approximate solution to the original problem. Specifically, the gradient of $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ with respect to $\\textbf{\\em x}$ is given by ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\nabla_{x}\\hat{F}({\\pmb x},\\lambda_{t},\\mu)=\\nabla_{\\pmb x}f({\\pmb x})+\\lambda^{\\star}\\cdot\\nabla_{{\\pmb x}}c({\\pmb x}).\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The quality of the approximation, and thus the solution, clearly depends on $\\mu$ and $\\lambda_{t}$ . To improve this approximation we can refine the choice of $\\lambda_{t}$ via an iterative procedure and repeat the optimization with $\\lambda_{t+1}\\leftarrow\\lambda^{\\star}=(\\lambda_{t}+\\mu\\cdot c({\\pmb x}))^{+}$ . Intuitively, if the previous minimization of $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ resulted in an infeasible solution with $c({\\pmb x})>0$ , $\\lambda_{t+1}>\\lambda_{t}$ . Hence, the minimization of $\\hat{F}({\\pmb x},\\lambda_{t+1},{\\mu})$ likely results in a solution with less constraint violation. On the other hand, if $c(\\pmb{x})\\,\\leq\\,0$ , $\\lambda_{t+1}\\,\\leq\\,\\lambda_{t}$ . Subsequently, the influence of the constraint is decreased. This loop of alternating minimization of $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ and updating $\\lambda_{t}$ can be repeated until a sufficiently good solution is found or the procedure converges if $\\lambda_{t}$ does not receive updates anymore. For multiple constraints $c_{j}({\\pmb x}),~j=1,\\bar{\\cdot}\\cdot\\cdot,J$ , the above can be readily extended with a multiplier $\\lambda_{t}^{j}$ for each constraint. Since the maximization in the smooth approximation is separable in the $\\lambda_{t}^{j}$ , the same update rule may be applied for each $\\lambda_{t}^{j}$ separately using the respective constraint $c_{j}(\\pmb{x})$ . ", "page_idx": 3}, {"type": "text", "text": "4 Constrained Parameter Regularization ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we introduce Constrained Parameter Regularization (CPR), where we adapt the augmented Lagrangian method to enforce upper bounds on regularization terms. Compared to classical regularization, with a fixed regularization coefficient $\\gamma$ , the proposed approach will allow for variable regularization coefficients $\\lambda_{t}^{j}$ (Lagrange multipliers) for $j=1,\\cdot\\cdot\\cdot\\,,J$ parameter matrices $\\theta^{j}\\subseteq\\theta$ that should be regularized. These regularization coefficients are updated alongside the network parameters $\\pmb{\\theta}$ . ", "page_idx": 3}, {"type": "text", "text": "4.1 Regularization through constraints ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Classical weight decay, as introduced earlier, is used as a means to restrict the freedom of parameter adaptation. This restriction is applied with a scaling factor $\\gamma$ (hyperparameter) and applies uniformly to all parameters. However, we conjecture that applying an individual adaptation pressure instead may be beneficial. Unfortunately, this would require a separate coefficient for each parameter matrix where a separate weight decay should be applied. To avoid the need for separate scaling coefficients, we formulate regularization as a constrained problem. Here, the loss function $\\bar{\\cal L}(\\bar{\\theta bar{,}}{\\cal X},y)$ , with network parameters $\\pmb{\\theta}$ , takes the place of the objective. Consequently, the learning problem becomes ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\underset{\\theta}{\\operatorname{minimize}}\\,L(\\theta,X,y)\\quad\\mathrm{s.t.}\\quad c_{j}\\big(\\theta^{j}\\big)=R\\big(\\theta^{j}\\big)-\\kappa^{j}\\leq0,\\quad\\mathrm{for}\\quad j=1,\\cdots,J,\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $R(\\pmb\\theta^{j})$ is a regularization function (e.g., the squared $\\mathrm{L_{2}}$ -norm in case of weight decay) for a parameter matrix ${\\pmb\\theta}^{j}\\subseteq{\\pmb\\theta},j=1,\\cdots\\,,J$ , and $\\boldsymbol{\\kappa}^{j}\\in\\mathbb{R}$ denotes a chosen bound. ", "page_idx": 3}, {"type": "text", "text": "To solve equation 3, we follow the augmented Lagrangian method with slight modifications. First, instead of performing a full optimization of the loss before updating $\\lambda_{t}$ , we perform updates in every step. This is motivated by the fact that full optimization is generally infeasible in a deep learning setting. Moreover, similar to the difference between weight decay and $\\mathrm{L_{2}}$ -regularization, we treat the update between the loss-dependent and the constraint-dependent part separately. Hence, instead of introducing $\\hat{L}(\\pmb{x},\\lambda_{t},\\mu)$ analogously to equation 2, and performing optimization on this objective, we independently apply updates for both steps. Consequently, the constraint violations do not accumulate ", "page_idx": 3}, {"type": "text", "text": "Algorithm 1 Optimization with constrained parameter regularization (CPR) ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Require: Loss Function $L(\\pmb\\theta,X,\\pmb y)$ with parameters $\\pmb{\\theta}$ , and data $\\mathcal{D}=\\{(\\boldsymbol{X}_{n},\\boldsymbol{y}_{n})\\}_{n=0}^{N}$ Require: Hyperparameters: Learning rate $\\bar{\\eta}\\in\\mathbb{R}^{+}$ , Lagrange multiplier update rate $\\tilde{\\mu}\\in\\mathbb{R}^{+}(=1.0)$ Require: Optimizer $\\mathrm{{Opt}(\\cdot)}$ for minimization, Regularization function $R(\\pmb\\theta)$ (e.g. L2-norm) ", "page_idx": 4}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/6047d5474fbd5b788bda300c6cb014d6eeae83eb260eaaa28c4ec39010c684ee.jpg", "img_caption": [], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "in momentum terms. We also remove the influence of the learning rate on the regularization. From a practical perspective, our modification does not interfere with gradient-based optimization algorithms and can be readily combined with any such optimizer. The full algorithm is given by Algorithm 1. ", "page_idx": 4}, {"type": "text", "text": "Conceptually, the method can be understood as the $\\lambda_{t}^{j}$ accumulating constraint function values (weighted with $\\mu$ ) over the iterations $t$ . These then increase (or decrease) the influence of the constraint (via its gradient) on the search direction. When points in the feasible domain are found for which $c_{j}(\\pmb\\theta)\\leq0$ , $\\bar{\\lambda}_{t}^{j}$ decreases until it eventually reaches 0. If, on the other hand, the optimal solution lies on the boundary, where $c_{j}(\\pmb\\theta)=0$ , $\\lambda_{t}^{j}$ should converge to a value where the update direction of the optimizer and the gradient of the constraints cancel each other. However, this situation is unlikely to occur in a deep learning setting due to the stochasticity of minibatches. ", "page_idx": 4}, {"type": "text", "text": "4.2 How is CPR different from weight decay? ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The optimality conditions of the CPR problem and an $\\mathrm{L_{2}}$ -regularized training objective reveal a connection between the two approaches. To see this, consider the training objective of $\\mathrm{L_{2}}$ regularization with a given $\\gamma$ , assuming it has a minimum at $\\theta^{\\star}$ . Consequently, at this point, we have $0=\\nabla L(\\theta^{\\star})+\\gamma\\cdot\\nabla R(\\theta^{\\star})$ , and the value of the regularization function is $R(\\theta^{\\star})$ . ", "page_idx": 4}, {"type": "text", "text": "If we set $\\kappa^{\\star}=R(\\theta^{\\star})$ , the Karush-Kuhn-Tucker (KKT) (optimality) conditions for CPR are $0=\\nabla L(\\theta^{\\star})+\\lambda\\cdot\\nabla\\dot{R}(\\theta^{\\star})$ and $R(\\theta^{\\star})\\mathrm{~-~}\\kappa^{\\star}\\leq0$ (which holds with equality), with the Lagrange multiplier $\\lambda\\geq0$ . We can see that for $\\lambda^{\\star}=\\gamma$ , the solution pair $(\\theta^{\\star},\\lambda^{\\star})$ satisfies the KKT conditions. Hence, there is a choice of $\\kappa$ (namely $\\kappa^{\\star}$ ) for which the CPR problem has the same optimal solution candidates as the $\\mathrm{L_{2}}$ -regularized training objective for a given $\\gamma$ . CPR could therefore be seen as a different approach to searching for the same solution candidates but is parameterized with different hyperparameters ( $\\scriptstyle{\\overrightarrow{\\kappa}}$ instead of $\\gamma$ ). Unlike $\\mathrm{L_{2}}$ -regularization (or weight decay), CPR can mimic the behavior of different $\\gamma$ values for different parameter matrices. This behavior changes over time as the $\\lambda^{j}$ values are updated and thus leads to different training dynamics compared to weight decay. Additionally, focusing on a bound on the regularization function $\\kappa$ instead of a penalty coefficient $\\gamma$ may allow us to identify better indicators for the selection of (default) values for these hyperparameters. ", "page_idx": 4}, {"type": "text", "text": "4.3 Initialization of Upper Bounds $\\kappa^{j}$ ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The upper bound $\\kappa$ is the most crucial hyperparameter for CPR, and we identify four ways to initialize it. (1) Kappa-K: Set $\\kappa^{j}\\leftarrow\\kappa$ to the same value $\\kappa$ for all parameter matrices. (2) $\\mathtt{K a p p a-k I_{0}}$ : Set $\\kappa^{j}$ based on the initial parameter matrices\u2019 regularization function value: $\\boldsymbol{\\kappa}^{j}\\gets\\boldsymbol{k}\\cdot\\boldsymbol{R}(\\boldsymbol{\\theta}_{t=0}^{j})$ , with $k\\,\\in\\,\\mathbb{R}^{+}$ as the factor of the initial measure. (3) Kappa-WS: Train the model parameters $\\pmb{\\theta}$ for a specific number of warm start (WS) steps $s\\in\\mathbb{N}^{+}$ and then set $\\kappa^{j}\\gets R(\\pmb{\\theta}_{t=s}^{j})$ . (see algorithm for ", "page_idx": 4}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/20d6557abdc34b6eff5456431179ea40ba1317a26dff27eccfc58bb7109fdf00.jpg", "img_caption": ["Figure 2: Percentage of correct labels $(\\uparrow)$ of a ResNet18 trained on CIFAR100 with AdamW and AdamCPR with Kappa-IP or Kappa-WS. We use a learning rate warm-up of 500 steps and the best Kappa-WS value is $2\\times$ the warm-up steps. We report the mean of three runs with random seeds. We see that both CPR versions outperform weight decay "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "CPR with Kappa-WS in Appendix B). While the previous strategies all require a hyperparameter, our last strategy is essentially hyperparameter-free. (4) Kappa-IP: Use the first inflection point (IP) of the regularization function at step $i$ (change of curvature over the training steps) to warm start each parameter matrix individually. Specifically, $\\kappa^{j}\\gets R(\\pmb{\\theta}_{t=i}^{j})$ where $i$ is the first iteration where $\\Delta_{t}\\Delta_{t}R(\\pmb{\\theta}^{j})\\,<\\,0$ . The intuition behind this choice comes from the fact that the rate of change decreases at the inflection point. This hints at a saturation of the improvement expected through raising the value of the regularization function further. The position of the inflection point thus indicates a good choice for $\\kappa$ , as it demonstrated healthy training dynamics while still restricting the model from over-adapting (see Section 5). Consequently, this method leverages the natural progression of the model\u2019s training rather than relying on an external hyperparameter, aiming to adaptively find a suitable upper bound. ", "page_idx": 5}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We now describe a set of experiments to understand CPR and its parametrization. Preliminary experiments showed that $\\mu$ is not a sensitive hyperparameter and we chose $\\mu\\,=\\,1.0$ for all our experiments. We provide a detailed analysis of $\\mu$ in Appendix C. Similar to weight decay, we choose the squared $\\mathrm{L_{2}}$ norm as a default regularization function for CPR. We also tested an adaptive bound, where we adjusted kappa during training but found it not to be beneficial; details are reported in Appendix D. In the following experiments, we regularize all parameters in a network except for bias terms and normalization weights. Since CPR does not require additional gradient calculations or parameter updates, we find only a small runtime overhead with our CPR implementation (in PyTorch, no CUDA optimization, $0.4\\%{-5.8\\%}$ for GPT2) which is mentioned in each experiment individually and analyzed in Appendix I. ", "page_idx": 5}, {"type": "text", "text": "5.1 Train an Image Classification Model (CIFAR100) ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "To evaluate CPR\u2019s effectiveness and design choices, we tested AdamW and Adam with CPR (AdamCPR) in image classification using a ResNet18 on the CIFAR100 dataset [25, 26]. We compared AdamW to AdamCPR with the four initializations described in Section 4.3. The initialization Kappa-WS after $s$ warm steps performed best, see Figure 2. We base our choice of the warm start on the 500 steps learning rate warmup out of $20k$ total training steps and found a large range of hyperparameters that consistently outperform weight decay. Also, the hyperparameter-free method Kappa-IP outperforms weight decay. To detect the infection point, we found it sufficient to sweep the statistical measure in an interval of $10\\%$ of the learning rate warmup. We also apply this in all further experiments. The superior performance of Kappa-WS and Kappa-IP may be due to its general flexibility, as warm-started bounds may be considered \"learned,\" reflecting the actual magnitudes and distributions of the parameter matrices during training. Appendix E contains training details and a plot with all initializations and standard deviation across three random seeds in Figure E.1. ResNet18 training took 15-20 minutes on a consumer GPU, with no significant runtime difference between ", "page_idx": 5}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/819b8764ad9a5d2107ddec4b51b0948110f764474f993582cd20371f517840c0.jpg", "table_caption": ["Table 1: Comparison of AdamW and AdamCPR in a DeiT [28] pertaining on ImageNet. We train a small (22M parameters) and a base model (86M) with different regularization parameters. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "AdamW and AdamCPR. We also tested the standard deviation as a choice for the regularization function, which performed well but not better than the squared $\\mathrm{L_{2}}$ norm (see Figure E.2). ", "page_idx": 6}, {"type": "text", "text": "To investigate the relationship between the learning rate warm-up and the number of warm start steps $s$ of Kappa-WS or Kappa-IP, we experimented with varying warm-up steps. We found that setting the CPR warm start steps $s$ to twice the warm-up steps is a good initial choice. For very low warm-up steps, the best $s$ was four times the warm-up count. Conversely, with a long warm-up phase, a shorter CPR warm start $(\\times1)$ is preferable. Notably, the optimal choice of $s$ is almost independent of the learning rate, as shown in Figure E.3. The optimal warm start steps are consistent across a wide range of learning rates. A simple baseline representing a similar regularization approach is a weight decay schedule. We evaluated a cosine schedule for decreasing and increasing weight decay values, similar to [10, 11]. The results, shown in Figure E.4, indicate that the decreasing schedule outperforms a fixed weight decay but not CPR. We tested if CPR is particularly good for noisy data and perfomed experiments on the noisy CIFAR100-C dataset [27]. The results, in Figure E.5, show that AdamCPR outperforms AdamW slightly. However none of the optimizer and hyperparameter configurations lead to an outstanding performance on this task, we wouldn\u2019t claim that CPR is particularly good for noisy data. We also used CPR with SGD. We found, as shown in Figure E.6, that SGD with CPR outperforms SGD with weight decay when using the Kappa-WS initialization. However, Kappa-IP seems not to work with SGD, probably due to the changed convergence behavior in contrast to Adam. ", "page_idx": 6}, {"type": "text", "text": "Additionally, we compared our method to related work. We implemented AdaDecay [13] and evaluated the method for different alpha values, as seen in Figure E.7. We also compared AdamW and AdamCPR to adaptive Weight Decay (AWD) [14] and AMOS [15]. Furthermore, we used Adam with parameter rescaling from Liu et al. [18]. We found AdaDecay superior to AdamW, while AMOS and Rescaling performed less well. However, CPR outperforms all related approaches. We report all results across multiple learning rates and weight decay values in Figure E.8. ", "page_idx": 6}, {"type": "text", "text": "5.2 Train an Image Classification Model (ImageNet) ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We compare AdamW and AdamCPR in vision transformer [29] training on ImageNet [30]. We choose to train the DeiT [28] model with 22M (small) and with 86M (base) parameters. We make use of the PyTorch Image Models library [31] and train with the configuration given in [28] for 300 epochs. To explore the impact of weight decay, we also train with a $10\\times$ and $0.1\\times$ the weight decay value. For CPR, we initialize with Kappa-WS ( $\\mathbf{\\Psi}^{\\times}\\ln\\mathbf{\\Psi}$ -warmup) and Kappa-IP. We observed a minor runtime increase when using CPR. For example, training the small model on 4 A100 GPUs took 14.85h for AdamW and 14.89h for AdamCPR. All relevant hyperparameters can be found in Appendix F. As seen in Table 1, AdamCPR outperforms AdamW for small and base DeiT training with both kappa initialization methods. Most notably, the hyperparameter-free regularization with Kappa-IP outperforms AdamW in both cases. However, in the base model training, Kappa-WS surpasses Kappa-IP. ", "page_idx": 6}, {"type": "text", "text": "5.3 Fine-tuning a CLIP model ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We conducted fine-tuning experiments using a CLIP model [33] on the ImageNet dataset. We used the ViT-B/32 model pre-trained by Radford et al. [33]. The model was fine-tuned for 10 epochs following the hyperparameter choices of Wortsman et al. [32] (learning rate of $3\\times10^{-5}$ , cosineannealing learning rate schedule with 500 warm-up steps) but without the special classification head initialization and the training was performed on a single GPU with a batch size of 512. We compare ", "page_idx": 6}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/0089dad9399e0de59e4bf4548da58e9847fd6f57f788dac7e2fd34db6003ba98.jpg", "table_caption": ["Table 2: Comparison of AdamW and AdamCPR for CLIP finetuning on ImageNet. We report the top-1 accuracy and follow the hyperparameters and schedule from WiSE-FT [32]. "], "table_footnote": [], "page_idx": 7}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/f73c17b763af2b439ca0d0c76d51edc3e27f0a9d160e44ada9a3d8b50fd70b2d.jpg", "img_caption": ["Figure 3: Perplexity $(\\downarrow)\\pm$ std across three random seeds of GPT2s and $\\mathrm{GPT2m}$ trained on OpenWebText with AdamW (left) and AdamCPR with Kappa-IP (middle) and AdamCPR with Kappa-WS (right). We use a learning rate warm-up of $5k$ steps. The CPR with the hyperparameter-free strategy Kappa-IP outperforms weight decay but also CPR with warm start. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "AdamW with different weight decay values to AdamCPR in different configurations, where we report the top-1 accuracy after finetuning. The results in Table 2 show that the Kappa-WS initialization also leads to better results in this finetuning setting, comparing favorably to traditional weight decay. CPR with Kappa-IS performs similarly to the best weight decay values, but again, without the need for finding a regularization hyperparameter. ", "page_idx": 7}, {"type": "text", "text": "5.4 Pretraining a Large Language Model (OpenWebText) ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We performed experiments training a GPT2 language model [34] on Openwebtext [35]. We compared AdamW on different weight decay values to AdamCPR using Kappa-WS with different warm start steps and Kappa-IP. We use a learning rate warmup for $5\\mathrm{k}$ steps $(2.5\\%$ of total training steps) followed by cosine annealing. Again, we select the warm start steps of $\\kappa$ based on the warmup steps of the learning rate and evaluate $s\\in(5k,10,20k)$ steps. We train the model sizes GPT2s and GPT2m with 124M and 354M parameters for $200\\mathbf{k}$ steps. The results are shown in Figure 3. CPR outperforms weight decay at all learning rates, in both model sizes and with both kappa initialization strategies. We also see that the Kappa-IP initialized CPR runs are less sensitive to the learning rate than weight decay $\\gamma$ . Remarkably, CPR with the hyperparameter-free initialization Kappa-IP performs best, achieving 0.2 to 0.3 better perplexity than weight decay. To illustrate the performance difference, we trained a model with weight decay for a longer schedule to get the same performance as with CPR, the result is shown in Figure 1. CPR saves up to $33\\%$ training budget on that scale. Figure 5 shows the difference in training dynamics with CPR. We find that Kappa-IP is close to the optimal warm start step for Kappa-WS but find individual starting points for different layers, see Figure G.1. We provide details of the training and hyperparameters in Appendix H. We found no runtime overhead of CPR in contrast to AdamW training GPT2s but about $\\bar{2}.5\\%$ for ${\\mathrm{GPT}}2{\\mathrm{m}}$ (see runtime analysis in Appendix I). We also evaluated AdaDecay [13], Adaptive Weight Decay (AWD) [14] and AMOS [15] in the GPT2s training setting but neither of the related methods outperforms AdamW nor AdamCPR, see results in Table H.1. ", "page_idx": 7}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/6cb5f4b64a985a967f33d904ffd4d0ab271d952121b9dab9bbce80561e5d73d8.jpg", "img_caption": ["Figure 4: Percentage of performance change before and after fineuning Mistral 7B with pubmedQA artificial data $(\\uparrow)$ with the use of AdamW (left) and AdamCPR with Kappa-WS (right). We use a learning rate warm-up of 50 steps. We see that CPR outperforms weight decay for each learning rate. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "5.5 Fine-tuning a Large Language Model ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Probably a more common task than pre-training a large language model (LLM) is to fine-tune one. Hence, we evaluate CPR in the fine-tuning of the Mistral7B large language model [36], incorporating low-rank adaptation (LoRA) [37]. Specifically, we fine-tune artificially generated biomedical questionanswering (QA) pairs from the PubMedQA dataset [38]. We fine-tune all attention and feed-forward weights using either AdamW or AdamCPR with a learning rate warm-up of 50 steps, followed by cosine annealing. We experiment with different values of weight decay and warm start steps for Kappa-WS, set at $1\\times$ , $2\\times$ , and $4\\times$ the learning rate warm-up steps. The fine-tuning was performed on four GPUs for about 1h. Each configuration is trained across three random seeds. We evaluate the LLM before and after the fine-tuning on the expert-annotated PubMedQA QA instances and report the change in answer accuracy (means and standard deviations across three random seeds) in Figure 4. The fine-tuning enhances the performance on the PubMedQA benchmark and CPR outperforms AdamW for each learning rate. As in both the ImageNet and GPT2 experiments, the best Kappa-WS value was $2\\times$ the warm-up steps (here, $50\\times2$ ). We also tested Kappa-IP but it performed worse due to the lack of an inflection point for some parameters, short learning rate warmup, and different training dynamics with LoRA. We also found that CPR helps to mitigate catastrophic forgetting, therefore we evaluate before and after finetuning on a set of benchmarks and found that CPR with some learning rates helps to reduce a performance drop e.g. on the TruthfulQA benchmark, which evaluates models\u2019 abilities to mimic human falsehoods [39], on up to $3\\%$ (see results in Figure K.1). Detailed hyperparameters and plots including standard deviations are available in Appendix K. ", "page_idx": 8}, {"type": "text", "text": "5.6 Medical Image Segmentation ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Aside from image classification, we also applied CPR to (medical) image segmentation using the nnUNet framework [40] and training with the SGD optimizer in combination with CPR with Kappa-WS. For this, we considered the tasks of Multi-Atlas Labeling Beyond the Cranial Vault (BTCV) [41] where we improve the Dice score from 83.99 to 84.23, the Heart Segmentation task of the Medical Segmentation Decathlon [42] where we improve the Dice score from 92.92 to 93.18 and the 2020 version of the Brain Tumor Segmentation challenge (BraTS) task [43] where we improve the Dice score from 76.22 to 76.65. These results show that CPR also works in combination with SGD where we replace weight decay. Training details for the task and all results are in Appendix J. ", "page_idx": 8}, {"type": "text", "text": "6 Discussion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Our extensive evaluation of Constrained Parameter Regularization (CPR) across multiple tasks underscores its effectiveness as a robust alternative to traditional weight decay. A critical aspect of CPR\u2019s success is its initialization strategy. To this end, we propose four strategies to initialize the upper bound $\\kappa$ . With our findings, we identify two strategies, Kappa-WS and Kappa-IP as prime candidates showing a strong performance, consistent across multiple tasks. The good performance of the warm-started bound Kappa-WS can be attributed to the fact that even a carefully chosen initialization of parameters does not consider the training task and data. Therefore, the actual parameter weights during training are better reflected in a warm-started bound, which also takes into account the network\u2019s depth and the varying gradient updates in deeper layers. We found that setting the CPR warm start steps $s$ to twice the learning rate warm-up steps serves as an effective initial configuration for any training setup. However in a pre-training setting, setting the upper bound based on the first inflection point of the regularization function (Kappa-IP) yields an additional advantage: It removes even the one hyperparameter present in the warm start strategy, bringing the regularization capabilities of CPR without any additional hyperparameters. Simultaneously, this strategy shows best-in-class performance in GPT2 training, seemingly even extending the range of usable learning rates on a given task. This reduces the effort in hyperparameter optimization not only for the optimal regularization but also for the optimal learning rate. CPR also changes the training dynamics, as shown in Figure 5 and Figure G.1. While both weight decay and CPR can achieve a similar final L2 regularization, the path to this norm is different. Weight decay allows for intermediate overadaptation with high L2 norms, whereas CPR controls the L2 norm throughout the entire training process. This results in a slower initial loss drop but a more consistent decay, leading to a better final performance. ", "page_idx": 8}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/a7ed0abef194fa27ff664f4da21b2e75cff6859a9d0b7cf8bd1546af2e34b2e5.jpg", "img_caption": ["GPT2s Training Dynamics of AdamW (blue) and AdamCPR (green) with Kappa-IP ", "Figure 5: The training dynamics of AdamW (blue) and AdamCPR with Kappa-IP (green) in a GPT2s training run. The upper plot shows the squared L2 norm of the first fully connected weight in the fifth layer. Below we see the gradient of the squared L2 norm regarding the training steps. After the inflection point (7400), Kappa-IP initializes kappa $\\kappa^{j}\\gets R(\\theta_{t=i}^{j})$ and starts the regularization. The third plot shows CPR\u2019s lambda enforcing the constraint. At the bottom, we see the validation loss. AdamW converges faster in the beginning of the training but CPR leads to a more linear improvement and a better final performance. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "A noted limitation of CPR is an increase in runtime by up to $6\\%$ for larger models (1.1B parameters), as detailed in Appendix I. However, for smaller models or larger batch sizes, this overhead is negligible. The benefit of CPR diminishes in scenarios where weight regularization has minimal impact, such as when training small models on large datasets with a high ratio of training samples to parameters. Future research could explore the application of CPR to even larger models and a broader range of tasks. ", "page_idx": 9}, {"type": "text", "text": "7 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Constrained Parameter Regularization (CPR) offers a significant advancement in regularization techniques, providing a robust and efficient alternative to traditional methods. By enforcing an upper bound on the regularization function, CPR integrates seamlessly with gradient-based optimizers and incurs minimal runtime overhead. Its dynamic tailoring of regularization to individual parameter matrices and reduces hyperparameter optimization by eliminating the need for a weight regularization hyperparameter in pre-training. Our four experiments demonstrate that neural networks trained using CPR outperform those with traditional weight decay. These findings highlight CPR\u2019s potential as a versatile and powerful tool for improving model performance and open promising future research. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This research was funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under grant number 417962828. We acknowledge funding by the European Union (via ERC Consolidator Grant DeepLearning 2.0, grant no. 101045765). Views and opinions expressed are however those of the author(s) only and do not necessarily reflect those of the European Union or the European Research Council. Neither the European Union nor the granting authority can be held responsible for them. ", "page_idx": 10}, {"type": "text", "text": "Funded by the European Union ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "The authors gratefully acknowledge the Gauss Centre for Supercomputing e.V. (www.gauss-centre.eu) for funding this project by providing computing time on the GCS Supercomputer JUWELS [44] at J\u00fclich Supercomputing Centre (JSC). We acknowledge the financial support of the Hector Foundation. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] I. Goodfellow, Y. Bengio, and A. Courville. Deep Learning. MIT Press, 2016. [2] William Fedus, Barret Zoph, and Noam Shazeer. Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity. Journal of Machine Learning Research, 23(120):1\u201339, 2022. [3] Stephen Hanson and Lorien Pratt. Comparing biases for minimal network construction with backpropagation. In Advances in Neural Information Processing Systems, volume 1. Morgan-Kaufmann, 1988. [4] Anders Krogh and John Hertz. A simple weight decay can improve generalization. Advances in Neural Information Processing Systems, 4, 1991.   \n[5] S. Bos and E. Chug. Using weight decay to optimize the generalization ability of a perceptron. In Proceedings of International Conference on Neural Networks (ICNN\u201996), volume 1, pages 241\u2013246 vol.1, 1996.   \n[6] I. Loshchilov and F. Hutter. Decoupled weight decay regularization. In Proceedings of the International Conference on Learning Representations (ICLR\u201919), 2019. [7] Masato Ishii and Atsushi Sato. Layer-wise weight decay for deep neural networks. In Image and Video Technology, pages 276\u2013289, Cham, 2018. Springer International Publishing.   \n[8] Aitor Lewkowycz and Guy Gur-Ari. On the training dynamics of deep networks with $l\\_2$ regularization. In Advances in Neural Information Processing Systems, volume 33, pages 4790\u20134799, 2020. [9] Juseung Yun, Byungjoo Kim, and Junmo Kim. Weight decay scheduling and knowledge distillation for active learning. In Computer Vision\u2013ECCV 2020: 16th European Conference, Glasgow, UK, August 23\u201328, 2020, Proceedings, Part XXVI 16, pages 431\u2013447. Springer, 2020.   \n[10] Mathilde Caron, Hugo Touvron, Ishan Misra, Herv\u00e9 J\u00e9gou, Julien Mairal, Piotr Bojanowski, and Armand Joulin. Emerging properties in self-supervised vision transformers. In Proceedings of the IEEE/CVF international conference on computer vision, pages 9650\u20139660, 2021.   \n[11] Maxime Oquab, Timoth\u00e9e Darcet, Th\u00e9o Moutakanni, Huy Vo, Marc Szafraniec, Vasil Khalidov, Pierre Fernandez, Daniel Haziza, Francisco Massa, Alaaeldin El-Nouby, et al. Dinov2: Learning robust visual features without supervision. arXiv preprint arXiv:2304.07193, 2023.   \n[12] Guodong Zhang, Chaoqi Wang, Bowen Xu, and Roger Grosse. Three mechanisms of weight decay regularization. In International Conference on Learning Representations, 2018.   \n[13] Kensuke Nakamura and Byung-Woo Hong. Adaptive weight decay for deep neural networks. IEEE Access, 7:118857\u2013118865, 2019.   \n[14] Mohammad Amin Ghiasi, Ali Shafahi, and Reza Ardekani. Improving robustness with adaptive weight decay. Advances in Neural Information Processing Systems, 36, 2024.   \n[15] Ran Tian and Ankur P Parikh. Amos: An adam-style optimizer with adaptive weight decay towards model-oriented scale. arXiv preprint arXiv:2210.11693, 2022.   \n[16] Tim Salimans and Durk P Kingma. Weight normalization: A simple reparameterization to accelerate training of deep neural networks. volume 29, 2016.   \n[17] Ilya Loshchilov. Weight norm control. arXiv preprint arXiv:2311.11446, 2023.   \n[18] Ziming Liu, Eric J Michaud, and Max Tegmark. Omnigrok: Grokking beyond algorithmic data. In The Eleventh International Conference on Learning Representations, 2023.   \n[19] John Platt and Alan Barr. Constrained differential optimization. In Advances in Neural Information Processing Systems, volume 0, 1987.   \n[20] Danilo Jimenez Rezende and Fabio Viola. Taming vaes. arXiv preprint arXiv:1810.00597, 2018.   \n[21] Simon Kohl, Bernardino Romera-Paredes, Clemens Meyer, Jeffrey De Fauw, Joseph R Ledsam, Klaus Maier-Hein, SM Eslami, Danilo Jimenez Rezende, and Olaf Ronneberger. A probabilistic u-net for segmentation of ambiguous images. Advances in Neural Information Processing Systems, 31, 2018.   \n[22] J\u00f6rg Franke, Frederic Runge, and Frank Hutter. Probabilistic transformer: Modelling ambiguities and distributions for rna folding and molecule design. Advances in Neural Information Processing Systems, 35: 26856\u201326873, 2022.   \n[23] Dimitri P Bertsekas. Constrained Optimization and Lagrange Multiplier Methods. Athena Scientific, 1996. ISBN 1886529043.   \n[24] Jorge Nocedal and Stephen J. Wright. Numerical Optimization. Springer, New York, NY, USA, 2e edition, 2006.   \n[25] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In Proceedings of the International Conference on Computer Vision and Pattern Recognition (CVPR\u201916), pages 770\u2013778, 2016.   \n[26] A. Krizhevsky. Learning multiple layers of features from tiny images. Technical report, University of Toronto, 2009.   \n[27] Dan Hendrycks and Thomas Dietterich. Benchmarking neural network robustness to common corruptions and perturbations. In International Conference on Learning Representations, 2018.   \n[28] Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, and Herv\u00e9 J\u00e9gou. Training data-efficient image transformers & distillation through attention. In International Conference on Machine Learning, pages 10347\u201310357. PMLR, 2021.   \n[29] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale. In International Conference on Learning Representations, 2020.   \n[30] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 248\u2013255. IEEE, 2009.   \n[31] Ross Wightman. Pytorch image models. https://github.com/rwightman/pytorch-image-models, 2019.   \n[32] Mitchell Wortsman, Gabriel Ilharco, Jong Wook Kim, Mike Li, Simon Kornblith, Rebecca Roelofs, Raphael Gontijo Lopes, Hannaneh Hajishirzi, Ali Farhadi, Hongseok Namkoong, et al. Robust fine-tuning of zero-shot models. In IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 7959\u20137971, 2022.   \n[33] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, et al. Learning transferable visual models from natural language supervision. In International Conference on Machine Learning, pages 8748\u20138763. PMLR, 2021.   \n[34] A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, and I. Sutskever. Language models are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.   \n[35] Aaron Gokaslan and Vanya Cohen. Openwebtext corpus. http://Skylion007.github.io/ OpenWebTextCorpus, 2019.   \n[36] Albert Q Jiang, Alexandre Sablayrolles, Arthur Mensch, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Florian Bressand, Gianna Lengyel, Guillaume Lample, Lucile Saulnier, et al. Mistral 7b. arXiv preprint arXiv:2310.06825, 2023.   \n[37] Edward J Hu, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, Weizhu Chen, et al. Lora: Low-rank adaptation of large language models. In International Conference on Learning Representations, 2021.   \n[38] Qiao Jin, Bhuwan Dhingra, Zhengping Liu, William Cohen, and Xinghua Lu. PubMedQA: A dataset for biomedical research question answering. In Kentaro Inui, Jing Jiang, Vincent Ng, and Xiaojun Wan, editors, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 2567\u20132577. Association for Computational Linguistics, Nov 2019.   \n[39] Stephanie Lin, Jacob Hilton, and Owain Evans. Truthfulqa: Measuring how models mimic human falsehoods. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 3214\u20133252, 2022. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "[40] Fabian Isensee, Paul F Jaeger, Simon AA Kohl, Jens Petersen, and Klaus H Maier-Hein. nnu-net: a self-configuring method for deep learning-based biomedical image segmentation. Nature methods, 18(2): 203\u2013211, 2021. ", "page_idx": 12}, {"type": "text", "text": "[41] Bennett Landman, Zhoubing Xu, J Igelsias, Martin Styner, T Langerak, and Arno Klein. Miccai multi-atlas labeling beyond the cranial vault\u2013workshop and challenge. In Proc. MICCAI Multi-Atlas Labeling Beyond Cranial Vault\u2014Workshop Challenge, volume 5, page 12, 2015.   \n[42] Michela Antonelli, Annika Reinke, Spyridon Bakas, Keyvan Farahani, AnnetteKopp-Schneider, Bennett A Landman, Geert Litjens, Bjoern Menze, Olaf Ronneberger, Ronald M Summers, Bram van Ginneken, Michel Bilello, Patrick Bilic, Patrick F Christ, Richard K G Do, Marc J Gollub, Stephan H Heckers, Henkjan Huisman, William R Jarnagin, Maureen K McHugo, Sandy Napel, Jennifer S Goli Pernicka, Kawal Rhode, Catalina Tobon-Gomez, Eugene Vorontsov, Henkjan Huisman, James A Meakin, Sebastien Ourselin, Manuel Wiesenfarth, Pablo Arbelaez, Byeonguk Bae, Sihong Chen, Laura Daza, Jianjiang Feng, Baochun He, Fabian Isensee, Yuanfeng Ji, Fucang Jia, Namkug Kim, Ildoo Kim, Dorit Merhof, Akshay Pai, Beomhee Park, Mathias Perslev, Ramin Rezaiifar, Oliver Rippel, Ignacio Sarasua, Wei Shen, Jaemin Son, Christian Wachinger, Liansheng Wang, Yan Wang, Yingda Xia, Daguang Xu, Zhanwei Xu, Yefeng Zheng, Amber L Simpson, Lena Maier-Hein, and M Jorge Cardoso. The Medical Segmentation Decathlon. Nature Communications, 13(1):4128, 2022.   \n[43] Bjoern H. Menze, Andras Jakab, Stefan Bauer, Jayashree Kalpathy-Cramer, Keyvan Farahani, Justin Kirby, Yuliya Burren, Nicole Porz, Johannes Slotboom, Roland Wiest, Levente Lanczi, Elizabeth Gerstner, Marc-Andr\u00e9 Weber, Tal Arbel, Brian B. Avants, Nicholas Ayache, Patricia Buendia, D. Louis Collins, Nicolas Cordier, Jason J. Corso, Antonio Criminisi, Tilak Das, Herv\u00e9 Delingette, \u00c7a\u02d8gatay Demiralp, Christopher R. Durst, Michel Dojat, Senan Doyle, Joana Festa, Florence Forbes, Ezequiel Geremia, Ben Glocker, Polina Golland, Xiaotao Guo, Andac Hamamci, Khan M. Iftekharuddin, Raj Jena, Nigel M. John, Ender Konukoglu, Danial Lashkari, Jos\u00e9 Ant\u00f3nio Mariz, Raphael Meier, S\u00e9rgio Pereira, Doina Precup, Stephen J. Price, Tammy Riklin Raviv, Syed M. S. Reza, Michael Ryan, Duygu Sarikaya, Lawrence Schwartz, Hoo-Chang Shin, Jamie Shotton, Carlos A. Silva, Nuno Sousa, Nagesh K. Subbanna, Gabor Szekely, Thomas J. Taylor, Owen M. Thomas, Nicholas J. Tustison, Gozde Unal, Flor Vasseur, Max Wintermark, Dong Hye Ye, Liang Zhao, Binsheng Zhao, Darko Zikic, Marcel Prastawa, Mauricio Reyes, and Koen Van Leemput. The multimodal brain tumor image segmentation benchmark (brats). IEEE Transactions on Medical Imaging, 34(10):1993\u20132024, 2015.   \n[44] J\u00fclich Supercomputing Centre. JUWELS Cluster and Booster: Exascale Pathfinder with Modular Supercomputing Architecture at Juelich Supercomputing Centre. Journal of large-scale research facilities, 7 (A138), 2021.   \n[45] Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, and Christopher R\u00e9. FlashAttention: Fast and memoryefficient exact attention with IO-awareness. In Advances in Neural Information Processing Systems, 2022.   \n[46] Jianlin Su, Yu Lu, Shengfeng Pan, Bo Wen, and Yunfeng Liu. Roformer: Enhanced transformer with rotary position embedding, 2021.   \n[47] Mykola Novik. torch-optimizer \u2013 collection of optimization algorithms for PyTorch., 1 2020.   \n[48] L\u00e9on Bottou and Olivier Bousquet. The tradeoffs of large scale learning. Advances in Neural Information Processing Systems, 20, 2007.   \n[49] Yuanfeng Ji, Haotian Bai, Jie Yang, Chongjian Ge, Ye Zhu, Ruimao Zhang, Zhen Li, Lingyan Zhang, Wanling Ma, Xiang Wan, et al. Amos: A large-scale abdominal multi-organ benchmark for versatile medical image segmentation. arXiv preprint arXiv:2206.08023, 2022.   \n[50] Tom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. Language models are few-shot learners. 2020.   \n[51] Dan Hendrycks, Collin Burns, Steven Basart, Andy Zou, Mantas Mazeika, Dawn Song, and Jacob Steinhardt. Measuring massive multitask language understanding. In International Conference on Learning Representations, 2020.   \n[52] Yonatan Bisk, Rowan Zellers, Jianfeng Gao, Yejin Choi, et al. Piqa: Reasoning about physical commonsense in natural language. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 34, pages 7432\u20137439, 2020. ", "page_idx": 12}, {"type": "text", "text": "Appendix ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "A Derivation of the Lagrange multiplier update ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "For simplicity, we consider a single constraint. Note that multiple constraints can be addressed separately as the optimization problem would be separable in the respective $\\lambda^{j}$ . We need to solve ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\operatorname*{maximize}_{\\lambda\\geq0}f(\\pmb{x})+\\lambda\\cdot c(\\pmb{x})-\\frac{1}{2\\mu}(\\lambda-\\lambda_{t})^{2}.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "The optimal point of this problem is equivalent to the optimal point of ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\operatorname*{minimize}_{\\lambda}-f(\\pmb{x})-\\lambda\\cdot c(\\pmb{x})+\\frac{1}{2\\mu}(\\lambda-\\lambda_{t})^{2}\\quad\\mathrm{s.t.}\\quad-\\lambda\\leq0.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "To find candidates for optimal points, we need to solve the Karush\u2013Kuhn\u2013Tucker (KKT) system with the Lagrange function $\\mathcal{L}(\\lambda,\\psi)$ and the Lagrange multiplier $\\psi$ ", "page_idx": 13}, {"type": "equation", "text": "$$\n{\\mathcal L}(\\lambda,\\psi)=-f({\\pmb x})-\\lambda\\cdot c({\\pmb x})+\\frac{1}{2\\mu}(\\lambda-\\lambda_{t})^{2}-\\psi\\cdot\\lambda\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Which leads to the KKT system ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{c l c r}{{\\nabla_{\\lambda}{\\mathcal{L}}(\\lambda,\\psi)=0\\iff0=-c({\\pmb x})+{\\frac{1}{\\mu}}(\\lambda-\\lambda_{t})-\\psi}}\\\\ {{\\nabla_{\\psi}{\\mathcal{L}}(\\lambda,\\psi)\\leq0\\iff0\\geq-\\lambda}}\\\\ {{\\lambda\\cdot\\psi=0}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "According to the complementary conditions in equation 3, the constraint is either active, hence $\\lambda=0$ and $\\psi\\geq0$ or inactive, such that $\\lambda>0$ , and consequently, $\\psi=0$ . ", "page_idx": 13}, {"type": "text", "text": "Case: $\\lambda=0$ and $\\psi\\geq0$ ", "page_idx": 13}, {"type": "text", "text": "Here, $\\lambda=0$ (by assumption), and $\\psi$ is given by ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{\\nabla_{\\lambda}{\\mathcal{L}}(\\lambda,\\psi)=0\\iff0=-c({\\pmb x})+\\displaystyle\\frac{1}{\\mu}(0-\\lambda_{t})-\\psi}}\\\\ {{\\psi=-c({\\pmb x})-\\displaystyle\\frac{\\lambda_{t}}{\\mu}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Since we require $\\psi\\geq0$ for a KKT point, (note that $\\mu>0$ ) ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{c}{0\\leq\\psi=-c({\\pmb x})-\\displaystyle\\frac{\\lambda_{t}}{\\mu}}\\\\ {\\iff0\\leq-\\mu\\cdot c({\\pmb x})-\\lambda_{t}}\\\\ {\\iff0\\geq\\lambda_{t}+\\mu\\cdot c({\\pmb x})}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Consequently, $\\lambda=0$ is a candidate for the optimal point only when $0\\geq\\lambda_{t}+\\mu\\cdot c(\\pmb{x})$ . ", "page_idx": 13}, {"type": "text", "text": "Case: $\\lambda>0$ and $\\psi=0$ (inactive constraint) ", "page_idx": 13}, {"type": "text", "text": "For this case we get ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{\\nabla_{\\lambda}{\\mathcal{L}}(\\lambda,\\psi)=0=-c({\\pmb x})+\\displaystyle\\frac{1}{\\mu}(\\lambda-\\lambda_{t})-0}}\\\\ {{0=-\\mu\\cdot c({\\pmb x})+\\lambda-\\lambda_{t}}}\\\\ {{\\lambda=\\lambda_{t}+\\mu\\cdot c({\\pmb x})}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Due to the geometry of the problem (quadratic with bound constraint), $\\lambda=0$ is the optimal solution if the constraint is active, i.e., if $\\psi\\geq0$ , which is the case if $0\\geq\\lambda_{t}+\\mu\\cdot c(\\pmb{x})$ . Consequently, the optimal solution is given by ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\lambda^{\\star}=(\\lambda_{t}+\\mu\\cdot c({\\pmb x}))^{+}.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Plugging this into $\\hat{F}({\\pmb x},\\lambda_{t},{\\mu})$ , we get ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\hat{F}(\\pmb{x},\\lambda_{t},\\mu)=\\left\\{\\begin{array}{l l}{f(\\pmb{x})+c(\\pmb{x})(\\lambda_{t}+\\frac{\\mu}{2}c(\\pmb{x})),}&{\\mathrm{if}\\quad\\lambda_{t}+\\mu\\cdot c(\\pmb{x})\\geq0}\\\\ {f(\\pmb{x})-\\frac{1}{2\\mu}\\lambda_{t}^{2},}&{\\mathrm{else}}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "And the gradient with respect to $\\textbf{\\em x}$ is ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\nabla_{x}\\hat{F}(x,\\lambda_{t},\\mu)=\\left\\{\\nabla_{x}f(x)+\\nabla_{x}c(x)(\\lambda_{t}+\\mu\\cdot c(x)),\\begin{array}{l l}{\\mathrm{if}}&{\\lambda_{t}+\\mu\\cdot c(x)\\geq0}\\\\ {\\mathrm{else}}&{\\mathrm{else}}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Or more compactly by using equation 4 ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\nabla_{x}\\hat{F}({\\pmb x},\\lambda_{t},\\mu)=\\nabla_{\\pmb x}f({\\pmb x})+\\nabla_{\\pmb x}c({\\pmb x})\\cdot\\boldsymbol\\lambda^{\\star}.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "B The CPR Algorithm with Kappa-WS ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Algorithm 2 Optimization with constrained parameter regularization (CPR) and $\\mathtt{K a p p a-W S}$ ", "page_idx": 14}, {"type": "text", "text": "Require: Loss Function $L(\\pmb\\theta,X,\\pmb y)$ with parameters $\\pmb{\\theta}$ , and data $\\textstyle D=\\{(X_{n},\\pmb{y}_{n})\\}_{n=0}^{N}$ ", "page_idx": 14}, {"type": "text", "text": "Require: Hyperparameters: Learning rate $\\bar{\\eta}\\in\\mathbb{R}^{+}$ , Lagrange multiplier update rate $\\mu\\in\\mathbb{R}^{+}$ , starting step $s$ for CBR. ", "page_idx": 14}, {"type": "text", "text": "Require: Optimizer $\\mathrm{{Opt}(\\cdot)}$ for minimization, Regularization function $R(\\pmb\\theta)$ (e.g. L2-norm)   \n1: # Initialization   \n2: $t\\leftarrow0$   \n3: $\\theta_{t}\\leftarrow\\mathrm{Initialize}(L(\\cdot))$   \n4: $\\lambda_{t}^{j}\\leftarrow0$ for $j=1,\\cdot\\cdot\\cdot,J$   \n5: $\\kappa^{j}\\gets\\infty\\;j=1,\\cdots\\,,J$   \n6: # Training   \n7: for $X_{t},y_{t}\\sim\\mathcal{D}$ do   \n8: $\\pmb{\\theta}_{t+1}\\leftarrow\\pmb{\\theta}_{t}+\\mathrm{Opt}(L(\\pmb{\\theta}_{t},\\pmb{X}_{t},\\pmb{y}_{t}),\\eta)$ \u25b7Classic parameter update using, e.g., Adam.   \n9: for each regularized parameter group $\\mathbf{\\boldsymbol{\\theta}}_{t}^{j}$ in $\\pmb\\theta_{t}$ do   \n10: $\\begin{array}{r l}&{\\lambda_{t+1}^{j}\\leftarrow\\left(\\lambda_{t}^{j}+\\mu\\cdot(R(\\pmb{\\theta}_{t}^{j})-\\kappa^{j})\\right)^{+}}\\\\ &{\\pmb{\\theta}_{t+1}^{j}\\leftarrow\\pmb{\\theta}_{t+1}^{j}-\\nabla_{\\pmb{\\theta}^{j}}R(\\pmb{\\theta}_{t}^{j})\\cdot\\lambda_{t+1}^{j}}\\end{array}$   \n11:   \n12: if $t=s$ then \u25b7Kappa-kIs initialization, see Section 4.3.   \n13: $\\kappa^{j}\\leftarrow R(\\pmb{\\theta}_{t}^{j})$   \n14: end if   \n15: end for   \n16: t \u2190t + 1   \n17: end for ", "page_idx": 14}, {"type": "text", "text": "C Experiments on the Sensitivity of the Update Rate $\\mu$ ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We analyze the sensitivity of the update rate $\\mu$ in CPR with experiments on ResNet18 trained on the CIFAR100 and GPT2s trained on OpenWebText. For the ResNet18 experiments, we consider update rates from $\\mu=0.01$ to $\\mu=10$ and apply two kappa initialization methods,Kappa- ${\\boldsymbol{\\cdot}}\\,{\\boldsymbol{\\mathtt{k}}}{\\boldsymbol{\\mathsf{I}}}_{0}$ and Kappa-WS. As shown in Figure C.1 we see no significant impact of $\\mu$ on the performance. We report the mean percentage of correct labels across three random seeds. We also performed short-runtime experiments with GPT2s and update rates of $\\mu\\in\\{0.01,0.1,1,10\\}$ . and observe very similar results, see Table C.1. To get an impression of how $\\mu$ impacts $\\lambda$ and therefore the squared L2 norm in the weight matrices with the use of CPR, we plotted the squared L2 norm and $\\lambda$ for three weight matrices during the training in Figure C.2. We found no impact on the stability of the squared L2 norm despite the difference in the magnitude of the $\\lambda$ for different $\\mu$ values. ", "page_idx": 15}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/62a48e7bb191e721f1fd2b19b507c7562034ef6adf4013ddb24a125682998f3c.jpg", "img_caption": ["Figure C.1: The Figure shows the percentage of correct labels of the ResNet18 trained on the CIFAR100 with the use of $\\mathtt{K a p p a-k I_{0}}$ (left), AdamCPR (Kappa-WS) (right) with different update rates $\\mu$ . The elements in the heat map are experiments with different learning rates and each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. The experiment shows that the AdamCPR regularization is not sensitive to the choice of the $\\mu$ parameter. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Table C.1: Comparison of different values for the update rate $\\mu$ of AdamCPR. We run experiments with GPT2s with 50k total steps, a learning rate warmup of $2.5\\mathrm{k}$ steps, and a kappa warm start of $5\\mathrm{k}$ steps. ", "page_idx": 15}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/fe31919616d47283bbb1f192067e941eadc5047b44f17e8e02041564ae862a3d.jpg", "table_caption": [], "table_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/046cf96c9c578a296a6fcee12f871d1bdb1113afb2420f372c7f9aeed8586bf4.jpg", "img_caption": ["Figure C.2: A comparison of different $\\lambda$ update rates $\\mu$ in the training of a GPT2s model. We see three weight matrices during the training with AdamCPR. We also see how $\\lambda$ regulates the constraint of the bound on the squared L2 norm. The bottom two plots show the training and validation loss. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "D Adaptive Bounds ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "With fixed bounds $\\kappa^{j}$ , some parameter matrices $\\theta^{j}$ , for which $\\lambda_{t}^{j}=0$ will not be regularized. While this can be beneficial, CPR can also be used to apply continuous pressure similar to weight decay. For this, the bounds $\\kappa^{j}$ of parameter matrices $\\theta^{j}$ with $\\lambda^{j}=0$ can be set to the current value of the constraint function $\\kappa_{t+1}^{j}\\leftarrow c(\\pmb{\\theta}_{t}^{j})$ . Such an adaption guarantees that each parameter matrix is always exposed to some regularization. This should result in a gradual reduction of the bounds $\\kappa^{j}$ throughout training without exerting excessive pressure on the optimization process. In our experiments, we refer to the usage of adaptive bounds as AdaCPR. ", "page_idx": 17}, {"type": "text", "text": "This contrasts with weight decay, where continuous pressure is applied to enhance generalization throughout the training. To emulate the continuous pressure of weight decay, we propose an adaptive mechanism to adjust the upper regularization bound during training. This can be achieved by leveraging existing states. Specifically, the value of $\\lambda^{j}$ offers insights into constraint violations. When $\\lambda^{j}=\\breve{0}$ , the constraint $c_{j}(\\pmb\\theta)$ can be regarded as inactive. In this case, we may consider adjusting its bound $\\kappa^{j}$ to align with the current constraint value of $c(\\pmb\\theta_{j})$ . To implement these adaptive bounds, we add a conditional update rule for $\\kappa^{j}$ after our CPR update. It updates the upper bound for each parameter matrix $\\theta_{t}^{j}$ individually by ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\kappa_{t+1}^{j}\\leftarrow\\left\\{R(\\theta_{t}^{j})\\quad\\mathrm{if}\\;\\lambda_{t}^{j}=0\\;\\mathrm{and}\\;\\lambda_{t-1}^{j}>0\\right.\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\lambda_{t-1}^{j}\\,>\\,0$ indicates that the upper bound was previously violated and $c_{j}(\\theta^{j})$ was active. Consequently, this enables a gradual reduction of the bounds $\\kappa^{j}$ throughout training without exerting excessive pressure on the optimization process. Please find AdaCPR in Algorithm 3 below. ", "page_idx": 17}, {"type": "text", "text": "Algorithm 3 Optimization with adaptive bound constrained parameter regularization Ada CPR ", "page_idx": 17}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/d26f19e2ddaa61a3001fd4aff24eec604d94c5b68dd4bc745741b7bb444ff45c.jpg", "img_caption": [], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "The experimental results in Figure E.1 also show that the adaptation of the upper bound during the training is not beneficial. While it does not harm the performance, it also does not lead to a substantial improvement. We therefore do not use it to keep our method as simple as possible. ", "page_idx": 17}, {"type": "text", "text": "E Experiments on Image Classification (CIFAR100) ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "For the $\\kappa$ initialization Kappa-K, we use a range of $\\kappa=[0.005,\\ldots,0.16]$ , for $\\mathtt{K a p p a-k I_{0}}$ a range of $k=[4,\\dots,256]$ , and for Kappa-WS a range of $s=[250,\\dotsc,4000]$ steps. We use a learning rate warmup of 500 steps followed by a closing annealing. This is $2.5\\%$ of the total training steps (20k). For a detailed list of training hyperparameters, we refer the reader to Table E.1. ", "page_idx": 18}, {"type": "text", "text": "We found that initializing with Kappa- ${\\tt k I}_{0}$ performs better than selecting a uniform $\\kappa$ in Kappa-K. This may be explained by the value of the regularization function depending on the size of the jointly regularized parameter matrix and initialization method. The warm start $\\kappa$ initialization method, Kappa-WS, performed the best. The best configuration with CPR outperforms weight decay and the choice of hyperparameters seems to be more robust. ", "page_idx": 18}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/612d9b5beb4af69100721a91cc8f05d9f46347654441295112935ebb72c435e1.jpg", "table_caption": ["Table E.1: Hyperparameters of the ResNet18 on CIFAR100 experiment. "], "table_footnote": [], "page_idx": 18}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/a5456c47fcbbd5891c18424c2f93c039c730ab565fe724630b77d8750c6617a4.jpg", "img_caption": ["Figure E.1: Percentage of correct labels of the ResNet18 trained on the CIFAR100 with use of Adam with CPR (left) and AdaCPR (right) with use of the three different initialization techniques from Section 4.3, from top to bottom: Kappa-K, Kappa- ${\\tt k I}_{0}$ , and Kappa-WS. The elements in the heat map are experiments with different learning rates and regularization hyperparameters. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. "], "img_footnote": [], "page_idx": 19}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/f158b9fa077b01403ebae37feae3e88b1ba48a63c66f79360d188298fbc84a72.jpg", "img_caption": [], "img_footnote": [], "page_idx": 20}, {"type": "text", "text": "Figure E.2: Percentage of correct labels of the ResNet18 trained on the CIFAR100 with the use of AdamCPR using L2 regularization measure (left) and standard deviation as regularization measure (right). The elements in the heat map are experiments with different learning rates and warm start steps (s of Kappa-WS). Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. ", "page_idx": 20}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/15a5bf2c7e6fcda2ff018801a43e2d7034a9786890263d07dba4165c36787033.jpg", "img_caption": ["Figure E.3: Comparison of AdamW and AdamCPR with different learning rate warm-up steps. The Figure shows the percentage of correct labels of the ResNet18 trained on the CIFAR100 with the use of AdamW (left side), AdamCPR (Kappa-IP) (middle), and AdamCPR (Kappa-WS) (right side) with learning rate warm-up steps between 250 and 1000 steps. The elements in the heat map are experiments with different learning rates and regularization hyperparameters. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/0ae0a90a35794efcd3274f878b3b81c58c6e20b360615fc819850cfc21acb58b.jpg", "img_caption": [], "img_footnote": [], "page_idx": 22}, {"type": "text", "text": "Figure E.4: Comparison of AdamW, AdamCPR, and weight decay scheduling similar to [10, 11]. The Figure shows the percentage of correct labels of the ResNet18 trained on the CIFAR100 with the use of AdamW (top left), AdamCPR (Kappa-WS) (top right), and Adam with weight decay scheduling. We evaluated the task with cosine decreasing weight decay to 0.1 and 0.01 times the initial weight decay value and with cosine increasing weight decay to 10 and 100 times the initial weight decay value. The elements in the heat map are experiments with different learning rates and regularization hyperparameters. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. It should be mentioned that Yun et al. [9] also performed weight decay scheduling on CIFAR100 with the use of a ResNet18. Since their code was not published, we point to Figure 3 of their experimental results, where an accuracy of around $60\\%$ was reported, which is below our AdamW baseline. ", "page_idx": 22}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/c99bce2a0ba8e78e2c2b0cca81d687519e957d277eb1853c21ed99b92d440ceb.jpg", "img_caption": ["Figure E.5: Percentage of correct labels of the ResNet18 trained on the CIFAR100-C with use of AdamW (left), AdamCPR with Kappa-IP (middle) and AdamCPR with Kappa-WS (right). The elements in the heat map are experiments with different learning rates and regularization hyperparameters. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. We see that AdamCPR outperforms AdamW which could indicate that CPR leads to a more robust optimization. We see that AdamCPR performs better than AdamW with Kappa-WS but not with Kappa-IP. Kappa-IP does not fail and performs better than the average weight decay performance. None of the optimizer and hyperparameter configurations lead to an outstanding performance on this task, we wouldn\u2019t claim that CPR is particularly good for noisy data. "], "img_footnote": [], "page_idx": 23}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/ac9dc5a5afb57919b133d92e8151f16fda923ac8a8208118f06b1456bc40a520.jpg", "img_caption": ["Figure E.6: Percentage of correct labels of the ResNet18 trained on the CIFAR100 with use of SGD with weight decay (left), SGD with CPR and Kappa-IP (middle) and SGD with CPR and Kappa-WS (right). The elements in the heat map are experiments with different learning rates and regularization hyperparameters. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. "], "img_footnote": [], "page_idx": 23}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/5b80c92e4471f4f58311ec12579a7c44de414e3e118ced81b13419497a2b9134.jpg", "img_caption": ["Figure E.7: Comparison of AdamW, AdamCPR, and Adam with AdaDecay [13]. The Figure shows the percentage of correct labels of the ResNet18 trained on the CIFAR100 with the use of AdamW (top left), AdamCPR (Kappa-WS) (top right), and Adam with AdaDecay with different (1.0, 2.0, 4.0, 8.0) values for the alpha hyperparameter in AdaDecay. The elements in the heat map are experiments with different learning rates and regularization hyperparameters. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. "], "img_footnote": [], "page_idx": 24}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/13cddca97b8cbc7ce420b8a7e6837c4bf4d858e77f12b1b735ebf0b7d521afce.jpg", "img_caption": ["Figure E.8: Percentage of correct labels of the ResNet18 trained on the CIFAR100 with AdamW, AdamCPR, AdaDecay [13], AWD [14], AMOS [15], and Rescaling. We use different values of weight decay for AdamW, AdaDecay, AWD, and AMOS. For Adam with Rescaling, we use different factors of the initial total weight norm. AdamCPR uses Kappa-WS. We use a learning rate warm-up of 500 steps and the best Kappa-WS value is $2\\times$ the warm-up steps. Each element is colored according to the mean accuracy of three random seeds and the numbers are the mean accuracy and standard deviation of the experiments. "], "img_footnote": [], "page_idx": 25}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/f7f1f695f7e8dbb470b5b98232a10e4f0b4f161b74d089b98f32eb8df781104f.jpg", "table_caption": ["Table F.1: Hyperparameters for the DeiT small experiments on ImageNet. "], "table_footnote": [], "page_idx": 26}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/ed14967114d10cffa9c1f0f63cd15ae9251b0a909ad82e0178cd8876895bd069.jpg", "table_caption": ["Table F.2: Hyperparameters for the DeiT base experiments on ImageNet. "], "table_footnote": [], "page_idx": 26}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/56bbdb9dec0cacd35f7922c36133ac843c90c19ddab1799fca349148fc5a2229.jpg", "img_caption": [], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "Figure G.1: The training dynamics of AdamW and AdamCPR with Kappa-IP of one layer in a GPT2s training run. The upper plot shows the squared L2 norm of the attention weight in the first layer. Below we see the gradient of the squared L2 norm regarding the training steps, after the first inflection point Kappa-IP initializes kappa and starts the regularization. The third plot shows CPR\u2019s lambda enforcing the constraint on kappa. The six plots below show the dynamics for the first weight matrix of the feed-forward block in the 5th layer and the second weight matrix of the feed-forward block in the 10th layer. At the bottom, we see the validation loss. We see that Kappa-IP initializes different layers at different time steps, e.g. layer 5 FC1 before layer 1 attention weights. While weight decay leads to a steady increase of the squared L2 norm for the first quarter of the training, CPR regularizes much earlier and avoids over-adaption. AdamW converges faster in the beginning of the training but CPR leads to a more linear improvement and a better final performance. ", "page_idx": 27}, {"type": "text", "text": "H Experiments on Language Modelling ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "For an efficient implementation, we use flash attention [45] and rotary position embedding [46]. The complete hyperparameters can be found in Appendix H. The GPT2s and GPT2m models are trained on 8 A100 GPUs up to 28h. A detailed runtime analysis can be found in Appendix I ", "page_idx": 28}, {"type": "text", "text": "Table H.1: Comparison of AdamW, AdamCPR, AdaDecay, AWD, and AMOS on GPT2s trained on OpenWebText. For AdamW and AdamCPR we report the mean across three random seeds. For the other methods, only a single seed is reported. The number next to the optimizer name is the weight decay coefficient $\\gamma$ except for AdamCPR, here it is the number of warm start steps $s$ for Kappa-WS. ", "page_idx": 28}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/3d7ad3a9b5d38e15134d896e49283d5a9b525f780930704b3ee76e9777cab976.jpg", "table_caption": [], "table_footnote": [], "page_idx": 28}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/d4c9e28e0d304c1331f4a9312058e358782ae0d21aea1c5b7c1d7a76ff30ee9a.jpg", "table_caption": ["Table H.2: Hyperparameters of the language modeling task (GPT2 and Openwebtext). "], "table_footnote": [], "page_idx": 29}, {"type": "text", "text": "I Runtime Analysis on LLM training ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "To analyze the runtime in more detail, we measured the runtime per step of different regularization techniques on different GPT2 model sizes (see Table I.1). For AdamW we use the PyTorch 2.1 default implementation, for AdamCPR we adapt the AdmW implementation of PyTorch with the implementation described in Algorithm 1, for AWD and AdaDecay exists no open source implementation and we implemented it based on the PyTorch Adam class but without \"for_each\" optimization, and for AMOS we used the implementation form the pytroch-optimizer package [47]. We compare the runtime on a node with 4 A100 GPUs and report the mean time per training step across two random seeds and 3000 steps per experiment. In Table I.2 we compare the runtime with a batch size of 1 and in Table I.3 we repost the runtime with the maximal possible batch size on a 40GB A100 (in samples steps of 4). ", "page_idx": 30}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/2fbd8326d240151cbf5fc5080a28254f8839b493a2f5cb432d1393c877add6ec.jpg", "table_caption": ["Table I.1: GPT-2 Model Sizes and Parameter Counts "], "table_footnote": [], "page_idx": 30}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/d28b528efcfecfb52054f648e29cc9c4f0b378b5f90832159b474a1bea6d52a0.jpg", "table_caption": ["Table I.2: Comparison of optimizer and regularizer runtime per step (batch size ${}^{=1}$ ) across different GPT2 model sizes. Percentages indicate the increase in runtime compared to AdamW. The time is calculated as the mean time per training step across two random seeds and 3000 steps per experiment. "], "table_footnote": [], "page_idx": 30}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/65f25b6e6ee52f1eabc920bb62aa9b4edc204bbd0e35c8d62b11e108c2a879ae.jpg", "table_caption": ["Table I.3: Comparison of optimizer runtime per step at maximum batch size across different GPT2 model sizes. Percentages indicate the increase in runtime compared to AdamW. The time is calculated as the mean time per training step across two random seeds and 3000 steps per experiment. "], "table_footnote": [], "page_idx": 30}, {"type": "text", "text": "The runtime comparison across various GPT2 models shows that AdamCPR closely matches AdamW\u2019s efficiency, particularly at larger batch sizes where its runtime increase becomes minimal or even slightly better. In contrast, Adam AdaDecay, AWD, and AMOS significantly increase runtime, particularly in larger models and batch sizes. ", "page_idx": 30}, {"type": "text", "text": "However, since not all operations for CPR are implemented in a \"for_each\" optimized manner, CPR\u2019s runtime could benefit from an additional CUDA-optimized implementation. ", "page_idx": 30}, {"type": "text", "text": "J Experiments on Medical Image Segmentation ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "To demonstrate the effectiveness of the proposed CPR approach where using SGD, we also evaluate it in the context of medical image segmentation. We test CPR on four segmentation benchmarks. First, with the Adam optimizer on the Multi-Atlas Labeling Beyond the Cranial Vault (BTCV) [41] task, the Heart Segmentation task of the Medical Segmentation Decathlon [42] and the 2020 version of the Brain Tumor Segmentation challenge (BraTS) task [43]. ", "page_idx": 31}, {"type": "text", "text": "Here, we make use of the data pipeline and network architectures following the nnU-Net framework [40], which is regarded as the state-of-the-art framework for medical image segmentation. We implement a training schedule with a total of $25\\mathbf{k}$ steps (for the Heart and BraTS tasks) and $125\\mathbf{k}$ steps for BTCV. We introduce a learning rate warmup of $2\\mathbf{k}$ steps $(8\\%)$ , followed by a polynomial annealing, see all hyperparameters in Appendix J. We run each experiment on one consumer GPU for up to 2 days. We present the results in Table J.1, where different weight decay configurations in AdamW are evaluated to AdamCPR with Kappa-WS initialization. We report the commonly used Dice scores, averaged across cross-validation folds. These results indicate that CPR surpasses even the best AdamW results. We note that applying Kappa-WS initialization too late can cause instabilities due to weak regularization. ", "page_idx": 31}, {"type": "text", "text": "Since nnU-Net by default uses the SGD optimizer [48], we also test CPR to constrain optimization with the SGD optimizer in this context. As a more recent benchmark of segmentation performance, we report experiments on the Multi-Modality Abdominal Multi-Organ Segmentation Challenge 2022 [49]. This benchmark represents a very competitive segmentation challenge environment where differences as small as 0.1 in Dice score can decide on challenge winners. As the experiments in Table J.1 suggest that on average 1k warm start steps, after the learning rate warmup leads to the best results, we resort to using 1k warm start steps for CPR since no learning rate warmup is present in the case of SGD in nnU-Net. As the weight decay value, we employ nnU-Net\u2019s default value of 3e-5. We show a strong performance out of the box in this context, improving on the very competitive nnU-Net baseline (89.45 Dice score) by a margin of 0.13 Dice points to a Dice score of 89.59. We note that hyperparameter tuning would most likely yield further performance improvements in this regard. ", "page_idx": 31}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/16a6755bba559597e152eddd6a29fcea8957cfe9248d552f6d5952dbaff3f642.jpg", "table_caption": ["Table J.1: Results of medical image segmentation training on the BTCV, Heart, and BraTS datasets. We show the mean Dice score across 5 folds (3 for BTCV) for a range of weight decay values $(\\gamma)$ for AdamW and different warm start steps $s$ for CPR. The learning rate warmup is $2k$ . "], "table_footnote": [], "page_idx": 31}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/6d0a2138c562312732d426f0091d8a664f582040924b3cf3bc4403f2b7bbe0b1.jpg", "table_caption": ["Table J.2: Hyperparameters of the medical image segmentation experiments. "], "table_footnote": [], "page_idx": 32}, {"type": "text", "text": "K Experiments on Fine-tuning a Large Language Model ", "text_level": 1, "page_idx": 33}, {"type": "table", "img_path": "rCXTkIhkbF/tmp/c30ddeb9b00808e03ad53beae702418d7845653650edf4819f9fb34bf79a629b.jpg", "table_caption": ["Table K.1: Hyperparameters for the fine-tuning an LLM experiment. "], "table_footnote": [], "page_idx": 33}, {"type": "image", "img_path": "rCXTkIhkbF/tmp/085909f6811849ecf9ec694b016e6aa614f0a949a166b4469a193c4d5696a099.jpg", "img_caption": ["Figure K.1: Percentage of performance change before and after fineuning Mistral 7B with pubmedQA artificial data with the use of AdamW (left) and AdamCPR (right). AdamCPR uses the $\\mathrm{L_{2}}$ norm as a regularization function and Kappa-WS. We use a learning rate warm-up of 50 steps. The heatmap shows the mean performance and standard deviation across three random seeds. We use the Arithmetic dataset with 10 tests that involve simple arithmetic problems in natural language [50], the comprehensive MMLU benchmark [51], the $P i Q A$ benchmark on reasoning about physical commonsense in natural language [52], and the TruthfulQA benchmark, which evaluates models\u2019 abilities to mimic human falsehoods [39]. "], "img_footnote": [], "page_idx": 34}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 35}, {"type": "text", "text": "Justification: The main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 35}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Justification: The paper discusses limitations in the experiments in Section 5 and in the discussion in Section 6. The runtime overhead is discussed in detail in Appendix I. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 35}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 35}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 36}, {"type": "text", "text": "Justification: The paper does not include theoretical results that require formal proofs. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 36}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: The paper provides comprehensive details about the experimental setup, including all hyperparameters and datasets. We provide training code for experiments and the implementation of our method in the supplemental materials. ", "page_idx": 36}, {"type": "text", "text": "Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 36}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 37}, {"type": "text", "text": "Justification: We provide training code for experiments and the implementation of our method in the supplemental materials. All used libraries and datasets are publicly available. Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 37}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Justification: The paper specifies all necessary training and evaluation details, including hyperparameters and data splits. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 37}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Justification: The authors run multiple seeds for all experiments in the main paper and report the mean and standard deviation of the corresponding metrics. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. ", "page_idx": 37}, {"type": "text", "text": "\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 38}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 38}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 38}, {"type": "text", "text": "Justification: The paper reports information about the compute resources required for each experiment. ", "page_idx": 38}, {"type": "text", "text": "Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 38}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 38}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 38}, {"type": "text", "text": "Justification: The research conducted in the paper conforms to the NeurIPS Code of Ethics. Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 38}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 38}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 38}, {"type": "text", "text": "Justification: Our paper covers only foundational research and develops a generic algorithm for optimizing neural networks. ", "page_idx": 38}, {"type": "text", "text": "Guidelines: \u2022 The answer NA means that there is no societal impact of the work performed. ", "page_idx": 38}, {"type": "text", "text": "\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 39}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 39}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 39}, {"type": "text", "text": "Answer:[NA] ", "page_idx": 39}, {"type": "text", "text": "Justification: The paper does not involve the release of models or data with a high risk for misuse, and thus, safeguards are not applicable in this context. ", "page_idx": 39}, {"type": "text", "text": "Guidelines: ", "page_idx": 39}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 39}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 39}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 39}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 39}, {"type": "text", "text": "Justification: The creators and original owners of assets used in the paper are properly credited and referenced. ", "page_idx": 39}, {"type": "text", "text": "Guidelines: ", "page_idx": 39}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 39}, {"type": "text", "text": "", "page_idx": 40}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 40}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 40}, {"type": "text", "text": "Justification: The only assets the paper releases are code and is well documented in the supplemental material to ensure transparency and reproducibility. ", "page_idx": 40}, {"type": "text", "text": "Guidelines: ", "page_idx": 40}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 40}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 40}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 40}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing experiments or research with human subjects. ", "page_idx": 40}, {"type": "text", "text": "Guidelines: ", "page_idx": 40}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 40}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 40}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 40}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 40}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing or research with human subjects, so IRB approvals are not applicable. ", "page_idx": 40}, {"type": "text", "text": "Guidelines: ", "page_idx": 40}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 41}]