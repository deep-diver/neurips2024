[{"type": "text", "text": "Amortized Eigendecomposition for Neural Networks ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Tianbo ${\\bf L i}^{1,*}$ , Zekun $\\mathbf{S}\\mathbf{h}\\mathbf{i}^{1,2}$ , Jiaxi Zhao3, Min Lin1 1SEA AI Lab 2 School of Computing, National University of Singapore 3 Department of Mathematics, National University of Singapore \u2217litb@sea.com ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Performing eigendecomposition during neural network training is essential for tasks such as dimensionality reduction, network compression, image denoising, and graph learning. However, eigendecomposition is computationally expensive as it is orders of magnitude slower than other neural network operations. To address this challenge, we propose a novel approach called \u201camortized eigendecomposition\u201d that relaxes the exact eigendecomposition by introducing an additional loss term called eigen loss. Our approach offers significant speed improvements by replacing the computationally expensive eigendecomposition with a more affordable QR decomposition at each iteration. Theoretical analysis guarantees that the desired eigenpair is attained as optima of the eigen loss. Empirical studies on nuclear norm regularization, latent-space principal component analysis, and graphs adversarial learning demonstrate significant improvements in training efficiency while producing nearly identical outcomes to conventional approaches. This novel methodology promises to integrate eigendecomposition efficiently into neural network training, overcoming existing computational challenges and unlocking new potential for advanced deep learning applications. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Eigendecomposition is a fundamental technique in linear algebra that finds applications across numerous scientific domains ranging from quantum manybody problems to multivariate statistical analysis. In the context of deep learning, eigendecomposition also plays a crucial role in tasks such as weights normalization [8, 16, 41], dimensionality reduction [6, 44, 27, 38], network compression [17, 30], image denoising [13, 12, 14], graph adversarial learning [10, 18, 47]. By uncovering the structure of networks, eigendecomposition allows us to enforce low-rankness, ensuring generalization, robustness, and computational efficiency. Eigendecomposition is also instrumental in the spectral analysis of graphs, where it can detect community structure, which is essential in spectral graph neural networks. The ability of eigendecomposition to detect the intrinsic matrix structures and properties makes it a valuable tool in various machine learning tasks with neural networks. ", "page_idx": 0}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/a0ba7986c5bc7c805b0e1580eaf23148c797c7a6415e3267035eef9bedf6382b.jpg", "img_caption": [], "img_footnote": [], "page_idx": 0}, {"type": "text", "text": "Figure 1: A comparison that illustrates the forward execution time of three linear algebra operations: qr, eigh, and svd, when performed on a $10000\\times10000$ matrix using PyTorch and JAX. The presented values represent the mean ratios of the execution time relative to that of matrix multiplication (matmul) of 100 runs. ", "page_idx": 0}, {"type": "text", "text": "Despite its straightforward definition, the computation of eigenvalues is quite challenging. Eigendecomposition algorithms are inherently iterative, involving a sequence of expensive operations such as Arnoldi iteration, QR iteration, and Rayleigh quotient Iteration [39]. Additionally, it usually takes thousands of iterations to reach a desirable tolerance level. For instance, the locally optimal block preconditioned conjugate gradient (LOBPCG) method [22]\u2013a widely-used eigenvalue solver\u2013often requires dozens to hundreds of iterations to achieve convergence [22, 9]. Figure 1 presents a comparative analysis of the execution times for eigendecomposition and other computational operations using PyTorch [33] and JAX [2]. The figure shows that the execution speeds for eigh and svd are remarkably slower\u2014by 4 to 5 orders of magnitude\u2014relative to matrix multiplication. This substantial disparity in execution speed indicates operations such as eigh and svd, once used, will be the bottleneck of computation cost. Conversely, the QR decomposition, often employed for orthogonality, is considerably less computationally expensive. This observation has motivated us to explore the possibility of reducing the iterative computation of eigendecomposition with lower-cost operations. ", "page_idx": 1}, {"type": "text", "text": "When eigendecomposition is incorporated into the training of a neural network, a nested loop scenario arises, where eigendecomposition acts as the inner loop and the neural network\u2019s loss minimization serves as the outer loop. Notably, it is not always easy to be aware of this inner loop of eigendecomposition, as it is encapsulated by the high-level functions provided within deep learning frameworks. However, in this context, this inner loop does not require full convergence during each iteration, given that the remaining parameters have not reached optima. The inner loop can be relaxed and optimized jointly with the training loss, allowing for a more flexible and efficient training process. The key idea can be summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "Eigendecomposition within a neural network does not have to reach full convergence during each training step; it simply needs to contribute to the desired outcome by the end of the training process. ", "page_idx": 1}, {"type": "text", "text": "In this paper, we present a novel approach named \u201camortized eigendecomposition\u201d for training neural networks that require eigenvalues or eigenvectors. Instead of using computationally expensive eigendecomposition decoupled with the training of neural networks, we proposed to relax it into an unconstrained optimization problem on the Stiefel manifold by adding an eigen loss. This relaxation only requires a QR decomposition at each iteration, thus is more efficient. Moreover, through empirical observations, we have found that although the relaxed optimization problem with eigen loss does not involve eigendecomposition in every iteration, the amortized optimization approach consistently achieves the desired results. It achieves nearly identical performance to traditional methods but with significantly improved speed. ", "page_idx": 1}, {"type": "text", "text": "2 Eigendecomposition in Neural Networks ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "In this paper, we consider a general class of neural networks that incorporate eigendecomposition. We formulate this family of problems as a constrained optimization problem: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\theta}f{\\big(}h_{\\theta}(X),V,\\Lambda{\\big)},\\qquad{\\mathrm{s.t.~}}V^{\\top}\\Lambda V=A\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "Here, the encoder $h_{\\theta}$ maps the data $\\textbf{\\textit{X}}\\in\\~\\mathbb{R}^{n\\times p}$ into a latent space. In addition to the latent representation, the loss function $f$ also incorporates the eigenpair $\\Lambda$ and $V$ of a symmetric matrix $\\pmb{A}$ . The matrix $\\pmb{A}$ can be constructed from $h_{\\theta}(\\bar{X})$ , such as a covariance matrix or a similarity matrix, or it can depend solely on the parameters. Notably, $\\pmb{A}$ is subject to changes during network training due to its dependency on $\\pmb{\\theta}$ . The computational graph for each iteration of such model structure can be written as, ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\underbrace{X\\longrightarrow h_{\\theta}(X)}_{\\mathrm{encoding}}\\longrightarrow\\underbrace{A\\longrightarrow(V,\\Lambda)}_{\\mathrm{eigendecomposition}}\\longrightarrow\\underbrace{f\\big(h_{\\theta}(X),V,\\Lambda\\big)}_{\\mathrm{downstream\\,task}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "The corresponding algorithm of the above computational graph is shown in Algorithm 1. Solving such problems, however, is computationally expensive, since it requires preserving the eigendecomposition constraint of $\\pmb{A}$ after each update of $\\pmb{\\theta}$ . This structure encompasses a wide range of learning problems. We present several representative examples and investigate them in our numerical experiments next. ", "page_idx": 1}, {"type": "text", "text": "Nuclear Norm Regularization The nuclear norm of a matrix is defined as the sum its the singular values. Due to its convexity, regularization via the nuclear norm is employed to encourage low-rank structures within the learned parameters. This approach proves beneficial in a variety of applications, such as matrix completion [5, 4], image denoising [13, 12, 14, 45]. Furthermore, eigendecomposition and singular value decomposition are also used for pruning or compressing neural networks, by decomposing the weight matrices of the network and approximating the original network with fewer parameters [17, 30]. The objective function of this type of problem can be written as, ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\theta}f\\big(h_{\\theta}(X)\\big)+\\eta\\|\\theta\\|_{*}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Here, $\\eta$ is a regularization coefficient that controls the rank of the parameter matrix. In classical methods, the nuclear norm $\\lVert\\pmb\\theta\\rVert_{*}$ is usually calculated via singular value decomposition. ", "page_idx": 2}, {"type": "text", "text": "Whitening in Neural Networks Whitening is a transformation technique extensively utilized in neural networks to standardize features by ensuring they have zero mean and unit variance, and are decorrelated from each other. In neural network applications, whitening can be categorized into parameter-space whitening and feature-space whitening. Parameter-space whitening, often achieved through PCA/ZCA, is a prevalent method applied during neural network training to improve stability and accelerate convergence [37, 41, 16, 8]. Feature-space whitening, in contrast, applies PCA to the intermediate representations within the network. This process aligns features with the axes of greatest variance, thereby facilitating dimensionality reduction [15, 42, 34, 25]. A concrete example of feature-space whitening is its incorporation into an auto-encoder architecture, which can be expressed mathematically as: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\omega,\\theta}\\Big\\|\\mathsf{D e c}_{\\omega}\\Big(V V^{\\mathsf{T}}\\mathsf{E n c}_{\\theta}(X)\\Big)-X\\Big\\|_{\\mathrm{F}}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $V$ is spanned by the first several largest eigenvectors of the covariance of $\\mathsf{E n c}_{\\theta}(X)$ and $\\theta,\\omega$ represent the parameters of the decoder and encoder, respectively. ", "page_idx": 2}, {"type": "text", "text": "Graph Structure Learning Graph structure learning is an area of machine learning that aims to deduce the latent structure of a graph or network from observed data [23]. This domain has significant applications in graph adversarial learning, which seeks to bolster the robustness of graph neural networks against adversarial attacks [10, 18, 47]. In such contexts, the adjacency matrix is usually often compromised by adversarial modifications while feature matrix $\\mathbf{\\deltaX}$ remains unaffected. The primary objective is to learn both a clean graph structure and perform accurate node classification. From this perspective, we follow the approach proposed in [18] and the objective function can be formulated as: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\theta,\\hat{L}}\\left\\|\\mathsf{G N N}_{\\theta}(X,\\hat{L})-Y\\right\\|_{2}+\\alpha\\left\\|\\hat{L}\\right\\|_{*}+\\beta\\left\\|\\hat{L}-L\\right\\|_{\\mathrm{F}}^{2}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Here $\\widehat{L}$ represents a low-rank Laplacian matrix that approximates the original graph Laplacian $\\textbf{\\emph{L}}$ . The t hree parts of the loss function correspond to the node classification loss, low-rank constraint, and unnoticeable adversarial attacks, respectively. However, this approach relies on singular value decomposition at every iteration, which is computationally prohibitive for large-scale networks. ", "page_idx": 2}, {"type": "text", "text": "3 Differentiable Optimization for Eigendecomposition ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Before introducing the proposed method, let\u2019s begin by examining a more straightforward case: determining the eigenvalues of a symmetric matrix $A\\in\\mathbb{R}^{n\\times n}$ through constrained optimization.1 The eigenvalues of $\\pmb{A}$ are denoted as $\\lambda_{1}\\geqslant\\lambda_{2}\\geqslant\\dotsb\\geqslant\\lambda_{n}$ . The largest eigenvalue of $\\pmb{A}$ can be obtained by directly maximizing the Rayleigh quotient: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\lambda_{1}=\\operatorname*{max}_{\\pmb{u}\\in\\mathbb{R}^{n}}\\,\\frac{\\pmb{u}^{\\mathsf{T}}A\\pmb{u}}{\\pmb{u}^{\\mathsf{T}}\\pmb{u}}.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where the maximum value corresponds to the largest eigenvalue and the associated eigenvector is given by the normalized $\\textbf{\\em u}$ at the optimum. This method can be generalized to identifying the optimal subspace, which is a common problem in dimensionality reduction and feature selection contexts. The optimal subspace for a symmetric matrix is defined as the subspace spanned by its $k$ largest eigenvectors. This can be found by solving the constrained optimization problem: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{U\\in\\mathbb{U}^{n\\times k}}\\quad\\mathsf{t r}(U^{\\mathsf{T}}A U)\n$$", "text_format": "latex", "page_idx": 2}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/3a351a8529f4464af41ee1ab7505473a0731a43716ba07c6bbb9f6b873af9dc2.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 2: An illustration on disrupting the rotational symmetry of the trace loss. We aim to solve eigenvectors for a 2-dimensional symmetric matrix $A={\\binom{0.8\\quad0.2}{0.2\\quad0.4}}$ with three loss functions. We parameterize an orthonormal matrix $U={\\left(\\begin{array}{l l}{x}&{y}\\\\ {-y}&{x}\\end{array}\\right)}$ , which is subject to the constraint $x^{2}+y^{2}=1$ . The plot displays the contours of the landscapes of three different loss functions as they vary with $x$ and $y$ : (a) trace loss $\\mathrm{tr}(U A U^{\\top})$ , $({\\bf b})$ Brockett\u2019s cost function $\\mathsf{t r}(M U A U^{\\mathsf{T}})$ where $M=\\mathsf{d i a g}(1,0.2)$ and (c) convex loss function t $r(f(U A U^{\\top}))$ where $f$ is an element-wise exponential function. The feasible area of the constraint is depicted with a black circle. The red stars signify the optima of the loss in the feasible area. The dashed grey lines represent the true eigenvector direction of $\\pmb{A}$ . We see that, the trace loss results in infinitely many optimal solutions due to its rotational symmetry. In contrast, both Brockett\u2019s cost function and the convex loss function reshape the optimization landscape, breaking this symmetry and leading to the identification of the correct eigenvectors. ", "page_idx": 3}, {"type": "text", "text": "where the Stiefel manifold $\\mathbb{U}^{n\\times k}=\\{{\\pmb U}\\in\\mathbb{R}^{n\\times k}\\mid{\\pmb U}^{\\mathsf{T}}{\\pmb U}={\\pmb I}\\}$ is the set of $n\\times k$ matrices with orthonormal columns. Maximizing this trace function yields the optimal subspace spanned by the column vectors of $U$ . ", "page_idx": 3}, {"type": "text", "text": "Rotational Symmetry It\u2019s important to recognize, however, that the optimal $U$ of the above optimization problem does NOT represent the eigenvectors of $\\pmb{A}$ . This is due to the rotational symmetry of the trace function that for any orthonormal matrix $C\\,\\in\\,\\mathbb{U}^{k\\times k}$ , the equation $\\mathsf{t r}(U^{\\top}\\dot{A}U)=\\mathsf{t r}(C^{\\top}U^{\\top}A U C)$ always holds. As a result, there are an infinite number of solutions to the optimization problem Eq. (7), all spanning the same subspace as the desired sets of eigenvectors. A visual illustration is provided in Figure 2a. ", "page_idx": 3}, {"type": "text", "text": "To accurately obtain the eigenvalues and eigenvectors, it is necessary to refine the traditional trace loss function. This paper introduces two approaches for achieving the correct eigendecomposition. The first method utilizes Brockett\u2019s cost function, which applies distinct weights to the diagonal elements of the matrix product $U^{\\top}A U$ , effectively differentiating the importance of each eigenvalue. The second method involves applying an element-wise convex function directly to the diagonal elements, resulting in an exact eigendecomposition. We will now elaborate on these methods. ", "page_idx": 3}, {"type": "text", "text": "The Brockett\u2019s Cost Function The first modification made to the trace loss is Brockett\u2019s cost function [3]. It enables the extraction of eigenvectors and eigenvalues by solving the following optimization problem: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{U\\in\\mathbb{U}^{n\\times k}}\\quad{\\mathsf{t r}}(M U^{\\mathsf{T}}A U).\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Here $M\\,=\\,\\mathsf{d i a g}(m_{1},m_{2},\\cdot\\cdot\\cdot\\cdot,m_{k})\\,\\in\\,\\mathbb{R}^{k\\times k}$ is a diagonal weight matrix with distinct diagonal elements. The matrix $_M$ is structured such that all its elements are distinct numbers. Specifically, we can denote these elements as $0\\;<\\;m_{1}\\;<\\;m_{2}\\;<\\;\\cdot\\cdot\\;<\\;m_{k}$ . This ordering allows $_M$ to assign distinct weights to the diagonal elements of the product $U^{\\mathsf{T}}A U$ , effectively disrupting the rotational invariance inherent in the trace loss and thus enabling the determination of eigenvalues and eigenvectors through optimization. In fact, $_M$ can be any diagonal matrix with distinct diagonal elements. A practical choice could be $m_{i}=i/k$ or $m_{i}=i$ as suggested by [3]. The next theorem illustrates why this approach can yield the exact eigendecomposition. ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "Theorem 1 (Trace inequality with weight matrix). Consider a $n$ -dimensional symmetric matrix $\\pmb{A}$ . Let $_M$ be a $k$ -dimensional diagonal matrix with elements $0<m_{1}<m_{2}\\cdot\\cdot<m_{k}$ . For an arbitrary matrix $U\\in\\mathbb{U}^{n\\times k}$ with orthogonal columns, the following inequality always holds: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{k}m_{k-i+1}\\lambda_{i}\\leqslant{\\mathsf{t r}}(M U^{\\top}A U)\\leqslant\\sum_{i=1}^{k}m_{i}\\lambda_{i}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The equalities are achieved if and only if $U$ contains the eigenvectors corresponding to the $k$ largest (smallest) eigenvalues of $\\pmb{A}$ . ", "page_idx": 4}, {"type": "text", "text": "This approach can be viewed as an extension of the trace inequalities originally put forward by Von Neumann [40, 31] and further developed by Ruhe [35]. A detailed demonstration is available in the seminal work by Brockett [3]. Additionally, we offer an alternative proof leveraging the Cauchy\u2013Schwarz inequality, which is presented in the Appendix for reference. A more generalized version of this trace inequality is discussed in Liang et al. [26]. ", "page_idx": 4}, {"type": "text", "text": "The Convex Trace Loss The second method employs a strictly monotonic convex function $f$ , applied element-wise to the diagonal components of $U^{\\mathsf{T}}A U$ . This perturbation also disrupts the rotational symmetry inherent in the trace loss. The convex nature of $f$ alters the curvature of the loss landscape, thereby ensuring a unique optimal solution corresponding to the eigenvectors. The convex trace loss function, aimed at extracting the $k$ largest eigenvalues, is expressed as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{U\\in\\mathbb{U}^{n\\times k}}\\quad\\mathsf{t r}f(U^{\\mathsf{T}}A U)\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The optimal $U_{*}$ that achieves the maximum in the above objective are the eigenvectors corresponding to the $k$ largest eigenvalues, and the eigenvalues can be obtained by the diagonal elements of $\\bar{U}_{*}^{\\top}A U_{*}^{'}$ . The next theorem provides a formal validation of this assertion. ", "page_idx": 4}, {"type": "text", "text": "Theorem 2 (Trace inequality with convex function). Let $\\pmb{A}$ be a given $n$ -dimensional symmetric matrix and let $U$ be a matrix of size $n\\times k$ that resides on the Stiefel manifold. Suppose $f:\\dot{\\mathbb{R}}\\rightarrow\\mathbb{R}$ be a monotonically increasing, convex function applied element-wise. The following inequalities hold: ", "page_idx": 4}, {"type": "equation", "text": "$$\nk\\left(f\\left(\\frac{1}{k}\\mathrm{tr}(\\boldsymbol{A})\\right)\\right)\\leqslant\\mathrm{tr}\\bigg(f\\big(\\boldsymbol{U}^{\\top}\\boldsymbol{A}\\boldsymbol{U}\\big)\\bigg)\\leqslant\\sum_{i=1}^{k}f(\\lambda_{i}),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The rightmost inequality becomes an equality if and only if $U$ comprises the eigenvectors of $\\pmb{A}$ that correspond to the $k$ largest eigenvalues, The leftmost inequality is met with equality when $U$ is such that all diagonal elements of the matrix $U^{\\mathsf{T}}A{\\dot{U}}$ are equal. ", "page_idx": 4}, {"type": "text", "text": "This theorem is established through the application of Jensen\u2019s inequality. The detailed proof is provided in the Appendix B.3 for reference. In the above objective, suitable choices of $f$ include: $\\bar{f}(x)=\\exp(x)$ on $\\mathbb{R}$ ; $f(x)=x^{\\alpha}$ on $\\mathbb{R}^{+}$ where $\\alpha>1$ ; and $\\bar{f(x)}=\\tan(x)$ on $[0,\\pi/2]$ . For finding the $k$ smallest eigenvalues, a simple modification can be made by replacing the function $f$ with an element-wise monotonically increasing concave function and then minimizing the trace loss. A visual representation of the optimization process of the three trace losses is presented in Figure 2. ", "page_idx": 4}, {"type": "text", "text": "4 The Amortized Eigendecomposition Approach ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The proposed amortized eigendecomposition approach aims to modify the eigendecomposition operation within the neural network\u2019s computational graph, as illustrated in Eq. (2). This replacement involves two steps: First, the set of eigenvectors form a matrix on the Stiefel manifold reparameterized through computationally efficient operations such as QR decomposition. Then, the loss function is adjusted to ensure that its optimal solutions precisely correspond to the eigendecomposition. The computational graph for this amortized eigendecomposition method is formulated as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\underbrace{X\\longrightarrow h_{\\theta}(X)}_{\\mathrm{encoder}}\\longrightarrow A\\longrightarrow\\underbrace{f_{\\omega}\\big(h_{\\theta}(X),U,\\Sigma\\big)}_{\\mathrm{model~loss}}+\\eta\\underbrace{g\\left(U,A\\right)}_{\\mathrm{eigenloss}}\\longleftarrow\\underbrace{U\\gets^{\\#}\\Psi}_{\\mathrm{reparameterization}}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In the computation graph, the eigendecomposition operation is circumvented and substituted with a more efficient QR operation. The QR operation is employed to reparameterize the orthogonal matrix on the Stiefel Manifold, leading to a substantial acceleration at each iteration. Moreover, instead of forcing the eigendecomposition constraint at each iteration, we relax it to an eigen loss which is jointly optimized with the training loss of the neural network as a nested optimization loop. This training process is outlined in Algorithm 2, where the key difference of our amortized optimization for the eigendecomposition approach is highlighted in red background color. ", "page_idx": 4}, {"type": "table", "img_path": "OYOkkqRLvj/tmp/37b0bbcb24e49afc8eec45d05983e0b36d1abeb0ad6012a74a3b007e79e293b4.jpg", "table_caption": [], "table_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "Reparameterize the Stiefel Manifold There are three prevalent methods for reparameterizing an orthogonal matrix: through the matrix exponential, the Cayley transform, and QR decomposition. Due to the QR decomposition\u2019s better numerical stability and efficiency for non-square matrices $U$ , we employ it for reparameterizing a matrix with orthonormal columns: ", "page_idx": 5}, {"type": "equation", "text": "$$\nU=\\mathsf{Q R}(W).\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "In this formulation, $W$ is dimensionally consistent with $U$ . QR decomposition is more computationally efficient than eigendecomposition and singular value decomposition as shown in Fig. 1. Additionally, the backward computation of the QR decomposition is well-defined and has been efficiently optimized in modern deep learning frameworks, such as PyTorch and JAX. For details on the back-propagation process of the QR decomposition, see [36]. ", "page_idx": 5}, {"type": "text", "text": "Relaxation with Eigen Loss Previously, we observed that optimizing the Brockett-type or convex trace loss directly enables us to obtain precise eigenvalues and eigenvectors. For any loss function that depends on the eigenvectors or eigenvalues, as specified in Eq.(1), we can transform this loss into a regularized version incorporating the eigen loss. This relaxation allows us to forego the need for explicit eigendecomposition at every iteration, while ultimately achieving equivalent outcomes. We now examine several general scenarios that encompass the majority of cases and explore how to implement this relaxation technique. ", "page_idx": 5}, {"type": "text", "text": "In the general case, the model loss in Eq. (1) depends on both the eigenvectors and eigenvalues. This constrained optimization problem can be relaxed by introducing an eigen loss as a regularizer, which is formulated as: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\theta}f\\big(h_{\\theta}(X),V,\\Lambda\\big)\\xrightarrow[l a r g e x t\\mathrm{eigenpair}]{(V,\\Lambda)\\mathrm{~is~the~}k}\\operatorname*{min}_{\\theta,W}f\\big(h_{\\theta}(X),U,\\Sigma\\big)-\\eta\\mathrm{tr}(M U^{\\top}A_{\\theta}U).\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "In this reformulation, $U\\in\\mathbb{U}^{n\\times k}$ , is reparameterized via a QR operation as shown in Eq. (13). This relaxation circumvents the need for eigendecomposition at each iteration by using the computationally cheaper QR decomposition, while still ensuring that the optimal solution corresponds to the precise eigendecomposition of the matrix $A_{\\theta}$ . ", "page_idx": 5}, {"type": "text", "text": "The second type of optimization problem involves scenarios where the model loss is independent of the eigenvalues and depends solely on the eigenvectors, such as in the latent-space PCA network expressed in Eq. (4). To enhance the efficiency of the solution process, the problem can be reformulated to include a trace penalty term, such as Brockett\u2019s cost, which is given by ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\theta}f\\big(h_{\\theta}(X),V\\big)\\xrightarrow[\\mathrm{eigenvectors}]{V\\mathrm{is}\\ k l a r g e s t}\\operatorname*{min}_{\\theta,W}f\\big(h_{\\theta}(X),U\\big)-\\eta\\mathrm{tr}(M U^{\\top}\\mathsf{S t o p G r a d}(A_{\\theta})U\\big).\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "In this formulation, a stop gradient operation is applied to $\\pmb{A}$ , since the eigen loss involves $\\pmb{A}$ which relies on the parameter $\\pmb{\\theta}$ . By introducing the stop gradient operation, we prevent this regularization term from propagating gradients back to $\\pmb{\\theta}$ . ", "page_idx": 5}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/69728fb070a5acd113e9b698d90cdb09b6924a3e969dac3a7eb678e880ff3dd7.jpg", "img_caption": ["Figure 3: Convergence analysis on finding 50 largest eigenvalues on random $1000\\!\\times\\!1000$ -dimensional symmetric matrices. (a): Convergence curves using Brockett\u2019s cost and convex trace loss $(f(x)=$ $\\bar{x^{1.5}}$ ). (b) The fine-tuning convergence on a series of similar matrices. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "Besides the above relaxations, further simplification is possible if the loss function conforms to the structure of Brockett\u2019s cost function or a convex trace function. That is, when the model loss $f_{\\omega}$ is a non-uniform linear combination of the eigenvalues, or it is monotonic and convex (or concave) to the eigenvalues, the trace penalty term is unnecessary. The loss function will inherently converge to the correct eigendecomposition. This principle is exemplified in the context of the nuclear norm regularization problem, which will be illustrated later. This can be formulated as: ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\theta}f{\\big(}h_{\\theta}(X),V,\\Lambda{\\big)}\\xrightarrow[{\\mathrm{or~a~non-uniform~linear~conbination~of~}}\\Lambda]{f\\,\\mathrm{is~monotonic~and~concave~w.rt\\,\\Lambda~}}\\operatorname*{min}_{\\theta,W}f{\\big(}h_{\\theta}(X),U,\\Sigma{\\big)}.\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In this section, we present an evaluation of our approach, focusing on four specific tasks. Firstly, we demonstrate the convergence properties of our method empirically. Next, we measure the efficacy and efficiency of our amortized eigendecomposition technique over nuclear norm regularized autoencoder and latent-space PCA using the MNIST dataset. Lastly, we assess the effectiveness of our approach in the context of graph adversarial learning tasks. We implement our approach with the deep learning framework JAX [2]. All the experiments of our approach are conducted on a single NVIDIA A100 GPU with 40GB memory. The two fundamental questions we investigate are as follows: ", "page_idx": 6}, {"type": "text", "text": "\u2022 Does our approach accurately identify the eigendecomposition and singular value decomposition? \u2022 How does the efficiency of our method compare to that of traditional techniques? ", "page_idx": 6}, {"type": "text", "text": "5.1 Convergence ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In this experiment, we evaluate the numerical error and convergence speed of our algorithm applied to solving eigendecomposition. We randomly generate ten symmetric matrices of size $1000\\times1000$ The first 50 eigenvalues of these matrices range from 1 to 50, while the remaining eigenvalues lie between 0 and 1. Our objective is to compute the 50 largest eigenvalues by minimizing Brockett\u2019s cost function and convex trace loss (we adopt $f(x)=x^{\\bar{1}.5}$ as the convex function). To achieve this, we employ several optimization algorithms, including Adam [20], Adamax [20], Yogi [46], SGD, and L-BFGS [28]. These algorithms are provided by the Optax and JAX-opt libraries [7]. We measure the mean square error (MSE) of the eigenvalues to the number of training iterations. The results are illustrated in Figure 3. ", "page_idx": 6}, {"type": "table", "img_path": "OYOkkqRLvj/tmp/3ef11708fd4639671689af8cdbe2bdf4ee17fd371fd9db9439ad30b7169ecddd.jpg", "table_caption": ["Table 1: Evaluation of execution times per iteration on three tasks. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "This result demonstrates that both loss functions are capable of identifying the correct eigenvalues with a small numerical error of $10^{-9}$ . However, there is a noticeable difference in convergence speed. For both trace loss functions, the Adam and Adamax optimizers outperform the others, achieving faster convergence rates. Brockett\u2019s cost function, which introduces a linear combination of the trace elements, is more numerically stable compared to the convex trace loss, resulting in faster convergence. This experiment validates the efficiency of the differentiable optimization framework for computing the $k$ largest eigenvalues. ", "page_idx": 7}, {"type": "text", "text": "5.2 Nuclear Norm Regularization ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In this experiment, we apply the amortized eigendecomposition approach to the nuclear norm regularization problem, as outlined in Eq. (3). The experimental framework entails training an auto-encoder on the MNIST dataset by minimizing the reconstruction loss with a nuclear norm regularizer applied to the weight matrix $\\b{\\dot{\\theta}}\\in\\mathbb{R}^{n\\times k}$ of the encoder\u2019s last layer. We employ a relaxation technique to the original problem defined in Eq. (16), which can be expressed as: ", "page_idx": 7}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\omega,\\theta}\\Big\\|\\mathsf{D e c}_{\\omega}\\big(\\mathsf{E n c}_{\\theta}(X)\\big)-X\\Big\\|_{\\mathrm{F}}+\\eta\\|\\theta\\|_{*}\\longrightarrow\\operatorname*{min}_{\\omega,\\theta,W}\\Big\\|\\mathsf{D e c}_{\\omega}\\big(\\mathsf{E n c}_{\\theta}(X)\\big)-X\\Big\\|_{\\mathrm{F}}+\\eta\\sum_{i=1}^{k}\\big\\|\\theta u_{i}\\big\\|_{2}\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "where $\\pmb{u}_{i}$ \u2019s are the orthogonal column vectors of $U$ , which are parameterized by $W$ through Eq. (13). The architectures of the encoder and the decoder are constructed as a 2-layer MLP with hidden layer dimensions of $\\ensuremath{\\mathrm{D}}=128$ , 256, and 512. For comparison, we also implement the approach based on singular value decomposition (using the svd function). It should be noted that in the current versions of JAX, both the eigh and svd functions are limited to operations on full matrices. ", "page_idx": 7}, {"type": "text", "text": "The average execution time per iteration for the baseline backbone with only reconstruction loss, the backbone with svd, i.e. LHS of Eq. (17), and the backbone utilizing amortized eigendecomposition, i.e. RHS of Eq. (17) are reported in Table 1. We denote these execution times as $t_{0},\\,t_{1}$ , and $t_{2}$ respectively, and define the speed-up ratio for our approach relative to the svd as: ", "page_idx": 7}, {"type": "equation", "text": "$$\n{\\mathrm{speed-up}}={\\frac{t_{1}-t_{0}}{t_{2}-t_{0}}}.\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "This ratio represents the improvement in execution speed of our eigendecomposition method compared to the standard svd, relative to the baseline backbone performance. ", "page_idx": 7}, {"type": "text", "text": "5.3 Latent-space Principle Component Analysis ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We investigate the effectiveness of our approach for the latent-space PCA method, as described in Eq. (4), using the MNIST dataset. Computing the eigenvectors of the large-scale covariance matrix in each iteration significantly increases the computation overhead, while our method amortizes this cost by jointly minimizing an additional loss. Moreover, we also aim to ensure that the first two eigenvalues are significantly larger than the subsequent ones. In the following objective function, the additional term resembles Brockett\u2019s cost function while the trace of the covariance matrix ensures homogeneity: ", "page_idx": 7}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/42574f0d3103e59ae28ed696659ead93296033af08f0347375ae82051792b3c7.jpg", "img_caption": ["Figure 4: A comparison of scaling in the latent PCA task using the Celeb-A-HQ (256x256) dataset. The backbone autoencoders used in this study consist entirely of fully-connected layers with ReLU activation, all maintaining the same dimensions. Between the encoder and decoder, we applied both an eigen solver from the JAX eigh function and our amortized eigendecomposition method. We varied the depth of the autoencoders across 8, 16, 32, and 64 layers, and explored dimensionalities of 128, 256, 512, 1024, 2048, and 4096. The results present the average execution time per iteration over 100 runs. Notably, the largest model tested, featuring an autoencoder with 64 layers and a dimension of 4096, comprises up to 1.0 billion parameters. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\omega,\\theta,W}\\Big\\|\\mathsf{D e c}_{\\omega}\\big(U U^{T}\\mathsf{E n c}_{\\theta}(X)\\big)-X\\Big\\|_{\\mathrm{F}}-\\eta\\frac{\\mathsf{t r}\\big(M U^{\\top}\\mathsf{c o v}(h_{\\theta}(X))U\\big)}{\\mathsf{t r}(\\mathsf{c o v}(h_{\\theta}(X)))},\n$$", "text_format": "latex", "page_idx": 8}, {"type": "text", "text": "where cov represents the covariance function. The architecture for both the encoder and decoder mirrors that of the nuclear norm regularization model, with the exception that there is a linear projection aligning with the direction of the principal components. The average execution times are reported in Table 1. More results and analysis are provided in Appendix A.2. The experimental results demonstrate that our approach achieves an average training speed improvement of $40\\%$ compared to the conventional eigendecomposition approach. ", "page_idx": 8}, {"type": "text", "text": "Additionally, we conducted a scalability study, with the results presented in Figure 4. This study examined the scaling behavior of latent PCA on the Celeb-A-HQ (256x256) dataset [29] by varying both the depth and width of the backbone autoencoder, with average execution time per iteration reported. The largest model in our tests, a 64-layer autoencoder with a 4096-dimensional latent space, contains over 1 billion parameters. From these results, we draw two main conclusions. First, our amortized eigen loss substantially reduces the eigendecomposition training time without significantly increasing the computational load of the backbone, as evidenced by the close alignment of the red (backbone) and green (backbone $^+$ our approach) lines. In contrast, the traditional eigendecomposition approach (blue line) scales steeply with increasing dimensionality, whereas our approach exhibits a much slower growth rate. Second, eigendecomposition emerges as the primary computational bottleneck within these neural network architectures, while the fully-connected layer computation remains minor, particularly at large widths $(>\\!2000)$ . This is reflected in the widening gap between the backbone (red line) and backbone $^+$ eigh (blue line) as dimensionality increases. Notably, increasing the depth of the backbone while keeping the hidden dimension constant results in minimal change in execution time, indicating that the cost of fully-connected layers is small relative to eigendecomposition\u2014further underscoring the results shown in Figure 1. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "5.4 Adversarial Attacks on Graph Convolutional Networks ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this study, we explore the robustness of graph convolutional networks (GCNs) [21] by implementing adversarial attacks on graph structures. The objective of this problem is described in Eq. (5). Our approach simplifies the attainment of a low-rank structure by optimizing: ", "page_idx": 9}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\underset{\\theta,W}{\\operatorname*{min}}}&{{}\\left\\|\\mathsf{G C N}_{\\theta}(X,\\widehat{L})-Y\\right\\|_{2}-\\eta\\mathsf{t r}(M U^{\\top}L U),}\\end{array}\n$$", "text_format": "latex", "page_idx": 9}, {"type": "text", "text": "where $\\widehat{\\pmb{L}}=\\pmb{U}^{\\top}\\mathsf{d i a g}(\\pmb{U}^{\\top}\\pmb{L}\\pmb{U})\\pmb{U}$ , with $U$ being parameterized by Eq. (13). The motivation for this formulation is that at optimum, the columns of $U$ correspond to the top- $\\cdot\\mathbf{k}$ eigenvectors of $\\textbf{\\emph{L}}$ . Then $\\widehat{L}$ becomes the best rank $k$ approximation of $\\textbf{\\emph{L}}$ under the Frobenius norm which corresponds to the terms $\\left\\|\\widehat{\\pmb{L}}\\right\\|_{*},\\left\\|\\widehat{\\pmb{L}}-\\pmb{L}\\right\\|_{\\mathrm{F}}^{2}$ in Eq. (5). This formulation allows the GNN to operate on a low-rank graph $\\widehat{L}$ , which has been shown to enhance robustness against adversarial attacks on the graph structure. ", "page_idx": 9}, {"type": "text", "text": "Our architecture consists of a three-layer GCN, which is utilized for semi-supervised node classification tasks on several citation networks, namely Cora, Citeseer, and Pubmed. Each layer has a hidden dimension of 32. The dropout rates are set to 0.4 for Cora and Citeseer, and to 0.1 for Pubmed, to prevent overfitting. For optimization, we employ the Adam algorithm with a learning rate of $10^{-3}$ . ", "page_idx": 9}, {"type": "text", "text": "The adversarial attacks are executed by perturbing the graph structure through the random addition and deletion of edges in the adjacency matrix. We quantify the extent of these perturbations using a contamination rate, which is defined as the ratio of the altered edge count to the total node pairs. ", "page_idx": 9}, {"type": "text", "text": "Additionally, we propose a graph modification based on the original objective, as detailed in Eq. (5). The graph Laplacian is represented by a symmetric matrix, on which the eigh function is applied to compute the eigenvalues. The corresponding execution times are documented in Table 1. For a more comprehensive experiment results and analysis of our findings, please refer to the Appendix A.3. ", "page_idx": 9}, {"type": "text", "text": "6 Discussion and Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this study, we address a class of deep learning problems that incorporate eigendecomposition within their constraints or objective functions. Such problems are prevalent in applications like nuclear-norm regularized denoising, network compression, graph structure learning, and whitening normalization. The traditional approach requires performing eigendecomposition or singular value decomposition within the computational graph, which becomes the bottleneck in the training process. To circumvent this computation overhead, we introduce an amortized eigendecomposition framework integrating a relaxation eigen loss into the learning objective, which relies on a set of orthonormal vectors. These vectors are reparameterized efficiently through QR decomposition, thereby substantially reducing the computational cost of eigendecomposition in each iteration. Furthermore, the differentiable nature of QR decomposition allows for its seamless incorporation into the neural network training workflow. Our experimental results demonstrate that, when applied to network tasks, our algorithm not only accelerates the process but also maintains the precision of the conventional method with eigendecomposition. The method proves particularly beneficial as a differentiable top $k$ eigensolver in environments where the backward gradient computation for top $k$ eigendecomposition, such as in JAX or PyTorch, is not well-supported. Consequently, our approach provides a viable alternative for integrating top $k$ eigendecomposition into neural networks. ", "page_idx": 9}, {"type": "text", "text": "Limitations. While our method excels in scenarios where eigendecomposition operations on large matrices are embedded within neural networks, it is important to note that when employed as a pure numerical eigensolver, it does not offer any speed or precision advantages over conventional methods. Thus, its suitability is specifically aligned with applications where eigendecomposition is a substantial component of the neural network training process. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] P-A Absil, Robert Mahony, and Rodolphe Sepulchre. Optimization algorithms on matrix manifolds. Princeton University Press, 2008. [2] James Bradbury, Roy Frostig, Peter Hawkins, Matthew James Johnson, Chris Leary, Dougal Maclaurin, George Necula, Adam Paszke, Jake VanderPlas, Skye Wanderman-Milne, and Qiao Zhang. JAX: composable transformations of Python+NumPy programs, 2018.   \n[3] Roger W Brockett. Dynamical systems that sort lists, diagonalize matrices, and solve linear programming problems. Linear Algebra and its applications, 146:79\u201391, 1991.   \n[4] HanQin Cai, Jialin Liu, and Wotao Yin. Learned robust pca: A scalable deep unfolding approach for high-dimensional outlier detection. Advances in Neural Information Processing Systems, 34:16977\u201316989, 2021.   \n[5] Emmanuel J Cand\u00e8s and Terence Tao. The power of convex relaxation: Near-optimal matrix completion. IEEE transactions on information theory, 56(5):2053\u20132080, 2010.   \n[6] Tsung-Han Chan, Kui Jia, Shenghua Gao, Jiwen Lu, Zinan Zeng, and Yi Ma. Pcanet: A simple deep learning baseline for image classification? IEEE transactions on image processing, 24(12):5017\u20135032, 2015.   \n[7] DeepMind, Igor Babuschkin, Kate Baumli, Alison Bell, Surya Bhupatiraju, Jake Bruce, Peter Buchlovsky, David Budden, Trevor Cai, Aidan Clark, Ivo Danihelka, Antoine Dedieu, Claudio Fantacci, Jonathan Godwin, Chris Jones, Ross Hemsley, Tom Hennigan, Matteo Hessel, Shaobo Hou, Steven Kapturowski, Thomas Keck, Iurii Kemaev, Michael King, Markus Kunesch, Lena Martens, Hamza Merzic, Vladimir Mikulik, Tamara Norman, George Papamakarios, John Quan, Roman Ring, Francisco Ruiz, Alvaro Sanchez, Laurent Sartran, Rosalia Schneider, Eren Sezener, Stephen Spencer, Srivatsan Srinivasan, Milo\u0161 Stanojevic\u00b4, Wojciech Stokowiec, Luyu Wang, Guangyao Zhou, and Fabio Viola. The DeepMind JAX Ecosystem, 2020.   \n[8] Guillaume Desjardins, Karen Simonyan, Razvan Pascanu, et al. Natural neural networks. Advances in neural information processing systems, 28, 2015.   \n[9] Jed A Duersch, Meiyue Shao, Chao Yang, and Ming Gu. A robust and efficient implementation of lobpcg. SIAM Journal on Scientific Computing, 40(5):C655\u2013C676, 2018.   \n[10] Negin Entezari, Saba A Al-Sayouri, Amirali Darvishzadeh, and Evangelos E Papalexakis. All you need is low (rank) defending against adversarial attacks on graphs. In Proceedings of the 13th international conference on web search and data mining, pages 169\u2013177, 2020.   \n[11] Farzan Farnia, Jesse M. Zhang, and David Tse. Generalizable adversarial training via spectral normalization. In 7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019. OpenReview.net, 2019.   \n[12] Shuhang Gu, Qi Xie, Deyu Meng, Wangmeng Zuo, Xiangchu Feng, and Lei Zhang. Weighted nuclear norm minimization and its applications to low level vision. International journal of computer vision, 121:183\u2013208, 2017.   \n[13] Shuhang Gu, Lei Zhang, Wangmeng Zuo, and Xiangchu Feng. Weighted nuclear norm minimization with application to image denoising. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 2862\u20132869, 2014.   \n[14] Cho-Jui Hsieh and Peder Olsen. Nuclear norm minimization via active subspace selection. In International Conference on Machine Learning, pages 575\u2013583. PMLR, 2014.   \n[15] William W Hsieh. Nonlinear principal component analysis by neural networks. Tellus A, 53(5):599\u2013615, 2001.   \n[16] Lei Huang, Dawei Yang, Bo Lang, and Jia Deng. Decorrelated batch normalization. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 791\u2013800, 2018.   \n[17] M Jaderberg, A Vedaldi, and A Zisserman. Speeding up convolutional neural networks with low rank expansions. In BMVC 2014-Proceedings of the British Machine Vision Conference 2014. British Machine Vision Association, 2014.   \n[18] Wei Jin, Yao Ma, Xiaorui Liu, Xianfeng Tang, Suhang Wang, and Jiliang Tang. Graph structure learning for robust graph neural networks. In Proceedings of the 26th ACM SIGKDD international conference on knowledge discovery & data mining, pages 66\u201374, 2020.   \n[19] Anton Johansson, Niklas Engsner, Claes Stranneg\u00e5rd, and Petter Mostad. Improved spectral norm regularization for neural networks. In Modeling Decisions for Artificial Intelligence: 20th International Conference, MDAI 2023, Ume\u00e5, Sweden, June 19\u201322, 2023, Proceedings, page 181\u2013201, Berlin, Heidelberg, 2023. Springer-Verlag.   \n[20] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.   \n[21] Thomas N. Kipf and Max Welling. Semi-supervised classification with graph convolutional networks. In International Conference on Learning Representations, 2017.   \n[22] Andrew V Knyazev. Toward the optimal preconditioned eigensolver: Locally optimal block preconditioned conjugate gradient method. SIAM journal on scientific computing, 23(2):517\u2013 541, 2001.   \n[23] Sandeep Kumar, Jiaxi Ying, Jos\u00e9 Vin\u00edcius de M Cardoso, and Daniel P Palomar. A unified framework for structured graph learning via spectral constraints. Journal of Machine Learning Research, 21(22):1\u201360, 2020.   \n[24] Rongjie Lai and Stanley Osher. A splitting method for orthogonality constrained problems. Journal of Scientific Computing, 58:431\u2013449, 2014.   \n[25] Shen Li and Bryan Hooi. Neural pca for flow-based representation learning. In Proceedings of the Thirty-First International Joint Conference on Artificial Intelligence, IJCAI-22, pages 3229\u20133235. International Joint Conferences on Artificial Intelligence Organization, 7 2022.   \n[26] Xin Liang, Li Wang, Lei-Hong Zhang, and Ren-Cang Li. On generalizing trace minimization principles. Linear Algebra and its Applications, 656:483\u2013509, 2023.   \n[27] Zhouchen Lin, Minming Chen, and Yi Ma. The augmented lagrange multiplier method for exact recovery of corrupted low-rank matrices. arXiv preprint arXiv:1009.5055, 2010.   \n[28] Dong C Liu and Jorge Nocedal. On the limited memory bfgs method for large scale optimization. Mathematical programming, 45(1):503\u2013528, 1989.   \n[29] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the wild. In Proceedings of International Conference on Computer Vision (ICCV), December 2015.   \n[30] Marc Masana, Joost van de Weijer, Luis Herranz, Andrew D. Bagdanov, and Jose M. Alvarez. Domain-adaptive deep network compression. In The IEEE International Conference on Computer Vision (ICCV), Oct 2017.   \n[31] Leon Mirsky. A trace inequality of john von neumann. Monatshefte f\u00fcr mathematik, 79(4):303\u2013 306, 1975.   \n[32] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral Normalization for Generative Adversarial Networks. 2 2018.   \n[33] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-performance deep learning library. Advances in neural information processing systems, 32, 2019.   \n[34] Michal Rolinek, Dominik Zietlow, and Georg Martius. Variational autoencoders pursue pca directions (by accident). In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 12406\u201312415, 2019.   \n[35] Axel Ruhe. Perturbation bounds for means of eigenvalues and invariant subspaces. BIT Numerical Mathematics, 10(3):343\u2013354, 1970.   \n[36] Matthias Seeger, Asmus Hetzel, Zhenwen Dai, Eric Meissner, and Neil D Lawrence. Autodifferentiating linear algebra. arXiv preprint arXiv:1710.08717, 2017.   \n[37] Aliaksandr Siarohin, Enver Sangineto, and Nicu Sebe. Whitening and coloring batch transform for gans. arXiv preprint arXiv:1806.00420, 2018.   \n[38] Kai Sun, Jiangshe Zhang, Hongwei Yong, and Junmin Liu. Fpcanet: Fisher discrimination for principal component analysis network. Knowledge-Based Systems, 166:108\u2013117, 2019.   \n[39] Lloyd N Trefethen and David Bau. Numerical linear algebra. SIAM, 2022.   \n[40] John von Neumann. Some matrix-inequalities and metrization of matrix-space. John von Neumann Collected Works, 1937.   \n[41] Wei Wang, Zheng Dang, Yinlin Hu, Pascal Fua, and Mathieu Salzmann. Backpropagationfriendly eigendecomposition. Advances in Neural Information Processing Systems, 32, 2019.   \n[42] Wei Wang, Yan Huang, Yizhou Wang, and Liang Wang. Generalized autoencoder: A neural network framework for dimensionality reduction. In Proceedings of the IEEE conference on computer vision and pattern recognition workshops, pages 490\u2013497, 2014.   \n[43] Zaiwen Wen and Wotao Yin. A feasible method for optimization with orthogonality constraints. Mathematical Programming, 142(1):397\u2013434, 2013.   \n[44] John Wright, Arvind Ganesh, Shankar Rao, Yigang Peng, and Yi Ma. Robust principal component analysis: Exact recovery of corrupted low-rank matrices via convex optimization. Advances in neural information processing systems, 22, 2009.   \n[45] Chenggang Yan, Zhisheng Li, Yongbing Zhang, Yutao Liu, Xiangyang Ji, and Yongdong Zhang. Depth image denoising using nuclear norm and learning graph model. ACM Transactions on Multimedia Computing, Communications, and Applications (TOMM), 16(4):1\u201317, 2020.   \n[46] Manzil Zaheer, Sashank Reddi, Devendra Sachan, Satyen Kale, and Sanjiv Kumar. Adaptive methods for nonconvex optimization. Advances in neural information processing systems, 31, 2018.   \n[47] Yanqiao Zhu, Weizhi Xu, Jinghao Zhang, Qiang Liu, Shu Wu, and Liang Wang. Deep graph structure learning for robust representations: A survey. arXiv preprint arXiv:2103.03036, 14:1\u20131, 2021. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "Appendix A More Experimental Results ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "A.1 Nuclear Norm Regularization ", "page_idx": 13}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/1a62477f88e373253020de045075395739fc08f2489aaa6cdd7bafd0f74f37b3.jpg", "img_caption": ["Figure 5: The convergence curve of the singular values. "], "img_footnote": [], "page_idx": 13}, {"type": "text", "text": "In this experiment, we present the convergence analysis of our amortized eigendecomposition approach concerning the accurate estimation of singular values. We tackle the nuclear norm regularization problem outlined in Eq. (17). In each iteration, we compare the diagonal elements of $U^{\\top}\\pmb{\\theta}^{\\top}\\pmb{\\theta}U$ with the exact singular values of $\\pmb{\\theta}$ . We conducted tests on $\\pmb{\\theta}$ of sizes $128\\times128$ , $256\\times256$ and $512\\times512$ . The mean square error (MSE) is depicted in Figure 5. ", "page_idx": 13}, {"type": "text", "text": "The results indicate that initially, the singular values obtained by our approach do not match the correct singular values within a small error. However, within just a few iterations, our approach rapidly converges to the correct values, demonstrating the effectiveness of the loss function in accurately estimating singular values. ", "page_idx": 13}, {"type": "text", "text": "A.2 Latent-space Principle Component Analysis ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In this task, we evaluate the latent-space PCA method as outlined in Eq. (19) using the MNIST dataset. The architecture for both the encoder and decoder mirrors that of the nuclear norm regularization model, with the exception that there is a linear projection $U U^{\\mathsf{T}}$ aligning with the direction of the principal components. We aim to extract the first two principal components in the latent space. ", "page_idx": 13}, {"type": "text", "text": "The experimental outcomes are depicted in Figure 6. Specifically, Figure 6 (a) displays the convergence trajectories for both the reconstruction loss and the eigenvalue loss as defined in Eq. (19). It is observed that the reconstruction loss curves for the conventional eigh function and our amortized eigendecomposition strategy are nearly indistinguishable. However, for the eigen-loss, our method initially registers lower values compared to the eigh function but eventually converges to equivalent values. This demonstrates the efficacy of the amortized optimization approach. ", "page_idx": 13}, {"type": "text", "text": "Figure 6(b) illustrates the distribution of features in the latent space along the two principal components for cases where $\\eta=0$ and $\\eta=1$ . The eigenvalues correspond to the total variance across the feature dimensions. Without regularization (when $\\eta=0$ ), the scales of the principal component axes can vary significantly. However, when regularization is applied (with $\\eta=0$ ), the distribution of the embedding becomes more uniform, indicating a more even spread across the principal components. ", "page_idx": 13}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/b5f5f1aacfef3a7e20e002117b98a4952b376db1bc3b599e530901543bef4f0d.jpg", "img_caption": ["Figure 6: Experimental results of Latent-space PCA on MNIST dataset. (a) Convergence curves. First column: Convergence curve of reconstruction loss. Second column: Convergence curve of eigen loss. (b) Principle components in latent space: The two principle components of features in latent space for $\\eta=0$ and $\\eta=1$ . (c) The sparsity of the network structure. The weight matrices of the second layer of the encoder. The color indicates the scale of the absolute values of the weight matrix ranging from 0 to 1. "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "The regularization applied to the eigenvalues also influences the sparsity of the network\u2019s architecture. This effect is depicted in Figure 6(c), which shows the weight matrix of the last layer in the encoder. When $\\eta=0$ , the network prioritizes learning weights that optimally reconstruct the images, resulting in a relatively dense weight configuration. Conversely, when $\\eta=0$ , the eigenvalues corresponding to the principal components are encouraged to concentrate on the first few, leading to a decline in variance for the subsequent components. This, in turn, promotes sparsity in the weight matrix, as the network assigns less importance to the less variable components. ", "page_idx": 14}, {"type": "text", "text": "A.3 Adversarial Attacks on Graph Convolutional Networks ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "This study investigates the robustness of graph convolutional networks (GCNs) [21] by conducting adversarial attacks on graph structures. These attacks involve perturbing the graph structure by randomly adding or removing edges in the adjacency matrix. To measure the magnitude of these perturbations, we introduce a contamination rate, which represents the ratio of the number of modified edges to the total number of node pairs. ", "page_idx": 14}, {"type": "text", "text": "For each adversarial scenario, we commence by randomly determining a contamination rate within the range of [0, 0.02] for the Cora and Citeseer datasets, and [0, 0.001] for the PubMed dataset. This rate dictates the proportion of edges to be randomly added or removed from the graph. A greater contamination rate signifies a more severe attack. The nodes are partitioned randomly into training, validation, and test sets with respective proportions of $60\\%$ , $20\\%$ , and $20\\%$ . The classification accuracy on the test set is then recorded. ", "page_idx": 14}, {"type": "text", "text": "The robustness of the GCN when subjected to graph contamination is illustrated in Figure 7. Each data point on the graph corresponds to a specific attack instance and its resultant test accuracy. Additionally, we have applied a polynomial regression with a 5th-degree basis to model the general trend of the relationship between the contamination rate and the test accuracy. The findings indicate that the graph convolutional network exhibits enhanced robustness when convolutions are applied to graph signals of a lower rank. ", "page_idx": 14}, {"type": "image", "img_path": "OYOkkqRLvj/tmp/8bb9fa906000a42b05a776802de6dfdb101d61bd4b469608653e8ca84ee80bce.jpg", "img_caption": ["Figure 7: Experimental results of graph structure adversarial attacking "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Appendix B Proofs ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In this section, we provide the proofs for our theoretical findings. ", "page_idx": 16}, {"type": "text", "text": "B.1 Preliminaries ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Lemma 1 (Jensen\u2019s inequality for convex functions). For a convex function $f$ , given n real numbers $x_{1},\\ldots,x_{n}$ and non-negative weights $w_{1},\\ldots,w_{n}$ such that $\\textstyle\\sum_{i=1}^{n}w_{i}\\,=\\,1$ , Jensen\u2019s inequality is expressed as: ", "page_idx": 16}, {"type": "equation", "text": "$$\nf\\left(\\sum_{i=1}^{n}w_{i}x_{i}\\right)\\geqslant\\sum_{i=1}^{n}w_{i}f\\left(x_{i}\\right).\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "The equality holds if and only if one of the following conditions is satisfied: ", "page_idx": 16}, {"type": "text", "text": "1. $f$ is linear;   \n2. $x_{i}$ \u2019s are equal;   \n3. one of $w_{i}$ \u2019s is one and the rest are zero. ", "page_idx": 16}, {"type": "text", "text": "B.2 Proof of Theorem 1 ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Theorem 1 (Trace inequality with weight matrix) Consider a $n$ -dimensional symmetric matrix $\\pmb{A}$ . Let $_M$ be a $k$ -dimensional diagonal matrix with elements $0<m_{1}<m_{2}\\cdot\\cdot<m_{k}$ . For an arbitrary matrix $U\\in\\mathbb{U}^{n\\times k}$ with orthogonal columns, the following inequality always holds: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{k}m_{k-i+1}\\lambda_{i}\\leqslant{\\mathsf{t r}}(M U^{\\top}A U)\\leqslant\\sum_{i=1}^{k}m_{i}\\lambda_{i}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "The equalities are achieved if and only if $U$ contains the eigenvectors corresponding to the $k$ largest (smallest) eigenvalues of $\\pmb{A}$ . ", "page_idx": 16}, {"type": "text", "text": "Proof. We can consider the case where $\\pmb{A}$ has all nonnegative eigenvalues $\\varepsilon_{j}\\geqslant0$ , without loss of generality, as we can always shift the diagonal elements of $\\pmb{A}$ to meet this condition: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{tr}\\left(M U^{\\top}A U\\right)=\\mathrm{tr}\\left(M U^{\\top}\\left(A+\\alpha I\\right)U\\right)-\\alpha\\sum_{i=1}^{k}m_{i}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Let $u_{i j}$ be the $i,j$ -th entry of $U$ . The Right-hand-side (RHS) of the leftmost inequality can be expressed as, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{RHS}=\\mathsf{t r}(M U^{\\top}A U)=\\sum_{i=1}^{k}\\sum_{l=1}^{n}\\sum_{j=1}^{n}m_{i}a_{j l}u_{j i}u_{l i}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "We denote the actual eigenvectors of $\\pmb{A}$ as $V$ with entries $\\{\\nu_{j l}\\}$ , and $\\{\\lambda_{s}\\},s\\,=\\,1,\\ldots,n$ as the eigenvalues, we have: ", "page_idx": 16}, {"type": "equation", "text": "$$\na_{j l}=\\sum_{s=1}^{n}\\lambda_{s}\\nu_{j s}\\nu_{l s}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Substituting this into (24), we obtain: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{RHS}=\\displaystyle\\sum_{i=1}^{k}\\displaystyle\\sum_{l=1}^{n}\\sum_{j=1}^{n}m_{i}\\left(\\displaystyle\\sum_{s=1}^{n}\\lambda_{s}\\nu_{j s}\\nu_{l s}\\right)u_{j i}u_{l i}}\\\\ &{\\qquad=\\displaystyle\\sum_{i=1}^{k}\\sum_{s=1}^{n}m_{i}\\lambda_{s}\\sum_{j=1}^{n}\\nu_{j s}u_{j i}\\displaystyle\\sum_{l=1}^{n}\\nu_{l s}u_{l i}}\\\\ &{\\qquad=\\displaystyle\\sum_{i=1}^{k}\\sum_{s=1}^{n}m_{i}\\lambda_{s}\\left(\\nu_{s}^{\\top}u_{i}\\right)\\nu_{s}^{\\top}u_{i}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "We define ", "page_idx": 17}, {"type": "equation", "text": "$$\ng_{s i}=\\pmb{\\nu}_{s}^{\\mathsf{T}}\\pmb{u}_{i}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "then the RHS becomes, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathrm{RHS}=\\sum_{i=1}^{k}\\sum_{s=1}^{n}m_{i}\\lambda_{s}g_{s i}^{2}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "and, ", "page_idx": 17}, {"type": "equation", "text": "$$\n0\\leqslant g_{s i}^{2}\\leqslant1.\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "It\u2019s worth noting that for any $s$ , ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{\\sum_{s=1}^{n}g_{s i}^{2}=\\sum_{s=1}^{n}\\mathbf{u}_{i}^{\\top}\\boldsymbol{\\nu}_{s}\\boldsymbol{\\nu}_{s}^{\\top}\\mathbf{u}_{i}}}\\\\ &{}&{=\\mathbf{tr}\\left(\\mathbf{u}_{i}^{\\top}V V^{\\top}\\mathbf{u}_{i}\\right)=1}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Thus we have, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathrm{RHS}=\\sum_{i=1}^{k}m_{i}\\left(\\sum_{s=1}^{n}\\lambda_{s}g_{s i}^{2}\\right)\\left(\\sum_{s=1}^{n}g_{s i}^{2}\\right)\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Applying the Cauchy-Schwartz inequality, we get, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathrm{RHS}\\geqslant\\sum_{i=1}^{k}m_{i}\\left(\\sum_{s=1}^{n}\\sqrt{\\lambda_{s}}g_{s i}^{2}\\right)^{2}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "The equality holds if and only if for all $s$ and a fixed $l$ , ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\frac{\\lambda_{s}g_{s i}^{2}}{g_{s i}^{2}}=\\mathrm{const.}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "or ", "page_idx": 17}, {"type": "equation", "text": "$$\ng_{s i}^{2}=0\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "This is only true when $g_{s i}$ are either 0 or 1, with at most one non-zero value for each $s$ and $i$ . In other words, $G\\,=\\,\\{g_{s i}\\}$ must be a permutation matrix. This implies that $U$ is equivalent to the eigenvectors of $V$ , albeit with a possible permutation. ", "page_idx": 17}, {"type": "text", "text": "Thus this inequality reaches a minimum if we rearrange the indices of the eigenvalues: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathrm{RHS}\\geqslant\\sum_{i=1}^{k}m_{i}\\lambda_{\\sigma(i)}\\geqslant\\sum_{i=1}^{k}m_{k-i+1}\\lambda_{i}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "The last inequality is a result of the rearrangement inequality. This completes the proof of the first inequality. ", "page_idx": 17}, {"type": "text", "text": "For the upper bound of Eq. (22), we apply the Cauchy-Schwartz inequality to Eq. (30) and obtain, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{\\mathrm{LHS}}\\leqslant\\sum_{i=1}^{k}m_{i}\\sqrt{\\sum_{s=1}^{n}\\lambda_{s}^{2}g_{s i}^{2}\\sum_{s=1}^{n}g_{s i}^{2}}}\\\\ &{}&{=\\displaystyle\\sum_{i=1}^{k}m_{i}\\sqrt{\\sum_{s=1}^{n}\\lambda_{s}^{2}g_{s i}^{2}}}\\\\ &{}&{\\leqslant\\displaystyle\\sum_{i=1}^{k}m_{i}\\lambda_{\\sigma(s)}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Here again, the Cauchy-Schwartz inequality achieves the maximum when $U$ is equivalent to the eigenvectors of $V$ , up to a possible permutation. By applying the rearrangement inequality, we further obtain the final bound: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathrm{LHS}\\leqslant\\sum_{i=1}^{k}m_{i}\\lambda_{i}.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "This yields the desired upper bound for the second inequality of the main result. ", "page_idx": 18}, {"type": "text", "text": "B.3 Proof of Theorem 2 ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Theorem 2 (Trace inequality with convex function) Let $\\pmb{A}$ be a given $n$ -dimensional symmetric matrix and let $U$ be a matrix of size $n\\times k$ that resides on the Stiefel manifold. Suppose $f:\\dot{\\mathbb{R}}\\rightarrow\\mathbb{R}$ be a monotonically increasing, convex function applied element-wise. The following inequalities hold: ", "page_idx": 18}, {"type": "equation", "text": "$$\nk\\left(f\\left(\\frac{1}{k}\\mathrm{tr}(\\boldsymbol{A})\\right)\\right)\\leqslant\\mathrm{tr}\\bigg(f\\big(\\boldsymbol{U}^{\\top}\\boldsymbol{A}\\boldsymbol{U}\\big)\\bigg)\\leqslant\\sum_{i=1}^{k}f(\\lambda_{i}),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "The rightmost inequality becomes an equality if and only if $U$ comprises the eigenvectors of $\\pmb{A}$ that correspond to the $k$ largest eigenvalues, The leftmost inequality is met with equality when $U$ is such that all diagonal elements of the matrix $U^{\\mathsf{T}}A{\\dot{U}}$ are equal. ", "page_idx": 18}, {"type": "text", "text": "Proof. The rightmost inequality We first focus on the rightmost inequality, which provides an upper bound for the convex trace loss. ", "page_idx": 18}, {"type": "text", "text": "To establish the rightmost inequality, let us consider the left-hand side (LHS) of the equation. Let\u2019s denote the diagonal elements of $\\pmb{A}$ as $\\{a_{j j}\\}$ . Consider the eigendecomposition of $\\pmb{A}$ as in Eq. (25), we can rewrite $a_{j j}$ in terms of the eigenvalues and eigenvectors: ", "page_idx": 18}, {"type": "equation", "text": "$$\na_{j l}=\\sum_{i=1}^{k}\\lambda_{i}\\nu_{j i}\\nu_{l i}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\nu_{j i}$ is the $(j,i)$ entry of its eigenvectors $V$ . The diagonal elements of the matrix product U TAU can then be written as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\Big(U^{\\top}A U\\Big)_{s s}=\\sum_{l=1}^{n}\\sum_{j=1}^{n}a_{j l}u_{l s}u_{j s}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Substituting this result back into the LHS, we have ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\lefteqn{R H S=\\sum_{s=1}^{n}f\\left(\\left(U^{\\top}A U\\right)_{s,s}\\right)}}\\\\ &{=\\displaystyle\\sum_{s=1}^{n}f\\left(\\sum_{l=1}^{n}\\sum_{j=1}^{n}a_{j l}u_{l s}u_{j s}\\right)}\\\\ &{=\\displaystyle\\sum_{s=1}^{n}f\\left(\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\sum_{i=1}^{k}\\lambda_{i}\\nu_{j i}\\nu_{i i}u_{l s}u_{j s}\\right)}\\\\ &{=\\displaystyle\\sum_{s=1}^{n}f\\left(\\sum_{i=1}^{k}\\lambda_{i}\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\nu_{j i}\\nu_{i i}u_{l s}u_{j s}\\right)}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We can express the summation of the elements in vector form as follows: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\sum_{i=1}^{k}\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\nu_{j i}\\nu_{l i}u_{l s}u_{j s}=\\sum_{i=1}^{k}u_{s}^{\\top}v_{i}v_{i}^{\\top}u_{s}}\\\\ &{\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad=\\mathsf{t r}(u_{s}^{\\top}V V^{\\top}u_{s})=1}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "For all indices $j,l$ and $s$ , all the addends satisfy: ", "page_idx": 19}, {"type": "equation", "text": "$$\n0\\leqslant\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\nu_{j i}\\nu_{l i}u_{l s}u_{j s}\\leqslant1,\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "which allows us to treat $\\begin{array}{r}{\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\nu_{j i}\\nu_{l i}u_{l s}u_{j s}}\\end{array}$ as a set of weights. By applying Jensen\u2019s inequality to the equation previously labeled as Eq. (49), we obtain: ", "page_idx": 19}, {"type": "equation", "text": "$$\nL H S\\leqslant\\sum_{i=1}^{k}f\\left(\\lambda_{i}\\right)\\sum_{s=1}^{n}\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\nu_{j i}\\nu_{l i}u_{l s}u_{j s}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Equality holds if and only if all the eigenvalues $\\{\\lambda_{i}\\}$ are identical, which is generally not the case for an arbitrary symmetric matrix $\\pmb{A}$ , or for each index $s$ , there exists an index $i$ such that, ", "page_idx": 19}, {"type": "equation", "text": "$$\n(\\pmb{u}_{s}^{\\mathsf{T}}\\pmb{v}_{i})^{2}=1,\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "with all other terms being zero. Therefore, $U$ must be a permutation of $V$ : ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\pmb{u}_{s}=\\pmb{v}_{\\sigma(i)}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Substituting this result back into Eq. (53), we obtain: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{k}f\\left(\\lambda_{i}\\right)\\sum_{s=1}^{n}\\sum_{l=1}^{n}\\sum_{j=1}^{n}\\nu_{j i}\\nu_{l i}u_{l s}u_{j s}\\leqslant\\sum_{i=1}^{k}f\\left(\\lambda_{\\sigma\\left(i\\right)}\\right)\\leqslant\\sum_{i=1}^{k}f\\left(\\lambda_{i}\\right)\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "With this, we conclude the derivation of the first inequality. ", "page_idx": 19}, {"type": "text", "text": "The leftmost inequality. For the leftmost inequality, ", "text_level": 1, "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\displaystyle{R H S=\\sum_{i=1}^{k}f\\left(\\sum_{l=1}^{n}\\sum_{j=1}^{n}a_{j l}u_{i l}u_{j}\\right)}}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\end{array}\\right.\\,=k\\sum_{i=1}^{k}{\\frac{1}{k}f\\left(\\sum_{l=1}^{n}\\sum_{j=1}^{n}a_{j l}u_{i l}u_{j}\\right)}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle{\\geqslant k f\\left({\\frac{1}{k}\\sum_{i=1}^{k}\\sum_{j=1}^{n}a_{j l}u_{i l}u_{j}}\\right)}}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\\\ {{\\displaystyle}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "the equality holds if and only if $\\textstyle\\sum_{j}u_{i j}^{*}u_{i j}a_{j j}$ equals for all $i$ . ", "page_idx": 19}, {"type": "text", "text": "A similar result for finding the $k$ smallest eigenvalues can be obtained. The next corollary states the results ", "page_idx": 19}, {"type": "text", "text": "Corollary (Trace inequality with concave function) Let $\\pmb{A}$ be a given n-dimensional symmetric matrix and let $U$ be a matrix of size $n\\times k$ that resides on the Stiefel manifold. Suppose $f:\\mathbb{R}\\rightarrow\\mathbb{R}$ be a monotonically increasing, concave function applied element-wise. The following inequalities hold: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{k}f(\\lambda_{i})\\leqslant\\mathrm{tr}\\Bigg(f\\big(U^{\\top}A U\\big)\\Bigg)\\leqslant k\\left(f\\left(\\frac1k\\mathrm{tr}(A)\\right)\\right),\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "The rightmost inequality becomes an equality if and only if $U$ comprises the eigenvectors of $\\pmb{A}$ that correspond to the $k$ smallest eigenvalues. ", "page_idx": 19}, {"type": "text", "text": "Appendix C Further Extensions ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "C.1 Related Work ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Eigensolver in numerical linear algebra Large-scale eigensolvers in numerical linear algebra usually involve two stages [39]. In the first stage, depending on whether the matrix is symmetric or not, either Arnoldi or Lanczos iteration is applied to reduce it into a matrix of smaller scale. Then, classical iteration methods such as power, inverse, and Rayleigh quotient iterations are applied to extract the eigensystem of the small-scale matrix. Compared to iterative solvers, our method is more easy to be integrated into the network training procedure. ", "page_idx": 20}, {"type": "text", "text": "Eigendecomposition via manifold optimization In the optimization community, especially manifold optimization [1], identifying the eigen-subspace or solving for eigendecomposition is often achieved by optimizing the original trace loss function in Eq. 6 or the Brockett\u2019s cost function in Eq. 8 respectively. Instead of parametrizing the matrix $U$ via QR decomposition, one usually solves the constraint optimization via gradient descent with retraction. Namely, in each iteration, one firstly performs one step of gradient descent from a $U$ on the Stiefel manifold and then uses a retraction to correct it back to the manifold. Some convergence guarantees to the critical point and linear convergence rate can be established under certain assumptions [1, 43]. Various methods exist, such as [24] introducing the splitting method and [43] proposing a Crank-Nicolson-like update scheme to preserve the orthogonal constraints. No matter which method is used, the computation bottleneck lies in preserving the orthogonal constraints similar to our amortized method. ", "page_idx": 20}, {"type": "text", "text": "Spectral normalization Spectral normalization is frequently added to improve the generalization ability of the neural network, i.e. CNN [11, 19] and GAN [32]. Compared to nuclear-norm regularization, spectral regularization only penalizes the largest absolute value of the eigenvalue so that the network outputs depend continuously on the input. Therefore no orthogonal constraint is enforced and the spectral norm can be more efficiently estimated based on the power iteration on a randomly initialized vector as in [32, 11]. ", "page_idx": 20}, {"type": "text", "text": "C.2 Extensions on the Amortized Eigendecomposition Approach ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Singular Value Decomposition Problem The singular value decomposition of a rectangular matrix $A\\in\\mathbb{R}^{m\\times n}$ can be achieved by solving the following objective: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{U\\in\\mathbb{U}^{n\\times k}}\\|A U M\\|_{\\mathrm{F}}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $\\|\\cdot\\|_{\\mathrm{F}}$ represent the Frobenius norm. The $i$ -th largest singular values can be obtained by $\\sigma_{i}=\\|A\\boldsymbol{u}_{i}\\|_{2}$ with $\\pmb{u}_{i}$ the $i$ -th column of optimal $U$ . ", "page_idx": 20}, {"type": "text", "text": "Generalized Eigendecomposition Problem Generalized eigendecomposition is an extension of conventional eigendecomposition to a pair of matrices, rather than just a single matrix. The generalized eigendecomposition can be formulated as follows: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\pmb{A}\\pmb{u}=\\varepsilon\\pmb{B}\\pmb{u}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $\\pmb{A}$ and $_B$ are square matrices of same dimensions in the complex field $\\mathbb{C}^{n\\times n}$ . The vector $\\textbf{\\em u}$ represents the eigenvector, and the scalar $\\varepsilon$ denotes the corresponding eigenvalue. Together, $(\\varepsilon,u)$ constitute the eigenpair of the generalized eigenvalue problem of the matrix pair $(A,B)$ . In a manner akin to prior problems, the resolution to this generalized version can be achieved through the optimization of the following objective function: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{U\\in\\mathbb{U}^{n\\times k}}\\sum_{i=1}^{k}m_{i}\\frac{{\\pmb u}_{i}^{\\top}{\\pmb A}{\\pmb u}_{i}}{{\\pmb u}_{i}^{\\top}{\\pmb B}{\\pmb u}_{i}}.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $m_{i}$ \u2019s are the weights as defined previously and $\\pmb{u}_{i}$ \u2019s are the orthonormal column vectors of $U$ . ", "page_idx": 20}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: The main claims consist of theoretical analysis of the loss functions which is stated in Thm. 1 and Thm. 2 and verifications of our method in numerical experiments are done in Sec. 5. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 21}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Justification: We show in the discussion section. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 21}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: All the assumptions are stated in Thm. 1 and Thm. 2 respectively and the proof is put in Sec. B. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 22}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: This is included in this paper in Sec. 5. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 22}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 23}, {"type": "text", "text": "Answer: [No] ", "page_idx": 23}, {"type": "text", "text": "Justification: Our code will be released upon acceptance. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 23}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: This is included in this paper in the Experiment section and Appendix A. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 23}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 23}, {"type": "text", "text": "Answer: [No] ", "page_idx": 23}, {"type": "text", "text": "Justification: The statistical significance may not be the primary focus. The evaluation and validation of our method rely on other metrics, such as accuracy and convergence rate. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 24}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: We have indicated the type of GPU in the Experiment section. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 24}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: this paper is conducted with the NeurIPS Code of Ethics. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 24}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 24}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 24}, {"type": "text", "text": "Justification: This paper is a pure theoretic paper instead of an application, thus no societal impacts is involved. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed. \u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. ", "page_idx": 24}, {"type": "text", "text": "\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 25}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 25}, {"type": "text", "text": "Answer: [No] ", "page_idx": 25}, {"type": "text", "text": "Justification: Not relevant to our research. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 25}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Justification: We have done this. CC-BY 4.0 ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 25}, {"type": "text", "text": "", "page_idx": 26}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Justification: We have done this. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 26}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 26}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 26}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 26}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 26}]