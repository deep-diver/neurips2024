[{"type": "text", "text": "Generalization Bound and Learning Methods for Data-Driven Projections in Linear Programming ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Shinsaku Sakaue Taihei Oki The University of Tokyo and RIKEN AIP Hokkaido University Tokyo, Japan Hokkaido, Japan sakaue@mist.i.u-tokyo.ac.jp oki@icredd.hokudai.ac.jp ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "How to solve high-dimensional linear programs (LPs) efficiently is a fundamental question. Recently, there has been a surge of interest in reducing LP sizes using random projections, which can accelerate solving LPs independently of improving LP solvers. This paper explores a new direction of data-driven projections, which use projection matrices learned from data instead of random projection matrices. Given training data of $n$ -dimensional LPs, we learn an $n\\times k$ projection matrix with $n>k$ . When addressing a future LP instance, we reduce its dimensionality from $n$ to $k$ via the learned projection matrix, solve the resulting LP to obtain a $k$ dimensional solution, and apply the learned matrix to it to recover an $n$ -dimensional solution. On the theoretical side, a natural question is: how much data is sufficient to ensure the quality of recovered solutions? We address this question based on the framework of data-driven algorithm design, which connects the amount of data sufficient for establishing generalization bounds to the pseudo-dimension of performance metrics. We obtain an $\\tilde{\\mathrm{O}}(n k^{2})$ upper bound on the pseudo-dimension, where $\\tilde{\\mathrm{O}}$ compresses logarithmic factors. We also provide an $\\Omega(n k)$ lower bound, implying our result is tight up to an $\\tilde{\\mathrm{O}}(k)$ factor. On the practical side, we explore two simple methods for learning projection matrices: PCA- and gradient-based methods. While the former is relatively efficient, the latter can sometimes achieve better solution quality. Experiments demonstrate that learning projection matrices from data is indeed beneficial: it leads to significantly higher solution quality than the existing random projection while greatly reducing the time for solving LPs. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Linear programming (LP) has been one of the most fundamental tools used in various industrial domains [23, 18], and how to address high-dimensional LPs efficiently has been a major research subject in operations research. To date, researchers have developed various fast LP solvers, most of which stem from the simplex or interior-point method. Recent advances include a parallelized simplex method [27] and a randomized interior-point method [16]. Besides the improvements in LP solvers, there has been a growing interest in reducing LP sizes via random projections [44, 37, 2], motivated by the success of random sketching in numerical linear algebra [48]. Such a projection-based approach is solver-agnostic in that it can work with any solvers, including the aforementioned recent solvers, for solving reduced-size LPs. This solver-agnostic nature is beneficial, especially considering that LP solvers have evolved in distinct directions of simplex and interior-point methods. ", "page_idx": 0}, {"type": "text", "text": "In the context of numerical linear algebra, there has been a notable shift towards learning sketching matrices from data, instead of using random matrices [28, 29, 12, 33, 40]. This data-driven approach is effective when we frequently address similar instances. The line of previous research has demonstrated that learned sketching matrices can greatly improve the performance of sketching-based methods. ", "page_idx": 0}, {"type": "text", "text": "1.1 Our contribution ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Drawing inspiration from this background, we study a data-driven projection approach for accelerating repetitive solving of similar LP instances, which often arise in practice [21] (see also Remark 3.2). Our approach inherits the solver-agnostic nature of random projections for LPs, and it can improve solution quality by learning projection matrices from past LP instances. Our contribution is a cohesive study of this data-driven approach to LPs from both theoretical and practical perspectives, as follows. ", "page_idx": 1}, {"type": "text", "text": "Generalization bound. We first formulate the task of learning projection matrices as a statistical learning problem and study the generalization bound. Specifically, we analyze the number of LPinstance samples sufficient for bounding the gap between the empirical and expected objective values attained by the data-driven projection approach. Such a generalization bound is known to depend on the pseudo-dimension of the class of performance metrics. We prove an $\\tilde{\\mathrm{O}}(n k^{2})$ upper bound on the pseudo-dimension (Theorem 4.4), where $n$ and $k$ are the original and reduced dimensionalities, respectively, and $\\tilde{\\mathrm{O}}$ compresses logarithmic factors. A main technical non-triviality lies in Lemma 4.3, which elucidates a piecewise polynomial structure of the optimal value of LPs as a function of input parameters. Besides playing a key role in proving Theorem 4.4, Lemma 4.3 offers general insight into the optimal value of LPs, which could have broader implications. We also give an $\\bar{\\Omega}(n k)$ lower bound on the pseudo-dimension (Theorem 4.5). As experiments demonstrate later, we can get high-quality solutions with $k$ much smaller than $n$ , suggesting our result, with only an $\\tilde{\\mathrm{O}}(k)$ gap, is nearly tight. ", "page_idx": 1}, {"type": "text", "text": "Learning methods. We then explore how to learn projection matrices in Section 5. We consider two simple learning methods based on principal component analysis (PCA) and gradient updates. The former efficiently constructs a projection matrix by extracting the top- $\\cdot k$ subspace around which optimal solutions of future instances are expected to appear. The latter, although more costly, directly improves the optimal value of LPs via gradient ascent. In Section 6, experiments on various datasets confirm that projection matrices learned by the PCA- and gradient-based methods can lead to much higher solution quality than random projection [2], while greatly reducing the time for solving LPs. ", "page_idx": 1}, {"type": "text", "text": "1.2 Related work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Random projections for LPs. Vu et al. [44] introduced a random-projection method to reduce the number of equality constraints, and Poirion et al. [37] extended it to inequality constraints. As discussed therein, reducing the number of inequality constraints of LPs corresponds to reducing the dimensionality (the number of variables) of dual LPs. Recently, Akchen and Mi\u0161i\u00b4c [2] developed a column-randomized method for reducing the dimensionality of LPs. While these studies provide high probability guarantees, we focus on data-driven projections and discuss generalization bounds. ", "page_idx": 1}, {"type": "text", "text": "Data-driven algorithm design. Data-driven algorithm design [7], initiated by Gupta and Roughgarden [25], has served as a foundational framework for analyzing generalization bounds of various data-driven algorithms [8, 10, 11, 12, 39, 9]. Our statistical learning formulation in Section 3 and a general proof idea in Section 4 are based on it. Among the line of studies, the analysis technique for data-driven integer-programming (IP) methods [10, 11] is close to ours. The difference is that while their technique is intended for analyzing IP methods (particularly, branch-and-cut methods), we focus on LPs and discuss a general property of the optimal value viewed as a function of input parameters. Thus, our analysis is independent of solution methods, unlike the previous studies. This aspect is crucial for analyzing our solver-agnostic approach. Some studies have also combined LP/IP methods with machine learning [14, 21, 41], while learning of projection matrices has yet to be studied. ", "page_idx": 1}, {"type": "text", "text": "Learning through optimization. Our work is also related to the broad stream of research on learning through optimization procedures [4, 47, 1, 13, 42, 36, 3, 20, 45, 19], which we discuss in Appendix A. ", "page_idx": 1}, {"type": "text", "text": "Notation. For a positive integer $n$ , let ${\\mathbf{I}}_{n}$ and ${\\bf0}_{n}$ be the $n\\times n$ identity matrix and the $n$ -dimensional all-zero vector, respectively, where we omit the subscript when it is clear from the context. For two matrices $\\pmb{A}$ and $_B$ with the same number of rows (columns), $\\left[A,B\\right]\\left(\\left[A;B\\right]\\right)$ denotes the matrix obtained by horizontally (vertically) concatenating $\\pmb{A}$ and $_B$ . ", "page_idx": 1}, {"type": "text", "text": "2 Reducing dimensionality of LPs via projection ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "We overview the projection-based approach for reducing the dimensionality of LPs [37, 2]. For ease of dealing with feasibility issues, we focus on the following inequality-form LP with input parameters ", "page_idx": 1}, {"type": "equation", "text": "$$\n{\\mathrm{maximize}}_{x\\in\\mathbb{R}^{n}}\\quad c^{\\top}x\\qquad{\\mathrm{subject~to}}\\quad A x\\leq b.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "When $n$ is large, restricting variables to a low-dimensional subspace can be helpful for computing an approximate solution to (1) quickly. Specifically, given a projection matrix $\\dot{P_{\\mathrm{~\\scriptsize~\\textit~{~\\textcent~}~}}}\\mathbb{R}^{n\\times k}$ with $n>k$ , we consider solving the following projected $L P$ , instead of (1): ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\operatorname{maximize}_{y\\in\\mathbb{R}^{k}}\\quad c^{\\top}P y\\qquad\\mathrm{subject}\\ \\tan\\quad A P y\\leq b.}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Once we get an optimal solution $\\boldsymbol{y}^{*}$ to the projected LP (2), we can recover an $n$ -dimensional solution, $\\tilde{\\boldsymbol{x}}=P\\boldsymbol{y}^{*}$ , to the original LP (1). Note that the recovered solution is always feasible for (1), although not always optimal. We measure the solution quality with the objective value $c^{\\top}\\tilde{\\pmb{x}}=c^{\\top}\\dot{P}\\dot{\\pmb{y}}^{*}$ . Ideally, if $_{P}$ \u2019s columns span a linear subspace that contains an optimal solution to (1), the recovered solution $\\tilde{\\boldsymbol{x}}=P\\boldsymbol{y}^{*}$ is optimal to (1) due to the optimality of $\\boldsymbol{y}^{*}$ to (2). Therefore, if we find such a good $_{P}$ close to being ideal with small $k$ , we can efficiently obtain a high-quality solution $\\tilde{\\boldsymbol{x}}=P\\boldsymbol{y}^{*}$ to (1) by solving the smaller projected LP (2). ", "page_idx": 2}, {"type": "text", "text": "Remark 2.1 (Solver-specific aspects). As mentioned in Section 1, this projection-based approach is solver-agnostic in that we can apply any LP solver to projected LPs (2). To preserve this nature, we focus on designing projection matrices and do not delve into solver-specific discussions. Experiments in Section 6 will use Gurobi as a fixed LP solver, which is a standard choice. Strictly speaking, projections alter the sparsity and numerical stability of projected LPs, which can affect the performance of solvers. This point can be important, especially when original LPs are sparse and solvers exploit the sparsity. Investigating how to take such solver-specific aspects into account is left for future work. ", "page_idx": 2}, {"type": "text", "text": "3 Data-driven projection ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "While the previous studies [44, 37, 2] have reduced LP sizes via random projections, we may be able to improve solution quality by learning projection matrices from data. We formalize this idea as a statistical learning problem. Let $\\Pi$ denote the set of all possible LP instances and $\\mathcal{D}$ an unknown distribution on \u03a0. Given LP instances sampled from $\\mathcal{D}$ , our goal is to learn $_{P}$ that maximizes the expected optimal value of projected LPs over $\\mathcal{D}$ . Below, we assume the following three conditions. ", "page_idx": 2}, {"type": "text", "text": "Assumption 3.1. (i) Every $\\pi\\in\\Pi$ takes the inequality form (1), (ii) ${\\boldsymbol{x}}=\\mathbf{0}_{n}$ is feasible for all $\\pi\\in\\Pi$ , and (iii) optimal values of all instances in $\\Pi$ are upper bounded by a finite constant $H>0$ . ", "page_idx": 2}, {"type": "text", "text": "Although Assumption 3.1 narrows the class of LPs we can handle, it is not as restrictive as it seems. Suppose for example that LP instances in $\\Pi$ have identical equality constraints. While such LPs in their current form do not satisfy (i), we can convert them into the inequality form (1) by considering the null space of the equality constraints (see Appendix C for details), hence satisfying (i). This conversion is useful for dealing with LPs of maximum-flow and minimum-cost-flow problems on a fixed graph topology, where we can remove the flow-conservation equality constraints by considering the null space of the incidence matrix of the graph. Regarding condition (ii), we may instead assume that there exists an arbitrary common feasible solution $\\pmb{x}_{0}$ without loss of generality. This is because we can translate the feasible region so that $\\pmb{x}_{0}$ coincides with the origin ${\\bf0}_{n}$ . Condition (ii) also implies that for any $P\\in\\mathbb{R}^{n\\times k}$ , projected LPs are feasible (i.e., their feasible regions are non-empty) since $\\pmb{y}=\\mathbf{0}_{k}$ is always feasible for any projected LPs. Condition (iii) is satisfied simply by focusing on bounded LPs (i.e., LPs with finite optimal values) and setting $H$ to the largest possible optimal value. Conditions (ii) and (iii) also ensure that the optimal value of projected LPs always lies in $[0,H]$ , which is used to derive a generalization bound in Section 4. In Section 6, we see that many problems, including packing and network flow problems, can be written as LPs satisfying Assumption 3.1. ", "page_idx": 2}, {"type": "text", "text": "Due to condition (i), we can identify each LP instance $\\pi\\in\\Pi$ with its input parameters $\\textstyle(c,A,b)$ in (1), i.e., $\\pi=(c,A,b)$ . For an LP instance $\\pi\\in\\Pi$ and a projection matrix $P\\in\\mathbb{R}^{n\\times k}$ , we define ", "page_idx": 2}, {"type": "equation", "text": "$$\nu(P,\\pi)=\\operatorname*{max}\\{\\,c^{\\top}P y\\,:\\,A P y\\leq b\\,\\}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "as the optimal value of the projected LP. Our goal is to learn $P\\in\\mathbb{R}^{n\\times k}$ from LP instances sampled from $\\mathcal{D}$ to maximize the expected optimal value on future instances, i.e., $\\mathbb{E}_{\\pi\\sim\\mathcal{D}}[u(P,\\pi)]$ . ", "page_idx": 2}, {"type": "text", "text": "Remark 3.2 (Validity of the setting). The above statistical learning setting regarding LP instances is not an artifact. As Fan et al. [21] discussed, LPs often serve as descriptive models, and each instance can be viewed as a realization of input parameters following some distribution. Such a scenario arises in, for example, daily production planning and flight scheduling. Note that the statistical learning setting is also widely used as a foundational framework in data-driven algorithm design [25, 8, 12, 9]. ", "page_idx": 2}, {"type": "text", "text": "4 Generalization bound ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "This section studies the generalization bound, namely, how many samples from $\\mathcal{D}$ are sufficient for guaranteeing that the expected optimal value, $\\mathbb{E}_{\\pi\\sim\\mathcal{D}}[\\dot{u}(P,\\pi)]$ , of learned $_{P}$ is close to the empirical optimal value on sampled instances. First, let us overview the basics of learning theory. Let $\\mathcal{U}\\subseteq\\mathbb{R}^{\\Pi}$ be a class of functions, where each $u\\in\\mathcal{U}$ takes some input $\\pi\\in\\Pi$ and returns a real value. We use the following pseudo-dimension [38] to measure the complexity of a class of real-valued functions. ", "page_idx": 3}, {"type": "text", "text": "Definition 4.1. Let $N$ be a positive integer. We say $\\mathcal{U}\\subseteq\\mathbb{R}^{\\Pi}$ shatters an input set, $\\left\\{\\pi_{1},...,\\pi_{N}\\right\\}\\subseteq\\Pi$ , if there exist threshold values, $t_{1},\\ldots,t_{N}\\in\\mathbb{R}$ , such that each of all the $2^{N}$ outcomes of $\\left\\{u(\\pi_{i})\\geq t_{i}\\;:\\right.$ $i=1,\\dots,N\\,\\}$ is realized by some $u\\in\\mathcal{U}$ . The pseudo-dimension of $\\boldsymbol{\\mathcal{U}}$ , denoted by $\\operatorname{pdim}(\\mathcal{U})$ , is the maximum size of an input set that $\\boldsymbol{\\mathcal{U}}$ can shatter. ", "page_idx": 3}, {"type": "text", "text": "In our case, the set $\\boldsymbol{\\mathcal{U}}$ consists of functions $u(P,\\cdot):\\Pi\\to\\mathbb{R}$ , defined in (3), for all possible projection matrices $P\\in\\mathbb{R}^{n\\times k}$ . Each $u(P,\\cdot)\\in\\mathcal{U}$ takes an LP instance $\\pi=(c,A,b)\\in\\Pi$ as input and returns the optimal value of the projected LP. Assumption 3.1 ensures that the range of $u(P,\\cdot)$ is bounded by $[0,H]$ for all $P\\in\\mathbb{R}^{n\\times k}$ . Thus, the well-known uniform convergence result (see, e.g., Anthony and Bartlett [5, Theorem 19.2] and Balcan [7, Theorem 29.2]) implies that for any distribution $\\mathcal{D}$ on $\\Pi,\\varepsilon>0$ , and $\\delta\\in(0,1)$ , if $N=\\Omega((H/\\varepsilon)^{2}(\\operatorname{pdim}(\\mathcal{U})+\\log(1/\\bar{\\delta})))$ instances drawn i.i.d. from $\\mathcal{D}$ are given, with probability at least $1-\\delta$ , for all $P\\in\\mathbb{R}^{n\\times k}$ , it holds that ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\left|\\frac{1}{N}\\sum_{i=1}^{N}u(\\pmb{P},\\pi_{i})-\\mathbb{E}_{\\pi\\sim\\mathcal{D}}[u(\\pmb{P},\\pi)]\\right|\\le\\varepsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "That is, if a projection matrix $_{P}$ produces high-quality solutions on $N\\approx(H/\\varepsilon)^{2}\\cdot\\mathrm{pdim}(\\mathcal{U})$ instances sampled i.i.d. from $\\mathcal{D}$ , it likely yields high-quality solutions on future instances from $\\mathcal{D}$ as well. Thus, analyzing $\\operatorname{pdim}(\\mathcal{U})$ of $\\mathcal{U}=\\left\\{\\,\\bar{u}(P,\\cdot):\\mathrm{\\check{\\Pi}}\\to\\mathbb{R}\\,\\,\\right\\}:P\\in\\mathbb{R}^{n\\times k}\\,\\}$ reveals the sufficient sample size. ", "page_idx": 3}, {"type": "text", "text": "Remark 4.2 (Importance of uniform convergence). While the above generalization bound is not the sole focus of learning theory, it is particularly valuable in data-driven algorithm design, as is also discussed in the literature [8, 10]. Note that (4) holds uniformly for all $\\mathbf{\\bar{\\boldsymbol{P}}}\\in\\mathbb{R}^{n\\times k}$ , offering performance guarantees regardless of how $_{P}$ is learned. Thus, we may select learning methods based on their empirical performance. This is helpful since there are no gold-standard methods for learning parameters of algorithms; we discuss learning methods for our case in Section 5. This situation differs from the standard supervised learning setting, where we minimize common losses, e.g., squared and logistic. Additionally, the uniform bound ensures that learned $_{P}$ does not overfti sampled instances. ", "page_idx": 3}, {"type": "text", "text": "4.1 Upper bound on $\\operatorname{pdim}(\\mathcal{U})$ ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Building upon the above learning theory background, a crucial factor for establishing the generalization bound is $\\operatorname{pdim}(\\mathcal{U})$ . To upper bound this, we give a structural observation of the optimal value of LPs (Lemma 4.3) and combine it with a general proof idea in data-driven algorithm design [25, 7]. ", "page_idx": 3}, {"type": "text", "text": "We first overview the general proof idea. Suppose that we have an upper bound on the number of outcomes of $\\{\\;u(P,\\pi_{i})\\geq t_{i}\\;:\\;i=1,.\\;.\\;.\\;,N\\;\\}$ that grows more slowly than $2^{N}$ . Since shattering $N$ instances requires $2^{N}$ outcomes, the largest $N$ , such that the upper bound is at least $2^{N}$ , serves as an upper bound on $\\operatorname{pdim}(\\mathcal{U})$ (intuitively, $\\mathrm{pdim}(\\mathcal{U})\\lesssim\\log_{2}$ (\u201cupper bound on the number of outcomes\u201d)). Below, we discuss bounding the number of outcomes, which is the most technically important step. ", "page_idx": 3}, {"type": "text", "text": "To examine the number of possible outcomes, we consider a fundamental question related to sensitivity analysis of LPs: how does the optimal value of an $L P$ behave when input parameters change?1 In our case, a projected LP has input parameters $(P^{\\dagger}c,A P,b)\\in\\mathbb{R}^{k}\\times\\mathbb{R}^{m\\times k}\\times\\mathbb{R}^{m}$ , where $P^{\\dagger}c$ and $A P$ change with $\\boldsymbol{P}\\in\\mathbb{R}^{n\\times k}$ . Thus, addressing this question offers insight into the number of outcomes. Lemma 4.3 provides an answer for a more general setting, which might find other applications beyond our case since learning through LPs is not limited to the projection-based approach [47, 13, 42, 20]. ", "page_idx": 3}, {"type": "text", "text": "Lemma 4.3. Let $t\\in\\mathbb R$ be a threshold value. Consider an $L P\\,\\tilde{\\pi}=(\\tilde{c},\\tilde{A},\\tilde{b})\\in\\mathbb{R}^{k}\\times\\mathbb{R}^{m\\times k}\\times\\mathbb{R}^{m}$ such that each entry of c\u02dc, $\\tilde{A}$ , and $\\tilde{b}$ is a polynomial of degree at most d in $\\nu$ real variables, $\\pmb\\theta\\in\\mathbb{R}^{\\nu}$ . ", "page_idx": 3}, {"type": "text", "text": "Assume that $\\tilde{\\pi}$ is bounded and feasible for every $\\pmb\\theta\\in\\mathbb{R}^{\\nu}$ . Then, there are up to $\\binom{m+2k}{2k}(m+2k+2)$ polynomials of degree at most $(2k+1)d$ in $\\pmb{\\theta}$ whose sign patterns $(<0,=0,$ , $o r>0_{.}$ ) partition $\\mathbb{R}^{\\nu}$ into some regions, and whether max $:\\{\\dot{{\\boldsymbol{c}}}^{\\top}{\\boldsymbol{y}}\\,:\\,\\tilde{A}{\\boldsymbol{y}}\\leq\\tilde{{\\boldsymbol{b}}}\\,\\}\\geq t$ or not is identical within each region. ", "page_idx": 4}, {"type": "text", "text": "Proof. First, we rewrite the L $\\mathsf{P}\\,\\tilde{\\pi}=(\\tilde{c},\\tilde{A},\\tilde{b})$ as an equivalent $2k$ -dimensional LP with non-negativity constraints: $\\operatorname*{max}\\{\\,\\tilde{c}^{\\top}(y^{+}-y^{-})\\;:\\;\\tilde{A}(y^{+}-y^{-})\\leq\\tilde{b},\\,[y^{+};y^{-}]\\geq0\\,\\}$ . The resulting constraint matrix, $A^{\\prime}:=[\\tilde{A},-\\tilde{A};-\\mathbf{I}_{2k}].$ , has full column rank, which simplifies the subsequent discussion. Note that the maximum degree of input parameters remains at most $d$ , while the sizes, $m$ and $k$ , increase to $m^{\\prime}:=m+2k$ and $k^{\\prime}:=2k$ , respectively. Below, we focus on the reformulated LP $(\\mathbf{c}^{\\prime},A^{\\prime},\\pmb{b}^{\\prime})\\in\\mathbb{R}^{k^{\\prime}}\\times\\mathbb{R}^{m^{\\prime}\\times k^{\\prime}}\\times\\mathbb{R}^{m^{\\prime}}$ , where $c^{\\prime}:=[\\tilde{c};-\\tilde{c}]$ , $b^{\\prime}:=[\\tilde{b};\\mathbf{0}_{2k}]$ , and $A^{\\prime}$ has full column rank. We consider determining $\\operatorname*{nax}\\{\\,c^{\\prime^{\\top}}y\\,:\\,A^{\\prime}y\\leq b^{\\prime}\\,\\}\\geq t$ or not by checking all vertices of the feasible region. For any size- $k^{\\prime}$ subset, $I\\subseteq\\{1,\\ldots,m^{\\prime}\\}$ , of row indices of $\\pmb{A}^{\\prime}\\in\\mathbb{R}^{m^{\\prime}\\times k^{\\prime}}$ , let $A^{\\prime}{}_{I}$ denote the $k^{\\prime}\\times k^{\\prime}$ submatrix of $A^{\\prime}$ with rows restricted to $I$ and $\\boldsymbol{b^{\\prime}}_{I}\\in\\mathbb{R}^{k^{\\prime}}$ the corresponding subvector of $b^{\\prime}$ . For every subset $I$ with det $A^{\\prime}{}_{I}\\neq0$ , let $y_{I}:=A^{\\prime}{}_{I}{}^{-1}b^{\\prime}{}_{I}$ . Since the LP is bounded and feasible, and $A^{\\prime}$ has full column rank, there is a vertex optimal solution written as ${\\pmb y}_{I}={\\pmb A^{\\prime}}_{I}{}^{-1}{\\pmb b^{\\prime}}_{I}$ for some $I$ (see the proof of Korte and Vygen [31, Proposition 3.1]). Thus, the optimal value is at least $t$ if and only if there exists at least one size- $k^{\\prime}$ subset $I$ with det $A^{\\prime}{}_{I}\\neq0$ , $A^{\\prime}\\Bar{\\b{y}}_{I}\\le\\b{b}^{\\prime}$ , and $c^{\\prime\\top}y_{I}\\geq t$ . ", "page_idx": 4}, {"type": "text", "text": "Based on the above observation, we identify polynomials whose sign patterns determine $\\operatorname*{max}\\lbrace c^{\\prime\\top}y:$ $A^{\\prime}y\\leq b^{\\prime}\\}\\geq t$ or not. For any subset $I$ , if det $A^{\\prime}{}_{I}\\neq0$ , Cramer\u2019s rule implies that ${\\pmb y}_{I}={\\pmb A^{\\prime}}_{I}{}^{-1}{\\pmb b^{\\prime}}_{I}$ is written as $f_{I}(\\pmb\\theta)/\\operatorname*{det}A^{\\prime}_{I}$ , where ${f}_{I}(\\pmb\\theta)$ is some $k^{\\prime}$ -valued polynomial vector of $\\pmb{\\theta}$ with degrees at most $k^{\\prime}d$ . Thus, we can check $A^{\\prime}y_{I}\\leq b^{\\prime}$ and $c^{\\prime\\top}y_{I}\\geq t$ by examining sign patterns of $m^{\\prime}+1$ polynomials, $A^{\\prime}f_{I}(\\theta)-(\\operatorname*{det}A^{\\prime}{}_{I})b^{\\prime}$ and $c^{\\prime\\top}f_{I}(\\theta)-\\dot{t}\\operatorname*{det}A^{\\prime}{}_{I}$ , whose degrees are at most $(k^{\\prime}+1)d$ . Considering all the $\\binom{m^{\\prime}}{k^{\\prime}}$ choices of $I$ , there are $\\binom{m^{\\prime}}{k^{\\prime}}(m^{\\prime}+2)$ polynomials of the form $\\operatorname*{det}{A^{\\prime}}_{I}$ , $A^{\\prime}f_{I}(\\theta)-(\\operatorname*{det}A^{\\prime}{}_{I})\\ddot{b^{\\prime}}$ , and $c^{\\prime\\top}f_{I}(\\theta)-t\\operatorname*{det}A^{\\prime}{}_{I}$ with degrees at most $(k^{\\prime}+1)d$ such that their sign patterns partition $\\mathbb{R}^{\\nu}$ into some regions, and ma $\\operatorname{x}\\{\\,{\\pmb{c}}^{\\prime\\top}{\\pmb{y}}\\,:\\,{\\pmb{A}}^{\\prime}{\\pmb{y}}\\leq{\\pmb{b}}^{\\prime}\\,\\}\\geq t$ or not is identical within each region. Substituting $m+2k$ and $2k$ into $m^{\\prime}$ and $k^{\\prime}$ , respectively, completes the proof. \u53e3 ", "page_idx": 4}, {"type": "text", "text": "Lemma 4.3 states that the outcome of whether $u(P,\\pi)=\\operatorname*{max}\\{\\,c^{\\top}P y\\,:\\,A P y\\leq b\\,\\}$ exceeds $t$ or not is determined by sign patterns of polynomials of $_{P}$ , and an upper bound on the sign patterns of polynomials is known as Warren\u2019s theorem [46], as detailed shortly. Combining them with the aforementioned general idea yields the following upper bound on $\\operatorname{pdim}(\\mathcal{U})$ . ", "page_idx": 4}, {"type": "text", "text": "Theorem 4.4. $\\operatorname{pdim}(\\mathcal{U})=\\operatorname{O}(n k^{2}\\log m k)$ . ", "page_idx": 4}, {"type": "text", "text": "Proof. Let $(\\pi,t)\\in\\Pi\\times\\mathbb{R}$ be a pair of an LP instance and a threshold value. Setting $\\theta=P$ and $d=1$ in Lemma 4.3, we have up to $\\binom{m+2k}{k}(m+2k+2)$ polynomials of degree at most $2k+1$ whose sign patterns determine whether $u(\\boldsymbol{P},\\pi)\\geq t$ or not. Thus, given $N$ pairs of input instances and threshold values, $(\\pi_{i},t_{i})_{i=1}^{N}$ , we have up to $N\\times\\binom{m+2k}{2k}(m+2k+2)$ polynomials whose sign patterns determine $u(\\boldsymbol{P},\\pi_{i})\\geq t_{i}$ or not for all $i=1,\\ldots,N$ , i.e., outcomes of instances. ", "page_idx": 4}, {"type": "text", "text": "Warren\u2019s theorem states that given $\\ell$ polynomials of $\\nu$ variables with degrees at most $\\Delta$ , the number of all possible sign patterns is at most $\\left(\\bar{8}\\mathrm{e}\\ell\\bar{\\Delta}/\\nu\\right)^{\\nu}$ [46] (see also Goldberg and Jerrum [24, Corollary 2.1]). avsaer,i atbhlee sn u( \u2019bse re notfr ipeso)l yannod mdieaglsr eiess $\\ell=N\\times{\\binom{m+2k}{2k}}(m+2k+2)$ , naunmd beearc ohf  oafl lt hpeosms ihbales $\\nu=n k$ $_P$ $\\Delta=2k+1$ outcomes is at most $\\begin{array}{r}{\\left(8\\mathrm{e}N\\binom{m+2k}{2k}\\frac{(m+2k+2)(2k+1)}{n k}\\right)^{n k}\\lesssim\\left(\\frac{N}{n k}\\right)^{n k}\\mathrm{poly}(m,k)^{n k^{2}}}\\end{array}$ . To shatter the set of $N$ instances, the right-hand side must be at least $2^{N}$ . Taking the base-2 logarithm, it must hold that $N\\lesssim n k\\log_{2}{\\frac{N}{n k}}+{\\tilde{\\mathrm{O}(n k^{2}\\log m k)}}\\leq{\\textstyle{\\frac{2}{3}}}N+\\mathrm{O}(n k^{2}\\log m k)$ , where we used $x\\log_{2}{\\frac{1}{x}}\\leq{\\frac{2}{3}}$ for $x>0$ Therefore, $\\boldsymbol{\\mathcal{U}}$ can shatter $\\mathrm{O}(n k^{2}\\log m k)$ instances, obtaining the desired bound on $\\operatorname{sdim}(\\mathcal{U})$ \uff1a\u53e3 ", "page_idx": 4}, {"type": "text", "text": "4.2 Lower bound on p $\\dim(\\mathcal{U})$ ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "We then provide an $\\Omega(n k)$ lower bound on $\\operatorname{pdim}(\\mathcal{U})$ to complement the above $\\tilde{\\mathrm{O}}(n k^{2})$ upper bound, implying the tightness up to an $\\tilde{\\mathrm{O}}(k)$ factor. See Appendix $\\textbf{B}$ for the proof. ", "page_idx": 4}, {"type": "text", "text": "Theorem 4.5. $\\mathrm{pdim}(\\mathcal{U})=\\Omega(n k)$ . ", "page_idx": 4}, {"type": "text", "text": "Our proof indeed gives the same lower bound on the $\\gamma$ -fat shattering dimension for $\\gamma<1/2$ , which implies a lower bound of $\\Omega(n k/\\varepsilon)$ on $N$ , the sample size needed to guarantee (4) [5, Theorem 19.5]. Thus, in terms of the sample complexity, our result is tight up to an $\\tilde{\\mathrm{O}}(k/\\varepsilon)$ factor. The $1/\\varepsilon$ gap is inevitable in general [5, Section 19.5], while closing the $\\tilde{\\mathrm{O}}(k)$ gap is an interesting open problem. ", "page_idx": 5}, {"type": "text", "text": "5 Learning methods ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We then discuss how to learn projection matrices from training datasets. From the bound (4), given $N$ training LP instances, the expected solution quality on future instances likely remains within the range of $\\pm\\varepsilon$ from the empirical one, where $\\varepsilon\\lesssim H\\sqrt{\\mathrm{pdim}(\\mathcal{U})/N}\\lesssim H k\\sqrt{n/N}$ due to Theorem 4.4, regardless of how we learn a projection matrix $_{P}$ . Therefore, in practice, we only need to find an empirically good projection matrix $_{P}$ , which motivates us to explore various ideas for learning $_{P}$ . Below, we discuss two natural ideas: PCA- and gradient-based methods. ", "page_idx": 5}, {"type": "text", "text": "Remark 5.1 (Training time). We emphasize that learning methods are used only before addressing future LP instances and not once a projection matrix $_{P}$ is learned. Hence, they can take much longer than the time for solving new LP instances. Similarly, we suppose that optimal solutions to training instances are available, as we can compute them a priori. Note that similar premises are common in most data-driven algorithm research [28, 14, 12, 9, 21, 41]. Considering this, our learning methods are primarily intended for conceptual simplicity, not for efficiency. For completeness, we present the theoretical time complexity and the training time taken in the experiments in Appendix E. ", "page_idx": 5}, {"type": "text", "text": "5.1 PCA-based method ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "As described in Section 2, a projection matrix $_{P}$ should preferably have columns that span a lowdimensional subspace around which future optimal solutions will appear. Hence, a natural idea is to use PCA to extract such a subspace, regarding optimal solutions to training instances as data points. ", "page_idx": 5}, {"type": "text", "text": "Formally, let $\\pmb{X}\\in\\mathbb{R}^{N\\times n}$ be a matrix whose ith row is an optimal solution to the ith training instance. We apply PCA to this $\\mathbf{\\deltaX}$ . Specifically, we subtract the mean, $\\begin{array}{r}{\\bar{\\pmb{x}}=\\frac{1}{N}{\\pmb X}^{\\top}\\mathbf{1}_{N}}\\end{array}$ , from each row of $\\mathbf{\\deltaX}$ and apply the singular value decomposition (SVD) to $X-{\\mathbf{1}}_{N}\\bar{\\pmb{x}}^{\\top}$ , obtaining a decomposition of the form $U\\Sigma V^{\\top}=\\mathbf{\\mathbf{\\mathbf{X}}}-\\mathbf{\\mathbf{1}}_{N}{\\bar{\\mathbf{x}}}^{\\top}$ . Let $V_{k-1}\\in\\mathbb{R}^{n\\times(k-1)}$ be the submatrix of $V$ whose columns are the top- $(k-1)$ right-singular vectors of $X-{\\bf1}_{N}\\bar{\\pmb{x}}^{\\top}$ . We use $P=[\\bar{\\pmb{x}},V_{k-1}]\\in\\mathbb{R}^{n\\times k}$ as a projection matrix. Here, $\\bar{\\pmb{x}}$ is concatenated due to the following consideration: since $V_{k-1}$ is designed to satisfy $V_{k-1}Y^{\\prime}\\approx X^{\\top}-\\bar{\\mathbf{x}}\\mathbf{1}_{N}^{\\top}$ for some $\\mathbf{\\cal{Y}}^{\\prime}\\in\\mathbb{R}^{(k-1)\\times N}$ , we expect $[\\bar{\\pmb{x}},V_{k-1}]\\pmb{Y}\\approx\\pmb{X}^{\\top}$ to hold for some $\\boldsymbol{Y}\\in\\mathbb{R}^{k\\times N}$ , hence ${\\cal P}=[\\bar{x},V_{k-1}]$ . This method is not so costly when optimal solutions to training LP instances are given, as it only requires finding the top- $\\!\\left(k-1\\right)$ right-singular vectors of $X-{\\bf1}_{N}\\bar{\\pmb{x}}^{\\bar{1}}$ . ", "page_idx": 5}, {"type": "text", "text": "5.2 Gradient-based method ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "While the PCA-based method aims to extract the subspace into which future optimal solutions are likely to fall, it only uses optimal solutions and discards input parameters of LPs. As a complementary approach, we provide a gradient-based method that directly improves the optimal value of LPs. ", "page_idx": 5}, {"type": "text", "text": "As a warm-up, consider maximizing $u(P,\\pi)=\\operatorname*{max}\\{\\,c^{\\top}P y\\,:\\,A P y\\leq b\\,\\}$ of a single LP instance $\\pi=(c,A,b)$ via gradient ascent. Assume that the projected LP satisfies a regularity condition, which requires the existence of an optimal solution $\\boldsymbol{y}^{*}$ at which active constraints are linearly independent. Then, $u(P,\\pi)$ is differentiable in $_{P}$ and the gradient is expressed as follows [42, Theorem 1] (see Appendix D for details of the derivation): ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\nabla u(P,\\pi)={c}{\\pmb{y}}^{*}{}^{\\top}-{\\pmb{A}}^{\\top}{\\pmb{\\lambda}}^{*}{\\pmb{y}}^{*}^{\\top},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\pmb{\\lambda}^{*}\\in\\mathbb{R}^{m}$ is a dual optimal solution. Thus, we can use the gradient ascent method to maximize $u(P,\\pi)$ under the regularity condition. However, this condition is sometimes prone to be violated, particularly when Slater\u2019s condition does not hold (i.e., there is no strictly feasible solution). For example, if the original LP has a constraint ${\\boldsymbol{x}}\\geq\\mathbf{0}_{n}$ and every column of $_{P}$ has opposite-sign entries, it is likely that only $\\pmb{y}=\\mathbf{0}_{k}$ satisfies $\\pmb{P}\\pmb{y}\\ge\\mathbf{0}_{n}$ by equality, which is the unique optimal solution but not strictly feasible. In this case, the regularity condition is violated since all rows of $P\\in\\mathbb{R}^{n\\times k}$ are active at $\\mathbf{0}_{k}$ and linearly dependent due to $n>k$ . To alleviate this issue, we apply the following projection for $j=1,\\dots,k$ before computing the gradient in (5): ", "page_idx": 5}, {"type": "table", "img_path": "jHh804fZ5l/tmp/d3b25944bcd69937c9f1f24e1a07053a78de000ff18197a328fc936b2cefe6f9.jpg", "table_caption": ["Table 1: Sizes of inequality-form LPs, where $m$ $(n)$ represents the number of constraints (variables). "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r}{P_{:,j}\\leftarrow\\arg\\operatorname*{min}_{\\pmb{x}\\in\\mathbb{R}^{n}}\\{\\|\\pmb{x}-P_{:,j}\\|_{2}\\,:\\,\\pmb{A x}\\leq b\\,\\},}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where $P_{:,j}$ denotes the $j$ th column of $_{P}$ . This minimally changes each column $P_{:,j}$ to satisfy the original constraints. Consequently, any convex combination of $_{P}$ \u2019s columns is feasible for the original LP, increasing the chance that there exists a strictly feasible solution in $\\{\\,\\pmb{y}\\in\\mathbb{R}^{k}\\;:\\;A P\\pmb{y}\\leq\\pmb{b}\\,\\}$ , although it is not guaranteed. This improves the likelihood that the regularity condition is satisfied. ", "page_idx": 6}, {"type": "text", "text": "Given $N$ training instances, $\\pi_{1},\\ldots,\\pi_{N}$ , we repeatedly update $_{P}$ as with SGD: for each $\\pi_{i}$ , we iterate to compute the gradient (5) and to update $_{P}$ with it. The projection (6) onto the feasible region of $\\pi_{i}$ comes before computing the gradient for $\\pi_{i}$ . We call this method SGA (stochastic gradient ascent). ", "page_idx": 6}, {"type": "text", "text": "5.3 Final projection for feasibility ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The previous discussion suggests that making each column of $_{P}$ feasible for training LP instances can increase the likelihood that future LP instances projected by $_{P}$ will have strictly feasible solutions. Considering this, after obtaining a projection matrix $_{P}$ with either the PCA- or gradient-based method, we project each column of $_{P}$ onto the intersection of the feasible regions of training LP instances, which we call the final projection. This can be done similarly to (6) replacing the constraints with $[{\\pmb A}_{1};...;{\\pmb A}_{N}]{\\pmb x}\\,\\stackrel{\\cdot}{\\leq}\\,[{\\pmb b}_{1};...;{\\pmb b}_{N}]$ . If $A_{1},\\ldots,A_{N}$ are identical, we can do it more efficiently by replacing the constraints with $\\pmb{A}_{1}\\pmb{x}\\leq\\operatorname*{min}\\{\\pmb{b}_{1},\\dots,\\pmb{b}_{N}\\}$ , where the minimum is taken element-wise. Note that although the final projection can be costly for large $N$ , we need to do it only once at the end of learning $_{P}$ . This final projection never fails since ${\\bf0}_{n}$ is always feasible as in Assumption 3.1. ", "page_idx": 6}, {"type": "text", "text": "6 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We experimentally evaluate the data-driven projection approach.2 We used MacBook Air with Apple M2 chip, 24 GB of memory, and macOS Sonoma 14.1. We implemented algorithms in Python 3.9.7 with NumPy 1.23.2. We used Gurobi 10.0.1 [26] for solving LPs and computing projection in (6). We used the following three synthetic and five realistic datasets, each of which consists of $300\\,\\mathrm{LP}$ instances (200 for training and 100 for testing). Table 1 summarizes LP sizes of the eight datasets.3 ", "page_idx": 6}, {"type": "text", "text": "Synthetic datasets. We consider three types of LPs representing packing, maximum flow, and minimum-cost flow problems, denoted by Packing, MaxFlow, and MinCostFlow, respectively. A packing problem is an LP with non-negative parameters c, $\\pmb{A}$ , and $^{b}$ . We created a base instance by drawing their entries from the uniform distribution on $[0,1]$ and multiplying $^{b}$ by $n$ . We then obtained 300 random instances by multiplying all input parameters by $1+\\omega$ , where $\\omega$ was drawn from the uniform distribution on $[0,0.1]$ . To generate MaxFlow and MinCostFlow LPs, we first randomly created a directed graph with 50 vertices and 500 arcs and fixed source and sink vertices, denoted by $s$ and $t$ , respectively. We confirmed there was an arc from $s$ to $t$ to ensure feasibility. We set base arc capacities to 1, which we perturbed by multiplying $1+\\omega$ with $\\omega$ drawn from the uniform distribution on $[0,0.1]$ , thus obtaining 300 MaxFlow instances. For MinCostFlow, we set supply at $s$ and demand at $t$ to 1. We set base arc costs to 1 for all arcs but $(s,t)$ , whose cost was fixed to be large enough, and perturbed them similarly using $1+\\omega$ to obtain 300 MinCostFlow instances. We transformed MaxFlow and MinCostFlow instances into equivalent inequality-form LPs with a method given in Appendix C, which requires a (trivially) feasible solution $\\pmb{x}_{0}$ . For MaxFlow, we used $\\mathbf{\\boldsymbol{x}}_{0}=\\mathbf{0}$ (i.e., no flow) as a trivially feasible solution. For MinCostFlow, we let $\\pmb{x}_{0}$ be all zeros but a single 1 at the entry corresponding to $(s,t)$ , which is a trivially feasible (but costly) solution. ", "page_idx": 6}, {"type": "text", "text": "Realistic datasets. We used five LPs in Netlib [15], GROW7, ISRAEL, SC205, SCAGR25, and STAIR. For each, we generated datasets of 300 random instances. To create realistic datasets, we made them contain $2\\%$ of outliers as follows. For normal $98\\%$ data points, we perturbed coefficients of objective functions by multiplying $1+0.1\\omega$ , where $\\omega$ was drawn from the normal distribution; for $2\\%$ outliers, we perturbed them by multiplying $1+\\omega$ , i.e., 10 times larger noises. Except for ISRAEL, the LPs have equality constraints. We transformed them into inequality-form LPs as described in Appendix C, using $\\pmb{x}_{0}$ found by the initialization procedure of Gurobi\u2019s interior-point method.4 ", "page_idx": 7}, {"type": "text", "text": "Methods. We compared four methods, named Full, ColRand, PCA, and SGA. The first two are baseline methods, while the latter two are our data-driven projection methods. Note that all four methods solved LPs with Gurobi, the state-of-the-art commercial solver. The only difference among them lies in how to reduce the dimensionality of LPs, as detailed below. ", "page_idx": 7}, {"type": "text", "text": "Full: a baseline method that returns original $n$ -dimensional LPs without reducing the dimensionality. ", "page_idx": 7}, {"type": "text", "text": "ColRand: a column-randomized method based on the work by Akchen and Mi\u0161ic\u00b4 [2], which reduces the dimensionality by selecting $k$ out of $n$ variables randomly and fixing the others to zeros. ", "page_idx": 7}, {"type": "text", "text": "PCA: the PCA-based method that reduces the dimensionality with a projection matrix $_{P}$ learned as in Section 5.1, followed by the final projection described in Section 5.3. ", "page_idx": 7}, {"type": "text", "text": "SGA: the gradient-based method that learns $_{P}$ as described in Section 5.2, followed by the final projection as with PCA. We initialized $_{P}$ with that obtained by PCA and conducted a single epoch of training, setting the learning rate to 0.01.5 ", "page_idx": 7}, {"type": "text", "text": "For ColRand, PCA, and SGA, we used increasing values of the reduced dimensionality, $k\\,=$ $\\textstyle\\left\\lfloor{\\frac{n}{1.00}}\\right\\rfloor,2\\left\\lfloor{\\frac{n}{1.00}}\\right\\rfloor,\\dots$ 1n00 , . . . , until it reached the maximum value no more than 1n0 , i.e., up to 10% of the original dimensionality. PCA and SGA learned projection matrices $\\bar{P}$ from $N\\,=\\,200$ training instances, which were then used to reduce the dimensionality of 100 test instances. For ColRand, we tried 10 independent choices of $k$ variables and recorded the average and standard deviation. ", "page_idx": 7}, {"type": "text", "text": "Results. Figure 1 shows how the solution quality and running time of Gurobi differ among the four methods, where \u201cobjective ratio\u201d means the objective value divided by the optimal value computed by Full. For all datasets except STAIR, PCA and/or SGA with the largest $k$ achieved about $95\\%$ to $99\\%$ objective ratios, while being about 4 to 70 times faster than Full. Regarding STAIR, PCA and SGA attained $13.1\\%$ and $51.2\\%$ objective ratios, respectively. By stark contrast, ColRand resulted in objective ratios close to zero in most cases except for Packing and ISRAEL. The results suggest that given informative training datasets, data-driven projection methods can lead to significantly better solutions than the random projection method. Regarding running times, there were differences between PCA/SGA and ColRand, which were probably caused by the numerical property of Gurobi. Nonetheless, all of the three were substantially faster than Full. In summary, the data-driven projection methods achieve high solution quality while greatly reducing the time for solving LPs. ", "page_idx": 7}, {"type": "text", "text": "Comparing PCA and SGA, SGA achieved better objectives than PCA in Packing, MaxFlow, MinCostFlow, and STAIR, while performing similarly in GROW7 and SC205. In ISRAEL and SCAGR25, SGA was worse than PCA, but this is not surprising since optimizing $u(P,\\pi)$ is a non-convex problem. The results suggest that no method could be universally best. Fortunately, the generalization bound (4) justifies selecting a learning method based on empirical performance. Specifically, if we adopt a learning method that produces $_{P}$ with the best empirical performance on $N$ instances at hand, its expected performance on future instances is likely to stay within the range of $\\pm\\varepsilon$ of the empirical one, where $\\varepsilon\\lesssim H\\sqrt{\\mathrm{pdim}(\\mathcal{U})/N}\\lesssim H k\\sqrt{n/N}$ since $\\mathrm{pdim}(\\mathcal{U})=\\tilde{\\mathrm{O}}(n k^{2})$ due to Theorem 4.4. If $N$ is sufficiently large, the high empirical performance is expected to be maintained on future instances. ", "page_idx": 7}, {"type": "text", "text": "Additionally, we examined the effect of the noise strength on the performance of PCA and SGA using the synthetic datasets. The details of the experiment and the results are shown in Appendix G. Therein, we found that PCA and SGA were robust against noise on capacities and costs in MaxFlow and MinCostFlow datasets. This is probably because they can exploit fixed topologies of underlying graphs, even if the capacities and costs are largely perturbed. Fixed graph topologies are common in realworld LPs, such as those appear in transportation planning. Our data-driven projection methods can be effective in such scenarios, particularly if sufficiently large datasets of such LP instances are available. ", "page_idx": 7}, {"type": "image", "img_path": "jHh804fZ5l/tmp/317e0e71702b9e7e0d2efd85eb1d857ab6fbe46d3efad17a5a7278ae1032acb1.jpg", "img_caption": ["Figure 1: Plots of objective ratios (upper) and Gurobi\u2019s running times (lower, semi-log) for Full, ColRand, PCA, and SGA averaged over 100 test instances. The error band of ColRand indicates the standard deviation over 10 independent trials. The results of Full are shown for every $k$ for reference, although it always solves $n$ -dimensional LPs and hence is independent of $k$ . "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "7 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We have studied the data-driven projection approach to LPs. We have established a generalization bound by proving an $\\tilde{\\mathrm{O}}(n k^{2})$ upper bound on the pseudo-dimension and complemented it by an $\\Omega(n k)$ lower bound. We have also proposed PCA- and gradient-based learning methods and experimentally evaluated them. Our theoretical and empirical findings lay the groundwork for the further development of the data-driven approach to LPs and contribute to the broader trend of AI/ML for optimization [43]. ", "page_idx": 8}, {"type": "text", "text": "8 Limitations and discussions ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Our work is limited to the statistical learning setting with assumptions on LP instances (see Section 3 and Assumption 3.1). In particular, the current approach cannot deal with equality constraints varying across instances since they usually make LP instances have no common feasible solution. Despite the narrowed applicability, we believe our setting is a reasonable starting point for developing the datadriven projection approach to LPs, as is also discussed in Remark 3.2 and the paragraph following Assumption 3.1. Overcoming these limitations will require more involved methods, such as training neural networks to extract meaningful low-dimensional subspaces from non-i.i.d. messy LP instances. ", "page_idx": 8}, {"type": "text", "text": "Our learning methods are not efficient, and applying them to huge LPs in practice might be challenging. Similar challenges are common in most data-driven algorithm research, as discussed in Remark 5.1, and we believe our conceptually simple learning methods are helpful for future research. Regarding the data-driven approach to low-rank approximation, Indyk et al. [29] found that a few-shot learning method is useful for efficiently learning sketching matrices. A key ingredient in their method is a surrogate loss, which enjoys a consistency guarantee and whose gradient can be computed efficiently. Empirically, they found that minimizing this loss through only a few iterations of SGD yields a good sketching matrix. We expect that similar ideas will be effective for learning projection matrices for LPs efficiently, while how to design surrogate losses in our setting is left for future work. For the same reason, our experiments are limited to moderate-size LPs, as mentioned in Footnote 3. Nevertheless, the results sufficiently serve as a proof of concept of the data-driven projection approach. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "There also exist general limitations of the projection-based approach [44, 37, 2]. First, it does not consider solver-specific aspects, including numerical stability and sparsity, as discussed in Remark 2.1. Second, the projection-based approach has a limited impact on the theoretical time complexity. The theoretical time complexity of the projection-based approach is dominated by two factors: multiplying $_{P}$ to reduce the dimensionality and solving the projected LP. Recent theoretical studies have revealed that solving an LP takes asymptotically the same computation time as matrix multiplication [17, 30], suggesting projections may not contribute to improving the total theoretical time complexity. Nevertheless, the projection-based approach leads to dramatic speedups in practice, as in Figure 1. Moreover, it can be even faster beyond the theoretical implications when GPUs are available. It is noteworthy that the projection-based approach largely beneftis from GPUs, as matrix multiplication can be highly parallelized. An exciting future direction is to combine recent GPU-implemented LP solvers [6, 34, 35] with projections, which will have vast potential for solving huge LPs efficiently. Exploring data-driven projections for reducing the number of constraints will also be interesting, while this involves addressing the feasibility issue. Poirion et al. [37] used random projections for reducing the number of inequality constraints, which would provide useful insights into this direction. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "The authors thank the anonymous reviewers for their valuable comments and suggestions, particularly for inspiring us to conduct the experiments in Appendix G. This work was supported by JST ERATO Grant Number JPMJER1903, JST CREST Grant Number JPMJCR24Q2, JST FOREST Grant Number JPMJFR232L, and JSPS KAKENHI Grant Numbers JP22K17853 and 24K21315. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] A. Agrawal, B. Amos, S. Barratt, S. Boyd, S. Diamond, and J. Z. Kolter. Differentiable convex optimization layers. In Advances in Neural Information Processing Systems (NeurIPS 2019), volume 32, pages 9562\u20139574. Curran Associates, Inc., 2019 (cited on pages 2, 13).   \n[2] Y.-C. Akchen and V. V. Mi\u0161ic\u00b4. Column-randomized linear programs: Performance guarantees and applications. Operations Research, 0(0), 2024 (cited on pages 1\u20133, 8, 10).   \n[3] B. Amos. Tutorial on amortized optimization. Foundations and Trends\u00ae in Machine Learning, 16(5):1935\u20138237, 2023 (cited on pages 2, 13).   \n[4] B. Amos and J. Z. Kolter. OptNet: Differentiable optimization as a layer in neural networks. In Proceedings of the 34th International Conference on Machine Learning (ICML 2017), volume 70, pages 136\u2013145. PMLR, 2017 (cited on pages 2, 13).   \n[5] M. Anthony and P. L. Bartlett. Neural Network Learning: Theoretical Foundations. Cambridge University Press, 2009 (cited on pages 4, 6).   \n[6] D. Applegate, M. Diaz, O. Hinder, H. Lu, M. Lubin, B. O\u2019Donoghue, and W. Schudy. Practical large-scale linear programming using primal-dual hybrid gradient. In Advances in Neural Information Processing Systems, volume 34, pages 20243\u201320257. Curran Associates, Inc., 2021 (cited on page 10).   \n[7] M.-F. Balcan. Data-driven algorithm design. In Beyond the Worst-Case Analysis of Algorithms, pages 626\u2013645. Cambridge University Press, 2021 (cited on pages 2, 4).   \n[8] M.-F. Balcan, D. DeBlasio, T. Dick, C. Kingsford, T. Sandholm, and E. Vitercik. How much data is sufficient to learn high-performing algorithms? Generalization guarantees for datadriven algorithm design. In Proceedings of the 53rd Annual ACM SIGACT Symposium on Theory of Computing (STOC 2021), pages 919\u2013932. ACM, 2021 (cited on pages 2\u20134).   \n[9] M.-F. Balcan, T. Dick, T. Sandholm, and E. Vitercik. Learning to branch: Generalization guarantees and limits of data-independent discretization. Journal of the ACM, 2023 (cited on pages 2, 3, 6). ", "page_idx": 9}, {"type": "text", "text": "[10] M.-F. Balcan, S. Prasad, T. Sandholm, and E. Vitercik. Improved sample complexity bounds for branch-and-cut. In Proceedings of the 28th International Conference on Principles and Practice of Constraint Programming (CP 2022). Schloss Dagstuhl \u2013 Leibniz-Zentrum f\u00fcr Informatik, 2022 (cited on pages 2, 4). ", "page_idx": 10}, {"type": "text", "text": "[11] M.-F. Balcan, S. Prasad, T. Sandholm, and E. Vitercik. Structural analysis of branch-andcut and the learnability of Gomory mixed integer cuts. In Advances in Neural Information Processing Systems (NeurIPS 2022), volume 35, pages 33890\u201333903. Curran Associates, Inc., 2022 (cited on pages 2, 4). ", "page_idx": 10}, {"type": "text", "text": "[12] P. L. Bartlett, P. Indyk, and T. Wagner. Generalization bounds for data-driven numerical linear algebra. In Proceedings of the 35th Conference on Learning Theory (COLT 2022), volume 178, pages 2013\u20132040. PMLR, 2022 (cited on pages 1\u20133, 6). ", "page_idx": 10}, {"type": "text", "text": "[13] Q. Berthet, M. Blondel, O. Teboul, M. Cuturi, J.-P. Vert, and F. Bach. Learning with differentiable pertubed optimizers. In Advances in Neural Information Processing Systems (NeurIPS 2020), volume 33, pages 9508\u20139519. Curran Associates, Inc., 2020 (cited on pages 2, 4, 13). ", "page_idx": 10}, {"type": "text", "text": "[14] T. Berthold and G. Hendel. Learning to scale mixed-integer programs. In Proceedings of the 35th AAAI Conference on Artificial Intelligence (AAAI 2021), volume 35, pages 3661\u20133668, 2021 (cited on pages 2, 6). ", "page_idx": 10}, {"type": "text", "text": "[15] S. Browne, J. Dongarra, E. Grosse, and T. Rowan. The Netlib mathematical software repository. D-lib Magazine, 1995. The dataset used in this study is freely available at https://www.netlib. org/lp/data/. (cited on page 8). ", "page_idx": 10}, {"type": "text", "text": "[16] A. Chowdhury, G. Dexter, P. London, H. Avron, and P. Drineas. Faster randomized interior point methods for tall/wide linear programs. Journal of Machine Learning Research, 23(336):1\u2013 48, 2022 (cited on page 1). ", "page_idx": 10}, {"type": "text", "text": "[17] M. B. Cohen, Y. T. Lee, and Z. Song. Solving linear programs in the current matrix multiplication time. Journal of the ACM, 68(1):1\u201339, 2021 (cited on page 10). ", "page_idx": 10}, {"type": "text", "text": "[18] H. A. Eiselt and C.-L. Sandblom. Linear Programming and its Applications. Springer, 2007 (cited on page 1). ", "page_idx": 10}, {"type": "text", "text": "[19] O. El Balghiti, A. N. Elmachtoub, P. Grigas, and A. Tewari. Generalization bounds in the predict-then-optimize framework. Mathematics of Operations Research, 48(4):2043\u20132065, 2023 (cited on pages 2, 13). ", "page_idx": 10}, {"type": "text", "text": "[20] A. N. Elmachtoub and P. Grigas. Smart \u201cpredict, then optimize\u201d. Management Science, 68(1):9\u2013 26, 2022 (cited on pages 2, 4, 13). ", "page_idx": 10}, {"type": "text", "text": "[21] Z. Fan, X. Wang, O. Yakovenko, A. A. Sivas, O. Ren, Y. Zhang, and Z. Zhou. Smart initial basis selection for linear programs. In Proceedings of the 40th International Conference on Machine Learning (ICML 2023), volume 202, pages 9650\u20139664. PMLR, 2023 (cited on pages 2, 3, 6). ", "page_idx": 10}, {"type": "text", "text": "[22] D. Garber and N. Wolf. Frank\u2013Wolfe with a nearest extreme point oracle. In Proceedings of the 34th Conference on Learning Theory (COLT 2021), volume 134, pages 2103\u20132132. PMLR, 2021 (cited on page 14). ", "page_idx": 10}, {"type": "text", "text": "[23] S. I. Gass. Linear Programming: Methods and Applications. McGraw-Hill, 1985 (cited on page 1). ", "page_idx": 10}, {"type": "text", "text": "[24] P. W. Goldberg and M. R. Jerrum. Bounding the Vapnik\u2013Chervonenkis dimension of concept classes parameterized by real numbers. Machine Learning, 18(2):131\u2013148, 1995 (cited on page 5). ", "page_idx": 10}, {"type": "text", "text": "[25] R. Gupta and T. Roughgarden. A PAC approach to application-specific algorithm selection. SIAM Journal on Computing, 46(3):992\u20131017, 2017 (cited on pages 2\u20134). ", "page_idx": 10}, {"type": "text", "text": "[26] Gurobi Optimization, LLC. Gurobi Optimizer Reference Manual. https://www.gurobi.com, 2023. Used under academic license. (cited on page 7). ", "page_idx": 10}, {"type": "text", "text": "[27] Q. Huangfu and J. A. J. Hall. Parallelizing the dual revised simplex method. Mathematical Programming Computation, 10(1):119\u2013142, 2018 (cited on page 1). ", "page_idx": 10}, {"type": "text", "text": "[28] P. Indyk, A. Vakilian, and Y. Yuan. Learning-based low-rank approximations. In Advances in Neural Information Processing Systems (NeurIPS 2019), volume 32, pages 7402\u20137412. Curran Associates, Inc., 2019 (cited on pages 1, 6). ", "page_idx": 10}, {"type": "text", "text": "[29] P. Indyk, T. Wagner, and D. Woodruff. Few-shot data-driven algorithms for low rank approximation. In Advances in Neural Information Processing Systems (NeurIPS 2021), volume 34, pages 10678\u201310690. Curran Associates, Inc., 2021 (cited on pages 1, 9). ", "page_idx": 10}, {"type": "text", "text": "[30] S. Jiang, Z. Song, O. Weinstein, and H. Zhang. A faster algorithm for solving general LPs. In Proceedings of the 53rd Annual ACM SIGACT Symposium on Theory of Computing (STOC 2021), pages 823\u2013832. ACM, 2021 (cited on page 10).   \n[31] B. Korte and J. Vygen. Cobinatorial Optimization: Theory and Algorithams. Springer, 5th edition, 2012 (cited on page 5).   \n[32] S. Lacoste-Julien and M. Jaggi. On the global linear convergence of Frank\u2013Wolfe optimization variants. In Advances in Neural Information Processing Systems (NIPS 2015), volume 28, pages 496\u2013504. Curran Associates, Inc., 2015 (cited on page 14).   \n[33] Y. Li, H. Lin, S. Liu, A. Vakilian, and D. Woodruff. Learning the positions in CountSketch. In International Conference on Learning Representations (ICLR 2023), 2023 (cited on page 1).   \n[34] H. Lu and J. Yang. cuPDLP.jl: A GPU implementation of restarted primal-dual hybrid gradient for linear programming in Julia. arXiv:2311.12180, 2023 (cited on page 10).   \n[35] H. Lu, J. Yang, H. Hu, Q. Huangfu, J. Liu, T. Liu, Y. Ye, C. Zhang, and D. Ge. cuPDLPC: A strengthened implementation of cuPDLP for linear programming by C language. arXiv:2312.14832, 2023 (cited on page 10).   \n[36] Z. Meng, L. Mukherjee, Y. Wu, V. Singh, and S. Ravi. Differentiable optimization of generalized nondecomposable functions using linear programs. In Advances in Neural Information Processing Systems (NeurIPS 2021), volume 34, pages 29129\u201329141. Curran Associates, Inc., 2021 (cited on pages 2, 13).   \n[37] P.-L. Poirion, B. F. Louren\u00e7o, and A. Takeda. Random projections of linear and semidefinite problems with linear inequalities. Linear Algebra and its Applications, 664:24\u201360, 2023 (cited on pages 1\u20133, 10).   \n[38] D. Pollard. Convergence of Stochastic Processes. Springer, 1st edition, 1984 (cited on page 4).   \n[39] S. Sakaue and T. Oki. Sample complexity of learning heuristic functions for greedy-bestfirst and $\\mathbf{A}^{*}$ search. In Advances in Neural Information Processing Systems (NeurIPS 2022), volume 35, pages 2889\u20132901. Curran Associates, Inc., 2022 (cited on page 2).   \n[40] S. Sakaue and T. Oki. Improved generalization bound and learning of sparsity patterns for data-driven low-rank approximation. In Proceedings of the 26th International Conference on Artificial Intelligence and Statistics (AISTATS 2023), volume 206, pages 1\u201310. PMLR, 2023 (cited on page 1).   \n[41] Y. Sun, A. T. Ernst, X. Li, and J. Weiner. Learning to generate columns with application to vertex coloring. In International Conference on Learning Representations (ICLR 2023), 2023 (cited on pages 2, 6).   \n[42] Y. Tan, D. Terekhov, and A. Delong. Learning linear programs from optimal decisions. In Advances in Neural Information Processing Systems (NeurIPS 2020), volume 33, pages 19738\u2013 19749. Curran Associates, Inc., 2020 (cited on pages 2, 4, 6, 13, 14).   \n[43] P. Van Hentenryck and K. Dalmeijer. AI4OPT: AI institute for advances in optimization. AI Magazine, 45(1):42\u201347, 2024 (cited on page 9).   \n[44] K. Vu, P.-L. Poirion, and L. Liberti. Random projections for linear programming. Mathematics of Operations Research, 43(4):1051\u20131071, 2018 (cited on pages 1\u20133, 10).   \n[45] K. Wang, B. Wilder, A. Perrault, and M. Tambe. Automatically learning compact quality-aware surrogates for optimization problems. In Advances in Neural Information Processing Systems (NeurIPS 2020), volume 33, pages 9586\u20139596. Curran Associates, Inc., 2020 (cited on pages 2, 13).   \n[46] H. E. Warren. Lower bounds for approximation by nonlinear manifolds. Transactions of the American Mathematical Society, 133(1):167\u2013178, 1968 (cited on page 5).   \n[47] B. Wilder, B. Dilkina, and M. Tambe. Melding the data-decisions pipeline: Decision-focused learning for combinatorial optimization. In Proceedings of the 33rd AAAI Conference on Artificial Intelligence (AAAI 2019), volume 33, pages 1658\u20131665, 2019 (cited on pages 2, 4, 13).   \n[48] D. P. Woodruff. Sketching as a tool for numerical linear algebra. Foundations and Trends\u00ae in Theoretical Computer Science, 10(1\u20132):1\u2013157, 2014 (cited on page 1). ", "page_idx": 11}, {"type": "text", "text": "A Additional related work on learning through optimization ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "Many researchers have addressed learning tasks whose input\u2013output pipelines involve optimization steps [4, 47, 1, 13, 42, 36, 3, 20, 45, 19]. While most of them seek to develop practical learning methods, several have studied generalization guarantees. Wang et al. [45] have studied a so-called decision-focused learning method with reparametrization, which is technically the same as projection. Their theoretical result focuses on learning of models that generate objective functions, assuming reparametrization matrices to be fixed. By contrast, we obtain a generalization bound for learning projection matrices. El Balghiti et al. [19] have studied generalization bounds in the so-called smart predict-then-optimize setting. While they focus on learning of models that generate coefficients of objectives from contextual information as with Wang et al. [45], our interest is in learning projection matrices, which affect both objectives and constraints. On the practical side, the line of work provides useful techniques for differentiating outcomes of optimization with respect to input parameters. Our gradient-based method for learning projection matrices is partly based on the result by Tan et al. [42]. ", "page_idx": 12}, {"type": "text", "text": "B Proof of the lower bound on p $\\dim(\\mathcal{U})$ ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "We establish the lower bound on $\\operatorname{pdim}(\\mathcal{U})$ in Theorem 4.5 by constructing a set of $(n-2k)k$ LP instances that $\\boldsymbol{\\mathcal{U}}$ can shatter. The instances are written as $\\pi_{r,s}=(\\pmb{c}_{r},\\pmb{A},\\pmb{b}_{s})\\in\\mathbb{R}^{n}\\times\\mathbb{R}^{2k\\times n}\\times\\mathbb{R}^{2k}$ for $r=1,\\ldots,n-2k$ and $s=1,\\ldots,k$ , where ", "page_idx": 12}, {"type": "equation", "text": "$$\nc_{r}=\\left[\\mathbf{e}_{r}^{\\mathsf{\\Delta}}\\right],\\qquad\\qquad A=\\bigl[\\mathbf{0}_{2k,n-2k},\\mathbf{I}_{2k}\\bigr],\\qquad\\qquad\\mathrm{and}\\qquad\\qquad b_{s}=\\left[\\mathbf{e}_{k}^{\\mathsf{\\Delta}}\\right].\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Here, $\\mathbf{e}_{r}$ and $\\mathbf{e}_{s}$ are the $r$ th and $s$ th standard basis vectors of $\\mathbb{R}^{n-2k}$ and $\\mathbb{R}^{k}$ , respectively, and $\\mathbf{0}_{a,b}$ is the $a\\times b$ all zeros. We consider a projection matrix of the form ", "page_idx": 12}, {"type": "equation", "text": "$$\nP=\\left[\\begin{array}{l}{Q}\\\\ {\\mathbf{I}_{k}}\\\\ {-\\mathbf{I}_{k}}\\end{array}\\right],\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "where $Q\\in\\{0,1\\}^{(n-2k)\\times k}$ is a binary matrix that we will use as tunable parameters to shatter the set of $(n-2k)k$ instances. Let $y_{j}$ denote the $j$ th entry of the variable vector $\\pmb{y}\\in\\mathbb{R}^{k}$ . Since we have ", "page_idx": 12}, {"type": "equation", "text": "$$\nA P=\\left[{\\begin{array}{l}{\\mathbf{I}_{k}}\\\\ {-\\mathbf{I}_{k}}\\end{array}}\\right]\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "the constraints, $A P y\\le b_{s}$ , imply $y_{j}=0$ for $j=1,\\dots,k$ with $j\\neq s$ and $y_{s}\\in[0,1]$ . Let $\\textit{\\textbf{y}}$ be such a feasible solution. Then, the objective value is written as $c_{r}^{\\top}P y=\\mathbf{e}_{r}^{\\top}Q y=Q_{r,s}y_{s}$ , where $Q_{r,s}$ is the $(r,s)$ entry of $Q\\in\\{0,1\\}^{(n-2k)\\times k}$ . Since $Q_{r,s}\\in\\{0,1\\}$ and $y_{s}\\in[0,1]$ , we have max $\\{c_{r}^{\\top}P y:$ $A P y\\leq b_{s}\\}=Q_{r,s}$ . Thus, the set of those $(n-2k)k$ instances can be shattered by setting all threshold values to $1/2$ and appropriately choosing each entry of $Q\\in\\{0,1\\}^{(n-2k)\\times k}$ . In other words, all the $2^{(n-2k)k}$ outcomes of $\\{\\,u(P,\\pi_{r,s})=Q_{r,s}\\geq1/2\\,:\\,r=1,\\ldots,n-2k$ , $s=1,\\ldots,k\\,\\}$ can realize by changing $P\\in\\mathbb{R}^{n\\times k}$ (or $Q\\in\\{0,1\\}^{(n-2k)\\times k})$ . Thus, we obtain an $\\Omega(n k)$ lower bound on the pseudo-dimension of $\\mathcal{U}=\\left\\{\\,u(P,\\cdot):\\Pi\\to\\mathbb{R}\\,:\\,P\\in\\mathbb{R}^{n\\times k}\\,\\right\\}$ . ", "page_idx": 12}, {"type": "text", "text": "C How to remove equality constraints ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "Suppose that we are given an LP of the form ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\operatorname*{maximize}_{z\\in\\mathbb{R}^{n}}\\quad w^{\\top}z\\qquad\\mathrm{subject}\\,\\,\\quad A_{\\mathrm{ineq}}z\\leq b_{\\mathrm{ineq}},\\,\\,A_{\\mathrm{eq}}z=b_{\\mathrm{eq}},\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "which has both inequality and equality constraints. Below, assuming that a (trivially) feasible solution $\\scriptstyle x_{0}$ is available (i.e., $A_{\\mathrm{ineq}}\\mathbf{x}_{\\mathrm{0}}\\,\\leq\\,b_{\\mathrm{ineq}}$ and $A_{\\mathrm{eq}}\\mathbf{x}_{\\mathrm{0}}=b_{\\mathrm{eq}}\\rangle$ ), we transform the LP into an equivalent inequality form. First, we replace the variable vector $_{\\textit{z}}$ with $z^{\\prime}+x_{0}$ , obtaining an equivalent LP of the form ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\operatorname*{maximize}_{\\mathbf{x}^{\\prime}\\in\\mathbb{R}^{n}}\\quad w^{\\top}(z^{\\prime}+x_{0})\\qquad\\mathrm{subject}\\,\\,\\mathrm{to}\\quad A_{\\mathrm{ineq}}z^{\\prime}\\leq b_{\\mathrm{ineq}}-A_{\\mathrm{ineq}}x_{0},\\,A_{\\mathrm{eq}}z^{\\prime}=\\mathbf{0}.\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "The equality constraints, $A_{\\mathrm{eq}}z^{\\prime}\\,=\\,{\\bf0}$ , mean that $z^{\\prime}$ must be in the null space of $A_{\\mathrm{eq}}$ . Therefore, $z^{\\prime}$ is always represented as $z^{\\prime}=(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})x$ with some $\\pmb{x}\\in\\mathbb{R}^{n}$ , where $A_{\\mathrm{eq}}^{\\dagger}$ is the pseudoinverse of $A_{\\mathrm{eq}}$ and $\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}}$ is the orthogonal projection matrix onto the null space of $A_{\\mathrm{eq}}$ .6 Substituting $z^{\\prime}=(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})x$ into the above LP allows us to remove the equality constraints since they are automatically satisfied for every $\\textbf{\\em x}$ . After all, by transforming the variable vector as $z=(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})x+x_{0}$ , we can obtain an equivalent LP of the form ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\underset{\\alpha\\in\\mathbb{R}^{n}}{\\mathrm{maximize}}}&{\\;w^{\\top}(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})x}\\end{array}\\quad\\quad\\mathrm{subject~to}\\quad A_{\\mathrm{ineq}}(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})x\\leq b_{\\mathrm{ineq}}-A_{\\mathrm{ineq}}x_{0},\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where the additive constant, $w^{\\top}x_{0}$ , in the objective is omitted. This is an inequality-form LP (1) with $c=(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})^{\\top}w$ , $A=A_{\\mathrm{ineq}}(\\mathbf{I}-A_{\\mathrm{eq}}^{\\dagger}A_{\\mathrm{eq}})$ , and $b=b_{\\mathrm{ineq}}-A_{\\mathrm{ineq}}\\pmb{x}_{0}$ . Note that ${\\boldsymbol{x}}=\\mathbf{0}$ is always feasible for the resulting LP and that we can use this transformation if $A_{\\mathrm{eq}}$ and $b_{\\mathrm{eq}}$ are fixed, even if $\\pmb{w}$ , $A_{\\mathrm{ineq}}$ , and $b_{\\mathrm{ineq}}$ can change across instances. ", "page_idx": 13}, {"type": "text", "text": "D Derivation of the gradient in SGA ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "We explain how to derive the gradient of $u(P,\\pi)$ in (5), which indeed follows from Tan et al. [42, Theorem 1] (or the implicit function theorem). To focus on computing the gradient, we suppose that the columns of $_{P}$ have already been projected onto the feasible region of $\\pi$ by the projection step (6). ", "page_idx": 13}, {"type": "text", "text": "Consider computing the gradient $\\nabla u({\\cal P},\\pi)$ of $u(P,\\pi)=\\operatorname*{max}\\{\\,c^{\\top}P y\\,:\\,A P y\\leq b\\,\\}$ with respect to $_{P}$ . For convenience, we define new parameters $\\pmb{w}=\\pmb{P}^{\\top}\\pmb{c}\\in\\mathbb{R}^{k}$ and $W=A P\\in\\mathbb{R}^{m\\times k}$ and let $\\pmb{y}^{*}\\in\\arg\\operatorname*{max}\\bigl\\{\\,\\pmb{w}^{\\top}\\pmb{y}\\,:\\,W\\pmb{y}\\leq\\pmb{b}\\,\\bigr\\}$ . Then, we can differentiate the optimal value, $u(P,\\pi)=w^{\\top}y^{*}$ , with respect to $\\mathbf{\\nabla}w$ and $W$ by applying the implicit function theorem to the KKT condition. Specifically, as shown in Tan et al. [42, Theorem 1], we have = y\u2217and\u2202\u2202Wu $\\begin{array}{r}{\\frac{\\partial u}{\\partial W}=-\\lambda^{*}{y^{*}}^{\\top}}\\end{array}$ , where $\\lambda^{*}\\in\\mathbb{R}_{\\geq0}^{m}$ is the dual optimal solution. From the chain rule, we have ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\nabla u(\\pmb{P},\\pi)=\\frac{\\partial u}{\\partial\\pmb{w}}\\cdot\\frac{\\partial\\pmb{w}}{\\partial\\pmb{P}}+\\frac{\\partial u}{\\partial\\pmb{W}}\\cdot\\frac{\\partial\\pmb{W}}{\\partial\\pmb{P}},\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where the indices for the products are aligned appropriately. By substituting the derivatives into this, we obtain $\\nabla u(P,\\pi)=\\bar{c}\\pmb{\\eta}^{*\\,\\top}-\\pmb{A}^{\\top}\\pmb{\\lambda}^{*}\\bar{\\pmb{y}^{*}}^{\\top}$ . When applying the implicit function theorem, we must ensure that the Jacobian matrix is invertible. In the above case, ensuring the regularity condition (i.e., active constraints are linearly independent at $\\boldsymbol{y}^{*}$ ) is sufficient. ", "page_idx": 13}, {"type": "text", "text": "E Running time of learning methods ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "We discuss the theoretical complexity of the PCA- and SGA-based methods. For convenience, we use $T_{\\mathrm{lp}}(m,n)$ to represent the time complexity of solving an LP instance with $m$ inequality constraints and $n$ variables, as this factor highly depends on problem settings. Also, let $T_{\\mathrm{proj}}(m)$ be the time for solving the problem in (6) $k$ times for projecting columns of $P\\in\\mathbb{R}^{n\\times k}$ onto the feasible region specified by $m$ inequality constraints. Given the $T_{\\mathrm{lp}}(m,n)$ -time linear optimization oracle, we can implement this projection step with a Frank\u2013Wolfe-style algorithm. In this case, the time for projecting columns of $_{P}$ within an $\\varepsilon$ -error is typically $T_{\\mathrm{proj}}(\\dot{m_{}})=\\bar{T}_{\\mathrm{lp}}(m,n)\\cdot\\mathrm{poly}(n,m)\\log(1/\\varepsilon)$ [32, 22]. ", "page_idx": 13}, {"type": "text", "text": "PCA-based method. Computing SVD of $\\pmb{X}\\in\\mathbb{R}^{N\\times n}$ takes $\\mathrm{O}(N n^{2})$ time. Then, the final projection takes up to $T_{\\mathrm{proj}}(N m)$ time. Thus, the total time complexity is $\\mathrm{O}(\\dot{N}n^{2})+T_{\\mathrm{proj}}(N m)$ . ", "page_idx": 13}, {"type": "text", "text": "SGA-based method. We discuss the complexity of a single iteration, which consists of projecting columns of $_{P}$ as in (6), solving a projected LP for obtaining $\\boldsymbol{y}^{*}$ and $\\lambda^{*}$ , and computing the gradient in (5). These take $T_{\\mathrm{proj}}(m),\\bar{T_{\\mathrm{lp}}}(\\bar{m},\\dot{k})$ , and $\\mathrm{O}(n(m+k))$ time, respectively. Thus, the per-iteration complexity is $T_{\\mathrm{proj}}({m})+T_{\\mathrm{lp}}(m,k)+\\mathrm{O}(n(m+k))$ . After finishing all the iterations, the final projection takes $T_{\\mathrm{proj}}(N m)$ time, as with the PCA-based method. In the experiments, we ran SGA for a single epoch, i.e., $N$ iterations. Thus, the total time complexity is $N(\\bar{T}_{\\mathrm{proj}}(m)+T_{\\mathrm{lp}}(m,k)\\,+$ $\\mathrm{O}(n(m+k)))+T_{\\mathrm{proj}}(N m)$ . ", "page_idx": 13}, {"type": "image", "img_path": "jHh804fZ5l/tmp/c0d0da6bf6bcd9069d53bf93d4cb330b16fc87c06b1b2b13228857fb27875d9e.jpg", "img_caption": ["Figure 2: Running times of PCA and SGA for learning projection matrices on 200 training instances. "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "We turn to the running times of the PCA- and SGA-based methods in the experiments in Section 6. Figure 2 shows the times taken by PCA and SGA for learning projection matrices on training datasets of 200 instances. (Full and ColRand are not included since they do not learn projection matrices.) We assumed that optimal solutions of training instances were computed a priori, and hence the time for solving original LPs was not included. The figure shows that SGA took much longer than PCA. This is natural since SGA iteratively solves LPs for computing gradients (5) and quadratic programs for projection (6), while PCA only requires computing the top- $(k-1)$ right-singular vectors of $\\bar{X}\\overset{\\star}{-}{\\bar{\\mathbf{1}_{N}}}\\bar{x}^{\\top}$ , as discussed above. ", "page_idx": 14}, {"type": "text", "text": "F Results with random initialization of SGA ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Figure 3 shows the same plots as in Figure 1 but with SGA initialized with ColRand instead of PCA, which was mentioned in Footnote 5. ", "page_idx": 14}, {"type": "text", "text": "G Objective ratios on synthetic datasets with various noise levels ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "This section examines the effect of the noise strength on the performance of our data-driven projection methods. We created synthetic datasets, Packing, MaxFlow, and MinCostFlow, in the same way as in Section 6. An important difference from Section 6 is the increased noise level $\\omega$ , which perturbs LP inputs through multiplication by $1+\\omega$ . We draw $\\omega$ from a uniform distribution over $[0,\\bar{\\omega}]$ with the upper bound $\\bar{\\omega}$ ranging from 0.0 to 2.0 in increments of 0.2; in Section 6, $\\bar{\\omega}$ was fixed at 0.1. The larger $\\bar{\\omega}$ is, the less consistent the tendencies in the LP input parameters become, making it more challenging to learn projection matrices with PCA and SGA. We fixed the dimensionality $k$ of projected LPs to 20, which means the size of projection matrices $_{P}$ is $n\\times20$ . ", "page_idx": 14}, {"type": "text", "text": "Figure 4 presents objective ratios achieved by each method on Packing, MaxFlow, and MinCostFlow datasets. There is a notable difference between Packing and the others, which we discuss below. ", "page_idx": 14}, {"type": "text", "text": "Packing. The performance of our data-driven methods (PCA and SGA) worsens as $\\bar{\\omega}$ increases, as expected. While they exhibit clear advantage over the random-projection baseline (ColRand) at small $\\bar{\\omega}$ values, they behave similarly to ColRand when $\\bar{\\omega}=2.0$ . ", "page_idx": 14}, {"type": "text", "text": "MaxFlow and MinCostFlow. In contrast to the Packing case, our data-driven methods, particularly SGA, performed well even with high noise levels, while the performance of ColRand remained poor. The success of data-driven methods is probably due to the fixed graph topology, which creates consistent tendencies across LP instances despite varying edge capacities and costs. ", "page_idx": 14}, {"type": "text", "text": "Note that fixed graph topologies are ubiquitous. For example, in daily transportation planning, the topology of traffic networks is fixed, while the capacities and costs may fluctuate due to congestion. The above results highlight the merit of our data-driven projection methods in such applications. ", "page_idx": 14}, {"type": "image", "img_path": "jHh804fZ5l/tmp/ac52d7b5a5c1502d580fd5d237522490ab9a040315a439b4d5a25991868db655.jpg", "img_caption": ["Figure 3: The same plots as in Figure 1 but with SGA initialized with ColRand instead of PCA, as mentioned in Footnote 5. Compared with Figure 1, the objective ratio of SGA deteriorates particularly in MinCostFlow, GROW7, SC205, and SCAGR25. "], "img_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "jHh804fZ5l/tmp/f3e4e8ff38dd22c43a4f4d809b7dc601d25df7e5722589ee33a8ca0b63292097.jpg", "img_caption": ["Figure 4: Objective ratios on synthetic datasets with varying upper bounds $\\bar{\\omega}$ on the noise level. Except for Full, the LP dimensionality is set to $k=20$ . Other settings are the same as in Section 6. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We have clarified the scope (data-driven projection for reducing the dimensionality of LPs) and contributions (generalization analysis and learning methods). ", "page_idx": 16}, {"type": "text", "text": "Guidelines: ", "page_idx": 16}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 16}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Justification: Please see Section 8. ", "page_idx": 16}, {"type": "text", "text": "Guidelines: ", "page_idx": 16}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 16}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: Section 3 and Assumption 3.1 describe the assumptions. All theoretical results are supported by complete proofs. (Some of them are deferred to the appendix.) ", "page_idx": 17}, {"type": "text", "text": "Guidelines: ", "page_idx": 17}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 17}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: Section 6 offers the details for reproducing the experimental results. Guidelines: ", "page_idx": 17}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 17}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: The supplementary material includes codes for generating data and reproducing experimental results, as well as a README document providing specific instructions. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/ guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 18}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: Please see Section 6 for training and test details. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 18}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: The results of ColRand, a randomized baseline method, are shown with error bands, which indicate the standard deviation over 10 independent trials. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: We provide information on compute resources in Section 6 and Appendix E. Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 19}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Justification: This paper conforms, in every respect, with the NeurIPS Code of Ethics. Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 19}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 19}, {"type": "text", "text": "Answer: [No] ", "page_idx": 19}, {"type": "text", "text": "Justification: This paper is dedicated to the general goal of advancing the field of optimization and machine learning. While there are many potential societal consequences of our work, we feel none of them must be specifically highlighted. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 20}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 20}, {"type": "text", "text": "Justification: This paper poses no such risks. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 20}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: The license of Gurobi is stated in the reference. Netlib is a publicly available standard dataset. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 20}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 21}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We include a README document of our codes in the supplementary material. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 21}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 21}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 21}]