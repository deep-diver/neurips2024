[{"type": "text", "text": "FlowTurbo: Towards Real-time Flow-Based Image Generation with Velocity Refiner ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Wenliang Zhao\u2217 ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Minglei Shi\u2217 ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Department of Automation Tsinghua University wenliangzhao.thu@gmail.com ", "page_idx": 0}, {"type": "text", "text": "Department of Automation Tsinghua University stephenserrylei@gmail.com ", "page_idx": 0}, {"type": "text", "text": "Xumin Yu Jie Zhou Jiwen Lu   \nDepartment of Automation Department of Automation Department of Automation Tsinghua University Tsinghua University Tsinghua University   \nyuxumin98@gmail.com jzhou@tsinghua.edu.cn lujiwen@tsinghua.edu.cn ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Building on the success of diffusion models in visual generation, flow-based models reemerge as another prominent family of generative models that have achieved competitive or better performance in terms of both visual quality and inference speed. By learning the velocity field through flow-matching, flow-based models tend to produce a straighter sampling trajectory, which is advantageous during the sampling process. However, unlike diffusion models for which fast samplers are well-developed, efficient sampling of flow-based generative models has been rarely explored. In this paper, we propose a framework called FlowTurbo to accelerate the sampling of flow-based models while still enhancing the sampling quality. Our primary observation is that the velocity predictor\u2019s outputs in the flow-based models will become stable during the sampling, enabling the estimation of velocity via a lightweight velocity refiner. Additionally, we introduce several techniques including a pseudo corrector and sample-aware compilation to further reduce inference time. Since FlowTurbo does not change the multi-step sampling paradigm, it can be effectively applied for various tasks such as image editing, inpainting, etc. By integrating FlowTurbo into different flow-based models, we obtain an acceleration ratio of $53.1\\%{\\sim}58.3\\%$ on class-conditional generation and $29.8\\%{\\sim}38.5\\%$ on text-to-image generation. Notably, FlowTurbo reaches an FID of 2.12 on ImageNet with 100 (ms / img) and FID of 3.93 with 38 (ms / img), achieving the real-time image generation and establishing the new state-of-the-art. Code is available at https://github.com/shiml20/FlowTurbo. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "In recent years, diffusion models have emerged as powerful generative models, drawing considerable interest and demonstrating remarkable performance across various domains[10, 38, 30, 12]. Diffusion models utilize a denoising network, $\\epsilon_{\\theta}$ , to learn the reverse of a diffusion process that gradually adds noise to transform the data distribution into a Gaussian distribution. While the formulation of diffusion models enables stable training and flexible condition injection[30], sampling from these models requires iterative denoising. This process necessitates multiple evaluations of the denoising network, thereby increasing computational costs. To address this, several techniques such as fast diffusion samplers[22, 18, 42] and efficient distillation[31, 37] have been proposed to reduce the sampling steps of diffusion models. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Alongside the research on diffusion models, flow-based models[5, 19, 17] have garnered increasing attention due to their versatility in modeling data distributions. Flow is defined as a probability path that connects two distributions and can be efficiently modeled by learning a neural network to estimate the conditional velocity field through a neural network $\\mathbf{v}_{\\theta}$ via flow matching [17]. Encompassing the standard diffusion process as a special case, flow-based generative models support more flexible choices of probability paths. Recent work has favored a simple linear interpolant path [20, 24, 8], which corresponds to the optimal transport from the Gaussian distribution to the data distribution. This linear connection between data and noise results in a more efficient sampling process for flowbased models. However, unlike diffusion models, which benefit from numerous efficient sampling methods, current samplers for flow-based models primarily rely on traditional numerical methods such as Euler\u2019s method and Heun\u2019s method [24]. These traditional methods, while functional, fail to fully exploit the unique properties of flow-based generative models, thereby limiting the potential for faster and more efficient sampling. ", "page_idx": 1}, {"type": "text", "text": "In this paper, we propose FlowTurbo, a framework designed to accelerate the generation process of flow-based generative models. FlowTurbo is motivated by comparing the training objectives of diffusion and flow-based generative models, as well as analyzing how the prediction results $\\epsilon_{\\theta}$ and $\\mathbf{v}_{\\theta}$ vary over time. Our observation, illustrated in Figure 1, indicates that the velocity predictions of a flow-based model remain relatively stable during sampling, in contrast to the more variable predictions of $\\epsilon_{\\theta}$ in diffusion models. This stability allows us to regress the offset of the velocity at each sampling step using a lightweight velocity refiner, which contains only $5\\%$ of the parameters of the original velocity prediction model. During the sampling process, we can replace the original velocity prediction model with our lightweight refiner at specific steps to reduce computational costs. ", "page_idx": 1}, {"type": "text", "text": "As a step towards real-time image generation, we propose two useful techniques called pseudo corrector and sample-aware compilation to further improve the sampling speed. Specifically, the pseudo corrector method modifies the updating rule in Heun\u2019s method by reusing the velocity prediction of the previous sampling step, which will reduce the number of model evaluations at each step by half while keeping the original convergence order. The sample-aware compilation integrates the model evaluations, the sampling steps as well as the classifier-free guidance [11] together and compile them into a static graph, which can bring extra speedup compared with standard model-level compilation. Since each sample block is independent, we can still adjust the number of inference steps and sampling configurations flexibly. ", "page_idx": 1}, {"type": "text", "text": "Our FlowTurbo framework is fundamentally different from previous one-step distillation methods for diffusion models [20, 40, 32], which require generating millions of noise-image pairs offilne and conducting distillation over hundreds of GPU days. In contrast, FlowTurbo\u2019s velocity refiner can be efficiently trained on pure images in less than 6 hours. Moreover, one-step distillation-based methods are limited to image generation and disable most of the functionalities of the original base model. Conversely, FlowTurbo preserves the multi-step sampling paradigm, allowing it to be effectively applied to various tasks such as image editing, inpainting, and more. ", "page_idx": 1}, {"type": "text", "text": "We perform extensive experiments to evaluate our method. By applying FlowTurbo to different flow-based models, we obtain an acceleration ratio of $53.1\\%{\\sim}58.3\\%$ on class-conditional generation and $29.8\\%{\\sim}38.5\\%$ on text-to-image generation. Notably, FlowTurbo attains an FID score of 2.12 on ImageNet with 100 $\\left(\\operatorname*{ms}\\slash\\,\\mathrm{img}\\right)$ and FID of score 3.93 with 38 (ms / img), thereby enabling realtime image generation and establishes the new state-of-the-art. Additionally, we present qualitative comparisons demonstrating how FlowTurbo generates superior images with higher throughput and how it can be seamlessly integrated into various applications such as image editing, inpainting, etc. We believe our FlowTurbo can serve as a general framework to accelerate flow-based generative models and will see wider use as these models continue to grow [24, 20, 8, 9]. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Diffusion and flow-based models. Diffusion models [10, 38] are a family of generative models that have become the de-facto method for high-quality generation. The diffusion process gradually adds noise to transform the data distribution to a normal distribution, and the goal of diffusion models is to use a network $\\epsilon_{\\theta}$ to learn the reverse of the diffusion process via score-matching [10, 38]. Rombach et al. [30] first scales up diffusion models to large-scale text-to-image generation by performing the diffusion on latent space and adopting cross-attention to inject conditions. The pre-trained diffusion models can also be easily fine-tuned to achieve generation with more diverse conditions [41, 27] and have attracted increasing attention in the community. Flow-based generative models are different from diffusion models in both data modeling and training objectives. Flow-based models [20, 17, 8, 24] consider the probability path from one distribution to another, and learn the velocity field via flow matching [17]. By choosing the linear interpolant as the probability path which corresponds to the optimal transport from the normal distribution to the data distribution, the trajectory from noise to data becomes more straighter which is beneficial to the sampling. Recent work [24, 8] have demonstrates the effectiveness and scalability of flow-based generation models. However, both diffusion and flow-based models requires multiple evaluations of the prediction model, leading to lower inference speed than traditional architectures like GAN. In this work, we focus on this issue and aim to accelerate flow-based generative models. ", "page_idx": 1}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/ed8a42fc4114c16594debd177928eb46ab2af6ff11e76866315157e67244ef9b.jpg", "img_caption": ["Figure 1: Visualization of the curvatures of the sampling trajectories of different models. We compare the curvatures of the model predictions of a standard diffusion model (DiT [28]) and several flow-based models (SiT [24], SD3-Medium [8], FLUX.1-dev [14], and Open-Sora [43]) during the sampling. We observe that the $\\mathbf{v}_{\\theta}$ in flow-based models is much more stable than $\\epsilon$ of diffusion models during the sampling, which motivates us to seek a more lightweight estimation model to reduce the sampling costs of flow-based generative models. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Efficient visual generation. Accelerating the generation of diffusion models has become an increasingly important topic. Existing methods can be roughly categorized as training-free and training-based methods. Training-free methods aim to design faster samplers that can reduce the approximation error when sampling from the diffusion SDE or ODE [36, 22, 18, 42], while keeping the weights of diffusion models unchanged. Training-based methods often aim to reshape the sampling trajectory by distillation from the diffusion model [31, 40] to achieve the few-step or even one-step generation. These training-based methods usually requires multiple-round of distillation [31, 20] and expensive training resources (e.g., $>\\!100$ GPU days in [20]). Besides, the distilled one-step model no longer supports image editing due to the lack of multi-step sampling. Although there are a variety of methods for accelerating diffusion models, there are few fast sampling methods designed for flow-based generative models. Existing flow-based models adopt traditional numerical methods like Euler\u2019s method or Heun\u2019s method during the inference [24]. In this work, we provide a framework called FlowTurbo to accelerate the generation of flow-based models by learning a lightweight velocity refiner (which only requires ${<}6$ GPU hours) to regress the offset of the velocity. Together with other proposed techniques, FlowTurbo addresses the previously unmet need for an efficient flow-based generation framework, paving the way for real-time generative applications. ", "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 Preliminaries: Diffusion and Flow-based Models ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Diffusion models. Recently, diffusion models [10, 38, 35, 30] have emerged as a powerful family of generative models. The diffusion models are trained to learn the inverse of a diffusion process such ", "page_idx": 2}, {"type": "text", "text": "that it can recover the data distribution $p_{0}(\\mathbf{x}_{0})$ from the Gaussian noise. The diffusion process can be represented as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{x}_{t}=\\alpha_{t}\\mathbf{x}_{0}+\\sigma_{t}\\mathbf{\\epsilon},\\quad t\\in[0,1],\\quad\\epsilon\\sim\\mathcal{N}(0,\\mathbf{I}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\alpha_{t},\\sigma_{t}$ are the chosen noise schedule such that the marginal distribution $p_{1}(\\mathbf{x}_{1})\\sim\\mathcal{N}(0,\\mathbf{I})$ . The optimization of diffusion models can be derived by either minimizing the ELBO of the reverse process [10] or solving the reverse diffusion SDE [38], which would both lead to the same training objective of score-matching, i.e., to learn a noise prediction model $\\epsilon_{\\theta}(\\mathbf{x}_{t},t)$ to estimate the scaled score function $-\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}\\big(\\mathbf{x}_{t}\\big)$ : ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{\\mathrm{DM}}(\\theta)=\\mathbb{E}_{t,p_{0}(\\mathbf{x}_{0}),p(\\mathbf{x}_{t}|\\mathbf{x}_{0})}\\left[\\lambda(t)\\left||\\epsilon_{\\theta}(\\mathbf{x}_{t},t)+\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})|\\right|_{2}^{2}\\right],}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\lambda(t)$ is a time-dependent coefficient. Sampling from a diffusion model can be achieved by solving the reverse-time SDE or the corresponding diffusion ODEs [38], which can be efficiently achieved by modern fast diffusion samplers [36, 22, 42]. ", "page_idx": 3}, {"type": "text", "text": "Flow-based models. Flow-based models can be traced back to Continuous Normalizing Flows [5] (CNF), which is a more generic modeling technique and can capture the probability paths of the diffusion process as well [17]. Training a CNF becomes more practical since the purpose of the flow matching technique [17], which learns the conditional velocity field of the flow. Similar to (1), we can add some constraints to the noise schedule such that $\\alpha_{0}=1,\\sigma_{0}=0$ and $\\alpha_{1}=0,\\sigma_{1}=1$ , and then define the flow as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\psi_{t}(\\cdot|\\epsilon):\\mathbf{x}_{0}\\mapsto\\alpha_{t}\\mathbf{x}_{0}+\\sigma_{t}\\epsilon,\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "In this case, the velocity field that generates the flow $\\psi_{t}$ can be represented as: ", "page_idx": 3}, {"type": "equation", "text": "$$\nu_{t}(\\psi_{t}(\\mathbf{x}_{0}|\\epsilon)|\\epsilon)=\\frac{\\mathrm{d}}{\\mathrm{d}t}\\psi_{t}(\\mathbf{x}_{0}|\\epsilon)=\\dot{\\alpha}_{t}\\mathbf{x}_{0}+\\dot{\\sigma}_{t}\\epsilon.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The training objective of conditional flow matching is to train a velocity prediction model $\\mathbf{v}_{\\theta}$ to estimate the conditional velocity field: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{FM}}(\\theta)=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(\\mathbf{x}_{0})}\\left\\|\\mathbf{v}_{\\theta}(\\psi_{t}(\\mathbf{x}_{0}|\\epsilon),t)-\\frac{\\mathrm{d}}{\\mathrm{d}t}\\psi_{t}(\\mathbf{x}_{0}|\\epsilon)\\right\\|_{2}^{2}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The sampling of a flow-based model can be achieved by solving the probability flow ODE with the learned velocity ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\mathbf{x}_{t}}{\\mathrm{d}t}=\\mathbf{v}_{\\theta}(\\mathbf{x}_{t},t),\\quad\\mathbf{x}_{1}\\sim p_{1}(\\mathbf{x}_{1}).\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Since the formulation of the flow $\\psi_{t}$ can be viewed as the interpolation between $\\mathbf{x}_{\\mathrm{0}}$ and $\\mathbf{v}$ , it is also referred to as interpolant in some literature [1, 24]. Among various types of interpolants, a very simple choice is linear interpolant [24, 8], where $\\alpha_{t}=(1-t)$ and $\\sigma_{t}=t$ . In this case, the velocity field becomes a straight line connecting the initial noise and the data point, which also corresponds to the optimal transport between the two distributions [19, 17]. The effectiveness and scalability of the linear interpolant have also been proven in recent work [17, 24, 8]. ", "page_idx": 3}, {"type": "text", "text": "3.2 Efficient Estimation of Velocity ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We consider the velocity estimation in flow-based generative models with the linear interpolant [24, 8, 20]. As shown in (5), the training target of the velocity prediction model $\\mathbf{v}_{\\theta}$ is exactly $\\epsilon-\\mathbf{x}_{0}$ , a constant value independent of $t$ . Our main motivation is to efficiently estimate the velocity during the sampling, instead of evaluating the whole velocity prediction model $\\mathbf{v}_{\\theta}$ every time. ", "page_idx": 3}, {"type": "text", "text": "Analyzing the stability of velocity. We start by analyzing the stability of the output value of $\\mathbf{v}_{\\theta}$ along the sampling trajectory. By comparing the training objectives of diffusion and flow-based models (2)(5), we know that the target of $\\mathbf{v}_{\\theta}$ is independent of $t$ . A more in-depth discussion is provided in Appendix A.3, where we show the two training objectives have different time-dependent weight functions. To verify whether there are similar patterns during the sampling, we compare how the prediction results change across the sampling steps in Figure 1. Specifically, we compare the curvatures of $\\epsilon_{\\theta}$ of a diffusion model (DiT [28]) and the $\\mathbf{v}_{\\theta}$ of flow-based models (SiT [8], SD3 [8], etc) during the sampling steps. For each model, we sample from 8 random noises and set the total sampling steps as 20. It can be clearly observed that $\\mathbf{v}_{\\theta}$ of a flow-based model is much more stable than the $\\epsilon_{\\theta}$ of a diffusion model. Therefore, We define the $\\mathbf{v}_{\\theta}$ as a \u201cstable value\u201d. The stability of $\\mathbf{v}_{\\theta}$ makes it possible to obtain the velocity more efficiently rather than performing the forward pass of the whole velocity prediction network $\\mathbf{v}_{\\theta}$ at every sampling step. ", "page_idx": 3}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/03b0b0b2b6dc0f50dfa2f51165c75000e7e5166180fc5910774170071201df97.jpg", "img_caption": ["Figure 2: Overview of FlowTurbo. (a) Motivated by the stability of the velocity predictor\u2019s outputs during the sampling, we propose to learn a lightweight velocity refiner to regress the offset of the velocity field. (b)(c) We propose the pseudo corrector which leverages a velocity cache to reduce the number of model evaluations while maintaining the same convergence order as Heun\u2019s method. (d) During sampling, we employ a combination of Heun\u2019s method, the pseudo corrector, and the velocity refiner, where each sample block is processed with the proposed sample-aware compilation. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "Learning a lightweight velocity refiner. Since the velocity in a flow-based model is a \u201cstable value\u201d, we propose to learn a lightweight refiner that can adjust the velocity with minimal computational costs. The velocity refiner takes as inputs both the current intermediate result and the velocity of the previous step, and returns the offset of velocity: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{v}_{t_{i}}=\\mathbf{r}_{\\phi}(\\mathbf{x}_{t_{i}},\\mathbf{v}_{t_{i-1}},t_{i})+\\mathbf{v}_{t_{i-1}}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The velocity refiner $\\mathbf{r}_{\\phi}$ can be designed to be very lightweight ( $<5\\%$ parameters of $\\mathbf{v}_{\\theta}$ ). The detailed architecture can be found in Appendix C. ", "page_idx": 4}, {"type": "text", "text": "To learn the velocity refiner, we need to minimize the difference between the output of $\\mathbf{r}_{\\phi}$ and the actual offset $\\mathbf{v}_{t_{i}}-\\mathbf{v}_{t_{i-1}}$ . However, it requires multiple-step sampling to obtain an intermediate result $\\mathbf{x}_{t_{i}}$ to make the training objective perfectly align with our target. To reduce the training cost, we simulate the $\\mathbf{x}_{t}$ with one-step sampling starting from $\\mathbf{x}_{t_{i-1}}$ , which is directly obtained by the flow $\\psi_{t_{i-1}}$ . The detailed procedure to compute the loss is listed as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{x}_{t_{i-1}}\\leftarrow\\psi_{t_{i-1}}(\\mathbf{x}_{0}|\\epsilon),\\quad\\mathbf{x}_{0}\\sim p_{0}(\\mathbf{x}),\\epsilon\\sim p_{1}(\\mathbf{x})}\\\\ &{\\mathbf{v}_{t_{i-1}}\\leftarrow\\mathbf{v}_{\\theta}(\\mathbf{x}_{t_{i-1}},t_{i-1}),\\quad\\mathbf{x}_{t_{i}}\\leftarrow\\mathrm{Solver}(\\mathbf{x}_{t_{i-1}},\\mathbf{v}_{t_{i-1}},\\Delta t)}\\\\ &{\\mathcal{L}_{\\phi}\\leftarrow\\mathbb{E}\\|\\mathbf{v}_{\\theta}(\\mathbf{x}_{t_{i}},t_{i})-(\\mathbf{r}_{\\phi}(\\mathbf{x}_{t_{i}},\\mathbf{v}_{t_{i-1}},t_{i})+\\mathbf{v}_{t_{i-1}})\\|_{2}^{2}}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Where $\\Delta t=t_{i}-t_{i-1}$ and we use a simple Euler step for the Solver to obtain $\\mathbf{x}_{t_{i}}$ . Once the velocity refiner is learned, we can use it to replace the original $\\mathbf{v}_{\\theta}$ at some specific sampling steps. We will demonstrate through experiments that adding the velocity refiner can improve the sampling quality without introducing noticeable computational overhead. ", "page_idx": 4}, {"type": "text", "text": "Compatibility with classifier-free guidance. Classifier-free guidance [11] is a useful technique to improve the sampling quality in conditional sampling. Let $\\mathbf{y}$ be the condition, the classifier-free guidance for a velocity prediction model [8] can be defined as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{v}^{\\zeta}(\\mathbf{x},t|\\mathbf{y})=(1-\\zeta)\\mathbf{v}_{\\theta}(\\mathbf{x},t|\\mathcal{D})+\\zeta\\mathbf{v}_{\\theta}(\\mathbf{x},t|\\mathbf{y}),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\zeta$ is the guidance scale and $\\mathcal{Q}$ denotes the null condition. To make our velocity refiner support classifier-free guidance, we only need to make sure both the conditional prediction $\\mathbf{v}_{\\theta}(\\mathbf{x},t\\vert\\mathbf{y})$ and the ", "page_idx": 4}, {"type": "text", "text": "unconditional prediction $\\mathbf{v}_{\\theta}(\\mathbf{x},t|\\boldsymbol{\\mathcal{O}})$ appear during the training. Note that we always feed the velocity prediction model $\\mathbf{v}_{\\theta}$ and the velocity refiner $\\mathbf{r}_{\\phi}$ with the same condition. ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{y}_{\\gamma}=\\mathbb{I}_{\\gamma\\leq\\gamma_{1}}\\cdot\\mathcal{D}+\\mathbb{I}_{\\gamma>\\gamma_{1}}\\cdot\\mathbf{y},\\quad\\gamma\\in\\mathcal{U}[0,1],}\\\\ &{\\mathcal{L}_{\\phi}^{\\mathrm{CFG}}\\leftarrow\\mathbb{E}\\|\\mathbf{v}_{\\theta}(\\mathbf{x}_{t_{i}},t_{i}|\\mathbf{y}_{\\gamma})-(\\mathbf{r}_{\\phi}(\\mathbf{x}_{t_{i}},\\mathbf{v}_{t_{i-1}},t_{i}|\\mathbf{y}_{\\gamma})+\\mathbf{v}_{t_{i-1}})\\|_{2}^{2},}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where we set the $\\gamma_{1}=0.1$ as the probability of using an unconditional velocity. ", "page_idx": 5}, {"type": "text", "text": "3.3 Towards Real-Time Image Generation ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "The sampling costs of a flow-based model can be significantly minimized by integrating our lightweight velocity refiner $\\mathbf{r}_{\\phi}$ in place of the velocity prediction network $\\mathbf{v}_{\\theta}$ at selected sampling steps. In this section, we propose two techniques to further improve the sampling speed towards real-time image generation. ", "page_idx": 5}, {"type": "text", "text": "Pseudo corrector. Traditional numerical ODE solvers are usually used to sample from a probability flow ODE. For example, SiT [8] adopt a Heun method (or improved Euler\u2019s method) [15] as the ODE solver. The update rule from $t_{i-1}$ to $t_{i}$ can be written as: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{l l}{\\displaystyle\\mathbf{d}_{i-1}\\leftarrow\\mathbf{v}_{\\theta}(\\mathbf{x}_{t_{i-1}},t_{i-1}|\\mathbf{y}),\\quad}&{\\displaystyle\\tilde{\\mathbf{x}}_{t_{i}}\\leftarrow\\mathbf{x}_{t_{i-1}}+\\Delta t\\mathbf{d}_{i-1}}\\\\ {\\displaystyle\\mathbf{d}_{i}\\leftarrow\\mathbf{v}_{\\theta}(\\tilde{\\mathbf{x}}_{t_{i}},t_{i}|\\mathbf{y}),\\quad}&{\\displaystyle\\mathbf{x}_{i}\\leftarrow\\mathbf{x}_{i-1}+\\frac{\\Delta t}{2}[\\mathbf{d}_{i-1}+\\mathbf{d}_{i}]}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Each Heun step contains a predictor step (14) and a corrector step (15), thus includes two evaluations of the velocity predictor $\\mathbf{v}_{\\theta}$ , bringing extra inference costs. Motivated by [42], we propose to reuse the ${\\bf d}_{i}$ in the next sampling step, instead of re-computing it via $\\mathbf{d}_{i}\\gets\\mathbf{v}_{\\theta}(\\mathbf{x}_{t_{i}},t_{i}|\\mathbf{y})$ (see Figure 2 (b)(c) for illustration). We call this a pseudo corrector since it is different from the predictor-corrector solvers in numerical analysis. It can be proved (see Appendix B) that the pseudo corrector also enjoys 2-order convergence while only having one model evaluation at each step. ", "page_idx": 5}, {"type": "text", "text": "Sample-aware compilation. Compiling the network into a static graph is a widely used technique for model acceleration. However, all the previous work only considers network-level compilation, i.e., only compiling the $\\epsilon_{\\theta}$ or $\\mathbf{v}_{\\theta}$ . We propose the sample-aware compilation which wraps both the forward pass of $\\mathbf{v}_{\\theta}$ or $\\mathbf{r}_{\\phi}$ and the sampling operation together (including the classifier-free guidance) and performs the compilation. For example, the sample blocks illustrated in Figure 2 (b, c) are compiled into static graphs. Since each sample block is independent, we can still adjust the number of inference steps and sampling configurations flexibly. ", "page_idx": 5}, {"type": "text", "text": "3.4 Discussion ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Recently, there have been more and more training-based methods [20, 40, 32] aiming to accelerate diffusion models or flow-based models through one-step distillation. Although these methods can achieve faster inference, they usually require generating paired data using the pre-trained model and suffer from large training costs (e.g., ${>}100$ GPU days in [40, 20]). Besides, one-step methods only keep the generation ability of the original model while disabling more diverse applications such as image inpainting and image editing. In contrast, our FlowTurbo aims to accelerate flow-based models through velocity refinement, which still works in a multi-step manner and performs sampling on the original trajectory. For example, FlowTurbo can be easily combined with existing diffusion-based image editing methods like SDEdit [25] (see Section 4.4). ", "page_idx": 5}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We conduct extensive experiments to verify the effectiveness of FlowTurbo. Specifically, we apply FlowTurbo to both class-conditional image generation and text-to-image generation tasks and demonstrate that FlowTurbo can significantly reduce the sampling costs of the flow-based generative models. We also provide a detailed analysis of each component of FlowTurbo, as well as qualitative comparisons of different tasks. ", "page_idx": 5}, {"type": "text", "text": "4.1 Setups ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "In our experiments, we consider two widely used benchmarks including class-conditional image generation and text-to-image generation. For class-conditional image generation, we adopt a transformer", "page_idx": 5}, {"type": "text", "text": "Table 1: Main results. We apply our FlowTurbo on SiT-XL [24] and the 2-RF of InstaFlow [20] to perform class-conditional image generation and text-to-image generation, respectively. The image quality is measured by the FID $50{\\mathrm{K}}\\downarrow$ on ImageNet $(256\\!\\times\\!256)$ and the FID $5\\mathrm{K}\\downarrow$ on MS COCO 2017 $512\\!\\times\\!512\\!$ ). We use the suffix to represent the number of Heun\u2019s method block $(H)$ , pseudo corrector block $(P)$ , and the velocity refiner block $(R)$ . Our results demonstrate that FlowTurbo can significantly accelerate the inference of flow-based models while achieving better sampling quality. ", "page_idx": 6}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/3c51cf3036dd0d35d38b56d7eed8feaacf78f25772ca6e036fb9d39418881093.jpg", "table_caption": ["(a) Class-conditional Image Generation ", "(b) Text-to-image Generation "], "table_footnote": [], "page_idx": 6}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/f2edd796efd97eb0387af3ef08bf70d53768264aed6d57b1e5f06aa05f75d90a.jpg", "table_caption": ["Table 2: Comparisons with the state-of-the-arts. We compare the sampling quality and speed of different methods on ImageNet $256\\times256$ class-conditional sampling. We demonstrate that FlowTurbo can significantly improve over the baseline SiT-XL [24] and achieves the fastest sampling $38\\,\\mathrm{ms}\\,/\\,\\mathrm{img})$ and the best quality (2.12 FID) with different configurations. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "style flow-based model SiT-XL [24] pre-trained on ImageNet $256\\!\\times\\!256$ . For text-to-image generation, we utilize InstaFlow [20] as the flow-based model, whose backbone is a U-Net similar to StableDiffusion [30]. Note that we use the 2-RF model from [19] instead of the distilled version since our FlowTurbo is designed to achieve acceleration within the multi-step sampling framework. The velocity refiner only contains $4.3\\%$ and $5\\%$ parameters of the corresponding predictor, and the detailed architecture can be found in Appendix C. During training, we randomly sample $\\Delta t\\in(0,0.12]$ and compute the training objectives in (13). In both tasks, we use a single NVIDIA A800 GPU to train the velocity refiner and find it converges within 6 hours. We use a batch size of 8 on a single A800 GPU to measure the latency of each method. Please refer to Appendix C for more details. ", "page_idx": 6}, {"type": "text", "text": "4.2 Main Results ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Class-conditional image generation. We adopt the SiT-XL [24] trained on ImageNet [6] of resolution of $256\\times256$ . Following common practice [24, 30], we adopt a classifier-free guidance scale (CFG) of 1.5. According to [24], a widely used sampling method of the flow-based model is Heun\u2019s method [15]. In Table 1a, we demonstrate how our FlowTurbo can achieve faster inference than Heun\u2019s method in various computational budgets. Specifically, we conduct experiments with different sampling configurations (the second column of Table 1a), where we use the suffix to represent the number of Heun\u2019s method block $(H)$ , pseudo corrector block $(P)$ , and the velocity refiner block $(R)$ . Note that each Heun\u2019s block contains two evaluations of the velocity predictor while each pseudo corrector block only contains one. We also provide the total FLOPs during the sampling and the inference speed of each sample configuration. In each group of comparison, we choose the sampling strategy of FlowTurbo to make the sampling quality (measured by the FID $50{\\mathrm{K}}\\downarrow$ ) similar to the baseline. Our results demonstrate that FlowTurbo can accelerate the inference by $37.2\\%\\sim43.1\\%$ , while still achieving better sampling quality. Notably, FlowTurbo obtains 3.63 FID with a sampling speed of $41.6\\;\\mathrm{ms/img}$ , achieving real-time image generation. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Text-to-image generation. We adopt the 2-RF model in [20] as our base model for text-to-image generation. Note that we do not adopt the distilled version in [20] since we focus on accelerating flow-based models within the multi-step sampling paradigm. Following [20, 26], we compute the FID $5\\mathrm{K}\\downarrow$ between the generated $512\\times512$ samples and the images on MS COCO 2017 [16] validation set. The results are summarized in Table 1b, where we compare the sampling speed/quality with the baseline Heun\u2019s method. Note that the notation of the sampling configuration is the same as Table 1a. The results clearly demonstrate that Our FlowTurbo can also achieve significant acceleration $(29.8\\%{\\sim}38.5\\%)$ on text-to-image generation. ", "page_idx": 7}, {"type": "text", "text": "4.3 Comparisons to State-of-the-Arts ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In Table 2, we compare our FlowTurbo with state-of-theart methods on ImageNet $256\\,\\times\\,256$ class-conditional generation. We use SiT-XL [24] as our base model and apply FlowTurbo with different sampling configurations on it. We show that FlowTurbo with $H_{1}P_{5}R_{3}$ achieves the sampling speed of 38 (ms / img) with 3.93 FID (still better than most methods like Mask-GIT [2], ADM [7]). On the other hand, FlowTurbo with $H_{8}P_{9}R_{5}$ archives the lowest FID 2.12, outperforming all the other methods. Besides, we also provide a comparison of the sampling speed/quality trade-offs of SiT (by changing the number of sampling steps of Heun\u2019s method) and FlowTurbo (by changing the sampling configurations) in 3, where the results of some other state-of-the-arts methods are also included. The comparison shows our FlowTurbo exhibits favorable sampling quality/speed trade-offs. ", "page_idx": 7}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/2d2c5d45a332d93b0ac1e6f2a44db74ff3e5a737507e57ef16c6431201509cbe.jpg", "img_caption": ["Figure 3: FlowTurbo exhibits favorable trade-offs compared with SOTA methods. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "4.4 Analysis ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Ablation of components of FlowTurbo. We evaluate the effectiveness of each component of FlowTurbo in Table 3a. Specifically, we start from the baseline, a 7-step Heun\u2019s method and gradually add components of FlowTurbo. In the sample config A, we show that adding a velocity refiner can significantly improve the $\\mathrm{FID\\downarrow}$ $\\mathrm{4.42\\rightarrow2.80}\\rangle$ ), while introducing minimal computational costs (only $+0.7\\%$ in the latency). From B to E, we adjust the ratios of Heun\u2019s method block, the pseudo corrector block, and the velocity refiner block to achieve different trade-offs between sampling speed and quality. In the last two rows, we show that our sample-aware compilation is better than standard model-level compilation, further increasing the sampling speed. ", "page_idx": 7}, {"type": "text", "text": "Choice of $\\Delta t$ . We find the choice of $\\Delta t$ during training is crucial and affects the sampling results a lot in our experiments, as shown in Table 3b. We find $\\bar{\\Delta}t\\in(0.0,0.1]$ works well for more sampling steps like $H_{12}R_{5}$ , while $\\Delta t\\in[0.06,0.12]$ is better for fewer sampling steps like $H_{6}R_{2}$ and $H_{9}R_{3}$ . Besides, we find $\\Delta t\\in(0.0,0.\\dot{1}2]$ yields relatively good results in all the situations. ", "page_idx": 7}, {"type": "text", "text": "Effects of velocity refiner. We evaluate the effects of the different number of velocity refiners in Table $3\\mathrm{c}$ , and find that appropriately increasing the number of velocity refiners can improve the trade-off between sampling quality and speed. Specifically, we find $H_{6}R_{2}$ can achieve better image quality and generation speed than the baseline $H_{8}$ . ", "page_idx": 7}, {"type": "text", "text": "Effects of pseudo corrector. In Table 3d, we fix the total number of both Heun\u2019s sample block and pseudo corrector block and adjust the ratio of the pseudo corrector. Our results demonstrate that increasing the number of pseudo corrector blocks can significantly improve the sampling speed while introducing neglectable performance drop (e.g., FlowTurbo with $H_{1}P_{6}R_{2}$ performs better than $H_{8}$ ). ", "page_idx": 7}, {"type": "text", "text": "Table 3: Ablation studies. We evaluate the effectiveness of each component in FlowTurbo as well as the selection of some hyper-parameters. (a) We gradually add the components of FlowTurbo to the baseline and show that FlowTurbo can achieve over $50\\%$ acceleration with better sampling quality. (b) we experiment with different ranges of $\\Delta t$ and find $\\Delta t\\in(0.0,0.12]$ yields relatively good results in all the situations. (c)(d) we show how the sampling quality/speed changes with the number of velocity refiner and pseudo corrector blocks. ", "page_idx": 8}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/5cab9570ef8aba449e506258ff36018920be7aa1a7db23b13e51f6e6bed4f7af.jpg", "table_caption": ["(a) Ablation of components of FlowTurbo. "], "table_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/ec3613fe7b150c19085d67a8a8708b7fe8abbfb5276f3ac5f26d3a8961f0654e.jpg", "table_caption": ["(c) Effects of the velocity refiner. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Table 4: Comparisons of different orders of the blocks. We compare the results of changing the orders of Heun\u2019s block $(H)$ , pseudo corrector block $(P)$ , and the velocity refiner block $(R)$ . Our results show applying the blocks in $H_{N_{H}}P_{N_{P}}R_{N_{R}}$ order yields the best trade-off between generation quality and speed. ", "page_idx": 8}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/c3eb6e6b9bc7c667a34213de9042ff8b128542dc33a37dee3159af7c5cceaab6.jpg", "table_caption": ["(a) Altering the order of $H/P/R$ blocks. "], "table_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/835a0cb9df2ad3862a93afac76fef85f9ba6cfc589051c97fa84a25838168ccd.jpg", "table_caption": ["(b) Repeating multiple $H/P/R$ blocks "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "When designing the architecture for the velocity refiner, we followed a simple rule to make the refiner have a similar architecture as the base velocity predictor but with much fewer parameters ( $5\\%$ of the base model). The detailed architecture is described in Section 4.1 and Appendix C. For ", "page_idx": 8}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/6a742532de678a01ef4bfeed623759f31ae2abf0a36d0ccd8a58c50a2c0db963.jpg", "table_caption": ["Table 5: Ablation of refiner architectures. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "example, since SiT consists of multiple transformer blocks, we simply use a single block as the refiner. For text-to-image generation, we reduce the number of layers and channels of the UNet. In our early experiments, we have tried another architecture for class-conditional image generation, where a SiT-S (a smaller version of the base velocity predictor SiT-XL) is adopted as the refiner (as shown in Table 5). We find that using a block of SiT-XL as the refiner is slightly better than the SiT-S. These results demonstrate that our framework is robust to the choice of model architectures for the velocity refiner. ", "page_idx": 8}, {"type": "text", "text": "Comparisons of different order of the blocks. According to the observation in Figure 1, the velocity during the sampling would become stable at the final few steps, where we adopted a lightweight refiner to regress the velocity offset. Besides, our pseudo corrector is designed to efficiently achieve ", "page_idx": 8}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/01086457a2e9a10aeadacc70dc9f1337346a9ac9cbf2d999e203596ef11078c9.jpg", "img_caption": ["(a) Results of Heun\u2019s $2.6\\;\\mathrm{s}\\;/$ img, left) and FlowTurbo (1.8 s / img, right) (b) Extensions "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "Figure 4: Qualitative results. (a) We compared our FlowTurbo with Heun\u2019s method on Lumina-Next-T2I [9]. With better image quality, our method requires much less sampling time $(-30.8\\%)$ . (b) Since FlowTurbo remains the multi-step sampling paradigm, it can be seamlessly applied to more applications such as image inpainting, image editing, and object removal. ", "page_idx": 9}, {"type": "text", "text": "2-order convergence, which requires a 2-order intermediate result as initialization. This explains why we need several Heun\u2019s steps at the beginning. To further investigate how the order of the blocks would affect the sampling speed and quality, we perform experiments and summarize the results in Tables 4a and 4b. First, we find changing the order of the sampling blocks will cause worse sampling quality. Second, we show that sequentially using multiple blocks (e.g., $[H_{N_{H}}P_{N_{P}}R_{N_{R}}]\\times k)$ will cost the same inference time as $H_{k N_{H}}P_{k N_{P}}R_{k N_{R}}$ but lead to worse visual quality. ", "page_idx": 9}, {"type": "text", "text": "Qualitative results and extensions. We provide qualitative results of high-resolution text-to-image generation by applying FlowTurbo to the newly released flow-based model Lumina-Next-T2I [9]. Since Lumina-Next-T2I adopts a heavy language model Gemma-2B [39] to extract text features and generates high-resolution images $(1024\\times1024)$ , the inference speed of it is slower than SiT [24]. In Figure 4a, we show that our FlowTurbo can generate images with better quality and higher inference speed compared with the baseline Heun\u2019s method. Besides, since FlowTurbo remains the multi-step sampling paradigm, it can be seamlessly applied to more applications like image inpainting, image editing, and object removal (Section 4.4). Please also refer to the Appendix C for the detailed implementation of various tasks. ", "page_idx": 9}, {"type": "text", "text": "Limitations and broader impact. Despite the effectiveness of FlowTurbo, our velocity refiner highly relies on the observation that the velocity is a \u201cstable value\u201d during the sampling. However, we have not found such a stable value in diffusion-based models yet, which might limit the application. Besides, the abuse of FlowTurbo may also accelerate the generation of malicious content. ", "page_idx": 9}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we introduce FlowTurbo, a novel framework designed to accelerate flow-based generative models. By leveraging the stability of the velocity predictor\u2019s outputs, we propose a lightweight velocity refiner to adjust the velocity field offsets. This refiner comprises only about $5\\%$ of the original velocity predictor\u2019s parameters and can be efficiently trained in under 6 GPU hours. Additionally, we have proposed a pseudo corrector that reduces the number of model evaluations while maintaining the same convergence order as the second-order Heun\u2019s method. Furthermore, we propose a sample-aware compilation technique to enhance sampling speed. Extensive experiments on various flow-based generative models demonstrate FlowTurbo\u2019s effectiveness on both class-conditional image generation and text-to-image generation. We hope our work will inspire future efforts to accelerate flow-based generative models across various application scenarios. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This work was supported in part by the National Natural Science Foundation of China under Grant 62321005, Grant 624B1026, Grant 62336004, and Grant 62125603. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Michael S Albergo, Nicholas M Boff,i and Eric Vanden-Eijnden. Stochastic interpolants: A unifying framework for flows and diffusions. arXiv preprint arXiv:2303.08797, 2023.   \n[2] Huiwen Chang, Han Zhang, Lu Jiang, Ce Liu, and William T Freeman. Maskgit: Masked generative image transformer. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 11315\u201311325, 2022.   \n[3] Junsong Chen, Chongjian Ge, Enze Xie, Yue Wu, Lewei Yao, Xiaozhe Ren, Zhongdao Wang, Ping Luo, Huchuan Lu, and Zhenguo Li. Pixart-sigma: Weak-to-strong training of diffusion transformer for 4k text-to-image generation. arXiv preprint arXiv:2403.04692, 2024.   \n[4] Junsong Chen, Jincheng Yu, Chongjian Ge, Lewei Yao, Enze Xie, Yue Wu, Zhongdao Wang, James Kwok, Ping Luo, Huchuan Lu, et al. Pixart-alpha: Fast training of diffusion transformer for photorealistic text-to-image synthesis. arXiv preprint arXiv:2310.00426, 2023.   \n[5] Ricky TQ Chen, Yulia Rubanova, Jesse Bettencourt, and David K Duvenaud. Neural ordinary differential equations. Advances in neural information processing systems, 31, 2018.   \n[6] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In CVPR, pages 248\u2013255. IEEE, 2009.   \n[7] Prafulla Dhariwal and Alexander Nichol. Diffusion models beat gans on image synthesis. NeurIPS, 34:8780\u20138794, 2021.   \n[8] Patrick Esser, Sumith Kulal, Andreas Blattmann, Rahim Entezari, Jonas M\u00fcller, Harry Saini, Yam Levi, Dominik Lorenz, Axel Sauer, Frederic Boesel, et al. Scaling rectified flow transformers for high-resolution image synthesis. arXiv preprint arXiv:2403.03206, 2024.   \n[9] Peng Gao, Le Zhuo, Ziyi Lin, Chris Liu, Junsong Chen, Ruoyi Du, Enze Xie, Xu Luo, Longtian Qiu, Yuhang Zhang, et al. Lumina-t2x: Transforming text into any modality, resolution, and duration via flow-based large diffusion transformers. arXiv preprint arXiv:2405.05945, 2024.   \n[10] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. NeurIPS, 33:6840\u2013 6851, 2020.   \n[11] Jonathan Ho and Tim Salimans. Classifier-free diffusion guidance. NeurIPS, 2021.   \n[12] Jonathan Ho, Tim Salimans, Alexey Gritsenko, William Chan, Mohammad Norouzi, and David J Fleet. Video diffusion models. arXiv preprint arXiv:2204.03458, 2022.   \n[13] Diederik Kingma, Tim Salimans, Ben Poole, and Jonathan Ho. Variational diffusion models. NeurIPS, 34:21696\u201321707, 2021.   \n[14] Black Forest Labs. Flux: A powerful tool for text generation. https://huggingface.co/ black-forest-labs/FLUX.1-dev, 2024. Accessed: 2024-09-26.   \n[15] John Denholm Lambert et al. Numerical methods for ordinary differential systems, volume 146. Wiley New York, 1991.   \n[16] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Doll\u00e1r, and C Lawrence Zitnick. Microsoft coco: Common objects in context. In ECCV, pages 740\u2013755. Springer, 2014.   \n[17] Yaron Lipman, Ricky TQ Chen, Heli Ben-Hamu, Maximilian Nickel, and Matt Le. Flow matching for generative modeling. arXiv preprint arXiv:2210.02747, 2022.   \n[18] Luping Liu, Yi Ren, Zhijie Lin, and Zhou Zhao. Pseudo numerical methods for diffusion models on manifolds. ICLR, 2022.   \n[19] Xingchao Liu, Chengyue Gong, and Qiang Liu. Flow straight and fast: Learning to generate and transfer data with rectified flow. arXiv preprint arXiv:2209.03003, 2022.   \n[20] Xingchao Liu, Xiwen Zhang, Jianzhu Ma, Jian Peng, et al. Instaflow: One step is enough for highquality diffusion-based text-to-image generation. In The Twelfth International Conference on Learning Representations, 2023.   \n[21] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101, 2017.   \n[22] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver: A fast ode solver for diffusion probabilistic model sampling in around 10 steps. NeurIPS, 2022.   \n[23] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solve $^{++}$ : Fast solver for guided sampling of diffusion probabilistic models. arXiv preprint arXiv:2211.01095, 2022.   \n[24] Nanye Ma, Mark Goldstein, Michael S Albergo, Nicholas M Boff,i Eric Vanden-Eijnden, and Saining Xie. Sit: Exploring flow and diffusion-based generative models with scalable interpolant transformers. arXiv preprint arXiv:2401.08740, 2024.   \n[25] Chenlin Meng, Yutong He, Yang Song, Jiaming Song, Jiajun Wu, Jun-Yan Zhu, and Stefano Ermon. Sdedit: Guided image synthesis and editing with stochastic differential equations. arXiv preprint arXiv:2108.01073, 2021.   \n[26] Chenlin Meng, Robin Rombach, Ruiqi Gao, Diederik Kingma, Stefano Ermon, Jonathan Ho, and Tim Salimans. On distillation of guided diffusion models. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 14297\u201314306, 2023.   \n[27] Chong Mou, Xintao Wang, Liangbin Xie, Yanze Wu, Jian Zhang, Zhongang Qi, and Ying Shan. T2iadapter: Learning adapters to dig out more controllable ability for text-to-image diffusion models. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 38, pages 4296\u20134304, 2024.   \n[28] William Peebles and Saining Xie. Scalable diffusion models with transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 4195\u20134205, 2023.   \n[29] Dustin Podell, Zion English, Kyle Lacey, Andreas Blattmann, Tim Dockhorn, Jonas M\u00fcller, Joe Penna, and Robin Rombach. Sdxl: Improving latent diffusion models for high-resolution image synthesis. arXiv preprint arXiv:2307.01952, 2023.   \n[30] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bj\u00f6rn Ommer. High-resolution image synthesis with latent diffusion models. In CVPR, pages 10684\u201310695, 2022.   \n[31] Tim Salimans and Jonathan Ho. Progressive distillation for fast sampling of diffusion models. ICLR, 2022.   \n[32] Axel Sauer, Dominik Lorenz, Andreas Blattmann, and Robin Rombach. Adversarial diffusion distillation. arXiv preprint arXiv:2311.17042, 2023.   \n[33] Axel Sauer, Katja Schwarz, and Andreas Geiger. Stylegan-xl: Scaling stylegan to large diverse datasets. In ACM SIGGRAPH 2022 conference proceedings, pages 1\u201310, 2022.   \n[34] Christoph Schuhmann, Richard Vencu, Romain Beaumont, Robert Kaczmarczyk, Clayton Mullis, Aarush Katta, Theo Coombes, Jenia Jitsev, and Aran Komatsuzaki. Laion-400m: Open dataset of clip-flitered 400 million image-text pairs. arXiv preprint arXiv:2111.02114, 2021.   \n[35] Jascha Sohl-Dickstein, Eric Weiss, Niru Maheswaranathan, and Surya Ganguli. Deep unsupervised learning using nonequilibrium thermodynamics. In ICML, pages 2256\u20132265. PMLR, 2015.   \n[36] Jiaming Song, Chenlin Meng, and Stefano Ermon. Denoising diffusion implicit models. ICLR, 2021.   \n[37] Yang Song, Prafulla Dhariwal, Mark Chen, and Ilya Sutskever. Consistency models. 2023.   \n[38] Yang Song, Jascha Sohl-Dickstein, Diederik P Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. Score-based generative modeling through stochastic differential equations. In ICLR, 2021.   \n[39] Gemma Team, Thomas Mesnard, Cassidy Hardin, Robert Dadashi, Surya Bhupatiraju, Shreya Pathak, Laurent Sifre, Morgane Rivi\u00e8re, Mihir Sanjay Kale, Juliette Love, et al. Gemma: Open models based on gemini research and technology. arXiv preprint arXiv:2403.08295, 2024.   \n[40] Tianwei Yin, Micha\u00ebl Gharbi, Richard Zhang, Eli Shechtman, Fredo Durand, William T Freeman, and Taesung Park. One-step diffusion with distribution matching distillation. arXiv preprint arXiv:2311.18828, 2023.   \n[41] Lvmin Zhang, Anyi Rao, and Maneesh Agrawala. Adding conditional control to text-to-image diffusion models. In ICCV, pages 3836\u20133847, 2023.   \n[42] Wenliang Zhao, Lujia Bai, Yongming Rao, Jie Zhou, and Jiwen Lu. Unipc: A unified predictor-corrector framework for fast sampling of diffusion models. NeurIPS, 2023.   \n[43] Zangwei Zheng, Xiangyu Peng, Tianji Yang, Chenhui Shen, Shenggui Li, Hongxin Liu, Yukun Zhou, Tianyi Li, and Yang You. Open-sora: Democratizing efficient video production for all, 2024. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "A Detailed Background of Diffusion and Flow-based Models ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "In this section, we will provide a detailed background of diffusion and flow-based models, which is helpful to understand the difference and relationship between them. ", "page_idx": 12}, {"type": "text", "text": "A.1 Diffusion Models ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "The forward pass i.e. diffusioin pass of DPMs can be defined as a sequence of variables $\\{\\mathbf{x}_{t}\\}_{t\\in[0,1]}$ starting with $x_{0}$ , such that for any $t\\in[0,1]$ , $\\mathbf{x}_{0}\\in\\mathbb{R}^{D}$ is a D-dimensional random variable with an unknown data distribution $p_{0}(\\mathbf{x}_{0})$ . the distribution of $\\mathbf{x}_{t}$ conditioned on $x_{0}$ satisfies ", "page_idx": 12}, {"type": "equation", "text": "$$\np_{0t}(\\mathbf{x}_{t}|\\mathbf{x}_{0})=\\mathcal{N}(\\mathbf{x}_{t}|\\alpha_{t}\\mathbf{x}_{0},\\sigma_{t}\\mathbf{I})\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "where $\\alpha_{t}$ , $\\sigma_{t}\\in\\mathbb{R}^{+}$ are differentiable functions of $t$ with bounded derevatives. The choice for $\\alpha_{t}$ and $\\sigma_{t}$ is referred to as the noise schedule of a DPM. Let $p_{t}(\\boldsymbol{x}_{t})$ denote the marginal distribution of $\\mathbf{x}_{t}$ , DPMs choose noise schedules to ensure the marginal distribution $p_{1}(\\mathbf{x}_{1})\\overset{=}{=}\\mathcal{N}(0,\\mathbf{I})$ and the signal-to-noise-ratio (SNR) $\\alpha_{t}^{2}/\\sigma_{t}^{2}$ is strictly decreasing w.r.t. $t$ [13]. And we have ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t}=\\alpha_{t}\\mathbf{x}_{0}+\\sigma_{t}\\epsilon,\\quad t\\in[0,1],\\quad\\epsilon\\sim\\mathcal{N}(0,\\mathrm{I})\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Moreover, Kingma et al. [13] prove that the following stochastic differential equation (SDE) has the same transition distribution $q_{0t}(\\mathbf{x}_{t}|\\mathbf{x}_{0})$ as in (16) for any $t\\in[0,1]$ : ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\mathrm{d}\\mathbf{x}_{t}=f(t)\\mathbf{x}_{t}\\mathrm{d}t+g(t)\\mathrm{d}\\mathbf{w}_{t},\\;t\\in[0,1],\\quad\\mathbf{x}_{0}\\sim p_{0}(\\mathbf{x}_{0})\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "where $\\mathbf{w}_{t}\\in\\mathbb{R}^{D}$ is the standard Wiener process , and ", "page_idx": 12}, {"type": "equation", "text": "$$\nf(t)=\\frac{\\mathrm{d}\\log\\alpha_{t}}{\\mathrm{d}t},\\quad g^{2}(t)=\\frac{\\mathrm{d}\\sigma_{t}^{2}}{\\mathrm{d}t}-2\\frac{\\mathrm{d}\\log\\alpha_{\\mathrm{t}}}{\\mathrm{d}t}\\sigma_{t}^{2}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Song et al. [38] have shown that the forward process in (18) has an equivalent reverse process from time 1 to 0 under some regularity conditions, starting with the marginal distribution $p_{T}(\\mathbf{x}_{T})$ : ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathrm{d}\\mathbf{x}_{t}=[f(t)\\mathbf{x}_{t}-g^{2}(t)\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})]\\mathrm{d}t+g(t)\\mathrm{d}\\bar{\\mathbf{w}}_{t},\\quad\\mathbf{x}_{T}\\sim p_{T}(\\mathbf{x}_{T})}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "where $\\bar{\\mathbf{w}}_{t}\\in\\mathbb{R}^{D}$ is a standard Wiener process in the reverse time. To solve the reverse process in (20), the only thing we should do is to estimate the score term $\\nabla_{\\mathbf{x}}\\mathrm{log}p_{t}(\\mathbf{x}_{t})$ at each time t. In practice, DPMs train a neural network $\\epsilon_{\\theta}(\\mathbf{x},t)$ parameterized by $\\theta$ to estimate the scaled score function: $-\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})$ . The parameter $\\theta$ is optimized by minimizing the following objective [10, 38, 24] ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{\\mathrm{DM}}(\\theta)=\\mathbb{E}_{t,p_{0}(\\mathbf{x}_{0}),p(\\mathbf{x}_{t}|\\mathbf{x}_{0})}\\left[\\lambda(t)\\|\\epsilon_{\\theta}(\\mathbf{x}_{t},t)+\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})\\|_{2}^{2}\\right]}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "where $\\lambda(t)$ is a time-dependent coefficient. As $\\epsilon_{\\theta}(\\mathbf{x}_{t},t)$ can alse be regarded as predicting the Gaussian noise added to $\\mathbf{x}_{t}$ , it is usually called the noise prediction model . Since the ground truth of $\\epsilon_{\\theta}(\\mathbf{x}_{t},t)$ is $-\\sigma_{t}\\nabla_{\\mathbf{x}}\\mathrm{log}p_{t}(\\mathbf{x}_{t})$ , DPMs replace the score function in (20) by $-\\epsilon_{\\theta}(\\mathbf{x}_{t},t)/\\bar{\\sigma}_{t}$ and we refer to it as diffusion-based generative model. DPMs define a parameterized reverse process (diffusion SDE) from time 1 to 0, starting with $x_{1}\\sim p_{1}(\\mathbf{x}_{1})$ : ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\,\\mathrm{d}\\mathbf{x}_{t}=\\bigg[f(t)\\mathbf{x}_{t}+\\frac{g^{2}(t)}{\\sigma_{t}}\\epsilon_{\\theta}(\\mathbf{x}_{t},t)\\bigg]\\,\\mathrm{d}t+g(t)\\mathrm{d}\\bar{\\mathbf{w}}_{t},\\quad x_{1}\\sim\\mathcal{N}(0,\\mathbf{I})\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Samples can be generated from DPMs by solving the diffusion SDE in (22) with numerical solvers. ", "page_idx": 12}, {"type": "text", "text": "When discretizing SDEs, the step size is limited by the randomness of the Wiener process. A large step size (small number of steps) often causes non-convergence, especially in high dimensional spaces. For faster sampling, we can consider the associated probability flow ODE [38] which has the same marginla distribution at each time $t$ as that of the SDE. Specifically, for DPMs, Song et al. [38] proved that the probability flow ODE of (22) is ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\mathbf{x}_{t}}{\\mathrm{d}t}=\\mathbf{v}(\\mathbf{x}_{t},t):=f(t)\\mathbf{x}_{t}+\\frac{g^{2}(t)}{2\\sigma_{t}}\\epsilon_{\\theta}(\\mathbf{x}_{t},t),\\quad\\mathbf{x}_{1}\\sim\\mathcal{N}(0,\\mathbf{I})\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "Samples can be generated by solving the ODE from 1 to 0. Comparing with SDEs, ODEs can be solved with larger step sizes as they have no randomness. Furthermore, we can take advantage of efficient numerical ODE solvers to accelerate the sampling. ", "page_idx": 12}, {"type": "text", "text": "A.2 Flow-based Models ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "To introduce flow in detail, first we construct a time-dependent vector field, $u:[0,1]\\times\\mathbb{R}^{D}\\to\\mathbb{R}^{D}$ . A vector field $u_{t}$ can be used to construct a time-dependent diffeomorphic map, called a flow, $\\phi:[0,1]\\times\\mathbb{R}^{D}\\rightarrow\\mathbb{R}^{D}$ ,defined via the ordinary differential equation (ODE): ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\frac{\\mathrm{d}}{\\mathrm{d}t}\\phi_{t}(\\mathbf{x}_{0})=u_{t}(\\phi_{t}(\\mathbf{x}_{0}))}\\\\ &{\\quad\\phi_{0}(\\mathbf{x}_{0})=\\mathbf{x}_{0}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Chen et al. [5] suggested modeling the vector field $u_{t}$ with a neural network $\\mathbf{v}_{\\theta}$ , which in turn leads to a deep parametric model of the flow $\\phi_{t}$ , called a Continuous Normalizing Flow (CNF). It is a more generic modeling technique and can capture the probability paths of diffusion process as well. Training a CNF becomes more practical since the propose of the conditional flow matching (CFM) technique [17], which learns the conditional velocity field of the flow. ", "page_idx": 13}, {"type": "text", "text": "For generative models, similar to (17) we can add some constraints to the noise schedule such that $\\alpha_{0}=1,\\sigma_{0}=0$ and $\\alpha_{1}=0,\\sigma_{1}=1$ , and then define the flow as: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\psi_{t}(\\cdot|\\epsilon):\\mathbf{x}_{0}\\mapsto\\alpha_{t}\\mathbf{x}_{0}+\\sigma_{t}\\epsilon\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "The corresponding velocity vector field which is used to construct the flow $\\psi_{t}$ can be represented as: ", "page_idx": 13}, {"type": "equation", "text": "$$\nu_{t}(\\psi_{t}(\\mathbf{x}_{0}|\\epsilon)|\\epsilon)=\\frac{\\mathrm{d}}{\\mathrm{d}t}\\psi_{t}(\\mathbf{x}_{0}|\\epsilon)=\\dot{\\alpha}_{t}\\mathbf{x}_{0}+\\dot{\\sigma}_{t}\\epsilon\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Consider the time-dependent probability density function (PDF) $p_{t}(\\mathbf{x})$ of $\\mathbf{x}_{t}=\\psi_{t}(x_{0}|\\epsilon)=\\alpha_{t}\\mathbf{x}_{0}+$ $\\sigma_{t}\\mathbf{\\epsilon}_{}$ . Lipman et al. [17] proved that the marginal vector field $u_{t}$ that generates the probability path $p_{t}$ satisfies a Partial Differential Equation (PDE) called continuity equation (also transport equation) ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}}{\\mathrm{d}t}p_{t}(\\mathbf{x})+\\nabla_{\\mathbf{x}}\\cdot\\left(u_{t}(\\mathbf{x})p_{t}(\\mathbf{x})\\right)=0\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Using conditional flow matching technique $\\mathbf{v}(\\mathbf{x}_{t},t)$ in (23) can be estimated parametrically as $\\mathbf{v}_{\\theta}(\\mathbf{x}_{t},t)$ by minimizing the following objective ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{F M}(\\theta)=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left\\|\\mathbf{v}_{\\theta}(\\mathbf{x}_{t},t)-\\frac{\\mathrm{d}}{\\mathrm{d}t}\\psi_{t}(\\mathbf{x}_{0}|\\epsilon)\\right\\|_{2}^{2}}\\\\ {=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left\\|\\mathbf{v}_{\\theta}(\\mathbf{x}_{t},t)-\\dot{\\alpha}_{t}\\mathbf{x}_{0}-\\dot{\\sigma}_{t}\\epsilon\\right\\|_{2}^{2}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "We refer to (23) as a flow-based generative model. Since we have $\\mathbf{x}_{t}=\\psi_{t}(x_{0}|\\epsilon)$ , the sampling of a flow-based model can be achieved by solving the probability flow ODE with learned velocity ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\mathbf{x}_{t}}{\\mathrm{d}t}=\\mathbf{v}_{\\theta}(x_{t},t),\\quad x_{1}\\sim p_{1}(x_{1})\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "A.3 Relationship Between Diffusion and Flow-based Models ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "There exists a straightforward connection between $\\mathbf{v}(\\mathbf{x}_{t},t)$ and the score term $\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})$ according to [24]. ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\mathbf{v}(\\mathbf{x}_{t},t)={\\frac{{\\dot{\\alpha}}_{t}}{\\alpha_{t}}}\\mathbf{x}_{t}+\\left({\\dot{\\sigma}}_{t}-{\\frac{{\\dot{\\alpha}}_{t}\\sigma_{t}}{\\alpha_{t}}}\\right)\\left(-\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})\\right)\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Re ti s $\\{t_{i}\\}_{i=0}^{N-1},\\alpha_{t},\\sigma_{t},\\mathbf{x}_{0}\\sim\\mathcal{N}(0,\\mathbf{I})$ , velocity prediction model $\\mathbf{v}_{\\theta}(\\mathbf{x},t\\vert\\mathbf{y})$ $i=0$ $N-1$   \n$\\Delta t_{i}\\gets t_{i+1}-t_{i}$   \n$\\mathbf{d}_{i}\\gets\\mathbf{v}_{\\theta}(\\mathbf{x}_{i},t_{i}|\\mathbf{y})$   \n$\\tilde{\\mathbf{x}}_{t_{i+1}}\\leftarrow\\mathbf{x}_{i}+\\Delta t_{i}\\mathbf{d}_{i}$   \n$\\mathbf{d}_{i+1}\\leftarrow\\mathbf{v}_{\\theta}(\\Tilde{\\mathbf{x}}_{t_{i+1}},t_{i+1}|\\mathbf{y})$ $\\begin{array}{r}{\\mathbf{x}_{t_{i+1}}\\leftarrow\\mathbf{x}_{i}+\\frac{\\Delta t_{i}}{2}[\\mathbf{d}_{i}+\\mathbf{d}_{i+1}]}\\end{array}$   \nend for   \nreturn: $\\mathbf{x}_{N}$ ", "page_idx": 14}, {"type": "text", "text": "Algorithm 2 Pseudo Corrector Sampler ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Require: timesteps $\\{t_{i}\\}_{i=0}^{N-1}$ , $\\alpha_{t},\\sigma_{t}$ , $\\mathbf{x}_{0}\\sim\\mathcal{N}(0,\\mathbf{I})$ , velocity prediction model $\\mathbf{v}_{\\theta}(\\mathbf{x},t\\vert\\mathbf{y})$   \n$\\Delta t\\gets t_{1}-t_{0}$   \nfor $i=0$ to $N-1$ do $\\Delta t_{i}\\gets t_{i+1}-t_{i}$ if $i=0$ then $\\mathbf{d}_{i}\\gets\\mathbf{v}_{\\theta}(\\mathbf{x}_{i},t_{i}|\\mathbf{y})$ end if \u02dcxti+1 \u2190xi + \u2206tidi $\\begin{array}{r l}&{\\mathbf{\\tilde{d}}_{i+1}+\\mathbf{\\tilde{v}}_{\\theta}(\\mathbf{\\tilde{x}}_{t_{i+1}},t_{i+1}|\\mathbf{y})}\\end{array}$ $\\begin{array}{r}{\\mathbf{x}_{t_{i+1}}\\leftarrow\\mathbf{x}_{i}+\\frac{\\dot{\\Delta}t_{i}}{2}[\\mathbf{d}_{i}+\\mathbf{d}_{i+1}]}\\end{array}$   \nend for   \nreturn: $\\mathbf{x}_{N}$ ", "page_idx": 14}, {"type": "text", "text": "We can define $\\begin{array}{r}{\\zeta_{t}=\\dot{\\sigma}_{t}-\\frac{\\dot{\\alpha}_{t}\\sigma_{t}}{\\alpha_{t}}}\\end{array}$ , and we have $\\epsilon_{\\theta}(\\mathbf{x}_{t},t)$ to estimate $-\\sigma_{t}\\nabla_{\\mathbf{x}}\\mathrm{log}p_{t}(\\mathbf{x}_{t})$ , then derive the relationship between ${\\mathcal{L}}_{\\mathrm{DM}}(\\theta)$ and ${\\mathcal{L}}_{\\mathrm{FM}}(\\theta)$ We can plug (32) into the loss ${\\mathcal{L}}_{F M}(\\theta)$ in Equation (30) ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathcal{L}_{\\mathrm{FM}}(\\theta)=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left\\|\\mathbf{v}_{\\theta}\\big(\\mathbf{x}_{t},t\\big)-\\hat{\\boldsymbol{\\alpha}}_{t}\\mathbf{x}_{0}-\\dot{\\hat{\\boldsymbol{\\sigma}}}_{t}\\epsilon\\right\\|_{2}^{2}}\\\\ &{\\quad\\quad\\quad=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left\\|\\frac{\\dot{\\hat{\\boldsymbol{\\alpha}}}_{t}}{\\alpha_{t}}\\mathbf{x}_{t}+\\zeta_{t}\\epsilon_{\\theta}\\big(\\mathbf{x}_{t},t\\big)-\\dot{\\hat{\\boldsymbol{\\alpha}}}_{t}\\mathbf{x}_{0}-\\dot{\\hat{\\boldsymbol{\\sigma}}}_{t}\\epsilon\\right\\|_{2}^{2}}\\\\ &{\\quad\\quad\\quad=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left\\|\\frac{\\dot{\\hat{\\boldsymbol{\\alpha}}}_{t}\\sigma_{t}}{\\alpha_{t}}\\epsilon+\\zeta_{t}\\epsilon_{\\theta}\\big(\\mathbf{x}_{t},t\\big)-\\dot{\\hat{\\boldsymbol{\\alpha}}}_{t}\\mathbf{x}_{0}-\\dot{\\hat{\\boldsymbol{\\sigma}}}_{t}\\epsilon\\right\\|_{2}^{2}}\\\\ &{\\quad\\quad\\quad=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left\\|\\zeta_{t}\\epsilon_{\\theta}\\big(\\mathbf{x}_{t},t\\big)-\\zeta_{t}\\epsilon\\right\\|_{2}^{2}}\\\\ &{\\quad\\quad\\quad=\\mathbb{E}_{t,p_{1}(\\epsilon),p_{0}(x_{0})}\\left[\\zeta_{t}^{2}\\left\\|\\epsilon_{\\theta}\\big(\\mathbf{x}_{t},t\\big)-\\epsilon\\right\\|_{2}^{2}\\right]}\\\\ &{\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\times\\epsilon_{\\theta}\\frac{\\sqrt{3}}{\\alpha_{t}}+\\mathcal{O}_{t}\\epsilon_{\\theta}\\left\\|\\mathbf{x}_{t}\\right\\|_{2}^{2}\\left[\\epsilon_{\\theta}\\big(\\mathbf{x}_{t},t\\big)+\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})\\right\\|_{2}^{2}\\right]}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Recall that ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{\\mathrm{DM}}(\\theta)=\\mathbb{E}_{t,p_{0}(\\mathbf{x}_{0}),p(\\mathbf{x}_{t}|\\mathbf{x}_{0})}\\left[\\lambda(t)\\left||\\epsilon_{\\theta}(\\mathbf{x}_{t},t)+\\sigma_{t}\\nabla_{\\mathbf{x}}\\log p_{t}(\\mathbf{x}_{t})|\\right|_{2}^{2}\\right],}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "we can see that the difference of ${\\mathcal{L}}_{\\mathrm{DM}}(\\theta)$ and ${\\mathcal{L}}_{\\mathrm{FM}}(\\theta)$ during training is caused by the weighted function, which leaving to different trajectories and properties. ", "page_idx": 14}, {"type": "text", "text": "B Proof of Convergence of Pseudo Corrector ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In this section, we will prove that the proposed pseudo corrector has the same local truncation error and global convergence order as Heun\u2019s method. The detailed sampling procedure of Heun\u2019s method and pseudo corrector are provided in Algorithm 1 and Algorithm 2. In this section, we use $\\mathbf{x}_{t_{i}}$ to represent the intermediate sampling result at the $t_{i}$ timestep, and use $\\mathbf{x}_{t_{i}}^{*}=\\mathbf{x}(t_{i})$ to denote the corresponding ground-truth value on the trajectory. In all the proofs in this section, we omit the condition y for simplicity. ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "B.1 Assumptions ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Assumption B.1. The velocity predictor $\\mathbf{v}_{\\theta}(\\mathbf{x},t)$ is Lipschitz continous of constant $L$ w.r.t x. ", "page_idx": 15}, {"type": "text", "text": "Assumption B.2. The velocity predictor $\\mathbf{v}_{\\theta}(\\mathbf{x},t)$ has at least 2 derivatives $\\textstyle{\\frac{\\mathrm{d}}{\\mathrm{d}t}}\\mathbf{v}_{\\theta}(\\mathbf{x},t)$ and $\\begin{array}{r}{\\frac{\\mathrm{d}^{2}}{\\mathrm{d}t^{2}}\\mathbf{v}_{\\theta}(\\mathbf{x},t)}\\end{array}$ and the derivatives are continuous. ", "page_idx": 15}, {"type": "text", "text": "Assumption B.3. $h=\\operatorname*{max}_{0\\leq i\\leq N-1}h_{i}=\\mathcal{O}(1/N),$ , where $N$ is the total number of sampling steps. ", "page_idx": 15}, {"type": "text", "text": "All the above are common in the analysis of the convergence order of fast samplers [22, 23, 42] of diffusion models. ", "page_idx": 15}, {"type": "text", "text": "B.2 Local Convergence ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We start by studying the local convergence and Heun\u2019s method. Considering the updating from $t_{i}$ to $t_{i+1}$ and assume all previous results are correct (see the definition of local convergence [15]). The Taylor\u2019s expansion of $\\mathbf{x}_{t_{i+1}}^{*}$ at $t_{i}$ gives: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t_{i+1}}^{*}=\\mathbf{x}_{t_{i}}+h_{i}\\mathbf{x}^{(1)}(t_{i})+\\frac{h_{i}^{2}}{2}\\mathbf{x}^{(2)}(t_{i})+\\frac{h_{i}^{3}}{6}\\mathbf{x}^{(3)}(t_{i})+\\mathcal{O}(h^{4}).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "On the other hand, let $\\bar{\\bf x}_{t_{i+1}}$ be the prediction assuming $\\mathbf{x}_{i}$ is correct, the updating rule of Heun\u2019s method shows: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\displaystyle\\bar{\\mathbf{x}}_{t_{i+1}}=\\mathbf{x}_{t_{i}}+\\frac{h_{i}}{2}[\\mathbf{d}_{i}+\\mathbf{d}_{i+1}]}\\ ~}\\\\ {{\\displaystyle~~~~=\\mathbf{x}_{t_{i}}+\\frac{h_{i}}{2}[\\mathbf{x}^{(1)}(t_{i})+\\mathbf{x}^{(1)}(t_{i})+h_{i}\\mathbf{x}^{(2)}(t_{i})+\\frac{h_{i}^{2}}{2}\\mathbf{x}^{(3)}(t_{i})+\\mathcal{O}(h^{3})]}\\ ~}\\\\ {{\\displaystyle~~~~=\\mathbf{x}_{i}+h_{i}\\mathbf{x}^{(1)}(t_{i})+\\frac{h_{i}^{2}}{2}\\mathbf{x}^{(2)}(t_{i})+\\frac{h_{i}^{3}}{4}\\mathbf{x}^{(3)}(t_{i})+\\mathcal{O}(h^{4})}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Therefore, the local truncation error can be computed by: ", "page_idx": 15}, {"type": "equation", "text": "$$\nT_{i+1}=\\|\\mathbf{x}_{t_{i+1}}^{*}-\\bar{\\mathbf{x}}_{t_{i+1}}\\|=\\|-\\frac{h_{i}^{3}}{12}\\mathbf{x}^{(3)}(t_{i})+\\mathcal{O}(h^{4})\\|\\leq C_{1}h^{3},\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "which indicates that Heun\u2019s method has 2 order of accuracy. ", "page_idx": 15}, {"type": "text", "text": "It is also noted that the local truncation error of the predictor step (which is the same as Euler\u2019s method) can be similarly derived by: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\tilde{T}_{i+1}=\\|\\mathbf{x}_{t_{i+1}}^{*}-\\tilde{\\mathbf{x}}_{t_{i+1}}\\|=\\|\\frac{h^{2}}{2}\\mathbf{x}^{(2)}(t_{i})+\\mathcal{O}(h^{2})\\|\\leq C_{2}h^{2}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "For pseudo corrector, the analysis of local convergence is the same since we need to assume all previous results (including the $\\mathbf{x}_{t_{i}}$ and ${\\bf d}_{i}$ ), which means the local truncation error of pseudo corrector is the same as the Heun\u2019s method. ", "page_idx": 15}, {"type": "text", "text": "B.3 Global Convergence ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Global convergence for Heun\u2019s method. When analyzing global convergence, we need to take into account both the local truncation error and the effects of the error of previous results. According to the Lipschitz condition, we have: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\|\\mathbf{x}_{t_{i+1}}^{*}-\\tilde{\\mathbf{x}}_{t_{i+1}}\\|\\leq(1+h L)\\|\\mathbf{x}_{t_{i}}^{*}-\\mathbf{x}_{t_{i}}\\|+C_{2}h^{2}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "and ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\|\\mathbf{x}_{t_{i+1}}^{*}-\\mathbf{x}_{t_{i+1}}\\|\\leq(1+\\frac{h L}{2})\\|\\mathbf{x}_{t_{i}}^{*}-\\mathbf{x}_{t_{i}}\\|+\\frac{h L}{2}\\|\\mathbf{x}_{t_{i+1}}^{*}-\\tilde{\\mathbf{x}}_{t_{i+1}}\\|+C_{1}h^{3}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Combining the above two inequalities together, we have ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\|\\mathbf{x}_{t_{i+1}}^{*}-\\mathbf{x}_{t_{i+1}}\\|\\leq(1+h L+\\frac{h^{2}L^{2}}{2})\\|\\mathbf{x}_{t_{i}}^{*}-\\mathbf{x}_{t_{i}}\\|+C_{3}h^{3},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $\\begin{array}{r}{C_{3}\\,=\\,\\frac{h L C_{2}}{2}+C_{1}}\\end{array}$ . Note that $\\|x_{t_{0}}^{*}-x_{t_{0}}\\|\\,=\\,0$ (their is no error at the beginning of the sampling), it can be easily derived that ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\|\\mathbf{x}_{t_{N}}^{*}-\\mathbf{x}_{t_{N}}\\|\\leq\\frac{C_{3}h^{2}}{L+\\frac{h L^{2}}{2}}\\big((1+h L+\\frac{h^{2}L^{2}}{2})^{N}-1\\big)\\leq C_{4}h^{2}(e^{C_{5}}-1)=C_{6}h^{2}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Therefore, we have proven that Heun\u2019s method have 2 order of global convergence. ", "page_idx": 16}, {"type": "text", "text": "Global convergence for pseudo corrector. The only difference between pseudo corrector and Heun\u2019s method is how ${\\bf d}_{i}$ is obtained. Pseudo corrector reuse the ${\\bf d}_{i}$ from the last sampling step rather than re-compute it as in Heun\u2019s method. As a result, ${\\bf d}_{i}$ used in pseudo corrector is computed on $\\tilde{\\mathbf{x}}_{t_{i}}$ rather than $\\mathbf{x}_{t_{i}}$ , which will lead to another error term when analyzing the global convergence. Concretely, the global error of pseudo corrector can be computed by: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|{\\bf x}_{t_{i+1}}^{*}-\\tilde{\\bf x}_{t_{i+1}}\\|\\leq(1+h L)\\|{\\bf x}_{t_{i}}^{*}-{\\bf x}_{t_{i}}\\|+h L\\|\\tilde{\\bf x}_{t_{i}}-{\\bf x}_{t_{i}}\\|+C_{2}h^{2}}\\\\ &{\\|{\\bf x}_{t_{i+1}}^{*}-{\\bf x}_{t_{i+1}}\\|\\leq(1+\\displaystyle\\frac{h L}{2})\\|{\\bf x}_{t_{i}}^{*}-\\tilde{\\bf x}_{t_{i}}\\|+\\displaystyle\\frac{h L}{2}\\|{\\bf x}_{t_{i+1}}^{*}-\\tilde{\\bf x}_{t_{i+1}}\\|+\\displaystyle\\frac{h L}{2}\\|{\\bf x}_{t_{i}}-\\tilde{\\bf x}_{t_{i}}\\|+C_{1}h^{3}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "For the sake of simplicity, let $\\tilde{\\Delta}_{i}=\\|\\mathbf{x}_{t_{i}}^{*}-\\tilde{\\mathbf{x}}_{t_{i}}\\|$ and $\\Delta_{i}=\\|\\mathbf{x}_{t_{i}}^{*}-\\mathbf{x}_{t_{i}}\\|$ . Therefore, the above formulas becomes: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{l l}{{\\displaystyle\\tilde{\\Delta}_{i+1}\\leq\\Delta_{i}+h L\\tilde{\\Delta}_{i}+C_{2}h^{2}}}\\\\ {{\\displaystyle\\Delta_{i+1}\\leq(1+\\frac{h L}{2})\\Delta_{i}+\\frac{h L}{2}(1+\\frac{h L}{2})\\tilde{\\Delta}_{i}+C_{4}h^{3}.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "By calculating $(52){\\times}h L{+}(53)$ we have: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\Delta_{i+1}+h L\\tilde{\\Delta}_{i+1}\\leq(1+\\displaystyle\\frac{h L}{2})\\Delta_{i}+\\displaystyle\\frac{h L}{2}(1+\\displaystyle\\frac{h L}{2})\\tilde{\\Delta}_{i}+C_{4}h^{3}+h L\\Delta_{i}+h^{2}L^{2}\\tilde{\\Delta}_{i}+C_{2}L h^{3}}\\\\ {\\displaystyle=(1+\\displaystyle\\frac{3}{2}h L)\\left[\\Delta_{i}+\\displaystyle\\frac{\\frac{h L}{2}+\\frac{5}{4}h^{2}L^{2}}{1+\\frac{3}{2}h L}\\tilde{\\Delta}_{i}\\right]+C_{7}h^{3}}\\\\ {\\displaystyle\\leq(1+\\displaystyle\\frac{3}{2}h L)(\\Delta_{i}+h L\\tilde{\\Delta}_{i})+C_{7}h^{3}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Note that $\\Delta_{0}+h L\\tilde{\\Delta}_{0}=0$ . Let $\\Delta_{i}^{\\prime}=\\Delta_{i}+h L\\tilde{\\Delta}_{i}$ , we have ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\Delta_{i}^{\\prime}\\leq(1+\\frac{3}{2}h L)\\Delta_{i}^{\\prime}+C_{7}h^{3}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Similar to the derivation of (49), we can derive that ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\Delta_{i}^{\\prime}\\leq C_{8}h^{2}((1+\\frac32h L)^{N}-1)\\leq C_{9}h^{2},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "which indicates that ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\Delta_{N}\\leq C_{9}h^{2},\\quad h L\\tilde{\\Delta}_{i+1}\\leq C_{9}h^{2}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Therefore we have $\\Delta_{N}\\leq C_{9}h^{2}$ , and thus the global convergence of pseudo corrector is 2-order. ", "page_idx": 16}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/b7cf2a762d08e1e8ab36c81be4cf0a15ffe013b51b44e575d8cbba7d1b4dd156.jpg", "table_caption": ["Table 6: Ablation of the number of the velocity refiners. We change the number of velocity refiners and compare the sampling quality of each configuration. We find there exists a optimal number of velocity refiners to achieve the lowest FID. "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "C Implementation Details ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Class-conditional image generation. We use the SiT-XL-2[24] as our base model to perform the experiments on class-conditional image generation. We use a single block of SiT-XL-2 as the Velocity Refiner. We double the input channel from 4 to 8 to take the previous velocity as input. The resulting velocity refiner only contains 29M parameters, about $4.3\\%$ of the original SiT-XL-2(675M). We use ImageNet-1K $[6]^{2}$ to train our velocity model. We used AdamW [21] optimizer for all models. We use a constant learning rate of $5\\times10^{-5}$ and a batch size of 18 on a single A800 GPU. We used a random horizontal flip with a probability of 0.5 in data augmentation. We did not tune the learning rates, decay/warm-up schedules, AdamW parameters, or use any extra data augmentation during training. Our velocity refiner (for SiT-XL-2) trains at approximately 4.44 steps/sec on an A800 GPU, and converges in 30,000 steps, which takes about 2 hours. ", "page_idx": 17}, {"type": "text", "text": "Text-to-image generation. We use the 2-RF in InstaFlow [20] as our base model to perform the experiments on text-to-image generation. Since the architecture of the original velocity predictor in [20] is a U-Net [30], we cannot directly use a single block of it as the velocity refiner as we do for SiT [24]. Instead, we simply reduce the number of channels in each block from [320, 640, 1280, 1280] to [160, 160, 320, 320] and reduce the number of layers in each block from 2 to 1. We also double the input channel from 4 to 8 to take the previous velocity as input. The resulting velocity refiner only contains 43.5M parameters, about $5\\%$ of the original U-Net (860M). We use a subset of LAION $[34]^{3}$ containing only 50K images to train our velocity model. We use AdamW [21] optimizer with a learning rate of 2e-5 and weight decay of 0.0. We adopt a batch size of 16 and set the warming-up steps as 100. We also use a gradient clipping of 0.01 to stabilize training. We train our model on a single A800 GPU for 10K iterations, which takes about 5.5 hours. ", "page_idx": 17}, {"type": "text", "text": "Implementation of extension tasks. We have demonstrated our FlowTurbo is also suitable for extension tasks due to the multi-step nature of our framework in Section 4.4. For image inpainting, we adopt the inpainting pipeline in diffusion models 4, where we merge the noise latent and the generated latent at a specific timestep by the input mask. For object removal, we first use a Grounded-SAM 5 to generate the mask and perform similar image inpainting pipeline. For image editing, we adopt the SDEdit [25] which first adds noise to the original image and use it as an intermediate result to continue the sampling. ", "page_idx": 17}, {"type": "text", "text": "D More Analysis ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In this section, we provide more analysis through both quantitative results and qualitative results. ", "page_idx": 17}, {"type": "table", "img_path": "1jG5ngXVs3/tmp/d6136d55d94c3bf5571dffac753cee9a566f1c41f15f819172d3bede9a160386.jpg", "table_caption": ["Table 7: Comparisons with state-of-the-art methods on text-to-image generation. We compare our FlowTurbo with state-of-the-art diffusion models (15 steps DPM-Solver $^{++}$ [23]) and show our FlowTurbo enjoys favorable trade-offs between sampling quality and speed. "], "table_footnote": [], "page_idx": 18}, {"type": "text", "text": "D.1 More Quantitative Results ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Ablation of the number of the velocity refiners. In Table 6, we investigate how to choose the number of velocity refiners to get a better sampling quality. We adopt two basic configurations of $H_{7}R_{10}$ and $H_{5}R_{10}$ , and vary the number of velocity refiners from 3 to 6. We find that the FID will first decrease and then increase when $N_{R}$ becomes larger, and there exists an optimal $N_{R}=5$ where we reach the lowest FID. These results indicate that we can always tune this hyper-parameter to expect a better result. ", "page_idx": 18}, {"type": "text", "text": "More comparisons on text-to-image generation. In Table Table 7, we compare the sampling quality and speed of FLowTurbo with state-of-the-art diffusion models on text-to-image generation. For all the diffusion models, we adopt a 15-step DPM-Solver $^{\\mathrel{\\textstyle\\downarrow}++}$ [23] as the default sampler. The FLOPs reported also take the multi-step sampling into account. Our results show that our FlowTurbo can achieve the lowest FID and inference latency. ", "page_idx": 18}, {"type": "text", "text": "D.2 More Qualitative Results ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "To better illustrate the sampling quality of our FlowTurbo, we provide more qualitative results on both class-conditional image generation and text-to-image generation. ", "page_idx": 18}, {"type": "text", "text": "Class-conditional image generation. We use SiT-XL [24] as our flow-based model for classconditional image generation. In Figure 5, we provide random samples from FlowTurbo of the sample config $H_{8}P_{9}R_{5}$ , which inference at $100\\;\\mathrm{ms/img}$ . We also demonstrate the sampling quality trade-offs in Figure 6, we compare the sampling quality of two different configurations $H_{1}P_{5}R_{3}$ (38 ms / img) and $H_{8}P_{9}R_{5}$ (100 ms / img). We generate the images from the same initial noise for better comparisons. Our result demonstrates that our FlowTurbo can achieve real-time image generation, and the sampling quality can be further improved with more computational budgets. ", "page_idx": 18}, {"type": "text", "text": "Text-to-image generation. We adopt Lumina-Next-T2I [9] to achieve text-to-image generation. We compare the sampling quality and speed of Heun\u2019s method and our FlowTurbo in Figure 7. We find that FlowTurbo can consistently generate images with better quality and more visual details, while requiring less inference time. ", "page_idx": 18}, {"type": "text", "text": "E Code ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Our code is implemented in PyTorch 6. We use the codebase of [24] to conduct experiments. The code is available at https://github.com/shiml20/FlowTurbo. ", "page_idx": 18}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/ee3f3622027be57cb826259d934249e30b2aef4e7431eab03190f494838b3248.jpg", "img_caption": ["Figure 5: Random samples from FlowTurbo on ImageNet $256\\times256$ . We use a classifier-free guidance scale of 4.0 and the sample config of $H_{8}P_{9}R_{5}$ (100 ms / img) "], "img_footnote": [], "page_idx": 19}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/8b2a9496f21114aff74d8376ee91b3a1028a1d1e35b2996c0d0322dfd37daf9c.jpg", "img_caption": ["Figure 6: Uncurated $256\\!\\times\\!256$ samples from FlowTurbo $\\mathrm{CFG}=4.0)$ ). For better visualization. We compare two sample configurations $(H_{1}P_{5}R_{3}$ and $H_{8}P_{9}R_{5})$ ). The same initial noise is used for both sample configurations for better comparisons. ", "(a) Sample Config $H_{1}P_{5}R_{3}$ (38 ms / img) "], "img_footnote": [], "page_idx": 20}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/a63cd4ba145b5fdf9568ade1e923d439455772518f808774040204cdfa7d5e5f.jpg", "img_caption": ["(b) Sample Config $H_{8}P_{9}R_{5}$ (100 ms / img) "], "img_footnote": [], "page_idx": 20}, {"type": "image", "img_path": "1jG5ngXVs3/tmp/382d022fb6de6e5fcef143b28f6d63b70fa6e80ff2165f1f47aca76ae9abec20.jpg", "img_caption": ["Figure 7: More visual comparisons between Heun\u2019s method $2.6\\mathrm{~s~}/$ img, left) and our FlowTurbo (1.8 s / img, right). "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: the main contribution of this paper is a new framework to accelerate the sampling of flow-based generative models, which is fully discussed in the abstract and introduction. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 22}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: the limitations are discussed in the last paragraph of Section 4.4 ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 22}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: the theoretical result is the convergence of pseudo corrector, which is presented in Appendix B ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 23}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: we have included implementation details in both Section 4.1 and Appendix C.   \nWe have also included the code in the supplementary material. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 23}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: the datasets we used are all publicly available, we have included the code in the supplementary material. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 24}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: we have included these details in both Section 4.1 and Appendix C. Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 24}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 24}, {"type": "text", "text": "Answer: [No] ", "page_idx": 24}, {"type": "text", "text": "Justification: following common practice in [24, 30, 29, 4], we do not need to report error bars. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: the compute resources have been discussed in Section 4.1 and Appendix C Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 25}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: we have carefully checked the NeurIPS Code of Ethics and make sure our work conforms with it. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 25}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: the broader impacts are discussed in the last paragraph of Section 4.4 Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed. \u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. ", "page_idx": 25}, {"type": "text", "text": "\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 26}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 26}, {"type": "text", "text": "Justification: we propose an acceleration framework over existing flow-based generative models and thus we do not introduce new risks of misuse. The safeguards needs to be considered in the pre-trained flow-based generative models. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 26}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: all the datasets are cited properly, and the licenses are also provided in Appendix C. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 26}, {"type": "text", "text": "", "page_idx": 27}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: this paper does not release new assets. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 27}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: this paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 27}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: the paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 27}, {"type": "text", "text": "", "page_idx": 28}]