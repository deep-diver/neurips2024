[{"figure_path": "Pwl9n4zlf5/figures/figures_3_1.jpg", "caption": "Figure 1: AutoManual Overview: AutoManual operates in three stages: (1) Building Stage: The Planner agent interacts with the environment by coding actionable plans. After receiving the current trajectory of the Planner, the Builder agent manages rules through the online rule system. (2) Formulating Stage: The Formulator agent formulates the resulting rules into a Markdown manual. (3) Testing Stage: A test-time Planner agent utilizes the manual to complete testing tasks.", "description": "This figure illustrates the AutoManual framework's three main stages.  The *Building Stage* shows the Planner and Builder agents iteratively interacting with the environment and updating a rule system. The Planner generates plans as executable code, and the Builder refines the rules based on the interaction results. The *Formulating Stage* depicts the Formulator agent compiling the rules into a human-readable Markdown manual. Finally, the *Testing Stage* shows a test-time Planner using the generated manual to perform tasks in the environment.", "section": "3 Methods"}, {"figure_path": "Pwl9n4zlf5/figures/figures_4_1.jpg", "caption": "Figure 2: The Planner Trajectory: Given the current task and rules, the Planner will interact with the environment through free-form code. Based on the trajectory result, the Planner will generate a corresponding conclusion, which will be saved in the skill or reflection library.", "description": "This figure illustrates the interactive process between the Planner agent and the environment. The Planner generates a plan in the form of free-form code to interact with the environment. The result of this interaction (success, partial success, or failure) is recorded along with the Planner's code and analysis. This trajectory is then used by the Builder agent to update the rules, and successful plans are stored in a skill library while failed plans along with their analysis are added to a reflection library.  This process of planning, acting, and reflecting is crucial to the AutoManual framework.", "section": "3.2 Planner Agent for Interactive Planning"}, {"figure_path": "Pwl9n4zlf5/figures/figures_5_1.jpg", "caption": "Figure 3: Case-Conditioned Prompts: Given the current trajectory, the Builder classifies the cause of the major error as \"Imperfect Rules\" or \"Imperfect Agents\". Then, the Builder will get the base prompt and corresponding prompt to guide its rule management.", "description": "This figure illustrates the case-conditioned prompting strategy used in the AutoManual framework.  Based on the outcome (Direct Success, Indirect Success, or Failure) of a Planner agent's interaction with the environment, the Builder agent receives different prompts to guide its rule updates.  The prompts are tailored to whether the failure was due to flaws in the rules themselves (\"Imperfect Rules\") or shortcomings of the Planner agent (\"Imperfect Agent\"). This strategy helps mitigate issues caused by large language models (LLMs) generating hallucinations during rule management.", "section": "3.3 Builder and Consolidator Agents for Rule Management"}, {"figure_path": "Pwl9n4zlf5/figures/figures_8_1.jpg", "caption": "Figure 4: (a) The success rate curve with standard deviation when testing GPT-4-turbo or GPT-3.5-turbo on ALFWorld. Building is performed cross-task or single-task type. (b) The success rate curve with standard deviation using AutoManual or Planner+Lib. when testing with GPT-4-turbo or GPT-3.5-turbo on 9 task types with feedback in MiniWob++.", "description": "This figure presents two sub-figures showing the learning curves of different methods. Subfigure (a) compares the performance of cross-task and single-task training on ALFWorld using GPT-4-turbo and GPT-3.5-turbo. It demonstrates that cross-task training, where rules are shared across different tasks, leads to better overall performance. Subfigure (b) contrasts AutoManual with Planner+Lib. on MiniWoB++'s 9 feedback-rich tasks, revealing AutoManual's superiority and the effectiveness of the online rule management system.  Both subfigures showcase the learning curves with standard deviations, illustrating the stability and robustness of the approaches.", "section": "Experiments"}, {"figure_path": "Pwl9n4zlf5/figures/figures_19_1.jpg", "caption": "Figure 1: AutoManual Overview: AutoManual operates in three stages: (1) Building Stage: The Planner agent interacts with the environment by coding actionable plans. After receiving the current trajectory of the Planner, the Builder agent manages rules through the online rule system. (2) Formulating Stage: The Formulator agent formulates the resulting rules into a Markdown manual. (3) Testing Stage: A test-time Planner agent utilizes the manual to complete testing tasks.", "description": "This figure illustrates the AutoManual framework's three main stages.  The *Building Stage* shows the Planner and Builder agents iteratively interacting with the environment and refining rules. The Planner generates plans as executable code, and the Builder updates the rule system based on the interaction results. The *Formulating Stage* depicts the Formulator agent compiling these rules into a human-readable Markdown manual. Finally, the *Testing Stage* shows a test-time Planner agent using the generated manual to perform new tasks.  The figure visually represents the dynamic interaction and rule refinement process within the AutoManual framework.", "section": "3 Methods"}, {"figure_path": "Pwl9n4zlf5/figures/figures_24_1.jpg", "caption": "Figure 1: AutoManual Overview: AutoManual operates in three stages: (1) Building Stage: The Planner agent interacts with the environment by coding actionable plans. After receiving the current trajectory of the Planner, the Builder agent manages rules through the online rule system. (2) Formulating Stage: The Formulator agent formulates the resulting rules into a Markdown manual. (3) Testing Stage: A test-time Planner agent utilizes the manual to complete testing tasks.", "description": "This figure presents a high-level overview of the AutoManual framework. It shows three main stages: 1) Building Stage: The Planner agent interacts with the environment, generating code-based plans. The Builder agent then updates the rules based on this interaction. 2) Formulation Stage: The Formulator agent compiles the rules into a user-friendly Markdown manual. 3) Testing Stage: A test-time Planner agent evaluates the effectiveness of the generated manual in completing tasks. The figure visually depicts the flow between these three stages using a flowchart.", "section": "3 Methods"}, {"figure_path": "Pwl9n4zlf5/figures/figures_32_1.jpg", "caption": "Figure 1: AutoManual Overview: AutoManual operates in three stages: (1) Building Stage: The Planner agent interacts with the environment by coding actionable plans. After receiving the current trajectory of the Planner, the Builder agent manages rules through the online rule system. (2) Formulating Stage: The Formulator agent formulates the resulting rules into a Markdown manual. (3) Testing Stage: A test-time Planner agent utilizes the manual to complete testing tasks.", "description": "This figure presents a high-level overview of the AutoManual framework, illustrating the three main stages of operation: building, formulating, and testing.  In the building stage, a Planner agent interacts with the environment, creating executable plans. These interactions, along with the resulting trajectory, are used to update a rule system managed by a Builder agent. The formulating stage sees a Formulator agent compile these rules into a human-readable manual. Finally, the testing stage evaluates the effectiveness of the generated manual by a test-time Planner agent performing tasks.", "section": "3 Methods"}]