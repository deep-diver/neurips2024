[{"type": "text", "text": "Spectral Learning of Shared Dynamics Between Generalized-Linear Processes ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Lucine L. Oganesian Ming Hsieh Department of Electrical and Computer Engineering University of Southern California Los Angeles, CA loganesi@usc.edu ", "page_idx": 0}, {"type": "text", "text": "Omid G. Sani Ming Hsieh Department of Electrical and Computer Engineering University of Southern California Los Angeles, CA omid.ghasemsani@usc.edu ", "page_idx": 0}, {"type": "text", "text": "Maryam M. Shanechi \u2217 Ming Hsieh Department of Electrical and Computer Engineering Thomas Lord Department of Computer Science Alfred E. Mann Department of Biomedical Engineering Neuroscience Graduate Program University of Southern California Los Angeles, CA shanechi@usc.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Generalized-linear dynamical models (GLDMs) remain a widely-used framework within neuroscience for modeling time-series data, such as neural spiking activity or categorical decision outcomes. Whereas the standard usage of GLDMs is to model a single data source, certain applications require jointly modeling two generalizedlinear time-series sources while also dissociating their shared and private dynamics. Most existing GLDM variants and their associated learning algorithms do not support this capability. Here we address this challenge by developing a multi-step analytical subspace identification algorithm for learning a GLDM that explicitly models shared vs. private dynamics within two generalized-linear time-series. In simulations, we demonstrate our algorithm\u2019s ability to dissociate and model the dynamics within two time-series sources while being agnostic to their respective observation distributions. In neural data, we consider two specific applications of our algorithm for modeling discrete population spiking activity with respect to a secondary time-series. In both synthetic and real data, GLDMs learned with our algorithm more accurately decoded one time-series from the other using lowerdimensional latent states, as compared to models identified using existing GLDM learning algorithms. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Generalized-linear dynamical models (GLDMs) are a commonly used framework for modeling dynamics using a low-dimensional latent variable that evolves over time [1\u20133]. Due to their interpretability, data efficiency, and amenability to real-time engineering operations, GLDMs remain a widely popular tool in neuroscience for modeling time-series data, whether it be Poisson spiking neural activity, Bernoulli/Binomial categorical task variables, or Gaussian behavior [4\u20139]. Whereas most existing GLDM variants and their associated analytical learning algorithms focus on modeling the dynamics within a single time-series, there exist applications that require explicit dissociation of shared vs. private dynamics within two generalized-linear observation sources. For example, such functionality is helpful when modeling the dynamical relationship between recorded neural activity and certain behaviors of interest [10\u201315]. ", "page_idx": 1}, {"type": "text", "text": "Here we fill these methodological gaps by deriving a novel covariance-based subspace system identification (SSID) algorithm that is capable, with its multi-staged learning approach, of identifying the shared dynamics between two generalized-linear time-series with priority, before modeling the dynamics private to each observation. We design the method to seamlessly generalize to different observation distributions, such as Poisson or Bernoulli. To illustrate the method, we first show in simulations that our method successfully dissociates the shared dynamics within two generalizedlinear time-series, agnostic of their respective observation models; to compare against existing GLDM methods, we focused on Poisson, Bernoulli, and Gaussian generalized-linear observations. Next we demonstrate our method on two public non-human primate (NHP) datasets of discrete population spiking activity recorded from different brain regions and during different contexts [16\u2013 18]. Compared with existing Poisson GLDMs and their learning algorithms, our method learned models that more accurately decoded one time-series from the other using lower-dimensional latent states, suggesting improved learning of shared dynamics. ", "page_idx": 1}, {"type": "text", "text": "2 Background ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "For linear state-space models with continuous Gaussian observations, subspace system identification (SSID) theory provides computationally efficient non-iterative algorithms for analytically learning state-space models, both with and without identification of shared dynamics [14, 19\u201324]. These methods, however, either are not applicable to generalized-linear time-series with non-Gaussian observations [14, 19, 20, 23] or do not have the ability to dissociate shared vs. private dynamics between two time-series [21, 22, 24]. To help with the exposition of our method in section 3, we first review standard covariance-based SSID and an existing SSID method for modeling Poisson point-processes [21], a widely-used class of generalized-linear observations. ", "page_idx": 1}, {"type": "text", "text": "2.1 Standard covariance-based SSID ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "The standard formulation for a linear state-space model with continuous Gaussian observations is as ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l c l}{\\mathbf{x}_{k+1}}&{=}&{A\\mathbf{x}_{k}+\\mathbf{w}_{k}}\\\\ {\\mathbf{r}_{k}}&{=}&{C_{\\mathbf{r}}\\mathbf{x}_{k}+\\mathbf{v}_{k}}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "where $\\mathbf{x}_{k}\\,\\in\\,\\mathbb{R}^{n_{x}}$ is the latent state variable, $\\mathbf{r}_{k}\\,\\in\\,\\mathbb{R}^{n_{r}}$ corresponds to continuous Gaussian observations, and w and $\\mathbf{v}$ are state and observation noise terms, respectively, with distributions $\\mathcal{N}(\\mathbf{w}_{k};\\mathbf{0},Q)$ and $\\mathcal{N}(\\mathbf{v}_{k};\\mathbf{0},R)$ , and cross-covariance $\\boldsymbol{S}$ . Further, we define $G:=\\operatorname{Cov}(\\mathbf{x}_{k+1},\\mathbf{r}_{k})$ , as the covariance between future latent state and current observation, and $\\mathbf{A}_{\\mathbf{r}_{0}}:=\\mathrm{Cov}(\\mathbf{r}_{k},\\mathbf{r}_{k})$ , as the instantaneous covariance of the observations. Standard covariance-based SSID learns the parameters of a latent dynamical system $\\Theta=(A,C_{\\mathbf{r}},G,\\Lambda_{\\mathbf{r}_{0}})$ given training samples $\\boldsymbol{r}_{k}$ and hyperparameter $n_{x}$ that specifies the latent state dimensionality. To do so, a future-past Hankel matrix, $H_{\\mathbf{r}}$ , is first constructed from the cross-covariances of the system\u2019s linear observations as [19, 20] ", "page_idx": 1}, {"type": "equation", "text": "$$\nH_{\\mathbf{r}}:=\\mathrm{Cov}(\\mathbf{r}_{f},\\mathbf{r}_{p})=\\left[\\begin{array}{c c c c}{\\mathbf{A_{r_{i}}}}&{\\mathbf{A_{r_{i}-1}}}&{\\cdot\\cdot\\cdot}&{\\mathbf{A_{r_{i}}}}\\\\ {\\mathbf{A_{r_{i}+1}}}&{\\mathbf{A_{r_{i}}}}&{\\cdot\\cdot\\cdot}&{\\mathbf{A_{r_{2}}}}\\\\ {\\vdots}&{\\vdots}&{\\cdot\\cdot}&{\\vdots}\\\\ {\\mathbf{A_{r_{2i-1}}}}&{\\mathbf{A_{r_{2i-2}}}}&{\\cdot\\cdot\\cdot}&{\\mathbf{A_{r_{i}}}}\\end{array}\\right],\\ \\ \\mathbf{r}_{f}:=\\left[\\begin{array}{c}{\\mathbf{r}_{i}}\\\\ {\\vdots}\\\\ {\\mathbf{r}_{2i-1}}\\end{array}\\right],\\ \\ \\mathbf{r}_{p}:=\\left[\\begin{array}{c}{\\mathbf{r_{0}}}\\\\ {\\vdots}\\\\ {\\mathbf{r}_{i-1}}\\end{array}\\right],\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "where the integer $i$ denotes the user-specified maximum temporal lag (i.e., horizon) used to construct $H_{\\mathrm{r}}$ and $\\mathbf{A}_{\\mathbf{r}_{\\tau}}:=\\operatorname*{Cov}(\\mathbf{r}_{k+\\tau},\\mathbf{r}_{k})$ is the $\\tau$ -th lag cross-covariance for any timepoint $k$ , under timestationary assumptions. We note that the rank of $H_{\\mathrm{r}}$ must be at least $n_{x}$ in order to identify a ", "page_idx": 1}, {"type": "text", "text": "model with a latent dimension of $n_{x}$ . Thus the user-specified horizon $i$ must satisfy $i\\times n_{r}\\ge n_{x}$ . Covariance-based SSID then decomposes $H_{\\mathrm{r}}$ into a product of observability $(\\Gamma_{\\mathbf{r}})$ and controllability $(\\Delta)$ matrices as [19, 20] ", "page_idx": 2}, {"type": "equation", "text": "$$\nH_{\\mathrm{r}}\\,{\\stackrel{\\mathrm{SVD}}{=}}\\,\\Gamma_{\\mathrm{r}}\\Delta={\\left[\\begin{array}{l}{\\;\\;C_{\\mathrm{r}}\\;}\\\\ {\\;C_{\\mathrm{r}}A}\\\\ {\\;\\;{\\vdots}}\\\\ {C_{\\mathrm{r}}A^{i-1}}\\end{array}\\right]}\\;[A^{i-1}G\\quad\\cdot\\cdot\\quad A G\\quad G]\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\boldsymbol{G}$ is defined as above. The factorization of $H_{\\mathbf{r}}$ is done by computing a singular value decomposition (SVD) of $H_{\\mathbf{r}}$ and keeping the top $n_{x}$ singular values and corresponding singular vectors. From the factors of $H_{\\mathbf{r}}$ , $C_{\\mathbf{r}}$ is read off as the first $n_{r}$ rows of $\\Gamma_{\\mathrm{r}}$ and $\\boldsymbol{G}$ is read off as the last $n_{r}$ columns of $\\Delta$ . $\\pmb{A}$ is learned by solving $\\overline{{\\Gamma}}_{\\mathbf{r}}=\\underline{{\\Gamma}}_{\\mathbf{r}}A$ , where $\\overline{{\\Gamma}}_{\\mathrm{r}}$ and $\\underline{{\\mathbf{\\delta}}}_{\\mathbf{r}}$ denote $\\Gamma_{\\mathrm{r}}$ from which the top or bottom $n_{r}$ rows have been removed, respectively. This optimization problem has the following closed-form least-squares solution $A=\\underline{{\\bar{\\Gamma}}}_{\\mathbf{r}}^{\\dagger}\\overline{{\\mathbf{T}}}_{\\mathbf{r}}$ , with $\\dagger$ denoting the pseudo-inverse operation. The final parameter $\\Lambda_{\\mathbf{r}_{0}}$ is computed as the empirical covariance of $\\mathbf{r}_{k}$ . See appendix A.4 on how $(G,\\Lambda_{\\mathbf{r}_{0}})$ specify $(Q,R,S)$ . ", "page_idx": 2}, {"type": "text", "text": "2.2 SSID for a single generalized-linear time-series ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "There has been some work extending SSID to generalized-linear time-series, such as Poisson and Bernoulli observations [21, 24]. These methods, however, only learn the dynamics of a single generalized-linear time-series rather than model shared vs. private dynamics between two time-series. Here we present one of our baselines, PLDSID [21], which models a single Poisson time-series, as an example. A Poisson linear dynamical system (PLDS) model is defined as ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l l l}{\\mathbf{x}_{k+1}}&{=}&{A\\mathbf{x}_{k}+\\mathbf{w}_{k}}\\\\ {\\mathbf{r}_{k}}&{=}&{C_{\\mathbf{r}}\\mathbf{x}_{k}+\\mathbf{b}}\\\\ {\\mathbf{y}_{k}\\mid\\mathbf{r}_{k}}&{\\sim}&{\\mathrm{Poisson}(\\exp(\\mathbf{r}_{k}))}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\mathbf{x}_{k}\\,\\in\\,\\mathbb{R}^{n_{x}}$ is the latent state as before and $\\mathbf{y}_{k}\\,\\in\\,\\mathbb{R}^{n_{y}}$ corresponds to discrete (e.g., neural spiking) observations which, conditioned on the latent process $\\mathbf{r}_{k}$ , are Poisson-distributed with a rate equal to the exponential of $\\mathbf{r}_{k}$ (i.e., log-rate). Finally, $\\mathbf{w}_{k}$ is Gaussian-distributed state noise with covariance parameter $Q$ , as before, and $^{b}$ is a constant baseline log-rate. The PLDS model is commonly used for modeling Poisson process events, such as neural spiking activity [2, 4, 6, 21, 25]. Buesing et al. [21] developed a SSID algorithm, termed PLDSID, to learn the PLDS model parameters $\\Theta_{\\mathrm{PLDS}}\\,{=}\\,(A,C_{\\mathrm{r}},b,Q)$ given training samples $\\pmb{y}_{k}$ and hyperparameter $n_{x}$ . ", "page_idx": 2}, {"type": "text", "text": "Standard covariance-based SSID algorithms (section 2.1) are not directly applicable to Poissondistributed observations. This is because the log-rates $\\mathbf{r}_{k}$ that are linearly related to the latent states in equation (4) are not observable in practice \u2013 rather, only a stochastic Poisson emission from them (i.e., $\\mathbf{y}_{k}$ ) is observed. As a result, the second moments constituting $H_{\\mathbf{r}}$ (i.e., $\\Lambda_{\\mathbf{r}_{\\tau}}$ ) cannot be directly estimated. The critical insight by Buesing et al. [21] was to leverage the log link function (i.e., $\\mathrm{exp^{-1}}$ ) and the known conditional distribution $\\mathbf{y}_{k}\\vert\\mathbf{r}_{k}$ to compute the first $\\left(\\pmb{\\mu}_{\\mathbf{r}^{\\pm}}\\right)$ and second $\\left(\\mathbf{A}_{\\mathbf{r}\\pm}\\right)$ moments of the log-rate $\\mathbf{r}_{k}$ from the first $(\\mu_{\\mathbf{y}^{\\pm}})$ and second $(\\mathbf{A_{y^{\\pm}}})$ moments of the discrete observations $\\mathbf{y}_{k}$ . The $\\pm$ denotes that moments are computed for the future-past stacked vector of observations $\\mathbf{r}^{\\pm}:=\\left[\\mathbf{r}_{f}^{T}\\quad\\mathbf{r}_{p}^{T}\\right]^{T}$ and $\\mathbf{y}^{\\pm}:=\\left[\\mathbf{y}_{f}^{T}\\quad\\mathbf{y}_{p}^{T}\\right]^{T}$ , where ", "page_idx": 2}, {"type": "text", "text": "To compute moments of the log-rate, Buesing et al. [21] derived the following moment conversion ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r c l}{\\mu_{\\mathbf{r}_{m}^{\\pm}}}&{=}&{2\\ln(\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}})-\\frac{1}{2}\\ln(\\Lambda_{\\mathbf{y}_{m_{m}}^{\\pm}}+\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}}^{2}-\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}})}\\\\ {\\Lambda_{\\mathbf{r}_{m m}^{\\pm}}}&{=}&{\\ln(\\Lambda_{\\mathbf{y}_{m m}^{\\pm}}+\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}}^{2}-\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}})-\\ln(\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}}^{2})}\\\\ {\\Lambda_{\\mathbf{r}_{m n}^{\\pm}}}&{=}&{\\ln(\\Lambda_{\\mathbf{y}_{m n}^{\\pm}}+\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}}^{2}\\mu_{\\mathbf{y}_{n}^{\\pm}})-\\ln(\\pmb{\\mu}_{\\mathbf{y}_{m}^{\\pm}}\\mu_{\\mathbf{y}_{n}^{\\pm}})}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $m\\neq n$ correspond to different indices of the first and second moments of the future-past stacked observation vectors $\\mathbf{r}^{\\pm}$ and $\\mathbf{y}^{\\pm}$ , and $n,m=1,\\cdots\\,,K n_{y}$ where $K$ is the total number of time points. With the first and second moments computed in the moment conversion above, the baseline log rate $^{b}$ parameter is read off the first $n_{r}$ rows of $\\pmb{\\mu}_{\\mathbf{r}^{\\pm}}$ and the Hankel matrix, $H_{\\mathrm{r}}$ , is constructed as per equation (2). From here, we can proceed with the standard covariance-based SSID algorithm using $H_{\\mathrm{r}}$ , as outlined in section 2.1. Discussion regarding learning the state noise covariance parameters (e.g., $Q$ ) is postponed to appendix section A.3, where we use an approach that \u2013 unlike Buesing et al. [21] \u2013 ensures validity of learned noise statistics. ", "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "3.1 Model definition and assumptions ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Both the standard linear state-space model (equation (1)) and PLDS model (equation (4)) only model a single observation on its own. To enable identification of shared and private dynamics between two generalized-linear time-series, we write the following general multi-observation GLDM ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l c l}{\\mathbf{x}_{k+1}}&{=}&{A\\mathbf{x}_{k}+\\mathbf{w}_{k}}\\\\ {\\mathbf{r}_{k}}&{=}&{C_{\\mathbf{r}}\\mathbf{x}_{k}+\\mathbf{v}_{k}+\\pmb{b}}\\\\ {\\mathbf{z}_{k}}&{=}&{C_{\\mathbf{z}}\\mathbf{x}_{k}+\\pmb{\\epsilon}_{k}+\\pmb{d}}\\\\ {\\mathbf{y}_{k}|\\mathbf{r}_{k}}&{\\sim}&{\\mathcal{P}_{\\mathbf{y}|\\mathbf{r}}(\\mathbf{y}_{k};\\mathbf{\\Delta}g(\\mathbf{r}_{k}))}\\\\ {\\mathbf{t}_{k}|\\mathbf{z}_{k}}&{\\sim}&{\\mathcal{P}_{\\mathbf{t}|\\mathbf{z}}(\\mathbf{t}_{k};\\mathbf{\\Delta}h(\\mathbf{z}_{k}))}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathbf{x}_{k}$ , $\\mathbf{r}_{k}$ , $\\mathbf{w}_{k}$ , $\\mathbf{v}_{k}$ , and $^{b}$ are defined as in equations (1) and (4). We introduce $\\mathbf{t}_{k}\\,\\in\\,\\mathbb{R}^{n_{t}}$ to represent the second generalized-linear observation time-series, $\\mathbf{z}_{k}\\,\\in\\,\\mathbb{R}^{n_{z}}$ (with $n_{t}\\,=\\,n_{z}$ by construction) to represent the latent process underlying this second observation, $\\epsilon_{k}\\sim\\mathcal{N}(\\boldsymbol{\\epsilon}_{k};\\mathbf{0},F)$ to represent the associated noise term, and $^d$ to represent the associated baseline value. We generically denote the probability distribution for $\\mathbf{y}_{k}$ conditioned on the latent $\\mathbf{r}_{k}$ with $\\mathcal{P}_{\\mathbf{y}}$ . For example, in the PLDS model $\\mathcal{P}_{\\mathbf{y}|\\mathbf{r}}:=\\mathrm{Poisson}(\\exp(\\mathbf{r}_{k}))$ . $\\mathcal{P}_{\\mathbf{t}|\\mathbf{z}}$ is defined similarly but for $\\mathbf{t}_{k}$ and $\\mathbf{z}_{k}$ . Finally, $g(\\cdot)$ and $h(\\cdot)$ correspond to the link function in the generalized-linear model, for example $g(\\mathbf{r}_{k})=\\exp(\\mathbf{r}_{k})$ in PLDS models. In order to dissociate between shared and private dynamics within the observation time-series, we introduce the following definition: ", "page_idx": 3}, {"type": "text", "text": "Definition 3.1. We take the system to be written in a block structure form as defined below [14], allowing us to dissociate shared from private latents ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{A=\\left[A_{21}\\quad\\begin{array}{c c c}{{\\bf{0}}}&{{\\bf{0}}}&{{\\bf{0}}}\\\\ {A_{22}}&{A_{22}}&{{\\bf{0}}}\\\\ {{\\bf{0}}}&{{\\bf{0}}}&{A_{33}}\\end{array}\\right]}&{C_{\\bf{z}}=\\left[C_{\\bf{z}}^{(1)}\\quad{\\bf{0}}}&{C_{\\bf{z}}^{(3)}\\right]\\quad C_{\\bf{r}}=\\left[C_{\\bf{r}}^{(1)}\\quad C_{\\bf{r}}^{(2)}\\quad{\\bf{0}}\\right]\\quad{\\bf{x}}=\\left[{\\bf{\\hat{x}}}^{(1)}\\right]}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathbf{x}_{k}^{(1)}\\in\\mathbb{R}^{n_{1}}$ corresponds to latent states that drive both $\\mathbf{z}_{k}$ and $\\mathbf{r}_{k}$ , $\\mathbf{x}_{k}^{(2)}\\in\\mathbb{R}^{n_{2}}$ corresponds to states that only drive $\\mathbf{r}_{k}$ , and $\\mathbf{x}_{k}^{(3)}\\in\\mathbb{R}^{n_{3}}$ corresponds to states that only drive $\\mathbf{z}_{k}$ \u2013 with total states $n_{x}=n_{1}+n_{2}+n_{3}$ . The parameter $\\pmb{G}$ can also be written in block partition format such that ", "page_idx": 3}, {"type": "equation", "text": "$$\nG=E\\left[\\left[\\mathbf{x}_{k+1}^{\\left(1\\right)}\\right]\\mathbf{r}_{k}^{T}\\right]-E\\left[\\left[\\mathbf{x}_{k+1}^{\\left(1\\right)}\\right]\\right]E[\\mathbf{r}_{k}]^{T}=\\left[\\!\\!\\begin{array}{c}{E[\\mathbf{x}_{k+1}^{\\left(1\\right)}\\mathbf{r}_{k}^{T}]}\\\\ {E[\\mathbf{x}_{k+1}^{\\left(2\\right)}\\mathbf{r}_{k}^{T}]}\\\\ {E[\\mathbf{x}_{k+1}^{\\left(3\\right)}\\mathbf{r}_{k}^{T}]}\\end{array}\\!\\!\\right]-\\left[\\!\\!\\begin{array}{c}{E[\\mathbf{x}_{k+1}^{\\left(1\\right)}\\mathbf{E}[\\mathbf{r}_{k}]^{T}]}\\\\ {E[\\mathbf{x}_{k+1}^{\\left(2\\right)}\\mathbf{E}[\\mathbf{r}_{k}]^{T}}\\\\ {E[\\mathbf{x}_{k+1}^{\\left(3\\right)}\\mathbf{E}[\\mathbf{r}_{k}]^{T}]}\\end{array}\\!\\!\\right]=\\left[\\!\\!\\begin{array}{c}{G^{(1)}}\\\\ {G^{(2)}}\\\\ {G^{(3)}}\\end{array}\\!\\!\\right].\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "We can further simplify the definition of $\\boldsymbol{G}$ using the following assumptions: ", "page_idx": 3}, {"type": "text", "text": "Assumption 3.2. The state noise covariance $Q$ is assumed to have a block diagonal structure such that $\\bar{Q^{'}}\\mathrm{{diag}}(Q^{(1,2)},Q^{(3)})$ , where $\\pmb{Q}^{(1,2)}$ is a square matrix of dimension $n_{1}+n_{2}$ and $\\boldsymbol{Q}^{(3)}$ is $a$ square matrix of dimension $n_{3}$ . Formally, the superscript notation $(1,2)$ designates attribution of the parameter to the first and second set of latent states. ", "page_idx": 3}, {"type": "text", "text": "Assumption 3.3. Initial latent states are assumed to be mutually-independent, making $\\mathrm{Cov}(\\mathbf{x}_{0},\\mathbf{x}_{0})$ diagonal. ", "page_idx": 3}, {"type": "text", "text": "These assumptions allow us to fully decouple the private latent states of the secondary time-series $(\\mathbf{x}^{(3)})$ from the latent states driving the primary time-series $(\\mathbf{x}^{(1)},\\mathbf{x}^{(2)})$ . As a result, we can take $G^{(3)}=\\mathrm{Cov}(\\mathbf{x}_{k+1}^{(3)},\\mathbf{r}_{k})=\\mathbf{0}$ . From the perspective of state estimation, this simplification implies that $\\mathbf{r}_{k}$ provides no information to help estimate $\\mathbf{x}_{k+1}^{(3)}$ , for all $k$ ; this understanding is consistent with our definition of shared and private states. ", "page_idx": 3}, {"type": "text", "text": "3.2 Prioritized generalized-linear dynamical modeling (PGLDM) ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Our method, which we term Prioritized Generalized-Linear Dynamical Modeling (PGLDM), uses a multi-staged learning approach to model a primary generalized-linear time-series while prioritizing identification of the dynamics shared with a secondary time-series. Note, \u201cprimary\" refers to the data source whose modeling is of primary interest and that can optionally be used to predict the secondary data source. For example, within the context of decoding continuous behaviors from discrete population spiking activity, Poisson observations (i.e., neural activity) are the primary timeseries whereas Gaussian observations (e.g., kinematics) are the secondary time-series. During stage 1, shared dynamics are learned using both observations. In stage 2, any private dynamics in the primary time-series are optionally learned. This two-staged approach allows prioritized learning of shared dynamics in the sense that latent states will be dedicated to explaining non-shared dynamics in the primary time-series only if there are enough latent states to explain the shared dynamics. Finally, an optional stage 3 allows identification of the dynamics private to the secondary time-series. ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "Below we will outline the first two stages of our algorithm and leave the optional stage 3 to appendices A.1.4 and A.9. A crucial component of our method is a new covariance-based SSID algorithm for identifying shared and private dynamics between two observation time-series using their first and second moments only. This covariance-based algorithm is what enables our method to be applicable to generalized-linear observations, which we will expand on further in section 3.2.3. We first present this new covariance-based SSID algorithm, or equivalently PGLDM for linear state-space models with continuous Gaussian observations (the first three lines of equation (6)), before showing support for generalized-linear time-series broadly. The derivation of PGLDM is provided in appendix A.1. ", "page_idx": 4}, {"type": "text", "text": "3.2.1 Stage 1: shared dynamics ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In the first stage, our algorithm identifies the parameter set corresponding to the shared dynamical subspace, $(\\bar{A_{11}},C_{\\mathbf{r}}^{(1)},\\bar{C_{\\mathbf{z}}^{(1)}},b,d)$ , given hyperparameter $n_{1}$ and using both $\\mathbf{z}_{k}$ and $\\mathbf{r}_{k}$ , both of which are observable in the Gaussian case (i.e., equation (1) or equivalently the first three lines of equation (6)). To do this, we first construct a Hankel matrix between future observations of the secondary process and past observations of the primary process ", "page_idx": 4}, {"type": "equation", "text": "$$\nH_{\\mathbf{zr}}:=\\mathrm{Cov}(\\mathbf{z}_{f},\\mathbf{r}_{p})=\\left[\\begin{array}{c c c c}{\\Lambda_{\\mathbf{zr}_{i}}}&{\\Lambda_{\\mathbf{zr}_{i-1}}}&{\\cdot\\cdot\\cdot}&{\\Lambda_{\\mathbf{zr}_{1}}}\\\\ {\\Lambda_{\\mathbf{zr}_{i+1}}}&{\\Lambda_{\\mathbf{zr}_{i}}}&{\\cdot\\cdot\\cdot}&{\\Lambda_{\\mathbf{zr}_{2}}}\\\\ {\\vdots}&{\\vdots}&{\\cdot\\cdot}&{\\vdots}\\\\ {\\Lambda_{\\mathbf{zr}_{2i-1}}}&{\\Lambda_{\\mathbf{zr}_{2i-2}}}&{\\cdot\\cdot\\cdot}&{\\Lambda_{\\mathbf{zr}_{i}}}\\end{array}\\right],\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "with $\\mathbf{z}_{f}:=\\left[\\mathbf{z}_{i}\\quad.\\ .\\ .\\quad\\mathbf{z}_{2i-1}\\right]^{T}$ and $\\mathbf{r}_{p}$ defined as in equation (2). Although equation (8) uses the same horizon for both observations, in practice we implement the method for a more general version with distinct horizon values $i_{r}$ for the primary observations and $i_{z}$ for the secondary observations, resulting in $H_{\\mathbf{z}\\mathbf{r}}\\in\\mathbb{R}^{i_{z}*n_{z}\\times i_{r}*n_{r}}$ . This allows users to independently specify the horizons for the two observations, which can improve modeling accuracy especially if the two observations have very different dimensionalities (see section 4.2 and appendix A.1.6). After constructing $H_{\\mathrm{zr}}$ , we decompose it using SVD and keep the top $n_{1}$ singular values and their corresponding singular vectors ", "page_idx": 4}, {"type": "equation", "text": "$$\nH_{\\mathbf{zr}}\\frac{\\mathrm{sy}0}{=}\\Gamma_{\\mathbf{z}}\\boldsymbol{\\Delta}^{(1)}=\\left[\\begin{array}{c}{C_{\\mathbf{z}}}\\\\ {C_{\\mathbf{z}}A_{11}}\\\\ {\\vdots}\\\\ {C_{\\mathbf{z}}A_{11}^{i-1}}\\end{array}\\right]\\left[A_{11}^{i-1}G^{(1)}\\quad\\cdot\\cdot\\cdot\\quad A_{11}G^{(1)}\\quad G^{(1)}\\right]\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $n_{1}$ is the user-specified dimensionality of the shared latent states $\\mathbf{x}_{k}^{(1)}$ , $\\mathbf{\\Gamma}_{\\mathbf{T}_{\\mathbf{z}}}$ denotes the observability matrix for the secondary observations, and $\\Delta^{(1)}$ denotes the controllability matrix associated with the shared latent states (defined as in equations (3) and (16) in the appendix). At this point, we extract ${C}_{\\bf z}^{(1)}$ by reading off the first $n_{z}$ rows of $\\mathbf{\\Gamma}_{\\mathbf{T}_{\\mathbf{z}}}$ . To extract $C_{r}^{(1)}$ we first form $H_{\\mathrm{r}}$ per equation (2) and extract the observability matrix for $\\mathbf{r}$ associated with the shared latent dynamics, $\\mathbf{T}_{\\mathbf{r}}^{(1\\bar{)}}$ , by right multiplying $H_{\\mathrm{r}}$ with the pseudoinverse of $\\Delta^{(1)}$ ", "page_idx": 4}, {"type": "equation", "text": "$$\nH_{\\mathrm{r}}\\Delta^{(1)\\dagger}=\\Gamma_{\\mathrm{r}}^{(1)}=\\left[\\begin{array}{c}{C_{\\mathrm{r}}^{(1)}}\\\\ {C_{\\mathrm{r}}^{(1)}A_{11}}\\\\ {\\vdots}\\\\ {C_{\\mathrm{r}}^{(1)}A_{11}^{i-1}}\\end{array}\\right]\\,\\,.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We then read $C_{\\mathbf{r}}^{(1)}$ from the first $n_{r}$ lines of $\\mathbf{T_{r}^{(1)}}$ (defined as in equation (20) in the appendix).   \nThe baseline parameters $^{b}$ and $\\pmb{d}$ are empirically computed as the means of $\\mathbf{r}_{k}$ and $\\mathbf{z}_{k}$ , respectively. ", "page_idx": 4}, {"type": "text", "text": "Lastly, to learn the shared dynamics summarized by the parameter $A_{11}$ , we solve the optimization problem $\\pmb{\\Delta}^{(1)}=\\pmb{A}_{11}\\pmb{\\overline{{\\Delta}}}^{(1)}$ where $\\underline{{\\Delta}}^{(1)}$ and $\\overline{{\\Delta}}^{(1)}$ denote $\\Delta^{(1)}$ from which $n_{r}$ columns have been removed from the right or left, respectively. The closed-form least-squares solution for this problem is $A_{11}=\\underline{{\\Delta}}^{(1)}(\\overline{{\\Delta}}^{(1)})^{\\dagger}$ . This concludes the learning of the desired parameters $(A_{11},C_{\\mathbf{r}}^{(1)},C_{\\mathbf{z}}^{(1)},b,d)$ , given hyperparameter $n_{1}$ . ", "page_idx": 5}, {"type": "text", "text": "3.2.2 Stage 2: private dynamics in primary process ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "After learning the shared dynamics, our algorithm can learn the dynamics private to the primary process that were not captured by $\\mathbf{x}_{k}^{(1)}$ . Specifically, we learn the following parameters from equation (7): $\\begin{array}{r l}{\\left(\\left[A_{21}\\right.}&{{}A_{22}\\right],C_{\\mathbf{r}}^{(2)}\\right)}\\end{array}$ , with hyperparameter $n_{2}$ determining the unshared latent dimensionality of r. To do so, we first compute a \u201cresidual\u201d Hankel matrix, $H_{\\mathbf{r}}^{(2)}$ , using $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(1)}$ and $\\Delta^{(1)}$ from stage 1 and decompose it using SVD, keeping the first $n_{2}$ singular values and vectors ", "page_idx": 5}, {"type": "equation", "text": "$$\nH_{\\mathbf{r}}^{(2)}=H_{\\mathbf{r}}-\\Gamma_{\\mathbf{r}}^{(1)}\\Delta^{(1)}\\dot{\\overline{{=}}}\\Gamma_{\\mathbf{r}}^{(2)}\\Delta^{(2)}.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "With $C_{\\mathbf{r}}^{(2)}$ , which corresponds to the first $n_{r}$ rows of $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(2)}$ , we construct $C_{r}=\\Big[C_{r}^{(1)}\\quad C_{r}^{(2)}\\Big].$ . We then use $\\Delta^{(2)}$ to form the controllability matrix $\\Delta^{(1,2)}$ as the concatenation of $\\Delta^{(1)}$ and $\\Delta^{(2)}$ (derivation in appendix A.1): ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\pmb{\\Delta}^{(1,2)}=\\left[\\pmb{A}^{(1,2)^{i-1}}\\pmb{G}^{(1,2)}\\quad\\cdot\\cdot\\cdot\\quad\\pmb{A}^{(1,2)}\\pmb{G}^{(1,2)}\\quad\\pmb{G}^{(1,2)}\\right]=\\left[\\pmb{\\Delta}^{(1)}\\right]\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $A^{(1,2)}$ refers to the upper left block of the dynamics matrix $\\pmb{A}$ that corresponds to the latent states $\\mathbf{x}^{(1)}$ and $\\mathbf{x}^{(2)}$ . Given $\\Delta^{(1,2)}$ , we extract $\\left[A_{21}\\quad A_{22}\\right]$ by solving the problem $\\underline{{\\Delta}}^{(2)}=$ [A21 A22] \u2206(1,2) where ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\underline{{\\Delta}}^{(2)}:=\\left[[A_{21}\\quad A_{22}]\\,A^{(1,2)^{i-2}}G^{(1,2)}\\quad\\cdots\\quad[A_{21}\\quad A_{22}]\\,G^{(1,2)}\\right],\\quad\\overline{{\\Delta}}:=\\left[A^{(1,2)^{i-2}}G^{(1,2)}\\quad\\cdot\\quad G^{(1,2)}\\right].\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Concatenating the sub-blocks together, $A^{(1,2)}=\\biggl[A_{11}\\quad\\mathbf{0}\\\\ {A_{21}\\quad A_{22}}\\biggr].$ . Thus, given hyperparameters $n_{1}$ and $n_{2}$ , we now have all model parameters associated with the shared dynamics and dynamics private to the primary signal: $(A^{(1,2)},C_{\\mathbf{r}},C_{\\mathbf{z}}^{(1)},b,d)$ . The remaining model parameters $(A_{33},C_{\\bf z}^{(3)})$ are learned in stage 3 (appendices A.1.4 and A.9). ", "page_idx": 5}, {"type": "text", "text": "3.2.3 Supporting generalized-linear processes ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "The covariance-based SSID algorithm that we have just derived is what enables our framework to be broadly applicable to generalized-linear time-series data. As discussed in section 2.2, the variables that are linearly related to latent states $\\mathbf{x}$ are unobservable in generalized-linear models. However, because the algorithm outlined in sections 3.2.1-3.2.2 only relies on empirical covariances and cross-covariances of the two observation time-series, we can support generalized-linear processes by using moment-conversions (e.g., section 2.2) [21, 24]. When computationally tractable moment conversion equations exist, we can compute both a Hankel matrix $H_{\\mathrm{r}}$ , as described in section 2.2, and also a cross-term Hankel matrix $H_{\\mathrm{zr}}$ . For example, for the scenario wherein the Poisson observations constitute the primary process and Gaussian observations the secondary process (i.e., the first four lines of equation (6)), we can compute a moment conversion to estimate joint moments of $\\mathbf{z}_{k}$ and $\\mathbf{r}_{k}$ from the joint moments of the observed signals $\\mathbf{z}_{k}$ and $\\mathbf{y}_{k}$ with the following equation (derived using the conditional statistical properties, see appendix A.1.5) ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\Lambda_{\\mathbf{z}_{f_{m}}\\mathbf{r}_{p_{n}}}}&{{}=}&{\\mathrm{Cov}(\\mathbf{z}_{f_{m}},\\mathbf{y}_{p_{n}})\\mathrm{~/~}\\mu_{\\mathbf{y}_{p_{n}}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where, similar to equation (5), $m$ and $n$ correspond to indices of the first and second moments of the observation vectors $\\mathbf{z}_{f}$ and $\\mathbf{r}_{p}$ (or ${\\bf y}_{p}$ ), respectively. As another example, if both generalized-linear observations (e.g., $\\mathbf{y}$ and $\\mathbf{t}$ from equation (6)) are Poisson distributed, the joint moments can be computed as ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\boldsymbol{\\Lambda}_{\\mathbf{z}_{f_{m}}\\mathbf{r}_{p_{n}}}}&{=}&{\\ln(\\mathrm{Cov}(\\mathbf{t}_{f_{m}},\\mathbf{y}_{p_{n}})+\\mu_{\\mathbf{t}_{f_{m}}}\\mu_{\\mathbf{y}_{p_{n}}})-\\ln(\\mu_{\\mathbf{t}_{f_{m}}}\\mu_{\\mathbf{y}_{p_{n}}}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "For both of these scenarios the baseline log-rates are learned as in PLDSID (section 2.2). Thus, our novel multi-staged covariance-based SSID learning algorithm enables identification of shared vs. private dynamics across various generalized-linear processes. ", "page_idx": 5}, {"type": "table", "img_path": "DupvYqqlAG/tmp/32e3486be9332809dbaa56cce5cfae2d592395e06dcd8a186dc6c8316582d860.jpg", "table_caption": ["Table 1: Shared mode identification error $(\\log10$ , i.e., -2 means $1\\%$ ) at the shared latent dimensionality $\\left(n_{x}=n_{1}\\right)$ ). $\\pmb{x}$ indicates that a method (row) does not support the primary observation model (column). "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "4 Experimental Results ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "4.1 Shared dynamics are accurately identified in generalized-linear simulations ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "To evaluate how well our method identified the shared dynamics between two generalized-linear time-series, we simulated observations from random dynamical models as per equation (6). All state and observation dimensions were randomly selected, and the corresponding system parameters were randomly generated to simulate stable and slow-decaying dynamics (see appendix A.7.1 for details). In our first experiment, we evaluated how well the shared dynamical subspace could be identified when learning models at the true shared dimensionality. We performed this analysis for four combinations of generalized-linear observation pairs ( $\\mathbf{r}_{k}$ or $\\mathbf{y}_{k}$ and $\\mathbf{z}_{k}$ or $\\mathbf{t}_{k}$ , respectively): (1) Gaussian/Gaussian, (2) Poisson/Gaussian, (3) Poisson/Poisson, and (4) Bernoulli/Gaussian. Within each configuration, we compared models learned by our method against models learned with either Laplace-EM (expectation-maximization) [26] or a SSID algorithm with the appropriate observation distribution. For the Gaussian/Gaussian case we also compare against PSID [14], an SSID algorithm that preferentially learns the shared dynamics between two Gaussian time-series. PGLDM (our method) and PSID were trained using both the primary and secondary time-series, whereas all other methods used only the primary time-series as they only model a single data source. We evaluated identification of shared dynamics by computing the normalized eigenvalue error between ground truth shared modes (i.e., eigenvalues of $A_{11}$ in equation (7)) and the identified modes (i.e., the learned $A_{11}$ for PGLDM/PSID or $\\pmb{A}$ for the other baselines); see appendix A.8.1 for evaluation details. We report the results of this analysis for 20 systems per configuration in Table 1. For almost all conditions PGLDM more accurately identified the shared dynamics. ", "page_idx": 6}, {"type": "text", "text": "In our second simulation experiment, we studied the effect of latent state dimension on learning. We generated 16 systems with fixed dimensions for shared and private latent states given by $n_{1}=$ $4,n_{2}=12$ , and $n_{3}=4$ , accordingly. We swept the learned latent state dimension from 1 to the true dimensionality of the primary observation time-series $n_{1}+n_{2}=16$ , with the dimensionality of shared dynamics set to min(current $n_{x},n_{1})$ . We found that our method accurately identified the shared modes with the minimal latent state dimension of 4; in contrast, PLDSID and Laplace-EM did not reach such high accuracy even when using higher latent state dimensions (figure 1c). In these simulations we also evaluated the predictive power (i.e., correlation coefficient, CC) of the model when using discrete Poisson observations to predict continuous Gaussian observations in a held-out test set (see appendix A.8.2). This second metric allowed us to test our hypothesis that PGLDM\u2019s explicit modeling of the shared subspace improved decoding of Gaussian observations from Poisson observations compared with our baselines PLDSID [21] and Laplace-EM [26]. We observed that our method achieved higher decoding performance in low-dimensional regimes, even when using as few as 4 latent states, whereas PLDSID required much larger latent state dimensions (around 12) to reach comparable performance (figure 1a). We also evaluated Poisson self-prediction using area under the receiver operating characteristic curve, AUC (figure 1b). With the inclusion of stage 2 and sufficient model capacity, models learned by PGLDM were able to achieve comparable performance in self-prediction as compared to our baselines. ", "page_idx": 6}, {"type": "image", "img_path": "DupvYqqlAG/tmp/30d200f5147a76036afe818c0f2989dada01af6bb7eccd20a7a503ffb9ca541c.jpg", "img_caption": ["Figure 1: In simulations, PGLDM more accurately learns the shared dynamical modes and better predicts Gaussian observations from Poisson observations, especially in low-dimensional regimes. Solid traces show the mean and shaded areas denote the standard error of the mean, (s.e.m.) for each condition. (a-b) Predictive power as a function of latent state dimensionality for all learned models compared against oracle model, i.e., a model with the ground-truth parameters. Left panel (a) shows prediction CC for the Gaussian observations and right panel (b) Poisson self-prediction AUC. (c) The normalized identification error of the shared dynamical modes (in log10 scale) as a function of latent dimensionality. (d) Mode identification with models of size $n_{x}=n_{1}=2$ for a sample Bernoulli/Gaussian system with true dimensions $n_{1}=2,n_{2}=6,n_{3}=4$ . "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "4.2 Modeling shared dynamics improves motor decoding from population spiking activity ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "As a demonstration on real data, we used PGLDM to model the shared dynamics between discrete Poisson population neural spiking activity and continuous Gaussian arm movements in a publicly available NHP dataset from the Sabes lab [17]. The dataset is of a NHP moving a 2D-cursor in a virtual reality environment based on fingertip position. We use the 2D cursor position and velocity as the continuous observations z. For all methods we used $50\\mathrm{ms}$ binned multi-unit spike counts for the discrete observations y. We evaluated decoding performance of learned models using five-fold cross validation across six recording sessions (see appendix A.7.2 for cross-validation details). For PGLDM, we use the shared dynamics dimensionality of $n_{1}=\\operatorname*{min}(\\operatorname{current}{n_{x}},8)$ , i.e., a maximum $n_{1}$ of 8, because behavior decoding using stage 1 roughly plateaued at this dimension. ", "page_idx": 7}, {"type": "text", "text": "Compared with PLDSID and Laplace-EM, our method learned models that led to better behavioral decoding at all latent state dimensions, including at the maximum latent state dimension (figure 2a). This result suggests that our method better learns the shared dynamics between Poisson spiking and continuous movement observations due to its ability to dissociate shared vs. private latent states. Interestingly, despite the focus on learning the shared latent states in the first stage, PGLDM was also able to extract the private latent states in the Poisson observations because of its second stage. This stage led to improved neural self-prediction AUC, while still maintaining the more accurate behavioral decoding (figure 2b-c). Indeed, even with the inclusion of just two additional latent states to model private Poisson dynamics $\\,n_{2}=2$ , $n_{x}=10$ ), neural self-prediction was approaching that of models learned by PLDSID (figure 2b). Finally, given its analytical nature, PGLDM required a substantially lower training time compared with Laplace-EM (see appendix Table 2). ", "page_idx": 7}, {"type": "image", "img_path": "DupvYqqlAG/tmp/a9bd06c030d7104767eecbc377fd89eeeedb5c0719f54d8c129ab6d91266de3e.jpg", "img_caption": ["Figure 2: In NHP data, PGLDM improves movement decoding from Poisson population spiking activity. (a) Solid traces show the average cross-validated kinematic prediction CC (shaded areas denote the s.e.m.) for models of different latent dimensions learned by PGLDM, PLDSID, and Laplace-EM. (b) Same as (a) but visualizing one-step ahead neural self-prediction AUC. (c) Kinematic prediction CC and neural self-prediction AUC for models of latent dimensionality $n_{x}=12$ . Asterisks indicate statistical significance (Wilcoxon signed-rank test) with \\*: $p<0.05$ and $^{\\ast\\ast\\ast\\ast}$ : $p<0.0005$ . (d) Example decoding of cursor $\\bf(x,y)$ position and velocity from test data. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "4.3 PGLDM models better decode spiking activity of one visual area from another ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "As a second demonstration on real data but with a different combination of observation distributions (Poisson/Poisson), we used PGLDM to decode neural population spiking activity in one visual area from another. In a publicly available dataset from Zandvakili and Kohn [16, 18], simultaneous V1/V2 population recordings were performed in anaesthetized NHPs as they were presented visual stimuli. We used five-fold cross validation to evaluate learned model performance in decoding V1 activity from V2 activity and in V2 self-prediction. We again compare with PLDSID and LaplaceEM. For all learning algorithms we tested four latent state dimensions such that $n_{x}=n_{1}+n_{2}\\in$ $\\{2,4,6,8\\}$ . For PGLDM we used the first two stages, setting the shared dynamics dimensionality to $n_{1}=\\operatorname*{min}(\\operatorname{current}{n_{x}},4)$ . Similar to results in figure 2, we chose a maximum $n_{1}$ of 4 because decoding roughly plateaued at this dimension. The conclusions were consistent with those in figure 2: modeling the shared vs. private dynamics by PGLDM allowed for better decoding of V1 activity while maintaining comparable self-prediction of V2 activity. Analysis details are in appendix A.7.3. We present the results of the complementary analysis (i.e., predicting V1 from V2) in appendix A.12. ", "page_idx": 8}, {"type": "text", "text": "4.4 Limitations ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "PGLDM, similar to other SSID methods, uses a time-invariant model which may not be suitable if the data exhibits non-stationarity, such as in chronic neural recordings. To handle non-stationarities, one would need to either intermittently refit the model after a predetermined duration of time, or develop adaptive extensions [27, 28]. As an example of the latter, one can gradually update the model parameters by incorporating a learning rate that weighs recent observations more heavily in the moment computations while gradually forgetting past observations [27]. Moreover, as with other covariance-based SSID methods, PGLDM may be sensitive to the accuracy of the empirical estimates of the first- and second-order moments. However, with increasing number of samples these empirical estimates will approach true statistical values, thereby improving overall performance, as seen in appendix figure 4. Due to errors in the empirical estimates of the covariances, SSID methods may also occasionally learn unstable dynamics (see appendix A.5). Future work may address this by incorporating techniques from control theory, such as mode stabilization and covariance matching [29\u2013 32]. Finally, although the GLDMs that PGLDM learns are widely used (e.g., in neuroscience), such models may not be suitable for time-series with nonlinearly evolving states. We did not compare our method against nonlinear deep learning methods, such as recurrent neural networks and transformers [33\u201338], because the goals of these two modeling approaches are different. While nonlinear deep learning methods are typically used to boost overall decoding performance, GLDMs are used for their interpretability and utility in scientific investigations and in real-time, computationally-efficient engineering applications (e.g., brain-computer interfaces). ", "page_idx": 8}, {"type": "image", "img_path": "DupvYqqlAG/tmp/0720cf9a7061eb2281e938cb310075993a246f8f2968cdfe82c75d8da241aa79.jpg", "img_caption": ["Figure 3: In NHP data, PGLDM improves V1 decoding from V2 population spiking activity while maintaining comparable V2 self-prediction performance. (a) Average cross-validated V1 decoding AUC (shaded areas denote the s.e.m.) for models of different latent dimensions. (b) Same as (a) but visualizing V2 one-step ahead self-prediction AUC. (c) V1 decoding AUC at $n_{x}\\,=\\,8$ . Whiskers correspond to s.e.m. Scatter points are individual trials. (d) Same as (c) but for V2 self-prediction. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "5 Discussion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We developed PGLDM, a novel analytical multi-staged covariance-based SSID algorithm for modeling two generalized-linear processes while also dissociating shared from private dynamics. In simulations we demonstrate that our method successfully achieves this capability agnostic to the generalized-linear observation distribution. As a result, our approach more accurately models system dynamics compared to several commonly-used GLDM variants and their corresponding learning algorithms. We also demonstrate our method\u2019s applicability to real data by modeling two distinct NHP datasets recorded under different contexts and from different brain regions. In both simulations and in real data, PGLDM\u2019s ability to dissociate shared from private dynamics improved decoding of a secondary time-series from a primary time-series despite using lower-dimensional latent states. Further, although here we specifically focused on modeling Gaussian, Poisson, and Bernoulli observations, our algorithm can be extended to alternate distributions described with generalized-linear models or to other link functions than the ones used here, as long as there exists a corresponding computationally tractable moment conversion equation. This is possible, if a closed-form equation exists, because the covariance-based approach of PGLDM only requires the second-order moments after moment conversion (equations (2), (5), (8), (11), (12)); as such, in these scenarios the moment conversion algorithm can be modified for the desired link function and/or generalized-linear observation model [21, 24]. Beyond neuroscience, due to the high-prevalence of GLDMs across various application domains, our method may be a useful tool for modeling the shared and private dynamics of joint generalized-linear processes with distinct observation distributions. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was supported by Office of Naval Research (ONR) YIP grant N00014-19-1-2128, Army Research Office (ARO) MURI grant W911NF-16-1-0368, and National Institutes of Health (NIH) grants DP2MH126378, R01MH123770, and Brain Initiative R61MH135407. M.M.S. is an inventor on University of Southern California\u2019s patents or patent applications related to decoding and closedloop control approaches, and is a consultant for Paradromics Inc. Authors thank Han-Lin Hsieh, Christian Song, and Parima Ahmadipouranari for helpful discussions. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Liam Paninski, Yashar Ahmadian, Daniel Gil Ferreira, Shinsuke Koyama, Kamiar Rahnama Rad, Michael Vidne, Joshua Vogelstein, and Wei Wu. A new look at state-space models for neural data. Journal of computational neuroscience, 29(1-2):107\u2013126, August 2010. ISSN 1573-6873 0929-5313. doi: 10.1007/s10827-009-0179-x.   \n[2] J. H. Macke, L. Buesing, and M. Sahani. Estimating state and parameters in state space models of spike trains, page 137\u2013159. Cambridge University Press, 2015. doi: 10.1017/CBO9781139941433.007. [3] Scott Linderman, Ryan P Adams, and Jonathan W Pillow. Bayesian latent structure discovery from multi-neuron recordings. In Advances in Neural Information Processing Systems, volume 29. Curran Associates, Inc., 2016.   \n[4] Wilson Truccolo, Uri T. Eden, Matthew R. Fellows, John P. Donoghue, and Emery N. Brown. A point process framework for relating neural spiking activity to spiking history, neural ensemble, and extrinsic covariate effects. Journal of Neurophysiology, 93(2):1074\u20131089, 2005. doi: 10.1152/jn.00697.2004. PMID: 15356183. [5] Jonathan W. Pillow, Jonathon Shlens, Liam Paninski, Alexander Sher, Alan M. Litke, E. J. Chichilnisky, and Eero P. Simoncelli. Spatio-temporal correlations and visual signalling in a complete neuronal population. Nature, 454(7207):995\u2013999, August 2008. ISSN 1476-4687. doi: 10.1038/nature07140.   \n[6] Vernon Lawhern, Wei Wu, Nicholas Hatsopoulos, and Liam Paninski. Population decoding of motor cortical activity using a generalized linear model with hidden states. Journal of Neuroscience Methods, 189(2):267\u2013280, June 2010. ISSN 0165-0270. doi: 10.1016/j.jneumeth.2010.03.024.   \n[7] Hung-Yun Lu, Elizabeth S Lorenc, Hanlin Zhu, Justin Kilmarx, James Sulzer, Chong Xie, Philippe N Tobler, Andrew J Watrous, Amy L Orsborn, Jarrod Lewis-Peacock, and Samantha R Santacruz. Multiscale neural decoding and analysis. Journal of Neural Engineering, 18(4):045013, Aug 2021. doi: 10.1088/1741-2552/ac160f.   \n[8] Yuxiao Yang, Shaoyu Qiao, Omid G. Sani, J. Isaac Sedillo, Breonna Ferrentino, Bijan Pesaran, and Maryam M. Shanechi. Modelling and prediction of the dynamic responses of large-scale brain networks during direct electrical stimulation. Nature Biomedical Engineering, 5(4):324\u2013345, April 2021. ISSN 2157-846X. doi: 10.1038/s41551-020-00666-w. [9] Edoardo Balzani, Jean-Paul G Noel, Pedro Herrero-Vidal, Dora E Angelaki, and Cristina Savin. A probabilistic framework for task-aligned intra- and inter-area neural manifold estimation. In The Eleventh International Conference on Learning Representations, 2023.   \n[10] Jonathan C. Kao, Paul Nuyujukian, Stephen I. Ryu, Mark M. Churchland, John P. Cunningham, and Krishna V. Shenoy. Single-trial dynamics of motor cortex and their applications to brain-machine interfaces. Nature Communications, 6:7759, July 2015. ISSN 2041-1723. doi: 10.1038/ncomms8759.   \n[11] Mehdi Aghagolzadeh and Wilson Truccolo. Inference and decoding of motor cortex low-dimensional dynamics via latent state-space models. IEEE Transactions on Neural Systems and Rehabilitation Engineering, 24(2):272\u2013282, 2016. doi: 10.1109/TNSRE.2015.2470527.   \n[12] William E. Allen, Michael Z. Chen, Nandini Pichamoorthy, Rebecca H. Tien, Marius Pachitariu, Liqun Luo, and Karl Deisseroth. Thirst regulates motivated behavior through modulation of brainwide neural population dynamics. Science, 364(6437):eaav3932, April 2019. doi: 10.1126/science.aav3932.   \n[13] Carsen Stringer, Marius Pachitariu, Nicholas Steinmetz, Charu Bai Reddy, Matteo Carandini, and Kenneth D. Harris. Spontaneous behaviors drive multidimensional, brainwide activity. Science, 364(6437): eaav7893, April 2019. ISSN 0036-8075, 1095-9203. doi: 10.1126/science.aav7893.   \n[14] Omid G. Sani, Hamidreza Abbaspourazad, Yan T. Wong, Bijan Pesaran, and Maryam M. Shanechi. Modeling behaviorally relevant neural dynamics enabled by preferential subspace identification. Nature Neuroscience, 24(1):140\u2013149, January 2021. ISSN 1546-1726. doi: 10.1038/s41593-020-00733-0.   \n[15] Evren Gokcen, Anna I. Jasper, Jo\u00e3o D. Semedo, Amin Zandvakili, Adam Kohn, Christian K. Machens, and Byron M. Yu. Disentangling the flow of signals between populations of neurons. Nature Computational Science, 2(8):512\u2013525, August 2022. ISSN 2662-8457. doi: 10.1038/s43588-022-00282-5.   \n[16] Amin Zandvakili and Adam Kohn. Coordinated neuronal activity enhances corticocortical communication. Neuron, 87(4):827\u2013839, August 2015. doi: 10.1016/j.neuron.2015.07.026.   \n[17] Joseph E. O\u2019Doherty, Mariana M. B. Cardoso, Joseph G. Makin, and Philip N. Sabes. Nonhuman Primate Reaching with Multichannel Sensorimotor Cortex Electrophysiology, May 2017. URL https: //doi.org/10.5281/zenodo.583331.   \n[18] Amin Zandvakili and Adam Kohn. Simultaneous V1-V2 neuronal population recordings in anesthetized macaque monkeys, 2019. URL https://crcns.org/data-sets/vc/v1v2-1.   \n[19] Peter Van Overschee and Bart De Moor. Subspace Identification for Linear Systems. Springer US, Boston, MA, 1996. ISBN 978-1-4613-8061-0. doi: 10.1007/978-1-4613-0465-4.   \n[20] Tohru Katayama. Subspace Methods for System Identification. Springer London, 2005. doi: 10.1007/ 1-84628-158-x.   \n[21] Lars Buesing, Jakob H Macke, and Maneesh Sahani. Spectral learning of linear dynamics from generalisedlinear observations with application to neural population data. Advances in Neural Information Processing Systems, 25:9, 2012.   \n[22] Parima Ahmadipour, Omid G. Sani, Bijan Pesaran, and Maryam M. Shanechi. Multimodal subspace identification for modeling discrete-continuous spiking and field potential population activity. Journal of Neural Engineering, 2023.   \n[23] Parsa Vahidi, Omid G Sani, and Maryam M Shanechi. Modeling and dissociation of intrinsic and inputdriven neural population dynamics underlying behavior. Proceedings of the National Academy of Sciences, 121(7):e2212887121, 2024.   \n[24] Iris R Stone, Yotam Sagiv, Il Memming Park, and Jonathan W. Pillow. Spectral learning of bernoulli linear dynamical systems models for decision-making. Transactions on Machine Learning Research, 2023. ISSN 2835-8856.   \n[25] Anne C. Smith and Emery N. Brown. Estimating a state-space model from point process observations. Neural Computation, 15(5):965\u2013991, May 2003. ISSN 0899-7667. doi: 10.1162/089976603765202622.   \n[26] Scott Linderman, Benjamin Antin, David Zoltowski, and Joshua Glaser. SSM: Bayesian Learning and Inference for State Space Models, October 2020. URL https://github.com/lindermanlab/ssm.   \n[27] Parima Ahmadipour, Yuxiao Yang, Edward F. Chang, and Maryam M. Shanechi. Adaptive tracking of human ECoG network dynamics. Journal of Neural Engineering, 18:016011, 2 2021. ISSN 1741-2552. doi: 10.1088/1741-2552/ABAE42.   \n[28] Yuxiao Yang, Parima Ahmadipour, and Maryam M. Shanechi. Adaptive latent state modeling of brain network dynamics with real-time learning rate optimization. Journal of Neural Engineering, 18(3):036013, March 2021. ISSN 1741-2552. doi: 10.1088/1741-2552/abcefd.   \n[29] J. M. Maciejowski. Guaranteed stability with subspace methods. Systems & Control Letters, 26(2): 153\u2013156, 1995. ISSN 0167-6911. doi: https://doi.org/10.1016/0167-6911(95)00010-7.   \n[30] Anders Lindquist and Giorgio Picci. Canonical correlation analysis, approximate covariance extension, and identification of stationary time series. Automatica, 32(5):709\u2013733, 1996. ISSN 0005-1098. doi: https://doi.org/10.1016/0005-1098(96)80649-2.   \n[31] Christopher I. Byrnes, Sergei V. Gusev, and Anders Lindquist. A convex optimization approach to the rational covariance extension problem. SIAM Journal on Control and Optimization, 37(1):211\u2013229, 1998. doi: 10.1137/S0363012997321553.   \n[32] Brien Alkire and Lieven Vandenberghe. Convex optimization problems involving finite autocorrelation sequences. Mathematical Programming, 93(3):331\u2013359, December 2002. ISSN 1436-4646. doi: 10.1007/ s10107-002-0334-x.   \n[33] Chethan Pandarinath, Daniel J. O\u2019Shea, Jasmine Collins, Rafal Jozefowicz, Sergey D. Stavisky, Jonathan C. Kao, Eric M. Trautmann, Matthew T. Kaufman, Stephen I. Ryu, Leigh R. Hochberg, Jaimie M. Henderson, Krishna V. Shenoy, L. F. Abbott, and David Sussillo. Inferring single-trial neural population dynamics using sequential auto-encoders. Nature Methods, 2018. doi: 10.1038/s41592-018-0109-9.   \n[34] Cole Hurwitz, Akash Srivastava, Kai Xu, Justin Jude, Matthew Perich, Lee Miller, and Matthias Hennig. Targeted neural dynamical modeling. In Advances in Neural Information Processing Systems, volume 34, pages 29379\u201329392. Curran Associates, Inc., 2021.   \n[35] Joel Ye and Chethan Pandarinath. Representation learning for neural population activity with Neural Data Transformers. Neurons, Behavior, Data analysis, and Theory, August 2021. ISSN 2690-2664. doi: 10.51628/001c.27358.   \n[36] Joel Ye, Jennifer Collinger, Leila Wehbe, and Robert Gaunt. Neural Data Transformer 2: Multi-context Pretraining for Neural Spiking Activity. In Advances in Neural Information Processing Systems, volume 36, pages 80352\u201380374. Curran Associates, Inc., 2023.   \n[37] Hamidreza Abbaspourazad, Eray Erturk, Bijan Pesaran, and Maryam M. Shanechi. Dynamical flexible inference of nonlinear latent factors and structures in neural population activity. Nature Biomedical Engineering, 8(1):85\u2013108, January 2024. ISSN 2157-846X. doi: 10.1038/s41551-023-01106-1. Publisher: Nature Publishing Group.   \n[38] Omid G. Sani, Bijan Pesaran, and Maryam M. Shanechi. Dissociative and prioritized modeling of behaviorally relevant neural dynamics using recurrent neural networks. Nature Neuroscience, 27(10): 2033\u20132045, October 2024. ISSN 1546-1726. doi: 10.1038/s41593-024-01731-2. Publisher: Nature Publishing Group.   \n[39] Steven Diamond and Stephen Boyd. CVXPY: A Python-embedded modeling language for convex optimization. Journal of Machine Learning Research, 17(83):1\u20135, 2016.   \n[40] Akshay Agrawal, Robin Verschueren, Steven Diamond, and Stephen Boyd. A rewriting system for convex optimization problems. Journal of Control and Decision, 5(1):42\u201360, 2018.   \n[41] Mark M. Churchland, John P. Cunningham, Matthew T. Kaufman, Justin D. Foster, Paul Nuyujukian, Stephen I. Ryu, Krishna V. Shenoy, and Krishna V. Shenoy. Neural population dynamics during reaching. Nature, 487:51\u201356, 2012. ISSN 00280836. doi: 10.1038/nature11129.   \n[42] Christian Y Song, Han-Lin Hsieh, Bijan Pesaran, and Maryam M Shanechi. Modeling and inference methods for switching regime-dependent dynamical systems with multiscale neural observations. 2022. doi: 10.1088/1741-2552/ac9b94.   \n[43] Daniel W. Moran and Andrew B. Schwartz. Motor cortical representation of speed and direction during reaching. Journal of Neurophysiology, 82(5):2676\u20132692, 1999. doi: 10.1152/jn.1999.82.5.2676. PMID: 10561437.   \n[44] Shy Shoham, Liam M Paninski, Matthew R Fellows, Nicholas G Hatsopoulos, John P Donoghue, and Richard A Normann. Statistical encoding model for a primary motor cortical brain-machine interface. IEEE Transactions on Biomedical Engineering, 52, 2005. doi: 10.1109/TBME.2005.847542.   \n[45] Patrick N. Lawlor, Matthew G. Perich, Lee E. Miller, and Konrad P. Kording. Linear-nonlinear-time-warppoisson models of neural activity. Journal of Computational Neuroscience, 45(3):173\u2013191, December 2018. ISSN 1573-6873. doi: 10.1007/s10827-018-0696-6.   \n[46] Shinsuke Koyama, Uri T. Eden, Emery N. Brown, and Robert E. Kass. Bayesian decoding of neural spike trains. Annals of the Institute of Statistical Mathematics, 62(1):37\u201359, February 2010. ISSN 1572-9052. doi: 10.1007/s10463-009-0249-x.   \n[47] Uri T. Eden, Loren M. Frank, Riccardo Barbieri, Victor Solo, and Emery N. Brown. Dynamic analysis of neural encoding by point process adaptive filtering. Neural Computation, 16(5):971\u2013998, May 2004. ISSN 0899-7667. doi: 10.1162/089976604773135069.   \n[48] Skipper Seabold and Josef Perktold. statsmodels: Econometric and statistical modeling with python. In 9th Python in Science Conference, 2010.   \n[49] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine learning in python. Journal of Machine Learning Research, 12:2825\u20132830, 2011. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "[50] Jo\u00e3o D. Semedo, Anna I. Jasper, Amin Zandvakili, Aravind Krishna, Amir Aschner, Christian K. Machens, Adam Kohn, and Byron M. Yu. Feedforward and feedback interactions between visual cortical areas use different population activity patterns. Nature Communications, 13(1):1099, March 2022. ISSN 2041-1723. doi: 10.1038/s41467-022-28552-w. ", "page_idx": 13}, {"type": "text", "text": "A Appendix ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "A.1 Derivation ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Here we provide the derivation for PGLDM (prioritized generalized-linear dynamical modeling), a covariance-based subspace identification algorithm that learns a dynamical model of a primary time-series while dissociating shared vs. private latents with a secondary time-series. We define the following equivalent formulation for our dynamical model (equation (6)), where the block structure delineates shared $(\\mathbf{x}^{(1)})$ and private $(\\mathbf{x}^{(2)},\\mathbf{x}^{(3)})$ latent states ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{r l}{\\left[\\begin{array}{l}{\\mathbf{x}_{1+1}^{\\mathrm{(i)}}}\\\\ {\\mathbf{x}_{1+1}^{\\mathrm{(i)}}}\\\\ {\\mathbf{x}_{1+1}^{\\mathrm{(i)}}}\\end{array}\\right]}&{=\\;\\;\\left[\\begin{array}{l l l}{A_{11}}&{0}&{0}\\\\ {A_{21}}&{A_{22}}&{0}\\\\ {0}&{0}&{A_{33}}\\\\ {0}&{0}&{A_{33}}\\end{array}\\right]\\;\\Bigg[\\mathbf{x}_{1+1}^{\\mathrm{(i)}}\\Bigg]\\;+\\;\\mathbf{w}_{\\mathrm{A}}}\\\\ {\\mathbf{r}_{k}}&{=\\;\\;\\left[\\begin{array}{l l l}{\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{\\bar{p}}_{e}^{\\mathrm{(i)}}}\\\\ {\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{\\bar{p}}_{e}^{\\mathrm{(i)}}}\\end{array}\\right]\\;\\Bigg[\\mathbf{x}_{1}^{\\mathrm{(i)}}\\Bigg]\\;+\\;\\mathbf{r}_{k}\\;+\\;\\;k\\cdot\\;}\\\\ {\\mathbf{x}_{k}}&{=\\;\\;\\left[\\begin{array}{l l l}{\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{0}}&{G_{e}^{(i)}}\\\\ {\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{\\bar{r}}_{e}^{(i)}}&{\\mathbf{\\bar{q}}_{e}^{(i)}}\\end{array}\\right]\\Bigg[\\mathbf{x}_{1}^{\\mathrm{(i)}}\\Bigg]\\;+\\;\\mathbf{\\bar{q}}_{k}\\;+\\;\\;k\\cdot\\;}\\\\ {\\mathbf{y}_{k}|\\mathbf{r}_{k}}&{\\sim\\;\\;\\mathcal{P}_{k_{1}}(\\mathbf{y}_{k}+\\;\\;\\mathbf{\\bar{p}}_{e}^{(i)})}\\\\ {\\mathbf{t}_{k}|\\mathbf{r}_{k}}&{=\\;\\;\\mathcal{P}_{k_{1}}(\\mathbf{\\bar{r}}_{k}+\\;\\;\\mathbf{\\bar{h}}(\\mathbf{\\bar{r}}_{k}))\\;\\;\\;}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "with parameters and noise terms defined as in sections 2.1-2.2 and 3.1. ", "page_idx": 14}, {"type": "text", "text": "A.1.1 Standard Covariance-Based SSID ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Before we present the derivation for PGLDM, we review a few steps in standard covariance-based SSID (section 2.1) that will help us in the derivation. First, it can be shown that the $\\tau$ -th lag crosscovariance terms for $\\mathbf{r}$ can be written in terms of model parameters as $\\mathbf{A}_{\\mathbf{r}_{\\tau}}=\\operatorname{Cov}\\left(\\mathbf{r}_{k+\\tau},\\mathbf{r}_{k}\\right)=$ $C_{\\mathbf{r}}A^{\\tau-1}G$ , where $G:=\\operatorname{Cov}(\\mathbf{x}_{k+1},\\mathbf{r}_{k})$ . Using this relationship, the Hankel matrix, $H_{\\mathrm{r}}$ , can be expanded as [19, 20] ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{H_{\\mathbf{r}}=\\mathrm{Cov}(\\mathbf{r}_{f},\\mathbf{r}_{p})=}&{\\left[\\begin{array}{c c c c}{\\mathbf{\\Lambda}\\mathbf{\\Lambda}\\mathbf{\\Lambda}\\mathbf{\\Lambda}_{\\mathbf{r}_{i}}}&{\\mathbf{\\Lambda}\\mathbf{\\cdot}\\mathbf{\\Lambda}\\cdot\\mathbf{\\Lambda}}&{\\mathbf{\\Lambda}\\mathbf{\\Lambda}_{\\mathbf{r}_{1}}}\\\\ {\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\\\ {\\mathbf{\\Lambda}\\mathbf{\\Lambda}\\mathbf{\\Lambda}_{\\mathbf{r}_{2i-1}}}&{\\mathbf{\\Lambda}\\mathbf{\\Lambda}\\mathbf{\\cdot}\\mathbf{\\Lambda}\\mathbf{\\cdot}\\mathbf{\\Lambda}}&{\\mathbf{\\Lambda}\\mathbf{\\cdot}}\\\\ {\\mathbf{\\Lambda}}&{\\mathbf{\\Lambda}}&{\\mathbf{\\cdot}}&{\\mathbf{\\Lambda}}\\end{array}\\right]}\\\\ {=}&{\\left[\\begin{array}{c c c c}{C_{\\mathbf{r}}A^{i-1}G}&{C_{\\mathbf{r}}A^{i-2}G}&{\\cdots}&{C_{\\mathbf{r}}G}\\\\ {\\vdots}&{\\vdots}&{\\cdots}&{\\vdots}\\\\ {C_{\\mathbf{r}}A^{2i-2}G}&{C_{\\mathbf{r}}A^{2i-3}G}&{\\cdots}&{C_{\\mathbf{r}}A^{i-1}G}\\end{array}\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Second, using a singular-value decomposition the above Hankel matrix $H_{\\mathrm{r}}$ can be decomposed into observability, $\\Gamma_{\\mathrm{r}}$ , and controllability, $\\Delta$ , matrices from which model parameters can be extracted [19, 20] ", "page_idx": 14}, {"type": "equation", "text": "$$\nH_{\\mathrm{r}}\\stackrel{\\mathrm{sv}\\mathrm{p}}{=}\\Gamma_{\\mathrm{r}}\\Delta=\\left[\\begin{array}{c}{C_{\\mathrm{r}}}\\\\ {C_{\\mathrm{r}}A}\\\\ {\\vdots}\\\\ {C_{\\mathrm{r}}\\dot{A}^{i-1}}\\end{array}\\right]\\left[{\\bf A}^{i-1}G\\,\\,\\,\\,\\,\\cdot\\,\\,\\,\\,\\,A G\\,\\,\\,\\,G\\right].\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "We note that there exists a canonical correlation analysis (CCA) version of this algorithm wherein $H_{\\mathrm{r}}$ is left and right normalized by the square root matrices of the future and past observation covariance matrices, respectively, prior to the singular-value decomposition. Specifically L\u22121HrM \u2212T SV=D $\\hat{U}\\hat{\\Sigma}\\hat{V}^{T}$ , where $\\mathbf{A}_{f f}=\\operatorname{Cov}(\\mathbf{r}_{f},\\mathbf{r}_{f})=L L^{T}$ and $\\mathbf{A}_{p p}=\\operatorname{Cov}(\\mathbf{r}_{p},\\mathbf{r}_{p})=M M^{T}$ . The observability and controllability matrices can be recovered as $\\Gamma_{\\mathrm{r}}=L\\hat{U}\\hat{\\Sigma}^{1/2}$ and $\\mathbf{\\hat{A}}=\\hat{\\Sigma}^{1/2}\\hat{V}^{T}M^{T}$ , respectively. We refer readers to section 8.7 of Katayama [20] for more detail. We can similarly derive a CCA version of PGLDM, which we present next. This can be achieved by applying the appropriate normalizations to both $H_{\\mathrm{r}}$ and $H_{\\mathrm{zr}}$ , the cross-term Hankel matrix defined below, prior to the singular-value decomposition. The resulting decomposition would then have to be un-normalized to retrieve the appropriate observability and controllability matrices. ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "A.1.2 PGLDM: Stage 1 derivation ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In the first stage of our algorithm, our goal is to learn the model parameters that correspond to the shared dynamical subspace of ${\\bf z}$ and $\\mathbf{r}$ via the latent state $\\mathbf{x}_{k}^{(1)}\\colon(A_{11},C_{\\mathbf{r}}^{(1)},C_{\\mathbf{z}}^{(1)},b,d)$ . Before deriving the first stage, we first present a few parameter definitions and simplifying assumptions. As noted in section 3.1, $\\boldsymbol{G}$ can be partitioned as $\\pmb{G}=\\left[\\pmb{G}^{(1)^{T}}\\pmb{G}^{(2)^{T}}\\pmb{G}^{(3)^{T}}\\right]^{T}$ due to the block structure of equation (13). Further, based on assumptions 3.2 and 3.3 we can set $G^{(3)}=0$ . Leveraging the block structure of $\\pmb{G}$ we can also define a simplified block-partitioned structure for the controllability matrix $\\Delta$ (equation (15)) as ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\Delta=}&{[A^{(-1)}G\\cdot\\mathrm{\\boldmath~\\dots~}A\\cdot G\\!\\mathrm{\\boldmath~\\right.~}]}\\\\ {=}&{\\left[\\left[A_{41}^{[1]}\\mathrm{\\boldmath~\\sigma~}_{42}^{0}\\mathrm{\\boldmath~\\\\}0\\right]\\!\\!\\!A^{(-2)}G\\!\\mathrm{\\boldmath~\\\\dots~}\\!\\!\\!\\left[A_{41}^{[1]}\\mathrm{\\boldmath~\\sigma~}_{42}^{0}\\mathrm{\\boldmath~\\\\}0\\right]\\left[G^{(1)}\\!\\!\\right]^{2}\\left[G_{41}^{[2]}\\right]\\right]}\\\\ {=}&{\\left[\\left[\\left[A_{41}^{[-1]}G^{(1)}\\!\\!\\!\\ \\!A^{(1)}\\!\\!\\!\\right.\\right.}\\\\ &{\\left.\\left.\\left[A_{12}^{[-2]}\\mathrm{\\boldmath~\\\\\\sigma~}_{42}^{[1]}A^{[-2]}G\\right]\\!\\!\\!\\right.\\right.\\right.\\ldots\\!\\!\\!\\!\\left[\\left[A_{21}^{[1]}\\mathrm{\\boldmath~\\sigma~}_{42}^{[1]}\\mathrm{\\boldmath~\\\\}0\\right]G\\right]\\left[G_{43}^{[1]}\\!\\!\\right]\\right]=\\left[\\alpha_{3}^{[(1)}\\right]\\!\\!\\!\\right]}\\\\ &{\\left.\\left.\\left[\\left[A_{33}^{[-1]}G^{(1)}\\right]\\!\\!\\!\\right.^{2}\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!}\\\\ &{\\left.\\left.\\left.\\mathrm{\\boldmath~\\sigma~}_{43}^{[+1]}G^{(1)}\\right]\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\!\\! \n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "The block-partition structure of $\\Delta$ will play an important role in the separation of learning between stages 1 and 2 and will enable the prioritized identification of shared dynamics $A_{11}$ . ", "page_idx": 15}, {"type": "text", "text": "To begin the derivation, it can be shown that the $\\tau$ -th lag cross-covariance between ${\\bf z}$ and $\\mathbf{r}$ can be written in terms of model parameters as $\\mathbf{A}_{\\mathbf{zr}_{\\tau}}=\\operatorname{Cov}\\left(\\mathbf{\\bar{z}}_{k+\\tau},\\mathbf{r}_{k}\\right)=C_{\\mathbf{z}}A^{\\tau-1}G$ . Using the block definition of $\\pmb{G}$ , we can simplify the cross-covariance term as ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{A_{zr_{\\tau}}}=\\left[C_{z}^{(1)}\\quad\\mathbf{0}\\quad C_{z}^{(3)}\\right]\\left[\\begin{array}{l l l}{A_{11}}&{\\mathbf{0}}&{\\mathbf{0}}\\\\ {A_{21}}&{A_{22}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\mathbf{0}}&{A_{33}}\\end{array}\\right]^{\\tau-1}\\left[\\boldsymbol{G}^{(1)}\\right]=C_{z}^{(1)}A_{11}^{\\tau-1}\\boldsymbol{G}^{(1)}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "The Hankel matrix between future secondary observations and past primary observations can then be expanded as ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{H_{\\mathbf{zr}}=\\operatorname{Cov}(\\mathbf{z}_{f},\\mathbf{r}_{p})=}&{\\left[\\begin{array}{c c c c c}{\\Lambda_{\\mathbf{zr}_{i}}}&{\\Lambda_{\\mathbf{zr}_{i-1}}}&{\\cdots}&{\\Lambda_{\\mathbf{zr}_{1}}}\\\\ {\\vdots}&{\\vdots}&{\\cdots}&{\\vdots}\\\\ {\\Lambda_{\\mathbf{zr}_{2i-1}}}&{\\Lambda_{\\mathbf{zr}_{2i-2}}}&{\\cdots}&{\\Lambda_{\\mathbf{zr}_{i}}}\\end{array}\\right]}\\\\ &{=}&{\\left[\\begin{array}{c c c c c}{C_{\\mathbf{z}}^{(1)}A_{11}^{i-1}G^{(1)}}&{C_{\\mathbf{z}}^{(1)}A_{11}^{i-2}G^{(1)}}&{\\cdots}&{C_{\\mathbf{z}}^{(1)}G^{(1)}}\\\\ {\\vdots}&{\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\\\ {C_{\\mathbf{z}}^{(1)}A_{11}^{2i-2}G^{(1)}}&{C_{\\mathbf{z}}^{(1)}A_{11}^{2i-3}G^{(1)}}&{\\cdots}&{C_{\\mathbf{z}}^{(1)}A_{11}^{i-1}G^{(1)}.}\\end{array}\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "A singular-value decomposition of $H_{\\mathrm{zr}}$ yields the observability matrix for ${\\bf z}$ (i.e., $\\Gamma_{\\mathbf{z}}$ ) and the controllability matrix $\\Delta^{(1)}$ associated with the shared dynamics ", "page_idx": 16}, {"type": "equation", "text": "$$\nH_{\\mathbf{z}}\\mathbf{\\Sigma}_{=}^{\\mathbf{S}\\!\\!\\operatorname{U}}\\mathbf{\\Sigma}_{\\mathbf{z}}\\Delta^{(1)}=\\left[\\begin{array}{c}{C_{\\mathbf{z}}^{(1)}}\\\\ {C_{\\mathbf{z}}^{(1)}A_{11}}\\\\ {\\vdots}\\\\ {C_{\\mathbf{z}}^{(1)}A_{11}^{i-1}}\\end{array}\\right]\\left[A_{11}^{i-1}G^{(1)}\\quad\\cdot\\cdot\\cdot\\quad A_{11}G^{(1)}\\quad G^{(1)}\\right].\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "At this point, ${C}_{\\bf z}^{(1)}$ can be read off the first $n_{z}$ rows of $\\Gamma_{\\mathbf{z}}$ . The shared latent dynamics matrix $A_{11}$ can be learned by solving a least-squares problem based on the controllability matrix $\\Delta^{(1)}$ (as introduced in section 3.2.1) ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\begin{array}{c c c c c}{\\qquad}&{\\qquad}&{\\qquad}&{\\qquad}&{\\qquad\\Delta^{(1)}=A_{11}\\overline{{\\Delta}}^{(1)}\\!\\!}&{\\mathrm{where}}&\\\\ {\\qquad}&{\\qquad}&{\\qquad}&{\\qquad\\Delta^{(1)}:=\\left[A_{11}^{i-1}G^{(1)}\\right.}&{\\cdot\\cdot\\left.\\quad A_{11}G^{(1)}\\right],\\quad\\overline{{\\Delta}}^{(1)}:=\\left[A_{11}^{i-2}G^{(1)}\\quad\\cdot\\cdot\\quad G^{(1)}\\right],}\\end{array}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "which has the following closed-form solution: $A_{11}=\\underline{{\\Delta}}^{(1)}(\\overline{{\\Delta}}^{(1)})^{\\dagger}$ . ", "page_idx": 16}, {"type": "text", "text": "To extract $C_{\\mathbf{r}}^{(1)}$ , we first note that the Hankel expansion in equation (15) can be rewritten with the block-structure of $\\Delta$ in mind as (we omit partitions corresponding to latents $x^{(3)}$ due to the decoupling) ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{{\\mathbf{{H}}}_{\\mathbf{r}}=\\mathbf{U}\\boldsymbol{\\Sigma}\\mathbf{V}^{T}}&{=(\\mathbf{U}\\boldsymbol{\\Sigma}^{1/2})(\\boldsymbol{\\Sigma}^{1/2}\\mathbf{V}^{T})=(\\mathbf{U}\\boldsymbol{\\Sigma}^{1/2})(\\boldsymbol{\\Sigma}^{1/2})\\mathbf{V}^{T})}\\\\ &{\\overset{(a)}{=}\\Bigg([\\mathbf{U}^{(1)}\\quad\\mathbf{U}^{(2)}]\\left[\\begin{array}{c c}{\\boldsymbol{\\Sigma}^{(1)^{1/2}}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\boldsymbol{\\Sigma}^{(2)^{1/2}}}\\end{array}\\right]\\Bigg)\\left(\\left[\\begin{array}{c c}{\\boldsymbol{\\Sigma}^{(1)^{1/2}}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\boldsymbol{\\Sigma}^{(2)^{1/2}}}\\end{array}\\right]\\left[\\begin{array}{c}{\\mathbf{V}^{(1)^{T}}}\\\\ {\\mathbf{V}^{(2)^{T}}}\\end{array}\\right]\\right)}\\\\ &{=(\\mathbf{U}^{(1)}\\boldsymbol{\\Sigma}^{(1)^{1/2}})(\\boldsymbol{\\Sigma}^{(1)^{1/2}}\\mathbf{V}^{(1)^{T}})+(\\mathbf{U}^{(2)}\\boldsymbol{\\Sigma}^{(2)^{1/2}})(\\boldsymbol{\\Sigma}^{(2)^{1/2}}\\mathbf{V}^{(2)^{T}})}\\\\ &{\\overset{(b)}{=}\\mathbf{I}_{\\mathbf{r}}^{(1)}\\boldsymbol{\\Delta}^{(1)}+\\mathbf{I}_{\\mathbf{r}}^{(2)}\\boldsymbol{\\Delta}^{(2)}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where equivalence (a) is due to the block-partition structure of $\\Delta$ and equivalence (b) implicitly introduces a block structure to observability matrix $\\Gamma_{\\mathbf{r}}$ , where $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(1)}$ and $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(2)}$ correspond to the observability matrices associated with the shared and private latents, respectively. More formally, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathbf{I}_{\\mathbf{r}}=\\left[\\mathbf{T}_{\\mathbf{r}}^{(1)}\\quad\\mathbf{T}_{\\mathbf{r}}^{(2)}\\right]=\\left[\\begin{array}{c}{C_{\\mathbf{r}}}\\\\ {C_{\\mathbf{r}}A}\\\\ {\\vdots}\\\\ {C_{\\mathbf{r}}A^{i-1}}\\end{array}\\right]=\\left[\\begin{array}{l l}{C_{\\mathbf{r}}^{(1)}}&{C_{r}^{(2)}}\\\\ {\\vdots}&{\\overline{{\\mathbf{I}}}_{\\mathbf{r}}^{(2)}}\\end{array}\\right],\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $\\overline{{\\Gamma}}_{\\mathrm{r}}$ denotes $\\Gamma_{\\mathrm{r}}$ from which the top $n_{r}$ rows have been removed. Taken together, $H_{\\mathrm{r}}$ can be viewed as the sum of \u201cshared\u201d and \u201cprivate\u201d components (equation (19)). Thus, we can compute $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(1)}$ as ", "page_idx": 16}, {"type": "equation", "text": "$$\nH_{\\mathbf{r}}\\Delta^{(1)\\dagger}=(\\mathbf{r}_{\\mathbf{r}}^{(1)}\\Delta^{(1)}+\\mathbf{r}_{\\mathbf{r}}^{(2)}\\Delta^{(2)})\\Delta^{(1)\\dagger}=\\mathbf{r}_{\\mathbf{r}}^{(1)}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where we have used the orthonormal property of right singular vectors $\\mathbf{V}$ to conclude $\\Delta^{(2)}\\Delta^{(1)\\dagger}=\\mathbf{0}$ . At this point, we can extract $C_{\\mathbf{r}}^{(1)}$ by reading the top $n_{r}$ rows of $\\mathbf{T_{r}^{(1)}}$ . Finally, $^{b}$ and $\\pmb{d}$ can both be learned directly from the data either by computing the empirical mean (when working with continuous Gaussian observations) or during the moment transformation (section 2.2). This concludes the learning of all parameters associated with the shared dynamical subspace, i.e., $(A_{11},C_{\\mathbf{r}}^{(1)},C_{\\mathbf{z}}^{(1)},b,d)$ . ", "page_idx": 16}, {"type": "text", "text": "A.1.3 PGLDM: Stage 2 derivation ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "dynamics of $\\mathbf{r}$ via the latent state $\\mathbf{x}_{k}^{(2)}$ : $\\begin{array}{r l}{([A_{21}}&{{}A_{22}]\\,,C_{\\mathbf{r}}^{(2)})}\\end{array}$ . To learn these parameters, we first extract the private component in equation (19), termed $H_{\\mathbf{r}}^{(2)}$ , by subtracting $\\mathbf{\\Gamma}_{\\mathbf{r}}^{(1)}\\Delta^{(1)}$ from $H_{\\mathrm{r}}$ , ", "page_idx": 16}, {"type": "text", "text": "and decompose it via a singular-value decomposition to get $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(2)}$ and $\\Delta^{(2)}$ as (we omit reference to private latents $\\mathbf{x}^{(3)}$ due to the decoupling) ", "page_idx": 17}, {"type": "equation", "text": "$$\nH_{\\mathbf{r}}^{(2)}=H_{\\mathbf{r}}-\\Gamma_{\\mathbf{r}}^{(1)}\\Delta^{(1)}\\overset{\\mathrm{SVD}}{=}\\Gamma_{\\mathbf{r}}^{(2)}\\Delta^{(2)}.\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "At this point, we take $C_{\\mathbf{r}}^{(2)}$ as the top $n_{r}$ rows of $\\mathbf{\\boldsymbol{\\Gamma}}_{\\mathbf{r}}^{(2)}$ and concatentate with $C_{\\mathbf{r}}^{(1)}$ to complete $C_{\\mathbf{r}}$ . To complete the state dynamics matrix $\\pmb{A}$ , we refer back to the block-structure representation of the controllability matrix in equation (16) ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\left[\\pmb{\\Delta}^{(1)}\\right]=\\left[\\left[\\pmb{A}_{11}\\begin{array}{c c}{\\ \\ \\ \\ \\mathbf{0}}\\\\ {\\ \\ A_{22}}\\end{array}\\right]A^{i-2}G\\ \\ \\cdot\\cdot\\cdot\\ \\ \\left[\\pmb{A}_{21}\\begin{array}{c c}{\\ \\ \\ \\mathbf{0}}\\\\ {\\ \\ A_{22}}\\end{array}\\right]\\left[\\pmb{G}^{(1)}\\right]\\ \\ \\left[\\pmb{G}^{(1)}\\right]\\right]\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "from which we construct the following relationship ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\left[\\underline{{\\Delta}}^{(1)}\\right]=\\left[\\begin{array}{c c}{\\mathbf{A}_{11}}&{\\mathbf{0}}\\\\ {\\mathbf{A}_{21}}&{A_{22}}\\end{array}\\right]\\left[\\overline{{\\Delta}}^{(1)}\\right]\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\overline{{\\Delta}}$ and $\\underline{{\\mathbf{\\deltaA}}}$ are defined as in equation (18). We can further isolate the residual state transitions as the solution to the following equation (taken from the second row of equation (23)) ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\underline{{\\pmb{\\Delta}}}^{(2)}=[\\mathbf{A}_{21}\\quad\\mathbf{A}_{22}]\\left[\\overline{{\\pmb{\\Delta}}}^{(1)}\\right]=[\\mathbf{A}_{21}\\quad\\mathbf{A}_{22}]\\,\\overline{{\\pmb{\\Delta}}},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "which has the following closed-form least-squares solution: $\\begin{array}{r l}{\\left[A_{21}\\right.}&{{}A_{22}\\right]=\\underline{{\\Delta}}^{(2)}\\overline{{\\Delta}}^{\\dagger}}\\end{array}$ . The full state dynamics is the concatenation $A={\\binom{A_{11}}{A_{21}}}\\quad0\\quad$ . This concludes the learning of parameters for the private dynamics in $\\mathbf{r}$ , i.e., $\\begin{array}{r l}{([A_{21}}&{{}A_{22}]\\,,C_{\\mathbf{r}}^{(2)})}\\end{array}$ . ", "page_idx": 17}, {"type": "text", "text": "A.1.4 PGLDM: Stage 3 derivation ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Finally, in the third state we can learn the model parameters associated with the private dynamics in $\\mathbf{z}$ , that is $(A_{33},C_{\\bf z}^{(3)})$ , in an approach similar to stage 2. We first construct a future-past Hankel matrix, $H_{\\mathbf{z}}$ , associated with the secondary observation $\\mathbf{z}$ . Using an analysis similar to equations (19) and (21), we can show that $H_{\\mathbf{z}}$ as the sum of \u201cshared\" and \u201cprivate\" components. In the case of secondary observation $\\mathbf{z}$ , we can explicitly show that its observability matrix, $\\Gamma_{\\mathbf{z}}$ , assumes a block form as ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{Gamma}_{\\mathbf{z}}=\\left[\\begin{array}{c}{C_{\\mathbf{z}}}\\\\ {C_{\\mathbf{z}}A}\\\\ {\\vdots}\\\\ {C_{\\mathbf{z}}A^{i-1}}\\end{array}\\right]\\stackrel{(a)}{=}\\left[\\begin{array}{c c c c}{C_{\\mathbf{z}}^{(1)}}&{\\mathbf{0}}&{C_{\\mathbf{z}}^{(3)}}\\\\ {C_{\\mathbf{z}}^{(1)}A_{11}}&{\\mathbf{0}}&{C_{\\mathbf{z}}^{(3)}A_{33}}\\\\ {\\vdots}\\\\ {C_{\\mathbf{z}}^{(1)}A_{11}^{i-1}}&{\\mathbf{0}}&{C_{\\mathbf{z}}^{(3)}A_{33}^{i-1}}\\end{array}\\right]=\\left[\\mathbf{Gamma}_{\\mathbf{z}}^{(1)}\\quad\\mathbf{0}\\quad\\mathbf{\\Gamma}_{\\mathbf{z}}^{(3)}\\right],}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where equivalence (a) is due to the block-partition definitions of $C_{\\mathbf{z}}$ and $\\pmb{A}$ in equation (13). Henceforth, we omit the middle block of $\\mathbf{\\Gamma}_{\\mathbf{T}_{\\mathbf{z}}}$ , without any loss of generality, and simplify $H_{\\mathbf{z}}$ as ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{H_{\\mathbf{z}}=\\mathbf{U}\\boldsymbol{\\Sigma}\\mathbf{V}^{T}}&{=(\\mathbf{U}\\boldsymbol{\\Sigma}^{1/2})(\\boldsymbol{\\Sigma}^{1/2}\\mathbf{V}^{T})=\\left(\\mathbf{U}\\boldsymbol{\\Sigma}^{1/2}\\right)(\\boldsymbol{\\Sigma}^{1/2}\\mathbf{V}^{T})}\\\\ &{\\overset{(a)}{=}\\Bigg([\\mathbf{U}^{(1)}\\quad\\quad\\mathbf{U}^{(3)}]\\left[\\begin{array}{c c}{\\mathbf{\\Sigma}^{(1)/2}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\boldsymbol{\\Sigma}^{(3)^{1/2}}}\\end{array}\\right]\\Bigg(\\bigg[\\boldsymbol{\\Sigma}^{(1)^{1/2}}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\boldsymbol{\\Sigma}^{(3)^{1/2}}}\\end{array}\\bigg]\\Bigg[\\mathbf{V}^{(1)^{T}}\\Bigg]\\Bigg)\\left(\\mathbf{U}^{(3)^{1/2}}\\right)}\\\\ &{=\\big(\\mathbf{U}^{(1)}\\boldsymbol{\\Sigma}^{(1)^{1/2}}\\big)(\\boldsymbol{\\Sigma}^{(1)^{1/2}}\\mathbf{V}^{(1)^{T}})+(\\mathbf{U}^{(3)}\\boldsymbol{\\Sigma}^{(3)^{1/2}})(\\boldsymbol{\\Sigma}^{(3)^{1/2}}\\mathbf{V}^{(3)^{T}})}\\\\ &{\\overset{(b)}{=}\\mathbf{T}_{\\Sigma}^{(1)}\\boldsymbol{\\Delta}_{\\Sigma}^{(1)}+\\mathbf{T}_{\\Sigma}^{(3)}\\boldsymbol{\\Delta}_{\\Sigma}^{(3)}}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where equivalence (a) used the block structure of $\\Gamma_{\\mathbf{z}}$ and equivalence (b) implicitly introduced a block structure on the controllability matrix associated with observation ${\\bf z}$ . In stage 1 we had learned ", "page_idx": 17}, {"type": "text", "text": "$\\mathbf{T}_{\\mathbf{z}}^{(1)}$ , thus we can use an approach similar to equations (21)-(22) to extract the private component of $H_{\\mathbf{z}}$ . We first compute $\\Delta_{\\mathbf{z}}^{(1)}$ , the $\\mathbf{z}$ controllabilty matrix associated with the shared dynamics, as ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\Gamma_{\\bf z}^{(1)\\dagger}H_{\\bf z}=\\Gamma_{\\bf z}^{(1)\\dagger}(\\Gamma_{\\bf z}^{(1)}\\Delta_{\\bf z}^{(1)}+\\Gamma_{\\bf z}^{(3)}\\Delta_{\\bf z}^{(3)})=\\Delta_{\\bf z}^{(1)}.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Then we can extract and decompose the private component of the Hankel matrix ", "page_idx": 18}, {"type": "equation", "text": "$$\nH_{\\mathbf{z}}^{(3)}=H_{\\mathbf{z}}-\\Gamma_{\\mathbf{z}}^{(1)}\\Delta_{\\mathbf{z}}^{(1)}\\bar{\\mathbf{\\Xi}}_{=}^{\\mathsf{S V D}}\\Gamma_{\\mathbf{z}}^{(3)}\\Delta_{\\mathbf{z}}^{(3)}.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "As in the previous stages, $C_{\\mathbf{z}}^{(3)}$ is taken as the top $n_{z}$ rows of $\\mathbf{{T}}_{\\mathbf{z}}^{(3)}$ , thus completing $C_{\\mathbf{z}}$ . To learn $\\boldsymbol{A}_{33}$ we use the same approach as standard covariance-based SSID (section 2.1) and solve the problem \u0393(z3) $\\mathbf{\\overline{{T}}}_{\\mathbf{z}}^{(3)}\\,=\\,\\underline{{\\mathbf{T}}}_{\\mathbf{z}}^{(3)}A_{33}$ , where $\\overline{{\\Gamma}}_{\\bf z}$ and $\\underline{{\\mathbf{\\delta\\Gamma}}}_{\\mathbf{z}}$ denote $\\Gamma_{\\mathbf{z}}$ from which the top or bottom $n_{z}$ rows have been removed, respectively. This optimization problem has the closed-form least-squares solution ${A}_{33}=\\underline{{\\Gamma}}_{\\mathbf{z}}^{\\dagger}\\overline{{\\Gamma}}_{\\mathbf{z}}$ . This concludes the learning of parameters for the private dynamics in $\\mathbf{z}$ , i.e., $(A_{33},C_{\\bf z}^{(3)})$ . ", "page_idx": 18}, {"type": "text", "text": "A.1.5 Transformation of joint Gaussian and Poisson moments ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "In sections A.1.1-A.1.4 we demonstrated how all model parameters can be extracted in three stages with prioritization, starting from the second-moments of the $\\mathbf{r}$ and $\\mathbf{z}$ . As an example of how these moments can be computed from generalized-linear observations, we consider the specific case of Poisson/Gaussian observations as $\\mathbf{y}$ and $\\mathbf{z}$ , respectively. The joint second-moment $\\mathbf{A}_{\\mathbf{z}_{f m}\\mathbf{r}_{p n}}$ can be analytically recovered from the computable moments of $\\mathbf{y}$ (the Poisson observations) and $\\mathbf{z}$ (the Gaussian observations), using equation (11) as ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\Lambda_{\\mathbf{z}_{f_{m}}\\mathbf{r}_{p_{n}}}=\\operatorname{Cov}(\\mathbf{z}_{f_{m}},\\mathbf{y}_{p_{n}})\\,/\\,\\mu_{\\mathbf{y}_{p_{n}}}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $m$ and $n$ indicate index-wise notation. Here we provide a sketch of the proof. Without loss of generality, assume $\\mathbf{z}$ and $\\mathbf{r}$ are stationary with a mean of 0 (e.g., demeaned during preprocessing). We can compute the covariance of any two elements $j$ and $k$ of vectors $\\mathbf{z}_{f}$ and ${\\bf y}_{p}$ respectively as ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\mathrm{Cov}(\\mathbf{z}_{f_{j}},\\mathbf{y}_{p_{k}})}&{=E\\left[\\mathbf{z}_{f_{j}}\\mathbf{y}_{p_{k}}\\right]=E\\left[E\\left[\\mathbf{z}_{f_{j}}\\mathbf{y}_{p_{k}}|\\mathbf{r}_{p_{k}}\\right]\\right]}\\\\ &{\\stackrel{(a)}{=}E\\left[E\\left[\\mathbf{z}_{f_{j}}|\\mathbf{r}_{p_{k}}\\right]\\,E\\left[\\mathbf{y}_{f_{k}}|\\mathbf{r}_{p_{k}}\\right]\\right]=E\\left[E\\left[\\mathbf{z}_{f_{j}}|\\mathbf{r}_{p_{k}}\\right]\\,\\exp(\\mathbf{r}_{p_{k}})\\right]}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where (a) is because $\\mathbf{z}_{f_{j}}$ and $\\mathbf{y}_{p_{k}}$ are independent when conditioned on latent log-rate $\\mathbf{r}_{p_{k}}$ . Next, we use the fact that $\\mathbf{z}_{f}$ and $\\mathbf{r}_{p}$ are jointly Gaussian random processes and, as a result, the mean of the conditional distribution, E[zfj|rpk], is equal to \u039bzfj rpk \u039br\u2212p1kk r (i.e., the linear least-square estimate of $\\mathbf{z}_{f_{j}}$ using $\\mathbf{r}_{p_{k}}$ ). The last step is to compute the expectation ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{E\\left[\\Lambda_{\\mathbf{z}_{f_{j}}\\mathbf{r}_{p_{k}}}\\Lambda_{\\mathbf{r}_{p_{k}k}}^{-1}\\mathbf{r}_{p_{k}}\\exp(\\mathbf{r}_{p_{k}})\\right]=\\Lambda_{\\mathbf{z}_{f_{j}}\\mathbf{r}_{p_{k}}}\\mu_{\\mathbf{y}_{p_{k}}}=\\mathrm{Cov}(\\mathbf{z}_{f_{j}},\\mathbf{y}_{p_{k}})}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "which, after rearranging terms, yields ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\Lambda_{\\mathbf{z}_{f_{m}}\\mathbf{r}_{p_{n}}}=\\mathrm{Cov}(\\mathbf{z}_{f_{m}},\\mathbf{y}_{p_{n}})\\,/\\,\\mu_{\\mathbf{y}_{p_{n}}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We note that the final equation is equivalent to a derivation provided by Buesing et al. [21] as their supplementary equation (6) to compute cross-covariances between Poisson observations and Gaussian inputs, instead of between joint Poisson and Gaussian observations (as was in our case). The remaining unimodal (i.e., Poisson-only) moment conversions that are required to compute $H_{\\mathrm{r}}$ are performed per equation (5) in section 2.2. For Bernoulli-Gaussian moment conversion equations, we refer the reader to section 3.3 equations (5) and (6) in Stone et al. [24]. ", "page_idx": 18}, {"type": "text", "text": "A.1.6 Generalized cross-term Hankel matrix with different horizons per observation ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "For ease of exposition, the derivation in section A.1.2 was provided for a cross-term Hankel matrix $H_{\\mathrm{zr}}$ that was formed with equal horizons for $\\mathbf{z}$ and $\\mathbf{r}$ as ", "page_idx": 18}, {"type": "equation", "text": "$$\nH_{\\mathbf{z}\\mathbf{r}}:=\\mathrm{Cov}(\\mathbf{z}_{f},\\mathbf{r}_{p})=\\left[\\begin{array}{c c c c}{\\mathbf{A_{zr_{i}}}}&{\\mathbf{A_{zr_{i}-1}}}&{\\cdot\\cdot\\cdot}&{\\mathbf{A_{zr_{1}}}}\\\\ {\\mathbf{A_{zr_{i}+1}}}&{\\mathbf{A_{zr_{i}}}}&{\\cdot\\cdot\\cdot}&{\\mathbf{A_{zr_{2}}}}\\\\ {\\vdots}&{\\vdots}&{\\cdot\\cdot}&{\\vdots}\\\\ {\\mathbf{A_{zr_{2i-1}}}}&{\\mathbf{A_{zr_{2i-2}}}}&{\\cdot\\cdot\\cdot}&{\\mathbf{A_{zr_{i}}}}\\end{array}\\right],\\ \\ \\mathbf{z}_{f}:=\\left[\\begin{array}{c}{\\mathbf{z}_{i}}\\\\ {\\vdots}\\\\ {\\mathbf{z}_{j+1}}\\\\ {\\mathbf{z}_{2i-1}}\\end{array}\\right],\\mathbf{r}_{p}:=\\left[\\begin{array}{c}{\\mathbf{r_{0}}}\\\\ {\\vdots}\\\\ {\\mathbf{r}_{i-1}}\\end{array}\\right].\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "In general, the rank of Hankel matrices formed from ideal data covariances can be shown to be the same as the state dimension associated with it [19, 20], i.e., $n_{1}=\\mathrm{rank}(H_{\\mathrm{zr}})$ per equation (17) and $n_{\\mathrm{1}}+n_{\\mathrm{2}}=\\mathrm{rank}(H_{\\mathrm{r}})$ per equation (15). However, during system identification these Hankel matrices are formed from non-ideal empirical sample covariances and, as a result, are typically full rank. Nevertheless, we expect the singular values associated with real dynamics (e.g., the first $n_{1}$ singular values in $H_{\\mathrm{zr}}$ ) to be larger than subsequent singular values that are due to noise. Indeed, the goal of the SVD applied to Hankel matrices, e.g., in equations (15), (17), and (22), is to remove noisy singular values and only keep the largest singular values that are most likely due to real dynamics. ", "page_idx": 19}, {"type": "text", "text": "Given that the Hankel matrices formed during system identification are typically full rank, their rank is determined based on their dimensions, i.e., $\\mathrm{rank}(H_{\\mathbf{zr}})=\\operatorname*{min}(i\\times n_{r},i\\times n_{z})$ and rank $\\mathbf{\\nabla}(H_{\\mathbf{r}})=i\\times n_{r}$ . Thus, the horizon parameter $i$ that is used to form the Hankel matrix plays an important role in its final dimensions, rank, and, consequently, on the maximum number of non-zero singular values that can be preserved after applying SVD. This, in turn, determines the maximum state dimension that can be learned for the resulting model. Thus, to provide more flexibility over the state dimensions that can be learned in each stage of PGLDM, we generalize the Hankel matrix $H_{\\mathrm{zr}}$ to support different horizon values for each of the observations, $i_{z}$ and $i_{r}$ , such that ", "page_idx": 19}, {"type": "equation", "text": "$$\nH_{\\mathbf{zr}}={\\left[\\begin{array}{l l l l}{\\Lambda_{\\mathbf{zr}_{i_{z}}}}&{\\Lambda_{\\mathbf{zr}_{i_{z}}-1}}&{\\cdot\\cdot\\cdot}&{\\Lambda_{\\mathbf{zr}_{i_{z}}-i_{r}+1}}\\\\ {\\Lambda_{\\mathbf{zr}_{i_{z}}+1}}&{\\Lambda_{\\mathbf{zr}_{i_{z}}}}&{\\cdot\\cdot}&{\\Lambda_{\\mathbf{zr}_{i_{z}}-i_{r}+2}}\\\\ {\\vdots}&{\\vdots}&{\\cdot\\cdot}&{\\vdots}\\\\ {\\Lambda_{\\mathbf{zr}_{2i_{z}}-1}}&{\\Lambda_{\\mathbf{zr}_{2i_{z}}-2}}&{\\cdot\\cdot}&{\\Lambda_{\\mathbf{zr}_{2i_{z}}-i_{r}}}\\end{array}\\right]}{\\mathrm{~with~}}\\ \\ \\mathbf{z}_{f}:={\\left[\\begin{array}{l}{\\mathbf{z}_{i_{z}}}\\\\ {\\vdots}\\\\ {\\mathbf{z}_{2i_{z}-1}}\\end{array}\\right]}\\,,\\mathbf{r}_{p}:={\\left[\\begin{array}{l}{\\mathbf{r}_{0}}\\\\ {\\vdots}\\\\ {\\mathbf{r}_{i_{r}-1}}\\end{array}\\right]}\\,.\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "The observation horizon $i_{r}$ is also used when forming the Hankel matrix $H_{\\mathrm{r}}$ , per equation (14). The additional flexibility gained from having different horizon values can be especially critical in scenarios wherein the dimensionalities of ${\\bf z}$ and $\\mathbf{r}$ are very different, such as in the case of our NHP analysis in section 4.2, where $n_{z}=4$ and $n_{r}=15$ . We select the final horizons $i_{z}$ and $i_{r}$ via an inner cross-validation based on which values achieve the best decoding accuracy in the training data. ", "page_idx": 19}, {"type": "text", "text": "A.2 Assumptions and generalizability of the block structure formulation ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Here we explain the assumptions underlying the proposed block formulation of $\\pmb{A}$ , as defined in equation (7), and discuss the model\u2019s generalizability. First, we assume that the private latents of y (i.e., $\\mathbf{x}^{(2)}$ ) and of $\\mathbf{t}$ (i.e., $\\mathbf{x}^{(3)}$ ) do not drive the shared latents (i.e., $\\mathbf{x}^{(1)}$ ) so as not to leak private dynamics into shared dynamics. Thus, we take $\\mathbf{A}_{12}=\\mathbf{0}$ and $\\mathbf{{A}_{13}}=\\mathbf{{0}}$ . Second, we assume that the private dynamical latents of the two signals (i.e., $\\mathbf{x}^{(2)}$ and $\\mathbf{x}^{(3)}$ ) do not drive each other, and so we take $A_{23}=\\mathbf{0}$ and $A_{32}=\\mathbf{0}$ . Finally, the asymmetrical decision to set $A_{21}\\neq\\mathbf{0}$ and $A_{31}=\\mathbf{0}$ was dictated by the asymmetrical roles played by the primary (i.e., y) and secondary (i.e., t) time-series in our formulation. We initially made the assumption that $A_{31}=\\mathbf{0}$ to simplify the derivation of our method because it allowed the optional third stage (i.e., extraction of the dynamics private to t) to operate independently of the first stage (i.e., extraction of the shared dynamics). However, this assumption was still in line with our notion of shared and private dynamics; if $A_{31}\\neq\\mathbf{0}$ , then the primary time-series (y) would be informative (i.e., predictive) of the private dynamics in the secondary time-series (t) through the influence of the shared dynamics $\\mathbf{x}^{(1)}$ on future $\\mathbf{x}^{(3)}$ . ", "page_idx": 19}, {"type": "text", "text": "Although $A_{\\mathrm{21}}$ fundamentally has a similar information leakage impact in the reverse direction, we chose to keep the more general form of $A_{21}\\neq\\mathbf{0}$ . Unlike the ${A}_{31}$ case, a non-zero $A_{21}$ does not couple the multi-stage learning. This is because we designate a primary time-series in our formulation (taken as y here) that acts as a predictor for the secondary time-series (taken as $\\mathbf{t}$ here). Given this designation, we exclusively calculate all Hankel matrices using the primary/predictor time-series as the past observations. Specifically, we only compute $\\Lambda_{\\mathbf{zr}_{\\tau}}=\\mathrm{Cov}(\\mathbf{z}_{k+\\tau},\\mathbf{r}_{k})$ (equation (8)) and not $\\bar{\\mathbf{\\Lambda}}_{\\mathbf{r}\\mathbf{z}_{\\tau}}=\\mathrm{Cov}(\\mathbf{r}_{k+\\tau},\\mathbf{z}_{k})$ . From a derivation perspective, this means that $A_{\\mathrm{21}}$ only appears in stage 2 and not in stage 1, thereby never coupling the learning of private and shared dynamics. However, we clarify that if the user requires a strictly symmetrical definition of $\\pmb{A}$ wherein all latent states are fully decoupled from each other (i.e., a block-diagonal structure), our algorithm can, with a minimal modification to stage 2, cover the case where $A_{21}=\\mathbf{0}$ . To learn a block diagonal $\\pmb{A}$ , one would only need to compute the solution to $\\pmb{\\Delta}^{(2)}=\\pmb{A}_{22}\\pmb{\\overline{{\\Delta}}}^{(2)}$ instead of the original formulation $\\underline{{\\Delta}}^{(2)}=[\\stackrel{\\cdot}{A}_{21}\\quad\\mathbf{{4}}_{22}]\\,\\overline{{\\Delta}}^{(1,2)}$ (see section 3.2.2 and equation (24)). ", "page_idx": 19}, {"type": "text", "text": "Finally, taking $A_{21}\\neq\\mathbf{0}$ also has particular significance in the case when there are no private latents associated with $\\mathbf{t}$ , that is when $n_{3}=0$ . In this case, taking $A_{\\mathrm{21}}$ non-zero allows the block-structured state-space form defined in equations (6) and (7) to be assumed without any loss of generality. Specifically, when $n_{3}=0$ , the latent states in our model describe the primary time-series y with a subset also explaining the secondary time-series $\\mathbf{t}$ . Formally, we define the true dimensionality of the shared states (denoted by $n_{1}$ ) based on the rank of the observability matrix for the pair $(A,C_{\\mathbf{z}})$ . It can be shown using linear systems theory that an invertible linear transformation of the latent states (i.e., a similarity transformation) always exists that can place the $n_{1}$ dimensional latent subspace that is observable via $\\mathbf{t}$ as the first few dimensions of the latent space, thus giving the block-structured formulation of equation (7). This can be seen by applying Theorem 3.8 from Subspace Methods for System Identification [20] to the first two lines of equation (6). As a result, the blocked formulation of equation (7) is equivalent to the formulation from (6) and we can aim to learn our model in the form of equation (7) without any loss of generality. Thus, our choice to keep $A_{21}\\neq\\mathbf{0}$ was also in part motivated by a desire to maintain a more general state-space form for the case when $n_{3}=0$ . ", "page_idx": 20}, {"type": "text", "text": "A.3 Noise statistics ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Standard SSID algorithms (e.g., section 2.1) learn linear state-space models of the following form ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l c l}{\\mathbf{x}_{k+1}}&{=}&{\\mathbf{A}\\mathbf{x}_{k}+\\mathbf{w}_{k}}\\\\ {\\mathbf{r}_{k}}&{=}&{C_{\\mathbf{r}}\\mathbf{x}_{k}+\\mathbf{v}_{k}}\\end{array}\\right.\\quad,\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where state noise, $\\mathbf{w}_{k}$ , and observation noise, $\\mathbf{v}_{k}$ , are typically additive Gaussian noise and may have a non-zero instantaneous cross-covariance $S=\\mathrm{Cov}\\big(\\mathbf{w}_{k},\\mathbf{v}_{k}\\big)$ . SSID in general does not assume any restrictions on the noise statistics. However, the Poisson observation model (equations (4) and (6)) has no additive Gaussian noise for $\\mathbf{r}_{k}$ and instead exhibits Poisson noise in $\\mathbf{y}_{k}$ when conditioned on $\\mathbf{r}_{k}$ . This means that $\\mathbf{v}_{k}=\\mathbf{0}$ in equation (6), and thus $\\scriptstyle R\\;=\\;{\\bf0}$ and $S=\\mathbf{0}$ . Imposing these constraints is important for accurate parameter identification for Poisson observations, but was not previously addressed by Buesing et al. [21]. Thus, we require our algorithm to find a complete parameter set $\\Theta^{\\prime}$ that is close to the learned $(A,C_{\\mathbf{r}},C_{\\mathbf{z}},b)$ by PGLDM and imposes the noise statistic constraints $\\scriptstyle R\\;=\\;{\\bf0}$ and $S=\\mathbf{0}$ . To do this, inspired by Ahmadipour et al. [22], we form and solve the following convex optimization problem to satisfy the noise statistics requirements ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\underset{\\Lambda_{\\mathbf{x}}}{\\mathrm{minimize}}\\quad\\|S(\\Lambda_{\\mathbf{x}})\\|_{F}^{2}+\\|R(\\Lambda_{\\mathbf{x}})\\|_{F}^{2}}\\\\ &{\\mathrm{such~that}\\,\\Lambda_{\\mathbf{x}}\\succeq0,\\:Q(\\Lambda_{\\mathbf{x}})\\succeq0,\\:R(\\Lambda_{\\mathbf{x}})\\succeq0}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $\\mathbf{A}_{\\mathbf{x}}:=\\mathrm{Cov}(\\mathbf{x}_{k},\\mathbf{x}_{k})$ denotes the latent state covariance. Further, we enforce the following covariance relationships, derived from equation (1) [19], as constraints ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l l l l l}{Q(\\Lambda_{\\mathbf{x}})}&{=}&{\\mathbf{\\Lambda}_{\\mathbf{x}}}&{-}&{A\\Lambda_{\\mathbf{x}}A^{T}}\\\\ {R(\\Lambda_{\\mathbf{x}})}&{=}&{\\mathbf{\\Lambda}_{\\mathbf{r}_{0}}}&{-}&{C_{\\mathbf{r}}\\Lambda_{\\mathbf{x}}C_{\\mathbf{r}}^{T}}\\\\ {S(\\Lambda_{\\mathbf{x}})}&{=}&{G}&{-}&{A\\Lambda_{\\mathbf{x}}C_{\\mathbf{r}}^{T}}\\end{array}\\right..\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "This approach has multiple benefits. First, it finds noise statistics that are consistent with the assumptions of the model (e.g., $\\scriptstyle R\\;=\\;{\\bf0}.$ ). Second, it enforces the validity of learned parameters, i.e., parameters corresponding to a valid positive semidefinite covariance sequence (see section 4.4). It also enables state prediction (see appendix A.8.2). Combining the previously found parameters and the matrix $Q$ that corresponds to the minimizing solution $\\Lambda_{\\mathbf{x}}$ of equation (30), we have the full parameter set $\\Theta^{\\prime}=(A,C_{\\mathbf{r}},C_{\\mathbf{z}},b,Q)$ . We used Python\u2019s CVXPY package to solve the semidefinite programming problem defined in equation (30) [39, 40]. For all of our comparisons against PLDSID, we learned the noise statistics associated with the method\u2019s identified parameters using this approach, but keeping the rest of the algorithm the same. ", "page_idx": 20}, {"type": "text", "text": "A.4 GLDM parameter equivalencies ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Here we briefly discuss the equivalence of learnable parameters by SSID for linear dynamical models of the form in equation (1). In section 2.1 we stated that standard covariance-based SSID learned the parameters $\\Theta=(A,C_{\\mathbf{r}},G,\\Lambda_{\\mathbf{r}_{0}})$ , but not any of the noise statistics (e.g., covariances $Q$ and $\\boldsymbol{R}$ ). Indeed, there also exist SSID approaches that instead learn the following parameter set $(A,C_{\\mathbf{r}},Q,R,S)$ [19, 20]. Both sets of parameters are valid and knowledge of either completely defines the model in equation (1). Moreover, the two sets of model parameters can be related to each other using equations (31) [19] \u2013 the same relationships we use as constraints in the convex optimization problem defined in appendix A.3 for learning the noise statistics of the PLDS model (4). ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "A.5 Possibility of learning unstable modes in small data regimes ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Subspace identification methods generally only converge to the correct system parameters asymptotically (see figure 4 in appendix A.11), as the empirically estimated covariances also converge to their true values [19]. For finite samples, however, there will always be some error in the learned parameters. Although such errors are generally benign, extreme scenarios can result in unstable state dynamics, i.e., the identified $\\pmb{A}$ has at least one eigenvalue with magnitude larger than 1. We omitted any learned unstable models in our analyses, which was reflected in the reduced number of samples in the standard error of the mean (s.e.m). However, we rarely encountered unstable models; for example, in the results presented in figure 4, there were no unstable models for training set sizes typical of neuroscience datasets (i.e., 1e5 or 1e6 training samples). ", "page_idx": 21}, {"type": "text", "text": "A.6 Possibility of accumulation of error in multi-staged learning ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "There are two aspects of the learning to consider. First, there is a signal-to-noise (SNR) consideration that is fundamental to learning methods in general. In stage 1, our method requires high SNR in the cross-correlations between future secondary time-series observations and past primary time-series observations. If most of the signal present in the primary time-series is not attributable to the shared latent states (i.e., the residual Hankel in equation (10) dominates), then most of $H_{\\mathrm{zr}}$ \u2019s singular values will be small and stage 1 may have greater estimation error. If the reverse situation holds and the shared latent states explain most of the signal in the primary time-series, then the residual Hankel, Hr(2)will mostly have small singular values, possibly resulting in estimation errors during stage 2. Inspection of the singular values prior to model parameter extraction can, however, help guide method usage. For example, if the singular values of $H_{\\mathrm{zr}}$ are small, then this may indicate that the two time-series do not have shared dynamics and only stage 2 of the method is needed (i.e., standard GLDM). If the singular values of the residual Hankel are small, then this may indicate that almost all dynamics are shared and only stage 1 is needed. ", "page_idx": 21}, {"type": "text", "text": "A second consideration is a numerical one that could result in an accumulation of errors in downstream stages. If during stage 1 the modes are identified inaccurately because there is minimal shared dynamics between the two time-series and/or the training sample size is too small, then this estimation error could impact the computation of the residual matrix $\\bar{H_{r}^{(2)}}$ thereby introducing error in stage 2. Examining the singular values of $H_{\\mathrm{zr}}$ may, however, also help avoid this situation. Although the multi-stage learning can lead to error accumulation in some situations, it comes with the benefti that our method has the ability to more accurately identify the shared dynamics (when they exist) in stage 1, compared to existing GLDM methods. Moreover, Figures 1b, 2b, and 3b suggest that the impact of error accumulation is not severe and can be situation-dependent; for example, self-prediction performance of PGLDM reaches that of PLDSID in 1b, reaches very close to it in 2b, and exceeds it in 3b. ", "page_idx": 21}, {"type": "text", "text": "A.7 Experimental details ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Below we provide details on how simulations were generated and about our real data analyses. ", "page_idx": 21}, {"type": "text", "text": "A.7.1 Simulations ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "For our synthetic data in section 4.1, we simulated generalized-linear observations from random models as per equation (6). For the simulations used to generate the results in Table 1, we fixed the number of shared and private latent states as $n_{1}=2,n_{2}=6$ , and $n_{3}=4$ . We randomly selected the observation dimensions with uniform probability from the following ranges: $10\\,\\leq\\,n_{r}\\,\\leq\\,15$ and either $5\\le n_{z}\\le10$ , when the secondary observation was Gaussian, or $10\\leq n_{z}\\leq15$ , when Poisson. For the simulations used to generate figure 2, we fixed the latent dimensions as $n_{1}=$ $4,n_{2}=12$ , and $n_{3}=4$ and randomly sampled observation dimensions with uniform probability from: $20\\leq n_{r}\\leq30$ and $5\\le n_{z}\\le10$ . Across all simulations we used these dimensions to generate random model parameters $\\Theta=(A,C_{\\bf r},C_{\\bf z},b,d,Q)$ . We constrained the complex eigenvalues (i.e., modes) of the state transition matrix A to have magnitudes uniformly distributed between [0.93, 0.99] and phases uniformly distributed between [0.019, 0.314]. These restrictions correspond to stable, slow-decaying systems with time-constants within [0.138, 0.995] seconds and frequencies within [0.3, 5] Hz that are representative of various real time-series data, such as neural dynamics [41, 42]. ", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 22}, {"type": "text", "text": "For all Gaussian simulations we set the time-series mean (e.g., $^{b}$ or $\\pmb{d}$ ) to 0. Additive Gaussian noise covariances (e.g., $Q$ ) were randomly generated to be positive definite matrices. For observation timeseries, the observation matrix $_{C}$ was generated to hit a target signal-to-noise, defined as the variance associated with latent states normalized by observation noise variance (e.g., $(C_{\\mathbf{z}}\\Lambda_{\\mathbf{x}}C_{\\mathbf{z}}^{T})/(\\Lambda_{\\epsilon}))$ . Target SNR values were fixed at 10 for the simulations used in Table 1 or were randomly generated as $10^{\\alpha}$ with $\\alpha$ uniformly distributed between $[0,2]$ for the simulations in figure 1. All Poisson simulations were generated on a $10\\,\\mathrm{ms}$ timescale with a baseline log rate (e.g., $b$ ) randomly selected within [0.5, 15] $\\mathrm{Hz}$ . Observation matrix $_{C}$ was scaled to achieve a desired per-dimension 95th percentile modulation depth of 10, where modulation depth is defined as $\\exp(C\\mathbf{x}_{k})$ . All Bernoulli observations were also generated on a $10\\mathrm{ms}$ timescale with a baseline set to 0. In this scenario, the observation matrix $_{C}$ was scaled such that the corresponding Gaussian latent defined by $C{\\bf x}_{k}$ would have a standard deviation approximately equal to 1. ", "page_idx": 22}, {"type": "text", "text": "To simulate a state noise covariance $Q$ that adhered to the block-structure assumption defined in assumption 3.2, we leveraged the fact that latent $\\mathbf{x}^{(3)}$ is completely decoupled from latents $\\mathbf{x}^{(1)}$ and $\\mathbf{x}^{(2)}$ in our model definition (as per equations (7) and (13), and assumptions 3.2 and 3.3). We chose to simulate the dynamics private to the secondary observation time-series as a separate 4-dimensional latent dynamical model. Specifically, we chose to generate one dynamical model corresponding to the latents $\\mathbf{x}^{(1)}$ and $\\mathbf{x}^{(2)}$ , and a separate dynamical model corresponding to $\\mathbf{x}^{(3)}$ . This approach, however, only works for Gaussian secondary observations. For the Poisson-Poisson case we instead generated an unconstrained $Q$ . Despite this deviation from assumption 3.2, our method\u2019s ability to identify the shared dynamical modes was not impacted, as shown by the results in Table 1. ", "page_idx": 22}, {"type": "text", "text": "Finally, for all simulation experiments we use horizon values of 10 for both observations by default. For the simulations used in Table 1 we generated 25600 training samples, and for the simulations used in figure 1 we generated 2e6 samples, splitting 50/50 into training and test data. ", "page_idx": 22}, {"type": "text", "text": "A.7.2 NHP Dataset 1: motor cortex recordings during reaching ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "All NHP analyses in figure 2 were performed on a public dataset released by the Sabes lab [17], using the following sessions from monkey I: 20160915/01, 20160916/01, 20160921/01, 20160927/04, 20160927/06, 20160930/02. We performed cross-validation using randomly-selected, non-overlapping subsets of 15 channels $(n_{r}=15)$ ) binned at $50\\mathrm{ms}$ resolution within each session. We used a nested inner cross-validation to select hyperparameters per fold based on the prediction CC of kinematics in the training data. Hyperparameters in this context were discrete horizon $i_{\\mathbf{r}}$ , continuous horizon $i_{\\mathbf{z}}$ , and time lag, which specifies how much the neural time-series should be lagged to time-align with the corresponding behavioral time-series [33, 43, 44]. We swept $i_{\\mathbf{r}}$ values of 5 and 10 time bins, $i_{\\mathbf{z}}$ values of 10, 20, 22, 25, 28, and 30 time bins; and lag values of 0, 2, 5, 8, and 10 time bins. We removed channels that had average firing rates less than $0.5\\:\\mathrm{Hz}$ or greater than $100\\,\\mathrm{Hz}$ . Similar to Lawlor et al. [45], we also removed channels that were correlated with other channels using a correlation coefficient threshold of 0.4. ", "page_idx": 22}, {"type": "text", "text": "A.7.3 NHP Dataset 2: visual areas V1-V2 during stimulation ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "All NHP analyses in figure 3 were performed on a public dataset released by Zandvakili and Kohn [16, 18], using a randomly selected session 107l002p67. In the released dataset, each recording session consisted of repetitions of 1.28s of stimulus presentation (1 of 8 possible orientation gratings) followed by 1.5s of a blank screen. For our analysis, we only considered neural activity during periods of stimulation binned at $20\\mathrm{ms}$ resolution. Further, we performed five-fold cross-validated modeling within each stimulation condition. For both observation time-series, we removed channels that had average firing rates less than $0.5\\,\\mathrm{Hz}$ or greater than $100\\,\\mathrm{Hz}$ . Because there were more V1 units than V2 units, we performed cross-validation using randomly-selected, non-overlapping subsets of V1 units equal to the number of available V2 units, that is $n_{\\mathbf{r}}=n_{\\mathbf{z}}=|\\mathbf{V}2$ units|. We present averaged results across folds, stimulation conditions, and non-overlapping subsets, which we collectively refer to as \u201ctrials\" for a total of 120 trials. No hyperparameter optimization was performed for this analysis; discrete horizons for SSID-based methods were set to a fixed value of $i_{\\mathbf{r}}=i_{\\mathbf{z}}=5$ . ", "page_idx": 22}, {"type": "text", "text": "A.8 Model evaluation ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We evaluated learning using two different metrics: (1) shared dynamical mode identification for models with the true shared latent state dimensionality and (2) predictive power of inferred latent states. ", "page_idx": 23}, {"type": "text", "text": "A.8.1 Shared dynamical mode identification accuracy ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "To evaluate the learning of shared dynamics, we computed the normalized eigenvalue error as $\\left|\\right|\\Psi_{\\mathrm{true}}-\\Psi_{\\mathrm{id}}\\right|\\left|_{2}/\\left|\\right|\\Psi_{\\mathrm{true}}\\right|\\ \\overline{{\\left|_{2}\\right|}}$ , where $\\Psi_{\\mathrm{true}}$ and $\\Psi_{\\mathrm{id}}$ denote vectors containing the true (i.e., the eigenvalues of $A_{11}$ ) and learned shared eigenvalues, respectively, and $\\|\\cdot\\|_{2}$ denotes the Euclidean L2-norm. To compute the first metric for our baselines that did not explicitly model shared dynamics, we needed to select the $n_{1}$ modes identified from the primary time-series only that were the most representative of the secondary time-series. To do so, we first trained our baselines on the primary time-series observations and extracted the latent states. Then, we sorted these learned latent states based on their accuracy in predicting the secondary observations (appendix A.8.2). We computed the eigenvalues associated with the top $n_{1}$ most predictive latent states, which we considered as the shared modes identified by our baselines. This was only necessary for configurations where the learned latent dimensionality was greater than the shared dimensionality (i.e., $n_{1}+n_{2}>n_{1}]$ ). For configurations wherein learned $n_{x}$ is smaller than true $n_{1}$ , we substituted missing modes with 0 prior to computing the normalized error. ", "page_idx": 23}, {"type": "text", "text": "A.8.2 Predictive power of inferred latent states ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We also evaluate the predictive power of our learned models in two scenarios: (1) prediction of the secondary observation time-series from the primary time-series, a common use-case in neuroscience [2, 7, 46], and (2) one-step ahead self-prediction of the primary time-series from itself. Using models learned from the training data, we constructed recursive Bayesian filters to estimate the latent states in a test dataset. Because our analyses in figures 1-3 used Poisson observations as the primary time-series, we chose to use a Poisson point-process filter (PPF) [47] for state estimation. (We note that using the PPF for state estimation is only possible if the learned noise statistics are valid, see appendix A.3.) We denote the one-step ahead latent state prediction of $\\mathbf{x}_{k}$ using all samples of $\\mathbf{y}_{k}$ up to time $k-1$ by $\\hat{\\mathbf{x}}_{k|k-1}$ . These state estimates can be used to predict both sets of (latent) observations as either $C_{\\mathbf{z}}\\hat{\\mathbf{x}}_{k|k-1}$ or $C_{\\mathbf{r}}\\hat{\\mathbf{x}}_{k|k-1}$ . ", "page_idx": 23}, {"type": "text", "text": "In order to compare the predictive power of our learned models with those of our baselines (PLDSID and Laplace-EM), it was necessary to learn an observation model (e.g., ${\\bf C_{z}}$ ) for the secondary timeseries. To do so, we first estimate the latent states in the training data using a PPF and then fit a regression model (scikit-learn; statsmodels) from the latent states to the secondary observation [48, 49]. For example, when the secondary observation, $\\mathbf{z}_{k}$ , is a continuous Gaussian time-series, the parameter $C_{\\mathbf{z}}$ was learned using ordinary least-squares such that $C_{\\mathbf{z}}=\\mathbf{Z}\\hat{\\mathbf{X}}^{T}(\\hat{\\mathbf{X}}\\hat{\\mathbf{X}}^{T})^{\\dagger}$ , where columns of $\\mathbf{Z}$ and $\\hat{\\textbf{X}}$ contain $\\mathbf{z}_{k}$ and $\\hat{\\mathbf{x}}_{k|k-1}$ for all training timepoints $k$ . To make all methods more comparable, we use the same approach to refit the secondary observation\u2019s model learned by PGLDM. ", "page_idx": 23}, {"type": "text", "text": "For continuous Gaussian observations, we quantify the decoding performance using correlation coefficient (CC). For discrete Poisson observations we instead evaluate prediction using the area under the receiver operating characteristic curve (AUC). Since all Poisson predictions were made using the recursive Bayesian filter\u2019s estimates of the latent states, our goal was to validate if our model could accurately predict the occurrence of point process events (versus no events) in a given time step when using all past observations of the primary time-series $\\mathbf{y}_{k}$ . For example, in the results shown in figure 2b-c we computed the probability of an event for the $m$ -th dimension of $\\mathbf{y}$ at time $k$ conditioned on all observations $\\mathbf{y}_{1:k-1}$ , as ", "page_idx": 23}, {"type": "equation", "text": "$$\n{\\begin{array}{r l}{P(\\mathbf{y}_{k}^{m}>0|\\mathbf{y}_{1:k-1})}&{=\\sum_{\\mathbf{x}_{k}}p(\\mathbf{y}_{k}^{m}>0\\mid\\mathbf{y}_{1:k-1},\\mathbf{x}_{k})p(\\mathbf{x}_{k}\\mid\\mathbf{y}_{1:k-1})}\\\\ &{{\\overset{(a)}{=}}E_{\\mathbf{x}_{k}\\mid\\mathbf{y}_{1:k-1}}\\left[p(\\mathbf{y}_{k}^{m}>0\\mid\\mathbf{x}_{k})\\right]{\\overset{(b)}{=}}E_{\\mathbf{x}_{k}\\mid\\mathbf{y}_{1:k-1}}\\left[1-\\exp(\\exp(\\mathbf{r}_{k}^{m}))\\mid\\mathbf{x}_{k}\\right]}\\\\ &{{\\overset{(c)}{\\approx}}E_{\\mathbf{x}_{k}\\mid\\mathbf{y}_{1:k-1}}\\left[\\exp(\\mathbf{r}_{k}^{m})\\mid\\mathbf{x}_{k}\\right]{\\overset{(d)}{=}}\\exp\\left({\\widehat{\\mathbf{r}}}_{k}^{m}{\\mid\\mathbf{k}_{-1}+\\frac{1}{2}}\\mathbf{A}_{\\widehat{\\mathbf{r}}_{m m}}\\right)}\\end{array}}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "table", "img_path": "DupvYqqlAG/tmp/c9fc1773ae8b1a3e5108f6c00ed0805b1bcdea3b258792aae6edbdcb4ff4d11a.jpg", "table_caption": ["Table 2: Average learning runtime over 25 fits with 30484 training samples "], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "where in (a) we simplify using $\\mathbf{y}_{k}$ \u2019s conditional independence from the past $\\mathbf{y}_{1:k-1}$ , in (b) we simplify based on $\\mathbf{y}_{k}\\mid\\mathbf{x}_{k}\\sim\\operatorname{Poisson}(\\exp(\\mathbf{r}_{k}))$ , in (c) we use the Taylor series approximation of $\\exp(\\exp({\\exp(\\mathbf{r}_{k})}))$ for small $\\exp({\\mathbf{r}_{k}})$ , and (d) is simply the mean of a log-normal random variable. Note that $\\hat{\\mathbf{r}}_{k}=C_{\\mathbf{r}}\\hat{\\mathbf{x}}_{k|k-1}+b$ and $\\mathbf{A}_{\\hat{\\mathbf{r}}}=C_{\\mathbf{r}}\\mathbf{A}_{\\hat{\\mathbf{x}}_{k\\parallel k-1}}C_{\\mathbf{r}}^{T}$ , where $\\hat{\\mathbf{x}}_{k|k-1}$ is the current estimate for the state and $\\mathbf{\\DeltaA}_{\\hat{\\mathbf{x}}_{k\\mid k-1}}$ the estimate for the state-prediction covariance. We can similarly compute AUC for the prediction of secondary Poisson observations, as in figure 3. ", "page_idx": 24}, {"type": "text", "text": "A.9 Stage 3 simulation results ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "We validated our algorithm\u2019s third stage for learning the dynamics private to the secondary observation ${\\bf z}$ using simulations. We simulated 10 random models with the following dimensions $n_{1}=n_{2}=$ $n_{3}=4,n_{r}=20,n_{z}=4$ , with the primary/secondary observation pair being Poisson/Gaussian. The Gaussian observations were set to have SNR of 10 (see appendix A.7.1). We constrained the complex eigenvalues of the state transition matrix $\\pmb{A}$ to have magnitudes uniformly distributed between [0.93, 0.99] (as before) and phases uniformly distributed between $[0.019,\\pi]$ . Using a training set size of 1e6 samples, we used PGLDM with all three stages to learn all sets of shared and private modes. We then computed the normalized eignevalue error between the ground truth private modes (i.e., eigenvalues of $\\mathbf{{A}_{33}}^{\\!\\!\\!\\phantom{\\dagger}}$ ) and the identified private modes. We found an average normalized identification error of $1.12\\%$ for learning the dynamics associated with the latent states $\\mathbf{x}^{(3)}$ . For comparison, this is approximately equivalent to -2.05 on the y-axis of figure 1. ", "page_idx": 24}, {"type": "text", "text": "A.10 Computation time details ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "We compared the computational runtime efficiency between our method PGLDM (using either stage 1 only or both stages 1 and 2), PLDSID, and Laplace-EM on one session of NHP data binned at 50ms resolution (section 4.2 and appendix A.7.2). We repeatedly trained on 25 distinct time-series datasets and computed an average runtime for learning across all fits. Each dataset consisted of a 6097-by-15 matrix (timesteps-by-features) of Poisson observations and a 6097-by-4 matrix of Gaussian observations. All methods learned latent models of dimension 8 (i.e., $n_{x}=8$ ). When both stages of PGLDM were used, we fixed $n_{1}=4$ while keeping $n_{x}=8$ . Laplace-EM was run for 100 iterations (the default setting) and learning times are reported both as an average for 100 iterations as well as for a single iteration. For PGLDM and PLDSID we separately report average running times for the SSID portion of the algorithm and for the convex optimization problem used to learn state noise, as outlined in appendix A.3. The results are presented in Table 2. ", "page_idx": 24}, {"type": "text", "text": "Most of the computational cost of our algorithm is involved in the matrix operations associated with 1) computing the necessary covariance/Hankel matrices, 2) performing the moment conversion, and 3) performing the SVD of the future-past Hankel matrices. To perform the moment conversion our method requires a covariance matrix for stacked future-past Poisson-Poisson observations (section 2.2) and a future-past Gaussian-Poisson Hankel matrix (section 3.2.1). Both of these empirical estimates of second-order covariances are computed using matrix multiplications which scale with the number of samples. As an example, we can consider the setup used for the computational cost analysis in Table 2, wherein $n_{r}=15$ and $i_{r}=10$ (horizon). The computed square Poisson-Poisson covariance matrix was of dimension $2*n_{r}*i_{r}=2*15*10$ and was the result of a matrix multiplication between two matrices of dimension $(2^{*}10^{*}15)$ -by-6078, where $6078=\\mathrm{timesteps}-2*i_{r}+1$ . Thus, this operation would scale linearly with the length of the training data. Similarly, the computational cost of this matrix multiplication scales linearly with feature dimension and horizon. The remaining operations (i.e., the SVD and the moment conversion itself) are functions of the latent-state dimension and the feature dimensions for each observation timeseries. ", "page_idx": 24}, {"type": "text", "text": "All running time analyses were performed on a 2020 Macbook Pro using 2 GHz Quad-Core Intel Core i5 CPU with 16GB of 3733 MHz RAM. ", "page_idx": 25}, {"type": "text", "text": "A.11 Data Efficiency ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "We also investigated the data efficiency of our method by generating 20 random Poisson/Gaussian systems and studying the effect of training set size on learning. The random systems used here were generated using the same procedure as the systems used in figure 1 except for the latent dimensionalities of the primary signal. We instead uniformly sampled the total latent dimensionality of $\\mathbf{r}$ as $1\\leq n_{1}+n_{2}\\leq10$ and the shared dimensionality as $1\\leq n_{1}\\leq n_{1}+n_{2}$ ; we kept a fixed size for the secondary observations private states $n_{3}=4$ . We used 1e3, 1e4, 1e5, or 1e6 samples to train models, and then tested them on 1e6 samples of independent held-out data (figure 4). We found that with increasing training set sizes the performance of our method improved, both in identification of shared dynamics and in overall predictive power. This is expected because empirically estimated covariances converge towards their true values with increasing training set sizes, thereby improving the overall performance of our algorithm. ", "page_idx": 25}, {"type": "image", "img_path": "DupvYqqlAG/tmp/34337ee067ac7313b311c861f402093e2046eb60ad3614a4249962847fce1597.jpg", "img_caption": ["Figure 4: PGLDM\u2019s overall performance improves with increasing number of samples, hitting peak performance with training set sizes of 1e5 samples.. Solid traces show the mean and the shaded areas denote the standard error of the mean (s.e.m.) for each condition. (a-b) Predictive power of learned models as a function of training set size, with (a) depicting Gaussian observation decoding CC and (b) Poisson self-prediction AUC. (c) The normalized identification error of the shared dynamical modes (in log10 scale) as a function of training size. "], "img_footnote": [], "page_idx": 25}, {"type": "text", "text": "A.12 V1-V2 Results (time-series designation swap) ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "For completion we also present the complementary analysis to the results in figure 3, wherein we take neural population spiking activity from V1 as $\\mathbf{y}_{k}$ and activity from V2 as $\\mathbf{t}_{k}$ . The rest of the analysis is kept the same as described in sections 4.3 and A.7.3, and the results are presented in figure 5. In this scenario, PGLDM does not make a substantial difference in predicting V2 activity from V1 activity when compared with PLDSID and Laplace-EM. Prior work using this same dataset has shown that the feedback direction, that is the V2 (past) to V1 (future) direction, generally exhibited higher correlations between the two time-series as compared to the feedforward direction [50]. We hypothesize that this finding might also explain the differences that we see in our results (i.e., the differences between figures 3 and 5). ", "page_idx": 25}, {"type": "image", "img_path": "DupvYqqlAG/tmp/4bee967d3b0a5c45ee5691aad9bcc5d397fa4b438dfc6aadab0269dc0c6dd976.jpg", "img_caption": ["Figure 5: All methods perform comparably in V2 decoding from V1 population spiking activity; PGLDM\u2019s V1 self-prediction performance improves with stage 2. (a) Average cross-validated V2 decoding AUC (shaded areas denote s.e.m.) for models of different latent dimensions. (b) Same as (a) but for V1 one-step ahead self-prediction AUC. (c) V2 decoding AUC at $n_{x}=8$ . Whiskers correspond to s.e.m. Scatter points are individual trials. (d) Same as (c) but for V1 self-prediction. "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: We state that our aim in this work is to improve upon existing GLDMs, and their associated learning algorithms, that only consider a single generalized-linear timeseries and therefore cannot dissociate shared vs private dynamics in two generalized-linear time-series. We derive and present a novel algorithm with this capability and demonstrate in both simulations and real data, as stated in the abstract. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 27}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Justification: We have a specific subsection called \u201cLimitations\" wherein we discuss the limitations of our model assumptions and methodology. We also have a supplementary section that discusses the computational efficiency of our method. Finally, in our experimental details we discuss the number of simulated systems and amount (and type) of real data we have validated our method on. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best ", "page_idx": 27}, {"type": "text", "text": "judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 28}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: We have a full derivation of our method, with its associated assumptions, in our appendix. We provide a proof-sketch and outline of our method in the main manuscript. Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 28}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: We believe we have provided all the necessary information regarding simulation configurations, open dataset locations, data preprocessing procedures, model hyperparameters, and cross-validation settings needed to reproduce the results. For the computational running time analysis we have also specified the hardware/compute resources used to run the analysis. Beyond reproducing analysis results, we have also outlined our analytical algorithm step-by-step in thorough detail to enable re-implementation by readers, if desired. Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully.   \n(c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset).   \n(d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 28}, {"type": "text", "text": "", "page_idx": 29}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: We have provided our current code with our submission and will provide a public camera ready version upon acceptance. We also provide links to the open datasets used as well as to the codebase of one of our baselines. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 29}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Justification: We provide details on experimental settings in the main text and in the appendix. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 29}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: For all figure and table results we reported averages and their associated standard error of measures. For figure 2 results we also performed significance tests (Wilcoxon) and report statistically significant p-values. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 30}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: Most of our experimental results are agnostic to the compute resources used. For the computational efficiency results reported in the appendix we do provide information on the compute resources used to run the experiments. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 30}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We have adhered to the conference Code of Ethics. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics. \u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics. ", "page_idx": 30}, {"type": "text", "text": "\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 31}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: Although our primary intention with this work was to develop a novel SSID method from a foundations perspective, methods like ours have previously found utility in brain-computer interfaces and therefore our work may have positive societal impacts by benefitting individuals with disability. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 31}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Justification: Our work does not make use of any models or data that could have a high risk of misuse. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 31}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: We provide citations and/or links to all existing assets used in the manuscript including: scikit-learn, statsmodels, cvxpy, the Python ssm package, bestLDS package on Github, and both publicly-available non-human primate datasets. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 32}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Justification: All model derivations and algorithm implementations are described in detail in the manuscript. We have also submitted our code along with a README with instructions and a tutorial that will be publicly released upon publication. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 32}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: Our work does not use crowdsourced experiments or research with human subjects. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. ", "page_idx": 32}, {"type": "text", "text": "\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 33}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: Our work did not rely on data collected from human subjects. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 33}]