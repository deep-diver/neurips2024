[{"type": "text", "text": "NeuralClothSim: Neural Deformation Fields Meet the Thin Shell Theory ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Navami Kairanda Marc Habermann Christian Theobalt Vladislav Golyanik ", "page_idx": 0}, {"type": "text", "text": "Max Planck Institute for Informatics, Saarland Informatics Campus ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Despite existing 3D cloth simulators producing realistic results, they predominantly operate on discrete surface representations (e.g., points and meshes) with a fixed spatial resolution, which often leads to large memory consumption and resolutiondependent simulations. Moreover, back-propagating gradients through the existing solvers is difficult, and they hence cannot be easily integrated into modern neural architectures. In response, this paper re-thinks physically accurate cloth simulation: We propose NeuralClothSim, i.e., a new quasistatic cloth simulator using thin shells, in which surface deformation is encoded in neural network weights in the form of a neural field. Our memory-efficient solver operates on a new continuous coordinatebased surface representation called neural deformation fields (NDFs); it supervises NDF equilibria with the laws of the non-linear Kirchhoff-Love shell theory with a non-linear anisotropic material model. NDFs are adaptive: They 1) allocate their capacity to the deformation details and 2) allow surface state queries at arbitrary spatial resolutions without re-training. We show how to train NeuralClothSim while imposing hard boundary conditions and demonstrate multiple applications, such as material interpolation and simulation editing. The experimental results highlight the effectiveness of our continuous neural formulation. See our project page: https://4dqv.mpi-inf.mpg.de/NeuralClothSim/. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Realistic cloth simulation is a central, long-standing and challenging problem in computer graphics. It arises in game engines, computer animation, movie production, digital art, and garment digitisation, only to name a few areas. To date, it has been mostly addressed with physics-based simulators operating on explicit geometric representations, i.e., meshes and particle systems. While recent simulators [24, 60, 36, 33, 32, 38] can produce realistic 3D simulations that obey various types of boundary conditions and consider secondary effects, but their operational principle remains limited in several ways. First, they work on discrete surface representations such as meshes and points inherently assuming a pre-defined spatial resolution that cannot be easily changed once the simulation is accomplished. Second, re-running with different meshing of the same initial template leads to different folds and wrinkles, which is often problematic for downstream applications. Third, explicit geometries require notoriously large amounts of storage for the detailed simulation: the memory size grows linearly with the number of points. Moreover, it is difficult to integrate simulators into learning frameworks and to edit the output 3D state without re-running the simulation. ", "page_idx": 0}, {"type": "text", "text": "The recent advances in physics-informed neural networks [49, 25] as well as the success of neural fields [43, 64, 62, 65], makes us question if continuous coordinate-based representations can alleviate these limitations. All these considerations motivate us to rethink the fundamentals of physically accurate cloth simulation and we introduce a new approach for cloth quasistatics, in which the surface deformation is encoded in neural network weights. The proposed neural architecture is coordinatebased and has multiple advantages compared to previous simulators; see Fig. 1 for an overview. Our neural fields are adaptive, i.e., the parameters are used to encode the deformations as they occur. As a matter of efficiency, we neither need to know the resolution in advance before the simulation nor do we require complex re-meshing schemes [45]. Realistic cloth simulation requires modelling geometric non-linearities and non-linear anisotropic elasticity. It involves large bending deformations and rigid transformations leading to non-linear point displacements. To efficiently model this, we rely on neural networks as they are good universal (non-linear) function approximators. ", "page_idx": 0}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/80e1e1a6b4e68932e1e4725c766fc5e419dba4568733ec263aaa9a3cb287c821.jpg", "img_caption": ["Figure 1: NeuralClothSim is the first neural cloth simulator representing surface deformation as a neural field. It is supervised for each target scenario with the laws of the Kirchhoff-Love thin shell theory with non-linear strain (left). Once trained, the simulation can be queried continuously and consistently enabling different spatial resolutions (center). NeuralClothSim can also incorporate learnt priors such as material properties that can be edited at test time (right). "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "We model cloth simulation as a thin shell boundary-value problem with the deformation governed by the Kirchhoff-Love shell theory. In contrast to previous simulators using Kirchhoff-Love shell relying on isogeometric analysis [40] or subdivision surface algorithms [24, 20], we model thin shell deformations as implicit neural representations, i.e., 3D deformation fields encoding cloth quasistatics. During training, our formulation supervises a neural deformation field (NDF), minimising the cloth\u2019s potential energy functional. In contrast to classical simulators [38, 36] sensitive to the finite element discretisations of the initial surface, which could lead to inconsistent folds, we generate simulations with consistent drapes, folds, and wrinkles. This is important for downstream applications that might query (e.g., in the case of a renderer) or even modify (e.g., like inverse methods) the simulation with adaptive sampling. Next, our representation is memory-efficient, and the simulation states are generated directly in a compressed form. In summary, our core technical contributions are as follows: ", "page_idx": 1}, {"type": "text", "text": "\u2022 A new continuous coordinate-based neural representation (Sec. 4.1)\u2014and a new neural solver for cloth quasistatics based on thin shell theory that accepts boundary conditions such as external forces or guiding motions (Sec. 4.2).   \n\u2022 Modelling of thin shell\u2019s deformation with non-linear Kirchhoff-Love theory supervising the neural deformation fields (Sec. 4.3). Upon convergence, the equilibrium state can be queried continuously and consistently.   \n\u2022 Applications of the proposed neural simulator including material interpolation and fast editing of simulations according to updated simulation parameters (Sec. 5.4). ", "page_idx": 1}, {"type": "text", "text": "We want to point out that we do not claim qualitative superiority over classical cloth simulation methods and completeness of our formulation (e.g., our method does not consider collisions). However, we believe that our new way of deeply integrating neural networks as a surface representation and solver into cloth simulation has the potential to stimulate future research in this direction, and we show that our formulation overcomes multiple fundamental limitations of existing discrete approaches. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Cloth Simulation is a well-studied problem [1, 9, 21, 26, 59, 38, 34, 51], with the first methods dating back to the 1980s [2, 55]. The computational flow of the modern simulation approaches includes: Discretisation using the finite element method (FEM) [18, 45], implicit time-integration [1, 32], frictional contact [33, 42], and collision handling [46, 54, 26]. Cloth simulators model real fabric behaviors [15, 61], which is typically done by fitting constitutive material models. Liang et al. [38] and Li et al. [36] introduced differentiable cloth simulators, which were subsequently shown to be also useful in 3D reconstruction as a physics-based prior [28, 37]. Zhang et al.\u2019s approach [67, 68] enables interactive exploration of cloth parameters with progressively consistent quasistatics. Another category of methods constitutes neural cloth simulators. Pfaff et al. [48] proposed to learn simulations using graph neural networks. Bertiche et al. [7] is a neural simulator for static draping of garments on a virtual character. It is further extended with self-supervised approaches [51, 8] to learning garment dynamics. They leverage physics-based loss terms and do not require simulated ground-truth data. However, these methods are application-oriented rather than approaches for general cloth simulation, as the garments are skinned to the human body and garment deformations are driven by body shape and poses. Several methods for cloth simulation rely on the Kirchhoff-Love shell theory [19, 24]. The energy functionals in the theory require higher-order derivatives, which are not available for general unstructured triangle meshes. In their pioneering work, Cirak et al. [14] present Loop subdivision with control meshes that meet this additional $C^{1}$ interpolation requirement, which is extended to dynamic cloth simulation with corotational strains [56]. NURBS isogeometry [40] also enables continuity, whereas recent methods [16, 31] rely on Catmull-Clark subdivision surfaces and model the geometric non-linearity of shells. All the aforementioned cloth simulators (traditional FEM, neural, and Kirchhoff-Love) use discrete surface representation (i.e., meshes) with several inherent limitations. The representation is not adaptive, and simulations suffer from coarse-to-fine inconsistency and are sensitive to initial discretisation. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Neural Fields. Recent approaches parameterising surfaces as neural fields [62, 53, 44, 43, 58] offer a promising alternative to meshes. As a common theme, these methods use coordinate-based MLP for neural field parameterisation, which takes coordinates in the spatio-temporal domain and returns the task-specific property, e.g. occupancy or SDF values. For a detailed discussion, we refer to the survey of Xie et al. [64]. However, none of the works focus on integrating such neural fields into the cloth simulation, which is the main goal of the proposed work. ", "page_idx": 2}, {"type": "text", "text": "Neural Networks for Solving PDEs/ODEs. Several recent approaches [50, 49, 12, 66, 35], also dubbed Physics-Informed Neural Networks (PINNs), leverage neural networks for solving tasks that are supervised by the laws of physics; we refer to a recent survey from Hao et al. [25] for a detailed review. Chen et al. [11, 10] use implicit neural representation to accelerate [11] or replace [10] PDE solvers. However, they do not demonstrate thin-shell simulation. While previous works such as Rao et al. [50] and Zehnder et al. [66] applied neural implicit representations for volumetric elastodynamic problems, our approach focuses on realistic thin-shell and cloth simulation. It addresses important simulation aspects such as geometric non-linearities and the integration of non-linear anisotropic models that are crucial for simulating large deformations and rotations. Another method [65] allows the processing of neural fields encoding geometric structures. Conceptually, the most closely related to ours is the work of Bastek and Kochmann [5], however, there are important differences to our work. First, they model linear small-strain regime for Naghdi shells, whereas we model the full non-linear stretching and bending behaviour of clothes. Second, we propose several architectural improvements \u2014periodic activation functions, periodic boundary conditions, data-driven orthotropic material model\u2014 that are necessary for producing realistic wrinkles and folds, and demonstrate generalisation to point loads, different material and boundary values. Next, we present a short background on Kirchhoff-Love theory that enables us to model a cloth deformation as a thin shell. ", "page_idx": 2}, {"type": "text", "text": "3 Kirchhoff-Love Thin Shell Theory for Cloth Modeling ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Before we explain our method, we define our cloth representation. We characterise cloth as a thin shell and model its behaviour with the Kirchhoff-Love theory [39, 63]. A thin shell is a 3D geometry with a high ratio of width to thickness. The shell continuum can be kinematically described by the midsurface located in the middle of the thickness dimension and the director, a unit vector directed along fibres in the shell that are initially perpendicular to the midsurface. The Kirchhoff hypothesis states the director remains straight and normal, and the shell thickness $h\\in\\mathbb{R}$ does not change with deformation (see inset). We provide a detailed review of Kirchhoff-Love thin shell theory in App. B. ", "page_idx": 2}, {"type": "text", "text": "Notation. Throughout the document, we use Greek letters for indexing quantities on the midsurface, e.g., $\\mathfrak{a}_{\\alpha},\\alpha,\\beta,\\ldots=1,2$ , and Latin letters for indexing quantities on the shell, $e.g.,\\mathbf{g}_{i},i,j,\\ldots=1,2,3$ . Italic letters $a,A$ indicate scalars, lower case bold letters $\\mathbf{a}$ indicate first-order tensors (vectors), and upper case bold letters $\\mathbf{A}$ indicate second-order tensors. An index can appear as a superscript or subscript. Superscripts $(\\cdot)^{i}$ refer to contravariant components of a tensor, which scale inversely with the change of basis, whereas subscripts $(\\cdot)_{i}$ refer to covariant components that change in the same ", "page_idx": 2}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/8a6f805f09ce302a0090c3c4236246eeef05cbb2b1c7f0190b4e0e11a069a757.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 3: NeuralClothSim takes as input a thin shell in the reference state and its material properties, boundary motion and external forces. It then learns an NDF, i.e., a coordinate-based implicit 3D deformation field. At inference, NDF can be continuously queried for the deformed state of the surface at equilibrium using curvilinear coordinates from the parametric domain. We use the Kirchhoff-Love thin shell modelling to supervise the cloth quasistatics with the potential energy functional. ", "page_idx": 3}, {"type": "text", "text": "way as the basis transforms. Moreover, we use upper dot notation for time derivatives, lower comma notation for partial derivatives with respect to the curvilinear coordinates, $\\xi^{i}$ , and vertical bar for covariant derivatives, e.g., $\\dot{\\mathbf{u}}=\\partial\\mathbf{u}/\\partial t$ , $\\bar{\\mathbf{x}},_{\\alpha}=\\partial\\mathbf{x}/\\partial\\xi^{\\alpha}$ , and $u_{\\alpha}|_{\\beta}$ , respectively. Geometric quantities with overbar notation $\\bar{(\\cdot)}$ refer to the reference configuration. Additionally, Einstein summation convention of repeated indices is used for tensorial operations, e.g., $\\varphi_{\\alpha\\lambda}\\varphi_{\\beta}^{\\lambda}=\\varphi_{\\alpha1}\\varphi_{\\beta}^{1}+\\varphi_{\\alpha2}\\varphi_{\\beta}^{2}$ . A detailed list of notations can be found in Tab. II in Appendix B. ", "page_idx": 3}, {"type": "text", "text": "4 Method ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We propose NeuralClothSim, i.e., a new approach for continuous and consistent quasistatic cloth simulation relying the thin shell theory. We seek to generate a complex simulation state at equilibria given a cloth geometry in a reference configuration, its material properties and external forces. The physical basis for our cloth Figure 2: Kirchhoff-Love shell quasistatics is the nonlinear Kirchhoff-Love thin shell equations that model the stretching and bending of cloths in a unified manner. We parameterise the cloth states as a neural deformation field (NDF) defined over a continuous parametric domain (Sec. 4.1). We explicitly account for positional and periodic boundary conditions, incorporated as hard constraints (Sec. 4.2). NDF is optimised using a loss function based on the potential energy functional (Sec. 4.3). Fig. 3 provides a method overview. ", "page_idx": 3}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/abc773181eb1e841a47b24f89f0620db61f4c426b072d70337bc6bae40789924.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "4.1 Neural Deformation Field (NDF) ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "At the core of our approach is a neural deformation field (NDF), a continuous representation of cloth quasistatics, entirely parameterised by a neural network. Following Sec. 3, we model cloth geometry as a Kirchhoff-Love thin shell. Given the rest state $\\bar{\\bf x}(\\xi)$ of a cloth, we describe the equilibrium state $\\mathbf{x}(\\pmb{\\xi})$ of its midsurface under the action of external forces $\\mathbf{f}(\\pmb\\xi)$ and boundary constraints $B_{d}(\\pmb{\\xi})$ using ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{x}(\\pmb{\\xi})=\\bar{\\mathbf{x}}(\\pmb{\\xi})+\\mathbf{u}(\\pmb{\\xi}),\\;\\mathrm{with}\\;\\pmb{\\xi}:=(\\xi^{1},\\xi^{2})\\in\\Omega.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The curvilinear coordinate space $(\\xi^{1},\\xi^{2})$ can (but does not need to) naturally correspond to the orthotropic warp-weft structure of woven clothes. As examples, the reference state associated with a flat square cloth of side $L$ in the $x y$ -plane and that of a garment sleeve (radius $R$ , length $L$ ) admitting a natural parameterisation with cylindrical coordinates are: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\bar{\\mathbf{x}}(\\pmb{\\xi})=[\\boldsymbol{\\xi}^{1},\\boldsymbol{\\xi}^{2},\\boldsymbol{0}]^{\\top},\\quad\\forall(\\boldsymbol{\\xi}^{1},\\boldsymbol{\\xi}^{2})\\in[0,L]^{2},}\\\\ &{\\bar{\\mathbf{x}}(\\pmb{\\xi})=[R\\cos{\\xi}^{1},\\boldsymbol{\\xi}^{2},R\\sin{\\xi}^{1}]^{\\top},\\ \\forall\\boldsymbol{\\xi}^{1}\\in[0,2\\pi);\\boldsymbol{\\xi}^{2}\\in[0,L].}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Analytically defining surface parameterisations might not be feasible for reference geometries given as meshes. In such cases, we learn the reference parametrisation by fitting an MLP $\\bar{\\bf x}(\\xi;\\Upsilon)$ with parameters $\\Upsilon$ to the reference mesh. Specifically, we learn $\\bar{\\bf x}$ by supervising it with the $\\ell_{2}$ -loss $\\mathcal{L}(\\Upsilon)=||\\bar{\\bf x}(\\hat{\\xi};\\Upsilon)-\\hat{\\bar{\\bf x}}||_{2}^{2}$ , where $\\hat{\\bar{\\mathbf{x}}}\\in\\mathbb{R}^{3},\\hat{\\xi}\\in\\mathbb{R}^{2}$ are the vertices and texture coordinates of the given reference mesh. The advantage of this preprocessing over directly using the reference mesh is that we can continuously sample in the parametric domain by querying the MLP and compute all the geometric quantities at these points, similar to analytical access to the reference surface. Our key idea is to regress the displacement field $\\mathbf{u}(\\pmb\\xi)$ using an MLP $\\mathcal{F}_{\\Theta}:\\Omega\\to\\mathbb{R}^{3}$ and optimise its weights $\\Theta$ to minimise the total potential energy of the thin-shell cloth. Specifically, the NDF $\\mathbf{u}$ is formulated as follows: ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r}{{\\bf u}(\\pmb{\\xi};\\Theta)=\\mathcal{F}_{\\Theta}(\\mathcal{B}_{p}(\\pmb{\\xi}))\\mathcal{B}_{d}(\\pmb{\\xi}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $B_{p}(\\pmb\\xi)$ and $B_{d}(\\pmb{\\xi})$ are functions that respectively account for periodic and Dirichlet boundary conditions. In Sec. 4.2, we elaborate on encoding such conditions as hard constraints. ", "page_idx": 4}, {"type": "text", "text": "Apart from being parameter-differentiable, i.e., the gradient $\\nabla\\Theta^{\\mathcal{F}_{\\Theta}}$ is defined everywhere, $\\mathcal{F}_{\\Theta}$ needs to be input-differentiable, i.e., $\\nabla_{\\xi}^{2}\\mathcal{F}_{\\Theta}$ must exist likewise, in order to compute the strains required for the Kirchhoff-Love energy functional. This restricts the activation function used in the network; only $C^{2}$ -continuous non-linearities can be used. Therefore, we use periodic sine as the preferred activation function [53] as it can represent high-frequency signals (needed for folds and wrinkles) while allowing for computing higher-order derivatives. Note that unlike NDF $\\mathbf{u}(\\pmb{\\xi};\\Theta)$ , we use GELU [27] activations for smoothly fitting the reference shape, $\\overline{{\\mathbf{x}}}(\\pmb{\\xi};\\Upsilon)$ . Sec. 4.3 describes the optimisation procedure to train the deformation field $\\mathbf{u}(\\pmb{\\xi};\\Theta)$ . ", "page_idx": 4}, {"type": "text", "text": "Once trained, $\\mathcal{F}_{\\Theta}$ provides continuous access to the cloth quasistatics, where the network can be queried at any point in the spatial domain $\\Omega$ . Based on the requirement for downstream applications, parametric input samples during inference can be different and their number can be higher than those during training, since it does not require the expensive computations of physical quantities; see Fig. 1. Thanks to our continuous formulation, at inference, different discretised meshing and texturing operations in the parametric domain $\\Omega$ can be lifted from 2D to 3D using $\\mathbf{u}(\\pmb{\\xi};\\Theta)$ , which will lead to consistent result irrespective of the specific discretisation (see also Fig. 6). ", "page_idx": 4}, {"type": "text", "text": "4.2 Boundary Conditions ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "A practical cloth simulator allows for imposing conditions such as a user-specified corner motion; for most garments, the simulation needs to be continuous and consistent along the seams. We seek to strictly enforce these conditions in our method. We achieve this by formulating boundary conditions as spatial distance functions, and seams as periodicity constraints along a curvilinear coordinate (such as the azimuthal angle of a cylindrically parameterised sleeve), and directly apply them to the NDF in Eq. (3). ", "page_idx": 4}, {"type": "text", "text": "Dirichlet Boundary Conditions. To constrain boundary positions, we require $\\mathbf{u}(\\pmb{\\xi}_{\\partial\\Omega})\\;=\\;\\mathbf{0}$ for some specified list of parameter space points $\\pmb{\\xi}_{\\partial\\Omega}$ along the boundary segment $\\partial\\Omega$ . While we elaborate on the simpler case here, it is also possible to specify complex conditions i.e., $\\mathbf{u}(\\pmb{\\xi}_{\\partial\\Omega})=\\mathbf{b}(\\pmb{\\xi}_{\\partial\\Omega})$ , detailed in Appendix D. One solution is to sample points in the boundary segment and enforce the boundary conditions through separate loss terms. As shown in previous physicsinformed neural networks [25], having competing objectives during training can lead to unbalanced gradients, which causes the network to often struggle with accurately learning the underlying solution. Further, there is no guarantee that the boundary conditions will always be enforced. Therefore, we propose to modify the NDF to embed essential boundary conditions as hard constraints [41]. Specifically, a distance function Bd(\u03be) satisfying Bd(\u03be) = > 0i,f otherwise if \u03be \u2208\u2126 ensures that any instance of deformation field $\\mathbf{u}(\\pmb{\\xi},t;\\Theta)$ automatically satisfies the boundary conditions. We set $B_{d}(\\xi^{1},\\xi^{2}):=1-e^{-((\\xi^{1}-\\xi_{\\partial\\Omega}^{1})^{2}+(\\xi^{2}-\\xi_{\\partial\\Omega}^{2})^{2})/\\sigma}\\mathrm{~s.t.~}(\\xi_{\\partial\\Omega}^{1},\\xi_{\\partial\\Omega}^{2})\\in\\partial\\Omega,\\quad\\forall(\\xi^{1},\\xi^{2})\\in\\Omega$ (4) ", "page_idx": 4}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/7387e922d0b5c45ec08bc923e862e14b9b2b0c5ce0c4260c6d550af9eb9bccfd.jpg", "img_caption": ["Figure 4: Boundary conditions. In contrast to Dirichlet conditions that alter the network output (c), we impose periodic boundaries by remapping the network input to its sine and cosine values (d). "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "as a distance function with small support $\\sigma=0.01$ . Fig. 4 provides an illustrative example. ", "page_idx": 4}, {"type": "text", "text": "The above formulation supports point and shape constraints in the cloth interior, i.e., $\\partial\\Omega$ can likewise be a boundary segment inside the domain (Fig. IV-appendix). Moreover, if the initial geometry is provided as a mesh (instead of an analytical definition), point constraints can be directly provided as mesh vertices, with $(\\xi_{\\partial\\Omega}^{1},\\xi_{\\partial\\Omega}^{2})$ corresponding to texture coordinates of the vertex; see Fig. 6-(right). ", "page_idx": 4}, {"type": "text", "text": "Periodic Boundary Conditions. In contrast to the positional or motion-dependent boundary conditions specified as per the user\u2019s desires, additional boundary conditions can arise from the geometric cloth parametrisation. Points along the panel seams of the garment share the world-space position and velocity, though they are mapped to different values in the parametric domain. We express continuity in geometry and simulation using periodic conditions. Consider any simulation involving a sleeve: Our method needs to guarantee the additional condition due to the parametrisation, i.e., ${\\bf u}(\\xi^{1},\\xi^{2})={\\bf u}(\\xi^{1}\\pm2n\\pi,\\xi^{2})$ . Whereas the Dirichlet condition is imposed by altering the network output, we strictly impose periodic boundaries by modifying its input. Recall that any continuous periodic function can be written using its Fourier series. If $\\mathbf{u}(\\pmb\\xi)$ is a periodic deformation field with period $P$ w.r.t. the input coordinate $\\xi^{\\lambda}$ , $\\mathbf{u}(\\pmb\\xi)$ can be decomposed into a weighted sum $\\{1,\\sin(2n\\pi\\xi^{\\lambda}/P),\\cos(2n\\pi\\xi^{\\lambda}/P)\\},n\\,\\in\\mathbb{N}$ . Due to the universal approximation power of MLP, only the first cosine and sine terms need to be considered, as the others can be expressed as the nonlinear continuous functions of $\\cos(2\\pi\\xi^{\\lambda}/P)$ and $\\sin(2\\pi\\xi^{\\lambda}/P)$ [41]. Hence, we map $\\xi^{\\lambda}$ using $\\xi^{\\lambda}\\mapsto\\{\\cos\\xi^{\\lambda},\\sin\\xi^{\\lambda}\\}$ when feeding it to the MLP, enforcing periodicity of the predicted NDF along $\\xi^{\\lambda}$ . This completes the definition of boundary conditions applied during both training and inference. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "4.3 NDF Optimisation ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We next explain optimisation in NDF learning. Note $\\xi$ for $\\mathbf{u}(\\pmb\\xi)$ and derived quantities are dropped. ", "page_idx": 5}, {"type": "text", "text": "Strain Computation. To compute the geometric strains due to the thin shell deformation, we evaluate the NDF on samples from the curvilinear coordinate space $\\Omega$ . We generate $N_{\\Omega}$ points using a stratified sampling approach. This ensures that the samples are random, yet well-distributed. At each training iteration, we re-sample coordinates to learn an NDF that fully explores the continuous domain over the course of the optimisation. We evaluate NDF $\\mathbf{u}(\\pmb\\xi)$ at all samples using Eq. 3 and this prediction $(i.e.,\\,\\hat{u}_{i})$ is assumed to be in the Cartesian coordinate system, i.e., $\\mathbf{u}=\\hat{u}_{i}\\mathbf{e_{i}}$ . Our further strain computations (Eq. 6) require covariant deformation components in the reference contravariant basis, i.e., $\\mathbf{u}=u_{\\alpha}\\bar{\\mathbf{a}}^{\\alpha}+u_{3}\\bar{\\mathbf{a}}^{3}$ , therefore we use the basis transformation matrix $\\mathbf{T}=[\\bar{\\mathbf{a}}^{1}\\,\\bar{\\mathbf{a}}^{2}\\,\\bar{\\mathbf{a}}^{3}]^{-1}$ for converting from Cartesian deformation coordinates to covariant coordinates (see Appendix B for detailed Kirchhoff-Love preliminaries). While it is possible to predict in the local contravariant basis directly, the global basis is better suited for NDF training since the local basis vectors are not normalised, and the basis varies with the input position $\\xi$ , especially noticeable for reference geometries such as sleeve (Fig. I-(b)-appendix). ", "page_idx": 5}, {"type": "text", "text": "Next, we describe the ingredients required to evaluate the internal strain energy $\\Psi$ . Membrane strain $\\varepsilon=\\left[\\varepsilon_{\\alpha\\beta}\\right]$ and bending strain $\\kappa=[\\bar{\\kappa}_{\\alpha\\beta}]$ measure the in-plane stretching and the curvature change, respectively, and are defined as $\\begin{array}{r}{\\varepsilon_{\\alpha\\beta}:=\\frac{1}{2}\\big({a}_{\\alpha\\beta}-\\bar{{a}}_{\\alpha\\beta}\\big)}\\end{array}$ , and $\\kappa_{\\alpha\\beta}:=\\bar{b}_{\\alpha\\beta}-b_{\\alpha\\beta}$ where $\\left(\\bar{a}_{\\alpha\\beta},a_{\\alpha\\beta}\\right)$ and $(\\bar{b}_{\\alpha\\beta},b_{\\alpha\\beta})$ are the metric and curvature tensors of reference and deformed midsurface. With the assumptions of Kirchhoff-Love theory and following [3], we simplify these equations to directly operate on $\\mathbf{u}$ and evaluate strains as ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\varepsilon_{\\alpha\\beta}=\\displaystyle\\frac{1}{2}(\\varphi_{\\alpha\\beta}+\\varphi_{\\beta\\alpha}+\\varphi_{\\alpha\\lambda}\\varphi_{\\beta}^{\\lambda}+\\varphi_{\\alpha3}\\varphi_{\\beta3}),}}\\\\ {{\\kappa_{\\alpha\\beta}=-\\varphi_{\\alpha3}|_{\\beta}-\\bar{b}_{\\beta}^{\\lambda}\\varphi_{\\alpha\\lambda}+\\varphi_{3}^{\\lambda}(\\varphi_{\\alpha\\lambda}|_{\\beta}+\\displaystyle\\frac{1}{2}\\bar{b}_{\\alpha\\beta}\\varphi_{\\lambda3}-\\bar{b}_{\\beta\\lambda}\\varphi_{\\alpha3}),}}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where the deformation gradients $\\varphi_{\\alpha\\lambda},\\varphi_{\\alpha3}$ are the components of $\\mathbf{u}_{,\\alpha}$ such that ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{u}_{,\\alpha}=\\varphi_{\\alpha\\lambda}\\bar{\\mathbf{a}}^{\\lambda}+\\varphi_{\\alpha3}\\bar{\\mathbf{a}}^{3},\\varphi_{\\alpha\\lambda}:=u_{\\lambda}|_{\\alpha}-\\bar{b}_{\\alpha\\lambda}u_{3},\\mathrm{~and~}\\varphi_{\\alpha3}:=u_{3,\\alpha}+\\bar{b}_{\\alpha}^{\\lambda}u_{\\lambda}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "We do not linearise the strain. Orange and teal correspond to the linear and the non-linear components, respectively. To evaluate the derivatives of geometric quantities based on NDF $\\mathbf{u}$ w.r.t. inputs $\\xi$ (as part of strain computation), we use automatic differentiation of machine learning frameworks [47]. ", "page_idx": 5}, {"type": "text", "text": "Cloth Material Model. A thin shell develops an internal potential energy due to deformation and the material\u2019s hyperelasticity. As in the cloth simulation literature [34, 67], we write the internal hyperelastic energy density as a function of the stretching and bending strains, $\\Psi(\\varepsilon,\\kappa,\\xi^{3};z(\\bar{\\bf x}),\\Phi,h)$ . aHreer eg, $\\Phi$ maerter itch eq culaontthi\u2019tsi esm adteerriivale dp afrraomme ttehres  raenfde $\\xi^{3}\\in[-\\frac{h}{2},\\frac{h}{2}]$ aics et . t hOicukrn nesesu rcaol orfdieilnda-tbea, saendd $z({\\overline{{\\mathbf{x}}}})$ $\\bar{\\bf x}$ simulation is orthogonal to the research on material modelling and can, thus, be formulated with many different elastic models, as long as the elasticity can be represented as an energy density function. For example, a linear isotropic [52] stress-strain relationship leads to strain energy of the form $\\Psi={\\textstyle\\frac{1}{2}}({\\cal D}H^{\\alpha\\dot{\\beta}\\lambda\\delta}\\varepsilon_{\\alpha\\beta}\\varepsilon_{\\lambda\\delta}+{\\cal B}H^{\\dot{\\alpha}\\beta\\lambda\\bar{\\delta}}\\kappa_{\\alpha\\beta}\\kappa_{\\lambda\\delta})$ , where $D$ is the in-plane stiffness and $B$ is the bending stiffness computed as $\\begin{array}{r}{D:=\\frac{E h}{1-\\nu^{2}}}\\end{array}$ and $\\begin{array}{r}{B:=\\frac{E h^{3}}{12(1-\\nu^{2})}}\\end{array}$ 12(E1h\u2212\u03bd2), with Young\u2019s modulus E, Poisson\u2019s ratio $\\nu$ , and $\\begin{array}{r}{H^{\\alpha\\beta\\lambda\\delta}:=\\nu\\bar{a}^{\\alpha\\beta}\\bar{a}^{\\lambda\\delta}+\\frac{1}{2}(1-\\nu)(\\bar{a}^{\\alpha\\lambda}\\bar{a}^{\\beta\\delta}+\\bar{a}^{\\alpha\\delta}\\bar{a}^{\\beta\\lambda})}\\end{array}$ with $\\bar{a}^{\\alpha\\beta}$ being the contravariant metric tensors. Alternatively, we support the data-driven non-linear anisotropic material model of Clyde et al. [15] that has been carefully constructed to fit measured woven fabrics. We refer to Appendix B.3 for the mathematical details of the non-linear model. ", "page_idx": 5}, {"type": "table", "img_path": "pzJjlnMvk5/tmp/ec7b6dbcb1bfb077f3d7f824239c8780f76ce0dcc3d8654abdd8c17a5e85ec48.jpg", "table_caption": ["Table 1: Quantitative evaluation. We validate the displacements obtained with our method on the Belytschko obstacle course with analytical solutions from [6, 57]. Guo et al. [23] use different material and match the corresponding reference result. Below, we show the ablation. We highlight that our method outperforms prior works and baselines by a large margin. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "Energy Optimisation. A thin shell\u2019s stable equilibrium is characterised by the principle of minimum potential energy, i.e. the sum of external potential energy owing to forces f and internal potential energy $\\Psi$ due to material elasticity. The total potential energy $\\mathcal{E}$ reads as $\\begin{array}{r}{\\mathcal{E}[\\mathbf{u}]=\\int_{\\Omega}\\Psi\\,d\\Omega_{-}\\hat{J_{\\Omega_{-}}}\\mathbf{f}\\cdot\\mathbf{u}\\,d\\Omega}\\end{array}$ , and the stable equilibrium deformation $\\mathbf{u}^{*}$ can be found by minimising the energy functional subject to boundary constraints ${\\bf u}(\\xi^{1},\\xi^{2})={\\bf b}(\\xi^{1},\\xi^{2})$ on $\\partial\\Omega$ . We take advantage of the variational structure of ${\\mathcal{E}}[{\\bf u}]$ and minimise it directly with gradient descent. All operations of our energy computation are naturally differentiable, and we estimate the integral as a sum over continuous parametric domain. For linear isotropic materials, we arrive at the following loss function to optimise the MLP weights for a physically-principled cloth simulation encoded as $\\mathbf{u}^{*}(\\pmb{\\xi};\\Theta)$ : ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}(\\boldsymbol{\\Theta})=\\frac{|\\Omega|}{N_{\\Omega}}\\sum_{i=1}^{N_{\\Omega}}\\left(\\frac{1}{2}D\\varepsilon^{\\top}(\\xi_{i};\\boldsymbol{\\Theta})\\mathbf{H}(\\xi_{i})\\varepsilon(\\xi_{i};\\boldsymbol{\\Theta})+\\frac{1}{2}B\\kappa^{\\top}(\\xi_{i};\\boldsymbol{\\Theta})\\mathbf{H}(\\xi_{i})\\kappa(\\xi_{i};\\boldsymbol{\\Theta})-\\mathbf{f}^{\\top}(\\xi_{i})\\mathbf{u}(\\xi_{i};\\boldsymbol{\\Theta})\\right)\\sqrt{\\bar{a}(\\xi_{i})},}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where $\\varepsilon(\\xi;\\Theta)\\in\\mathbb{R}^{4}$ , $\\pmb{\\kappa}(\\pmb{\\xi};\\Theta)\\in\\mathbb{R}^{4}$ are vectorised strains computed using (5); $\\textstyle|\\Omega|=\\int_{\\Omega}\\,d\\xi^{1}d\\xi^{2}$ is the area of the parametric domain; $\\mathbf{H}(\\pmb{\\xi})\\in\\mathbb{R}^{4\\times4}$ depends only on the reference surface. For data-driven materials [15], the strain energy is additionally a function of thickness coordinate $\\xi^{3}$ . Hence, we integrate $\\mathcal{E}$ along the thickness with the Simpson\u2019s 3-point rule (similar to [16]) i.e., $\\begin{array}{r}{\\mathcal{E}[\\mathbf{u}]=\\int_{\\Omega}\\int_{-\\frac{h}{2}}^{\\frac{h}{2}}\\Psi\\,d\\xi^{3}\\,d\\Omega-\\int_{\\Omega}\\int_{-\\frac{h}{2}}^{\\frac{h}{2}}\\mathbf{f}\\cdot\\tilde{\\mathbf{u}}\\,d\\xi^{3}\\,d\\Omega}\\end{array}$ ,e  iwnh tehree $\\widetilde{\\mathbf{u}}=\\mathbf{u}+\\xi^{3}\\mathbf{w}$ einst tahtieo dn e(fsoere mAatpipoenn fdoirx  aB p.2o)i.nt ", "page_idx": 6}, {"type": "text", "text": "5 Experimental Evaluation ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We next present the qualitative and empirical results highlighting the new characteristics of our continuous neural fields, including validation (Sec. 5.1), simulation results (Sec. 5.2), comparison to prior works (Sec. 5.3), and applications (Sec. 5.4). ", "page_idx": 6}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/6b86722600ea3c5c6ad5b0ef8c841a837fe50be10b776ccccaa07124648bb4fe.jpg", "img_caption": ["Figure 5: Belytschko obstacle course for which we generate accurate displacements (rescaled for better visualisation). "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "5.1 Obstacle Course ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "A scrupulously modelled thin shell, and consequently cloth, must be able to handle inextensional bending modes, complex membrane states of stress, and rigid body motion without straining. Therefore, for validation, we use the engineering obstacle course of benchmark problems from Belytschko et al. [6], for which the analytical solutions are known for linearised functionals. Such problems were previously used in computer graphics [22] for testing the performance of finite mesh elements. Specifically, we test our method on the square plate [57], the Scordelis-Lo roof, and the pinched cylinder with rigid diaphragms and free ends examples, for which the original and our deformed shells are shown in Fig. 5. See Tab. 1 for converged numerical results. The results, which show that our method outperforms prior works by a significant margin, demonstrate our method\u2019s excellent modelling ability. We further present details of the experiments with the square plate and pinched cylinder, including the experimental setup and visualisations of the full displacement fields, in App. C. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Scordelis-Lo Roof is a non-flat reference shape subject to complex membrane strains, i.e. an open cylindrical shell with radius $R\\,=\\,25\\,\\mathrm{{m}}$ , length $L\\,=\\,50\\,\\mathrm{m}$ and subtends an angle of $80^{\\circ}$ . It is supported with two rigid diaphragms at the ends and loaded by gravity $\\mathbf{f}=[0,-90,0]^{\\top}$ . The shell\u2019s material is given as $E=4.32\\mathrm{e8\\,Pa},\\nu=0$ and thickness $h\\,=\\,0.25\\,\\mathrm{m}$ . We obtain the maximum vertical displacement $u_{2}$ at the centre of the edge (averaged over the two sides) as 0.3018, closely approximating the analytical $u_{2}=0.3024$ [6]. ", "page_idx": 7}, {"type": "text", "text": "5.2 Qualitative Results ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We next present our simulation results. The experiments are performed with the values ${\\cal E}\\,=$ $5000\\,\\mathrm{Pa},\\nu=0.25,h=0.0012\\,\\mathrm{m}$ for the linear isotropic material, and with parameters from Clyde et al. [15] for the nonlinear orthotropic material. For the supplemental video, we extend the method to visualise the deformation trajectory (i.e., transition from the reference to the equilibrium state). Details on boundary conditions, external forces, and time-stepping can be found in Appendix D. ", "page_idx": 7}, {"type": "text", "text": "Napkin. We first consider a square napkin of length $L\\,=\\,1\\,\\mathrm{m}$ , falling freely under the effect of gravitational force. The napkin has a flat reference state in the $x y$ -plane given by (2), and the gravitational force field is applied along the negative $y_{\\mathrm{~\\,~}}$ -axis, i.e., external force density $\\mathbf{f}\\,=$ $[0,-9.8\\rho,0]^{\\top}$ . We specify a fixed boundary condition at the top left corner to constrain the napkin movement. The meshes extracted from the trained NDF are visualised in Fig. 1-(center). Note that apart from its realism, one can also query the simulation at arbitrary resolution in the case of NeuralClothSim. Next, we perform another experiment with a napkin subject to gravity and dynamic boundary condition, i.e., in which the corners move inwards. This leads to fold formation at the top, as visualised in Fig. 4-(a) and in Fig. II for varying fabrics such as cotton and silk. ", "page_idx": 7}, {"type": "text", "text": "Sleeve. We also consider a cylindrical shell and perform sleeve compression and twisting. In both cases, we consider the reference state (2) with $L=1\\,\\mathrm{m}$ and $R=0.25\\,\\mathrm{m}$ . See Figs. 4-(b) and 7-(b) for visualisations. In the first case, we apply torsional motion on the sleeve, i.e., a total rotation of $\\frac{3\\pi}{4}$ around the $y$ -axis to both the top and bottom rims. The optimised NDF forms wrinkles at the centre as expected [24]. In the second case, we compress the sleeve to produce the characteristic buckling effect. There are no external forces here and the compression is entirely specified by boundary conditions. We achieve a total displacement of $0.2\\,\\mathrm{m}$ due to compression with the inward motion of the top and bottom rims along the cylinder axis; see Fig. 4-(right). The demonstrated simulation is a representative example of strain localisation, with noticeable diamond patterns of shell buckling. ", "page_idx": 7}, {"type": "text", "text": "5.3 Comparisons to Previous Methods ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In this section, we compare NeuralClothSim to state-of-the-art FEM cloth simulators and physicsinformed neural networks for shell structures. We do not compare to other neural simulators [8, 51], as they do not support simulating non-garment cloths, whereas ours is a general neural cloth simulator. ", "page_idx": 7}, {"type": "text", "text": "Cloth Simulators. Next, we validate the consistency of cloth simulations at different discretisations of the reference state. We consider two scenarios: 1) A napkin with a fixed corner under gravity simulated with our approach and DiffARCSim [38] (Fig. 6-left), and 2) a flag with two fixed corners deforming under wind and gravity simulated with our approach and DiffCloth [36] (Fig. 6-right). In both scenarios, we simulated ours and compared methods thrice, starting with a marginally perturbed meshing of the same initial geometry resulting in different mesh discretisations. In the case of NeuralClothSim, we learn the reference parameterisation by fitting an MLP $\\overline{{\\mathbf{x}}}(\\pmb{\\xi};\\Upsilon)$ for each initial discretisation followed by NDF optimisation. We find that the simulated meshes extracted from NDF are consistent for all discretisations. In contrast, for competing FEM-based methods, simulation is sensitive to the discretisation; while multiple simulations with the same initial mesh produce identical results, slightly different meshing generates inconsistent simulations. Theoretically, a well-defined FEM-based cloth solver should lead to consistent simulation results under different discretisation at high mesh resolutions. To investigate this, we perform an additional experiment where we increase the resolution of the ARCSim simulation ( $10k$ vertices) so that the computation time roughly matches ours. However, the results still contain noticeable inconsistencies (Fig. XIV-appendix), possibly due to several operations that are highly discretisation-dependent [61] (such as the bending model relying on the dihedral angles). In contrast, our method leads to consistent results already at much coarser discretisations (400 vertices, Fig. 6).We next evaluate the memory efficiency for simulations generated by NeuralClothSim, DiffARCSim and DiffCloth. The simulations are chosen to be of similar complexity, and qualitative results are visualised in Fig. XIII-appendix. In Fig. XV-appendix, we then plot the memory requirement as a function of spatial resolution. Memory is recorded for the simulated mesh states for the compared methods and weights of the NDF network for ours. While the memory requirement of finite-element-based methods grows linearly as the function of the number of vertices in the simulated cloth, our approach requires a constant and comparably small memory volume to store the quasistatic simulations. For better memory efficiency, existing simulators offer adaptive refinement (such as ARCSim [45]) by re-meshing at each time step (coarse triangulation is used at smooth regions, and fine meshes are used for wrinkles). However, this requires additional computation and loss of important characteristics, such as differentiability. In contrast, our approach is adaptive without the overhead and without losing correspondence and differentiability due to re-meshing. ", "page_idx": 7}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/eba6b350f008ba4ccca2eff6e2776b0e6ba5646ccc3d14bd24bfa0233cacea28.jpg", "img_caption": ["Figure 6: Simulation consistency. At different initial state discretisations, FEM-based simulators lead to inconsisies with often differences in the folds or wrinkles. In contrast, ours overftis an MLP to the reference mesh and encodes the surface evolution using another MLP (continuous neural fields). lead to inconsistent results with often occurring differences in the folds or wrinkles. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "PINNs for Shells. Bastek et al. [5] focus on engineering scenarios, and we compare the solutions to the ScordelisLo roof and a square plate in Tab. 1; both ours and theirs closely match the reference solutions. Bastek et al. note instabilities during training a neural network trained on a point load, therefore, define the Gaussian force kernel in their pinched hemisphere example. In contrast to theirs, we propose a new loss function for point loads (see App. C) addressing the pinched cylinder obstacle course. While Bastek et al. show converged results on engineering examples, their method cannot capture the high-frequency signal (folds and wrinkles) required for cloth simulation; see Fig. 7 for an illustrative example. The main reasons for their failure are 1) the linear strain and 2) that their activation function (GELU) can capture only smooth signals. ", "page_idx": 8}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/6aa6aba76c367495637c5be79e17afc02a7d745b66a4627855c6a1732487fa20.jpg", "img_caption": ["Figure 7: Comparison to Bastek et al. on sleeve twisting. While the cylinder in (a) twists without wrinkles, our result (b) is correctly wrinkled, similar to [24]. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "5.4 Ablation and Applications ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Ablation. We evaluate the following ablated versions of our approach: 1) Contravariant coordinate system for NDF components, 2) Using a linear approximation of the strains instead of our model, 3) ", "page_idx": 8}, {"type": "text", "text": "Variants of boundary constraint imposition and 4) Choice of activation functions for NDF. For the latter two, we present the numerical results in Tab. 1. See Appendix E for further details. ", "page_idx": 9}, {"type": "text", "text": "Material-conditioning. NeuralClothSim can incorporate learnt priors: Our NDF can be directly extended by making it dependent on the material properties, i.e., it can accept the material parameters as an extra input. This is possible since the material parameter space is typically low-dimensional. Once such NeuralClothSim modification is trained, we can edit the simulated geometry at test time, as shown in Fig. 1-(bottom right). We provide implementation details of conditioning in Appendix F. ", "page_idx": 9}, {"type": "text", "text": "Simulation editing. For high-dimensional scene parameters such as reference pose and external forces, we can edit simulations: The user can interrupt the training of NDF at any point, change the parameters and continue the training. Moreover, editing can also be done after full convergence (aka pre-training) and then fine-tuned with gradually modified design parameters. Editing an NDF has multiple advantages over NDF training from scratch: It is computationally and memory efficient, and provides access to interpolated simulations. We provide further details and results in Appendix F. ", "page_idx": 9}, {"type": "text", "text": "6 Discussion and Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "NeuralClothSim closely matches reference values in challenging cloth deformation scenarios (e.g. the Belytschko course), thanks to compact NDF representation governed by the non-linear KirchhoffLove shell theory with (non-)linear orthotropic material. An extended NDF allows test-time interpolation of material properties and simulation editing. In contrast to the previous mesh-based simulators, NeuralClothSim enables querying continuous and consistent equilibrium cloth states. The shown results are physically plausible in different scenarios under time-varying external forces and boundary motions. We also see multiple avenues for future research, such as adding dynamic effects, i.e. inertia and damping. Our simulator currently does not support contacts and friction necessary for many applications beyond what is demonstrated here (cf. Appendix J on this standalone research problem). ", "page_idx": 9}, {"type": "text", "text": "In conclusion, we see NeuralClothSim as an exciting step towards neural-field-based continuous and differentiable cloth simulation. Inverse problems in vision could benefit from its multi-resolution consistency. While there is a long way until other functionalities such as collision handling are unlocked, we believe it can pave the way towards a new generation of physics simulation engines. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] David Baraff and Andrew Witkin. Large steps in cloth simulation. In Annual Conference on Computer Graphics and Interactive Techniques, 1998.   \n[2] Alan H. Barr. Global and local deformations of solid primitives. In Annual Conference on Computer Graphics and Interactive Techniques, 1984.   \n[3] Yavuz Basar and Wilfried B Kr\u00e4tzig. Mechanik der Fl\u00e4chentragwerke: theorie, berechnungsmethoden, anwendungsbeispiele. Springer-Verlag, 2013.   \n[4] Y Ba\u00b8sar, M Itskov, and A Eckstein. Composite laminates: nonlinear interlaminar stress analysis by multi-layer shell elements. Computer Methods in Applied Mechanics and Engineering, 2000.   \n[5] Jan-Hendrik Bastek and Dennis M Kochmann. Physics-informed neural networks for shell structures. European Journal of Mechanics-A/Solids, 2023.   \n[6] Ted Belytschko, Henryk Stolarski, Wing Kam Liu, Nicholas Carpenter, and Jame SJ Ong. Stress projection for membrane and shear locking in shell finite elements. Computer Methods in Applied Mechanics and Engineering, 1985.   \n[7] Hugo Bertiche, Meysam Madadi, and Sergio Escalera. Pbns: physically based neural simulation for unsupervised garment pose space deformation. ACM Transactions on Graphics (TOG), 2021.   \n[8] Hugo Bertiche, Meysam Madadi, and Sergio Escalera. Neural cloth simulation. ACM Transactions on Graphics (TOG), 2022.   \n[9] Robert Bridson, Ronald Fedkiw, and John Anderson. Robust treatment of collisions, contact and friction for cloth animation. In ACM Transactions on Graphics, 2002.   \n[10] Honglin Chen, Rundi Wu, Eitan Grinspun, Changxi Zheng, and Peter Yichen Chen. Implicit neural spatial representations for time-dependent pdes. In International Conference on Machine Learning (ICML), 2023.   \n[11] Peter Yichen Chen, Jinxu Xiang, Dong Heon Cho, Yue Chang, GA Pershing, Henrique Teles Maia, Maurizio Chiaramonte, Kevin Carlberg, and Eitan Grinspun. Crom: Continuous reduced-order modeling of pdes using implicit neural representations. arXiv preprint arXiv:2206.02607, 2022.   \n[12] Ricky T. Q. Chen, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud. Neural ordinary differential equations. Advances in Neural Information Processing Systems (NeurIPS), 2018.   \n[13] Kwang-Jin Choi and Hyeong-Seok Ko. Stable but responsive cloth. In ACM SIGGRAPH 2005 Courses. 2005.   \n[14] Fehmi Cirak, Michael Ortiz, and Peter Schr\u00f6der. Subdivision surfaces: a new paradigm for thin-shell finite-element analysis. Internat. J. Numer. Methods Engrg., 2000.   \n[15] David Clyde, Joseph Teran, and Rasmus Tamstorf. Modeling and data-driven parameter estimation for woven fabrics. In Proc. ACM SIGGRAPH / Eurographics Symposium on Computer Animation (SCA), 2017.   \n[16] David Clyde, Joseph Teran, and Rasmus Tamstorf. Simulation of nonlinear kirchhoff-love thin shells using subdivision finite elements. In Proc. ACM SIGGRAPH / Eurographics Symposium on Computer Animation (SCA), 2017.   \n[17] David Corwin Clyde. Numerical Subdivision Surfaces for Simulation and Data Driven Modeling of Woven Cloth. University of California, Los Angeles, 2017.   \n[18] Olaf Etzmu\u00df, Michael Keckeisen, and Wolfgang Stra\u00dfer. A fast finite element solution for cloth modelling. In Proc. of The Pacific Conference on Computer Graphics and Applications, 2003.   \n[19] Seth Green, George Turkiyyah, and Duane Storti. Subdivision-based multilevel methods for large scale engineering simulation of thin shells. In Proceedings of the seventh ACM symposium on Solid modeling and applications, 2002.   \n[20] Eitan Grinspun, Petr Krysl, and Peter Schr\u00f6der. Charms: A simple framework for adaptive simulation. ACM Transactions on Graphics, 2002.   \n[21] Eitan Grinspun, Anil N Hirani, Mathieu Desbrun, and Peter Schr\u00f6der. Discrete shells. In Proc. ACM SIGGRAPH / Eurographics Symposium on Computer Animation (SCA), 2003.   \n[22] Eitan Grinspun, Yotam Gingold, Jason Reisman, and Denis Zorin. Computing discrete shape operators on general meshes. In Computer Graphics Forum, 2006.   \n[23] Hongwei Guo, Xiaoying Zhuang, and Timon Rabczuk. A deep collocation method for the bending analysis of kirchhoff plate. arXiv preprint arXiv:2102.02617, 2021.   \n[24] Qi Guo, Xuchen Han, Chuyuan Fu, Theodore Gast, Rasmus Tamstorf, and Joseph Teran. A material point method for thin shells with frictional contact. ACM Transactions on Graphics, 2018.   \n[25] Zhongkai Hao, Songming Liu, Yichi Zhang, Chengyang Ying, Yao Feng, Hang Su, and Jun Zhu. Physics-informed machine learning: A survey on problems, methods and applications. arXiv preprint arXiv:2211.08064, 2022.   \n[26] David Harmon, Etienne Vouga, Rasmus Tamstorf, and Eitan Grinspun. Robust treatment of simultaneous collisions. In ACM SIGGRAPH 2008 papers. 2008.   \n[27] Dan Hendrycks and Kevin Gimpel. Gaussian error linear units (gelus). arXiv preprint arXiv:1606.08415, 2016.   \n[28] Navami Kairanda, Edith Tretschk, Mohamed Elgharib, Christian Theobalt, and Vladislav Golyanik. fsft: Shape-from-template with a physics-based deformation model. In Computer Vision and Pattern Recognition (CVPR), 2022.   \n[29] Josef Kiendl, Ming-Chen Hsu, Michael CH Wu, and Alessandro Reali. Isogeometric kirchhoff\u2013love shell formulations for general hyperelastic materials. Computer Methods in Applied Mechanics and Engineering, 2015.   \n[30] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.   \n[31] Alena Kopanicakova, Rolf Krause, and Rasmus Tamstorf. Subdivision-based nonlinear multiscale cloth simulation. SIAM Journal on Scientific Computing, 2019.   \n[32] Cheng Li, Min Tang, Ruofeng Tong, Ming Cai, Jieyi Zhao, and Dinesh Manocha. P-cloth: interactive complex cloth simulation on multi-gpu systems using dynamic matrix assembly and pipelined implicit integrators. ACM Transactions on Graphics, 2020.   \n[33] Jie Li, Gilles Daviet, Rahul Narain, Florence Bertails-Descoubes, Matthew Overby, George E Brown, and Laurence Boissieux. An implicit frictional contact solver for adaptive cloth simulation. ACM Transactions on Graphics, 2018.   \n[34] Minchen Li, Danny M Kaufman, and Chenfanfu Jiang. Codimensional incremental potential contact. ACM Transactions on Graphics, 2021.   \n[35] Xuan Li, Yi-Ling Qiao, Peter Yichen Chen, Krishna Murthy Jatavallabhula, Ming Lin, Chenfanfu Jiang, and Chuang Gan. Pac-nerf: Physics augmented continuum neural radiance fields for geometry-agnostic system identification. In International Conference on Learning Representations (ICLR), 2022.   \n[36] Yifei Li, Tao Du, Kui Wu, Jie Xu, and Wojciech Matusik. Diffcloth: Differentiable cloth simulation with dry frictional contact. ACM Transactions on Graphics, 2022.   \n[37] Yifei Li, Hsiao-yu Chen, Egor Larionov, Nikolaos Sarafianos, Wojciech Matusik, and Tuur Stuyck. Diffavatar: Simulation-ready garment optimization with differentiable simulation. arXiv preprint arXiv:2311.12194, 2023.   \n[38] Junbang Liang, Ming Lin, and Vladlen Koltun. Differentiable cloth simulation for inverse problems. In Advances in Neural Information Processing Systems (NeurIPS), 2019.   \n[39] Augustus Edward Hough Love. A treatise on the mathematical theory of elasticity. Cambridge university press, 2013.   \n[40] Jia Lu and Chao Zheng. Dynamic cloth simulation by isogeometric analysis. Computer Methods in Applied Mechanics and Engineering, 2014.   \n[41] Lu Lu, Raphael Pestourie, Wenjie Yao, Zhicheng Wang, Francesc Verdugo, and Steven G Johnson. Physicsinformed neural networks with hard constraints for inverse design. SIAM Journal on Scientific Computing, 2021.   \n[42] Micka\u00ebl Ly, Jean Jouve, Laurence Boissieux, and Florence Bertails-Descoubes. Projective dynamics with dry frictional contact. ACM Transactions on Graphics (TOG), 2020.   \n[43] Ben Mildenhall, Pratul P Srinivasan, Matthew Tancik, Jonathan T Barron, Ravi Ramamoorthi, and Ren Ng. Nerf: Representing scenes as neural radiance fields for view synthesis. In European Conference on Computer Vision (ECCV), 2020.   \n[44] Thomas M\u00fcller, Alex Evans, Christoph Schied, and Alexander Keller. Instant neural graphics primitives with a multiresolution hash encoding. ACM Transactions on Graphics, 2022.   \n[45] Rahul Narain, Armin Samii, and James F O\u2019brien. Adaptive anisotropic remeshing for cloth simulation. ACM Transactions on Graphics, 2012.   \n[46] Miguel A Otaduy, Rasmus Tamstorf, Denis Steinemann, and Markus Gross. Implicit contact handling for deformable objects. In Compututer Graphics Forum, 2009.   \n[47] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-performance deep learning library. Advances in Neural Information Processing Systems (NeurIPS), 2019.   \n[48] Tobias Pfaff, Meire Fortunato, Alvaro Sanchez-Gonzalez, and Peter Battaglia. Learning mesh-based simulation with graph networks. In International Conference on Learning Representations (ICLR), 2021.   \n[49] Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal of Computational Physics, 2019.   \n[50] Chengping Rao, Hao Sun, and Yang Liu. Physics-informed deep learning for computational elastodynamics without labeled data. Journal of Engineering Mechanics, 2021.   \n[51] Igor Santesteban, Miguel A Otaduy, and Dan Casas. SNUG: Self-Supervised Neural Dynamic Garments. Computer Vision and Pattern Recognition (CVPR), 2022.   \n[52] Juan C Simo and David D Fox. On a stress resultant geometrically exact shell model. part i: Formulation and optimal parametrization. Computer Methods in Applied Mechanics and Engineering, 1989.   \n[53] Vincent Sitzmann, Julien Martel, Alexander Bergman, David Lindell, and Gordon Wetzstein. Implicit neural representations with periodic activation functions. In Advances in Neural Information Processing Systems (NeurIPS), 2020.   \n[54] Min Tang, Zhongyuan Liu, Ruofeng Tong, and Dinesh Manocha. Pscc: Parallel self-collision culling with spatial hashing on gpus. Proceedings of the ACM on Computer Graphics and Interactive Techniques, 2018.   \n[55] Demetri Terzopoulos, John Platt, Alan Barr, and Kurt Fleischer. Elastically deformable models. SIGGRAPH Comput. Graph., 1987.   \n[56] Bernhard Thomaszewski, Markus Wacker, and Wolfgang Stra\u00dfer. A consistent bending model for cloth simulation with corotational subdivision finite elements. In Proc. ACM SIGGRAPH / Eurographics Symposium on Computer Animation (SCA), 2006.   \n[57] Stephen Timoshenko, Sergius Woinowsky-Krieger, et al. Theory of plates and shells. McGraw-hill New York, 1959.   \n[58] Edgar Tretschk, Ayush Tewari, Vladislav Golyanik, Michael Zollh\u00f6fer, Christoph Lassner, and Christian Theobalt. Non-rigid neural radiance fields: Reconstruction and novel view synthesis of a dynamic scene from monocular video. In IEEE International Conference on Computer Vision (ICCV). IEEE, 2021.   \n[59] Pascal Volino and N Magnenat Thalmann. Implementing fast cloth simulation with collision response. In Proceedings Computer Graphics International 2000, 2000.   \n[60] Huamin Wang. Gpu-based simulation of cloth wrinkles at submillimeter levels. ACM Transactions on Graphics, 2021.   \n[61] Huamin Wang, James F O\u2019Brien, and Ravi Ramamoorthi. Data-driven elastic models for cloth: modeling and measurement. ACM Transactions on Graphics, 2011.   \n[62] Peng Wang, Lingjie Liu, Yuan Liu, Christian Theobalt, Taku Komura, and Wenping Wang. Neus: Learning neural implicit surfaces by volume rendering for multi-view reconstruction. NeurIPS, 2021.   \n[63] Gerald Wempner and Demosthenes Talaslidis. Mechanics of solids and shells. CRC, Boca Raton, 2003.   \n[64] Yiheng Xie, Towaki Takikawa, Shunsuke Saito, Or Litany, Shiqin Yan, Numair Khan, Federico Tombari, James Tompkin, Vincent Sitzmann, and Srinath Sridhar. Neural fields in visual computing and beyond. In Computer Graphics Forum (Eurographics State of the Art Reports), 2022.   \n[65] Guandao Yang, Serge Belongie, Bharath Hariharan, and Vladlen Koltun. Geometry processing with neural fields. Advances in Neural Information Processing Systems (NeurIPS), 2021.   \n[66] Jonas Zehnder, Yue Li, Stelian Coros, and Bernhard Thomaszewski. Ntopo: Mesh-free topology optimization using implicit neural representations. Advances in Neural Information Processing Systems, 2021.   \n[67] Jiayi Eris Zhang, J\u00e9r\u00e9mie Dumas, Yun Fei, Alec Jacobson, Doug L James, and Danny M Kaufman. Progressive simulation for cloth quasistatics. ACM Transactions on Graphics, 2022.   \n[68] Jiayi Eris Zhang, J\u00e9r\u00e9mie Dumas, Yun Fei, Alec Jacobson, Doug L James, and Danny M Kaufman. Progressive shell qasistatics for unstructured meshes. ACM Transactions on Graphics (TOG), 2023. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "NeuralClothSim: Neural Deformation Fields Meet the Thin Shell Theory \u2014Appendices\u2014 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Navami Kairanda Marc Habermann Christian Theobalt Vladislav Golyanik ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Max Planck Institute for Informatics, Saarland Informatics Campus ", "page_idx": 13}, {"type": "text", "text": "Table of Contents ", "page_idx": 13}, {"type": "text", "text": "A Implementation Details 15 ", "page_idx": 13}, {"type": "text", "text": "B Kirchhoff-Love Thin Shell Theory 15 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "B.1 Geometric Preliminaries 16   \nB.2 Kirchhoff-Love Shell Kinematics . 16   \nB.3 Material Elasticity Model . . . 18   \nB.4 Equilibrium Deformation . 19   \nB.5 Tensor Algebra . . 20   \nB.6 Proof of Strain Computation 20 ", "page_idx": 13}, {"type": "text", "text": "C Belytschko Obstacle Course 22 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "C.1 Square Plate . . 22   \nC.2 Scordelis-Lo Roof . . 22   \nC.3 Pinched Cylinder 23 ", "page_idx": 13}, {"type": "text", "text": "D Simulation Details 23 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "D.1 Cloth Trajectory Visualisation 24   \nD.2 Napkin . . . 24   \nD.3 Sleeve 25   \nD.4 Skirt . 25 ", "page_idx": 13}, {"type": "text", "text": "E Ablations 25 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "E.1 Activation Function 25   \nE.2 NDF Coordinate System . . 26   \nE.3 Non-linearity of Strains 26   \nE.4 Boundary Constraints . . 26 ", "page_idx": 13}, {"type": "text", "text": "F Applications 27 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "F.1 Material-conditioned NDFs . 27   \nF.2 NDF Editing . . . 27 ", "page_idx": 13}, {"type": "text", "text": "G Performance 28 ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "G.1 Runtime 28   \nG.2 Sampling Strategy . . . 29   \nG.3 Simulation Reproducibility . . 29 ", "page_idx": 13}, {"type": "text", "text": "Table II: Notations. We omit separation of quantities in undeformed (overbar, e.g. $\\bar{\\bf x}$ ) and deformed configurations. Moreover, we list the tensors with their covariant components but omit the contravariant and mixed variant versions. Instead of subscripts (covariant components), they are represented with superscripts or a mix of superscripts and subscripts. ", "page_idx": 14}, {"type": "table", "img_path": "pzJjlnMvk5/tmp/53503e0f4e667c329e51ca54a9850be846786e61d2e70a02dbedae5682b59639.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "H Additional Comparisons ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "H.1 Runtime 31   \nH.2 Multi-Resolution Consistency 31 ", "page_idx": 14}, {"type": "text", "text": "I Collision ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "J Extended Discussion and Limitations ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Sections referenced with numbers refer to the main matter. All referenced figures and equations are per default from this document, unless they are followed by the \u201c(main matter)\u201d mark. ", "page_idx": 14}, {"type": "text", "text": "A Implementation Details ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We implement NeuralClothSim in PyTorch [47] and compute the geometric quantities on the reference shape and on the NDF using its tensor operations; the first and second-order derivatives are calculated using automatic differentiation. Our network architecture for NDF is an MLP with sine activations (SIREN) [53] with five hidden layers and 512 units in each layer. We empirically set SIREN\u2019s frequency parameter to $\\omega_{0}=30$ for all experiments (we observed that choosing $\\omega_{0}=1$ does not permit folds). Although we sample from $(\\dot{\\xi}^{1},\\xi^{2})\\in\\dot{\\Omega},t\\in[0,T],$ $T=1$ , we normalise samples to $\\dot{(\\xi^{1},\\xi^{2},t)}\\in[0,1]^{3}$ when feeding the input to MLP as per the initialisation principle of SIREN. Note that all physical quantities are computed in the original domains $\\Omega,[0,T]$ and the gradients are tracked in their scaled versions. For training, we use $N_{\\Omega}=20{\\times}20$ and $N_{t}=20$ . At test time, we sample much higher for visualisation, usually with $N_{\\Omega}=100{\\times}100$ and $N_{t}=30$ . For material conditioning, we use a single random material sample per training iteration. NeuralClothSim\u2019s training time amounts to ${\\sim}10\\mathrm{~-~}30$ minutes for most experiments, and the number of training iterations equals ${\\sim}2000-5000$ . We use ADAM [30] optimiser with a learning rate of $10^{-4}$ and run our simulator on a single NVIDIA Quadro RTX 8000 GPU with 48 GB of global memory. ", "page_idx": 14}, {"type": "text", "text": "B Kirchhoff-Love Thin Shell Theory ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In this section, we briefly review the Kirchhoff-Love thin shell theory following [14, 29]; detailed treatment of the subject can be found in [3]. We already introduced physical and mathematical notations in Sec. 3-(main matter). A detailed list of notations can be found in Tab. II. We next present concepts from the differential geometry of surfaces to explain the midsurface and director (Appendix B.1). We then follow with the shell parameterisation and computation of strain measures on and off the midsurface (Appendix B.2). Further, we present the hyperelastic material models that relate the strains to the internal stress (Appendix B.3) and finally review the energy principles for equilibrium deformation (Appendix B.4). Moreover, we provide a proof of the simplified strain formulation in Appendix B.6 as well as additional results from tensor algebra that are relevant for the computations (Appendix B.5). ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "B.1 Geometric Preliminaries ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In Kirchhoff-Love shell theory, the shell midsurface completely determines the strain components throughout the thickness. Therefore, we review those aspects of the differential geometry of surfaces that are essential for understanding the shell theory. ", "page_idx": 15}, {"type": "text", "text": "Let us represent the midsurface as a 2D manifold in the 3D space, as shown in Fig. I. It can be described by a smooth map, $\\mathbf{x}:\\Omega\\subset\\mathbb{R}^{2}\\to\\mathbb{R}^{3}$ on the parametric domain $\\Omega$ . Any position $\\mathbf{x}(\\xi^{1},\\xi^{2})$ on the surface is uniquely identified using the convective curvilinear coordinates $(\\xi^{1},\\xi^{2})\\in\\mathrm{\\dot{\\Omega}}$ . As positions can be specified using Cartesian coordinates $\\ \\mathbf{x}=x_{i}\\mathbf{e}_{i}$ , it follows that the invertible maps $\\mathbf{\\dot{\\boldsymbol{x}}}_{i}=x_{i}(\\xi^{1},\\xi^{2})$ and $\\xi^{\\alpha}=\\xi^{\\alpha}(\\bar{x}_{1},x_{2},x_{3})$ exist. We define a local covariant basis to conveniently express local quantities on the surface. Such a basis is constructed using ${\\bf a}_{\\alpha}$ , the set of two vectors tangential to the curvilinear coordinate lines $\\xi^{\\alpha}$ : ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathbf{a}_{\\alpha}:=\\mathbf{x},_{\\alpha}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "To measure the distortion of length and angles, we compute the covariant components of the symmetric metric tensor (also known as the first fundamental form): ", "page_idx": 15}, {"type": "equation", "text": "$$\na_{\\alpha\\beta}=a_{\\beta\\alpha}:=\\mathbf{a}_{\\alpha}\\cdot\\mathbf{a}_{\\beta}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "The corresponding contravariant components of the surface metric tensors denoted by $a^{\\alpha\\lambda}$ can be obtained using the following identity: ", "page_idx": 15}, {"type": "equation", "text": "$$\na^{\\alpha\\lambda}a_{\\lambda\\beta}=\\delta_{\\alpha\\beta},\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $\\delta_{\\alpha\\beta}$ stands for the Kronecker delta. $a^{\\alpha\\lambda}$ can be used to compute the contravariant basis defined as $\\mathbf{a}^{\\alpha}\\cdot\\mathbf{a}_{\\beta}=\\delta_{\\alpha\\beta}$ , as follows: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathbf{a}^{\\alpha}=a^{\\alpha\\lambda}\\mathbf{a}_{\\lambda}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "While the covariant base vector ${\\bf a}_{\\alpha}$ is tangent to the $\\xi^{\\alpha}$ line, the contravariant base vector $\\mathbf{a}^{\\alpha}$ is normal to $\\mathbf{a}_{\\beta}$ when $\\alpha\\neq\\beta$ . Generally, ${\\bf a}_{\\alpha}$ and $\\mathbf{a}^{\\alpha}$ need not be unit vectors. ", "page_idx": 15}, {"type": "text", "text": "The shell director coincides with ${\\bf a}_{3}$ , the unit normal to the midsurface, and, therefore, computed as the cross product of the tangent base vectors: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathbf{a}_{3}:={\\frac{\\mathbf{a}_{1}\\times\\mathbf{a}_{2}}{\\left|\\mathbf{a}_{1}\\times\\mathbf{a}_{2}\\right|}},\\ \\mathbf{a}^{3}=\\mathbf{a}_{3}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "The second fundamental form\u2014which measures the curvature of the midsurface\u2014can be defined with ${\\bf a}_{3}$ as: ", "page_idx": 15}, {"type": "equation", "text": "$$\nb_{\\alpha\\beta}:=-\\mathbf{a}_{\\alpha}\\cdot\\mathbf{a}_{3,\\beta}=-\\mathbf{a}_{\\beta}\\cdot\\mathbf{a}_{3,\\alpha}=\\mathbf{a}_{\\alpha,\\beta}\\cdot\\mathbf{a}_{3}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Finally, the surface area differential $d\\Omega$ relates to the reference coordinates via the determinant of the metric tensor: ", "page_idx": 15}, {"type": "equation", "text": "$$\nd\\Omega=\\sqrt{a}\\,d\\xi^{1}\\,d\\xi^{2},\\ \\mathrm{where}\\ \\sqrt{a}:=|\\mathbf{a}_{1}\\times\\mathbf{a}_{2}|.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "B.2 Kirchhoff-Love Shell Kinematics ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "The Kirchhoff-Love model proposes a reduced kinematic parameterisation of a thin shell characterised by a 2D midsurface and shell director. It relies on the Kirchhoff hypothesis, i.e., the director initially perpendicular to the midsurface remains straight and normal, and the shell thickness $h\\in\\mathbb{R}$ does not change with deformation; see Fig. I. ", "page_idx": 15}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/e510da522613f600918daf23ad21fed5f65648d0a2073dd434b2daa8e0016fb4.jpg", "img_caption": [], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "Figure I: (a) Kirchhoff-Love thin shell. A thin shell can be kinematically described by the midsurface (here: reference and deformed midsurfaces) and the director (here, $\\overline{{{\\bf a}}}_{3}\\,\\mathrm{,}$ ). Any material point $P$ on the midsurface is then parameterised with curvilinear coordinates $(\\xi^{1},\\xi^{2})$ , whereas a point on the shell continuum requires an additional thickness coordinate $\\xi^{3}$ . Geometric quantities on the midsurface (off the midsurface or on the shell continuum) are coloured red (blue). (b) Contravariant basis for midsurfaces in the reference configuration. While a local contravariant basis coincides with the global Cartesian coordinate system for a planar reference shell, such a basis varies in magnitude and direction across any circular section of the cylinder. Local basis relies on the surface parameterisation, therefore the derived basis vectors need not be normalised (notice how $\\bar{\\mathbf{a}}^{1}(\\pmb{\\xi})$ scales inversely with the radius). ", "page_idx": 16}, {"type": "text", "text": "The position vector $\\overline{{\\mathbf{r}}}$ of a material point in the reference configuration of the shell continuum can be parametrised with curvilinear coordinates $(\\xi^{1},\\xi^{2})$ and thickness coordinate $\\xi^{3}$ as: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\bar{\\bf r}(\\xi^{1},\\xi^{2},\\xi^{3})=\\bar{\\bf x}(\\xi^{1},\\xi^{2})+\\xi^{3}\\bar{\\bf a}_{3}(\\xi^{1},\\xi^{2}),\\mathrm{~s.t.~}-\\frac{h}{2}\\leq\\xi^{3}\\leq\\frac{h}{2},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $\\overline{{\\mathbf{x}}}(\\xi^{1},\\xi^{2})$ represents the midsurface. ", "page_idx": 16}, {"type": "text", "text": "The shell adopts a deformed configuration under the action of applied forces f. Analogously, the deformed position vector $\\mathbf{r}$ is represented as ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathbf{r}(\\xi^{1},\\xi^{2},\\xi^{3})=\\mathbf{x}(\\xi^{1},\\xi^{2})+\\xi^{3}\\mathbf{a}_{3}(\\xi^{1},\\xi^{2}),\\mathrm{~s.t.~}-\\frac{h}{2}\\leq\\xi^{3}\\leq\\frac{h}{2},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where the deformed director ${\\bf a}_{3}$ coincides with the unit normal. ", "page_idx": 16}, {"type": "text", "text": "As a consequence, the overall deformation of the Kirchhoff-Love shell is fully described by the displacement field ${\\bf u}(\\xi^{1},\\xi^{2})$ of the midsurface, i.e., ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathbf{x}(\\xi^{1},\\xi^{2})=\\bar{\\mathbf{x}}(\\xi^{1},\\xi^{2})+\\mathbf{u}(\\xi^{1},\\xi^{2}).\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Analogous to the deformation field $\\mathbf{u}:=\\mathbf{x}-\\bar{\\mathbf{x}}$ of the midsurface, we define w as the difference vector of unit normals to the midsurface, i.e., ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathbf{w}:=\\mathbf{a}_{3}-\\bar{\\mathbf{a}}_{3}=w_{\\lambda}\\bar{\\mathbf{a}}^{\\lambda}+w_{3}\\bar{\\mathbf{a}}^{3}=w^{\\lambda}\\bar{\\mathbf{a}}_{\\lambda}+w^{3}\\bar{\\mathbf{a}}_{3}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Using this formulation, deformations on the shell continuum can be described by the field $\\widetilde{\\mathbf{u}}(\\xi^{1},\\xi^{2},\\xi^{3})\\,=\\,\\mathbf{u}(\\xi^{1},\\xi^{2})\\,+\\,\\xi^{3}\\mathbf{w}(\\xi^{1},\\xi^{2})$ . The difference vector w describes the change in the orientation of the midsurface, enabling us to quantify bending. A simplified way to compute the components $w_{i}$ of w is provided in (51). ", "page_idx": 16}, {"type": "text", "text": "The tangent base vectors at a point on the shell continuum are denoted by $\\mathbf{g}_{i}:=\\mathbf{r},_{i}$ and expressed by those of the midsurface as: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{{\\bf g}_{\\alpha}={\\bf a}_{\\alpha}+\\xi^{3}{\\bf a}_{3,\\alpha},}}\\\\ {{{\\bf g}_{3}={\\bf a}_{3}.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/7e816e114708acadb6802cf2b1919c50889e0eb75245ae85e589f67a3b5f8ff9.jpg", "img_caption": ["Figure II: Material model. Simulation of stable equilibria of $1\\,\\mathrm{m}\\times1\\,\\mathrm{m}$ napkin with corners held $60\\,\\mathrm{cm}$ apart. From left to right, we visualise linear isotropic, linear anisotropic St.Venant-Kirchhoff (canvas), and non-linear anisotropic canvas, silk and cotton materials from Clyde et al. [15]. "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "The corresponding covariant components of the metric tensor are then obtained using ", "page_idx": 17}, {"type": "equation", "text": "$$\ng_{i j}:=\\mathbf{g}_{i}\\cdot\\mathbf{g}_{j}.\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "To measure strain, we use the symmetric Green-Lagrange strain tensor $\\mathbf{E}=E_{i j}\\bar{\\mathbf{g}}^{i}\\otimes\\bar{\\mathbf{g}}^{j}$ , since it discards the rotational degrees of freedom from tangent base vector $\\mathbf{g}_{i}$ while retaining the stretch and shear information. It is defined as the difference between the metric tensors on the deformed and undeformed configurations of the shell, i.e., ", "page_idx": 17}, {"type": "equation", "text": "$$\nE_{i j}:=\\frac{1}{2}\\big(g_{i j}-\\bar{g}_{i j}\\big).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Using (19) and (20), note that transverse shear strain measuring the shearing of the director vanishes $E_{\\alpha3}=0$ ) and the stretching of the director is identity, i.e., $E_{33}=1$ ; hence, the strain simplifies to ", "page_idx": 17}, {"type": "equation", "text": "$$\n~E_{\\alpha\\beta}=\\varepsilon_{\\alpha\\beta}+\\xi^{3}\\kappa_{\\alpha\\beta},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "with membrane strain measuring the in-plane stretching defined as ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\varepsilon_{\\alpha\\beta}:=\\frac{1}{2}\\big(a_{\\alpha\\beta}-\\bar{a}_{\\alpha\\beta}\\big),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "and bending strain measuring the change in curvature defined as ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\kappa_{\\alpha\\beta}:=\\bar{b}_{\\alpha\\beta}-b_{\\alpha\\beta}.\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "B.3 Material Elasticity Model ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Our NeuralClothSim is orthogonal to the research on material modelling and can, thus, be formulated with many different elastic behaviours. We demonstrate results with a simple linear isotropic model [14], and the data-driven anisotropic non-linear model from Clyde et al. [15], as well as the $\\,S\\t$ Venant-Kirchhoff variant of the Clyde\u2019s model. ", "page_idx": 17}, {"type": "text", "text": "Linear Isotropic Material. Given the material Young\u2019s modulus $E$ , Poisson\u2019s ratio $\\nu$ , a linear isotropic stress-strain relationship leads to hyperelastic strain energy density [52] of the form ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\Psi=\\frac{1}{2}(D H^{\\alpha\\beta\\lambda\\delta}\\varepsilon_{\\alpha\\beta}\\varepsilon_{\\lambda\\delta}+B H^{\\alpha\\beta\\lambda\\delta}\\kappa_{\\alpha\\beta}\\kappa_{\\lambda\\delta}),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $D$ is the in-plane stiffness and $B$ is the bending stiffness computed as ", "page_idx": 17}, {"type": "equation", "text": "$$\nD:=\\frac{E h}{1-\\nu^{2}}\\mathrm{~and~}B:=\\frac{E h^{3}}{12(1-\\nu^{2})},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "and ", "page_idx": 17}, {"type": "equation", "text": "$$\nH^{\\alpha\\beta\\lambda\\delta}:=\\nu\\bar{a}^{\\alpha\\beta}\\bar{a}^{\\lambda\\delta}+\\frac{1}{2}(1-\\nu)(\\bar{a}^{\\alpha\\lambda}\\bar{a}^{\\beta\\delta}+\\bar{a}^{\\alpha\\delta}\\bar{a}^{\\beta\\lambda}).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Here, $\\Psi$ is the sum of the membrane strain energy density (the first term) and the bending strain energy density (the second term). ", "page_idx": 17}, {"type": "text", "text": "Non-linear Orthotropic Material. While the linear isotropic model is simple and sufficient to demonstrate our NeuralClothSim formulation, a data-driven model with estimated fabric material parameters can generate highly realistic cloth simulations. Therefore, we additionally demonstrate our method with the non-linear anisotropic material model from Clyde et al. [15], and its simplification to St. Venant-Kirchhoff model [4]. We show the simulation results with the material model with varying materials, such as cotton and silk in Fig. II, and describe the model next. ", "page_idx": 18}, {"type": "text", "text": "Clyde et al. present an orthotropic constitutive model that accurately represents the anisotropy introduced by the warp and weft structure of woven cloth. More concretely, they write the hyperelastic strain energy density as $\\Psi(\\mathbf{E},\\mathbf{D},\\Phi)$ where $\\mathbf{E}$ is the Green-Lagrange strain (21), $\\mathbf{D}=[\\mathbf{\\bar{d}}_{1}^{\\phantom{\\dagger}},\\mathbf{d}_{2},\\mathbf{d}_{3}]$ is the reference configuration warp/weft orthotropy $(\\mathbf{d}_{1},\\mathbf{d}_{2})$ and normal $\\left(\\mathbf{d}_{3}\\right)$ directions, and $\\Phi$ being the fabric parameters. We follow the technique of [4] to determine the material directions D. Orthotropy directions are computed as tangents to the midsurface with the warp direction ${\\bf d}_{1}$ coinciding with the normalised covariant base vector, i.e., ", "page_idx": 18}, {"type": "equation", "text": "$$\n{\\bf d}_{1}=\\frac{\\bar{{\\bf a}}_{1}}{\\|\\bar{{\\bf a}}_{1}\\|},{\\bf d}_{3}=\\bar{{\\bf a}}_{3},\\mathrm{~and~}{\\bf d}_{2}={\\bf d}_{3}\\times{\\bf d}_{1}.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Next, the orthotropic components ${\\tilde{E}}_{i j}$ of the strain are obtained by expressing $\\mathbf{E}$ in the material basis, with $\\tilde{\\mathbf{E}}=\\mathbf{D}^{\\top}\\mathbf{ED}$ . Due to the Kirchhoff-Love kinematic assumptions, any stretches and shears in the out-of-plane direction ${\\bf d}_{3}$ vanish, i.e. $\\tilde{E}_{i3}=\\tilde{E}_{3i}=0$ . Finally, the Clyde model\u2019s strain energy density intuitively separates the distinct deformation modes and is defined as, ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\Psi=\\frac{k_{11}}{2}\\eta_{1}(\\tilde{E}_{11}^{2})+k_{12}\\eta_{2}(\\tilde{E}_{11}\\tilde{E}_{22})+\\frac{k_{22}}{2}\\eta_{3}(\\tilde{E}_{22}^{2})+G_{12}\\eta_{4}(\\tilde{E}_{12}^{2}),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\{k_{11},k_{12},k_{22},G_{12}\\}$ describe the cloth\u2019s infinitesimal (linear) strain behaviour, whereas the function $\\eta_{j}$ describes the nonlinear response to larger strains with, ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\eta_{j}(x)=\\sum_{i=1}^{d_{j}}\\frac{\\mu_{j i}}{\\alpha_{j i}}((x+1)^{\\alpha_{j i}}-1).\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We obtain the values for material parameters \u03a6 = {k11, k12, k22, G12, \u00b5ji, \u03b1ji, dj}idj=1,j\u2208[1,...,4] f rom [17] and model the silk, canvas and cotton fabrics. Additionally, we can arrive at the orthotropic (linear) St. Venant-Kirchhoff model [4] by simply choosing $\\eta_{j}(x)=x$ for all $j$ (see Fig. II). ", "page_idx": 18}, {"type": "text", "text": "When optimising the NDF, the non-linear response (30) gives unpredictable results for strains outside the fitting dataset. For a reasonable strain extrapolation, we use quadratic Taylor expansion around the closest valid strain, as proposed in [17] (see [34]-supplement for the derivatives). Towards this, we leverage the strain cutoffs $\\tilde{E}_{\\alpha\\beta}^{\\mathrm{min}}$ , and $\\tilde{E}_{\\alpha\\beta}^{\\mathrm{max}}$ provided as part of the material dataset. ", "page_idx": 18}, {"type": "text", "text": "B.4 Equilibrium Deformation ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Under the action of external forces and boundary conditions, a thin shell deforms and achieves an equilibrium configuration. Its stable equilibrium state is characterised by the principle of minimum potential energy, which is the sum of external potential energy owing to applied forces and internal potential energy due to material elasticity. ", "page_idx": 18}, {"type": "text", "text": "While all the geometric quantities in (8)\u2013(27) are defined at each material point $(\\xi^{1},\\xi^{2})\\in\\Omega$ , the energy is integrated over the parametric domain $\\Omega$ . Considering the total potential energy of the shell $\\mathcal{E}[\\mathbf{u}]$ is given by the sum of elastic potential energy $\\Psi$ and the potential energy due to the external force density $\\mathbf{f}$ , we obtain: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathcal{E}[\\mathbf{u}]=\\int_{\\Omega}\\Psi\\,d\\Omega-\\int_{\\Omega}\\mathbf{f}\\cdot\\mathbf{u}\\,d\\Omega.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Next, the stable equilibrium deformation of the shell can be found by minimising the potential energy functional subject to boundary constraints: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{u}^{*}=\\arg\\operatorname*{min}_{\\mathbf{u}}\\mathcal{E}[\\mathbf{u}],\\ \\mathrm{subject\\to}}\\\\ &{\\mathbf{u}(\\boldsymbol{\\xi}^{1},\\boldsymbol{\\xi}^{2})=\\mathbf{b}(\\boldsymbol{\\xi}^{1},\\boldsymbol{\\xi}^{2})\\ \\mathrm{on}\\ \\partial\\Omega.}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "The above definition of hyperelastic energy of the shell requires the displacement field $\\mathbf{u}\\in H^{2}(\\Omega\\mapsto$ $\\mathbb{R}^{3}$ ) that must necessarily have square-integrable first and second derivatives. ", "page_idx": 18}, {"type": "text", "text": "B.5 Tensor Algebra ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "We provide additional results from tensor algebra [63]) that are relevant for strain computations on shells (see Sec. B.6). ", "page_idx": 19}, {"type": "text", "text": "Based on the coordinate system for the tensor components, a tensor can be covariant (e.g., $A_{\\alpha\\beta}$ ), contravariant $(e.g.,\\,A^{\\alpha\\beta})$ and may even have mixed character, $i.e.$ , partly contravariant and partly covariant in different indices (e.g., $A_{\\alpha\\,.}^{\\beta\\,\\cdot}$ ). For computing $\\varphi_{\\beta}^{\\lambda}$ , and $\\varphi_{3}^{\\lambda}$ in (5)-(main matter), we use the following rule from shell theory that transforms a covariant tensor to a mixed one: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{A_{\\beta}^{\\alpha}=A_{\\beta\\lambda}\\bar{a}^{\\lambda\\alpha},}}\\\\ {{A_{3}^{\\alpha}=A_{\\lambda3}\\bar{a}^{\\lambda\\alpha}.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "A tensor of $n$ -th order has $n$ indices. For example, $v_{\\alpha}$ is first-order, and $H^{\\beta\\alpha\\lambda\\delta}$ is fourth. For computing the covariant derivatives of the first-order tensor $u_{\\rho}|_{\\alpha}$ and the second-order tensor $\\varphi_{\\alpha\\lambda}|_{\\beta}$ in (5), we use the following rules: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{v_{\\alpha}|_{\\beta}=v_{\\alpha,\\beta}-v_{\\lambda}\\Gamma_{\\alpha\\beta}^{\\lambda},\\ \\mathrm{and}}\\\\ &{A_{\\alpha\\beta}|_{\\gamma}=A_{\\alpha\\beta,\\gamma}-A_{\\lambda\\beta}\\Gamma_{\\alpha\\gamma}^{\\lambda}-A_{\\alpha\\lambda}\\Gamma_{\\beta\\gamma}^{\\lambda},}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where $\\Gamma_{\\alpha\\beta}^{\\lambda}$ is the Christoffel symbol given by ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\Gamma_{\\alpha\\beta}^{\\lambda}:=\\bar{\\mathbf{a}}^{\\lambda}\\cdot\\bar{\\mathbf{a}}_{\\alpha,\\beta}.\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Some tensors arising in the kinematic description of Kirchhoff-Love thin shells are symmetric with trhese pfeocltl otow iinngd itceenss $\\alpha$ r sa:n $\\beta$ $A_{\\alpha\\beta}=A_{\\beta\\alpha}$ a.n dW .ploit the symmetry for efficient computations of $a_{\\alpha\\beta},b_{\\alpha\\beta},\\varepsilon_{\\alpha\\beta},\\kappa_{\\alpha\\beta}$ $\\Gamma_{\\alpha\\beta}^{\\lambda}$ ", "page_idx": 19}, {"type": "text", "text": "In the case of linear elastic material, we also exploit the symmetry of fourth-order symmetric tensor ", "page_idx": 19}, {"type": "text", "text": "$\\mathbf{H}$ ", "page_idx": 19}, {"type": "equation", "text": "$$\nH^{\\alpha\\beta\\lambda\\delta}=H^{\\beta\\alpha\\lambda\\delta}=H^{\\beta\\alpha\\delta\\lambda}=H^{\\alpha\\beta\\delta\\lambda}=H^{\\lambda\\delta\\alpha\\beta}.\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "This property means that only six independent components (after applying symmetry) need to be computed (i.e., $H^{1111}$ , $H^{1112}$ , $H^{1122}$ , $\\dot{H}^{1212}$ , $H^{1222}$ , and $H^{2222}$ ). ", "page_idx": 19}, {"type": "text", "text": "B.6 Proof of Strain Computation ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "According to the Kirchhoff-Love theory, the Green-Lagrange strain associated with the deformation of a thin shell is decomposed into the stretching and bending strains of the midsurface. One could compute them using Eqs. (23) and (24), written in terms of the reference state $\\bar{\\bf x}$ and the deformed state $\\mathbf{x}$ of the midsurface. As an easier alternative, we directly evaluate strains with the NDF $\\mathbf{u}$ of the midsurface using (5)-(main matter). Next, we prove that the two formulations are identical following [3]). ", "page_idx": 19}, {"type": "text", "text": "Lemma B.1 (Deformation gradient). Deformation gradient $\\mathbf{u}_{,\\alpha}$ can be written as $\\mathbf{u}_{,\\alpha}=\\varphi_{\\alpha\\lambda}\\bar{\\mathbf{a}}^{\\lambda}+$ $\\varphi_{\\alpha3}\\mathbf{\\bar{a}}^{3}$ where the components of the gradients $\\varphi_{\\alpha\\lambda},\\varphi_{\\alpha3}$ are defined as ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\varphi_{\\alpha\\lambda}:=u_{\\lambda}|_{\\alpha}-\\bar{b}_{\\alpha\\lambda}u_{3},\\;a n d}}\\\\ {{\\varphi_{\\alpha3}:=u_{3,\\alpha}+\\bar{b}_{\\alpha}^{\\lambda}u_{\\lambda}.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Proof. Given deformation field $\\mathbf{u}$ of the midsurface described in contravariant basis as $\\mathbf{u}=u_{\\lambda}\\bar{\\mathbf{a}}^{\\lambda}+$ $u_{3}\\mathbf{\\bar{a}}^{3}$ , we compute the deformation gradient as follows: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{u}_{,\\alpha}=\\mathbf{u}|_{\\alpha}=u_{\\lambda}|_{\\alpha}\\bar{\\mathbf{a}}^{\\lambda}+u_{\\lambda}\\bar{\\mathbf{a}}^{\\lambda}|_{\\alpha}+u_{3}|_{\\alpha}\\bar{\\mathbf{a}}^{3}+u_{3}\\bar{\\mathbf{a}}^{3}|_{\\alpha}\\quad}\\\\ {=u_{\\lambda}|_{\\alpha}\\bar{\\mathbf{a}}^{\\lambda}+u_{\\lambda}\\bar{b}_{\\alpha}^{\\lambda}\\bar{\\mathbf{a}}^{3}+u_{3,\\alpha}\\bar{\\mathbf{a}}^{3}-u_{3}\\bar{b}_{\\alpha\\lambda}\\bar{\\mathbf{a}}^{\\lambda},}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where we use the following identities from the shell theory [3] to arrive at the bottom part of the previous equation: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\bar{\\mathbf{a}}^{3}|_{\\alpha}=\\bar{\\mathbf{a}}_{,\\alpha}^{3}=-\\bar{b}_{\\alpha\\lambda}\\bar{\\mathbf{a}}^{\\lambda}=-\\bar{b}_{\\alpha}^{\\lambda}\\bar{\\mathbf{a}}_{\\lambda},}\\\\ &{\\bar{\\mathbf{a}}^{\\lambda}|_{\\alpha}=\\bar{b}_{\\alpha}^{\\lambda}\\bar{\\mathbf{a}}^{3}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Finally, we rewrite them as ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{u}_{,\\alpha}=\\varphi_{\\alpha\\lambda}\\bar{\\mathbf{a}}^{\\lambda}+\\varphi_{\\alpha3}\\bar{\\mathbf{a}}^{3}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Theorem B.2 (Membrane strain). Membrane strain (quantifying/measuring in-plane stretching) can be written as a function of the deformation gradient in the following form: ", "page_idx": 20}, {"type": "equation", "text": "$$\n{\\varepsilon}_{\\alpha\\beta}=\\frac12({\\varphi}_{\\alpha\\beta}+{\\varphi}_{\\beta\\alpha}+{\\varphi}_{\\alpha\\lambda}{\\varphi}_{\\beta}^{\\lambda}+{\\varphi}_{\\alpha3}{\\varphi}_{\\beta3}).\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Proof. We start with membrane strain given as the difference of metric tensors (first fundamental form) (23): ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\displaystyle\\varepsilon_{\\alpha\\beta}:=\\frac{1}{2}(a_{\\alpha\\beta}-\\bar{a}_{\\alpha\\beta}),}}\\\\ {{\\displaystyle\\varepsilon_{\\alpha\\beta}=\\frac{1}{2}({\\bf a}_{\\alpha}\\cdot{\\bf a}_{\\beta}-\\bar{{\\bf a}}_{\\alpha}\\cdot\\bar{{\\bf a}}_{\\beta}).}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Substituting the tangent basis vectors ${\\bf a}_{\\alpha}$ ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathbf{a}_{\\alpha}=\\mathbf{x},_{\\alpha}=\\bar{\\mathbf{x}},_{\\alpha}+\\mathbf{u},_{\\alpha}=\\bar{\\mathbf{a}}_{\\alpha}+\\mathbf{u},_{\\alpha}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "gives us updated strain in terms of deformation $\\mathbf{u}$ : ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\varepsilon_{\\alpha\\beta}=\\frac{1}{2}(\\bar{\\bf a}_{\\alpha}\\cdot{\\bf u},\\beta+\\bar{\\bf a}_{\\beta}\\cdot{\\bf u},_{\\alpha}+{\\bf u},_{\\alpha}\\cdot{\\bf u},_{\\beta}).\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Assuming the following identities from Kirchhoff-Love shell hypothesis [3]: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\bar{\\mathbf{a}}_{\\alpha}\\cdot\\bar{\\mathbf{a}}^{\\beta}=\\delta_{\\alpha}^{\\beta},\\bar{\\mathbf{a}}^{3}=\\bar{\\mathbf{a}}_{3},\\bar{\\mathbf{a}}_{\\alpha}\\cdot\\bar{\\mathbf{a}}^{3}=\\bar{\\mathbf{a}}^{\\alpha}\\cdot\\bar{\\mathbf{a}}_{3}=0,\\bar{\\mathbf{a}}^{3}\\cdot\\bar{\\mathbf{a}}^{3}=1,\\mathrm{~and}}\\\\ &{\\bar{a}^{\\alpha\\beta}=\\bar{\\mathbf{a}}^{\\alpha}\\cdot\\bar{\\mathbf{a}}^{\\beta},A_{\\beta}^{\\alpha}=A_{\\beta\\lambda}\\bar{a}^{\\lambda\\alpha},}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "and considering the above lemma for the deformation gradient $\\mathbf{u}_{,\\alpha}$ , we finally obtain the target formulation for strain: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\varepsilon_{\\alpha\\beta}=\\frac{1}{2}(\\varphi_{\\alpha\\beta}+\\varphi_{\\beta\\alpha}+\\varphi_{\\alpha\\lambda}\\varphi_{\\beta}^{\\lambda}+\\varphi_{\\alpha3}\\varphi_{\\beta3}).\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Theorem B.3 (Bending strain). Bending strain (measuring the change in curvature) can be written as a function of the deformation gradient in the following form: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\kappa_{\\alpha\\beta}\\approx-\\varphi_{\\alpha3}|_{\\beta}-\\bar{b}_{\\beta}^{\\lambda}\\varphi_{\\alpha\\lambda}+\\varphi_{3}^{\\lambda}(\\varphi_{\\alpha\\lambda}|_{\\beta}+\\frac{1}{2}\\bar{b}_{\\alpha\\beta}\\varphi_{\\lambda3}-\\bar{b}_{\\beta\\lambda}\\varphi_{\\alpha3}).\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Proof. The bending strain of the midsurface is defined as the difference of curvature tensors (second fundamental form) in the reference and deformed configurations: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\kappa_{\\alpha\\beta}:=\\bar{b}_{\\alpha\\beta}-b_{\\alpha\\beta}}\\\\ &{\\kappa_{\\alpha\\beta}=\\mathbf{a}_{\\alpha}\\cdot\\mathbf{a}_{3,\\beta}-\\bar{\\mathbf{a}}_{\\alpha}\\cdot\\bar{\\mathbf{a}}_{3,\\beta}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Using (42) and (18), we rewrite strain using deformation gradients as: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\kappa_{\\alpha\\beta}=(\\bar{\\bf a}_{\\alpha}+{\\bf u},_{\\alpha})\\cdot(\\bar{\\bf a}_{3,\\beta}+{\\bf w},_{\\beta})-\\bar{\\bf a}_{\\alpha}\\cdot\\bar{\\bf a}_{3,\\beta}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Further simplification and applying identity (38) leads to: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\kappa_{\\alpha\\beta}=\\bar{\\bf a}_{\\alpha}\\cdot{\\bf w},_{\\beta}+{\\bf u},_{\\alpha}\\cdot{\\bf w},_{\\beta}-\\bar{b}_{\\beta}^{\\lambda}{\\bf u},_{\\alpha}\\cdot\\bar{\\bf a}_{\\lambda}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Using Lemma B.1 for deformation gradients $\\mathbf{u}_{,\\alpha}$ and $\\mathbf{w}_{,\\beta}$ $_{\\beta},i.e,\\,{\\bf w}_{,\\beta}=(w_{\\lambda}|_{\\beta}-\\bar{b}_{\\lambda\\beta}w_{3})\\bar{\\bf a}^{\\lambda}+(w_{3,\\beta}+$ $\\bar{b}_{\\beta}^{\\lambda}w_{\\lambda})\\bar{\\mathbf{a}}^{3}$ and with the shell identities of (44), we arrive at: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\kappa_{\\alpha\\beta}=w_{\\alpha}|_{\\beta}-\\bar{b}_{\\alpha\\beta}w_{3}-\\bar{b}_{\\beta}^{\\lambda}\\varphi_{\\alpha\\lambda}+\\varphi_{\\alpha}^{\\lambda}(w_{\\lambda}|_{\\beta}-\\bar{b}_{\\lambda\\beta}w_{3})}\\\\ {+\\varphi_{\\alpha3}(w_{3,\\beta}+\\bar{b}_{\\beta}^{\\lambda}w_{\\lambda})}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "With the Kirchhoff-Love normal hypothesis and neglecting cubic terms, we can approximate the components of w as the following: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r}{{w_{3}}\\approx-\\displaystyle\\frac{1}{2}{w_{\\lambda}}{w^{\\lambda}}{=-\\frac{1}{2}\\varphi_{\\alpha3}\\varphi_{3}^{\\alpha}},}\\\\ {{w_{\\alpha}}\\approx-\\varphi_{\\alpha3}+\\varphi_{\\alpha}^{\\lambda}\\varphi_{\\lambda3}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "First eliminating the component $w_{3}$ and subsequently $w_{\\alpha}$ , we arrive at the target strain formulation: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{\\kappa_{\\alpha\\beta}\\approx w_{\\alpha}|_{\\beta}-\\bar{b}_{\\beta}^{\\lambda}\\varphi_{\\alpha\\lambda}+\\displaystyle\\frac{1}{2}\\bar{b}_{\\alpha\\beta}w_{\\lambda}w^{\\lambda}+w^{\\lambda}|_{\\beta}\\varphi_{\\alpha\\lambda}+\\bar{b}_{\\beta}^{\\lambda}w_{\\lambda}\\varphi_{\\alpha3}}}\\\\ {{\\kappa_{\\alpha\\beta}\\approx-\\varphi_{\\alpha3}|_{\\beta}-\\bar{b}_{\\beta}^{\\lambda}\\varphi_{\\alpha\\lambda}+\\varphi_{3}^{\\lambda}(\\varphi_{\\alpha\\lambda}|_{\\beta}+\\displaystyle\\frac{1}{2}\\bar{b}_{\\alpha\\beta}\\varphi_{\\lambda3}-\\bar{b}_{\\beta\\lambda}\\varphi_{\\alpha3}).}}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "C Belytschko Obstacle Course ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "In the following, we provide detailed information for reproducing the Belytschko obstacle course experiments from Sec. 5.1-(main matter). We visualise the NDF along the direction of applied load in Fig. III that closely matches the reference solutions [6]. ", "page_idx": 21}, {"type": "text", "text": "C.1 Square Plate ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "In the first test case, we consider a simple bending problem of a flat square shell [14]. It is simply supported at all edges and is subject to a uniform load. The plate has a side length of $L=100\\,\\mathrm{m}$ and a thickness $h=1\\,\\mathrm{m}$ and, therefore, falls under the scope of Kirchhoff-Love thin shell theory. The material parameters are given as $E=1{\\mathrm{e}}7\\,{\\mathrm{Pa}}$ and $\\nu=0$ . We represent the reference geometry with (2)-(main matter) and impose Dirichlet boundary constraints by constructing a distance function to the plate edges. This is followed by training an NDF to solve for quasi-static displacement minimising the total potential energy (31) subject to uniformly distributed external load $\\bar{\\mathbf{f}^{\\top}}=[0,0,-1]^{\\top}$ . With the simply supported constraints along the boundary defined by $\\partial\\Omega=\\{(\\xi^{1},0),(0,\\dot{\\xi}^{2}),(\\xi^{1},L),(L,\\xi^{2})\\}$ , we define NDF as follows: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{{\\bf u}({\\boldsymbol\\xi};\\Theta)=\\mathcal{F}_{\\Theta}({\\boldsymbol\\xi})\\mathcal{B}({\\boldsymbol\\xi}),}}\\\\ {{\\mathrm{s.t.}\\;\\mathcal{B}({\\boldsymbol\\xi}):=\\xi^{1}\\xi^{2}(L-\\xi^{1})(L-\\xi^{2}).}}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "We train with the loss (7)-(main matter) for 2500 iterations and illustrate the solution in Fig. 5-(main matter) where the displacement is scaled up by a factor of 50. The maximum displacement $u_{3}$ at the centre of the plate is found to be 0.487 after convergence and exactly matches the reference solution [57]. Fig. III-(left) shows the obtained NDF along the $z$ -axis for the square plate. ", "page_idx": 21}, {"type": "text", "text": "C.2 Scordelis-Lo Roof ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "The reference geometry of the Scordelis-Lo roof is given by the following parametric expression: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\bar{\\mathbf{x}}(\\pmb{\\xi})=[R\\cos(\\xi^{1}+50^{\\circ}),R\\sin(\\xi^{1}+50^{\\circ}),\\xi^{2}]^{\\top},\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Concerning the boundary conditions, the structure is supported with a rigid diaphragm along the edges, i.e., $\\mathit{\\dot{\\partial}}\\mathrm{\\Omega}^{\\mathrm{\\Delta}}\\mathrm{\\Delta}$ . The material properties are set as $E=4.32\\mathrm{e}8\\,\\mathrm{Pa},\\nu=$ and a uniformly distributed load $\\dot{\\mathbf{f}}=[0,-90,0]^{\\top}$ is applied to it. ", "page_idx": 22}, {"type": "text", "text": "We optimise NDF under boundary conditions as follows: ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathbf{u}(\\pmb{\\xi};\\Theta)=[\\mathcal{F}_{\\Theta1}\\mathcal{B}(\\pmb{\\xi}),\\mathcal{F}_{\\Theta2}\\mathcal{B}(\\pmb{\\xi}),\\mathcal{F}_{\\Theta3}]^{\\top},\n$$", "text_format": "latex", "page_idx": 22}, {"type": "equation", "text": "$$\n.\\mathrm{t}.\\;B(\\pmb{\\xi}):=\\xi^{2}(L-\\xi^{2})\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Fig. III-(second on the left) visualises the computed NDF along the $y$ -axis. ", "page_idx": 22}, {"type": "text", "text": "C.3 Pinched Cylinder ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Pinched Cylinder. Finally, we consider the pinched cylinder problem, i.e., one of the most severe tests for both inextensional bending modes and complex membrane states. As shown in Fig. 5- (main matter), a cylindrical shell is pinched with two diametrically opposite unit loads applied at the middle of the shell. We consider two cases: First, a shell with ends supported by rigid diaphragms [6] (similar to Scordelis-Lo roof), and second, a cylinder with free ends [57]. We define the cylinder geometry with (2)-(main matter), where $R\\,=\\,300\\,\\mathrm{m},L\\,=\\,600\\,\\mathrm{m}$ and the thickness is set to $h\\,=\\,3\\,\\mathrm{m}$ ; the material properties are given as $E\\,=\\,3\\mathrm{e6\\,Pa}$ , $\\nu\\,=\\,0.3$ . In contrast to the previous test geometries, which required specifying only the Dirichlet boundary conditions, we additionally account for the periodicity constraint along the circular cross-sections. To model this, we define NDF as $\\mathcal{F}_{\\Theta}(\\cos\\xi^{\\mathrm{1}},\\sin\\xi^{\\mathrm{1}},\\xi^{\\mathrm{2}})$ , instead of the default case $\\mathcal{F}_{\\Theta}(\\xi^{1},\\xi^{2})$ . A crucial challenge of pinched cylinder test case is modelling load at singular points in the sample space. To achieve this, we adapt the potential energy functional (31)-(main matter)\u2014described previously for uniformly distributed forces \u2014to the point load setting, rewriting it as $\\begin{array}{r}{\\mathcal{E}^{\\mathrm{pot}}[{\\bf u}]=\\int_{\\Omega}\\bar{\\Psi^{}}\\,d\\Omega-\\sum_{\\Omega_{0}}{\\bf f}\\cdot{\\bf u}}\\end{array}$ , where $\\Omega_{0}$ is the set of points of the load application. We apply point loads $\\mathsf{f}\\in\\{[0,0,1]^{\\top},[\\bar{0},0,-1]^{\\top}\\}$ at diametrically opposite points $\\Omega_{0}\\bar{=}\\bar{\\{}(90^{\\circ},300),(2\\bar{7}\\bar{0^{\\circ}},\\bar{3}00)\\}$ . In the case of distributed load, we previously proposed computing external and hyperelastic strain energy at an identical set of stratified samples in the parametric domain. We depart from this setting for point loads: At each training iteration, we sample all points from $\\Omega_{0}$ for external energy, whereas random stratified samples are used for computing strain energy. To speed up the convergence, we set $E=30\\,\\mathrm{Pa}$ instead of the original value $E=3\\mathrm{e}6\\,\\mathrm{Pa}$ ; this simply scales the displacement field in the linear setting as shown in [5]. As mentioned, the constrained cylinder is supported with a rigid diaphragm along the edges, i.e., $\\partial\\Omega=\\{(\\xi^{1},0),(\\xi^{1},L)\\}$ , therefore, we optimise NDF using ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\quad\\mathbf{u}(\\pmb{\\xi};\\Theta)=[\\mathcal{F}_{\\Theta1}\\mathcal{B}(\\pmb{\\xi}),\\mathcal{F}_{\\Theta2},\\mathcal{F}_{\\Theta3}\\mathcal{B}(\\pmb{\\xi})]^{\\top},}\\\\ &{\\mathrm{s.t.}\\;\\mathcal{B}(\\pmb{\\xi}):=\\xi^{2}(L-\\xi^{2}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Next, we consider a pinched cylinder with free ends, i.e. $\\partial\\Omega=\\emptyset$ . Without any boundary constraints, the cylinder can move rigidly due to the applied force, and such rigid body motion should be factored out. Therefore, to suppress it, we restrict the displacement of the point under the load in directions other than the direction of the force vector. We achieve this by enforcing $\\hat{u}_{1}=0,\\hat{u}_{2}=0$ at load points. The NDF parametrisation factoring out the rigid motion reads as: ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{u}(\\pmb{\\xi};\\Theta)=[\\mathcal{F}_{\\Theta1}\\mathcal{B}_{1}(\\pmb{\\xi})\\mathcal{B}_{2}(\\pmb{\\xi}),\\mathcal{F}_{\\Theta2}\\mathcal{B}_{1}(\\pmb{\\xi})\\mathcal{B}_{2}(\\pmb{\\xi}),\\mathcal{F}_{\\Theta3}]^{\\top},}\\\\ &{\\mathrm{~i.t.~}\\mathcal{B}_{1}(\\pmb{\\xi}):=1-e^{-((\\pmb{\\xi}^{1}-90^{\\circ})^{2}+(\\pmb{\\xi}^{2}-300)^{2})/\\sigma},\\mathrm{~and}}\\\\ &{\\quad\\mathcal{B}_{2}(\\pmb{\\xi}):=1-e^{-((\\pmb{\\xi}^{1}-270^{\\circ})^{2}+(\\pmb{\\xi}^{2}-300)^{2})/\\sigma}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "In both examples with the pinched cylinder, we monitor the displacements under the loading point. As shown in Fig. 5-(main matter) and Tab. 1-(main matter), it qualitatively and quantitatively converges to the reference solution. Fig. III-(second from the right, and the rightmost) shows the obtained NDFs along the $z$ -axis for the two cases of the pinched cylinder. ", "page_idx": 22}, {"type": "text", "text": "D Simulation Details ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "We first describe the extension of NeuralClothSim for visualising trajectory to equilibria. Then, similar to the previous section, we provide boundary and loading conditions for all experiments here. ", "page_idx": 22}, {"type": "text", "text": "D.1 Cloth Trajectory Visualisation ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We next visualise the transition from the reference to the equilibrium state: We extend the NDF (3) to ${\\bf u}(\\xi,t;\\Theta)$ modelling timedependent deformations, $\\forall t\\in[0,T]$ , with $T=$ 1. For a smooth and physically-plausible interpolation from the initial state $\\bar{\\bf x}(\\xi)$ to the deformed $\\mathbf{x}(\\pmb{\\xi},T)$ , we impose initial conditions and a temporal regulariser. ", "page_idx": 23}, {"type": "text", "text": "Initial Cloth Configuration. If we optimise the time-dependent NDF only with the potential energy loss (7), the model finds the converged equilibrium states of the underlying cloth model ", "page_idx": 23}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/25e92a839d5a38b7a6f03f7a252896b97708451af894fda912bd7b96b1bd79b8.jpg", "img_caption": ["Figure IV: Napkin simulation upon convergence under gravity with non-boundary constraints. "], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "$\\forall\\bar{t}\\in[0,T]$ . To start from the initial undeformed cloth state, initial conditions leading to zero displacement and velocity need to be explicitly incorporated. Hence, we use the function $\\breve{\\mathbb{Z}}(t):=t^{2}$ as an additional multiplying factor in (3) leading to $\\bar{\\mathbf{u}}(\\pmb{\\xi},0)=\\mathbf{0}$ , and $\\dot{\\mathbf{u}}(\\pmb{\\xi},0)=\\mathbf{0}$ . ", "page_idx": 23}, {"type": "text", "text": "Temporal Smoothing. Without any temporal prior, the transition from the reference to the equilibrium state will be too swift and not smooth. Therefore, we use an additional regularisation loss $\\mathbf{\\bar{\\mathcal{L}}}_{t}(\\boldsymbol{\\Theta}):=$ N|\u2126\u2126|Nt iN=\u21261 jN=t112\u03c1| u\u02d9(\u03bei, tj; \u0398)|2 constraining the cloth velocity u\u02d9. Specifically, the smooth optimised trajectory ${\\bf{u}}^{*}(\\xi,t;\\Theta)$ is obtained with the final loss $\\mathcal{L}+\\mathcal{L}_{t}$ , where, similar to $\\mathcal{L}_{t}(\\boldsymbol{\\Theta})$ , the physics loss $\\mathcal{L}(\\Theta)$ is now evaluated over the entire parametric-temporal domain. Additionally, for some examples, such as sleeve compression/torsion, we drive changes in the deformation trajectory by imposing time-varying Dirichlet boundary conditions. We note that the time-stepping is performed purely for visualisation, and we do not model the simulation dynamics that would require taking into account inertial and damping effects. For linear isotropic material, we set $\\rho=0.144\\,\\mathrm{\\dot{kg}\\,m^{-2}}$ and for the non-linear orthotropic material from Clyde et al. [15]. ", "page_idx": 23}, {"type": "text", "text": "D.2 Napkin ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "The force in this experiment is defined as $\\mathbf{f}\\,=\\,[0,-9.8\\rho,0]^{\\top}$ and the boundary conditions read $\\partial\\Omega=\\{(0,0),(0,L)\\}$ . The result of a napkin droop with a fixed corner is shown in Fig. 1-(main matter). NDF in this experiment is parametrised as follows: ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\quad\\quad\\mathbf{u}(\\pmb{\\xi},t;\\Theta)=\\mathcal{F}_{\\Theta}(\\pmb{\\xi},t)\\mathcal{Z}(t)\\mathcal{B}_{\\mathrm{top\\underline{{{\\mathrm{.left}}}}\\underline{{\\mathrm{.corner}}}}}(\\pmb{\\xi}),}\\\\ &{\\mathrm{s.t.}\\ \\mathcal{B}_{\\mathrm{top\\underline{{{\\mathrm{.left}}}}\\underline{{\\mathrm{.corner}}}}}(\\xi^{1},\\xi^{2}):=1-e^{-((\\xi^{1})^{2}+(\\xi^{2}-L)^{2})/\\sigma}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "The experimental result of a napkin droop with moving corners is shown in Fig. 3-(main matter). The boundary condition read $\\partial\\bar{\\Omega}=\\{(0,L\\bar{)},(L,L)\\}$ . The NDF parametrisation in this scenario is as follows: ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{u}=\\mathcal{F}_{\\Theta}\\mathcal{L}\\mathcal{B}_{\\mathrm{top\\_left}}\\mathcal{B}_{\\mathrm{top\\_right}}+(1-\\mathcal{B}_{\\mathrm{top\\_left}})\\mathcal{B}_{\\mathrm{motion}}-(1-\\mathcal{B}_{\\mathrm{top\\_right}})\\mathcal{B}_{\\mathrm{motion}},}\\\\ &{\\mathrm{s.t.}\\;\\mathcal{B}_{\\mathrm{top\\_left}}(\\xi^{1},\\xi^{2}):=1-e^{-((\\xi^{1})^{2}+(\\xi^{2}-L)^{2})/\\sigma},}\\\\ &{\\mathcal{B}_{\\mathrm{top\\_right}}(\\xi^{1},\\xi^{2}):=1-e^{-((\\xi^{1}-L)^{2})+(\\xi^{2}-L)^{2})/\\sigma},\\mathrm{~and}}\\\\ &{\\mathcal{B}_{\\mathrm{motion}}(t):=[0.2t,0,0]^{T}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "The experimental result for napkin droop with fixed edges is shown in Fig. VII. The boundary conditions are defined as $\\partial\\Omega=\\ \\b{\\hat{\\{(\\xi^{1},0),(0,\\xi^{2})\\},\\forall(\\xi^{1},\\xi^{2}\\bar{)}\\in[0,L]^{2}}}$ and the NDF parameterisation reads ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{u}=\\mathcal{F}_{\\Theta}\\mathcal{L}\\mathcal{B}_{\\mathrm{left\\mathrm{-}e d g e}}\\mathcal{B}_{\\mathrm{right\\mathrm{-}e d g e}}}\\\\ &{.\\;\\mathcal{B}_{\\mathrm{left\\mathrm{-}e d g e}}(\\boldsymbol{\\xi}^{1}):=1-e^{-(\\boldsymbol{\\xi}^{1})^{2}/\\sigma},\\;\\mathrm{and}}\\\\ &{\\;\\mathcal{B}_{\\mathrm{right\\mathrm{-}e d g e}}(\\boldsymbol{\\xi}^{2}):=1-e^{-(\\boldsymbol{\\xi}^{2})^{2}/\\sigma}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "D.3 Sleeve ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "In the experiment with a sleeve, no external force is exerted: $\\mathbf{f}=[0,0,0]^{T}$ . The boundary region is defined by: $\\partial\\Omega=\\{(\\xi^{1},0),(\\xi^{1},L)\\},\\forall\\xi^{1}\\in[0,2\\pi)$ . The NDF is parametrised as follows: ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{u}=\\mathcal{F}_{\\Theta}\\mathcal{L}\\mathcal{B}_{\\mathrm{bottom.}\\mathrm{rim}}\\mathcal{B}_{\\mathrm{top.}\\mathrm{rim}}+(1-\\mathcal{B}_{\\mathrm{bottom.}\\mathrm{rim}})\\mathcal{B}_{\\mathrm{motion}}-(1-\\mathcal{B}_{\\mathrm{top.}\\mathrm{rim}})\\mathcal{B}_{\\mathrm{motion}},}\\\\ &{\\mathcal{B}_{\\mathrm{bottom.}\\mathrm{rim}}(\\xi^{2}):=1-e^{-(\\xi^{2})^{2}/\\sigma},}\\\\ &{\\mathcal{B}_{\\mathrm{top.}\\mathrm{rim}}(\\xi^{2}):=1-e^{-(\\xi^{2}-L)^{2}/\\sigma},\\mathrm{~and}}\\\\ &{\\mathcal{B}_{\\mathrm{motion}}(t):=[0,0.1t,0]^{\\top}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "Sleeve twist is achieved by introducing rotation displacement $\\begin{array}{r}{\\theta=\\frac{3\\pi}{4}}\\end{array}$ . The NDF in this scenario is parametrised as follows: ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{u}=\\mathcal{F}_{\\mathrm{e}}\\mathcal{L}(1-\\ensuremath{B_{\\mathrm{bottom.}\\mathrm{rim}}})(1-\\ensuremath{B_{\\mathrm{top.}\\mathrm{rim}}})-\\ensuremath{B_{\\mathrm{bottom.}\\mathrm{rim}}}\\ensuremath{B_{\\mathrm{bottom.}\\mathrm{motion}}}+\\ensuremath{B_{\\mathrm{top.}\\mathrm{rim}}}\\ensuremath{B_{\\mathrm{top.}\\mathrm{motion}}},}\\\\ &{\\ensuremath{B_{\\mathrm{bottom.}\\mathrm{rim}}}(\\xi^{2}):=e^{-(\\xi^{2})^{2}/\\sigma},}\\\\ &{\\ensuremath{B_{\\mathrm{top.}\\mathrm{rim}}}(\\xi^{2}):=e^{-(\\xi^{2}-L)^{2}/\\sigma},}\\\\ &{\\ensuremath{B_{\\mathrm{bottom.}\\mathrm{motion}}}(\\xi^{1},t):=\\left[\\begin{array}{l}{R(\\cos(\\xi^{1}-\\theta t)-\\cos\\xi^{1})}\\\\ {R(\\sin(\\xi^{1}-\\theta t)-\\sin\\xi^{1})}\\end{array}\\right],\\;\\mathrm{and}}\\\\ &{\\ensuremath{B_{\\mathrm{top.}\\mathrm{motion}}}(\\xi^{1},t):=\\left[\\begin{array}{l}{R(\\cos(\\xi^{1}+\\theta t)-\\cos\\xi^{1})}\\\\ {0}\\\\ {R(\\sin(\\xi^{1}+\\theta t)-\\sin\\xi^{1})}\\end{array}\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "We demonstrate sleeve torsion in Fig. V-(left) and buckling in V-(right). ", "page_idx": 24}, {"type": "text", "text": "D.4 Skirt ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "See Fig. XIII for the experimental results with skirt. The reference skirt geometry is defined as: ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\quad~~~\\bar{\\mathbf{x}}(\\pmb{\\xi})=[r\\cos\\xi^{1},\\xi^{2},r\\sin\\xi^{1}]^{T},~\\forall\\xi^{1}\\in[0,2\\pi);\\xi^{2}\\in[0,L],}\\\\ &{\\mathrm{s.t.}~r(\\xi^{2}):=\\frac{\\left(R_{\\mathrm{top}}-R_{\\mathrm{bottom}}\\right)\\xi^{2}}{L}+R_{\\mathrm{bottom}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "The skirt deform in this experiment under gravity, i.e., $\\mathbf{f}=[0,-9.8\\rho,0]^{T}$ ; the boundary region is given by $\\partial\\Omega=\\{(\\xi^{1},L)\\},\\dot{\\forall}\\xi^{1}\\in[0,2\\pi)$ . NDF is parametrised as follows: ", "page_idx": 24}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 24}, {"type": "equation", "text": "$$\n\\mathbf{u}=\\mathcal{F}_{\\Theta}\\mathcal{T}(1-\\mathcal{B}_{\\mathrm{top\\underline{{\\taui}}m}}),\n$$$$\n\\begin{array}{r}{\\mathbf{u}=\\mathcal{r}_{\\Theta}\\mathcal{L}(\\mathbf{1}-\\mathcal{D}_{\\mathrm{top}_{-}\\mathrm{rim}}),\\quad\\quad}\\\\ {\\mathrm{s.t.}\\;\\mathcal{B}_{\\mathrm{top}_{-}\\mathrm{rim}}(\\xi^{2}):=e^{-(\\xi^{2}-L)^{2}/\\sigma}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "The conditions for skirt twisting (angular displacement) are similar to those of the sleeve twist (applied at the top rim) in Sec. D.3. ", "page_idx": 24}, {"type": "text", "text": "E Ablations ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "E.1 Activation Function ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Experimental results for a sleeve twist with different activation functions in the NDF network are shown in Fig. V. While ReLU lacks support for higher-order derivatives leading to artefacts, a network with GELU activation can only represent low-frequency deformations. Our usage of sine activation [53] overcomes these limitations and successfully represents fine folds. ", "page_idx": 24}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/facb1cc86096c43060ab2b38713ccfdb0aa614d640f88d7f99032f80df8ea6ee.jpg", "img_caption": ["Figure V: Activations (left). Results of our method with different activation functions (ReLU, GELU and Siren). Contravariant vs Cartesian basis (right). Prediction of NDF output in the Cartesian coordinate system is well conditioned compared to the local contravariant coordinate system. "], "img_footnote": [], "page_idx": 25}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/77b0f02af3bf58ee1a6ab37e51bd40a8766fd20919714b992097fb3be6a84c30.jpg", "img_caption": ["Figure VI: Ablation study for boundary conditions, with Dirichlet (top) and periodic (bottom) boundary conditions. "], "img_footnote": [], "page_idx": 25}, {"type": "text", "text": "E.2 NDF Coordinate System ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "In the Kirchhoff-Love formulation, strain energy computation is performed in the local contravariant (or covariant) basis. This leaves us with an obvious choice of predicting covariant components of the NDF in a locally varying contravariant basis (Fig. I(b)). Hence, (a) we predict NDF in a contravariant basis and use it directly in strain calculation (ablated version), and (b) we predict NDF in a global basis and transform its components to a local basis before strain calculation. The second case leverages the knowledge of local basis (which is not guessed) and leads to better convergence (Fig. V). ", "page_idx": 25}, {"type": "text", "text": "E.3 Non-linearity of Strains ", "text_level": 1, "page_idx": 25}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/77e1bab29861f36d3194f5870958615879944e7f52eec1bf0b169a556fb3cd31.jpg", "img_caption": ["Figure VII: Linear vs non-linear strain. We demonstrate napkin drooping under a downward force. Kirchhoff-Love strain is inherently highly non-linear. "], "img_footnote": [], "page_idx": 25}, {"type": "text", "text": "In the small-strain regime, linearised kinematics is often employed. However, accurate simulation of cloth quasistatics requires modelling of both rigid motion and non-linear deformation. KirchhoffLove membrane and bending strains are non-linear functions of the displacement field and non-linear strain calculation is decisive for obtaining realistic results. Thus, we evaluate the linear approximation of Kirchhoff-Love strain by omitting the non-linear terms in (5)-(main matter). In Fig. VII, we show that a linear approach leads to significant inaccuracies in modelling cloth bending under gravity. ", "page_idx": 25}, {"type": "text", "text": "E.4 Boundary Constraints ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "We perform ablations on the Dirichlet and periodic boundary conditions. We try a soft constraint variation, in which we impose the boundary condition as a loss term in addition to the Kirchhoff-Love energy. This requires empirically determining the optimal loss weight, takes much longer to train and does not guarantee satisfying boundary constraints, as shown in Fig. VI-(left). Our approach with hard constraints avoids all these problems. In the second example, we simulate the compression of a cylindrical sleeve as described in Appendix D.3. As seen in Fig. VI-(right), at $\\xi^{1}=\\pi$ , cylinder (a:) is disconnected if no constraint is specified; (b:) is connected with $\\xi^{1}\\mapsto\\cos\\xi^{1}$ ; (c:) fully models continuity and differentiability forming folds with $\\xi^{1}\\mapsto\\{\\cos\\xi^{1},\\sin\\xi^{1}\\}$ . ", "page_idx": 25}, {"type": "text", "text": "", "page_idx": 26}, {"type": "text", "text": "F Applications ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "F.1 Material-conditioned NDFs ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "For simplicity, we choose the linear elastic materials, i.e. $\\Phi:=\\{\\rho,h,E,\\nu\\}$ . Conditioning on $\\Phi$ allows us to adjust at test time mass density $\\rho$ , cloth thickness $h$ , as well as the linear isotropic elastic properties of the material, i.e., Young\u2019s modulus $E$ and the Poisson\u2019s ratio $\\nu$ . The updated NDF\u2014which is now a function of material as well\u2014reads: ${\\bf u}(\\xi,t,\\Phi;\\Theta)=\\mathcal{F}_{\\Theta}(\\xi,t,\\Phi)\\mathbb{Z}(t)\\mathcal{B}(\\xi)$ , where $\\Phi\\in[\\Phi_{\\mathrm{min}},\\Phi_{\\mathrm{max}}]$ is the continuous range of material parameters. At each training iteration, we uniformly (at random) re-sample $\\Phi$ to explore the entire material domain. At test time, novel simulation can be generated with a single forward pass for any material $\\Phi$ in the valid material range. Unlike latent space conditioning in other fields and problems, the material space conditioning in NeuralClothSim has a direct physical (semantic) interpretation. ", "page_idx": 26}, {"type": "text", "text": "As an example, we train an NDF conditioned on cloth thickness and $\\Phi\\in\\{\\rho,E,\\nu\\}\\times[h_{\\operatorname*{min}},h_{\\operatorname*{max}}]$ with $h_{\\mathrm{min}}~=~0.0005\\,\\mathrm{m}$ and $h_{\\mathrm{max}}~=~0.0025\\,\\mathrm{m}$ . We visualise the simulated result for $h\\ =$ $\\{0.0005,0.0015,0.0025\\}$ , in Fig. 1-(bottom right). ", "page_idx": 26}, {"type": "text", "text": "F.2 NDF Editing ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "In movie and game production, a 3D artist\u2019s workflow includes updating design parameters, which requires multiple repeated simulations from scratch. Such scene parameters include reference state geometry, external forces, and material properties. Material parameters typically constitute a low-dimensional space, so we propose to condition the NDF on material properties. However, other inputs such as shape and pose of reference state, as well as external force, are high-dimensional. Instead of learning simulations over the entire scene space, we offer simulation editing the following way: the user can interrupt the training of NDF at any point, change the scene parameters and continue training for successive improvement. On the other hand, editing can also be done after full convergence (aka pre-training) and then fine-tuned with gradually modified design parameters. Editing an NDF provides multiple advantages over training a new NDF from scratch: It is computationally and memory efficient and allows access to interpolated simulations. ", "page_idx": 26}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/fae36ea34589bbdab1cfd2ec96ad769a4e8387b8ae6408cae3133c548b428a13.jpg", "img_caption": ["Figure VIII: Simulation editing with NeuralClothSim. We show an example of a simulation pre-trained with a fixed reference state and external force. Once converged, we fine-tune the NDF with smoothly varying external force (top) or the pose of the reference geometry (bottom) in each iteration. Fine-tuning a pre-trained NDF with updated design parameters is faster and offers querying of physically-plausible intermediate simulations. "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "In the following, we demonstrate editing of the following scene parameters: (a) external force, and (b) reference state geometry. The key idea is to use the modified scene parameters in the loss function and update the NDF weights with gradient-based optimisation. Specifically, given a cloth geometry $\\bar{\\bf x}$ , external forces f, we train an NDF to obtain a simulation $\\mathbf{u}^{*}$ parameterised by network weights $\\Theta^{*}$ , as described in the main method. As an editing objective, we would like to arrive at a novel simulation corresponding to external force $\\mathbf{f}^{I}$ and/or reference geometry $\\overline{{\\mathbf{x}}}^{I}$ with $I\\in\\mathbb{N}$ training iterations. Here, $I$ is much smaller than the iterations needed for the convergence of the original simulation. We can then fine-tune the pre-trained NDF over iterations $i\\in\\{0,...,I\\}$ by minimising the loss function, $\\mathcal{L}(\\boldsymbol{\\Theta};\\mathbf{f}^{i},\\bar{\\mathbf{x}}^{i})$ to obtain edited and interpolated simulations $\\mathbf{u}^{i},\\boldsymbol\\Theta^{i}$ . Here, we assume a smooth transition of external force or the reference shape from the initial to the edited value, which can be obtained, for example, by linear interpolation, i.e., $\\mathbf{f}^{i}=\\log(\\mathbf{f},\\mathbf{f}^{I},\\mathbf{\\varphi}_{\\overline{{I}}}^{i})$ . ", "page_idx": 26}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/cfb5aec329ff2c15dd86e09cb491b71966d4ab273fd41db4caaeac6160ee815c.jpg", "img_caption": ["Figure IX: Runtime analysis of NeuralClothSim. On the left, we visualise the evolution of the last frame $T=1$ ) over the training iterations. On the right, the plot shows NDF convergence as a function of training time leading to refined simulations. "], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "", "page_idx": 27}, {"type": "text", "text": "We next demonstrate results for dynamic editing of the pre-trained simulations. We conduct two experiments, i.e., editing external forces and editing the 6DoF pose of the reference geometry; the results are visualised in Fig. VIII. First, a short simulation of a napkin is pre-trained as an NDF with a fixed reference state and external force, which takes ${\\approx}12$ minutes. In the first example (top row), we gradually vary the direction and magnitude of the external force by linearly interpolating between the original and the final forces. This leads to the motion of cloth towards the instantaneous force direction. In the second example (bottom row), we smoothly vary the reference poses and the corresponding position of the handles, generating novel edited simulations. Editing reference pose leads to the motion of the cloth towards a fixed force direction but originates from varying initial poses. Note how the change in the input scene parameters propagates to the entire simulation. Notably, fine-tuning is much faster and takes ${\\approx}2$ minutes, leading to a time-saving of ${\\approx}83\\%$ . We show two intermediate simulations in Fig. VIII, and other edited simulations corresponding to each iteration can be queried as well. As the simulation is parameterised by the weights of a neural network (instead of meshes), our proposed way of simulation editing is memory-efficient. ", "page_idx": 27}, {"type": "text", "text": "G Performance ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "The performance of a cloth simulator\u2014such as computation time\u2014is a crucial aspect of its usability. This work focuses on the fundamental challenges of developing an implicit neural quasistatic simulator with new characteristics. Our method does not outperform the classical simulators in all aspects as they are wellengineered and highly optimised. Next, we provide a detailed analysis of NeuralClothSim\u2019s performance. ", "page_idx": 27}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/905b85bac0fe1196c210ea1094748fc908c81518dcbeb95a2800449cb86eeae4.jpg", "img_caption": ["Figure X: Analysis of the sampling strategies. We show the influence of the number of training points on the performance of our method. "], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "G.1 Runtime ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "NeuralClothSim encodes the cloth equilibrium state as an NDF, and, consequently, the bulk of computation time lies in the NDF training (i.e., ", "page_idx": 27}, {"type": "text", "text": "optimisation of the network weights). At inference, extracting the simulated states from NDF as meshes or point clouds requires a single forward pass and is, therefore, fast. In Fig. IX, we provide a runtime analysis of three representative simulations as a function of training time. On the left, we visualise the evolution of the last frame (i.e., equilibria state), showing the refinement of the simulated state with increased training time. Before training, the simulation state is the sum of the reference state and random noisy output from NDF. Within a few minutes of training, NDF generates a reasonable simulated state, which then converges within 30 minutes to one hour; see our supplementary video for the evolution of simulation states over training iterations. On the top-right of Fig. IX, we plot loss values as a function of training time, which shows that our training is stable. As NeuralClothSim is an instance of a physics-informed neural network with a physics loss only (but no data term), the loss is not expected to converge to zero. We monitor the mean NDF over all sampled spatio-temporal points (Fig. IX-(bottom right)) as an additional cue on the simulation refinement. Along with the loss, saturation in mean NDF can be used as a stopping criterion. Note that all our experiments are carried out on a single NVIDIA Quadro RTX 8000 GPU. ", "page_idx": 27}, {"type": "text", "text": "", "page_idx": 28}, {"type": "text", "text": "Similar to classical methods [13], simulation with our approach is not unique, as bifurcation due to buckling can lead to solutions with different folds and wrinkles. Among them, the selection of the simulation outcome depends on the NDF convergence. Specifically, the randomness in training samples and weight initialisation introduces desirable optimisation path variations. In all cases, we observe NDF training to be numerically stable. ", "page_idx": 28}, {"type": "text", "text": "G.2 Sampling Strategy ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Next, we study the influence of the number of training points on the performance of our method. Input samples to NDF include curvilinear $N_{\\Omega}$ and temporal stratified $N_{t}$ coordinates (for trajectory visualisation) over which the loss is computed at each training iteration. For a napkin of size $\\Omega=[0,1]^{2}$ , we simulate for $t\\in[0,\\bar{1}]$ by training NDF for $10\\mathbf{k}$ iterations with number of sampling points $N_{\\Omega}\\in\\{5,10,15,20,25\\}$ . Computation times for all experiments are comparable (and slightly higher for the higher number of samples) as they share the GPU memory and are processed in parallel. Fig. X shows the qualitative and quantitative performance. We observe that higher $N_{\\Omega}$ leads to faster learning, as seen in the qualitative result in the top row and the mean displacement plot in the bottom ", "page_idx": 28}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/153d1ab4f9422be3473bd303f575dd3dac148d7ad21078ac95e1ceb892e1d0dc.jpg", "img_caption": ["Figure XI: NDF weight initialisation allows us to control the simulation outcome. We can generate multiple valid equilibrium solutions or reproduce a simulation. "], "img_footnote": [], "page_idx": 28}, {"type": "text", "text": "row. Furthermore, it leads to stable optimisation, as seen in the loss plot. Future work could explore advanced sampling techniques for improved performance. ", "page_idx": 28}, {"type": "text", "text": "G.3 Simulation Reproducibility ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Next, we investigate whether NeuralClothSim simulations are deterministic. Cloth simulation does not have a single ground truth; rather, it can have multiple equilibria solutions under the same input parameters (template, material, and boundary conditions). While FEM-based cloth simulators are designed to be deterministic, in practice, there are several factors\u2014such as numerical precision and parallel computing\u2014that can lead to slight variations in the simulation results between runs. We note that a mesh-based simulator running the same simulation scenario on different machines generates non-identical results (but reproducible ones on the same machine). Interestingly, we can replicate such behaviour by employing the sensitivity of our method to the initialisation of the neural network weights. We conducted two experiments leading to the following observations: 1) We can obtain reproducible results if we set the random seed leading to the same network initialisation (Fig. XI(left)), and 2) We observe non-identical results if we do not set the random seed (Fig. XI-(right)). ", "page_idx": 28}, {"type": "text", "text": "H Additional Comparisons ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "NeuralClothSim is the first step towards neural implicit cloth quasistatics. Although less mature compared to FEM-based simulators, it offers several desired characteristics; See Table III for a comparison between existing cloth simulators and our approach. ", "page_idx": 28}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/18c7402dd8d4c72673240ae4fc2ebd52c740ca0b69bddae5d7c8a5478fb33fdc.jpg", "img_caption": ["Figure XII: Runtime comparison of DiffARCSim [38] and our approach. Like most classical simulators, DiffARCSim integrates forward in time, solving for a 3D deformation field at each time step, in contrast to our approach which optimises for the 4D spatio-temporal NDF. With decreasing computational budget, DiffARCSim produces converged simulated states of the cloth at low resolutions or only early frames at high resolutions. On the other hand, NeuralClothSim offers partially converged simulations at arbitrary resolutions as the computational budget decreases. "], "img_footnote": [], "page_idx": 29}, {"type": "table", "img_path": "pzJjlnMvk5/tmp/18d1b5c1cb7d3f6893173d60da6f45aa9fca9cba6cbef314a7791213413487c2.jpg", "table_caption": ["Table III: Conceptual comparison of our NeuralClothSim to previous state-of-the-art cloth simulators. Our approach enables highly desired properties such as surface continuity, and consistent simulations (folds/wrinkles) at different discretisations of the initial mesh, material conditioning and simulation editing for updated parameters. "], "table_footnote": [], "page_idx": 29}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/09925cfb22b8c226c46aa9bdd6b2e89f9f9b546aadeef408a41e90100a465ae4.jpg", "img_caption": ["Figure XIII: Spatial and temporal surface consistency of state-of-the-art differentiable simulators and our approach. Classical simulators such as ARCSim [38] and DiffCloth [36] reproduce simulation outcomes when re-running at the same resolution. However, changing spatio-temporal resolution requires multiple runs and generates possibly different folds or wrinkles instead of refining (or previewing) the geometry. Since we learn a continuous neural parameterised model, a converged (or partially converged) NDF provides consistent simulation when queried at different spatio-temporal inputs. Note that NeuralClothSim does not provide consistent refinement as a function of computation time (no speed vs fidelity trade-off), but rather consistent simulation with respect to the spatio-temporal sampling (at a given computational budget). "], "img_footnote": [], "page_idx": 30}, {"type": "text", "text": "H.1 Runtime ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "We compare the runtime of our method to those of the FEM-based simulator DiffARCSim [38, 45]. Since our approach does not support collisions, we turn off collision handling in DiffARCSim due to the computational overheads for a fair comparison. We simulate a napkin sequence, and our quasistatic result and the dynamic simulated state (after 1 s) from DiffARCSim are visualised in Fig. XII. For the same computation budget (runtime), we show the best simulated states for both methods. Therefore, we present two sets of results for DiffARCSim, i.e., simulated states for the given computational budget 1) with maximum mesh resolution (Fig. XII-(top row)) and 2) with fixed mesh resolution (Fig. XII-(middle row)). We notice that both methods refine the simulated ", "page_idx": 30}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/d691f3d9f954850d3b27e80d8c36fb1ecef8a46fc089c65058dd65f111a5b66c.jpg", "img_caption": ["Figure XIV: Visualisation of the inconsistencies observed in the results by FEM-based ARCSim [45], even at high resolutions. Our method leads to consistent results for much coarser discretisations (Fig. 6-main). "], "img_footnote": [], "page_idx": 30}, {"type": "text", "text": "states with increased runtime. With a decreasing computational budget, DiffARCSim produces converged simulated states of the cloth at low resolutions or only early frames at high resolutions. On the other hand, NeuralClothSim offers partially converged simulations at arbitrary resolutions as the runtime decreases. ", "page_idx": 30}, {"type": "text", "text": "H.2 Multi-Resolution Consistency ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Next, we show the comparison of NeuralClothSim to DiffARCSim, and DiffCloth [36] in terms of the multi-resolution simulation consistency. We simulate 1) a napkin with a fixed corner under gravity, with our approach and ARCsim (Fig. XIII, top two rows) and 2) a twisting and twirling motion of the skirt with our approach and DiffCloth (Fig. XIII, two bottom rows). The compared simulators operate on meshes of pre-defined resolution (as provided initially). Hence, they need to run from scratch for different mesh resolutions, and the simulation outcome are not guaranteed to be the same across these runs under different discretisations. Thus, increasing (or decreasing) spatial resolution can result in different folds or wrinkles instead of refining simulations at coarser resolutions. Unlike DiffARCSim and DiffCloth, our method provides consistent simulation at arbitrary resolutions. The same 3D points remain unaltered in meshes extracted from NDF at different resolutions. We emphasise that we do not claim consistent refinement as a function of runtime but rather a consistent equilibrium state with respect to spatial sampling (at a given computational budget). This means that both converged or partially converged NDF provide consistent quasistatics when queried at different spatial inputs. ", "page_idx": 30}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/43643c27062cb815db32c53839d0ef8cc3cce10b6362ce831787d51c4c93898a.jpg", "img_caption": ["Figure XVI: Limitations. Our approach does not handle collisions, contacts and frictions at the moment, since the focus of this work is on the fundamental challenges of developing a neural cloth simulator. These examples show inaccuracies due to the simplifications made in one possible extension (65). "], "img_footnote": [], "page_idx": 31}, {"type": "text", "text": "", "page_idx": 31}, {"type": "text", "text": "Our comparison deviates from the literature, as the primary reason for using different spatio-temporal resolutions is to adjust runtime and memory usage. For example, the recent method of [67] produces artefact-free previewing geometries (at various approximation levels) by biasing their solutions with shell forces and energies evaluated on the finest-level model. This approach offers a trade-off between runtime vs resolution while maintaining simulation consistency. In contrast, with NeuralClothSim, simulation is consistent at arbitrary resolutions at any moment during the NDF training, which, we believe, is still beneficial for many downstream tasks. Of course, ARCSim and DiffCloth also support very high resolutions, which eventually enables browsing the simulations at different mesh resolutions (while maintaining mesh consistency across the levels); however, at the cost of high memory consumption. Moreover, in their case, methods for inverse problems that estimate the simulation parameters from simulated states cannot use adaptive, e.g., coarse-to-fine and importance sampling. In contrast, our continuous formulation offers clear advantages in this regard. ", "page_idx": 31}, {"type": "image", "img_path": "pzJjlnMvk5/tmp/ceb54ed899fd769a9e4e847d045b1660b37823b12da79f9ee1cac667c2accded.jpg", "img_caption": ["Figure XV: Memory efficiency. We plot the memory requirements for simulations generated by ours and DiffARCSim [38], and DiffCloth [36]. The simulations are chosen to be of similar complexity and are visualised in Fig. XIII. The constant memory requirement of our approach is due to the compressing property of the MLP weights that encode the simulations. "], "img_footnote": [], "page_idx": 31}, {"type": "text", "text": "I Collision ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "In a preliminary experiment, we model collisions with external objects following earlier neural methods [51, 8], i.e., we define an additional loss term $\\mathcal{L}_{\\mathrm{collision}}(\\Theta)$ that penalises collisions, leading ", "page_idx": 31}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{collision}}(\\Theta)=\\frac{|\\Omega|}{N_{\\Omega}N_{t}}\\sum_{i=1}^{N_{\\Omega}}\\sum_{j=1}^{N_{t}}\\operatorname*{max}(\\epsilon-\\mathrm{SDF}(\\mathbf{x}(\\xi_{i},t_{j};\\Theta)),0),\n$$", "text_format": "latex", "page_idx": 32}, {"type": "text", "text": "where $\\operatorname{SDF}(\\mathbf{x})$ is the signed distance to the object, $\\epsilon$ is a small safety margin between cloth and object to ensure robustness, $\\lambda$ is the weight for the collision term, and $\\mathcal{L}_{\\mathrm{physics}}(\\Theta)$ is our main thin-shell loss in Eq. (7)-(main matter). We set $\\lambda=1000$ , $\\epsilon\\,=\\,0.001$ , and use a pre-trained SDF network encoding signed distance function. Specifically, we employ the method of Sitzmann et al. [53] to fti an SDF network on an oriented point cloud, where an Eikonal regularisation is used in addition to the SDF and normal loss. Fig. XVI-(left) visualises a simulation result for a piece of cloth falling on the Stanford bunny; see our supplementary video for the full simulation. We observe that the cloth coarsely respects the object contours, although constraints in Eq. (65) are soft and do not guarantee physically realistic deformations. Difficulties in training PINN with multiple loss terms were previously reported in the literature [25] and future research is necessary to further investigate collision handling in the context of NDFs. ", "page_idx": 32}, {"type": "text", "text": "J Extended Discussion and Limitations ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "This article addresses the fundamental challenges of cloth simulation with NDFs. All in all, we find the proposed design and the obtained experimental results very encouraging and see multiple avenues for future research. Our current quasistatic approach is the first step towards implicit neural simulation. It would be a promising direction to add dynamic effects such as inertia and damping in this setting. Moreover, our simulator does not handle contacts, friction and collisions which will be necessary for many potential applications beyond those demonstrated in this article. This is, however, a standalone research question in the new context. Several limitations of NeuralClothSim originate from NDF modelling as a single MLP: First, MLP weights have a global effect on the simulation, whereas the movement of mesh vertices affects only the local neighbourhood. While this global nature offers continuity and differentiability, we believe exploring alternative network parameterisations that bring the best of both representations could bring improvements in future. Second, our results are currently empirical: While we observe expected results in all our experiments, there are no convergence guarantees or upper bounds on accuracy. Finally, periodic boundary conditions aid mainly with simple geometries; the extension to more complex garments needs further exploration. Future work could also explore modelling different types of human clothing with the help of the proposed implicit neural framework. ", "page_idx": 32}, {"type": "text", "text": "Summa summarum, NeuralClothSim is the first step towards neural implicit cloth simulation, which we believe can become a powerful addition to the class of cloth simulators. Inverse problems in vision and graphics could also benefit from its consistency (e.g., multi-resolution data generation), and adaptivity. ", "page_idx": 32}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: We mention the claims clearly in the abstract and introduction. We support the claims with theory and sufficient results. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 33}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: We state the out-of-scope items at the end of the introduction; we discuss the limitations in \u2018Discussion and Conclusion\u2019 section. Further, we provide additional material in the Appendix, which evaluates the current limitations and computational efficiency and discusses directions for future research. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 33}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Justification: We do not have new theoretical results. However, we employ theories from the mechanics and engineering community, which we now bring into the world of the neural fields. For these, we provide sufficient theoretical background and proofs of theorems (please see supplemental) and refer to the appropriate sources. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 34}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: The paper should be fully reproducible, as the architecture and the experiments are fully described. We do not contribute any dataset. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). ", "page_idx": 34}, {"type": "text", "text": "(d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 35}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 35}, {"type": "text", "text": "Justification: We provide the source code as part of the supplemental document and plan to release it publicly, if the paper is accepted. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 35}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 35}, {"type": "text", "text": "Justification: We provide the training details in the experiment evaluation section. Full details are presented in the Appendix. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 35}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 35}, {"type": "text", "text": "Answer: [No] ", "page_idx": 35}, {"type": "text", "text": "Justification: Due to the numerical approximations and simplifications of the underlying physics and the material model of the cloth, works in cloth simulation do not provide a comparison to ground-truth, and focus rather on realism over accuracy. However, we validate the model on test cases where the analytical solutions are known. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 36}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: We provide runtime computation and GPU usage for our experiments. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 36}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: We reviewed the NeurIPS Code of Ethics. ", "page_idx": 36}, {"type": "text", "text": "Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 36}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 36}, {"type": "text", "text": "Answer: [No] ", "page_idx": 36}, {"type": "text", "text": "Justification: Our work has no negative societal impact. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 37}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 37}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 37}, {"type": "text", "text": "Justification: Our work poses no such risks. Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 37}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 37}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 37}, {"type": "text", "text": "Justification: We do not use existing assets. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets. \u2022 The authors should cite the original paper that produced the code package or dataset. \u2022 The authors should state which version of the asset is used and, if possible, include a URL. ", "page_idx": 37}, {"type": "text", "text": "\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 38}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 38}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 38}, {"type": "text", "text": "Justification: We do not contribute any dataset. We document the code and model well, and share code as part of submission. ", "page_idx": 38}, {"type": "text", "text": "Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 38}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 38}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 38}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing or research with human subjects. Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 38}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 38}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 38}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 38}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing or research with human subjects. Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 38}, {"type": "text", "text": "\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 39}]