[{"type": "text", "text": "Learning from Snapshots of Discrete and Continuous Data Streams ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Pramith Devulapalli ", "page_idx": 0}, {"type": "text", "text": "Department of Computer Science Purdue University pdevulap@purdue.edu ", "page_idx": 0}, {"type": "text", "text": "Steve Hanneke   \nDepartment of Computer Science Purdue University   \nsteve.hanneke@gmail.com ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Imagine a smart camera trap selectively clicking pictures to understand animal movement patterns within a particular habitat. These \"snapshots\", or pieces of data captured from a data stream at adaptively chosen times, provide a glimpse of different animal movements unfolding through time. Learning a continuoustime process through snapshots, such as smart camera traps, is a central theme governing a wide array of online learning situations. In this paper, we adopt a learning-theoretic perspective in understanding the fundamental nature of learning different classes of functions from both discrete data streams and continuous data streams. In our first framework, the update-and-deploy setting, a learning algorithm discretely queries from a process to update a predictor designed to make predictions given as input the data stream. We construct a uniform sampling algorithm that can learn with bounded error any concept class with finite Littlestone dimension. Our second framework, known as the blind-prediction setting, consists of a learning algorithm generating predictions independently of observing the process, only engaging with the process when it chooses to make queries. Interestingly, we show a stark contrast in learnability where non-trivial concept classes are unlearnable. However, we show that adaptive learning algorithms are necessary to learn sets of time-dependent and data-dependent functions, called pattern classes, in either framework. Finally, we develop a theory of pattern classes under discrete data streams for the blind-prediction setting. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "1.1 Two Motivating Examples ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Pretend you\u2019re a farmer by day and businessperson by night. As a farmer, you oversee a 10,000 acre plot of land equipped with a smart irrigation system. To feed data to your irrigation system, you rely on hyperspectral imaging taken from a satellite to gauge soil moisture conditions. Ideally, you would like to constantly feed your irrigation system with hyperspectral data; however, the steep financial cost of processing hyperspectral data prevents you from doing so. As a result, you need to devise a strategy to sparingly use satellite data; at all other times, you rely on the smart irrigation system to accurately extrapolate the soil moisture conditions as time passes by. ", "page_idx": 0}, {"type": "text", "text": "At night, you become a businessperson. You employ a translator on your work laptop during your virtual meetings to automatically convert your voice into the preferred language of your client. This translator is fine-tuned by a speech-to-text translation system that takes in voice data and updates the translator\u2019s model on the correct language translation. But, there\u2019s a caveat. Each request costs money. And each transmission dominates a sizable portion of the available Internet bandwidth. Your task is to come up with the optimal strategy of balancing requests to the cloud versus trusting the fidelity of the translator. ", "page_idx": 0}, {"type": "text", "text": "1.2 A New Learning Paradigm ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "While these settings may seem rather creative in nature, both of these scenarios represent plausible real-world instances of learning from continuous data streams with temporal dependencies. What type of learning-theoretic framework should one construct when framing the question of online learning under continuous data streams? How can we best capture the notion of temporal dependencies and patterns that naturally arise when analyzing such data sources? While these questions are highly pertinent, the answers aren\u2019t clear due to a vast majority of the learning theory literature focusing on online learnability from discrete data streams modeled as round-by-round processes. In the two examples showcased at the beginning, it\u2019s clear that establishing a theoretical understanding of these settings can be an important step in tackling online learnability under continuous data streams. ", "page_idx": 1}, {"type": "text", "text": "In our paper, we present a streamlined approach in tackling these rather fundamental challenges by first establishing two closely related, but separate, frameworks. ", "page_idx": 1}, {"type": "text", "text": "Blind-Prediction Setting The first framework is called blind-prediction which is highlighted by the smart irrigation system using satellite imagery data. The irrigation system receives feedback only when hyperspectral data is requested; at all other times, the system must predict on its own with no input from the environment. This framework is designed such that a learning algorithm must make a prediction based only on the current timestamp and previous queries. The learner\u2019s predictions are independent of the current values generated by the data stream hence the name blind-prediction. ", "page_idx": 1}, {"type": "text", "text": "Update-and-Deploy Setting The second framework, called update-and-deploy, is highlighted by the speech-to-text translation system. The speech-to-text translation system, a learning algorithm, and the translator, called the predictor, are considered as two separate entities where the algorithm retrieves snapshots of the data stream to update the predictor. We describe this behavior as a learning algorithm activating different modes at different times. A learning algorithm performs updates to a predictor when it queries and deploys the predictor to make predictions as the process rolls by. ", "page_idx": 1}, {"type": "text", "text": "Pattern Classes A significant portion of this work is dedicated to studying these frameworks under pattern classes, sets of sequences encoding data-dependent and time-dependent characteristics. First introduced by Moran et al. [1], these classes consist of a set of patterns; each pattern is a sequence of instance-label pairs marked with the appropriate timestamp. For example, if we let $\\mathcal{X}$ and $\\boldsymbol{\\wp}$ represent the instance space and label space respectively, then $Z^{\\bar{\\infty}}=(\\mathcal{X}\\times\\bar{y7})^{\\infty}$ represents the set of all countably infinite patterns. A discrete pattern class $\\mathcal{P}$ is defined as ${\\mathcal{P}}\\subseteq Z^{\\infty}$ where any $P\\in\\mathcal P$ is understood as P = (Zt)t\u221e=1 = (Xt, Yt)t\u221e=1. ", "page_idx": 1}, {"type": "text", "text": "Pattern classes can also be viewed as natural generalizations of concept classes. Given a concept class $H$ consisting of classifiers mapping instances from $\\mathcal{X}$ to labels in $\\boldsymbol{\\wp}$ , we can derive a pattern class that encapsulates all sequences that could be realized by any single $h\\in H$ . Formally speaking, the induced pattern class $\\mathcal{P}(H)$ is defined as $\\mathcal{P}(H)=\\{(Z_{t})_{t=1}^{\\infty}\\stackrel{\\cdot}{\\in}Z^{\\infty}:\\exists h\\in H,\\forall t\\in\\ddot{\\mathbb{N}},\\ddot{h}(X_{t})=Y_{t}\\}$ ", "page_idx": 1}, {"type": "text", "text": "Now that the stage has been developed for pattern classes, we turn to a set of questions that naturally arise under continuous data streams. What pattern classes are online learnable? Is there a natural dimension that characterizes online learnability of pattern classes under the different querying-based models? How does learning pattern classes and concept classes differ under continuous data streams? We tackle these important questions in our paper using our learning frameworks. ", "page_idx": 1}, {"type": "text", "text": "1.3 Our Contributions ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "We detail the primary contributions of this work below. ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": ". Non-Adaptive Learners in the Update-and-Deploy Setting. First, we extend the current theory on concept classes to include online learning under continuous data streams for the update-and-deploy setting. A non-adaptive learner is a learning algorithm that queries independent of the process itself. For the update-and-deploy setting, we show that the nonadaptive learner, $A_{\\mathrm{unif}}$ , that uniformly samples its queries from a fixed uniform distribution, achieves a bounded expected error with a linear querying strategy. ", "page_idx": 1}, {"type": "text", "text": "Theorem 1.1 (Informal Version). Given an instance space $\\mathcal{X}$ and a label space $\\boldsymbol{\\wp}$ , let $H\\subseteq\\mathcal{V}^{X}$ be a concept class where $L D(H)$ represents the Littlestone dimension of $H$ . For any $H$ that has $L D(H)<\\infty,$ , $A_{\\mathrm{unif}}$ achieves an expected error bound $M B_{\\mathcal{P}(H)}(\\mathcal{A}_{\\mathrm{unif}})\\leq$ $\\Delta L D(H)$ with a linear querying strategy $Q_{A_{\\mathrm{unif}}}(t)=O(t)$ where $\\Delta$ is an input parameter. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "2. Concept Class Learnability in the Blind-Prediction Setting. Second, we show that nontrivial concept classes aren\u2019t learnable within the blind-prediction setting. Letting $H$ be any concept class that contains a classifier that labels two points differently, then any learning algorithm, adaptive or non-adaptive, is not learnable in the blind-prediction setting. ", "page_idx": 2}, {"type": "text", "text": "Theorem 1.2 (Informal Version). For any $H$ and two points $x_{1},x_{2}\\in\\mathcal{X}$ such that $\\exists h\\in H$ where $h(x_{1})\\neq h(x_{2})$ , then for any learning algorithm $\\boldsymbol{\\mathcal{A}}$ , the expected mistake-bound $M B_{\\mathcal{P}(H)}(A)=\\infty$ . ", "page_idx": 2}, {"type": "text", "text": "3. Adaptive Learners for Pattern Classes. As our third result, we investigate what types of learning algorithms are required to learn pattern classes under continuous data streams. In Section 4.3, we design a continuous pattern class $\\mathcal{P}$ , where each pattern $P\\in\\mathcal P$ is a continuous sequence of point-label pairs $(X_{t},Y_{t})_{t\\geq0}$ , that is not learnable by any random sampling algorithm such as $A_{\\mathrm{unif}}$ . Additionally, we construct an adaptive learning algorithm that successfully learns $\\mathcal{P}$ with zero expected error. This important example signifies a learnability gap between concept classes and pattern classes. ", "page_idx": 2}, {"type": "text", "text": "4. Discrete Data Streams. Fourth, we develop a theory for realizable learning of pattern classes under discrete data streams in the blind-prediction setting for deterministic learning algorithms. We characterize a combinatorial quantity called the query-learning distance or $Q L D$ for discrete pattern classes $\\mathcal{P}$ with a query budget $Q\\in\\mathbb{N}\\cup\\{0\\}$ . We show that the optimal mistake-bound given $Q$ queries, $M_{Q}({\\mathcal{P}})$ , is lower bounded by $Q L D(\\mathcal{P},Q)$ . Then, we construct a deterministic learning algorithm whose optimal mistake-bound is upper bounded by $Q L D(\\mathcal{P},Q)$ . ", "page_idx": 2}, {"type": "text", "text": "Theorem 1.3 (Informal Version). For a discrete pattern class $\\mathcal{P}$ and number of queries $Q$ , the optimal mistake-bound $M_{Q}(\\mathcal{P})=Q L D(\\mathcal{P},\\bar{Q})$ . ", "page_idx": 2}, {"type": "text", "text": "1.4 Related Work ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "An extensively studied area in online learning theory closely related to our work is the round-byround learning of concept classes from discrete data streams in the realizable setting. Littlestone [2] successfully characterized the types of concept classes $H$ that are learnable under an adversarial online setting which is now famously known as the Littlestone dimension or $L D(H)$ . Later, Daniely et al. [3] extended this result to the multi-class setting, showing that $L D(H)$ also characterizes multi-class learnability. A recently explored setting called self-directed online learning shares an important trait with our learning frameworks which is adaptivity in selecting points where Devulapalli and Hanneke [4] constructed a dimension, $S D d i m(H)$ , characterizing learnable concept classes. ", "page_idx": 2}, {"type": "text", "text": "While traditional approaches assume that the learner receives the true label after each round, our study diverges by focusing on frameworks where feedback is only provided when actively queried by the learner. Our work is conceptually aligned with the area of partial monitoring, which investigates how various feedback constraints influence a learner\u2019s ability to minimize regret. A series of studies have established optimal regret bounds across different online learning scenarios, structured as discrete data streams with diverse feedback mechanisms [5\u201311]. ", "page_idx": 2}, {"type": "text", "text": "A core principle within our learning frameworks is the ability of a learning algorithm to selectively query at different time-steps within a data-stream which is shared by stream-based active learning approaches. Several works within the field have explored theoretical guarantees of active learning in different variations of the stream-based setting [12\u201315]. However, a crucial difference between stream-based active learning and learning models in this work is the decision to query at a particular time is carried out before the current instance is observed. ", "page_idx": 2}, {"type": "text", "text": "2 Learning Frameworks ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "2.1 Basic Definitions ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Let $\\mathcal{X}$ and $\\boldsymbol{\\wp}$ be arbitrary, non-empty sets where $\\mathcal{X}$ is referred to as the instance space and $\\boldsymbol{\\wp}$ is the label space. A concept class $H\\subseteq{\\dot{\\mathfrak{y}}}^{\\dot{x}}$ consists of functions $f:\\mathcal X\\to\\mathcal Y$ . Depending on the context, we will specify if we are considering a multi-class setting where $|\\mathcal{V}|\\ge2$ or a binary classification setting where $\\dot{\\mathcal{D}}=\\{0,1\\}$ . ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "To define a continuous data stream, we use the notation $(Z_{t})_{t\\geq0}\\,=\\,(X_{t},Y_{t})_{t\\geq0}$ to define a point and label pair $Z_{t}~=~(X_{t},Y_{t})$ for each $t~\\in~\\mathbb{R}_{\\geq0}$ . A continuous pattern class $\\mathcal{P}$ is defined as $\\mathscr P\\subseteq\\mathcal C((\\bar{X_{t}},Y_{t})_{t\\geq0})$ where $\\mathscr{C}((X_{t},Y_{t})_{t\\geq0})$ represents the collection of all measurable continuoustime processes on the space $\\mathcal X\\times\\mathcal X$ . Each pattern $P\\in\\mathcal P$ is then a continuous-time process $(Z_{t})_{t\\geq0}$ . ", "page_idx": 3}, {"type": "text", "text": "We now proceed to define discrete pattern classes and subsequently, discrete data streams. Let $\\mathcal{Z}=\\mathcal{X}\\times\\mathcal{Y}$ where $z\\in{\\mathcal{Z}}$ and $z=(x,y)$ . Define $Z^{\\infty}=(\\mathcal{X}\\times\\bar{\\mathcal{Y}})^{\\infty}$ which is the set of all countably infinite patterns. Then the discrete pattern class $\\mathcal{P}\\subseteq Z^{\\infty}$ . Both continuous and discrete pattern classes are referred to as $\\mathcal{P}$ so it will be clear from context which type of pattern class we are referring to. It then follows that a discrete data stream $(Z_{t})_{t=1}^{\\infty}=(X_{t},Y_{t})_{t=1}^{\\infty}$ lives in the space ${\\mathcal{Z}}^{\\infty}$ . ", "page_idx": 3}, {"type": "text", "text": "2.2 Update-and-Deploy Setting ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this learning framework, we aim to describe the online learning game that occurs between a learner and an oblivious adversary. An oblivious adversary is an adversary impervious to any of the learner\u2019s actions; in other words, the adversary does not adapt its strategy based on the learner\u2019s actions. As a result, the oblivious adversary fixes the entire data stream in advance of the learning process. ", "page_idx": 3}, {"type": "text", "text": "Denote by $\\mathcal{F}$ a class of predictor functions $\\hat{f}$ . With $\\mathcal{D}$ representing the timestamps of the data stream, either discrete or continuous, then $\\hat{f}:\\mathcal{X}\\!\\times\\!\\mathcal{D}\\to\\mathcal{Y}$ is designed to make a prediction at every timestamp $t\\in\\mathcal D$ . In the update-and-deploy setting, we consider the learning algorithm $\\boldsymbol{\\mathcal{A}}$ and the predictor $\\hat{f}$ to be separate entities. Denote by $Q_{\\cal A}(\\bar{t})=\\{(X_{t_{1}},Y_{t_{1}}),(X_{t_{2}},\\bar{Y_{t_{2}}}),\\bar{...}\\}$ the set of queries made by learning algorithm $\\boldsymbol{\\mathcal{A}}$ before time $t$ . Intuitively, a learning algorithm is a mapping $A:({\\mathcal{X}}\\times{\\mathcal{Y}})^{*}\\to{\\mathcal{F}}$ where $(\\mathcal{X}\\!\\times\\!\\mathcal{Y})^{*}$ corresponds to the set $Q_{A}(t)$ . Formally, $\\mathcal{A}((X_{t_{1}},Y_{t_{1}}),...,(X_{Q_{A}(t)},Y_{Q_{A}(t)}))$ outputs a predictor ${\\hat{f}}\\in{\\mathcal{F}}$ given the history of previous queries $Q_{A}(t)$ . It\u2019s important to note that we only consider learning algorithms $\\boldsymbol{\\mathcal{A}}$ that have a linear querying strategy or $\\bar{Q}_{\\cal A}(t)={\\cal O}(t)$ . ", "page_idx": 3}, {"type": "text", "text": "Assume the adversary has selected a data stream $(Z_{t})_{t\\in D}$ . For each $t\\in D$ , the predictor $\\hat{f}$ produces predictions $\\hat{Y}_{t}\\,=\\,\\hat{f}(X_{t},t)$ given $X_{t}$ and $t$ . On timestamps $t\\,\\in\\,\\mathcal D$ that the learning algorithm $\\boldsymbol{\\mathcal{A}}$ decides to query, the following procedure occurs: ", "page_idx": 3}, {"type": "text", "text": "1. The learner $\\boldsymbol{\\mathcal{A}}$ makes a decision to query and receives the true point-label pair $(X_{t},Y_{t})$ .   \n2. $\\boldsymbol{\\mathcal{A}}$ updates the predictor $\\hat{f}$ with $(X_{t},Y_{t})$ .   \n3. $\\hat{f}$ is redeployed as the new predictor. ", "page_idx": 3}, {"type": "text", "text": "It\u2019s important to note that the data stream selected by the adversary is constrained to be realizable. If the realizability is with respect to a concept class $H$ , then $\\exists h\\,\\Big\\in\\,H,\\forall t\\,\\in\\,D,h(X_{t})\\,=\\,Y_{t}$ . If the setting is studied under a discrete pattern class $\\mathcal{P}$ , then the pattern is considered realizable if $(X_{t},Y_{t})_{t=1}^{\\infty}\\in\\mathcal{P}$ . If $\\mathcal{D}$ represents a continuous data stream and $\\mathcal{P}$ a continuous pattern class, then the pattern $(\\bar{X_{t}},Y_{t})_{t\\geq0}\\in\\mathcal P$ implies realizability. ", "page_idx": 3}, {"type": "text", "text": "2.3 Blind-Prediction Setting ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "For our second learning framework, we describe the online learning game between the learner and an oblivious adversary. As similarly described in Section 2.2. an oblivious adversary acts independently of the learner\u2019s actions and fixes the entire data stream beforehand. ", "page_idx": 3}, {"type": "text", "text": "Let $\\boldsymbol{\\mathcal{A}}$ be any learning algorithm and let $Q_{A}(t)$ be the set of queries made by a learning algorithm $\\boldsymbol{\\mathcal{A}}$ before time $t$ . As mentioned in Section 2.2, we consider algorithms with a linear querying strategy where $Q_{A}(t)=O(t)$ . Letting $\\mathcal{D}$ be the timestamps of the data stream, $\\boldsymbol{\\mathcal{A}}$ is described as a mapping $A:({\\mathcal{X}}\\times{\\mathcal{Y}})^{*}\\times{\\mathcal{D}}\\rightarrow{\\mathcal{Y}}$ where $(\\boldsymbol{\\mathcal{X}}\\times\\boldsymbol{\\mathcal{Y}})^{*}$ corresponds to the set $Q_{A}(t)$ . At any time $t$ , $\\boldsymbol{\\mathcal{A}}$ only observes the current timestamp $t$ and the history of queries $Q_{A}(t)$ when making a prediction $\\hat{Y_{t}}$ . If it decides to query, then $\\boldsymbol{\\mathcal{A}}$ witnesses the true instance-label pair $(X_{t},Y_{t})$ . ", "page_idx": 3}, {"type": "text", "text": "Assume that the adversary has selected a data stream $(Z_{t})_{t\\in D}$ . For each $t\\in\\mathcal{D}$ : ", "page_idx": 3}, {"type": "text", "text": "1. The learner $\\boldsymbol{\\mathcal{A}}$ selects a prediction $\\hat{Y}_{t}\\in\\mathcal{V}$ . ", "page_idx": 3}, {"type": "text", "text": "It\u2019s important to note that the data stream selected by the adversary is constrained to be realizable.   \nRefer to Section 2.2 for realizability regarding concept classes and pattern classes. ", "page_idx": 4}, {"type": "text", "text": "2.4 Integral Mistake-Bounds ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "To capture the optimal behavior of learning algorithms under continuous data streams, we formalize the notion of integral mistake-bounds. Since we consider two separate settings, we construct a general mistake-bound and then differentiate from context which setting the mistake-bound operates under. ", "page_idx": 4}, {"type": "text", "text": "Due to their nature, pattern classes subsume concept classes so we define all the mistake-bounds with respect to pattern classes. Let $\\mathcal{D}=\\mathbb{R}_{\\geq0}$ which denotes the timestamps of a continuous stream. The pattern class representation of a concept class $H$ , or $\\mathcal{P}(H)$ , is defined in the following way: $\\mathcal{P}(\\bar{H})=\\{(X_{t},Y_{t})_{t\\geq0}:\\exists h\\in H,\\forall t\\in\\mathcal{D},h\\bar{(}X_{t})=Y_{t}\\}$ . It is important to note that we assume that each pattern $P\\in\\mathcal P$ for any continuous pattern class $\\mathcal{P}$ is measurable. ", "page_idx": 4}, {"type": "text", "text": "Given a continuous pattern class $\\mathcal{P}$ , a learning algorithm $\\boldsymbol{\\mathcal{A}}$ , and some realizable continuous data stream $(Z_{t})_{t\\geq0}$ , the quantity $M B_{\\mathcal{P}}(\\mathcal{A},(Z_{t})_{t\\geq0})$ represents the expected error $\\boldsymbol{\\mathcal{A}}$ makes on the data stream $(Z_{t})_{t\\geq0}$ given $\\mathcal{P}$ . Formally, ", "page_idx": 4}, {"type": "equation", "text": "$$\nM B_{\\mathcal{P}}(A,(Z_{t})_{t\\geq0})=\\operatorname*{lim}_{T\\rightarrow\\infty}\\mathbb{E}\\left[\\int_{0}^{T}\\mathbb{1}[A(X_{t})\\neq Y_{t}]\\,d t\\right].\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "To define the optimal mistake-bound for $\\mathcal{P}$ , we take the supremum over all patterns in the class: ", "page_idx": 4}, {"type": "equation", "text": "$$\nM B_{\\mathcal{P}}(A)=\\operatorname*{sup}_{(Z_{t})_{t\\geq0}=P\\in\\mathcal{P}}M B_{\\mathcal{P}}(A,(Z_{t})_{t\\geq0}).\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Finally, we obtain the optimal mistake-bound for the pattern class $\\mathcal{P}$ by taking the infimum over all learning algorithms corresponding to the learning setting (blind-prediction or update-and-deploy): ", "page_idx": 4}, {"type": "equation", "text": "$$\nM B_{\\mathcal{P}}=\\operatorname*{inf}_{A}M B_{\\mathcal{P}}(A).\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "3 Update-and-Deploy Setting: Learning Concept Classes from Continuous Data Streams ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "3.1 Littlestone Classes are Learnable ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In this section, we are interested in multi-class concept classes $H$ that are learnable in the updateand-deploy setting with learning algorithms deploying a linear querying strategy. Below, we give a definition of the learnability of a concept class $H$ which allows us to frame our first important question. ", "page_idx": 4}, {"type": "text", "text": "Definition 3.1. A concept class $H$ is learnable if the following condition is satisfied: there exists an algorithm $\\boldsymbol{\\mathcal{A}}$ such that $M B_{\\mathcal{P}(H)}(A)<\\infty$ and $Q_{A}(t)=O(t)$ . ", "page_idx": 4}, {"type": "text", "text": "Question: What is the dimension that characterizes the learnability of a concept class $H$ where finiteness implies learnability and an infinite value implies non-learnability? ", "page_idx": 4}, {"type": "text", "text": "Once we have defined learnability of a concept class $H$ , our interest immediately swings towards the performance of different learning algorithms with linear querying strategies. Naturally, we want to understand if there exists optimal learning algorithms whose expected error is finite if the concept class $H$ is learnable. This then leads us to our second important question. ", "page_idx": 4}, {"type": "text", "text": "Question: Does there exist a learning algorithm $\\boldsymbol{\\mathcal{A}}$ employing a linear querying strategy such that for every $H$ that is learnable, does $M B_{\\mathcal{P}(H)}(A)<\\infty!$ If so, does the learning algorithm employ an adaptive strategy? ", "page_idx": 4}, {"type": "text", "text": "The Littlestone dimension [2] is a key measure that defines the learnability across various online learning frameworks. Extending this concept, we investigate whether the Littlestone dimension can similarly influence learnability in the context of continuous data streams. We propose that $L D(H)$ ", "page_idx": 4}, {"type": "text", "text": "could be a valuable combinatorial tool for designing learning algorithms in the continuous setting. To explore this, we introduce Algorithm 1, or $A_{\\mathrm{unif}}$ , which is designed to learn any concept class with a finite Littlestone dimension, $L D(H)<\\infty$ , by using a linear querying approach. ", "page_idx": 5}, {"type": "text", "text": "The idea behind $A_{\\mathrm{unif}}$ is to randomize the timestamp of the query so that the adversary has to \"guess\" which point in the data stream the learner will decide to target. If the timestamp of the query is not randomized, then the adversary can select a data stream designed with this knowledge. A potential strategy an adversary could employ against a deterministic learning algorithm would be to present the same point again and again to the learner for every query. Since the learner has only received information about one point, the adversary can present other points in the data stream at times the learner doesn\u2019t query forcing errors to occur. As a result, the adversary has a strategy to force an infinite mistake-bound to a learning algorithm that employs a deterministic querying strategy regardless if it\u2019s adaptive or non-adaptive. ", "page_idx": 5}, {"type": "text", "text": "To avoid this issue, we fitted $A_{\\mathrm{unif}}$ with a randomized querying strategy. As shown in Algorithm 1, $A_{\\mathrm{unif}}$ samples the next timestamp of the query, $t_{q}$ , from a uniform distribution over an interval of fixed width $\\Delta$ . ", "page_idx": 5}, {"type": "table", "img_path": "GxwnQ8sxkL/tmp/aff7155b58f1bce07d203544a85cfc23a74b28d3934932a2647ef936c740c7d4.jpg", "table_caption": [], "table_footnote": [], "page_idx": 5}, {"type": "text", "text": "In Algorithm 1, notice that the predictor function $\\hat{f}$ follows that of the Standard Optimal Algorithm, or SOA, defined by Littlestone [2]. Since the $L D(H)<\\infty$ , and if the prediction differs from the true label on a query point, then the Littlestone dimension of the subsequent version space is reduced by at least 1. This property follows immediately from the analysis of the SOA, so the learner knows that it needs only $L D(H)$ successful queries to fully learn $H$ from the continuous data stream. ", "page_idx": 5}, {"type": "text", "text": "Additionally, note that while Algorithm 1 decides the next $t_{q}$ after the previous query finishes, this is done non-adaptively. The timestamp $t_{q}$ is not dependent on the true label witnessed by the previous queries; it\u2019s simply sampled from a uniform distribution. As a result, the set of query timestamps are produced in a non-adaptive fashion by sampling the next query from an interval of width $\\Delta$ . ", "page_idx": 5}, {"type": "text", "text": "Theorem 3.2. Let $A_{\\mathrm{unif}}$ be Algorithm 1. For any $H$ that has $L D(H)<\\infty,\\,M B_{\\mathcal{P}(H)}(A_{\\mathrm{unif}})\\leq$ $\\Delta L D(H)$ where $\\Delta$ is an input parameter from Algorithm 1. Since $Q_{\\mathrm{\\mathcal{A}_{\\mathrm{unif}}}}(t)=O(t)$ , then $H$ is learnable. ", "page_idx": 5}, {"type": "text", "text": "Proof. For a given $H$ with $L D(H)<\\infty$ , we show that the expected mistake-bound of algorithm $A_{\\mathrm{unif}}$ is bounded proportionally to the size of $L D(H)$ using a linear querying strategy. Since $A_{\\mathrm{unif}}$ deploys the SOA as its predictor, then the mistake-bound of $A_{\\mathrm{unif}}$ is inherently tied to $L D(H)$ . In other words, if $\\mathcal{A}_{\\mathrm{unif}}$ makes $L D(H)$ successful queries, where success implies that the SOA\u2019s prediction is incorrect on the query point, then the version space has Littlestone dimension of 0 implying that any consistent classifier subsequently makes zero error onwards. Our analysis first focuses on bounding the maximum expected error $A_{\\mathrm{unif}}$ makes until its first successful query. We repeat this analysis $L D(H)\\mathrm{~-~}1$ times to show that $M B_{\\mathcal{P}(H)}(\\mathcal{A}_{\\mathrm{unif}})\\,\\leq\\,\\Delta L D(H)$ with a linear querying strategy. ", "page_idx": 5}, {"type": "text", "text": "As a starting point, we define all the necessary quantities in order to begin the analysis. Since our learning model assumes an oblivious adversary, it selects a continuous data stream $(Z_{t})_{t\\geq0}$ realizable with respect to some target concept $f^{*}\\,\\in\\,H$ before the learning process begins. Let the random variable $B_{k}$ be an indicator random variable representing the success of the $k^{t h}$ query on the process $(Z_{t})_{t\\geq0}$ . More specifically, ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "equation", "text": "$$\nB_{k}={\\left\\{\\begin{array}{l l}{1}&{{\\mathrm{if~the~}}k^{t h}{\\mathrm{~query~is~successful}}}\\\\ {0}&{{\\mathrm{else}}}\\end{array}\\right.}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "takes a value of 1 if the $k^{t h}$ query succeeds. Then, we define $P(B_{k}\\,=\\,1|B_{k-1}\\,=\\,0,B_{k-2}\\,=$ $0,...,B_{1}=0)=\\epsilon_{k}$ which is the probability that the learner has a successful query on the $k^{t h}$ try given that the previous $k-1$ attempts failed. $\\epsilon_{k}$ can be equivalently viewed as the probability of the learner making an error on the $\\dot{k}^{t h}$ interval because a successful query results in receiving a mistake-point, or a point the predictor incorrectly predicts. Since $A_{\\mathrm{unif}}$ selects its $k^{t h}$ query $t_{q}^{k}$ from a $\\Delta$ -sized interval, then $\\Delta\\epsilon_{k}$ represents the total potential error the learner makes on the $k^{t h}$ interval. ", "page_idx": 6}, {"type": "text", "text": "Our primary interest is calculating the expected error $A_{\\mathrm{unif}}$ makes until it reaches $L D(H)$ successful queries. Since the learner $A_{\\mathrm{unif}}$ deploys an SOA predictor, $L D(H)$ successful queries where the predictor is incorrect guarantees the learner to narrow down on the right set of consistent classifiers. ", "page_idx": 6}, {"type": "text", "text": "We approach this by first computing the expected error that the learning algorithm makes until its first successful query. It\u2019s important to note that $A_{\\mathrm{unif}}$ does not alter its querying strategy regardless of the number of successful queries it has received; it constantly chooses its queries from intervals of size $\\Delta$ . As a result, after the learner receives its first successful query, the same process repeats again until $A_{\\mathrm{unif}}$ finds it second successful query. So, we focus on bounding the maximum expected error $A_{\\mathrm{unif}}$ will encounter until its next successful query for the data stream $(Z_{t})_{t\\geq0}$ . ", "page_idx": 6}, {"type": "text", "text": "Let $A$ be a function that represents the maximum error the learner receives until its first successful query given the values of the random variables $B_{1},B_{2},\\ldots$ Formally speaking, let $A\\,=$ $\\textstyle4(B_{1},B_{2},\\dots)=\\Delta(\\epsilon_{1}+\\epsilon_{2}(1-B_{1})+\\epsilon_{3}(1-B_{1})(1-B_{2})+\\dots)=\\Delta\\sum_{k=1}^{\\infty}\\epsilon_{k}\\Pi_{i=1}^{k-1}(1-B_{i}).$ Each $\\Delta\\epsilon_{k}$ represents the error region in the $k^{t h}$ interval given that the previous $k-1$ queries failed or each $B_{i}=0$ for all $i\\leq k-1$ . It\u2019s important to observe that $A$ is the maximum error the learner receives until the first successful query. As an example, let $B_{n}=1$ for some $n\\in\\mathbb N$ and $B_{j}=0$ for all $j<n$ . Then $A$ includes the cumulative error from the first $n-1$ intervals and the entire potential error on the $n^{t h}$ interval (represented as $\\Delta\\epsilon_{n}.$ ) even though the $n^{t h}$ query, which is successful, can lie anywhere within the $\\Delta\\epsilon_{n}$ error region located inside the $n^{t h}$ interval. Now, we compute the expectation of $A$ . ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\mathbb{E}[A]=\\mathbb{E}\\left[\\Delta\\sum_{i=1}^{\\infty}\\epsilon_{k}\\Pi_{i=1}^{k-1}(1-B_{i})\\right]=\\Delta\\sum_{k=1}^{\\infty}\\epsilon_{k}\\mathbb{E}\\left[\\Pi_{i=1}^{k-1}(1-B_{i})\\right]}\\\\ {\\displaystyle=\\Delta\\sum_{k=1}^{\\infty}\\epsilon_{k}P(B_{1}=0,...,B_{k-1}=0)=\\Delta\\sum_{k=1}^{\\infty}\\epsilon_{k}\\Pi_{i=1}^{k-1}(1-\\epsilon_{i})}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "Since we are interested in the maximum expected error the learner $A_{\\mathrm{unif}}$ encounters until its first successful query, we want to bound the term $\\begin{array}{r}{\\Delta\\sum_{k=1}^{\\infty}\\epsilon(k)\\Pi_{i=1}^{k-1}(1-\\epsilon_{i})}\\end{array}$ by selecting the optimal values for $\\epsilon_{1},\\epsilon_{2},\\ldots$ Notice that the expression is recursive in the sense that if we pulled out the first terms, the structure of the sum doesn\u2019t change. We then exploit this fact to bound the total value of the sum. Let $\\begin{array}{r}{U^{*}=\\operatorname*{sup}_{\\vec{\\epsilon}\\in[0,1]^{\\infty}}\\Delta\\sum_{k=1}^{\\infty}\\vec{\\epsilon}(k)\\Pi_{i=1}^{k-1}(1-\\vec{\\epsilon}(i))}\\end{array}$ where $\\vec{\\epsilon}(1)={\\epsilon}_{1},\\vec{\\epsilon}(2)={\\epsilon}_{2}$ , and so on and so forth. Then, ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\gamma^{*}=\\underset{\\bar{\\epsilon}\\in[0,1]^{\\infty}}{\\operatorname*{sup}}\\Delta\\sum_{k=1}^{\\infty}\\bar{\\epsilon}(k)\\Pi_{i=1}^{k-1}(1-\\vec{\\epsilon}(i))=\\underset{\\bar{\\epsilon}\\in[0,1]^{\\infty}}{\\operatorname*{sup}}\\Delta\\vec{\\epsilon}(1)+\\Delta(1-\\vec{\\epsilon}(1))\\sum_{k=2}^{\\infty}\\vec{\\epsilon}(k)\\Pi_{i=2}^{k-1}(1-\\vec{\\epsilon}(i))}\\\\ &{\\quad\\le\\underset{p\\in[0,1]}{\\operatorname*{sup}}\\Delta p+(1-p)\\left(\\underset{\\bar{\\epsilon}\\in[0,1]^{\\infty}}{\\operatorname*{sup}}\\Delta\\sum_{k=1}^{\\infty}\\vec{\\epsilon}(k)\\Pi_{i=1}^{k-1}(1-\\vec{\\epsilon}(i))\\right)\\le\\underset{p\\in[0,1]}{\\operatorname*{sup}}\\Delta p+(1-p)U^{*}}\\\\ &{\\quad\\le\\underset{p\\in[0,1]}{\\operatorname*{sup}}\\frac{\\Delta p}{1-(1-p)}=\\Delta.}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "Therefore, we show that $E[A]\\leq\\Delta$ ", "page_idx": 6}, {"type": "text", "text": "At the beginning of this analysis, we assumed some adversarially chosen data stream and target concept, so the result $E[A]\\,\\stackrel{.}{\\leq}\\,\\Delta$ holds for any choice of $(Z_{t})_{t\\geq0}$ realizable with respect to $H$ . ", "page_idx": 6}, {"type": "text", "text": "In Theorem 3.2, we establish that if $L D(H)$ is finite, then $H$ is learnable in the update-and-deploy setting. This leads to our second result, which demonstrates that $L D(H)$ serves as the defining dimension for the learnability of a concept class $H$ in this context. ", "page_idx": 7}, {"type": "text", "text": "Theorem 3.3. If $L D(H)=\\infty_{}$ , then for any learning algorithm $\\boldsymbol{\\mathcal{A}}$ with a linear querying strategy $Q_{\\mathcal{A}}(t),\\,M B_{\\mathcal{P}(H)}(\\mathcal{A})=\\infty$ implying that $H$ is not learnable. ", "page_idx": 7}, {"type": "text", "text": "For the formal proof of Theorem 3.3, refer to Appendix A.1. While the results hold for $O(t)$ querying strategies, an open direction is to investigate algorithms with a broader range of querying strategies. ", "page_idx": 7}, {"type": "text", "text": "4 Blind-Prediction Setting: Learning from Discrete and Continuous Data Streams ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "4.1 It\u2019s Impossible to Learn Non-Trivial Concept Classes from Continuous Data Streams ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In this section, we discover what constitutes learnability of multi-class concept classes in the blindprediction setting. We borrow Definition 3.1 to describe the learnability of a concept class $H$ . ", "page_idx": 7}, {"type": "text", "text": "Since the blind-prediction setting is a harder variant of the update-and-deploy setting, we frame a similar question asking if the Littlestone dimension is the right characterization of learnability. ", "page_idx": 7}, {"type": "text", "text": "Question: What characterizes the learnability of concept classes $H$ in the blind-prediction setting? Does $L D(H)$ play a pertinent role? ", "page_idx": 7}, {"type": "text", "text": "To answer this question, we come up with a simple concept class $H$ that proves to be unlearnable in the blind-prediction setting. This result comes in stark contrast to the results found in Section 3.1. Below, we detail Theorem 4.1 and Corollary 4.2. ", "page_idx": 7}, {"type": "text", "text": "Theorem 4.1. Let $H\\,=\\,\\{h\\}$ and $\\mathcal{X}\\,=\\,\\{\\boldsymbol{x}_{1},\\boldsymbol{x}_{2}\\}$ with $h(x_{1})\\,=\\,0$ and $h(x_{2})\\,=\\,1$ . Then, for any learning algorithm $\\boldsymbol{\\mathcal{A}}$ with a linear querying strategy, $M B_{\\mathcal{P}(H)}(A)=\\infty$ so $H$ is not learnable under the blind-prediction setting. ", "page_idx": 7}, {"type": "text", "text": "For the formal proof of Theorem 4.1, refer to Appendix A.2. ", "page_idx": 7}, {"type": "text", "text": "Corollary 4.2. If $H$ is a concept class such that $\\exists h\\in H$ and $\\exists x_{1},x_{2}\\in\\mathcal{X}$ such that $h(x_{1})\\neq h(x_{2})$ , then $H$ is unlearnable in the blind-prediction setting. ", "page_idx": 7}, {"type": "text", "text": "Proof. Let $H^{\\prime}=h$ and $\\mathcal{X}^{\\prime}=\\{x_{1},x_{2}\\}$ . From Theorem 4.1, it was shown that $M B_{\\mathcal{P}(H^{\\prime})}(A)=\\infty$ for any learning algorithm $\\boldsymbol{\\mathcal{A}}$ with a linear querying strategy so $H^{\\prime}$ is unlearnable. Since $H^{\\prime}\\subseteq H$ and $x_{1},x_{2}\\in\\mathcal{X}$ , it follows that $M B_{\\mathcal{P}(H)}=\\infty$ so $H$ is unlearnable. \u53e3 ", "page_idx": 7}, {"type": "text", "text": "4.2 Are Adaptive Learners Required for Pattern Classes? ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In this section, we demonstrate the necessity of adaptive learning algorithms for effectively learning pattern classes. Since concept classes represent a set of functions, and functions can be thought as established input-output pairs, different permutations of these pairs don\u2019t result in different functions being realizable on the sequence. As a result, non-adaptive learning algorithms are sufficient in learning concept classes but adaptive learning strategies may be required for pattern classes. Below, we construct an example of a continuous pattern class $\\mathcal{P}$ that is only learnable by any adaptive sampling algorithm. ", "page_idx": 7}, {"type": "text", "text": "Pattern Class Example Let $H$ be a multi-class concept class with $L D(H)=\\infty$ . $\\mathrm{For}\\,t_{1},t_{2}\\in\\mathbb{N}$ with $t_{2}~>~t_{1}$ , define $\\bar{\\mathcal{P}}(H,t_{1},t_{2})\\ =\\ \\{(X_{t},Y_{t})_{t\\in(t_{1},t_{2})}\\ :\\ \\exists h\\ \\in\\ H,\\forall t\\ \\in\\ (t_{1},t_{2}),h(X_{t})\\ =\\$ $Y_{t}\\}$ . Then, ${\\mathcal P}(H,t_{1},t_{2})\\ =\\ \\{(X_{t},Y_{t})_{t\\in[t_{1},t_{2})}\\ :\\ \\exists P\\ \\in\\ {\\bar{P}}(H,t_{1},t_{2})$ such that $\\left(X_{t_{1}},Y_{t_{1}}\\right)\\;=\\;$ $(P,t_{2})$ and $(X_{t},Y_{t})_{t\\in(t_{1},t_{2})}=P\\}$ . $\\bar{\\mathcal{P}}(H,t_{1},t_{2})$ corresponds to the set of realizable data streams between $t_{1}$ and $t_{2}$ and $\\mathcal{P}(H,t_{1},t_{2})$ ensures that at time $t_{1}$ the data stream encodes the entire pattern from $t_{1}$ to $t_{2}$ in $X_{t_{1}}$ . Let $N\\;=\\;\\{{\\bf n}\\;\\in\\;\\{0\\}\\,\\times\\,\\mathbb{N}^{\\infty}\\,:\\,\\forall i\\;\\in\\;\\mathbb{N},{\\bf n}(i+1)\\;>\\;{\\bf n}(i)\\}$ and $\\mathcal{Q}=\\{\\mathbf{q}\\in\\{0\\}\\times\\mathbb{Q}_{>0}^{\\infty}:\\exists\\mathbf{n}\\in\\mathcal{N},\\forall i\\in\\mathbb{N},\\mathbf{n}(i)\\,<\\mathbf{q}(i+1)\\,<\\mathbf{n}(i+1)\\}$ . Then, we define the continuous pattern class $\\mathcal{P}$ in the following way: $\\begin{array}{r}{\\mathcal{P}=\\bigcup_{\\mathbf{q}\\in\\mathcal{Q}}\\left(\\prod_{i=1}^{\\infty}\\mathcal{P}(H,\\mathbf{q}(i),\\mathbf{q}(i+1))\\right)}\\end{array}$ where $\\begin{array}{r}{\\prod_{i=1}^{\\infty}\\mathcal{P}(H,\\mathbf{q}(i),\\mathbf{q}(i+1))}\\end{array}$ represents an infinite Cartesian product among the valid patterns in each interval dictated by $\\mathbf{q}$ . ", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Lemma 4.3. For the update-and-deploy setting, any random sampling algorithm $\\boldsymbol{\\mathcal{A}}$ with a linear querying strategy $Q_{A}(t)$ has $M B_{\\mathcal{P}}(\\mathcal{A})=\\infty$ . ", "page_idx": 8}, {"type": "text", "text": "Proof. Let $\\boldsymbol{\\mathcal{A}}$ be a random sampling algorithm with a linear querying strategy $Q_{A}(t)$ . We will now construct a continuous data stream $(Z_{t})_{t\\geq0}$ that is realizable with respect to $\\mathcal{P}$ in a randomized fashion and prove a bound on the minimum expected error. Randomly select a vector $\\mathbf q\\in\\mathcal Q$ . ", "page_idx": 8}, {"type": "text", "text": "To construct such a continuous process $(Z_{t})_{t\\geq0}$ , we first decompose $\\mathbb{R}_{\\geq0}=\\cup_{n=1}^{\\infty}[2\\mathbf{q}(n),2\\mathbf{q}(n\\!+\\!1))$ . The idea behind this decomposition is to construct a pattern on each interval that corresponds to a randomly chosen $h\\ \\in\\ H$ . To do this, we take each interval $[2\\mathbf{q}(n),2\\mathbf{q}(n+1))$ , letting $\\mathcal{Q}_{A}(2\\mathbf{q}(n+\\mathrm{i}))=k$ for some $k\\in\\mathbb N$ , and break it further down such that $[2\\mathbf{q}(n),2\\mathbf{q}(n+1))=$ $\\begin{array}{r}{\\cup_{j=1}^{2k}\\Big[\\frac{(\\mathbf{q}(n+1)-\\mathbf{q}(n))}{k}(j-1)+2\\mathbf{q}(n),\\frac{(\\mathbf{q}(n+1)-\\mathbf{q}(n))}{k}j+2\\mathbf{q}(n)\\Big).}\\end{array}$ By doing this, we can take an arbitrary root-to-leaf path from a Littlestone tree of depth $2k$ , and then paint each sub-interval with an instance-label pair on this path. Since the number of sub-intervals is greater than the number of queries made by the algorithm $\\boldsymbol{\\mathcal{A}}$ , on some set of sub-intervals the algorithm $\\boldsymbol{\\mathcal{A}}$ is forced to guess the true label. ", "page_idx": 8}, {"type": "text", "text": "As described above, assume the interval $[2\\mathbf{q}(n),2\\mathbf{q}(n{+}1))$ for some $n\\in\\mathbb N$ , letting $\\mathcal{Q}_{\\cal A}(2\\mathbf{q}(n{+}1))=$ $k$ for some $k~\\in~\\mathbb{N}$ . Since $L D(H)~=~\\infty$ , there must exist a Littlestone tree $T$ where the minimum root-to-leaf depth is at least $2k$ . Then, let $\\sigma~=~\\{(X_{1},Y_{1}),...,(X_{2k},Y_{2k})\\}$ correspond to a randomly chosen root-to-leaf path. For each $j~\\in~\\{1,...,2k\\}$ , populate the interval $\\begin{array}{r}{\\left[\\frac{(\\mathbf q(n+1)-\\mathbf q(n))}{k}(j-1)+2\\mathbf q(n),\\frac{(\\mathbf q(n+1)-\\mathbf q(n))}{k}j+2\\mathbf q(n)\\right)}\\end{array}$ with the pair $(X_{j},Y_{j})$ . For simplicity, let $\\begin{array}{r}{I_{j}\\;=\\;\\Big[\\frac{(\\mathbf{q}(n+1)-\\mathbf{q}(n))}{k}(j-1)+2\\mathbf{q}(n),\\frac{(\\mathbf{q}(n+1)-\\mathbf{q}(n))}{k}j+2\\mathbf{q}(n)\\Big)}\\end{array}$ . For the process at time $t=2\\mathbf{q}(n)$ , let $Z_{t}=(P,2\\mathbf{q}(n+1))$ where $P=(X_{1},Y_{1})_{t\\in I_{1}\\backslash2\\mathbf{q}(n)}\\cup\\bigcup_{j=2}^{2k}[X_{j},Y_{j})_{t\\in I_{j}}.$ ", "page_idx": 8}, {"type": "text", "text": "It\u2019s important to note that the constructed continuous process on the interval $[2\\mathbf{q}(n),2\\mathbf{q}(n+1))$ lies in $\\mathcal{P}(\\bar{H},2\\mathbf{q}(n),2\\mathbf{q}(n+1))$ . The first point in the interval corresponds to the point $(P,2\\mathbf{q}(n+1))$ ) and $P\\in{\\bar{\\mathcal{P}}}(H,2\\mathbf{q}(n),2\\mathbf{q}(n+1))$ since it was generated from a root-to-leaf path in $T$ which is realizable by some $h\\in H$ . ", "page_idx": 8}, {"type": "text", "text": "Now, we show that on the sub-intervals $\\boldsymbol{\\mathcal{A}}$ does not query in the interval $[2\\mathbf{q}(n),2\\mathbf{q}(n+1)),\\mathcal{A}$ $\\boldsymbol{\\mathcal{A}}$ , the minimum expected error is equal to $\\frac{(\\mathbf{q}(n{+}1){-}\\mathbf{q}(n))}{k}$ . The analysis closely mirrors that of in Theorem 3.3. Let the $j^{t h}$ sub-interval be a sub-interval, where $1\\leq j\\leq2k$ , where $\\boldsymbol{\\mathcal{A}}$ does not query. Let $E_{1}=\\{t\\in I_{j}:A(X_{t})\\neq Y_{j}\\}$ and $E_{0}=\\{t\\in I_{j}:\\mathcal{A}(X_{t})\\neq\\dot{Y}_{j}^{\\prime}\\}$ where $Y_{j}^{\\prime}$ is the other label in tree $T$ for the point $X_{j}$ . Then, $\\begin{array}{r}{\\mathbb{E}\\left[\\int_{I_{j}}\\mathbb{1}[A(X_{t})\\neq Y_{t}]\\,d t\\right]=\\mathbb{E}\\left[\\mu(E_{1})\\mathbb{1}[Y_{t}=Y_{j}]+\\mu(E_{0})\\mathbb{1}[Y_{t}=Y_{j}^{\\prime}]\\right]=}\\end{array}$ $\\mathbb{E}[\\mu(E_{1})]\\mathbb{E}[\\mathbb{1}[Y_{t}\\,=\\,Y_{j}]]\\,+\\,\\stackrel{\\cdot}{\\mathbb{E}}[\\mu(E_{0})]\\mathbb{E}[\\mathbb{1}[Y_{t}\\,=\\,\\bar{Y}_{j}^{\\prime}]]$ where $\\mu$ is the Lebesgue measure. Since a random branch was chosen within the tree $T$ , there was an equal chance of selecting $Y_{t}=Y_{j}$ or $Y_{t}=Y_{j}^{\\prime}$ , then $\\begin{array}{r}{\\mathbb{E}[\\mu(E_{1})]\\mathbb{E}[\\mathbb{1}[Y_{t}=Y_{j}]]+\\mathbb{E}[\\mu(E_{0})]\\mathbb{E}[\\mathbb{1}[Y_{t}=\\dot{Y_{j}^{\\prime}}]]=\\mathbb{E}[\\mu(E_{0})]/2+\\mathbb{E}\\overline{[\\mu(E_{1})]/2}=}\\end{array}$ $\\begin{array}{r}{\\mathbb{E}[{\\boldsymbol\\mu}(E_{0})+{\\boldsymbol\\mu}(E_{1})]/2\\geq\\frac{(\\mathbf{q}(n+1)-\\mathbf{q}(n))}{k}}\\end{array}$ . Therefore, the learner $\\boldsymbol{\\mathcal{A}}$ accumulates an expected error of (q(n+1k)\u2212q(n))on each interval it doesn\u2019t query. Since the learner has only k queries, it can only query in at most $k$ of the $2k$ intervals. At minimum there will exist $k$ intervals that haven\u2019t been queried by the learner. Let $I_{1},...,I_{k}$ represent $k$ of these intervals algorithm $\\boldsymbol{\\mathcal{A}}$ does not query. It follows that $\\begin{array}{r}{\\mathbb{E}\\left[\\int_{2\\mathbf{q}(n)}^{2\\mathbf{q}(n+1)}\\mathbb{1}[\\overbrace{A(X_{t})\\neq Y_{t}}^{-}]\\,d t\\right]\\geq\\sum_{i=1}^{k}\\mathbb{E}\\left[\\int_{I_{i}}\\mathbb{1}[A(X_{t})\\,\\overset{\\smile}{\\neq}Y_{t}]\\,d t\\right]=\\mathbf{q}(n+\\overset{\\cdot}{1})-\\mathbf{q}(n).}\\end{array}$ ", "page_idx": 8}, {"type": "text", "text": "Since $n\\in\\mathbb N$ was chosen arbitrarily, then it holds for all intervals $[2\\mathbf{q}(n),2\\mathbf{q}(n+1))$ . As a result, ", "page_idx": 8}, {"type": "equation", "text": "$$\n\\operatorname*{lim}_{T\\to\\infty}\\mathbb{E}\\left[\\int_{0}^{T}\\mathbb{1}[A(X_{t})\\neq Y_{t}]\\,d t\\right]\\geq\\operatorname*{lim}_{T\\to\\infty}\\sum_{i=1}^{\\operatorname*{max}\\{n\\in\\mathbb{N}:T\\geq2\\mathbf{q}(n+1)\\}}\\mathbb{E}\\left[\\int_{2\\mathbf{q}(i)}^{2\\mathbf{q}(i+1)}\\mathbb{1}[A(X_{t})\\neq Y_{t}]\\,d t\\right]\n$$", "text_format": "latex", "page_idx": 8}, {"type": "text", "text": "Since we constructed the process $(Z_{t})_{t\\geq0}$ by randomly selecting branches from Littlestone trees for each interval, we appeal to the probabilistic method to show that there exists a fixed choice of a continuous-process $(Z_{t})_{t\\geq0}$ such that $M B\\mathcal{P}(A,(Z_{t})_{t\\geq0})=\\infty$ . Therefore, $M B_{\\mathcal{P}}(\\mathcal{A})=\\infty$ \uff0e\u53e3 ", "page_idx": 9}, {"type": "text", "text": "Remark 4.4. It can be shown that the results of Lemma 4.3 directly extend for the blind-prediction setting. ", "page_idx": 9}, {"type": "text", "text": "Now, we turn to an adaptive sampling learning algorithm, specifically Algorithm 2, that achieves $M B\\mathrm{{/}(A l g o r i t h m\\;2)=\\bar{0}}\\,$ . Specifically, we show this result in the blind-prediction setting. As will be proven in the analysis of Lemma 4.5, Algorithm 2 specifically queries at the timestamps where a portion of the future continuous data stream is revealed. As a result, Algorithm 2 makes at most a countable number of mistakes because only a countable number of such points exist in any continuous data stream realizable by $\\mathcal{P}$ so it has an expected error of 0 with a linear querying strategy. ", "page_idx": 9}, {"type": "text", "text": "Algorithm 2 Adaptive Sampler $(\\mathcal{P})$   \n1: $t=$ time {starts at $t=0$ }, $t_{q}=0$ , initialize $\\hat{f}$ to be some function $\\hat{f}:\\mathbb{R}_{\\geq0}\\rightarrow\\mathcal{Y}$   \n2: while true do   \n3: Predict ${\\hat{f}}(t)$   \n4: if $t=t_{q}$ then   \n5: Query and receive point-label pair $(X_{t},Y_{t})=(P,n)$   \n6: Update ${\\hat{f}}(t)=Y_{t}$ for all $(X_{t},Y_{t})\\in P$   \n7: $t_{q}\\leftarrow n$   \n8: end if   \n9: end while ", "page_idx": 9}, {"type": "text", "text": "Lemma 4.5. Let $\\boldsymbol{\\mathcal{A}}$ be the adaptive sampler in Algorithm 2. Then, the querying strategy $Q_{A}(t)\\leq t$ and $M B_{\\mathcal{P}}(\\mathcal{A})=0$ in the blind-prediction setting. ", "page_idx": 9}, {"type": "text", "text": "Proof (Sketch). Let $\\boldsymbol{\\mathcal{A}}$ represent Algorithm 2 and $(Z_{t})_{t\\geq0}=P\\in\\mathcal P$ be any adversarially chosen data stream. Since each $\\mathbf q\\in\\mathcal Q$ has ${\\bf q}(1)=0$ , then for any $P\\in\\mathcal P$ , it must be the case that $\\dot{Z_{0}}=(X_{0},Y_{0})$ where $X_{0}$ reveals the full sequence until time $Y_{0}$ . Algorithm 2 has its first query at time $t\\,=\\,0$ and fits the predictor $\\hat{f}$ to output the labels of sequence $X_{0}$ for all time $t\\in(0,Y_{0})$ . Since $(Z_{t})_{t>0}$ follows the exact sequence described by $X_{0}$ until time $t\\,=\\,Y_{0}$ , then $\\begin{array}{r}{\\int_{0}^{Y_{0}}\\mathbb{1}[\\mathcal{A}(X_{t})\\neq Y_{t}]\\,d t=0}\\end{array}$ implying that $\\begin{array}{r}{\\mathbb{E}[\\int_{0}^{Y_{0}}\\mathbb{1}[{\\boldsymbol{A}}(X_{t})\\neq Y_{t}]\\,d t]=0}\\end{array}$ . At time $t=Y_{0}$ , $\\boldsymbol{\\mathcal{A}}$ queries at exactly the right time to gain information about a future portion of the data stream $(Z_{t})_{t\\geq0}$ with the same analysis repeating continuously. As a result, $M B\\bar{\\mathcal{P}}(\\mathcal{A},(Z_{t})_{t\\geq0})=0$ and since $(\\bar{Z}_{t})_{t\\geq0}$ was arbitrarily chosen, then $M B_{\\mathcal{P}}(\\mathcal{A})\\overset{\\cdot}{=}0$ with $Q_{A}(t)\\leq t$ . \u53e3 ", "page_idx": 9}, {"type": "text", "text": "Remark 4.6. The results of Lemma 4.5 can also be extended to the update-and-deploy setting. ", "page_idx": 9}, {"type": "text", "text": "4.3 Learning Pattern Classes from Discrete Data Streams ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "As witnessed in the example from Section 4.2, one can construct a rather complex pattern class to model almost any sort of structure. While the power of pattern classes is inherent in their ability to express complicated relationships, directly analyzing their behavior under continuous data streams without a foundational understanding can prove to be an intractable problem. ", "page_idx": 9}, {"type": "text", "text": "As a result, we initiate a study of pattern classes under discrete data streams to provides a foundational understanding of how learning algorithms handle data arriving in distinct, separate chunks. This framework simplifies the complexity by allowing us to focus on key principles of sequential decisionmaking such as incremental learning. By developing a theory in a discrete context, we can potentially employ these insights that can prove to be crucial for tackling the more complex scenarios of learning under continuous data streams. In Appendix B, we develop a complete theory on realizable learning of pattern classes in the blind-prediction setting under discrete streams. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Shay Moran, Ohad Sharon, Iska Tsubari, and Sivan Yosebashvili. List online classification. In The Thirty Sixth Annual Conference on Learning Theory, pages 1885\u20131913. PMLR, 2023.   \n[2] N. Littlestone. Learning quickly when irrelevant attributes abound: A new linear-threshold algorithm. Machine Learning, 2:285\u2013318, 1988.   \n[3] A. Daniely, S. Sabato, S. Ben-David, and S. Shalev-Shwartz. Multiclass learnability and the ERM principle. Journal of Machine Learning Research, 16(12):2377\u20132404, 2015. [4] Pramith Devulapalli and Steve Hanneke. The dimension of self-directed learning. In International Conference on Algorithmic Learning Theory, pages 544\u2013573. PMLR, 2024.   \n[5] Peter Auer, Nicolo Cesa-Bianchi, and Paul Fischer. Finite-time analysis of the multiarmed bandit problem. Machine learning, 47:235\u2013256, 2002.   \n[6] Gergely Neu and G\u00e1bor Bart\u00f3k. An efficient algorithm for learning with semi-bandit feedback. In International Conference on Algorithmic Learning Theory, pages 234\u2013248. Springer, 2013.   \n[7] G\u00e1bor Bart\u00f3k and Csaba Szepesv\u00e1ri. Partial monitoring with side information. In International Conference on Algorithmic Learning Theory, pages 305\u2013319. Springer, 2012. [8] G\u00e1bor Bart\u00f3k, Dean P Foster, D\u00e1vid P\u00e1l, Alexander Rakhlin, and Csaba Szepesv\u00e1ri. Partial monitoring\u2014classification, regret bounds, and algorithms. Mathematics of Operations Research, 39(4):967\u2013997, 2014.   \n[9] Noga Alon, Nicolo Cesa-Bianchi, Ofer Dekel, and Tomer Koren. Online learning with feedback graphs: Beyond bandits. In Conference on Learning Theory, pages 23\u201335. PMLR, 2015.   \n[10] Tor Lattimore and Csaba Szepesv\u00e1ri. An information-theoretic approach to minimax regret in partial monitoring. In Conference on Learning Theory, pages 2111\u20132139. PMLR, 2019.   \n[11] Tor Lattimore. Minimax regret for partial monitoring: Infinite outcomes and rustichini\u2019s regret. In Conference on Learning Theory, pages 1547\u20131575. PMLR, 2022.   \n[12] Yoav Freund, H. Sebastian Seung, Eli Shamir, and Naftali Tishby. Selective sampling using the query by committee algorithm. Machine Learning, 28:133\u2013168, 1997.   \n[13] S. Dasgupta, D. Hsu, and C. Monteleoni. A general agnostic active learning algorithm. In Advances in Neural Information Processing Systems 20, 2007.   \n[14] Liu Yang. Active learning with a drifting distribution. Advances in Neural Information Processing Systems, 24, 2011.   \n[15] T.-K. Huang, A. Agarwal, D. J. Hsu, J. Langford, and R. E. Schapire. Efficient and parsimonious agnostic active learning. In Advances in Neural Information Processing Systems 28, 2015. ", "page_idx": 10}, {"type": "text", "text": "A Proofs for Learning from Continuous Data Streams ", "text_level": 1, "page_idx": 11}, {"type": "text", "text": "A.1 Proof of Theorem 3.3 ", "text_level": 1, "page_idx": 11}, {"type": "text", "text": "Proof. Let $\\boldsymbol{\\mathcal{A}}$ be a learning algorithm with a linear querying strategy $Q_{A}(t)$ . Assume some concept class $H$ with $L D(H)={\\overline{{\\infty}}}$ . For every $n\\,\\in\\,\\mathbb{N}$ , we show that there exists an adversarially constructed data stream, $(Z_{t})_{t\\geq0}$ , such that $M B_{\\mathcal{P}(H)}(\\mathcal{A},(Z_{t})_{t\\geq0})\\geq n$ . Since this holds $\\forall n\\in\\mathbb{N}$ , then $\\begin{array}{r}{M B_{\\mathcal P(H)}(A)=\\operatorname*{sup}_{(Z_{t})_{t\\geq0}}M B_{\\mathcal P(H)}(A,(Z_{t})_{t\\geq0})=\\infty}\\end{array}$ . ", "page_idx": 11}, {"type": "text", "text": "Our learning model assumes an oblivious adversary, so we will construct a continuous data stream $(Z_{t})_{t\\geq0}$ beforehand that is realizable with respect to $H$ . However, we construct $(Z_{t})_{t\\geq0}$ in a randomized fashion and bound the minimum expected error of this randomly constructed process. Then, at the end of the proof, we will call upon the probabilistic method to show that there exists a continuous process achieving at least that expected error. ", "page_idx": 11}, {"type": "text", "text": "Take some $n\\in\\mathbb N$ and let $Q_{A}(4n)=k$ . Since $L D(H)=\\infty$ , then there must exist a Littlestone tree $T$ where the minimum root-to-leaf path of $T$ is at least $2k$ . Consider a random walk in $T$ starting at the root node that picks with probability $1/2$ the left child or the right child and descends level-by-level until it reaches a leaf node. Let $\\sigma^{\\Big\\prime}\\!=^{?}\\!\\left\\{(x_{1},y_{1}),...,(x_{2k},y_{2k})\\right\\}$ correspond to the root-to-leaf path produced by the random walk on $T$ . Note that $H_{\\sigma}=\\{h\\in\\dot{H}:\\forall(X_{i},Y_{i})\\in\\sigma,h(X_{i})=Y_{i}\\}$ , the subset of the concept class consistent with the sequence $\\sigma$ , will have at least one classifier due to the guarantee provided by the Littlestone tree that every branch in $T$ is realizable by some $h\\in H$ . ", "page_idx": 11}, {"type": "text", "text": "Now, we describe the construction of the continuous process $(Z_{t})_{t\\geq0}$ using the sequence $\\sigma$ . Decompose $[0,4n)$ in the following way: $\\begin{array}{r}{[0,4n)\\,=\\,\\bigcup_{j=1}^{2k}\\left[\\frac{2n}{k}(j-\\bar{1)},\\frac{2n}{k}j\\right)}\\end{array}$ . For the $j^{t h}$ interval where $1\\,\\leq\\,j\\,\\leq\\,2k$ , $\\forall t\\,\\in\\,[\\frac{2n}{k}(j-1),\\frac{2n}{k}j)$ , define $Z_{t}\\,=\\,(X_{j},Y_{j})\\,=\\,\\sigma(j)$ . On the time interval $[0,4n)$ , if one segments the process $(Z_{t})_{t\\geq0}$ into intervals of size $\\textstyle{\\frac{2n}{k}}$ , then for the $j^{t h}$ interval, where $1\\leq j\\leq2k$ , the process contains the point $\\sigma(j)$ for the entirety of the interval. For $t\\geq4n$ , then define $Z_{t}=(X_{t},Y_{t})$ to be a point-label pair $(X^{\\prime},Y^{\\prime})$ such that for each $h\\in H_{\\sigma},h(X^{\\prime})=Y^{\\prime}$ . ", "page_idx": 11}, {"type": "text", "text": "Now, we show that on the intervals $\\boldsymbol{\\mathcal{A}}$ does not query in the time period $[0,4n)$ , the minimum expected error is equal to $\\frac{n}{k}$ . Let the $j^{t h}$ interval be an interval, where $1\\le j\\le2k$ , where $\\boldsymbol{\\mathcal{A}}$ does not query. Let $\\begin{array}{r}{E_{1}=\\{t\\in[\\frac{\\ddot{2}n}{k}(j-1),\\frac{2n}{k}j]:\\mathcal{A}(X_{t})\\neq Y_{j}\\}}\\end{array}$ and $\\begin{array}{r}{E_{0}=\\{t\\in[\\frac{2n}{k}(j-1),\\frac{2n}{k}j]:\\mathcal{A}(X_{t})\\neq Y_{j}^{\\prime}\\}}\\end{array}$ where $Y_{j}^{\\prime}$ is the other label in tree $T$ for the point $X_{j}$ . Then, $\\begin{array}{r l}{\\mathbb{E}\\left[\\int_{\\frac{2n}{k}(i-1)}^{\\frac{2n}{k}i}\\mathbb{1}[{\\cal A}(X_{t})\\ne Y_{t}]\\,d t\\right]\\,=\\,}&{{}}\\end{array}$ $\\mathfrak{L}\\left[\\mu(E_{1})\\mathbb{1}[Y_{t}=Y_{j}]+\\mu(E_{0})\\mathbb{1}[Y_{t}=Y_{j}^{\\prime}]\\right]\\,=\\,\\mathbb{E}[\\mu(E_{1})]\\mathbb{E}[\\mathbb{1}[Y_{t}\\,=\\,\\bar{Y}_{j}]]+\\mathbb{E}[\\mu(E_{0})]\\mathbb{E}[\\mathbb{1}[Y_{t}\\,=\\,\\bar{Y}_{j}^{\\prime}]]$ where $\\mu$ is the Lebesgue measure. Since a random branch was chosen within the tree $T$ , there was an equal chance of selecting $Y_{t}=Y_{j}$ or $Y_{t}=Y_{j}^{\\prime}$ , then $\\begin{array}{r}{\\mathbb{E}[\\mu(E_{1})]\\mathbb{E}[\\mathbb{1}[Y_{t}=Y_{j}]]+\\mathbb{E}[\\mu(E_{0})]\\mathbb{E}[\\mathbb{1}[Y_{t}=}\\end{array}$ $Y_{j}^{\\prime}]\\,=\\,\\mathbb{E}[\\mu(E_{0})]/2\\,+\\,\\mathbb{E}[\\mu(E_{1})]/2\\,=\\,\\mathbb{E}[\\mu(E_{0})+\\mu(E_{1})]/2\\,\\geq\\,n/k$ . Therefore, the learner $\\boldsymbol{\\mathcal{A}}$ accumulates an expected error of $n/k$ on each interval it doesn\u2019t query. Since the learner has only $k$ queries, it can only query in at most $k$ of the $2k$ intervals. At minimum there will exist $k$ intervals that haven\u2019t been queried by the learner. Let $I_{1},...,I_{k}$ represent $k$ of these intervals algorithm $\\boldsymbol{\\mathcal{A}}$ does not query. It follows that $\\begin{array}{r}{\\mathbb{E}\\left[\\int_{0}^{4n}\\mathbb{1}[{\\cal A}(X_{t})\\neq Y_{t}]\\,d t\\right]\\ge\\sum_{i=1}^{k}\\mathbb{E}\\left[\\int_{I_{i}}\\mathbb{1}[{\\cal A}(X_{t})\\neq Y_{t}]\\,d t\\right]=n.}\\end{array}$ ", "page_idx": 11}, {"type": "text", "text": "The strategy chosen to prove a lower bound on the expected error to be $n$ relied on generating a continuous time process by randomly selecting a branch within the Littlestone tree $T$ which corresponds to a random selection of a target concept. However, we appeal to the probabilistic method to show that if the expected error for algorithm $\\boldsymbol{\\mathcal{A}}$ is at least $n$ , then there exists a fixed choice of a continuous-process $(Z_{t})_{t\\geq0}$ such that $M B_{\\mathcal{P}(H)}(A,(Z_{t})_{t\\geq0})\\geq n$ . Since we show that for every $n\\in\\mathbb N$ and any learning algorithm $\\boldsymbol{\\mathcal{A}}$ there exists an adversarial strategy $(Z_{t})_{t\\geq0}$ such that $M B_{\\mathcal{P}(H)}(A,(Z_{t})_{t\\geq0})\\geq n.$ , then the adversary can force the learner to make an arbitrarily large error $\\begin{array}{r}{M B_{\\mathcal P(H)}(A)=\\operatorname*{sup}_{(Z_{t})_{t\\geq0}}M B_{\\mathcal P(H)}(A,(Z_{t})_{t\\geq0})=\\infty}\\end{array}$ so $H$ is not learnable. ", "page_idx": 11}, {"type": "text", "text": "A.2 Proof of Theorem 4.1 ", "text_level": 1, "page_idx": 11}, {"type": "text", "text": "Proof. The essence of this proof lies in the simple yet effective scheme the adversary can employ to force any learning algorithm $\\boldsymbol{\\mathcal{A}}$ with a linear querying strategy $Q_{A}(t)$ to have $M B_{\\mathcal{P}(H)}(A)=\\infty$ The idea behind this adversarial approach is to divide the timeline, $\\mathbb{R}_{\\geq0}$ , into small enough intervals where each interval is populated randomly with point-label pair $(x_{1},0)$ or $(x_{2},1)$ such that $\\boldsymbol{\\mathcal{A}}$ is forced to guess the right label. ", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "We first describe the construction of the continuous data stream $(Z_{t})_{t\\geq0}$ realizable with respect to $h$ . As previously done in Theorem 3.3, we use a randomized approach in constructing $(Z_{t})_{t\\geq0}$ to prove a bound on the expected error. This randomized approach draws upon a family of continuous processes to show that the expected error is some minimum value. However, the mistake-bounds require a singular continuous process to yield that error. So, we apply the probabilistic method to prove the existence of a continuous data stream that can be fixed beforehand that achieves at least that expected error. ", "page_idx": 12}, {"type": "text", "text": "We first describe the construction of $(Z_{t})_{t\\geq0}$ in a randomized fashion. Decompose $\\mathbb{R}_{\\geq0}=\\cup_{n=1}^{\\infty}[n-$ $1,n)$ . For every $n\\in\\mathbb N$ , let $k_{n}=Q_{A}(n)$ . Then, split $[n\\!-\\!1,n)$ into $2k_{n}$ intervals each of size $\\frac{1}{2k_{n}}$ such that $\\begin{array}{r}{[n-1,n)=\\bigcup_{j=1}^{2k_{n}}\\left[n-1+\\frac{1}{2k_{n}}(j-1),n-1+\\frac{1}{2k_{n}}j\\right)}\\end{array}$ . Let $\\sigma\\sim\\mathrm{Unif}(\\{(x_{1},0),(x_{2},1)\\}^{2k_{n}})$ be a sequence sampled uniformly from the space $\\{(x_{1},0),(x_{2},1)\\}^{2k_{n}}$ . Then, construct the process $(Z_{t})_{t\\geq0}$ such that $\\forall n\\;\\in\\;\\mathbb{N},\\sigma\\;\\sim\\;\\mathrm{Unif}\\big(\\{(x_{1},0),(x_{2},1)\\}^{2k_{n}}\\big),\\forall j\\;\\in\\;\\{1,...,2k_{n}\\},\\forall t\\;\\in\\;[n\\,-\\,1\\,+\\,1\\,],$ $\\begin{array}{r}{\\frac{1}{2k_{n}}(j-1),n-1+\\frac{1}{2k_{n}}j)}\\end{array}$ then $Z_{t}=(X_{j},Y_{j})=\\sigma(j)$ . Essentially, we assign the point-label pairs $(x_{1},0)$ and $(x_{2},1)$ randomly to each interval to construct the process. ", "page_idx": 12}, {"type": "text", "text": "Letting $n\\in\\mathbb N$ , then algorithm $\\boldsymbol{\\mathcal{A}}$ makes at most $k_{n}$ queries in the interval $[n-1,n)$ implying at least $k_{n}$ of the intervals within $[n-1,n)$ pass by the learner with no query. On the intervals the learner does not query, we show that the learner\u2019s expected error is equal to $\\textstyle{\\frac{1}{4k_{n}}}$ . For some $1\\leq j\\leq2k_{n}$ , let the $j^{t h}$ interval within $[n-1,n)$ contain no queries from $\\boldsymbol{\\mathcal{A}}$ . Then, let $E_{0}$ and $E_{1}$ represent the portion of the $j^{t h}$ interval that $\\boldsymbol{\\mathcal{A}}$ predicts as a 0 or 1 respectively. It follows that the expected error of algorithm $\\boldsymbol{\\mathcal{A}}$ on this interval is equivalent to $\\mathbb{E}[\\mu(E_{1})\\mathbb{1}[Y_{j}=\\stackrel{\\cdot}{=}0]+\\mu(E_{0})\\mathbb{1}[Y_{j}=1]]$ where $Y_{j}$ is the true label for the $j^{t h}$ interval and $\\mu$ is the Lebesgue measure. Since there\u2019s an equal probability of $Y_{j}=0$ or $Y_{j}=1$ , the expected error $\\begin{array}{r}{\\mathbb{E}[\\mu(E_{1})\\mathbb{1}[Y_{j}=0]+\\mu(E_{0})\\mathbb{1}[Y_{j}=1]]=\\dot{\\frac{1}{4k_{n}}}}\\end{array}$ 1  There are . at least $k_{n}$ such intervals where $\\boldsymbol{\\mathcal{A}}$ does not query on $[n-1,n)$ which implies that the minimum expected error is equivalent to $\\textstyle{\\frac{1}{4}}$ . ", "page_idx": 12}, {"type": "text", "text": "Since we decomposed $\\mathbb{R}_{\\geq0}~=~\\bigcup_{n=1}^{\\infty}[n\\,-\\,1,n)$ , then $\\begin{array}{r l}{\\operatorname*{lim}_{T\\rightarrow\\infty}\\mathbb{E}\\left[\\int_{0}^{T}\\mathbb{1}[\\mathcal{A}(X_{t})\\neq Y_{t}]\\,d t\\right]}&{\\geq}\\end{array}$ $\\begin{array}{r}{\\operatorname*{lim}_{T\\rightarrow\\infty}\\sum_{n=1}^{\\lfloor T\\rfloor}\\mathbb{E}\\left[\\int_{n-1}^{n}\\mathbb{1}[A(X_{t})\\neq Y_{t}]\\,d t\\right]\\;\\ge\\;\\operatorname*{lim}_{T\\rightarrow\\infty}\\sum_{n=1}^{\\lfloor T\\rfloor}{\\frac{1}{4}}\\,=\\,\\infty.}\\end{array}$ . We used a randomized method to construct a family of continuous processes such that the expected error of a randomly chosen process reaches $\\infty$ . Applying the probabilistic method, there exists a continuous process whose expected error also reaches $\\infty$ . Therefore, $\\begin{array}{r}{M B_{\\mathcal P(H)}(A)=\\operatorname*{sup}_{(Z_{t})_{t\\geq0}}M B_{\\mathcal P(H)}(A,(Z_{t})_{t\\geq0})=\\infty}\\end{array}$ for any learning algorithm $\\boldsymbol{\\mathcal{A}}$ with a linear querying strategy $Q_{A}(t)$ so $H$ is unlearnable. \u53e3 ", "page_idx": 12}, {"type": "text", "text": "B Learnability of Pattern Classes from Discrete Data Streams ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "B.1 Query-based Feedback Online Learning ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "In this section, we are interested in developing a theory of realizable learning of pattern classes under discrete data streams in the blind-prediction setting. While a general theory of pattern classes under discrete data streams would involve considering the agnostic case as well, we focus on the simplest scenario which is realizable learning under a binary label space ${\\mathcal{D}}=\\{0,1\\}$ assuming deterministic learning algorithms. While this learning setting might seem quite restrictive, no such theory exists for the learnability of general pattern classes so we provide the first results in this space. We also develop this theory in the blind-prediction setting and a future direction of this work would be to characterize it in the update-and-deploy setting. ", "page_idx": 12}, {"type": "text", "text": "In the blind-prediction setting, assume a non-empty discrete pattern class $\\mathcal{P}$ and some budget of queries $Q$ . Assume a deterministic learning algorithm. One full round in this setting occurs in the following fashion at every $t\\in\\mathbb{N}$ : ", "page_idx": 12}, {"type": "text", "text": "1. The learner makes a prediction $\\hat{Y}_{t}\\in\\mathcal{V}$ and decides to query or not.   \n2. The learner reveals $\\hat{Y_{t}}$ .   \n3. The adversary selects the true label $Y_{t}$ . ", "page_idx": 12}, {"type": "text", "text": "The primary constraints governing this setting are realizability with respect to $\\mathcal{P}$ . Letting $(Z_{t})_{t=1}^{\\infty}=$ $(X_{t},\\bar{Y_{t}})_{t=1}^{\\infty}$ be the sequence of data points and true labels, then $(Z_{t})_{t=1}^{\\infty}\\,\\in\\,\\mathcal P$ to be considered realizable. It\u2019s important to note that the learner at any given time $t$ makes a prediction $\\hat{Y}_{t}$ based solely on the current timestamp and history of previous queries. ", "page_idx": 13}, {"type": "text", "text": "B.2 Query-based Mistake-Bounds ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "We turn to mistake-bounds to effectively capture the minimum number of mistakes an optimal deterministic learning algorithm will make. ", "page_idx": 13}, {"type": "text", "text": "The number of mistakes a deterministic learning algorithm $\\boldsymbol{\\mathcal{A}}$ makes given a target pattern/discrete data stream $P^{*}\\,=\\,(Z_{t})_{t=1}^{\\infty}\\,\\in\\mathcal{P}$ and a budget of $Q$ queries is denoted as $M_{Q}(\\bar{\\mathcal{A}},\\bar{P}^{*})$ . Formally, $M_{Q}(\\mathcal{A},P^{*})$ can be understood as ", "page_idx": 13}, {"type": "equation", "text": "$$\nM_{Q}(\\mathcal{A},P^{*})=\\sum_{i=1}^{\\infty}\\mathbb{1}[\\mathcal{A}(X_{t})\\neq Y_{t}].\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "To consider the mistake-bound of the learning algorithm $\\boldsymbol{\\mathcal{A}}$ on $\\mathcal{P}$ given a budget of $Q$ queries, we get ", "page_idx": 13}, {"type": "equation", "text": "$$\nM_{Q}({\\cal A},{\\mathcal P})=\\operatorname*{sup}_{P^{*}\\in{\\mathcal P}}M_{Q}({\\cal A},P^{*}).\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Finally, to obtain the optimal mistake-bound on $\\mathcal{P}$ given $Q$ queries, we take the infimum over all deterministic learning algorithms. ", "page_idx": 13}, {"type": "equation", "text": "$$\nM_{Q}(\\mathcal{P})=\\operatorname*{inf}_{A}M_{Q}(A,\\mathcal{P})\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "B.2.1 Query Trees ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In this section, we describe a certain type of tree, the query tree, which we will be used to capture the learning framework explained in Section B.1. Given the budget of queries $Q$ as an input, the query tree can be used to depict the evolution of the game in the blind-prediction setting. The name query tree comes from the fact that these trees describe the evolution of the game from the learner\u2019s perspective through queries. As a result, these trees are used in conjunction to provide upper and lower bounds on the optimal mistake-bounds for deterministic learning algorithms. ", "page_idx": 13}, {"type": "text", "text": "Definition B.1 (Query Tree). A query tree $T$ is defined as a tuple $(\\nu,E,Q)$ where $\\nu$ is a collection of nodes, $E$ is a collection of edges, and $Q$ is the query budget. ", "page_idx": 13}, {"type": "text", "text": "\u2022 $T$ is a rooted binary tree where each node has at most two children which are referred to as the left child and the right child.   \n\u2022 Each node $V_{j}\\in\\mathcal{V}$ corresponds to some timestamp $t_{i}$ where $V_{j}^{t}=t_{i}$ .   \n\u2022 The root node is represented by $V_{1}\\in\\mathcal{V}$ and corresponds to $V_{1}^{t}\\,=\\,t_{1}$ where $t_{1}$ is the timestamp of the first query.   \n\u2022 $\\forall V\\in\\mathcal{V}_{i}$ , $i f V^{\\prime}=\\operatorname{Parent}(V),$ , then $V^{'t}<V^{t}$ .   \n\u2022 $\\forall e\\,\\in\\,E$ where $e\\,=\\,(V^{\\prime},V)$ with $V^{\\prime}=\\operatorname{Parent}(V),$ , then the edge weight is defined as $\\omega(e)=y$ with $y=0$ if $'V=\\operatorname{LeftChild}(V^{\\prime})$ or $y=1$ if $\\mathrm{\\Delta}V=\\mathrm{RightChild}(V^{\\prime})$ .   \n\u2022 Every root-to-leaf path $\\left(V_{1},...,V_{n}\\right)$ has $n=Q+1$ nodes. ", "page_idx": 13}, {"type": "text", "text": "B.2.2 Query Learning Distance - Blind-Prediction Setting ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In this section, we describe a dimension based on a family of query trees that correctly characterizes the complexity of learning pattern classes in the blind-prediction setting. In the following subsections, we first tackle the case when $Q=0$ and then characterize the general setting for $Q>0$ . ", "page_idx": 13}, {"type": "text", "text": "Special Variant: Blind Learning What if the learner wasn\u2019t allowed to even query once? How would this affect the number of mistakes the learner would make? We call this special setting the blind learning scenario since the learner receives absolutely no feedback on any round of the game; only the current time-step is given as input. While Section B.1 describes the exact procedure round-by-round, a closer look at the intricacies of this scenario can reduce the game into a simple two-step procedure. The learner is not allowed to query a single time; so this implies that the learner cannot use information about the sequence itself to update its algorithm. Additionally, since the learner is a deterministic learning algorithm, this implies that an all-knowing adversary has complete knowledge about the learner\u2019s prediction at every timestamp. Combining these two facts together, it follows that the learner\u2019s predictions are independent of the true labels and the adversary can simply select the sequence of true labels all at once. Formally speaking, the entire game can be described in the following two steps: ", "page_idx": 14}, {"type": "text", "text": "1. The learner selects a prediction vector $\\hat{\\mathbf{y}}\\in\\{0,1\\}^{\\infty}$ .   \n2. The adversary selects the true outcome vector ${\\bf y}\\in\\{0,1\\}^{\\infty}$ . ", "page_idx": 14}, {"type": "text", "text": "Then, the number of mistakes is equivalent to $\\begin{array}{r}{\\sum_{i=1}^{\\infty}\\mathbb{1}[\\hat{\\mathbf{y}}(i)\\neq\\mathbf{y}(i)]=|\\hat{\\mathbf{y}}-\\mathbf{y}|}\\end{array}$ where $|\\cdot|$ stands for the L1-norm. As is consistent with the framework described in Section B.1, the vector y must be realizable with respect to the pattern class $\\mathcal{P}$ such that $\\exists P\\in{\\mathcal{P}}$ where $\\forall(X_{t},Y_{t})\\in\\mathcal{P}$ , $Y_{t}=\\mathbf{y}(t)$ . Below, we present an important lemma that characterizes the optimal mistake-bound $M_{0}(\\mathcal{P})$ . ", "page_idx": 14}, {"type": "text", "text": "Lemma B.2. If the number of queries $Q=0$ , then ", "page_idx": 14}, {"type": "equation", "text": "$$\nM_{0}({\\mathcal{P}})=\\operatorname{BlindLearningDimension}({\\mathcal{P}})=\\operatorname*{inf}_{{\\hat{\\mathbf{y}}}\\in\\{0,1\\}\\cdots}\\operatorname*{sup}_{\\mathbf{y}\\in{\\mathcal{P}}^{y}}|{\\hat{\\mathbf{y}}}-\\mathbf{y}|\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where $\\big|\\cdot\\big|$ represents the $L l$ -distance and $\\mathcal{P}^{y}=\\left\\{\\mathbf{y}\\in\\{0,1\\}^{\\infty}:\\exists P\\in\\mathcal{P}$ s.t. $\\forall(X_{t},Y_{t})\\in P,Y_{t}=$   \n${\\bf y}(t)\\}$ which represents the set of infinite binary vectors that are realizable with respect to $\\mathcal{P}$ . ", "page_idx": 14}, {"type": "text", "text": "Proof. We divide this proof into two parts by devoting the first half to a lower bound proof showing that BlindLearningDimension $(\\mathcal{P})\\overset{,}{\\leq}M_{0}(\\dot{\\mathcal{P}})$ . The second half of the proof is devoted to showing that there exists an algorithm $\\boldsymbol{\\mathcal{A}}$ such that $M_{0}(\\mathcal{A},\\mathcal{P})=$ BlindLearningDimension $(\\mathcal{P})$ . Finally, we combine these two statements to ultimately show that BlindLearningDimension $(\\dot{\\mathcal{P}})=M_{0}(\\mathcal{P})$ . ", "page_idx": 14}, {"type": "text", "text": "We first show the lower-bound proof by letting $\\boldsymbol{\\mathcal{A}}$ be any deterministic learning algorithm. Then, $M_{0}({\\mathcal{A}},P)$ is the mistake-bound of the learner $\\boldsymbol{\\mathcal{A}}$ given the pattern $P\\in\\mathcal P$ . Let $\\mathbf{y}^{\\prime}$ be the output of $\\boldsymbol{\\mathcal{A}}$ given no queries. This is equivalent to $M_{0}(\\bar{\\mathcal{A}},P)=|\\bar{\\mathbf{y}}^{\\prime}-\\mathbf{y}|$ where $(\\mathbf{x},\\mathbf{y})=P$ . $M_{0}(A,\\Bar{\\mathcal{P}})$ is the maximum mistake-bound of the learning algorithm $\\boldsymbol{\\mathcal{A}}$ over the entire pattern class $\\mathcal{P}$ . More technically, we represent $\\begin{array}{r}{M_{0}(A,\\mathcal{P})=\\operatorname*{sup}_{\\mathbf{y}\\in\\mathcal{P}^{y}}|\\mathbf{y}^{\\prime}-\\mathbf{y}|}\\end{array}$ . Since $\\mathbf{y}^{\\prime}\\in\\{0,1\\}^{\\infty}$ , it then holds that $\\begin{array}{r}{\\operatorname*{inf}_{\\hat{\\mathbf{y}}\\in\\{0,1\\}^{\\infty}}\\operatorname*{sup}_{\\mathbf{y}\\in\\mathcal{P}^{y}}|\\hat{\\mathbf{y}}-\\mathbf{y}|\\leq\\operatorname*{sup}_{\\mathbf{y}\\in\\mathcal{P}^{y}}|\\mathbf{y}^{\\prime}-\\mathbf{y}|}\\end{array}$ . It follows that BlindLearningDimension $(\\mathcal{P})\\leq$ $M_{0}({\\mathcal{A}},{\\mathcal{P}})$ . Since $\\boldsymbol{\\mathcal{A}}$ was an arbitrary deterministic learning algorithm, it then follows that BlindLearningDimension $(\\mathcal{P})\\leq M_{0}(\\dot{\\mathcal{P}})$ . ", "page_idx": 14}, {"type": "text", "text": "For the upper bound proof we focus on the case when BlindLearningDimension $(\\mathcal{P})<\\infty$ since $M_{0}(\\mathcal{P})\\ \\bar{=}\\ \\infty$ when BlindLearningDimension $\\left(\\mathcal{P}\\right)\\;=\\;\\infty$ . Let $\\boldsymbol{\\mathcal{A}}$ be a deterministic learning algorithm that predicts the vector $\\hat{\\mathbf{y}}$ such that $\\begin{array}{r}{\\operatorname*{sup}_{\\mathbf{y}\\in\\mathcal{P}^{y}}|\\hat{\\mathbf{y}}\\,-\\,\\mathbf{y}|\\,=\\,\\operatorname*{inf}_{\\hat{\\mathbf{y}}\\in\\{0,1\\}^{\\infty}}\\operatorname*{sup}_{\\mathbf{y}\\in\\mathcal{P}^{y}}|\\hat{\\mathbf{y}}\\,-\\,\\mathbf{y}|.}\\end{array}$ Since BlindLearningDimension $(\\mathcal{P})<\\infty$ and $\\mathbf{y}$ is a binary vector, then there exists a vector $\\hat{\\mathbf{y}}$ achieving the minimum. It directly follows that $M_{0}(A,{\\mathcal{P}})=\\mathrm{BlindLearningDimension}({\\mathcal{P}})$ . Since ${\\cal M}_{0}({\\mathscr P})\\ \\stackrel{{\\scriptscriptstyle-}}{\\leq}\\ {\\cal M}_{0}({\\mathscr A},{\\mathscr P})$ , then $M_{0}(\\mathcal{P})\\leq$ BlindLearningDimension $(\\mathcal{P})$ . By combining the lower bound and upper bound statements, we get the following inequality BlindLearningDimension $(\\mathcal{P})\\leq$ $M_{0}(\\mathcal{P})\\leq$ BlindLearningDimension $(\\mathcal{P})$ so $M_{0}(\\mathcal{P})=$ BlindLearningDimension $(\\mathcal{P})$ . ", "page_idx": 14}, {"type": "text", "text": "General Setting We now define the dimension $Q L D$ or query learning distance on these family of query trees $\\tau$ realizable with respect to the discrete pattern class $\\mathcal{P}$ given $Q$ queries. The $Q L D$ quantity can be thought as analogous to the notion of rank of a binary tree but setup in a slightly different fashion. Below, for each $T\\in\\mathcal T$ , we describe the query learning distance. ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{Q L D_{T}(\\mathcal{P},Q,i)=\\mathbb{1}[i=Q]\\cdot\\mathrm{BlindLearningDimension}(\\mathcal{P})+\\mathbb{1}[i<Q]\\binom{\\operatorname*{inf}}{\\hat{\\mathbf{y}}\\in\\{0,1\\}^{t_{i}-(t_{i-1}+1)}}}\\\\ &{\\qquad\\qquad\\qquad\\underset{x_{t_{i}}\\in\\mathcal{X}}{\\operatorname*{sup}}\\quad|\\hat{\\mathbf{y}}-\\mathbf{y}|\\cdot\\mathbb{1}[\\mathcal{P}_{(\\star,\\mathbf{y})}\\neq\\emptyset]+\\left\\{\\underset{T_{0}+1}{\\operatorname*{max}}\\{T_{0},T_{1}\\}\\quad\\mathrm{if~}T_{0}\\neq T_{1}\\right.\\right\\}}\\\\ &{\\qquad\\qquad\\left.\\underset{\\mathbf{y}\\in\\{0,1\\}^{t_{i}-(t_{i-1}+1)}}{\\operatorname*{sup}}\\right.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{T_{0}=Q L D_{T_{L}}(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{i}},0)},Q,i+1)}\\\\ &{T_{1}=Q L D_{T_{R}}(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{i}},1)},Q,i+1).}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "In Eqs. 1, 2, and 3, $T_{L}$ is the left subtree of $T$ , $T_{R}$ is the right subtree of $T,{\\hat{\\mathbf{y}}}$ is the sequence of predictions, $\\mathbf{y}$ is the sequence of true labels, $x_{t_{i}}$ is the instance at time $t_{i}$ , and $\\mathcal{P}_{(\\star,\\mathbf{y})}=\\bar{\\{P}}\\in\\mathcal{P}:$ $\\forall y_{t}\\in\\mathbf{y},P^{y}(t)=y_{t}\\}$ with $P^{y}(t)$ referring to the $t^{t h}$ label of pattern $P$ . Additionally, $t_{i}$ and $t_{i-1}$ refer to the timestamps of the $i^{t h}$ and $i-1^{t h}$ queries respectively that correspond to the root-to-leaf path dictated by the recursion. ", "page_idx": 15}, {"type": "text", "text": "Defining $\\mathbf{QLD}({\\mathcal{P}},\\mathbf{Q})$ Let $\\mathcal{T}(\\mathcal{P},Q)$ be the collection of all query trees for the predict-then-query setting that are realizable with respect to $\\mathcal{P}$ and contains $Q$ query nodes on each branch. Then, $\\mathcal{T}^{k}(\\bar{\\mathcal{P}},Q)=\\{T\\in\\mathcal{T}(\\mathcal{P},Q):Q L\\bar{D}_{T}(\\mathcal{P},Q,0)=k\\}$ is the collection of trees whose query learning distance is exactly $k$ . Finally, we define $\\begin{array}{r}{Q L D(\\mathcal{P},Q)=\\operatorname*{inf}\\{k\\in\\mathbb{N}\\cup\\{0\\}:\\mathcal{T}^{k}(\\mathcal{P},Q)\\neq\\emptyset\\}.}\\end{array}$ . ", "page_idx": 15}, {"type": "text", "text": "Lemma B.3. For any discrete pattern class $\\mathcal{P}$ and query budget $Q\\in\\mathbb{N}\\cup\\{0\\}.$ , $Q L D(\\mathcal{P},Q)\\leq$ $M_{Q}({\\mathcal{P}})$ . ", "page_idx": 15}, {"type": "text", "text": "Proof. Let $\\boldsymbol{\\mathcal{A}}$ be any deterministic learning algorithm. A proof by induction will be established on the pair $(\\mathcal{P},Q)$ taking $Q\\,=\\,0$ to be the base. We refer to Lemma B.2 to show that $\\forall\\mathcal{P}^{\\prime}\\subseteq$ $\\mathcal{P},Q L D(\\mathcal{P}^{\\prime},0)\\,=\\,M_{0}(\\mathcal{P}^{\\prime})\\,\\le\\,M_{0}(A,\\mathcal{P}^{\\prime})$ . Now, we apply the inductive step on $(\\mathcal{P}^{\\prime},Q^{\\prime})$ where $\\mathcal{P}^{\\prime}\\subseteq\\mathcal{P}$ and $Q^{\\prime}<Q$ , then ${\\cal Q}L D({\\mathcal P^{\\prime}},Q^{\\prime})\\leq M_{Q^{\\prime}}(A,{\\mathcal P}^{\\prime})$ . The rest of the proof is devoted to showing that $Q L D(\\mathcal{P},Q)\\leq M_{Q}(A,\\mathcal{P})$ by describing an adversarial strategy that guarantees this bound. ", "page_idx": 15}, {"type": "text", "text": "Let $t_{1}\\in\\mathbb{N}$ be the first query timestamp made by the learning algorithm $\\boldsymbol{\\mathcal{A}}$ . Since $\\boldsymbol{\\mathcal{A}}$ is a deterministic learner, the adversary has knowledge of $t_{1}$ . To narrow down its selection of the true labels for the first $t_{1}$ rounds, the adversary can select an optimal query tree $T$ based on the value $Q L D_{T}(\\mathcal{P},Q,0)$ given that the root node has $V_{1}^{t}=t_{1}$ . Given that $Q L D_{T}(\\mathcal{P},Q,0)$ follows the piece-wise function described in Eq. 1, the adversary can select the larger of $T_{0}$ or $T_{1}$ (if equal, $T_{0}$ is chosen). Without loss of generality, let $T_{0}$ be the subtree chosen by the adversary. For the first $t_{1}-1$ rounds, let the adversary selects the optimal vector of true labels $\\mathbf{y}$ given knowledge of the procedure of algorithm $\\boldsymbol{\\mathcal{A}}$ Let $\\hat{\\mathbf{y}}$ represent the vector of predicted labels by the learner for the first $t_{1}-1$ rounds. At time $t_{1}$ , the learner will present its prediction $\\hat{y}_{t_{1}}$ . The adversary can select $x_{t_{1}}$ that corresponds to the supremum in Eq. 1 and set the true label $y_{t_{1}}=0$ . In the special case that $T_{0}=T_{1}$ , then $y_{t_{1}}=1-\\hat{y}_{t_{1}}$ . ", "page_idx": 15}, {"type": "text", "text": "Then the number of mistakes made by the learner in the first $t_{1}$ rounds is equivalent to $|\\hat{\\mathbf{y}}-\\mathbf{y}|+$ $\\mathbb{I}[y_{t_{1}}\\neq\\hat{y}_{t_{1}}]$ . On the remaining number of rounds, $M_{Q-1}(\\mathcal{A},\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})})$ represents the optimal mistake-bound of the learner $\\boldsymbol{\\mathcal{A}}$ . Using the inductive step, we can show that $|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[y_{t_{1}}\\neq$ $\\begin{array}{r}{\\hat{y}_{t_{1}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q-1)\\le\\left|\\hat{\\mathbf{y}}-\\mathbf{y}\\right|+\\mathbb{1}[y_{t_{1}}\\neq\\hat{y}_{t_{1}}]+M_{Q-1}(A,\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})}).}\\end{array}$ . Since $M_{Q}({\\mathcal{A}},{\\mathcal{P}})$ is calculated as the supremum over all adversarial approaches given the algorithm $\\boldsymbol{\\mathcal{A}}$ , then $M\\overset{*}{Q}(A,\\mathcal{P})\\geq|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[y_{t_{1}}\\neq\\hat{y}_{t_{1}}]\\!+\\!M_{Q-1}(A,\\mathcal{P}_{(\\star,\\mathbf{y})(y_{t_{1}},y_{t},y_{t_{1}})})$ )). Now, we show that $Q L D(\\mathcal{P},Q)\\leq$ $|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[y_{t_{1}}\\neq\\hat{y}_{t_{1}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q\\!-\\!1).$ Assume that the predictions made by algorithm $\\boldsymbol{\\mathcal{A}}$ induce $|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[y_{t_{1}}\\neq\\hat{y}_{t_{1}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q\\!-\\!1)<Q L D(\\mathcal{P},Q)$ . Since the adversary\u2019s selection of true labels is an optimal label vector given the workings of learning algorithm $\\boldsymbol{\\mathcal{A}}$ , then the adversary\u2019s decision aligns with the supremum in Eq. 1. Then, there must exist a tree $T^{\\prime}$ whose largest distance is equal to that value with $t_{1}$ being the timestamp of the root node. Formally speaking, this implies the existence of $T^{\\prime}$ such that $Q L\\bar{D_{T^{\\prime}}}(\\mathcal{P},Q,0)\\stackrel{!}{<}Q L D(\\mathcal{P},Q)$ . If such a tree existed, then the adversary would have selected $T^{\\prime}$ which violates the minimality of $Q L D(\\mathcal{P},Q)$ and the assumption that the adversary chose the most minimal tree satisfying $V_{1}^{t}=t_{1}$ . As a result, $Q L D(\\mathcal{P},Q)\\bar{\\leq}\\left|\\hat{\\mathbf{y}}-\\mathbf{y}\\right|+\\mathbb{1}[y_{t_{1}}\\neq\\hat{y_{t_{1}}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q-1)$ . Placing all the inequalities together, we get $\\begin{array}{r}{Q L D(\\mathcal{P},Q)\\leq|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[y_{t_{1}}\\neq\\hat{y}_{t_{1}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q-1)\\leq|\\hat{\\mathbf{y}}-\\mathbf{y}|+}\\end{array}$ $\\begin{array}{r}{\\mathbb{1}\\big[y_{t_{1}}\\neq\\hat{y}_{t_{1}}\\big]\\!+\\!M_{Q-1}\\!\\big(\\!\\mathcal{A},\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})}\\big)\\leq M_{Q}(\\mathcal{A},\\mathcal{P})}\\end{array}$ which results in $Q L D(\\mathcal{P},Q)\\leq M_{Q}(A,\\mathcal{P})$ . Since $\\boldsymbol{\\mathcal{A}}$ was an arbitrary learning algorithm, then it holds that $Q L D(\\mathcal{P},Q)\\leq M_{Q}(\\mathcal{P})$ . \u53e3 ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "In Algorithm 3 detailed below, we denote by $\\mathbf{y}_{1}\\circ\\mathbf{y}_{2}$ the vector obtained by concatenating vector $\\mathbf{y}_{2}$ after vector $\\mathbf{y}_{1}$ . Additionally, the usage of $T_{0}$ and $T_{1}$ refer to Eqs. 2 and 3 respectively. If $T_{y_{t}}$ is used, this implies a query subtree that was either the left child if $y_{t}=0$ or the right child if $y_{t}=1$ . ", "page_idx": 16}, {"type": "text", "text": "$\\mathbf{Algorithm\\3\\BP-SOA}(\\mathcal{P},Q)$   \nRequire: $\\mathcal{P}\\neq\\emptyset$   \nRequire: $Q\\geq0$   \n1: $\\hat{\\mathbf{x}}_{h}=$ history of previously observed instances   \n2: $\\hat{\\mathbf{y}}_{l}=$ list of current predictions   \n3: $O=$ history of previous queries {Elements of $O$ are $(t,y)$ where $t$ is time, $y$ is label}   \n4: $i=0,t_{i}=1$ {Initial query number and timestamp}   \n5: Select tree $T$ such that $Q\\dot{L}D(\\mathcal{P},Q,0)=Q L D(\\bar{\\mathcal{P}},Q),t_{i}=V_{1}^{t}$   \n6: $T_{\\mathrm{end}}=\\infty$   \n7: for $t=1$ to $T_{\\mathrm{end}}$ do   \n8: if $t<t_{i}$ then   \n9: if $t=1$ then   \n10: $\\hat{{\\bf y}}\\;\\;=\\;\\;\\underset{{\\bf\\partial}_{\\bf\\partial}_{\\bf\\partial}_{\\bf B}\\in\\{0,1\\}^{t_{i}-1}}{\\arg\\operatorname*{min}}\\underset{{\\bf y}\\in\\{0,1\\}^{t_{i}-1}}{\\operatorname*{sup}}|\\hat{{\\bf y}}\\;-\\;{\\bf y}|\\;\\cdot\\;\\mathbb{I}[\\mathcal{P}_{(\\star,{\\bf y})}\\quad\\neq\\;{\\bf\\partial}_{\\bf\\mathcal{O}}^{\\dagger}\\;\\;\\theta]\\;+\\;Q L D(\\mathcal{P}_{(\\star,{\\bf y})},Q)$   \n11: Append $\\hat{\\mathbf{y}}$ to $\\hat{\\mathbf{y}}_{l}$   \n12: end if   \n13: Predict $\\hat{\\mathbf{y}}_{l}(t)$ , add $\\star$ to $\\hat{\\mathbf{x}}_{h}$   \n14: else if $i<Q$ then   \n15: $\\begin{array}{r l r}{\\hat{y}_{t}}&{{}=}&{\\mathrm{~\\arg~max~}_{r\\in\\{0,1\\}}\\operatorname*{sup}_{x_{t_{i}}\\in\\mathcal{X}}\\operatorname*{sup}_{\\forall(t,y)\\in(0,1)^{t_{i}-1}}|\\hat{\\mathbf{y}}_{l}\\ -\\ \\mathbf{y}|\\mathbb{1}\\big[\\mathcal{P}_{(\\hat{\\mathbf{x}}_{h},\\mathbf{y})}\\mathrm{~\\\\}\\ne\\ \\ \\ \\varnothing\\big]\\ \\mathrm{~+~}}\\\\ {\\mathrm{~\\\\\\}}&{{}}&{\\forall(t,y)\\in O,\\mathbf{y}(t)\\mathrm{=}y}\\end{array}$ $Q L D_{T_{r}}(\\mathcal{P}_{(\\hat{\\mathbf{x}}_{h},\\mathbf{y})(x_{t_{i}},r)},Q,i+1)$   \n16: Predict $\\hat{y}_{t}$ and add $\\hat{y}_{t}$ to $\\hat{\\mathbf{y}}_{h}$   \n17: Receive $(x_{t},y_{t})$ , add $(t,y_{t})$ to $O$ , and add $x_{t}$ to $\\hat{\\mathbf{x}}_{h}$   \n18: Set $i=i+1$ , $t_{i}=V_{1}^{t}$ { $\\left.V_{1}\\right.$ is the root node of $T_{y_{t}}$ }   \n19: $\\hat{\\mathbf{y}}=\\mathop{\\mathrm{arg\\,min}}_{\\hat{\\mathbf{y}}\\in\\{0,1\\}^{t_{i}-(t_{i-1}+1)}}\\operatorname*{sup}_{x_{t_{i}}\\in\\mathcal{X}}\\operatorname*{sup}_{\\underbrace{\\mathbf{y}\\in\\{0,1\\}^{t_{i}-1}}_{\\forall(t,y)\\in O,\\mathbf{y}(t)=y}}|\\hat{\\mathbf{y}}_{l}\\circ\\hat{\\mathbf{y}}-\\mathbf{y}|\\cdot\\mathbb{I}[\\mathcal{P}_{(\\hat{\\mathbf{x}}_{h}\\circ\\{\\star\\},\\mathbf{y})}\\neq\\varnothing]+\\left\\{\\operatorname*{max}\\{T_{0},T_{1}\\}\\begin{array}{l l}{\\mathrm{~if~}T_{0}\\neq\\mathcal{T}_{0}}\\\\ {T_{0}+1}&{\\mathrm{else~}}\\end{array}\\right.$ ", "page_idx": 16}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "20: Append $\\hat{\\mathbf{y}}$ to $\\hat{\\mathbf{y}}_{l}$   \n21: else   \n22: $\\begin{array}{r l}&{\\mathbf{y}^{\\prime}=\\underset{\\forall(t,y)\\in(0,\\mathbf{y}(t)=y}{\\mathrm{arg\\,max}}_{\\forall(t,y)\\in(0,\\mathbf{y}(t)=y}\\,|\\hat{\\mathbf{y}}-\\mathbf{y}|\\cdot\\mathbb{I}\\big[\\mathcal{P}_{(\\hat{\\mathbf{x}}_{h},\\mathbf{y})}\\neq\\varnothing\\big]+\\mathrm{BlindLearningDimension}\\big(\\mathcal{P}_{(\\hat{\\mathbf{x}}_{h},\\mathbf{y})}\\big)}\\\\ &{\\mathrm{Let\\,}\\hat{\\mathbf{y}}\\mathrm{~be~such~that~sup}_{\\mathbf{y}\\in\\mathcal{P}_{r,\\cdot}^{y}}\\quad,\\;|\\hat{\\mathbf{y}}-\\mathbf{y}|=\\operatorname*{inf}_{\\hat{\\mathbf{y}}\\in\\{0,1\\}^{\\infty}}\\operatorname*{sup}_{\\mathbf{y}\\in\\mathcal{P}_{r,\\cdot}^{y}}\\quad,\\;|\\hat{\\mathbf{y}}-\\mathbf{y}|}\\end{array}$ )   \n23:   \n24: Append $\\hat{\\mathbf{y}}$ to $\\hat{\\mathbf{y}}_{l}$   \n25: Set $T_{\\mathrm{end}}=t_{i}$   \n26: end if   \n27: end for   \n28: for $t=t_{i}$ to $\\infty$ do   \n29: Predict ${\\hat{\\mathbf{y}}}_{l}(t)$   \n30: end for ", "page_idx": 16}, {"type": "text", "text": "Lemma B.4. For any discrete pattern class $\\mathcal{P}$ and query budget $Q~\\in~\\mathbb{N}\\cup\\{0\\},~M_{Q}(\\mathcal{P})~\\le$ $Q L D(\\mathcal{P},Q)$ . ", "page_idx": 17}, {"type": "text", "text": "Proof. Let $\\boldsymbol{\\mathcal{A}}$ be the BP-SOA which is detailed in Algorithm 3. A proof by induction will be established on the pair $(\\mathcal{P},Q)$ taking $Q~=~0$ to be the base case. Let $\\mathcal{P}^{\\prime}\\subseteq\\;\\mathcal{P}$ . In the base case, we execute Algorithm 3 with the inputs $\\mathcal{P}^{\\prime}$ and $Q\\,=\\,0$ . Since $Q\\,=\\,0$ , Algorithm 3 selects the vector $\\hat{\\mathbf{y}}$ corresponding to the BlindLearningDimension $\\left(\\mathcal{P}^{\\prime}\\right)$ and appends it to $\\hat{\\mathbf{y}}_{l}$ (lines 22-24). Then, $\\boldsymbol{\\mathcal{A}}$ skips to lines 28-30 making predictions according to $\\hat{\\mathbf{y}}_{l}$ . Then, we refer to Lemma B.2 to show that BlindLearningDimensio $1({\\mathcal P}^{\\prime})\\,\\le\\,M_{0}({\\mathcal P}^{\\prime})\\,\\stackrel{\\cdot}{\\le}\\,M_{0}(\\mathrm{Algorithm}\\,3,{\\mathcal P}^{\\prime})\\,\\le$ BlindLearningDimension $(\\mathcal{P}^{\\prime})$ implying that $M_{0}(\\mathcal{P}^{\\prime})=\\mathrm{BlindLearningDimension}(\\mathcal{P}^{\\prime})$ . ", "page_idx": 17}, {"type": "text", "text": "Now, we apply the inductive step on $(\\mathcal{P}^{\\prime},Q^{\\prime})$ where $\\mathcal{P}^{\\prime}\\subseteq\\mathcal{P}$ and $Q^{\\prime}<Q$ , then $M_{Q^{\\prime}}(A,{\\mathcal{P}}^{\\prime})\\leq$ $Q L D(\\mathcal{P}^{\\prime},\\bar{Q^{\\prime}})$ . The rest of the proof is devoted to showing that $M_{Q}(\\mathcal{A},\\mathcal{P})\\leq Q L D(\\mathcal{P},Q)$ . ", "page_idx": 17}, {"type": "text", "text": "From Algorithm 3, we know that $\\boldsymbol{\\mathcal{A}}$ selects the query tree $T$ such that $Q L D_{T}(\\mathcal{P},Q,0)=Q L D(\\mathcal{P},Q)$ on line 5 with the first query timestamp $t_{1}=\\bar{V}_{1}^{t}$ . For rounds $t<t_{1}$ rounds, Algorithm 3 will select its predictions $\\hat{y}_{t}$ that minimizes the optimization expression in lines 10 and 19 based on the history of previous queries. On round $t_{1}$ , Algorithm 3 selects $\\hat{y}_{t_{1}}$ in line 15 based on the larger subtree, $T_{0}$ or $T_{1}$ . Without loss of generality, assume that $T_{0}$ is the larger subtree and in the case of a tie, $T_{0}$ is selected. Then, $\\hat{y}_{t_{1}}=0$ and the learner receives $(x_{t_{1}},y_{t_{1}})$ after querying. ", "page_idx": 17}, {"type": "text", "text": "It follows that the mistakes made by the learner on the first $t_{1}$ rounds correspond to $\\left|\\mathbf{y}-\\hat{\\mathbf{y}}\\right|+\\mathbb{1}[\\hat{y}_{t_{1}}\\neq$ $\\left.y_{t_{1}}\\right]$ where $\\mathbf{y}$ and $y_{t_{1}}$ represent the true labels selected by the adversary. Since the adversary is operating under the constraint of realizability, then it must hold that $\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})}\\,\\neq\\,\\emptyset$ where $\\star$ is a placeholder for any sequence of instances satisfying the constraint. From the inductive step, it follows that $|\\hat{\\mathbf{y}}-\\mathbf{\\dot{y}}|\\ +\\ \\mathbb{1}[\\hat{y}_{t_{1}}\\ \\neq\\ y_{t_{1}}]+\\,M_{Q-1}(\\mathbf{\\dot{\\mathcal{A}}},\\dot{\\mathcal{P}}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})})\\,\\leq\\,|\\hat{\\mathbf{y}}-\\mathbf{y}|\\,+\\,\\mathbb{1}[\\hat{y}_{t_{1}}\\ \\neq\\,]$ $y_{t_{1}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q-1)$ . Assume that the adversary\u2019s choices of instances and true labels on the first $t_{1}$ rounds yield $|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[\\hat{y}_{t_{1}}\\neq y_{t_{1}}]+Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q-1)>Q L D(\\mathcal{P},Q)$ Since $\\boldsymbol{\\mathcal{A}}$ selected tree $T$ , this implies that $Q L D_{T}(\\mathcal{P},Q,0)=Q L D(\\mathcal{P},Q)$ . Additionally, $\\boldsymbol{\\mathcal{A}}$ always selects the predictions that minimizes over the worst possible game outcomes (line 19 of Algorithm 3) with the query prediction aligning with that of the larger subtree. As a result $\\overline{{\\mathbf{y}}}-\\mathbf{y}\\vert+\\mathbb{1}[\\hat{y}_{t_{1}}^{\\overline{{\\mathbf{\\alpha}}}}\\neq y_{t_{1}}]+$ $Q L D_{T_{L}}(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q,1)\\leq Q L D(\\mathcal{P},Q)$ . And by definition $Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q-1)\\le$ $Q L D_{T_{L}}(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q,1)$ , so it must hold that $|\\hat{\\mathbf{y}}\\!-\\!\\mathbf{y}|\\!+\\!\\mathbb{1}[\\hat{y}_{t_{1}}\\neq y_{t_{1}}]\\!+\\!Q L D(\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})},Q\\!-$ $1)\\leq Q L D(\\mathcal{P},Q)$ . As a result, $|\\hat{\\mathbf{y}}-\\mathbf{y}|+\\mathbb{1}[\\hat{y}_{t_{1}}\\neq y_{t_{1}}]+M_{Q-1}(A,\\mathcal{P}_{(\\star,\\mathbf{y})(x_{t_{1}},y_{t_{1}})})\\leq Q L D(\\mathcal{P},Q)$ . Since this inequality holds for any choice of $\\mathbf{y}$ , $x_{t_{1}}$ , and $y_{t_{1}}$ , it follows that $M_{Q}(\\mathcal{A},\\mathcal{P})\\leq Q L D(\\mathcal{P},Q)$ . Since $M_{Q}(\\mathcal{P}\\bar{)}\\leq\\dot{M}_{Q}(\\mathcal{A},\\mathcal{P})$ , we show that $M_{Q}(\\mathcal{P})\\leq Q L D(\\mathcal{P},Q)$ . \u53e3 ", "page_idx": 17}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: In our abstract and in Section 1.3 of the introduction, we give a detailed description of the claims and results we prove in the paper as a technical overview. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 18}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: Throughout the paper, we explicitly state the assumptions and conditions our results hold under. For example, in Sections 3 and 4, we specifically work with learning algorithms that have a linear querying strategy and an open direction would be to understand a broader family of strategies. In Section 4.3, we mention that developing a theory for pattern classes in the continuous case is quite challenging so we simplify the problem in the discrete setting. In Appendix B.1 we mention that the theory only holds for the blind-prediction setting and a future direction would extend to the update-and-deploy setting. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 18}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: In every theoretical statement, we characterize the assumptions and conditions of the statement and then we give a proof. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 19}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "Justification: This is a completely theoretical paper so there are no experiments ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 19}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 20}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 20}, {"type": "text", "text": "Justification: This is a completely theoretical paper so there are no experiments. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 20}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 20}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 20}, {"type": "text", "text": "Justification: This is a completely theoretical paper so there are no experiments. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 20}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 20}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 20}, {"type": "text", "text": "Justification: This is a completely theoretical paper so there are no experiments. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: This is a completely theoretical paper so there are no experiments. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 21}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: The research in this paper conforms to the NeurIPS Code of Ethics. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 21}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: Since this is a learning theory paper focused on characterizing learnability and complexity of learning problems, we do not see any immediate negative societal impact. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed. \u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. ", "page_idx": 21}, {"type": "text", "text": "\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 22}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: This is a completely theoretical paper so there are no datasets or experimental models. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 22}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: This is a completely theoretical paper so we don\u2019t have any code, data, or models. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: This is a completely theoretical paper so we don\u2019t have any code, data, or models. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 23}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: We do not conduct any crowdsourcing experiments or research with human subjects. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 23}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: We do not conduct any crowdsourcing experiments or research with human subjects. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 23}, {"type": "text", "text": "\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 24}]