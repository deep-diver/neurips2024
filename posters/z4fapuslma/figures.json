[{"figure_path": "z4FaPUslma/figures/figures_4_1.jpg", "caption": "Figure 1: Schematic of our proposed architecture for optimising towards the nearest simplex ETF. The classifier weights W = U*M are an implicit function of the CNN features H. Note that the parameters of the CNN are updated via two gradient paths from the loss function L, a direct path (top) and an indirect path through U* (bottom).", "description": "This figure shows the proposed architecture that optimizes towards the nearest simplex ETF.  The input x goes through a CNN to produce features H. These features are processed to compute normalized class means which then feeds into a deep declarative network (DDN) that solves for the optimal rotation matrix U*. The classifier weights W are then set implicitly as W = U*M, where M is the standard simplex ETF. This is done to efficiently align classifier weights with the features and speed up training. Note that the CNN is updated via gradients from both the loss L and U*. ", "section": "3 Optimising Towards the Nearest Simplex ETF"}, {"figure_path": "z4FaPUslma/figures/figures_6_1.jpg", "caption": "Figure 2: UFM-10 results. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure shows the results of the UFM-10 experiment, which evaluates the effectiveness of the proposed method on a 10-class unconstrained feature model (UFM) with 1000 features and a dimension of 512.  The plots display various metrics to measure the convergence and performance of different methods: standard training, fixed simplex ETF, and the proposed implicit ETF method. These metrics include cross-entropy (CE) loss, average cosine margin, principal component margin (PCM) at the end of training, Neural Collapse metrics NC1 and NC3, and WH-Equinorm. Each metric's plot shows the evolution of that metric over training epochs, providing insights into the speed and stability of convergence for each method.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_8_1.jpg", "caption": "Figure 2: UFM-10 results. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure presents the results of the UFM-10 experiment, which is a 10-class unconstrained feature model (UFM) with 1000 features and a dimension of 512.  The plots show the performance of three methods: standard training, fixed ETF (equiangular tight frame), and implicit ETF (the method proposed in the paper).  The plots cover several metrics: cross-entropy loss, average cosine margin, per-class margin at the end of training, three neural collapse metrics (NC1, NC3, WH-equinorm), illustrating the convergence speed and the quality of the neural collapse solution achieved by each method.", "section": "3.2 Nearest Simplex ETF through Riemannian Optimisation"}, {"figure_path": "z4FaPUslma/figures/figures_9_1.jpg", "caption": "Figure 5: CIFAR100 computational cost results on ResNet-50. In (a), we plot the forward pass time for each method. For the implicit ETF method, which has dynamic computation times, we also include the mean and median time values. In (b), we plot the computational cost for each forward and backward pass across methods. For the implicit ETF forward pass, we have taken its median time. The notation is as follows: S/F = Standard Forward Pass, S/B = Standard Backward Pass, F/F = Fixed ETF Forward Pass, F/B = Fixed ETF Backward Pass, I/F = Implicit ETF Forward Pass, and I/B = Implicit ETF Backward Pass.", "description": "This figure shows the computational cost comparison between different methods in terms of forward and backward pass times.  The implicit ETF method, having dynamic computation times, presents both mean and median values.  A clear notation explains the meaning of each label.", "section": "3.6 Deep Declarative Layer"}, {"figure_path": "z4FaPUslma/figures/figures_9_2.jpg", "caption": "Figure 5: CIFAR100 computational cost results on ResNet-50. In (a), we plot the forward pass time for each method. For the implicit ETF method, which has dynamic computation times, we also include the mean and median time values. In (b), we plot the computational cost for each forward and backward pass across methods. For the implicit ETF forward pass, we have taken its median time. The notation is as follows: S/F = Standard Forward Pass, S/B = Standard Backward Pass, F/F = Fixed ETF Forward Pass, F/B = Fixed ETF Backward Pass, I/F = Implicit ETF Forward Pass, and I/B = Implicit ETF Backward Pass.", "description": "This figure shows the computational cost of different methods for CIFAR100 dataset on ResNet-50 architecture.  The left subplot (a) compares the forward pass time for Standard, Fixed ETF, and Implicit ETF methods. The right subplot (b) displays a comparison of both forward and backward pass times for all methods, illustrating the additional computational overhead introduced by the Implicit ETF method, especially when including backpropagation through the DDN layer.", "section": "3.6 Deep Declarative Layer"}, {"figure_path": "z4FaPUslma/figures/figures_21_1.jpg", "caption": "Figure 6: CIFAR10 results on ResNet-18. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure shows the results of the proposed method on CIFAR-10 dataset using ResNet-18 architecture.  It presents various metrics (Train Top-1 Accuracy, Average Cosine Margin, Pcm at EoT, NC1, NC3, WH-Equinorm, Test Top-1 Accuracy) across different training epochs, comparing the proposed method against a standard training approach and a fixed ETF approach.  The plots illustrate the convergence speed and the final performance of each method, highlighting the superiority of the proposed approach in achieving a neural collapse solution.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_22_1.jpg", "caption": "Figure 6: CIFAR10 results on ResNet-18. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure shows the results of experiments on CIFAR10 dataset using ResNet-18 architecture. It presents a comparison of three methods: standard training, fixed ETF, and implicit ETF.  Several metrics are plotted against the number of epochs to illustrate the convergence behavior of each method. These metrics include training top-1 accuracy, average cosine margin, per-class mean at end of training (PCM at EoT), NC1 (within-class variability of features), NC3 (alignment of classifier weights and feature means), and WH-Equinorm (equality of norms for feature means and classifier weights). The x-axis represents the number of training epochs for all plots except for the PCM plot where the x-axis shows the number of training examples.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_22_2.jpg", "caption": "Figure 6: CIFAR10 results on ResNet-18. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure presents the experimental results for CIFAR-10 dataset using ResNet-18 architecture.  It displays the training and testing accuracy, average cosine margin, per-class margin at the end of training, neural collapse metrics (NC1, NC3), and the WH-equinorm. The plots show the performance of three methods: standard training, fixed ETF, and implicit ETF (proposed method). The x-axis represents the number of epochs, except for the per-class margin plot (c) where it represents the number of training examples.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_23_1.jpg", "caption": "Figure 2: UFM-10 results. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure shows the results of the UFM-10 experiment, which involves a 10-class unconstrained feature model with 1000 features and a dimension of 512.  The plots illustrate the performance of three methods: standard training, fixed ETF, and implicit ETF.  The plots show the cross-entropy loss, average cosine margin, per-class mean at the end of training, neural collapse metrics NC1 and NC3, and the WH-equinorm metric.  The x-axis represents either the number of epochs (a, b, d, e, f) or the number of training examples (c). These plots show that the implicit ETF method achieves a neural collapse (NC) solution faster than the other two methods.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_23_2.jpg", "caption": "Figure 6: CIFAR10 results on ResNet-18. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure displays the results of the proposed method on the CIFAR10 dataset using the ResNet-18 architecture.  It shows the performance of three different training methods: the standard method, the fixed ETF method, and the implicit ETF method (the proposed method). The plots visualize various metrics over the training epochs to evaluate the convergence and performance of each method. These metrics include training and test top-1 accuracy, average cosine margin, per-class margin at the end of training, three Neural Collapse metrics (NC1, NC3, and WH-Equinorm).  The plots illustrate that the proposed implicit ETF method converges faster and achieves better performance than the other two methods.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_24_1.jpg", "caption": "Figure 1: Schematic of our proposed architecture for optimising towards the nearest simplex ETF. The classifier weights W = U*M are an implicit function of the CNN features H. Note that the parameters of the CNN are updated via two gradient paths from the loss function L, a direct path (top) and an indirect path through U* (bottom).", "description": "This figure shows the architecture of the proposed method.  The Convolutional Neural Network (CNN) extracts features (H) from the input. These features are then processed by a Deep Declarative Network (DDN) that solves a Riemannian optimization problem to find the nearest Simplex Equiangular Tight Frame (ETF) (U*). The classifier weights (W) are implicitly defined as W = U*M, where M is the standard simplex ETF.  The gradients are backpropagated through both the CNN and the DDN to update the CNN parameters, facilitating end-to-end learning.  The diagram highlights two gradient paths: one direct from the loss function (L) to the CNN and another indirect path through the DDN.", "section": "3 Optimising Towards the Nearest Simplex ETF"}, {"figure_path": "z4FaPUslma/figures/figures_24_2.jpg", "caption": "Figure 2: UFM-10 results. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure shows the results of the proposed method on a synthetic 10-class unconstrained feature model (UFM) with 1000 data points.  The plots display several metrics to assess the effectiveness of the method, comparing it against a standard training approach and a fixed simplex equiangular tight frame (ETF) approach.  These metrics include the cross-entropy (CE) loss, average cosine margin, the proportion of correctly classified examples at the end of training, and neural collapse metrics (NC1, NC3). The plots demonstrate that the proposed method converges faster and achieves better performance compared to the other methods.", "section": "4 Experiments"}, {"figure_path": "z4FaPUslma/figures/figures_25_1.jpg", "caption": "Figure 2: UFM-10 results. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure presents the results of experiments on a 10-class Unconstrained Feature Model (UFM) with 1000 features and a dimension of 512.  It displays six subplots illustrating different aspects of the training process using three methods: the standard method (learnable classifier weights), the fixed ETF method (classifier fixed to a predefined simplex ETF), and the implicit ETF method (classifier weights dynamically updated based on the nearest simplex ETF to the features at each iteration).  The subplots show the evolution of (a) cross-entropy (CE) loss, (b) average cosine margin, (c) per-class margin at the end of training, (d) neural collapse metric NC1, (e) neural collapse metric NC3, and (f) WH-equinorm. The x-axis represents the number of epochs for plots (a), (b), (d), (e), and (f), while for plot (c), the x-axis represents the number of training examples.  The plots demonstrate the superior convergence speed and stability of the proposed implicit ETF method in achieving a neural collapse (NC) solution.", "section": "3.2 Nearest Simplex ETF through Riemannian Optimisation"}, {"figure_path": "z4FaPUslma/figures/figures_25_2.jpg", "caption": "Figure 2: UFM-10 results. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure presents the results of the UFM-10 experiment, which involves a 10-class unconstrained feature model with 1000 features and a dimension of 512.  It displays six subplots illustrating the performance of three methods: standard training, fixed ETF, and the proposed implicit ETF approach. The plots visualize the evolution of several key metrics over the training epochs, such as cross-entropy (CE) loss, average cosine margin, the proximity to a simplex ETF (PCM) at the end of training, and Neural Collapse metrics (NC1, NC3) indicating the within-class variability of features. The WH-Equinorm plot shows the absolute difference in norms between the classifier and feature means. The results highlight how the proposed method rapidly converges to an optimal neural collapse solution compared to the other two methods.", "section": "Unconstrained Feature Models (UFMs)"}, {"figure_path": "z4FaPUslma/figures/figures_26_1.jpg", "caption": "Figure 15: CIFAR10 results on VGG-13, comparing the implicit ETF method in two scenarios: one where the DDN gradient is computed and included in the SGD update, and another where the DDN gradient computation is omitted from the update. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure compares the performance of the proposed implicit ETF method with and without the deep declarative network (DDN) layer's gradient. It shows that the DDN layer's gradient improves convergence speed and training stability. The plots include training top-1 accuracy, average cosine margin, per-class mean at the end of training, neural collapse metrics (NC1, NC3), within-class and between-class equinorm, and test top-1 accuracy.", "section": "3.6 Deep Declarative Layer"}, {"figure_path": "z4FaPUslma/figures/figures_26_2.jpg", "caption": "Figure 5: CIFAR100 computational cost results on ResNet-50. In (a), we plot the forward pass time for each method. For the implicit ETF method, which has dynamic computation times, we also include the mean and median time values. In (b), we plot the computational cost for each forward and backward pass across methods. For the implicit ETF forward pass, we have taken its median time. The notation is as follows: S/F = Standard Forward Pass, S/B = Standard Backward Pass, F/F = Fixed ETF Forward Pass, F/B = Fixed ETF Backward Pass, I/F = Implicit ETF Forward Pass, and I/B = Implicit ETF Backward Pass.", "description": "This figure shows the computational cost (forward and backward pass times) of different training methods for CIFAR100 dataset on ResNet-50. The implicit ETF method has dynamic computation times due to the Riemannian optimization, so mean and median values are also provided. The figure helps to understand the efficiency and scalability of the proposed implicit ETF method compared to the standard and fixed ETF methods.", "section": "3.6 Deep Declarative Layer"}, {"figure_path": "z4FaPUslma/figures/figures_26_3.jpg", "caption": "Figure 5: CIFAR10 computational cost results on ResNet-50. In (a), we plot the forward pass time for each method. For the implicit ETF method, which has dynamic computation times, we also include the mean and median time values. In (b), we plot the computational cost for each forward and backward pass across methods. For the implicit ETF forward pass, we have taken its median time. The notation is as follows: S/F = Standard Forward Pass, S/B = Standard Backward Pass, F/F = Fixed ETF Forward Pass, F/B = Fixed ETF Backward Pass, I/F = Implicit ETF Forward Pass, and I/B = Implicit ETF Backward Pass.", "description": "This figure shows the computational cost of different methods (standard, fixed ETF, implicit ETF) on the CIFAR10 dataset using the ResNet-50 architecture. It compares the forward and backward pass times, highlighting the dynamic computation times of the implicit ETF method.  The median and mean computation times are shown for the implicit ETF method. The notation used is clearly explained in the caption.", "section": "3.6 Deep Declarative Layer"}, {"figure_path": "z4FaPUslma/figures/figures_27_1.jpg", "caption": "Figure 15: CIFAR10 results on VGG-13, comparing the implicit ETF method in two scenarios: one where the DDN gradient is computed and included in the SGD update, and another where the DDN gradient computation is omitted from the update. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure compares the performance of the implicit ETF method with and without the Deep Declarative Network (DDN) layer's gradient included in the training updates.  It shows that the DDN layer's gradient improves the convergence and performance of the algorithm, but that the implicit ETF method still shows improvements even without DDN gradients. The plots show train and test accuracy, cosine margin,  per-class margin, within-class variability, and self-duality metrics.", "section": "3 Optimising Towards the Nearest Simplex ETF"}, {"figure_path": "z4FaPUslma/figures/figures_27_2.jpg", "caption": "Figure 17: CIFAR10 results on ResNet-18, where in standard no-norm we do not perform feature and weight normalisation. In all plots, the x-axis represents the number of epochs, except for plot (c), where the x-axis denotes the number of training examples.", "description": "This figure compares the performance of three different training methods on the CIFAR10 dataset using the ResNet-18 architecture.  The methods are: standard training (with feature and weight normalization), standard training without normalization, and the proposed implicit ETF method. The plots show various metrics to evaluate convergence to neural collapse, including training accuracy, average cosine margin, per-class margin at end of training, neural collapse metrics (NC1, NC3), weight-feature equinorm, and test accuracy. The results highlight the effectiveness of the implicit ETF method in achieving neural collapse, even when compared to standard training that does not include feature and weight normalization.", "section": "Additional Experimental Results"}]