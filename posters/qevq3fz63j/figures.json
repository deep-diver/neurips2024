[{"figure_path": "qevq3FZ63J/figures/figures_2_1.jpg", "caption": "Figure 1: The comparison of line locating coverage ratio between three LLMs. The vertical axis representing the frequency of the range of line locating coverage ratio for each group, and the horizontal axis representing the line locating coverage ratio.", "description": "This figure compares the line locating coverage ratios achieved by three different LLMs (GPT-3.5, GPT-4, and Claude-2).  The x-axis shows the coverage ratio, ranging from 0 to 1 (0 representing no overlap and 1 representing perfect overlap between generated and reference lines). The y-axis represents the frequency of instances with each coverage ratio.  The graph helps visualize the accuracy of each LLM in identifying the correct lines of code to modify during GitHub issue resolution.  A higher proportion of instances with ratios closer to 1 indicates better accuracy in line location.", "section": "2 Empirical Study"}, {"figure_path": "qevq3FZ63J/figures/figures_3_1.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed flowchart of the MAGIS framework. It illustrates the process of resolving GitHub issues, starting from issue identification and ending with code merging into the repository.  The process is divided into two main stages: Planning and Coding. The Planning stage involves locating relevant code files, assembling a team of agents (Manager, Repository Custodian, Developer, and Quality Assurance Engineer), and conducting a kick-off meeting to coordinate tasks. The Coding stage consists of code generation, review, and iterative refinement by the collaboration of Developers and QA Engineers.  Each stage contains multiple steps and agent interactions, shown in detail in the flowchart. The figure is linked to Figure 7 (Kick-off Meeting), suggesting a detailed view of the kick-off process is shown in Figure 7.", "section": "3 Methodology"}, {"figure_path": "qevq3FZ63J/figures/figures_7_1.jpg", "caption": "Figure 3: Comparison of recall scores between Ours and BM25.", "description": "The figure shows the comparison of recall scores between the proposed method and the BM25 method for locating relevant files.  The x-axis represents the number of files, and the y-axis represents the recall score. The graph demonstrates that the proposed method consistently outperforms BM25 across different numbers of files considered.", "section": "4.2 How Effective is Our Framework? (RQ 2)"}, {"figure_path": "qevq3FZ63J/figures/figures_8_1.jpg", "caption": "Figure 5: Comparison of line locating coverage between MAGIS (Ours) and baselines.", "description": "This figure compares the distribution of line locating coverage ratios achieved by MAGIS and three baseline LLMs (GPT-4, Claude-2, and GPT-3.5). The x-axis represents the line locating coverage ratio, while the y-axis shows the frequency of instances with that ratio.  MAGIS demonstrates a much higher frequency of instances with coverage ratios close to 1, indicating superior accuracy in locating the relevant lines of code that need modification.  The baselines show more instances with lower coverage ratios, implying less accurate line location.", "section": "4.4 How Effective is Our Coding Process? (RQ 4)"}, {"figure_path": "qevq3FZ63J/figures/figures_16_1.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed illustration of the MAGIS framework, depicting the workflow of each agent across the planning and coding phases.  It expands on the high-level overview given in Figure 2, showing the interaction of the four agents, the information flow between them, the decision-making process, and the iterative refinement of code changes.  The figure provides a more thorough understanding of the framework's operations.", "section": "3 Methodology"}, {"figure_path": "qevq3FZ63J/figures/figures_18_1.jpg", "caption": "Figure 8: Distribution of the LoC in the resolved instances.", "description": "This figure shows the distribution of the number of lines of code (LoC) modified in instances where the GitHub issue was successfully resolved.  It helps to understand the complexity of the code changes handled by the MAGIS framework in successful cases.  The distribution is broken down by whether lines were added, deleted, or both, providing insights into the types of code modifications the framework effectively addresses.", "section": "F Statistics on the Generated Code Changes"}, {"figure_path": "qevq3FZ63J/figures/figures_18_2.jpg", "caption": "Figure 8: Distribution of the LoC in the resolved instances.", "description": "This figure shows the distribution of Lines of Code (LoC) changes in resolved instances, broken down into added, deleted, and both added and deleted lines.  The distribution helps to illustrate the complexity of the code changes involved in successfully resolving issues using the MAGIS framework. It provides a visual representation of the frequency of different LoC change magnitudes in resolved instances, allowing for a comparison with unsuccessful attempts (shown in Figure 9).", "section": "F Statistics on the Generated Code Changes"}, {"figure_path": "qevq3FZ63J/figures/figures_19_1.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed illustration of the MAGIS framework, outlining the roles of each agent (Manager, Repository Custodian, Developer, QA Engineer) and their collaboration throughout the planning and coding phases.  It expands on Figure 2, providing a more comprehensive visual representation of the entire process, from issue identification and team formation to code generation, review, and integration.  The detailed steps in locating code files and lines, as well as the kick-off meeting process, are also shown. This allows for a clearer understanding of the agent interactions and the overall workflow within MAGIS.", "section": "3 Methodology"}, {"figure_path": "qevq3FZ63J/figures/figures_20_1.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed illustration of the MAGIS framework. It breaks down the process into planning and coding phases. The planning phase includes locating code files, building a team, and conducting a kick-off meeting. The coding phase involves code generation, QA engineer review, and testing.  The diagram shows the interactions between different agent types (Manager, Repository Custodian, Developer, QA Engineer) and how they contribute to resolving GitHub issues.  Specific prompts used by each agent are also shown in this detailed illustration.", "section": "3 Methodology"}, {"figure_path": "qevq3FZ63J/figures/figures_20_2.jpg", "caption": "Figure 13: The number of applied and resolved instances in different repositories.", "description": "This figure shows a bar chart visualizing the number of applied and resolved instances across various software repositories.  The x-axis represents the different repositories, while the y-axis displays the counts for both applied and resolved instances.  The different bar colors represent resolved and applied instances respectively.  The chart highlights the variation in success rates of the MAGIS framework across different codebases, indicating potential influence of repository-specific factors on the framework's performance.", "section": "4.4 How Effective is Our Coding Process? (RQ 4)"}, {"figure_path": "qevq3FZ63J/figures/figures_22_1.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed illustration of the MAGIS framework, expanding on the high-level overview in Figure 2.  It breaks down the multi-agent collaboration process into distinct phases, including planning and coding. The planning phase involves the Manager and Repository Custodian agents in locating relevant files and generating summaries, followed by building a team of developers and holding a kick-off meeting to define tasks and the overall workflow.  The coding phase depicts the collaboration of developers, quality assurance engineers, and the manager in generating and reviewing code changes. The figure also shows the memory mechanism utilized for efficiently querying files. This detailed view clarifies the roles and interactions of each agent in the workflow, providing a comprehensive visual representation of the MAGIS framework.", "section": "3 Methodology"}, {"figure_path": "qevq3FZ63J/figures/figures_23_1.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed overview of the MAGIS framework. It visually depicts the workflow of the four agents (Manager, Repository Custodian, Developer, and QA Engineer) involved in resolving GitHub issues.  The diagram breaks down the process into planning and coding phases, illustrating the interactions and data flow between each agent.  The planning phase shows the issue being received, relevant files identified, tasks assigned, and a kick-off meeting held to establish the plan. The coding phase outlines the steps taken by Developers and QA Engineers to generate and review code changes.  The figure provides a comprehensive view of the multi-agent collaboration in solving GitHub issues.", "section": "3 Methodology"}, {"figure_path": "qevq3FZ63J/figures/figures_23_2.jpg", "caption": "Figure 14: Detailed overview of our framework, MAGIS (Kick-off meeting refers to Fig. 7).", "description": "This figure presents a detailed overview of the MAGIS framework, illustrating the interactions between the four agents (Manager, Repository Custodian, Developer, and QA Engineer) across the planning and coding phases.  The planning phase involves locating code files using the BM25 algorithm, building a team of agents, and holding a kick-off meeting to define tasks and workflows.  The coding phase shows the iterative process of code generation, review by the QA Engineer, and merging of code changes. The figure highlights the collaborative nature of the process and the roles each agent plays in resolving GitHub issues.", "section": "3 Methodology"}]