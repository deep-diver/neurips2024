[{"type": "text", "text": "Efficient Recurrent Off-Policy RL Requires a Context-Encoder-Specific Learning Rate ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Fan-Ming Luo1,2 Zuolin $\\mathbf{\\mathbb{T}}\\mathbf{\\mathbf{u}}^{2}$ Zefang Huang1 Yang Yu1,2\u2217 ", "page_idx": 0}, {"type": "text", "text": "1 National Key Laboratory for Novel Software Technology, Nanjing University, China School of Artificial Intelligence, Nanjing University, China 2 Polixir.ai luofm@lamda.nju.edu.cn, zuolin.tu@polixir.ai, zf.frank.huang@gmail.com, yuy@nju.edu.cn ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Real-world decision-making tasks are usually partially observable Markov decision processes (POMDPs), where the state is not fully observable. Recent progress has demonstrated that recurrent reinforcement learning (RL), which consists of a context encoder based on recurrent neural networks (RNNs) for unobservable state prediction and a multilayer perceptron (MLP) policy for decision making, can mitigate partial observability and serve as a robust baseline for POMDP tasks. However, prior recurrent RL algorithms have faced issues with training instability. In this paper, we find that this instability stems from the autoregressive nature of RNNs, which causes even small changes in RNN parameters to produce large output variations over long trajectories. Therefore, we propose Recurrent Off-policy RL with Context-Encoder-Specific Learning Rate (RESeL) to tackle this issue. Specifically, RESeL uses a lower learning rate for context encoder than other MLP layers to ensure the stability of the former while maintaining the training efficiency of the latter. We integrate this technique into existing offpolicy RL methods, resulting in the RESeL algorithm. We evaluated RESeL in 18 POMDP tasks, including classic, meta-RL, and credit assignment scenarios, as well as five MDP locomotion tasks. The experiments demonstrate significant improvements in training stability with RESeL. Comparative results show that RESeL achieves notable performance improvements over previous recurrent RL baselines in POMDP tasks, and is competitive with or even surpasses state-ofthe-art methods in MDP tasks. Further ablation studies highlight the necessity of applying a distinct learning rate for the context encoder. Code is available at https://github.com/FanmingL/Recurrent-Offpolicy-RL. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "In many real-world reinforcement learning (RL) tasks [1], complete state observations are often unavailable due to limitations such as sensor constraints, cost considerations, or task-specific requirements. For example, visibility can be obstructed by obstacles in autonomous driving [2, 3] or robotic manipulation [4], and measuring ground friction may be infeasible when controlling quadruped robots on complex terrain [5]. These scenarios are common and typically conceptualized as Partially Observable Markov Decision Processes (POMDPs). Traditional RL struggles with POMDPs due to the lack of essential state information [6]. ", "page_idx": 0}, {"type": "text", "text": "A mainstream class of POMDP RL algorithms infers unobservable states by leveraging historical observation information, either explicitly or implicitly [6]. This often requires memory-augmented network architectures, such as recurrent neural networks (RNNs) [7, 8] and Transformers [9]. Replacing standard networks in RL algorithms with these memory-based structures has proven effective in solving POMDP problems [10, 11, 12, 13]. Particularly, recurrent RL [11], which employs an RNN-based context encoder to extract unobservable hidden states and an MLP policy to make decisions based on both current observation and hidden states, demonstrates robust performance in POMDP tasks. Compared to Transformer-based RL [13], recurrent RL offers lower inference time complexity, making it highly applicable, especially in resource-constrained terminal controllers. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Despite these advantages, recurrent RL faces a significant challenge: while advanced RNN architectures [7, 8, 14] can effectively address gradient explosion issues, training in recurrent RL often remains more unstable compared to MLP-based RL, particularly when handling long sequence lengths. This instability can lead to poor policy performance and even training divergence [15]. Although existing methods usually avoid training with full-length trajectories by using shorter trajectory segment [11], this practice introduces distribution shift due to the inconsistency between the sequence lengths used during training and deployment. ESCP [16] addressed this by truncating the history length during deployment to match the training sequence length, but this may limit policy performance due to restricted memory length. Additionally, some methods introduce auxiliary losses to aid context encoders in learning specific information. For instance, they train alongside a transition model, forcing the outputs of context encoder to help minimize the prediction error of this model [17, 18, 19]. However, these methods require the RNN to learn specific information, which may limit the RNN\u2019s potential and may only be applicable to a subset of tasks. ", "page_idx": 1}, {"type": "text", "text": "In this work, we found that, with the autoregressive property of RNNs, the output variations caused by parameter changes are amplified as the sequence length increases. As RNN parameters change, even slight variations in the RNN output and hidden state at the initial step can become magnified in subsequent steps. This occurs because the altered hidden state is fed back into the RNN at each step, causing cumulative output variations. Our theoretical analysis shows that these output variations grow with the sequence length and eventually converge. The amplified output variations can lead to instability in the RL process. For instance, in off-policy RL algorithms, the bootstrapped update target of the Q-function may fluctuate significantly, resulting in unstable Q-function training. To avoid training instability caused by excessive amplification of output variations, we propose Recurrent Off-policy RL with Context-Encoder-Specific Learning Rate (RESeL). Specifically, we employ a lower learning rate for the RNN context encoder while keeping the learning rate for the other MLP layers unchanged. This strategy ensures efficient training for MLPs, which do not experience the issue of amplified output variations. ", "page_idx": 1}, {"type": "text", "text": "Based on the SAC framework [20], and incorporating context-encoder-specific learning rate as well as the ensemble-Q mechanism from REDQ [21] for training stabilization, we developed the practical RESeL algorithm. We empirically evaluated RESeL across 18 POMDP tasks, consisting of classic POMDP, meta-RL, credit assignment scenarios, as well as five MDP locomotion tasks. In our experiments, we first observed the increasing RNN output variations over time and demonstrated that the context-encoder-specific learning rate can mitigate the amplification issue, significantly enhancing the stability and efficacy of RL training. Comparative results indicate that RESeL achieves notable performance improvements over previous recurrent RL methods in POMDP tasks and is competitive with, or even surpasses, state-of-the-art (SOTA) RL methods in MDP tasks. Further ablation studies highlight the necessity of applying a distinct learning rate for the context encoder. ", "page_idx": 1}, {"type": "text", "text": "2 Background ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Partially Observable Markov Decision Processes (POMDPs) ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "[22, 6] enhance MDPs for scenarios with limited state visibility, addressing a number of real-world decision-making challenges with imperfect or uncertain data. A POMDP is defined by $\\langle S,A,\\mathcal{O},P,O,r,\\gamma,\\rho_{0}\\rangle$ , consisting of state space $\\boldsymbol{S}$ , action space $\\boldsymbol{\\mathcal{A}}$ , observation space $\\scriptscriptstyle\\mathcal{O}$ , state transition function $P$ , observation function $O$ , reward function $r$ , discount factor $\\gamma$ , and initial state distribution $\\rho_{0}$ . Unlike MDPs, agents in POMDPs receive observations $o\\in{\\mathcal{O}}$ instead of direct state information, requiring a belief state\u2014a probability distribution over $\\boldsymbol{S}$ \u2014to inform decisions. The objective is to search for a policy $\\pi$ to maximize the expected rewards, while factoring in observation and transition uncertainties. ", "page_idx": 1}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/e35afbc08676b9252b8c8113cf86751e0b19277896c3d30ab0fa15b6c50bbd2a.jpg", "img_caption": ["Figure 1: A simple recurrent policy architecture. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Recurrent RL [23, 11] involves employing RNN-based policy or critic models within the framework of RL. Figure 1 provides a commonly utilized recurrent policy architecture. This architecture has two main components. First, a context encoder processes the current observation $o$ , the last action $\\hat{a}$ , the reward $\\hat{r}^{2}$ , and the RNN hidden state. Then, an MLP policy uses the context embedding and $o$ to generate actions, facilitating the extraction of non-observable states into a context embedding. We can train the recurrent policy by incorporating it into any existing RL algorithm. During training, recurrent RL requires batch sampling and loss computation on a trajectory-by-trajectory basis. ", "page_idx": 2}, {"type": "text", "text": "3 Related Work ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In this work, we focus on recurrent RL methods [24, 25, 23], which leverage RNN-based models for RL tasks. These methods have demonstrated robust performance in POMDP [10, 22] and metaRL tasks [25, 26], having shown notable success in practical applications such as robotic motion control [27, 28, 29] and MOBA games [30]. ", "page_idx": 2}, {"type": "text", "text": "Recurrent RL utilizes RNNs such as GRUs [8], LSTMs [7], and more recently, SSMs [12] to construct policy and critic models. Typically, in recurrent actor-critic RL, both policy and critic adopt RNN architectures [23, 11]. When full state information is available during training, an MLP critic can also be used instead [29], receiving the full state as its input. In this work, we do not assume that complete state information can be accessed, so policy and critic models are both RNN structures. ", "page_idx": 2}, {"type": "text", "text": "The most direct way to train RNN models in recurrent RL is combining an RNN structure with existing RL algorithms, such as being integrated into on-policy methods like PPO [28, 30, 12, 31] and TRPO [25, 32] as well as off-policy methods like TD3 [11] and SAC [23]. This work follows the line of recurrent off-policy RL [11, 23], as we believe that existing recurrent off-policy RL algorithms have not yet achieved their maximum potential. ", "page_idx": 2}, {"type": "text", "text": "Despite the simplicity of direct integration, however, training RNNs often suffers from the training instability issue [12, 15], especially in long sequence length. Previous methods usually use truncated trajectory to train RNNs [11]. However, deploying recurrent models with full-trajectory lengths can result in a mismatch between training and deployment. ESCP [16] addressed this issue by using the same sequence lengths in both training and deployment by truncating the historical length in deployment scenarios, but this could impair policy performance due to the restricted memory length. On the other hand, many studies also employed auxiliary losses in addition to the RL loss for RNN training [19]. These losses aim to enable RNNs to stably extract some certain unobservable state either implicitly or explicitly. For instance, they might train the RNNs to predict transition parameters [33], distinguish between different tasks [16, 34], or accurately predict state transitions [17, 18, 19]. These methods require the RNN to learn specific information, which may limit the RNN\u2019s potential and may only be applicable to a subset of tasks, reducing the algorithmic generalizability. ", "page_idx": 2}, {"type": "text", "text": "RESeL directly trains recurrent models using off-policy RL due to its simplicity, flexibility, and potential high sample efficiency. The most relevant study to RESeL is [11], which focused on improving recurrent off-policy RL by analyzing the hyperparameters, network design, and algorithm choices. More in depth, RESeL studies the instability nature of previous methods and enhances the stability of recurrent off-policy RL through a specifically designed learning rate. ", "page_idx": 2}, {"type": "text", "text": "4 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In this section, we address the training stability challenges of recurrent RL. We will first elaborate on our model architecture in Sec. 4.1 and introduce how we address the stability issue in Sec. 4.2. Finally, we will summarize the training procedure of RESeL in Sec. 4.3. ", "page_idx": 2}, {"type": "text", "text": "4.1 Model Architectures ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "The architectures of RESeL policy and critic models are depicted in Fig. 2. Specifically, RESeL policy initially employs MLPs as pre-encoders to map the current and last-step observations ( $o$ and $\\hat{o}$ respectively), actions $({\\hat{a}})$ , and rewards $\\left(\\hat{r}\\right)$ into hidden spaces with equal dimensions, ensuring a balanced representation of various information types. These pre-encoded inputs are then concatenated into a vector and inputted into a context encoder. For the context encoder, RESeL utilizes RNN such as GRU [8] and Mamba [14], to mix sequential information and extract non-observable state information from the observable context. The MLP policy comprises a two-layer architecture, each layer consisting of 256 neurons. The architecture of the pre-encoder and context encoder for the RESeL critic mirrors that of the policy. To improve training stability, RESeL adopts the ensemble-Q technique from REDQ [21], employing 8 MLP critic models, and each one of them comprises two hidden layers with 256 neurons. ", "page_idx": 2}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/7387f9d85a1158e5acb79d46aff3e6751a14efb253955790e3f04387baefb5ac.jpg", "img_caption": ["Figure 2: Policy and critic architectures of RESeL. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "4.2 Stabilizing Training with a Context-Encoder-Specific Learning Rate ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "To locate the source of instability, we first formalize the RNN and its sequence generation process. An RNN network $f^{\\theta}(x_{t},h_{t}):\\dot{x}\\times\\mathcal{H}\\to\\mathcal{Y}\\times\\mathcal{H}$ is defined as: $y_{t},\\dot{h_{t+1}}=\\ \\dot{f}^{\\theta}(x_{t},h_{t})$ , where $\\theta$ represents the network parameters, $x_{t},\\,y_{t}$ , and $h_{t}$ are the RNN input, output, and hidden state, respectively. For simplicity, we denote $\\bar{y_{t}}\\,=\\,f_{y}^{\\theta}(x_{t},h_{t})$ and $h_{t+1}\\ {\\stackrel{\\cdot}{=}}\\ f_{h}^{\\theta}(x_{t}^{\\ },h_{t})$ . Given an input sequence $\\{x_{0},x_{1},\\dots,x_{T}\\}$ of length $T+1$ and an initial hidden state $h_{0}$ , the output sequence generated by $f^{\\theta}$ is denoted as $\\{y_{0},y_{1},\\dots,y_{T}\\}$ . Let $\\theta^{\\prime}$ be the parameter neighboring $\\theta$ after a onestep gradient update. The output sequence produced by $f^{\\theta^{\\prime}}$ is denoted as $\\{y_{0}^{\\prime},y_{1}^{\\prime},\\ldots,y_{T}^{\\prime}\\}$ . With certain assumptions, we can derive Proposition 1, which bounds the difference between $y_{t}$ and $y_{t}^{\\prime}$ at any time step $t$ . ", "page_idx": 3}, {"type": "text", "text": "Proposition 1. Assuming $f^{\\theta}$ and $f^{\\theta^{\\prime}}$ both satisfy Lipschitz continuity, i.e., for all $\\hat{\\theta}\\in\\{\\theta,\\theta^{\\prime}\\}$ , $x\\in\\mathscr{X}$ , $h,\\bar{h^{\\prime}}\\in\\mathcal{H},$ , there exist constants $K_{h}\\in[0,1)$ and $K_{y}\\in\\mathbb{R}$ such that: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\left\\Vert f_{h}^{\\hat{\\theta}}(x,h)-f_{h}^{\\hat{\\theta}}(x,h^{\\prime})\\right\\Vert\\leq K_{h}\\left\\Vert h-h^{\\prime}\\right\\Vert,\\ \\ \\left\\Vert f_{y}^{\\hat{\\theta}}(x,h)-f_{y}^{\\hat{\\theta}}(x,h^{\\prime})\\right\\Vert\\leq K_{y}\\left\\Vert h-h^{\\prime}\\right\\Vert,}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "and for all $x\\in\\mathcal{X},\\,h\\in\\mathcal{H},$ , the output differences between the RNN parameterized by $\\theta$ and $\\theta^{\\prime}$ are bounded by a constant $\\epsilon\\in\\mathbb{R}$ : ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\operatorname*{max}\\left(\\left\\|f_{h}^{\\theta}(x,h)-f_{h}^{\\theta^{\\prime}}(x,h)\\right\\|,\\left\\|f_{y}^{\\theta}(x,h)-f_{y}^{\\theta^{\\prime}}(x,h)\\right\\|\\right)\\le\\epsilon,\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "the RNN output difference at $t$ -th step is bounded by ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\|y_{t}-y_{t}^{\\prime}\\|\\leq\\ K_{y}{\\frac{1-K_{h}^{t}}{1-K_{h}}}\\ \\ \\epsilon+\\epsilon,\\ \\ \\forall t\\geq0.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Refer to Appendix A for a detailed proof. Proposition 1 focuses on the case where $K_{h}\\in[0,1)$ , as most RNN models adhere to this condition. GRU [8] and LSTM [7] meet this requirement through the use of sigmoid activation functions, while Mamba [14] achieves it by constraining the values in the hidden state\u2019s transition matrix. ", "page_idx": 3}, {"type": "text", "text": "In Eq. (1), $\\epsilon$ represents the maximum variation of the model output when the model parameters are modified and both the model input and hidden state remain constant, i.e., the first-step output variation. However, from Eq. (1), we observe that due to the variability in the hidden state, the final variation in the model output is amplified. This amplification factor is minimal at $t=0$ , being 0. As t increases, this amplification factor gradually increases and ultimately converges to \u03b2 :=1\u2212KKyh . Additionally, it can be verified that as $t$ increases, the upper bound of the average variation in network output $\\textstyle{\\frac{1}{t}}\\sum_{i=0}^{t-1}\\|y_{i}-y_{i}^{\\prime}\\|$ also increases with time step $t$ and eventually converges to $\\beta\\epsilon+\\epsilon$ (proved in Appendix B), which is again amplified by $\\beta$ . This conclusion indicates that, compared to the case of a sequence length of 1, in scenarios with longer sequence lengths, the average variations in the RNN output induced by gradient descent are amplified. ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "This issue is different from the gradient explosion that commonly occurs in RNNs over long sequences [7]. Proposition 1 indicates that the variation in network output is amplified by a constant factor, rather than undergoing exponential explosion. This type of instability is not very significant in supervised learning but can lead to instability in RL processes. For instance, in off-policy RL algorithms, the optimization target of the Q-function minimizes the difference with a bootstrapped target. If the network output varies greatly, this target will fluctuate dramatically, making the Q-function training unstable, which in turn can lead to overall training instability. ", "page_idx": 4}, {"type": "text", "text": "To ensure stable training, it is required to use a smaller learning rate to counterbalance the amplified variations in network output caused by long sequence lengths, as a smaller learning rate can help reduce $\\epsilon$ . However, the output variations in MLPs are not amplified in the same way as in RNNs. If MLPs are also set with a small learning rate, their learning efficiency could be significantly reduced, as the learning rate may become too slow for MLPs, resulting in inefficient training and poor overall performance. Consequently, we propose to use a context-encoder-specific learning rate for the context encoder. In our implementation, we use a smaller learning rate $\\mathrm{LR_{\\mathrm{CE}}}$ for the context encoder, which contains the RNN architecture. For other layers, we use a normal learning rate $\\mathrm{LR_{other}}$ , e.g. $3\\times10^{-4}$ . Applying different learning rates to different modules is similar to Two-Timescale Network [35], which has been shown to improve the training convergence. ", "page_idx": 4}, {"type": "text", "text": "4.3 Training Procedure of RESeL ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Based on the SAC framework [20], combining context-encoder-specific learning rate and the ensemble-Q mechanism from REDQ [21], we developed the practical RESeL algorithm. Specifically, we initially configure context-encoder-specific optimizers for both the policy and value models. After each interaction with the environment, RESeL samples a batch of data from the replay buffer, containing several full-length trajectories. This batch is used to compute the critic loss according to REDQ, and the critic network is optimized using its context-encoder-specific optimizer. Notably, unlike REDQ, we did not adopt a update-to-data ratio greater than 1. Instead of that, we update the network model once per interaction. The policy network is updated every two critic updates. During the policy update, the policy loss from REDQ is used, and the policy network is optimized with its context-encoder-specific optimizer. Here, we delay the policy update by one step to allow more thoroughly training of the critic before updating the policy, which is inspired by TD3 [36] to improve the training stability. The detailed algorithmic procedure is provided in Appendix C and Algorithm 1. ", "page_idx": 4}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "To validate our argument and compare RESeL with other algorithms, we conducted a series of validation and comparison experiments across various POMDP environments. We primarily considered three types of environments: classical partially observable environments, meta-RL environments, and credit assignment environments. To assess the generalizablity of RESeL to MDP tasks, we also test RESeL in five MuJoCo [37] locomotion tasks with full observation provided. We implement the policy and critic models with a parallelizable RNN, i.e., Mamba [14] to accelerate the training process. A detailed introduction of the network architecture can be found in Appendix D.3.2. ", "page_idx": 4}, {"type": "text", "text": "In all experiments, the RESeL algorithm was repeated six times using different random seeds, i.e. 1\u20136. All experiments were conducted on a workstation equipped with an Intel Xeon Gold 5218R CPU, four NVIDIA RTX 4090 GPUs, and 250GB of RAM, running Ubuntu 20.04. For more detailed experimental settings, please refer to Appendix D. ", "page_idx": 4}, {"type": "text", "text": "5.1 Training Stability ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The updates of the RNN lead to large variations in the model output. In Sec. 4.2, we observe that the variations in model output induced by a model update are amplified. In this part, we quantify the amplification factor, assess its impact on RL training, and discover how a context-encoder-specific learning rate addresses this issue. We use a POMDP task, specifically WalkerBLT-V-v0, to validate our argument. We loaded a policy model trained by RESeL and updated it with various $\\mathrm{LR_{CE}}$ and $\\mathrm{LR_{other}}$ for a one-step gradient update. The output differences for all rollout steps between the preand post-update models are presented in Fig. 3. The right panel shows the variations in model output as the rollout step increases, while the left panel zooms in on the rollout steps from 0 to 75. ", "page_idx": 4}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/0608a9b01ea843dfce9965e4c8389175c2e69bb7c62a3146c9aad910971799a8.jpg", "img_caption": ["Figure 3: Action variations as the rollout step increases after a single gradient update with different values of $\\mathrm{LR_{CE}}$ and $\\mathrm{LR_{other}}$ . Action variation refers to the change in policy output after the gradient update compared to its output before the update, using the same input sequences. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "In the zoom-in panel, comparing the brown-circle and yellow-triangle curves reveals that at the first rollout step, the two curves are very close. This indicates that with the same learning rate, identical input, and hidden states, the updates of RNN and MLP have almost the same impact on the model\u2019s output. However, as the rollout steps increase, the brown-circle curve gradually rises, increasing by $400\\%$ at the 20-th step. This observation aligns with Proposition 1, demonstrating that changes in the hidden state lead to increasing variations in the model\u2019s output. With further increases in rollout length, the right panel shows that the brown-circle curve converges at around 0.4 after 250 steps, indicating that the amplification of the output variations eventually converges. This also meets Proposition 1. Ultimately, the increase in action variations is approximately tenfold. ", "page_idx": 5}, {"type": "text", "text": "This action variation magnitude is equivalent to an MLP policy network (the gray-dashed curve) with a learning rate increased twentyfold. At this point, the learning rate reaches 0.006, which is typically avoided in RL scenarios due to the risk of training instability. Conversely, reducing $\\mathrm{LR_{CE}}$ to $10^{-5}$ (the purple-diamond curve) significantly suppresses the amplification of variations. The right panel shows that the orange and purple curves remain at similar levels until the final time step. ", "page_idx": 5}, {"type": "text", "text": "Large output variations lead to instability in RL training. To investigate how the large variations influence the RL process, we visualized the gradient norm and value function loss during training for two POMDP tasks, as shown in Figs. 4 and 5. We fixed $\\mathrm{LR}_{\\mathrm{other}}\\,=\\,3\\times\\,10^{-4}$ and compared the training processes of $\\mathrm{LR}_{\\mathrm{CE}}=10^{-5}$ (red line) and $3\\times10^{-4}$ (orange line). For the latter, we applied gradient clipping; otherwise, training would diverge and stop early. The orange line in Fig. 4 shows the norm of the policy gradient before gradient rescaling, where significant oscillations appear in the gradient in the later stages of training. The orange gradient norm is eventually scaled to 0.5, consistently smaller than the red line, which does not show oscillations. This suggests that the late-stage instability of the orange line does not stem from large gradient magnitudes. ", "page_idx": 5}, {"type": "text", "text": "On the other hand, as seen in Fig. 5, the value loss for the orange line remains consistently high, with extremely large values appearing in later stages. This is due to large variations in the RNN output, which lead to an unstable bootstrapped update target for the value function. Consequently, the value loss diverges, causing the abnormal gradient norm observed in Fig. 4. The results in Figs. 4 and 5 reveal the unique challenges of using RNN structures in RL, where traditional RNN stabilization techniques may no longer be effective. ", "page_idx": 5}, {"type": "text", "text": "Using a context-encoder-specific learning rate improves training stability, while traditional RNN stabilization techniques fall short. To further examine the impact of a lower learning rate on the stability of RL training, we conducted experiments across several POMDP tasks. Building on the setup in Fig. 4, we further evaluated a variant without the gradient clipping technique and another that replaces gradient clipping with a truncation of recurrent backpropagation steps to 32 (green line). For reference, we also included a variant where the CE output is entirely masked to zero (purple line). ", "page_idx": 5}, {"type": "text", "text": "Comparing the vanilla RNN-based RL (blue line) with the purple line shows that introducing an RNN can partially address partial observability issues and improve policy performance. However, the blue line still exhibits instability, even triggering early stopping due to outliers. Setting a specific learning rate for the CE (red line) significantly enhances training stability, indicating that reducing the RNN learning rate indeed improves overall RL training stability. However, we also found that traditional RNN stabilization techniques do not reliably improve RL training stability. For example, truncating the number of recurrent backpropagation steps (green line) can still lead to early stopping, while clipping the gradient norm (orange line) prevents early stopping but does not improve the policy performance. This is because these two stabilization techniques can only suppress gradient explosions in the RNN, keeping the RNN gradients within a normal range. However, the output of the RNN can still vary significantly, which continues to cause instability in RL. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/51a797b684c58479286b54354b6005b82418b24993bde6c3c2a9f1fcef8e52af.jpg", "img_caption": ["Figure 4: L2-norm of the policy gradient for Figure 5: Value losses in log-scale for differdifferent RNN stabilization approaches. ent RNN stabilization approaches. "], "img_footnote": [], "page_idx": 6}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/47744106c60d80cfae4b611cd62306e4c8ff756c4a842a7b05d7135cbd6750ce.jpg", "img_caption": ["Figure 6: Learning curves in four POMDP tasks with different learning rates and RNN stabilization techniques, shaded with one standard error. We fixed $\\mathrm{LR}_{\\mathrm{other}}=3\\times1\\bar{0}^{-4}$ . Some learning curves in AntBLT-V and HalfCheetahBLT-V are incomplete as some runs encountered infinite or NaN outputs. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "5.2 Performance Comparisons ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In this part, we compare RESeL with previous methods in various tasks. The detailed introduction of the baselines and tasks can be found in Appendix D.2 and Appendix D.1. More comparative results can be found in Appendix E.3. ", "page_idx": 6}, {"type": "text", "text": "Classic POMDP Tasks. We first compare RESeL with previous baselines in four PyBullet locomotion environments: AntBLT, HalfCheetahBLT, HopperBLT, and WalkerBLT. To create partially observable tasks, we obscure part of the state information as done in previous studies [18, 11, 15], preserving only position (-P tasks) or velocity (-V tasks) information from the original robot observations. We benchmark RESeL against prior model-free recurrent RL (MF-RNN) [11], VRM [18], and GPIDE [38]. GPIDE, which extracts historical features inspired by the principle of PID [39] controller, is the state-of-the-art (SOTA) method for these tasks. ", "page_idx": 6}, {"type": "text", "text": "The comparative results are shown in Fig. 7. RESeL demonstrates significant improvements over previous recurrent RL methods (MF-RNN, PPO-GRU, and A2C-GRU) in almost all tasks, except for HalfCheetahBLT-P where its performance is close to that of MF-RNN. These results highlight the advantage of RESeL in classic POMDP tasks over previous recurrent RL methods. Furthermore, RESeL outperforms GPIDE in most tasks, establishing it as the new SOTA method. The learning curves of RESeL are more stable than that of GPIDE, suggesting that fine-grained feature design could also introduce training instability, while a stably trained RNN can even achieve superior performance. ", "page_idx": 6}, {"type": "text", "text": "Dynamics-Randomized Tasks. Instead of directly obscuring part of the immediate state, meta-RL considers a different type of POMDP. In meta-RL scenarios [26], the agent learns across various tasks with different dynamics or reward functions [16, 19], where the parameters of the dynamics and reward functions are not observable. We first compare RESeL with previous methods in the dynamics randomization meta-RL tasks. Following previous meta-RL work [16], we randomized the gravity in MuJoCo environments [37]. We created 60 dynamics functions with different gravities, using the first 40 for training and the remaining for testing. The gravity is unobservable, requiring the agents to infer it from historical experience. We compare RESeL to various meta-RL methods in these tasks, including ProMP [40], ESCP [16], OSI [33], EPI [41], and PEARL [42]. Notably, ESCP, EPI, and OSI use recurrent policies with different auxiliary losses for RNN training. ESCP and PEARL are previous SOTA methods for these tasks. The comparative results are shown in Fig. 8. ", "page_idx": 6}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/a73af7e71e59645b5ed7238d4adf60932c803b412a3a06821801c391978c7073.jpg", "img_caption": ["Figure 7: Learning curves shaded with one standard error in classic POMDP tasks. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "We find that in Ant, Humanoid, and Walker2d, RESeL demonstrates significant improvement over all other methods. In Hopper, RESeL performs on par with ESCP, while surpassing other methods. Specifically, RESeL outperforms SAC-RNN by a large margin, further highlighting its advantages. Moreover, ESCP, EPI, and OSI use RNNs to extract dynamics-related information, with ESCP having inferred embeddings highly related to the true environmental gravity. The advantages of RESeL over these methods suggest that the context encoder of RESeL may extract not only gravity (see Appendix E.1) but also other factors that help the agent achieve higher returns. ", "page_idx": 7}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/537037dfbc6e0ee3cba86712de6aac65aa52541349ead47d0b46d4c351f41933.jpg", "img_caption": ["Figure 8: Learning curves shaded with one standard error in dynamics-randomized tasks. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Classic meta-RL Tasks. We further compare RESeL with baselines in other meta-RL tasks, particularly the tasks possessing varying reward functions, sourced from [19, 11]. In AntDir, CheetahDir, and HalfCheetahVel, the robots\u2019 target moving direction or target velocity are changeable and unobservable. Agents must infer the desired moving direction or target velocity from their historical observations and rewards. Wind is a non-locomotion meta-RL task with altered dynamics. We compare RESeL to previous meta-RL methods, including $\\mathrm{RL^{2}}$ [25], VariBad [19], and MF-RNN [11]. ", "page_idx": 7}, {"type": "text", "text": "The learning curves of these methods are shown in Fig. 9. In the AntDir and HalfCheetahDir tasks, we found that RESeL can converge within 5M steps. Our results show that RESeL demonstrates high sample efficiency and superior asymptotic performance in AntDir, CheetahDir, and HalfCheetahVel. In Wind, RESeL performs comparably to MF-RNN, as this task is less complex. These findings suggest that RESeL effectively generalizes to POMDP tasks with hidden reward functions. ", "page_idx": 7}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/4968dd238e2ae0b50b690a3fb58ab7fc038e7c8fbd644b9a76a7695c8dd26a21.jpg", "img_caption": ["Figure 9: Learning curves shaded with one standard error in meta-RL tasks. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Credit Assignment Tasks. A notable application of recurrent RL is solving credit assignment problem [11, 15]. We also compare RESeL with MF-GPT [15] and MF-RNN [11] in a credit assignment task, namely Key-to-Door. In this task, it is required to assign a reward obtained at the last-step to an early action. We compared RESeL with algorithms MFGPT and MF-RNN. As did in [15], we test RESeL with credit assignment length of [60, 120, 250, 500]. the hardness of the task grows as the length increases. In this task, the methods are evaluated by success rate. The results are shown in Fig. 10. The success rate of RESeL matches the previous SOTA MFGPT in tasks with [60,120] lengths, closed to $100\\%$ success rate. For harder tasks with the lengths being [250, 500], RESeL reached higher success rates than the others. The results indicate that RESeL outperforms Transformer-based methods in handling challenging credit assignment tasks. ", "page_idx": 8}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/874258f15e37ac9c1ca62f7ec286cb40d6c5ec93b10a5c4e8ce5790e985ea0ca.jpg", "img_caption": ["Figure 10: Success rate in the keyto-door task with different credit assignment lengths. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Classic MuJoCo Locomotion Tasks. Finally, we would like to discover how RESeL performs in MDP tasks. We adopt five classic MuJoCo tasks and compare RESeL with previous RL methods, e.g., SAC [20], TD3 [36], and TD7 [43]. As the current SOTA method for these environment, TD7 introduces several enhancements based on TD3, e.g., a representation learning method and a checkpoint trick, which are not existing in RESeL. The results, listed in Table 1, show that RESeL is comparable to TD7, showing only a $4.8\\%$ average performance drop. This demonstrates that RESeL is effective enough to nearly match the performance of the most advanced MDP algorithm. In Hopper and Walker, RESeL even surpasses TD7 by a significant margin. By comparing RESeL with SAC, we find RESeL is superior to SAC in all tasks and can improve SAC by $\\Bar{3}4.2\\Bar{\\%}$ in average. These results indicate that RESeL can also be effectively extended to MDP tasks with notable improvement. ", "page_idx": 8}, {"type": "table", "img_path": "tSWoT8ttkO/tmp/5f10db46220bf3e01661b367e33b1127a6a6e5e7e92a57f64b033856f29652fd.jpg", "table_caption": ["Table 1: Average performance on the classic MuJoCo tasks at 5M time steps $\\pm$ standard error. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "5.3 Sensitivity and Ablation Studies ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Sensitivity Studies. In this section, we analyze the impact of $\\mathrm{LR_{CE}}$ and $\\mathrm{LR_{other}}$ with experiments on the WalkerBLT-V task. Initially, we fixed $\\mathrm{LR}_{\\mathrm{other}}\\,=\\,3\\times\\,10^{-4}$ and varied $\\mathrm{LR_{CE}}$ . The final returns for different $\\mathrm{LR_{CE}}$ values are shown in Fig. 11a. The figure demonstrates that the highest model performance is achieved when $\\mathrm{LR_{CE}}$ is between $5\\times10^{-6}$ to $10^{-5}$ . Both larger and smaller $\\mathrm{LR_{CE}}$ values result in decreased performance. Notably, an overly small $\\mathrm{LR_{CE}}$ is preferable to an overly large one, as a small learning rate can slow down learning efficiency, whereas a large learning rate can destabilize training, leading to negative outcomes. Next, we fixed $\\mathrm{LR}_{\\mathrm{CE}}\\,=\\,10^{-5}$ and varied $\\mathrm{LR_{other}}$ . The resulting final returns are presented in Fig. 11b. Here, the model achieves the highest score with $\\mathrm{LR}_{\\mathrm{other}}=3\\times10^{-4}$ , while other values for $\\mathrm{LR_{other}}$ yield lower scores. Figs. 11a and 11b together indicate that the optimal values for $\\mathrm{LR_{CE}}$ and $\\mathrm{LR_{other}}$ are not of the same order of magnitude. Additionally, it can also be found from Fig. 11c that setting $\\mathrm{LR_{CE}}$ equally significantly degrades policy performance. This emphasizes the importance of using different learning rates for context encoder and other layers. We extended the experiments from Figs. 11a and 11c to additional seven POMDP tasks, with results presented in Fig. 20 in Appendix E.6. The conclusions drawn from Fig. 20 are largely consistent with those from Figs. 11a and 11c, indicating that the impact of the context-encoder-specific learning rate on training is relatively generalizable. ", "page_idx": 8}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/6d33849729c9f750b692ae0d66567098671be2a8a71ef7428d122ebc6c34d078.jpg", "img_caption": ["(a) Fixing $\\mathrm{LR_{other}}$ , varying LRCE.(b) Fixing LRCE, varying $\\mathrm{LR_{other}}$ .(c) $\\mathrm{LR}_{\\mathrm{CE}}=\\mathrm{LR}_{\\mathrm{other}}$ , varying both. Figure 11: Sensitivity studies of varied learning rates in terms of the average final return. "], "img_footnote": [], "page_idx": 9}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/6ee3153a8d67f94e2d8de457f119c6e18adc0c84aecabffd7615cef3e1dc79d4.jpg", "img_caption": ["Figure 12: Learning curves shaded with 1 standard error with different RNN architectures. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Ablation Studies. We then explore whether the context-encoder-specific learning rate applies to other RNN or Transformer architectures [9]. We integrated a GRU [8] or Transformer as the context encoder while keeping all other settings constant. Due to the high computational cost of training GRUs and Transformers on full-length trajectories, we tested the RESeL variant with these architectures on four classic POMDP tasks for 0.75M time steps. Figure 12 displays the learning curves for various variants. MF-RNN [11] and SAC-Transformer [38] serve as baselines based on GRUs and Transformers from prior studies. ", "page_idx": 9}, {"type": "text", "text": "We observe that the context-encoder-specific learning rate also improves and stabilizes the performance of the GRU and Transformer variants. Our findings show that both RESeL-GRU and RESeL-Transformer perform comparably to RESeL-Mamba on three out of four tasks. These results suggest that the performance gains of RESeL are not solely attributed to an advanced RNN architecture, and that different arhitectures may be suited to different tasks. Additional sensitivity experiments and ablation studies on context length can be found in Appendices E.4 to E.6. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusions and Limitations ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we proposed RESeL, an efficient recurrent off-policy RL algorithm. RESeL tackles the training stability issue existing in previous recurrent RL methods. RESeL uses difference learning rates for the RNN context encoder and other fully-connected layers to improve the training stability of RNN and ensure the performance of MLP. Experiments in various POMDP benchmarks showed that RESeL can achieve or surpass previous SOTA across a wider variety of tasks, including classic POMDP tasks, meta-RL tasks, and credit assignment tasks. ", "page_idx": 9}, {"type": "text", "text": "Limitations. We also notice that there are several noticeable limitations concerning this work: (1) We have shown that RESeL can even surpass SOTA methods in some MDP tasks, but it is unclear how the RNN helps the policy improve the performance. (2) RESeL introduces one more hyper-parameter, i.e., $\\mathrm{LR_{CE}}$ . It is would be nice to explore the relationship between optimal $\\mathrm{LR_{CE}}$ and $\\mathrm{LR_{other}}$ or automatically parameter-tuning strategy for LRCE. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was supported by the Fundamental Research Program for Young Scholars (PhD Candidates) of the National Science Foundation of China (623B2049) and the Jiangsu Science Foundation (BK20243039). The authors thank the anonymous reviewers and Ms. Qianqian Cheng for their constructive feedback on this paper. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Richard S. Sutton and Andrew G. Barto. Reinforcement learning: An introduction. MIT Press, 1998.   \n[2] Henrik Bey, Maximilian Tratz, Moritz Sackmann, Alexander Lange, and J\u00f6rn Thielecke. Tutorial on sampling-based pomdp-planning for automated driving. In Proceedings of the International Conference on Vehicle Technology and Intelligent Transport Systems, Prague, Czech Republic, 2020.   \n[3] Zachary Sunberg and Mykel J. Kochenderfer. Improving automated driving through POMDP planning with human internal states. IEEE Transactions on Intelligent Transportation Systems, 23(11):20073\u201320083, 2022.   \n[4] Jing-Cheng Pang, Si-Hang Yang, Xiong-Hui Chen, Xinyu Yang, Yang Yu, Mas Ma, Ziqi Guo, Howard Yang, and Bill Huang. Object-oriented option framework for robotics manipulation in clutter. In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems, Detroit, MI, 2023.   \n[5] Zhongyu Li, Xue Bin Peng, Pieter Abbeel, Sergey Levine, Glen Berseth, and Koushil Sreenath. Reinforcement learning for versatile, dynamic, and robust bipedal locomotion control. CoRR, abs/2401.16889, 2024.   \n[6] Mikko Lauri, David Hsu, and Joni Pajarinen. Partially observable markov decision processes in robotics: A survey. IEEE Transactions on Robotics, 39(1):21\u201340, 2023.   \n[7] Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural Computation, 9(8):1735\u20131780, 1997.   \n[8] Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, KyungHyun Cho, and Yoshua Bengio. Empirical evaluation of gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.   \n[9] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems, Long Beach, CA, 2017.   \n[10] Siegmund Duell, Steffen Udluft, and Volkmar Sterzing. Solving partially observable reinforcement learning problems with recurrent neural networks. In Neural Networks: Tricks of the Trade - Second Edition, volume 7700, pages 709\u2013733. Springer, 2012.   \n[11] Tianwei Ni, Benjamin Eysenbach, and Ruslan Salakhutdinov. Recurrent model-free RL can be a strong baseline for many pomdps. In Proceedings of the International Conference on Machine Learning, Baltimore, MD, 2022.   \n[12] Chris Lu, Yannick Schroecker, Albert Gu, Emilio Parisotto, Jakob N. Foerster, Satinder Singh, and Feryal M. P. Behbahani. Structured state space models for in-context reinforcement learning. In Advances in Neural Information Processing Systems 36, New Orleans, LA, 2023.   \n[13] Jake Grigsby, Linxi Fan, and Yuke Zhu. AMAGO: scalable in-context reinforcement learning for adaptive agents. In Proceedings of the International Conference on Learning Representations, Vienna, Austria, 2024.   \n[14] Albert Gu and Tri Dao. Mamba: Linear-time sequence modeling with selective state spaces. CoRR, abs/2312.00752, 2023.   \n[15] Tianwei Ni, Michel Ma, Benjamin Eysenbach, and Pierre-Luc Bacon. When do Transformers shine in RL? Decoupling memory from credit assignment. In Advances in Neural Information Processing Systems 36, New Orleans, LA, 2023.   \n[16] Fan-Ming Luo, Shengyi Jiang, Yang Yu, Zongzhang Zhang, and Yi-Feng Zhang. Adapt to environment sudden changes by learning a context sensitive policy. In Proceedings of the AAAI Conference on Artificial Intelligence, virtual, 2022.   \n[17] Wenxuan Zhou, Lerrel Pinto, and Abhinav Gupta. Environment probing interaction policies. In Proceedings of the International Conference on Learning Representations, New Orleans, LA, 2019.   \n[18] Dongqi Han, Kenji Doya, and Jun Tani. Variational recurrent models for solving partially observable control tasks. In Proceedings of the International Conference on Learning Representations, Addis Ababa, Ethiopia, 2020.   \n[19] Luisa M. Zintgraf, Kyriacos Shiarlis, Maximilian Igl, Sebastian Schulze, Yarin Gal, Katja Hofmann, and Shimon Whiteson. Varibad: A very good method for bayes-adaptive deep RL via meta-learning. In Proceedings of the International Conference on Learning Representations, Addis Ababa, Ethiopia, 2020.   \n[20] Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor. In Proceedings of the International Conference on Machine Learning, Stockholmsm\u00e4ssan, Sweden, 2018.   \n[21] Xinyue Chen, Che Wang, Zijian Zhou, and Keith W. Ross. Randomized ensembled double Q-learning: Learning fast without a model. In Proceedings of the International Conference on Learning Representations, virtual, 2021.   \n[22] Matthijs T. J. Spaan. Partially Observable Markov Decision Processes, pages 387\u2013414. Springer Berlin Heidelberg, Berlin, Heidelberg, 2012.   \n[23] Zhihan Yang and Hai Nguyen. Recurrent off-policy baselines for memory-based continuous control. CoRR, abs/2110.12628, 2021.   \n[24] Daan Wierstra, Alexander F\u00f6rster, Jan Peters, and J\u00fcrgen Schmidhuber. Solving deep memory POMDPs with recurrent policy gradients. In Proceedings of the International Conference on Artificial Neural Networks, Porto, Portugal, 2007.   \n[25] Yan Duan, John Schulman, Xi Chen, Peter L. Bartlett, Ilya Sutskever, and Pieter Abbeel. RL2: Fast reinforcement learning via slow reinforcement learning. CoRR, abs/1611.02779, 2016.   \n[26] Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of deep networks. In Proceedings of the International Conference on Machine Learning, Sydney, Australia, 2017.   \n[27] Jemin Hwangbo, Joonho Lee, Alexey Dosovitskiy, Dario Bellicoso, Vassilios Tsounis, Vladlen Koltun, and Marco Hutter. Learning agile and dynamic motor skills for legged robots. Science Robotics, 4(26), 2019.   \n[28] Nikita Rudin, David Hoeller, Philipp Reist, and Marco Hutter. Learning to walk in minutes using massively parallel deep reinforcement learning. In Proceedings of the Conference on Robot Learning, London, UK, 2021.   \n[29] Xue Bin Peng, Marcin Andrychowicz, Wojciech Zaremba, and Pieter Abbeel. Sim-to-real transfer of robotic control with dynamics randomization. In Proceedings of the International Conference on Robotics and Automation, Brisbane, Australia, 2018.   \n[30] Oriol Vinyals, Igor Babuschkin, Wojciech M. Czarnecki, Micha\u00ebl Mathieu, Andrew Dudzik, Junyoung Chung, David H. Choi, Richard Powell, Timo Ewalds, Petko Georgiev, Junhyuk Oh, Dan Horgan, Manuel Kroiss, Ivo Danihelka, Aja Huang, Laurent Sifre, Trevor Cai, John P. Agapiou, Max Jaderberg, Alexander Sasha Vezhnevets, R\u00e9mi Leblond, Tobias Pohlen, Valentin Dalibard, David Budden, Yury Sulsky, James Molloy, Tom Le Paine, \u00c7aglar G\u00fcl\u00e7ehre, Ziyu ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "Wang, Tobias Pfaff, Yuhuai Wu, Roman Ring, Dani Yogatama, Dario W\u00fcnsch, Katrina McK", "page_idx": 12}, {"type": "text", "text": "inney, Oliver Smith, Tom Schaul, Timothy P. Lillicrap, Koray Kavukcuoglu, Demis Hassabis, Chris Apps, and David Silver. Grandmaster level in starcraft II using multi-agent reinforcement learning. Nature, 575(7782):350\u2013354, 2019.   \n[31] Steven D. Morad, Ryan Kortvelesy, Matteo Bettini, Stephan Liwicki, and Amanda Prorok. Popgym: Benchmarking partially observable reinforcement learning. In Proceedings of the International Conference on Learning Representations, Kigali, Rwanda, 2023.   \n[32] John Schulman, Sergey Levine, Pieter Abbeel, Michael I. Jordan, and Philipp Moritz. Trust region policy optimization. In Proceedings of the International Conference on Machine Learning, Lille, France, 2015.   \n[33] Wenhao Yu, Jie Tan, C. Karen Liu, and Greg Turk. Preparing for the unknown: Learning a universal policy with online system identification. In Robotics: Science and Systems XIII, Cambridge, MA, 2017.   \n[34] Haotian Fu, Hongyao Tang, Jianye Hao, Chen Chen, Xidong Feng, Dong Li, and Wulong Liu. Towards effective context for meta-reinforcement learning: an approach based on contrastive learning. In Proceedings of the AAAI Conference on Artificial Intelligence, virtual, 2021.   \n[35] Wesley Chung, Somjit Nath, Ajin Joseph, and Martha White. Two-timescale networks for nonlinear value function approximation. In Proceedings of the 7th International Conference on Learning Representations, New Orleans, LA, 2019.   \n[36] Scott Fujimoto, Herke van Hoof, and David Meger. Addressing function approximation error in actor-critic methods. In Proceedings of the International Conference on Machine Learning, Stockholmsm\u00e4ssan, Sweden, 2018.   \n[37] Emanuel Todorov, Tom Erez, and Yuval Tassa. MuJoCo: A physics engine for model-based control. In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems, Vilamoura, Portugal, 2012.   \n[38] Ian Char and Jeff Schneider. PID-Inspired inductive biases for deep reinforcement learning in partially observable control tasks. In Advances in Neural Information Processing Systems 36, New Orleans, LA, 2023.   \n[39] Nicolas Minorsky. Directional stability of automatically steered bodies. Journal of the American Society for Naval Engineers, 34(2):280\u2013309, 1922.   \n[40] Jonas Rothfuss, Dennis Lee, Ignasi Clavera, Tamim Asfour, and Pieter Abbeel. ProMP: Proximal meta-policy search. In Proceedings of the International Conference on Learning Representations, New Orleans, LA, 2019.   \n[41] Xue Bin Peng, Marcin Andrychowicz, Wojciech Zaremba, and Pieter Abbeel. Sim-to-real transfer of robotic control with dynamics randomization. In Proceedings of the International Conference on Robotics and Automation, Brisbane, Australia, 2018.   \n[42] Kate Rakelly, Aurick Zhou, Chelsea Finn, Sergey Levine, and Deirdre Quillen. Efficient offpolicy meta-reinforcement learning via probabilistic context variables. In Proceedings of the International Conference on Machine Learning, Long Beach, CA, 2019.   \n[43] Scott Fujimoto, Wei-Di Chang, Edward J. Smith, Shixiang Gu, Doina Precup, and David Meger. For SALE: state-action representation learning for deep reinforcement learning. In Advances in Neural Information Processing Systems 36, New Orleans, LA, 2023.   \n[44] Tian Xu, Ziniu Li, and Yang Yu. Error bounds of imitating policies and environments. In Advances in Neural Information Processing Systems 33, virtual, 2020.   \n[45] Tian Xu, Ziniu Li, and Yang Yu. Error bounds of imitating policies and environments for reinforcement learning. IEEE Transactions on Pattern Analysis and Machine Intelligence, 44(10):6968\u20136980, 2022.   \n[46] Junyoung Chung, Kyle Kastner, Laurent Dinh, Kratarth Goel, Aaron C. Courville, and Yoshua Bengio. A recurrent latent variable model for sequential data. In Advances in Neural Information Processing Systems 28, Montreal, Canada, 2015.   \n[47] Albert Gu, Karan Goel, and Christopher R\u00e9. Efficiently modeling long sequences with structured state spaces. In Proceedings of the International Conference on Learning Representations, virtual, 2022.   \n[48] Jimmy T. H. Smith, Andrew Warrington, and Scott W. Linderman. Simplified state space layers for sequence modeling. In Proceedings of the International Conference on Learning Representations, Kigali, Rwanda, 2023.   \n[49] Djork-Arn\u00e9 Clevert, Thomas Unterthiner, and Sepp Hochreiter. Fast and accurate deep network learning by exponential linear units (elus). In Proceedings of the International Conference on Learning Representations, San Juan, Puerto Rico, 2016.   \n[50] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. In Proceedings of the International Conference on Learning Representations, New Orleans, LA, 2019.   \n[51] Shengyi Huang, Rousslan Fernand Julien Dossa, Chang Ye, Jeff Braga, Dipam Chakraborty, Kinal Mehta, and Jo\u00e3o G. M. Ara\u00fajo. Cleanrl: High-quality single-flie implementations of deep reinforcement learning algorithms. Journal of Machine Learning Research, 23:274:1\u2013274:18, 2022.   \n[52] Laurens van der Maaten and Geoffrey Hinton. Visualizing data using t-SNE. Journal of Machine Learning Research, 9(86):2579\u20132605, 2008.   \n[53] Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and Wojciech Zaremba. Openai gym. CoRR, abs/1606.01540, 2016. ", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Proof Proposition 1 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "The following proof process is primarily based on the proof approach in [44, 45]. To the best of our knowledge, this is the first time the compounding error analysis method has been applied to study the properties of RNNs. ", "page_idx": 14}, {"type": "text", "text": "Let an RNN network $f^{\\theta}(x_{t},h_{t}):\\mathcal{X}\\times\\mathcal{H}\\to\\mathcal{Y}\\times\\mathcal{H}$ be formalized as: ", "page_idx": 14}, {"type": "equation", "text": "$$\ny_{t},h_{t+1}=f^{\\theta}(x_{t},h_{t}),\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where $\\theta$ is the network parameter, $x_{t}$ is the RNN input, $y_{t}$ is the RNN output, $h_{t}$ and $h_{t+1}$ are the RNN hidden states. For simplicity, we denote ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{y_{t}=f_{y}^{\\theta}(x_{t},h_{t}),}\\\\ {h_{t+1}=f_{h}^{\\theta}(x_{t},h_{t}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "We consider another RNN parameter $\\theta^{\\prime}$ , which is obtained by updating $\\theta$ by one gradient step. We make the following assumptions: ", "page_idx": 14}, {"type": "text", "text": "1. A1 (Lipschitz continuity): $f^{\\theta}$ and $f^{\\theta^{\\prime}}$ both satisfy the Lipschitz continuity. There exist $K_{h}\\in[0,1)^{3}$ and $K_{y}\\in\\mathbb{R}$ satisfying: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{}&{\\|f_{h}^{\\theta}(x,h)-f_{h}^{\\theta}(x,h^{\\prime})\\|\\le K_{h}\\,\\|h-h^{\\prime}\\|\\,,\\ \\forall x\\in\\mathcal{X},h,h^{\\prime}\\in\\mathcal{H},}\\\\ &{}&{\\left\\|f_{h}^{\\theta^{\\prime}}(x,h)-f_{h}^{\\theta^{\\prime}}(x,h^{\\prime})\\right\\|\\le K_{h}\\,\\|h-h^{\\prime}\\|\\,,\\ \\forall x\\in\\mathcal{X},h,h^{\\prime}\\in\\mathcal{H},}\\\\ &{}&{\\|f_{y}^{\\theta}(x,h)-f_{y}^{\\theta}(x,h^{\\prime})\\|\\le K_{y}\\,\\|h-h^{\\prime}\\|\\,,\\ \\forall x\\in\\mathcal{X},h,h^{\\prime}\\in\\mathcal{H},}\\\\ &{}&{\\left\\|f_{y}^{\\theta^{\\prime}}(x,h)-f_{y}^{\\theta^{\\prime}}(x,h^{\\prime})\\right\\|\\le K_{y}\\,\\|h-h^{\\prime}\\|\\,,\\ \\forall x\\in\\mathcal{X},h,h^{\\prime}\\in\\mathcal{H}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "2. A2 (one-step output difference constraint): The output differences of the RNN parameterized by $\\theta$ and $\\theta^{\\prime}$ are bounded by a constant $\\epsilon\\in\\mathbb{R}$ : ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\left\\|f_{h}^{\\theta}(x,h)-f_{h}^{\\theta^{\\prime}}(x,h)\\right\\|\\le\\epsilon,\\;\\;\\forall x\\in\\mathcal{X},h\\in\\mathcal{H},}\\\\ {\\left\\|f_{y}^{\\theta}(x,h)-f_{y}^{\\theta^{\\prime}}(x,h)\\right\\|\\le\\epsilon,\\;\\;\\forall x\\in\\mathcal{X},h\\in\\mathcal{H}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "With the above assumptions, we now prove Proposition 1 in following. ", "page_idx": 14}, {"type": "text", "text": "Proof. $\\forall x\\in\\mathcal{X},h,h^{\\prime}\\in\\mathcal{H}$ , we have ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{~~~~\\left|\\left|f_{h}^{\\theta^{\\prime}}(x,h^{\\prime})-f_{h}^{\\theta}(x,h)\\right|\\right|}\\\\ &{=\\left|\\left|f_{h}^{\\theta^{\\prime}}(x,h^{\\prime})-f_{h}^{\\theta^{\\prime}}(x,h)+f_{h}^{\\theta^{\\prime}}(x,h)-f_{h}^{\\theta}(x,h)\\right|\\right|}\\\\ &{\\le\\left|\\left|f_{h}^{\\theta^{\\prime}}(x,h^{\\prime})-f_{h}^{\\theta^{\\prime}}(x,h)\\right|\\right|+\\left|\\left|f_{h}^{\\theta^{\\prime}}(x,h)-f_{h}^{\\theta}(x,h)\\right|\\right|}\\\\ &{\\overset{\\mathrm{Eq.~}}{\\le}K_{h}\\left\\|h-h^{\\prime}\\right\\|+\\left|\\left|f_{h}^{\\theta^{\\prime}}(x,h)-f_{h}^{\\theta}(x,h)\\right|\\right|}\\\\ &{\\overset{\\mathrm{Eq.~}}{\\le}K_{h}\\left\\|h-h^{\\prime}\\right\\|+\\epsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Similarly, $\\forall x\\in\\mathcal{X},h,h^{\\prime}\\in\\mathcal{H}$ , we also have ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\left\\|f_{y}^{\\theta^{\\prime}}(x,h^{\\prime})-f_{y}^{\\theta}(x,h)\\right\\|\\le K_{y}\\left\\|h-h^{\\prime}\\right\\|+\\epsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Given an input sequence $\\{x_{0},x_{1},\\dots,x_{T}\\}$ with sequence length $T+1$ and an initial hidden state $h_{0}$ , let the output and hidden state sequences produced by $f^{\\theta}$ be $\\{y_{0},y_{1},\\dots,y_{T}\\}$ and $\\{h_{1},\\dots,h_{T+1}\\}$ . ", "page_idx": 14}, {"type": "text", "text": "Similarly, let the output and hidden state sequences produced by $f^{\\theta^{\\prime}}$ be $\\{y_{0}^{\\prime},y_{1}^{\\prime},\\ldots,y_{T}^{\\prime}\\}$ and $\\{h_{1}^{\\prime},\\dots,h_{T+1}^{\\prime}\\}$ . We can measure the upper bound of the hidden state differences between $f^{\\theta}$ and $f^{\\theta^{\\prime}}$ . ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\|h_{1}-h_{1}^{\\prime}\\|=\\Big\\|f_{h}^{\\theta}(x_{0},h_{0})-f_{h}^{\\theta^{\\prime}}(x_{0},h_{0})\\Big\\|^{\\frac{\\mathrm{Eq.}(\\mathrm{A}2.1)}{\\leq}\\epsilon.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|h_{2}-h_{2}^{\\prime}\\|=\\Big\\|f_{h}^{\\theta}(x_{1},h_{1})-f_{h}^{\\theta^{\\prime}}(x_{1},h_{1}^{\\prime})\\Big\\|}\\\\ &{\\qquad\\qquad\\stackrel{\\mathrm{Eq.}(2)}{\\le}K_{h}\\,\\|h_{1}-h_{1}^{\\prime}\\|+\\epsilon}\\\\ &{\\qquad\\qquad\\stackrel{\\mathrm{Eq.}(4)}{\\le}K_{h}\\epsilon+\\epsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Similarly, we have ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\|h_{3}-h_{3}^{\\prime}\\|=\\Big\\|f_{h}^{\\theta}(x_{2},h_{2})-f_{h}^{\\theta^{\\prime}}(x_{2},h_{2}^{\\prime})\\Big\\|\\leq\\displaystyle\\sum_{i=0}^{2}K_{h}^{i}\\epsilon.}\\\\ {\\displaystyle\\|h_{t}-h_{t}^{\\prime}\\|=\\Big\\|f_{h}^{\\theta}(x_{t-1},h_{t-1})-f_{h}^{\\theta^{\\prime}}(x_{t-1},h_{t-1}^{\\prime})\\Big\\|\\leq\\displaystyle\\sum_{i=0}^{t-1}K_{h}^{i}\\epsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Then we can derive the output difference at the $t$ -th step $(t>0)$ ): ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|y_{t}-y_{t}^{\\prime}\\|=\\Big\\|f_{y}^{\\theta}(x_{t},h_{t})-f_{y}^{\\theta^{\\prime}}(x_{t},h_{t}^{\\prime})\\Big\\|}\\\\ &{\\qquad\\qquad\\stackrel{\\mathrm{Eq.}(3)}{\\le}K_{y}\\,\\|h_{t}-h_{t}^{\\prime}\\|+\\epsilon}\\\\ &{\\qquad\\qquad\\stackrel{\\mathrm{Eq.}(7)}{\\le}K_{y}\\displaystyle\\sum_{i=0}^{t-1}K_{h}^{i}\\epsilon+\\epsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "As $0\\leq K_{h}<1$ , Eq. (8) can be further simplified to ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\|y_{t}-y_{t}^{\\prime}\\|\\leq K_{y}\\frac{1-K_{h}^{t}}{1-K_{h}}\\epsilon+\\epsilon.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Eq. (9) also holds for $t=0$ , i.e., $\\|y_{0}-y_{0}^{\\prime}\\|\\leq\\epsilon$ . Thus, we finally have ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\|y_{t}-y_{t}^{\\prime}\\|\\leq K_{y}\\frac{1-K_{h}^{t}}{1-K_{h}}\\epsilon+\\epsilon,\\;\\;\\;\\forall t\\geq0.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "B Average Output Differences Bound ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Proposition 2. Following the setting in Proposition $^{\\,I}$ , the average output difference satisfies ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\frac{1}{t+1}\\sum_{i=0}^{t}\\|y_{t}-y_{t}^{\\prime}\\|\\le\\frac{K_{y}}{1-K_{h}}\\epsilon+\\epsilon-K_{y}\\frac{1-K_{h}^{t+1}}{(1+t)(1-K_{h})^{2}}\\epsilon,~~\\forall t\\ge0.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Proof. From Eq. (10), we have ", "page_idx": 15}, {"type": "text", "text": "As ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{\\|y_{t}-y_{t}^{\\prime}\\|\\le\\frac{K_{y}}{1-K_{h}}\\epsilon+\\epsilon-K_{y}\\frac{\\epsilon}{1-K_{h}}K_{h}^{t}.}}\\\\ &{}&\\\\ &{}&{\\frac{1}{t+1}\\displaystyle\\sum_{i=0}^{t}K_{h}^{i}}\\\\ &{}&{\\displaystyle=\\frac{1-K_{h}^{t+1}}{(1-K_{h})(t+1)},}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Input: Environment $E$ ; Policy $\\pi_{\\phi}$ ; Ensemble critic $Q_{\\psi}$ ; Target ensemble critic $Q_{\\psi^{\\prime}}$ ; Batch size   \n$B S$ ; Entropy coefficient $\\alpha$ ; Target entropy $T E$ ;   \n1 Initialize context-encoder-specific policy optimizer and critic optimizer;   \n2 Initialize an empty replay buffer $B\\gets\\emptyset$ and trajectory $\\tau\\gets\\emptyset$ ;   \n3 Initial context $\\hat{a}\\gets0,\\hat{o}\\gets0,\\hat{r}\\gets0$ ;   \n4 Initial hidden state $h\\leftarrow0$ ;   \n5 $t\\leftarrow0$ ;   \n6 Obtain initial observation $O_{0}$ from $E$ ;   \n7 while $t<m a x.$ _step do   \n8 $a_{t},h\\gets\\pi_{\\phi}(o_{t},\\hat{o},\\hat{a},\\hat{r},h)$ ;   \n9 Execute $a_{t}$ to $E$ ;   \n10 Observe new observation $o_{t+1}$ , reward $r_{t}$ , and terminal signal $d_{t}$ ;   \n11 Add $\\left(o_{t},a_{t},r_{t},o_{t+1}\\right)$ to $\\tau$ ;   \n12 Update context data $\\hat{a}\\gets a_{t},\\hat{o}\\gets o_{t},\\hat{r}\\gets r_{t}$ ;   \n13 if $d_{t}$ is True then   \n14 Insert $\\tau$ to $\\boldsymbol{\\mathrm{\\Delta}}\\boldsymbol{\\mathrm{\\Omega}}^{\\beta}$ ;   \n15 $\\tau\\gets\\emptyset$ ;   \n16 Reset context $\\hat{a}\\gets0,\\hat{o}\\gets0,\\hat{r}\\gets0;$ ;   \n17 Reset hidden state $h\\leftarrow0$ ;   \n18 Reset $E$ , obtain new observation $o_{t+1}$ from $E$ ;   \n19 Sample data batch $D=\\{\\tau_{i}\\mid i=1,2,\\ldots\\}$ with data count $\\textstyle\\sum_{i}|\\tau_{i}|\\geq B S$ from $\\boldsymbol{\\mathrm{\\Delta}}\\boldsymbol{\\mathrm{\\Omega}}_{\\boldsymbol{B}}$ ;   \n20 Obtain REDQ [21] critic loss with $Q_{\\psi},\\,Q_{\\psi^{\\prime}},$ , $\\alpha$ , and $D$ follo w ing Eq. (19);   \n21 Update $\\psi$ with the critic optimizer via one-step gradient descent;   \n22 Softly assign $\\psi$ to $\\psi^{\\prime}$ ;   \n23 if $t\\%2=0$ then   \n24 Obtain REDQ [21] policy loss with $\\pi_{\\phi},\\alpha$ , and $D$ following Eq. (20);   \n25 Update $\\phi$ with the policy optimizer via one-step gradient descent;   \n26 Automatically tune $\\alpha$ to control the policy entropy to $T E$ ;   \n27 $t\\gets t+1$ ; ", "page_idx": 16}, {"type": "text", "text": "we can get ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\quad\\displaystyle\\frac{1}{t+1}\\sum_{i=0}^{t}\\|y_{i}-y_{i}^{\\prime}\\|}\\\\ &{\\le\\displaystyle\\frac{K_{y}}{1-K_{h}}\\epsilon+\\epsilon-K_{y}\\frac{\\epsilon}{1-K_{h}}\\frac{1}{t+1}\\sum_{i=0}^{t}K_{h}^{t}}\\\\ &{=\\displaystyle\\frac{K_{y}}{1-K_{h}}\\epsilon+\\epsilon-K_{y}\\frac{1-K_{h}^{t+1}}{(1-K_{h})^{2}(t+1)}\\epsilon.}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "C Algorithmic Details ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "C.1 Detailed Procedure of RESeL ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "The training procedure of RESeL is summarized in Algorithm 1. In the following part, we elaborate on the form of REDQ [21] losses in the setting of recurrent RL. Let the critic $\\bar{Q_{\\psi}}\\bar{(}o,a,\\hat{o},\\hat{a},\\hat{r},h_{Q}\\rangle:$ $\\mathcal{O}\\times\\mathcal{A}\\times\\mathcal{O}\\times\\mathcal{A}\\times\\mathbb{R}\\to\\mathbb{R}^{8}\\times\\mathcal{H}$ be a mapping function from the current observation $o$ and action $a$ , last-step observation $\\hat{o}$ , action $\\hat{a}$ , reward $\\hat{r}$ , and hidden state $h_{Q}$ to a 8-dim Q-value vector and the next hidden state $h_{Q}$ . The target critic $Q_{\\psi^{\\prime}}(o,a,\\hat{o},\\hat{a},\\hat{r},h_{Q})$ shares the same architecture to $Q_{\\psi}$ but parameterized by $\\psi^{\\prime}$ . The policy $\\pi(o,\\hat{o},\\hat{a},\\hat{r},h_{\\pi}):\\mathcal{O}\\times\\mathcal{A}\\times\\mathcal{O}\\times\\mathcal{A}\\times\\mathbb{R}\\to\\Delta_{A}\\times\\mathcal{H}$ is a mapping function from the current observation $o$ , last-step observation $\\hat{o}$ , action $\\hat{a}$ , reward $\\hat{r}$ , and hidden state $h_{\\pi}$ to an action distribution and the next hidden state $h_{\\pi}$ . ", "page_idx": 16}, {"type": "text", "text": "Given a batch of data $D=\\{\\tau_{i}\\mid i=1,2,\\ldots\\}$ , where $\\tau_{i}=\\{o_{0}^{i},a_{0}^{i},r_{0}^{i},o_{1}^{i},a_{1}^{i},r_{1}^{i},o_{2}^{i},\\dots,r_{L_{i}-1}^{i},o_{L_{i}}^{i}\\}$ is the $i$ -th trajectory in the batch, $L_{i}$ is the trajectory length. We then re-formalize $\\tau_{i}$ to tensorized data: $\\mathbf{o}_{i}\\in\\mathcal{O}^{L_{i}},\\bar{\\mathbf{a}_{i}}\\in\\bar{\\mathcal{A}}^{L_{i}},\\hat{\\mathbf{o}}_{i}\\in\\mathcal{O}^{L_{i}},\\hat{\\mathbf{a}}_{i}\\in\\mathcal{A}^{L_{i}},\\mathbf{\\bar{r}}_{i}\\in\\bar{\\mathbb{R}}^{L_{i}},\\bar{\\mathbf{r}}_{i}\\in\\mathbb{R}^{L_{i}}$ , where, for example, $\\mathbf{o}_{i}^{t}\\in\\mathcal{O}=o_{t}^{i}$ is the $t$ -th row of $\\mathbf{o}_{i}$ . $\\hat{\\bf o}_{i}^{0}={\\bf0},\\hat{\\bf a}_{i}^{0}={\\bf0},\\hat{\\bf r}_{i}^{0}=0$ as the there is no last step at the first time step. The policy receives the tensorized data and outputs action distributions. For simplicity, we formalize the outputs of the policy as the action sampled from the action distribution and its logarithm sampling probability: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\tilde{\\mathbf{a}}_{i},\\log\\tilde{\\mathbf{p}}_{i},h_{\\pi}^{L_{i}}\\xleftarrow{}\\pi_{\\phi}(\\mathbf{o}_{i},\\hat{\\mathbf{o}}_{i},\\hat{\\mathbf{a}}_{i},\\hat{\\mathbf{r}}_{i},\\mathbf{0}),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\widetilde{\\mathbf{a}}_{i}\\in\\mathcal{A}^{L_{i}},\\log\\widetilde{\\mathbf{p}}_{i}\\in\\mathbb{R}^{L_{i}},h_{\\pi}^{L_{i}}\\in\\mathcal{H}$ are obtained autoregressively: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\tilde{\\mathbf{a}}_{i}^{0},\\log\\tilde{\\mathbf{p}}_{i}^{0},h_{\\pi}^{1}\\leftarrow\\pi_{\\phi}(\\mathbf{o}_{i}^{0},\\hat{\\mathbf{o}}_{i}^{0},\\hat{\\mathbf{a}}_{i}^{0},\\hat{\\mathbf{r}}_{i}^{0},\\mathbf{0}),}\\\\ &{\\tilde{\\mathbf{a}}_{i}^{1},\\log\\tilde{\\mathbf{p}}_{i}^{1},h_{\\pi}^{2}\\leftarrow\\pi_{\\phi}(\\mathbf{o}_{i}^{1},\\hat{\\mathbf{o}}_{i}^{1},\\hat{\\mathbf{a}}_{i}^{1},\\hat{\\mathbf{r}}_{i}^{1},h_{\\pi}^{1}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "equation", "text": "$$\n\\tilde{\\mathbf{a}}_{i}^{t},\\log\\tilde{\\mathbf{p}}_{i}^{t},h_{\\pi}^{t+1}\\xleftarrow{}\\pi_{\\phi}(\\mathbf{o}_{i}^{t},\\hat{\\mathbf{o}}_{i}^{t},\\hat{\\mathbf{a}}_{i}^{t},\\hat{\\mathbf{r}}_{i}^{t},h_{\\pi}^{t}).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Similarly, the critic model receives the tensorized data and outputs 8-dim Q-values as follows: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\tilde{\\mathbf{Q}}_{i},h_{Q}^{L_{i}}\\leftarrow Q_{\\psi}(\\mathbf{o}_{i},\\mathbf{a}_{i},\\hat{\\mathbf{o}}_{i},\\hat{\\mathbf{a}}_{i},\\hat{\\mathbf{r}}_{i},\\mathbf{0}),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\tilde{\\mathbf{Q}}_{i}\\in\\mathbb{R}^{L_{i}\\times8},h_{\\pi}^{L_{i}}\\in\\mathcal{H}$ are obtained autoregressively: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{Q}_{i}^{0},h_{Q}^{1}\\leftarrow Q_{\\psi}(\\mathbf{o}_{i}^{0},\\mathbf{a}_{i}^{0},\\hat{\\mathbf{o}}_{i}^{0},\\hat{\\mathbf{a}}_{i}^{0},\\hat{\\mathbf{r}}_{i}^{0},\\mathbf{0}),}\\\\ &{\\mathbf{Q}_{i}^{1},h_{Q}^{2}\\leftarrow Q_{\\psi}(\\mathbf{o}_{i}^{1},\\mathbf{a}_{i}^{1},\\hat{\\mathbf{o}}_{i}^{1},\\hat{\\mathbf{a}}_{i}^{1},\\hat{\\mathbf{r}}_{i}^{1},h_{Q}^{1}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{Q}_{i}^{t},h_{Q}^{t+1}\\gets Q_{\\psi}(\\mathbf{o}_{i}^{t},\\mathbf{a}_{i}^{t},\\hat{\\mathbf{o}}_{i}^{t},\\hat{\\mathbf{a}}_{i}^{t},\\hat{\\mathbf{r}}_{i}^{t},h_{Q}^{t}).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Note that, in Mamba, the process demonstrated in Eq. (13) and Eq. (15) can be parallelized. ", "page_idx": 17}, {"type": "text", "text": "In order to compute the target value, we first extend the tensorized data ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{o}_{i}^{+}\\leftarrow\\{\\mathbf{o}_{i},\\mathbf{o}_{i}^{L_{i}}\\},}\\\\ &{\\hat{\\mathbf{o}}_{i}^{+}\\leftarrow\\{\\hat{\\mathbf{o}}_{i},\\mathbf{o}_{i}^{L_{i}-1}\\},}\\\\ &{\\hat{\\mathbf{a}}_{i}^{+}\\leftarrow\\{\\hat{\\mathbf{a}}_{i},\\mathbf{a}_{i}^{L_{i}-1}\\},}\\\\ &{\\hat{\\mathbf{r}}_{i}^{+}\\leftarrow\\{\\hat{\\mathbf{r}}_{i},\\mathbf{r}_{i}^{L_{i}-1}\\},}\\\\ &{\\mathbf{r}_{i}^{+}\\leftarrow\\{0,\\mathbf{r}_{i}\\},}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\mathbf{o}_{i}^{L_{i}}$ is the next observation of the last step, $\\mathbf{o}_{i}^{L_{i}-1},\\,\\mathbf{a}_{i}^{L_{i}-1}$ , and $\\mathbf{r}_{i}^{L_{i}-1}$ are the observation, action, and reward at the last step, respectively. ", "page_idx": 17}, {"type": "text", "text": "The target value can be obtained: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\tilde{\\mathbf{a}}_{\\mathrm{taget},i}^{+},\\log\\tilde{\\mathbf{p}}_{\\mathrm{taget},i},h_{\\pi}^{L_{i}+1}\\gets\\pi_{\\phi}(\\mathbf{o}_{i}^{+},\\hat{\\mathbf{o}}_{i}^{+},\\hat{\\mathbf{a}}_{i}^{+},\\hat{\\mathbf{r}}_{i}^{+},\\mathbf{0}),}\\\\ &{\\qquad\\qquad\\qquad\\tilde{\\mathbf{Q}}_{\\mathrm{taget},i}^{+},h_{Q}^{L_{i}+1}\\gets\\mathbf{r}_{i}^{+}+\\gamma\\left(Q_{\\psi^{\\prime}}\\left(\\mathbf{o}_{i}^{+},\\tilde{\\mathbf{a}}_{\\mathrm{taget},i}^{+},\\hat{\\mathbf{o}}_{i}^{+},\\hat{\\mathbf{a}}_{i}^{+},\\hat{\\mathbf{r}}_{i}^{+},\\mathbf{0}\\right)-\\alpha\\log\\tilde{\\mathbf{p}}_{\\mathrm{taget},i}\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Then, we sample a set $\\mathcal{M}$ of 2 distinct indices from $\\{0,1,...,7\\}$ . Let $\\tilde{\\mathbf{Q}}_{\\mathrm{target},i}^{+,j}$ be the $j$ -th column of $\\tilde{\\mathbf{Q}}_{\\mathrm{target},i}^{+}$ . We choose the minimum value from $\\{\\tilde{\\mathbf{Q}}_{\\mathrm{target},i}^{+,j}|j\\in\\mathcal{M}\\}$ : ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbf{Q}_{\\mathrm{target},i}^{+}=\\operatorname*{min}_{j\\in\\mathcal{M}}\\ \\tilde{\\mathbf{Q}}_{\\mathrm{target},i}^{+,j},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\mathbf{Q}_{\\mathrm{target},i}^{+}\\in\\mathbb{R}^{L_{i}+1}$ . We then let $y_{i}$ be the last $L_{i}$ rows of $\\mathbf{Q}_{\\mathrm{target},i}^{+}$ : ", "page_idx": 17}, {"type": "equation", "text": "$$\ny_{i}=\\mathbf{Q}_{\\mathrm{target},i}^{+}[1:L_{i}+1].\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "The REDQ critic loss can be written as ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathcal{L}_{Q}=\\frac{1}{\\sum_{i=1}^{|D|}L_{i}}\\sum_{i=1}^{|D|}\\left\\|y_{i}-\\tilde{\\mathbf{Q}}_{i}\\right\\|_{2}^{2},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\tilde{\\mathbf{Q}}_{i}$ is obtained following Eq. (14), $\\Vert\\cdot\\Vert_{2}$ denotes L2-norm. As for the policy loss, we first obtain $\\tilde{\\mathbf{a}}_{i}$ and $\\log{\\tilde{\\mathbf{p}}_{i}}$ via Eq. (12). We can get the critic value $\\tilde{\\mathbf{Q}}_{i}^{\\star}$ corresponding to the new action $\\tilde{\\mathbf{a}}_{i}$ following Eq. (14): ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\tilde{\\mathbf{Q}}_{i}^{\\star},h_{Q}^{L_{i}}\\leftarrow Q_{\\psi}(\\mathbf{o}_{i},\\tilde{\\mathbf{a}}_{i},\\hat{\\mathbf{o}}_{i},\\hat{\\mathbf{a}}_{i},\\hat{\\mathbf{r}}_{i},\\mathbf{0}).\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We can get the policy loss: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\pi}=-\\frac{1}{8\\sum_{i=1}^{|D|}L_{i}}\\mathrm{sum}\\left(\\tilde{\\mathbf{Q}}_{i}^{\\star}-\\alpha\\log\\tilde{\\mathbf{p}}\\right),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where denominator of 8 results from our ensemble size being 8, requiring the averaging of the outputs of the eight critics to compute the policy loss. ", "page_idx": 18}, {"type": "text", "text": "C.2 Sample Stacked Batch from Replay Buffer ", "text_level": 1, "page_idx": 18}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/c5365da917fd9b320a371002da9a3ad49d307f64ec9c9341540cbeb234286f96.jpg", "img_caption": ["Figure 13: Illustrating for sampling a stacked batch from replay buffer. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "In RESeL, we collect several full-length trajectories from the replay buffer as a batch for policy training. However, in many environments, trajectory lengths could vary a lot, making it impossible to directly concatenate them into a single tensor for subsequent computations. Typically, we pad trajectories to the same length with zeros, resulting in a tensor of shape $[B,L,C]$ , where $B$ is the batch size, $L$ is the sequence length, and $C$ is the tensor dimension. Additionally, we introduce a mask tensor of shape $[B,L,1]$ , where elements equal to 1 indicate valid data, and 0s indicate padding. We then use a modified mean operation: ", "page_idx": 18}, {"type": "equation", "text": "$$\nm a s k\\_m e a n(x,m a s k)=\\sum(x\\times m a s k)/s u m(m a s k),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "to prevent padding from biasing the mean. This approach allows for GPU parallelization of all trajectories in the batch, though calculations for padded 0s are redundant. If trajectory lengths vary greatly, the proportion of padding can become significant, severely reducing computational efficiency, even resulting in out-of-GPU-memory. For instance, in a batch with one trajectory of length 1000 and ten trajectories of length 50, there would be 1500 valid data points and 9500 padded points, substantially lowering efficiency. ", "page_idx": 18}, {"type": "text", "text": "To address this issue, we adopt the batch sampling method illustrated in Fig. 13, stacking shorter trajectories along the time dimension. This requires the RNN to accept a hidden reset flag, which we insert at the beginning of each trajectory to reset the hidden state. Additionally, we insert $K$ steps of zero data between trajectories to prevent convolution1d from mixing adjacent trajectory data, as shown in Fig. 13. To implement this sampling strategy, we modify the original Mamba implementation4, adding an input denoting hidden reset flag. When occurring the hidden reset flag with value of 1, the hidden state will be reset to zero. The introduction of hidden reset flag will not influence the parallelizability of Mamba but can avoid potential redundant computation. ", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "D Experiment Details ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "D.1 Descriptions of the Environments ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "D.1.1 Classic POMDP Tasks ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "These classic POMDP tasks5 are developed using PyBullet locomotion environments. The environments include AntBLT, HopperBLT, WalkerBLT, and HalfCheetahBLT. Partial observability is introduced by obscuring parts of the observation. For each environment, two types of tasks are created: one where only joint velocity is observable and another where only joint position is observable. We denote these as \"-V\" for joint velocity information and \"-P\" for joint position information. In such settings, the agent must reconstruct the missing information, whether velocity or position, based on historical observations. ", "page_idx": 19}, {"type": "text", "text": "D.1.2 Dynamics-Randomized Tasks ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "The Dynamics-Randomized Tasks6 environments are based on the MuJoCo environment [37], following the training settings in [16]. In these tasks, the environment\u2019s gravity is altered using an open-source tool7. The gravity is sampled as following procedure: We first sample a value $a\\in\\mathbb{R}$ uniformly from $[-3,3]$ . Let the original gravity in MuJoCo be $g_{\\mathrm{origin}}$ , the new gravity is obtained as: ", "page_idx": 19}, {"type": "equation", "text": "$$\ng_{\\mathrm{new}}=1.5^{a}g_{\\mathrm{origin}}.\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Before training, we sample 60 values of $g_{\\mathrm{new}}$ . Of these, 40 are used for training and 20 for testing the learned policies. In these tasks, the agent must infer the gravity based on historical interactions with the environment and adjust its policy accordingly. ", "page_idx": 19}, {"type": "text", "text": "D.1.3 Classic meta-RL Tasks ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "These meta-RL tasks8 have been utilized in various meta-RL algorithms [42, 19]. Specifically, in these tasks, the reward function is modified in the Ant and HalfCheetah MuJoCo environments. In the \u2019Vel\u2019 tasks, the agent is rewarded based on its proximity to a desired velocity. In the \u2019Dir\u2019 tasks, the agent must move in a desired direction. The desired velocity and direction information are reflected only in the reward function. In the Wind environment, an external, unobservable disturbance factor (wind speed) influences state transitions. The agent must navigate to a goal under varying wind conditions. In these tasks, the agent uses past interaction data, including rewards, to infer the underlying reward functions or transition disturbance factors. ", "page_idx": 19}, {"type": "text", "text": "D.1.4 Key-to-Door ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "The Key-to-Door environment9 consists of three phases. In the first phase, the agent spawns at a random location on the map, and a key will appear at another location on the map, the agent can touch the key. In the second phase, the agent will have the task of picking up apples. In the third phase, if the agent has touched the key in the first phase, it can receive a reward; otherwise, it cannot. ", "page_idx": 19}, {"type": "text", "text": "The action space is four-dimensional, encompassing the actions of moving forward, backward, left and right. The reward structure is dual-faceted: it includes rewards garnered from the collection of apples during the second phase and the ultimate reward obtained upon door opening in the final phase. The transition function is defined by the positional changes of the agent subsequent to the execution of any of the four actions, with stage transitions dictated by an intrinsic timer, which facilitates a shift to the subsequent stage upon the expiration of the countdown. The optimal policy should locate and touch the key in the initial phase, which is served for the final reward acquisition upon door opening in the third phase, while maximizing apple collection during the second phase. The credit assignment length in Fig. 10 denotes the time period staying at the second stage. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "D.2 Baselines ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "In the section, we give brief introductions of the baseline algorithms we comparing in our work. We first introduce the baselines in the classic POMDP tasks Fig. 7. ", "page_idx": 20}, {"type": "text", "text": "\u2022 Variational Recurrent Model (VRM) [18]. VRM utilizes a variational RNN [46] to learn a transition model, and feeding the RNN hidden state into an MLP policy to obtain the action.   \n\u2022 GPIDE (GPIDE-ESS) [38]. Inspired by the PID controller\u2019s success, which relies on summing and derivative to accumulate information over time, GPIDE propose two history encoding architectures: one using direct PID features and another extending these principles for general control tasks by consisting of a number of \u201cheads\u201d for accumulating information about the history.   \n\u2022 Recurrent Model-free RL (MF-RNN) [11]. MF-RNN proposes several design considerations in recurrent off-policy RL methods. MF-RNN analyzed the best choice concerning the context length, RL algorithm, whether sharing the RNN between critic and policy networks, etc. We used the best results reported in [11] in Fig. 7. ", "page_idx": 20}, {"type": "text", "text": "The baseline results in Fig. 7 come from two sources: (1) The evaluation results provided in $[11]^{10}$ , including MF-RNN, PPO-GRU, SAC-MLP, TD3-MLP, VRM, and A2C-GRU; (2) The results provided in $[38]^{11}$ , consisting GPIDE-ESS and SAC-Transformer. ", "page_idx": 20}, {"type": "text", "text": "The baselines compared in Fig. 8 are elaborated as follows: ", "page_idx": 20}, {"type": "text", "text": "\u2022 Environment Probing Interaction Policy (EPI) [17]. This baseline aims to extracting features from the transition. A context encoder is obtained to enable a transition model to predict the future state through minimizing the following loss: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{CE}}^{\\mathrm{DM}}=\\mathbb{E}_{z_{i}^{t},s_{t},a_{t},s_{t+1}}\\left\\|T(s_{t},a_{t},z_{i}^{t};\\theta_{T})+s_{t}-s_{t+1}\\right\\|_{2}^{2},\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $T(s_{t},a_{t},z_{i}^{t};\\theta_{T})$ is a transition model parameterized by $\\theta_{T},\\,z_{i}^{t}$ is the output of the context encoder. In addition, the transition model is also optimized as described in Eq. (22). ", "page_idx": 20}, {"type": "text", "text": "\u2022 Online system identification (OSI) [33]. OSI is structured by a context encoder which is used to predict the parameters of the environment dynamics. The architecture of OSI is the same as Fig. 1. OSI adopts a supervised learning loss function to train the context encoder: $\\mathcal{L}_{\\mathrm{CE}}^{\\mathrm{OSI}}=\\mathbb{E}_{z_{i}^{t}}\\left\\|z_{i}^{t}-c_{i}\\right\\|_{2}^{2}$ , where $c_{i}$ is the dynamics parameter such as gravity, $z_{i}^{t}$ is the embedded context.   \n\u2022 Environment sensitive contextual policy learning (ESCP) $[16]^{12}$ . This approach is design to improve both the the robustness and sensitivity context encoder, based on a contrastive loss. In order to improve the policy robustness in environment where dynamics sudden changes could occurs, ESCP truncate the memory length in both training and deployment phase.   \n\u2022 Proximal Meta-Policy Search (ProMP) [40]13. This method learns a pretrained policy model in training phase and finetune it in deployment phase with few gradient steps. The reported performance of ProMP is obtained by the policies after finetuning.   \n\u2022 Soft actor-critic with MLP network (SAC-MLP) [20]. An implementation of the soft actor-critic algorithm with MLP policy and critic models.   \n\u2022 Probabilistic embeddings for actor-critic RL (PEARL) [42]. The context encoder of PEARL is trained to make a precise prediction of the action-value function while maximize entropy. The loss of the context encoder can be written as: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{CE}}^{\\mathrm{PEARL}}=\\mathcal{L}_{\\mathrm{critic}}+\\mathrm{D}_{\\mathrm{KL}}[p(z\\ensuremath{\\mathrm{~|~}}\\tau)\\ensuremath{\\mathrm{~}}\\|\\mathcal{N}(0,I)]\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $\\mathcal{L}_{\\mathrm{critic}}$ is the critic loss in SAC. $D_{\\mathrm{KL}}[p(z|\\tau)\\parallel\\mathcal{N}(0,I)]$ denotes the KL divergence between distribution of the embedded context and a standard Gaussian distribution. In $p(z|\\tau)$ , $z$ denotes the output of the context encoder based on a given trajectory. PEARL is implemented with the officially provided codes14. ", "page_idx": 21}, {"type": "text", "text": "\u2022 SAC-GRU. This is an upgrade version of SAC with GRU models. It use standard SAC algorithm to optimize an RNN policy. ", "page_idx": 21}, {"type": "text", "text": "The baselines compared in Fig. 9: ", "page_idx": 21}, {"type": "text", "text": "\u2022 $R L^{2}$ [25]. $\\mathrm{RL^{2}}$ is a meta-RL algorithm that trains a meta-learner to efficiently adapt to new tasks by leveraging past experiences. It involves two nested loops: an inner loop where the meta-learner interacts with the environment to learn task-specific policies, and an outer loop where the meta-learner updates its parameters based on the performance across multiple tasks. The inner loop is accomplished by an RNN. \u2022 VariBad [19]. VariBAD (Variational Bayes for Adaptive Deep RL) is also a meta-RL method that uses variational inference to enable fast adaptation to new tasks. It employs a Bayesian approach to meta-learning, inferring task-specific posterior distributions over the parameters of the policy and value function. Specifically, it first learns an RNN variational auto-encoder to extract the sequential features of the dynamics or tasks. The policy then receives the current state and the output of the context encoder to make adaptive decisions. ", "page_idx": 21}, {"type": "text", "text": "The results of the baselines in Fig. 9 are sourced from [11]. ", "page_idx": 21}, {"type": "text", "text": "MF-GPT [15], i.e. the baseline in Fig. 10, denotes to train a Transformer network, i.e. GPT-2, to solve the memory-based tasks. The baseline result of the baselines in Fig. 10 are from [15]15. ", "page_idx": 21}, {"type": "text", "text": "D.3 Implementation Details ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "D.3.1 State Space Models ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "In our implementation, we use Mamba to form the context encoder, as it supports processing sequences in parallel. Therefore, we will first introduce state space models and Mamba before discussing the network architecture. ", "page_idx": 21}, {"type": "text", "text": "State Space Model (SSM) is a sequential model [47, 14, 48] commonly used to model dynamic systems. The discrete version of an SSM can be expressed as: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{h_{t}=\\overline{{\\mathbf{A}}}h_{t-1}+\\overline{{\\mathbf{B}}}x_{t},\\ \\ y_{t}=\\mathbf{C}h_{t},}\\\\ &{\\overline{{\\mathbf{A}}}=\\exp(\\Delta\\mathbf{A}),\\ \\ \\ \\overline{{\\mathbf{B}}}=(\\Delta\\mathbf{A})^{-1}(\\exp(\\Delta\\mathbf{A})-I)\\cdot\\Delta\\mathbf{B},}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "where $\\Delta$ , A, $\\mathbf{B}$ , and $\\mathbf{C}$ are parameters; $x_{t},y_{t}$ , and $h_{t}$ represent the input, output, and hidden state at time step $t$ , respectively. $\\overline{{\\mathbf{A}}}$ and $\\overline{{\\bf B}}$ are derived from $\\Delta$ , A, and $\\mathbf{B}$ . ", "page_idx": 21}, {"type": "text", "text": "Mamba [14] is an RNN variant that integrates SSM layers to capture temporal information. In Mamba, the parameters $\\Delta,\\mathbf{B},$ , and $\\mathbf{C}$ are dependent on the input $x_{t}$ , forming an input-dependent selection mechanism. Unlike traditional RNNs which repeatedly apply Eq. (23) in a for-loop to generate the output sequence, Mamba employs a parallel associative scan, which enables the computation of the output sequence in parallel. This method significantly enhances computational efficiency. ", "page_idx": 21}, {"type": "text", "text": "D.3.2 Network Architecture ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Pre-encoder. The pre-encoders consist of one-layer MLPs with a consistent output dimension of 128. ", "page_idx": 21}, {"type": "text", "text": "Context Encoder. The context encoder is comprised of one or more Mamba blocks, each flanked by two MLPs. Typically, the MLP before the Mamba block consists of a single layer with 256 neurons, except for the Key-to-Door task, where a three-layer MLP with 256 neurons per layer is employed. ", "page_idx": 21}, {"type": "text", "text": "Except in Key-to-Door task, a single Mamba block is utilized, with a state dimension of 64. The kernel size of the convolution1d layer is fixed at 8. Additionally, for these tasks, a position-wise feedforward network, used by Transformer [9], is appended to the end of the Mamba block to slightly enhance stability during training. In Key-to-Door tasks, the convolution1d layer in Mamba is omitted, as the focus shifts to long-term credit assignment, rendering the convolution1d unnecessary for capturing short-term sequence features. Conversely, in Key-to-Door tasks with a credit assignment length of 500, four Mamba blocks are employed to improve the long-term memory capacity. ", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 22}, {"type": "text", "text": "The MLP after the Mamba block also comprises a single layer with an output dimension of 128. ", "page_idx": 22}, {"type": "text", "text": "MLP Policy/Critic. As detailed in Sec. 4.1, both the MLP policy and critic consist of MLPs with two hidden layers, each comprising 256 neurons. ", "page_idx": 22}, {"type": "text", "text": "Activations. Linear activation functions are employed for the output of the pre-encoder, context encoder, and the MLP policy/critic. For other layers, the ELU activation function [49] is used. ", "page_idx": 22}, {"type": "text", "text": "Optimizer. We use AdamW [50] for RESeL training. ", "page_idx": 22}, {"type": "text", "text": "D.3.3 Hyperparameters ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "The hyperparameters used for RESeL is listed in Table 2. We mainly tuned the learning rates, batch size for each tasks. $\\gamma$ and last reward as input are determined according to the characteristic of the tasks. The batch size in Table 2 (1000 or 2000) is much larger than that used in previous MLP-based SAC algorithms (128 or 256) [20]. This is because we train on at least one complete trajectory at a time, and in most environments, the maximum trajectory length is 1000. Thus, batch sizes of 1000 or 2000 correspond to one or two trajectories of maximum length. ", "page_idx": 22}, {"type": "table", "img_path": "tSWoT8ttkO/tmp/dec052263926fedfd2c7b0b0e072e1eba886b11c2e449c836dd93ddeeaac0979.jpg", "table_caption": ["Table 2: Hyperparameters of RESeL. "], "table_footnote": [], "page_idx": 22}, {"type": "text", "text": "Hyperparameter Determination Some hyper-parameters (discount factor, reward as input) were chosen based on the nature of the environments, while others (Context encoder LR, policy and value function LR, and batch size) are determined via grid search: ", "page_idx": 22}, {"type": "text", "text": "\u2022 Context Encoder LR: We fixed the learning rate of the context encoder to be 1/30 of the policy learning rate in all tasks. We aim to have the action variation caused by RNN updates to be comparable to that caused by MLP updates, thus fixing the learning rate ratio between the context encoder and MLP. After conducting parameter searches in several environments, as shown in Fig. 20, we find the 1/30 ratio performed well, so we fixed this ratio across all environments. ", "page_idx": 22}, {"type": "text", "text": "\u2022 Policy and Value Function LR: We mainly referred to the default learning rate settings in CleanRL [51], using a policy learning rate of $3\\times10^{-4}$ and an action-value function learning rate of $10^{-3}$ . We conducted a grid search between the aforementioned learning rates and those reduced by a factor of 5 (aiming to further stabilize training). We found that a smaller ", "page_idx": 22}, {"type": "text", "text": "learning rate was more stable in tasks where the partial observability is not very significant (e.g., MDPs like classic MuJoCo).   \n\u2022 Discount Factor $(\\gamma)$ : For general tasks, we used a common $\\gamma$ value of 0.99. For environments requiring long-term memory (e.g., Key-to-Door), we used a larger $\\gamma$ of 0.9999.   \n\u2022 Reward as Input: The Classic Meta-RL tasks require inferring the true reward function based on real-time rewards. Thus, we also included real-time reward feedback as an input to the policy and value in these tasks.   \n\u2022 Batch Size: We conducted a grid search for batch size, mainly exploring sizes that were 1x or $2\\mathbf{x}$ the maximum trajectory length. We found that in classic POMDP tasks, a larger batch size performed better. In other tasks, the advantage of a large batch size was not significant and could even reduce training speed. ", "page_idx": 23}, {"type": "text", "text": "E More Experimental Results ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "E.1 Visualization ", "text_level": 1, "page_idx": 23}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/72535cd903547419a8cba9d53313bff6715528d056155792f6f85dc9299a174a.jpg", "img_caption": ["Figure 14: The t-SNE visualization of the outputs of the context encoder in Halfcheetah with different gravity. "], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "In order to explore what the context encoder has learned, we attempt to conduct in-depth analysis on the embedded context data. We conducted experiments in the environment of Halfcheetah with varying gravity. We uniformly sample gravity acceleration within the range of $[2.90,33.10]m/s^{2}$ , resulting in 40 environments with different gravities. For each environment, we used a policy learned by RESeL to collect one trajectory, with a length of 1000 steps. Ultimately, we obtained data of size $40\\!\\times\\!1000$ , where each step\u2019s output of the encoder, a 128-dimensional vector, was saved. Subsequently, we performed t-SNE [52] processing on the $40\\!\\times\\!1000\\!\\times\\!128$ data to map the high-dimensional 128-dimensional data into 2-dimensional data which can assist in our visualization analysis. ", "page_idx": 23}, {"type": "text", "text": "Finally, we presented the results in Fig. 14. In this figure, the colorbar represents the gravity acceleration magnitude. The $x$ and $y$ axes of the figure represent the two-dimensional data results after t-SNE mapping. From the figure, we can distinctly observe the non-random distribution characteristics of colors from left to right. The different data represented by the cool and warm colors are not randomly intermingled but rather exhibit certain clustering characteristics. We can find that the embeddings are strongly correlated with gravity acceleration, indicating that RESeL has recovered the hidden factor of the POMDP environment from the historical interaction data. ", "page_idx": 23}, {"type": "text", "text": "E.2 Time Overhead Comparisons ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We find the computational efficiency is also a common issue among previous recurrent RL methods, especially in the context of recurrent off-policy RL. This issue mainly comes from the non-parallelizable nature of traditional RNNs. In our work, we tackle this problem by using the SSM structure, i.e. Mamba to improve the computational efficiency. Mamba is able to process sequential data in parallel based on the technique of parallel associative scan. In the following parts, we will analyze the time cost of Mamba compared with that of GRU. ", "page_idx": 23}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/c3d088919397dc7255db3ddf67d3e927b416df41d521981b0b039062869f1f72.jpg", "img_caption": ["Figure 15: One-step update time with different types of context encoder. "], "img_footnote": [], "page_idx": 24}, {"type": "text", "text": "To evaluate the improvement in training speed of the policy, we conducted experiments utilizing the HalfCheetah environment within Gym [53]. Maintaining consistency across all training configurations, we substituted Mamba in the context encoder with MLP and GRU, ensuring identical input/output dimensions for policy training. Each experiment contains 10,000 time steps, during which we measure the average training time per step. Policy training employed full-length trajectories, i.e. a fixed sequence length of 1000. The time costs associated with different network architectures are depicted in Fig. 15. ", "page_idx": 24}, {"type": "text", "text": "The results indicate that Mamba possesses significantly lower time costs compared to GRU, amounting to approximately $25\\%$ of the time taken by GRU. Mamba\u2019s time cost surpasses that of MLP by approximately $80\\%$ ; nevertheless, it still presents a substantial speedup relative to GRU. These results are based on utilizing a single layer/block. ", "page_idx": 24}, {"type": "table", "img_path": "tSWoT8ttkO/tmp/0e5fb5140c2ec1f8c551668d0be863f8a4ab5d9fc1564470c06eb09c65657efb.jpg", "table_caption": ["Table 3: GPU utilization, memory, and time cost with various neural network types. Time denotes the time cost for each update iteration, in HalfCheetah-v2. Normalized time is normalized with the corresponding GRU time cost. "], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "Time Overhead Comparisons with Different Number of Layers/Blocks. In Table 3, the GPU utilization and time costs for different numbers of layers are detailed, complementing Fig. 15. The results indicate that the normalized time for Mamba decreases as the layer count increases, suggesting that Mamba becomes more computationally efficient with more blocks, compared with GRU. Additionally, Mamba consistently uses less GPU resources than GRU, further demonstrating its superior scalability and efficiency. ", "page_idx": 24}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/a0ba7387eca4ea852dc7bfba3f1f442ac1e9f897dd0765e1ea24ba71cb553901.jpg", "img_caption": ["Figure 16: Network forward/backward time overhead for GRU and Mamba layers. "], "img_footnote": [], "page_idx": 25}, {"type": "text", "text": "Time Overhead Comparisons with Different Sequence Lengths. To evaluate how Mamba scales with varying sequence lengths, we compared the forward and backward time costs of Mamba and GRU using artificial data. The results, presented in Fig. 16, show the sequence length on the horizontal axis. The left panel illustrates forward inference time, while the right panel depicts backward inference time. The time cost for GRU increases linearly with sequence length in both forward and backward scenarios. In contrast, Mamba\u2019s time cost remains relatively constant, showing no significant growth in either scenario. These results highlight Mamba\u2019s computational efficiency and scalability with respect to sequence length. ", "page_idx": 25}, {"type": "text", "text": "E.3 More Comparative Results ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "E.3.1 POMDP Tasks ", "text_level": 1, "page_idx": 25}, {"type": "table", "img_path": "tSWoT8ttkO/tmp/4f92fef4f4b4bc0845b27071e5a70db48ddacf9ea269e77150e5fb011b169ba9.jpg", "table_caption": ["Table 4: Average performance on the classic POMDP benchmark with gravity changes at 1.5M time steps  one standard error over 6 seeds. "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "In Table 4, the corresponding final returns in Fig. 7 are listed in detail. We can find that RESeL makes notably enhancement and surpasses the previous SOTA (GPIDE) by $22.9\\%$ in terms of the average performance. ", "page_idx": 25}, {"type": "text", "text": "E.3.2 Dynamics-Randomized Tasks ", "text_level": 1, "page_idx": 25}, {"type": "table", "img_path": "tSWoT8ttkO/tmp/ffcfbeb85b689ad87f0f27832daa03c4ab602a9e86ad2ad71b29c2996ac7d525.jpg", "table_caption": ["Table 5: Average performance on the MuJoCo benchmark with gravity changes at 2M time steps \u00b1 one standard error over 6 seeds. "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "In Table 5, the corresponding final returns in Fig. 8 are listed in detail. We can find that RESeL makes notably enhancement and surpasses the previous SOTA (ESCP) by $43.4\\%$ in terms of the average performance. ", "page_idx": 25}, {"type": "table", "img_path": "tSWoT8ttkO/tmp/2365f881edbc46d34ccd6a2efb6c00b47de53c9c9d973058ddd3d3922dfccfcc.jpg", "table_caption": ["Table 6: Average performance on the classic MuJoCo benchmark at $300\\mathrm{k}$ , 1M, and 5M time steps, over 6 trials $\\pm$ standard errors. "], "table_footnote": [], "page_idx": 26}, {"type": "text", "text": "E.3.3 Classic MDP tasks ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Table 6 provides comprehensive training results for MuJoCo MDP environments, extending the data from Table 1. Specifically, the table includes results recorded at $300\\mathrm{k}$ , 1M, and 5M time steps. Baseline results are primarily sourced from [43]. In environments such as Hopper, Walker2d, and Humanoid, RESeL achieves or surpasses the previous SOTA performance. Notably, RESeL may underperform compared to previous baselines at the $300\\mathrm{k}$ time step. However, its asymptotic performance eventually matches or exceeds the SOTA. This suggests that incorporating RNN structures might slightly reduce sample efficiency initially, as the observation space expands to include full historical data, requiring more optimization to find optimal policies. Nevertheless, RESeL ultimately leverages the enlarged observation space to achieve superior asymptotic performance. ", "page_idx": 26}, {"type": "text", "text": "E.4 Ablation Studies on Context Length ", "text_level": 1, "page_idx": 26}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/9e3d34b61a331fd3d41e91ef4960cb3df6d19740b6c917d8a951976f610f568f.jpg", "img_caption": ["Figure 17: Ablation studies on the context length. "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "Since trajectory length (or called context length) in training data is often a critical parameter in previous studies [11], our work has emphasized the importance of using complete trajectories. Training with trajectory segments but deploying with full-trajectory length can lead to distribution shift issues. To investigate this, we conducted experiments using full trajectory data versus trajectory segments (64 steps). The results are illustrated in Fig. 17. ", "page_idx": 26}, {"type": "text", "text": "In general, models trained with full trajectory data perform better than those trained with trajectory segments. However, in the AntBLT-V and HalfCheetah-V environments, the performance gap is smaller. The key difference in these tasks is the longer trajectory lengths, especially in HalfCheetahBLT-V, where the trajectory length is fixed at 1000 steps. The data in these tasks are usually cyclic, while in other tasks, agents may drop and terminate trajectories before achieving stable performance. We suspect that strong cyclic data can mitigate distribution shift issues, as trajectory segments containing a complete cycle can effectively represent the properties of the full trajectory. ", "page_idx": 26}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/c8d77b996c652e46eca608004a14ed1e386d7f5b56f881d19135e98abfcad7a1.jpg", "img_caption": ["E.5 More Comparisons of Policy Performance with different RNNs ", "Figure 18: Learning curves in terms of the stochastic policy performance with different RNN architectures. "], "img_footnote": [], "page_idx": 27}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/6548a722afe9e0050c8d9ef9cbd8f27741d8b9c64d2cc4b8a31c4824461a9ca8.jpg", "img_caption": ["Figure 19: Sensitivity studies of the context-encoder-specific learning rates in terms of the average final return. "], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "The learning curves of the exploration policy with difference RNN architectures are depicted in Fig. 18. Compared with Fig. 12, Fig. 18 includes evaluation with exploration noise added to the actions. In Fig. 18, RESeL-GRU shows a more substantial improvement over RESeL-Mamba than that in Fig. 12, suggesting that RESeL-GRU might perform better in tasks involving action disturbances. ", "page_idx": 27}, {"type": "text", "text": "E.6 More Sensitivity Studies ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Figure 19 serves as a supplementary panel to Fig. 11. In Fig. 19, we fixed $\\mathrm{LRCE}\\,=\\,5\\times10^{-6}$ and varied $\\mathrm{LR_{other}}$ from $5\\times10^{-6}$ to $\\phantom{+}1.2\\times10^{-3}$ . The results suggest that the optimal $\\mathrm{LR_{other}}$ is still 0.0003, which is significantly larger than $\\mathrm{LR_{CE}}$ . This finding further supports that the optimal learning rates for $\\mathrm{LR_{CE}}$ and $\\mathrm{LR_{other}}$ should be different and not of the same magnitude. ", "page_idx": 27}, {"type": "text", "text": "The learning rate sensitivity analysis on the remaining seven POMDP tasks is presented in Fig. 20. As shown, the conclusions in Sec. 5.3 still hold: when different learning rates are used for the MLP and RNN components and the MLP learning rate is fixed, excessively low or high RNN learning rates result in inefficient training. However, the optimal RNN learning rate generally falls between $5.0\\times10^{-6}$ and $1.0\\times10^{-5}$ . If the MLP and RNN share the same learning rate, their performance rarely surpasses that of the setting with different learning rates, with the only exception being the HalfCheetahBLT-P-v0 environment, where a single learning rate slightly outperforms the different-learning-rate setting. ", "page_idx": 27}, {"type": "image", "img_path": "tSWoT8ttkO/tmp/fb5c5f49e8bf9ecade1ade47e566fdc172b3f2fecdea58957bac08dd6805de2c.jpg", "img_caption": [], "img_footnote": [], "page_idx": 28}, {"type": "equation", "text": "$$\n\\begin{array}{l r}{L R_{C E}={0.0},1R_{o t h e r}=3.0\\times10^{-4}}\\\\ {L R_{C E}={1.0}\\times10^{-4},1R_{o t h e r}=3.0\\times10^{-4}}\\\\ {L R_{C E}={1.0}\\times10^{-6},L R_{o t h e r}=3.0\\times10^{-4}}\\\\ {L R_{C E}={1.0}\\times10^{-6},1R_{o t h e r}=3.0\\times10^{-4}}\\\\ {L R_{C E}={1.0}\\times10^{-6},1R_{o t h e r}=3.0\\times10^{-4}}\\\\ {L R_{C E}=1.0\\times10^{-6}}\\\\ {L R_{C E}=1.5\\times10^{-5},L R_{o t h e r}=3.10^{-4}}\\\\ {L R C_{E C}=1.5\\times10^{-5},1R_{o t h e r}=3.5}\\\\ {L R_{C E}=1.5\\times10^{-5},1R_{o t h e r}=3.10^{-4}}\\\\ {L R_{C E}=1.0\\times10^{-5},L R_{o t h e r}=3.10^{-4}}\\\\ {L R_{C E}=1.0\\times10^{-4},1R_{o t h e r}=3.0\\times10^{-4}}\\\\ {L R_{C E}=1.0\\times10^{-4}}\\end{array}\\quad\\begin{array}{l{-5}\\ \\\\ {C}\\\\ {C}\\\\ {L R C}=6\\times10^{-4},\\ L R_{C E}=6.10^{-6}}\\\\ {\\sum_{1}\\ {L R_{C E}=6}\\times10^{-4}}\\end{array}.\\ }\\end{array}.L R_{C E}=6.5,\\ L R_{o t h}-6\\times10^{-5}}\\\\ {L R_{C E}=3.0\\times10^{-4}}\\\\ {L R_{C E}=3.10^{-4}}\\end{array}\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "Figure 20: Sensitivity studies of the context-encoder-specific learning rates in terms of the average final return in eight POMDP tasks. The variants with the highest final return are marked with $\\star$ . ", "page_idx": 28}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 29}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: See Sec. 6. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 29}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: The proof of Proposition 1 can be found in Appendix A. Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 30}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Justification: We provide a complete algorithm procedure in Appendix C, model architecture in Sec. 4.1, and hyper-parameters in Appendix D. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 30}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: The codes and corresponding hyper-parameters can be found in https: //github.com/FanmingL/Recurrent-Offpolicy-RL. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 31}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We provide a the experiment details and hyper-parameters in Appendix D. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 31}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Justification: Each result of RESeL is repeated with 6 distinct random seeds. The standard errors are reported. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 32}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: We have analyzed and reported the information on the computer resources in Sec. 5. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 32}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 32}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: This paper presents work whose goal is to advance the field of recurrent reinforcement learning. There are many potential societal consequences of our work, none which we feel must be specifically highlighted here. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 32}, {"type": "text", "text": "", "page_idx": 33}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks. ", "page_idx": 33}, {"type": "text", "text": "\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 33}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets. ", "page_idx": 33}, {"type": "text", "text": "\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 33}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 34}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 34}, {"type": "text", "text": "Answer: [NA] Justification: Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 34}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 34}, {"type": "text", "text": "Answer: [NA] Justification: ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 34}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 34}, {"type": "text", "text": "Answer: [NA] Justification: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 34}]