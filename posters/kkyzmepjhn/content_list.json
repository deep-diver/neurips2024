[{"type": "text", "text": "Fast Sampling via Discrete Non-Markov Diffusion Models with Predetermined Transition Time ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Zixiang Chen Huizhuo Yuan Yongqian Li Yiwen Kou Junkai Zhang Quanquan Gu ", "page_idx": 0}, {"type": "text", "text": "Department of Computer Science University of California, Los Angeles Los Angeles, CA 90095 {chenzx19,hzyuan,yongqianl,evankou,jkzhang,qgu}@cs.ucla.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Discrete diffusion models have emerged as powerful tools for high-quality data generation. Despite their success in discrete spaces, such as text generation tasks, the acceleration of discrete diffusion models remains under-explored. In this paper, we propose discrete non-Markov diffusion models (DNDM), which naturally induce the predetermined transition time set. This enables a training-free sampling algorithm that significantly reduces the number of function evaluations (i.e., calls to the neural network), making the sampling process much faster. Furthermore, we study the transition from finite to infinite step sampling, offering new insights into bridging the gap between discrete and continuous-time processes for discrete diffusion models. Extensive experiments on natural language generation and machine translation tasks demonstrate the superior performance of our method in terms of both generation speed and sample quality compared to existing methods for discrete diffusion models. Codes are available at https://github.com/ uclaml/DNDM. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Diffusion-based generative models, as first introduced by Sohl-Dickstein et al. (2015), have shown remarkable capabilities in generating high-quality samples across various domains, including images (Ho et al., 2020; Song and Ermon, 2020), audio (Chen et al., 2020; Kong et al., 2020), and videos (Ho et al., 2022). The diffusion model utilizes an innovative approach comprising a forward process that gradually transforms training data into pure noise and a reverse process that reconstructs clean data from the noise. Throughout the training phase, the model optimizes a neural network by minimizing an objective derived from maximum likelihood estimation. Once trained, the model can generate samples using various decoding strategies, including implicit dynamics (Song et al., 2020a), analytical processes (Bao et al., 2022), or differential equation solvers (Song et al., 2020b; Liu et al., 2022; Lu et al., 2022). In particular, Song et al. (2020a) introduced the denoising diffusion implicit model (DDIM), providing a non-Markov and de-randomized version of the Denoising Diffusion Probabilistic Model (DDPM) (Sohl-Dickstein et al., 2015; Ho et al., 2020), which enables faster generation of high-quality samples. ", "page_idx": 0}, {"type": "text", "text": "Although diffusion models were initially introduced for both discrete and continuous-state spaces (Sohl-Dickstein et al., 2015), these studies have largely focused on Gaussian diffusion processes in continuous-state spaces. Recently, Discrete Denoising Diffusion Probabilistic Models (D3PMs) (Austin et al., 2021) working in discrete-state spaces have gained increasing interest due to their applications in diverse areas such as text generation (Hoogeboom et al., 2021b), medical record generation (Ceritli et al., 2023), and protein design (Gruver et al., 2024). These models, which are distinct from their Gaussian counterparts, employ discrete noises, such as the multinomial distribution, for diffusion processes. Very recently, Zheng et al. (2023) introduced a reparameterized diffusion model (RDM) that can improve sampling speed and sample quality in text generation tasks. However, their proposed algorithm is a training-based approach. Compared with diffusion models using Gaussian noise, discrete diffusion models remain under-studied, especially regarding training-free sampling acceleration. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "In this work, we introduce a training-free approach aiming at enhancing the sampling speed of discrete diffusion models. This approach stems from a unique characteristic of discrete diffusion models: unlike continuous diffusion models, which typically employ Gaussian noise for data corruption (Ho et al., 2020; Song and Ermon, 2020; Song et al., 2020b,a), discrete diffusion models often use categorical white noises (Hoogeboom et al., 2021b; Austin et al., 2021; Zheng et al., 2023). ", "page_idx": 1}, {"type": "text", "text": "By delving into this special property, we develop a discrete non-Markov diffusion model, together with a design of accelerated algorithm. Notably, this new sampling technique does not require any modifications to the training objec", "page_idx": 1}, {"type": "table", "img_path": "KkYZmepjHn/tmp/c9c5f84f43aa706915c36fc803ddfa28720467dce0f3367e69ffca41393ac015.jpg", "table_caption": ["Table 1: Cross Comparison of Diffusion Models. "], "table_footnote": ["tive of diffusion models and is, therefore, training-free. Our contributions are summarized as follows: "], "page_idx": 1}, {"type": "text", "text": "\u2022 We propose discrete non-Markov diffusion models (DNDM), which naturally induces a set of latent variables $\\tau$ , termed as the transition time set. This key feature enables us to develop a training-free sampling algorithm that can accelerate a large family of discrete diffusion models. Importantly, DNDM preserves the essential properties of the original discrete diffusion model: for any diffusion trajectory $\\left\\{{\\bf x}_{t}\\right\\}$ starting from real data $\\mathbf{x}_{\\mathrm{0}}$ , it provably maintains both the marginal distribution $q(\\mathbf{x}_{t})$ and the conditional distribution $q(\\mathbf{x}_{0}|\\mathbf{x}_{t})$ . Our method can accelerate the two most widely used discrete diffusion models: multinomial diffusion (Hoogeboom et al., 2021b) and absorbing diffusions (Austin et al., 2021). Similar to how DDIM introduces a de-randomized, faster sampling algorithm compared to DDPM in continuous space, DNDM achieves acceleration through a predetermined transition time set in discrete space (See Table 1). ", "page_idx": 1}, {"type": "text", "text": "\u2022 Based on the predetermined transition time set $\\tau$ in DNDM, we design an accelerated sampling algorithm that reduces the required number of neural network function evaluations. In a standard $T$ time-step discrete diffusion process, while D3PM, including Multinomial (Ho et al., 2020) and absorbing state discrete sampling (Austin et al., 2021), requires evaluating the neural network function $T$ times, our approach only requires $|\\tau|$ function evaluations, where $|\\tau|$ is the cardinality of the transition set $\\tau$ . Moreover, $|\\tau|$ is provably less than $T$ and approaches $O(1)$ as $T$ goes to infinity. We provide both theoretical analysis and empirical experiments showing that the improvement in the number of function evaluations (NFE) is significant. Notably, our algorithm is about $3\\times$ faster than baselines for $T=50$ and about $30\\times$ faster for $T=1000$ while preserving the sample quality. ", "page_idx": 1}, {"type": "text", "text": "\u2022 To further illustrate the effectiveness of DNDM, we explore the limit as $T\\to\\infty$ and introduce an infinite-step sampling algorithm. With a pretrained neural network, we can generate an initial noise $\\mathbf{x}_{T}$ and a transition time set ${\\mathcal{T}}\\subseteq[0,1]$ with infinitesimal spacing, such that $|\\mathcal{T}|=O(1)$ . This enables the generation of the real data distribution with only $|\\tau|$ neural network evaluations. This study offers new insights into bridging the gap between discrete and continuous-time processes for discrete diffusion models. ", "page_idx": 1}, {"type": "text", "text": "Notation. We use $|\\tau|$ to denote the cardinality of the set $\\tau$ (excluding repeated elements). We use lowercase letters to denote scalars, boldface lowercase letters to denote vectors, and boldface uppercase letters to denote matrices. The notation $1:N$ indicates the sequence from 1 through $N$ . The symbol q designates the real distribution in a diffusion process, while $\\mathbf{p}$ represents the distribution during sampling. With its success probability inside the parentheses, the Bernoulli distribution is denoted by Bernoulli $(\\cdot)$ . We further use $\\operatorname{Cat}(\\mathbf{x};\\mathbf{p})$ to denote a categorical distribution over a one-hot row vector $\\mathbf{x}$ with probabilities given by the row vector $\\mathbf{p}$ . ", "page_idx": 1}, {"type": "text", "text": "2 Background ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "In this section, we provide the background of discrete diffusion models. We begin by introducing the discrete Markov diffusion model, designed for handling categorical random variables. Specifically, consider a diffusion model trying to generate distributions over a discrete random variable $\\mathbf{x}\\in\\mathbb{R}^{K}$ that is one-hot encoded with $K$ categories, i.e., x can be chosen as one of $K$ categories, and for any $k\\in[K]$ , $\\mathbf{x}$ is categorized as $k$ if $\\mathbf{x}$ aligns with the standard basis vector $\\mathbf{e}_{k}$ . The sequence $\\{\\mathbf{x}_{t}\\}_{t=0}^{T}$ represents how this random variable changes over time $0\\,\\leq\\,t\\,\\leq\\,T$ , starting from an $\\mathbf{x}_{0}\\,\\in\\,\\mathbb{R}^{K}$ drawn from the real distribution $\\mathbf{q}_{\\mathrm{data}}$ . In this paper, we focus on the two most widely used D3PMs: multinomial diffusion (Hoogeboom et al., 2021b) and absorbing diffusions (Austin et al., 2021). ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Forward Process. During the forward process, the real distribution $\\mathbf{q}_{\\mathrm{data}}$ is gradually transformed into a noise distribution named $\\mathbf{q}_{\\mathrm{noise}}$ . The transformation occurs through $T$ steps, with $T$ intermediate latent variables $\\mathbf{x}_{1},\\ldots.\\mathbf{x}_{T}$ and update rules given by: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t}=b_{t}\\mathbf{x}_{t-1}+(1-b_{t})\\mathbf{w}_{t},\\qquad t=1,\\ldots,T\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Here $b_{t}$ is randomly drawn from a Bernoulli distribution with parameter $\\beta_{t}$ , denoted by $b_{t}~\\sim$ Bernoulli $(\\beta_{t})$ , and $\\mathbf{w}_{t}$ is randomly drawn from the noise distribution $\\mathbf{q}_{\\mathrm{noise}}$ , while for different $t$ the samples are independent. In this work, we focus on cases where the noise $\\mathbf{q}_{\\mathrm{noise}}$ can be either a uniform distribution over the vocabulary $\\{1,2,\\ldots,K\\}$ (Hoogeboom et al., 2021b), or a point mass with all of the probability mass lying on an absorbing state (Austin et al., 2021). Following this notation, the process in (1) defines a Markov process characterized by the transition kernel ", "page_idx": 2}, {"type": "equation", "text": "$$\nq(\\mathbf{x}_{t}|\\mathbf{x}_{t-1})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\beta_{t}\\mathbf{x}_{t-1}+(1-\\beta_{t})\\mathbf{q}_{\\mathrm{noise}}\\big).\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Moreover, the Markov chain property allows us to get samples $\\mathbf{x}_{0:t}$ from $\\mathbf{x}_{\\mathrm{0}}$ by multiplying the transition probabilities at each step as $\\begin{array}{r}{p(\\mathbf{x}_{1:t}|\\mathbf{x}_{0})=\\prod_{i=1}^{t}q(\\mathbf{x}_{t}|\\mathbf{x}_{t-1})}\\end{array}$ . It further leads to the following marginal distribution. ", "page_idx": 2}, {"type": "equation", "text": "$$\nq(\\mathbf{x}_{t}|\\mathbf{x}_{0})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\alpha_{t}\\mathbf{x}_{0}+(1-\\alpha_{t})\\mathbf{q}_{\\mathrm{noise}}\\big),\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\alpha_{t}:=\\Pi_{s=1}^{t}\\beta_{s}$ is determined by the sequence of $\\beta_{t}$ of our choice and decreases from 1 to 0. ", "page_idx": 2}, {"type": "text", "text": "Reverse Process. Given the forward Markov process, the reverse process can be derived by Bayes\u2019 rule (Hoogeboom et al., 2021b; Austin et al., 2021; Zheng et al., 2023). The conditional probability $q(\\mathbf{x}_{t-1}|\\mathbf{x}_{0},\\mathbf{x}_{t})$ can be determined by $q(\\mathbf{x}_{t-1}|\\mathbf{x}_{0},\\mathbf{x}_{t})\\overset{\\cdot}{=}q(\\mathbf{x}_{t}|\\mathbf{x}_{t-1})q(\\mathbf{x}_{t-1}|\\mathbf{x}_{0})/q(\\mathbf{x}_{t}|\\mathbf{\\bar{x}}_{0})$ . The reverse process can be used for synthetic data generation by sampling from the noise distribution $q_{\\mathrm{noise}}$ and repeatedly applying a learned predictor (neural network) $p_{\\theta}(\\cdot|\\mathbf{x}_{t})$ parameterized by $\\pmb{\\theta}$ : ", "page_idx": 2}, {"type": "equation", "text": "$$\np_{\\theta}(\\mathbf{x}_{T})=q_{\\mathrm{noise}}(\\mathbf{x}_{T}),\\qquad q_{\\theta}(\\mathbf{x}_{t-1}|\\mathbf{x}_{t})=\\int_{\\hat{\\mathbf{x}}_{0}}q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\widehat{\\mathbf{x}}_{0})p_{\\theta}(\\widehat{\\mathbf{x}}_{0}|\\mathbf{x}_{t})d\\widehat{\\mathbf{x}}_{0}.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "We note that the reverse process $q\\big(\\mathbf{x}_{t-1}\\big|\\mathbf{x}_{t},\\widehat{\\mathbf{x}}_{0}\\big)$ is stochastic and thus requires function evaluation at every step. ", "page_idx": 2}, {"type": "text", "text": "Training the Neural Network. The neural network $p_{\\theta}(\\cdot|\\mathbf{x}_{t})$ that predicts $\\widehat{\\bf x}_{0}$ is trained by maximizing the evidence lower bound (ELBO) (Sohl-Dickstein et al., 2015), ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\log p_{\\theta}(\\mathbf{x}_{0})\\geq\\mathbb{E}_{q(\\mathbf{x}_{1:T}|\\mathbf{x}_{0})}\\bigg[\\log\\frac{p_{\\theta}(\\mathbf{x}_{0:T})}{q(\\mathbf{x}_{1:T}|\\mathbf{x}_{0})}\\bigg]d\\mathbf{x}_{1:T}}\\\\ &{\\qquad\\qquad\\qquad=\\mathbb{E}_{q(\\mathbf{x}_{1}|\\mathbf{x}_{0})}[\\log p_{\\theta}(\\mathbf{x}_{0}|\\mathbf{x}_{1})]-\\displaystyle\\sum_{t=2}^{T}\\mathbb{E}_{q(\\mathbf{x}_{t}|\\mathbf{x}_{0})}[\\mathrm{KL}(q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\mathbf{x}_{0})||p_{\\theta}(\\mathbf{x}_{t-1}|\\mathbf{x}_{t}))}\\\\ &{\\qquad\\qquad\\qquad\\qquad-\\,\\mathbb{E}_{q(\\mathbf{x}_{T}|\\mathbf{x}_{0})}\\mathrm{KL}(q(\\mathbf{x}_{T}|\\mathbf{x}_{0})||p_{\\theta}(\\mathbf{x}_{T})),}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Here KL denotes Kullback-Liebler divergence and the last term $\\mathbb{E}_{q(\\mathbf{x}_{T}|\\mathbf{x}_{0})}\\mathrm{KL}\\big(q(\\mathbf{x}_{T}|\\mathbf{x}_{0})\\big|\\big|q_{\\mathrm{noise}}(\\mathbf{x}_{T})\\big)$ equals zero. Building on this foundation, Austin et al. (2021) introduced an auxiliary denoising objective, which refines the data predictions $\\mathbf{x}_{\\mathrm{0}}$ at each time step. Since this paper primarily focuses on reverse sampling, we leave detailed discussions of these losses to Appendix $\\mathbf{B}$ . ", "page_idx": 2}, {"type": "text", "text": "3 Discrete Non-Markov Diffusion Models (DNDM) ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 Forward and Reverse Process ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In this section, we introduce a non-Markov process such that the joint distribution of $\\left(\\mathbf{x}_{0},\\mathbf{x}_{t}\\right)$ remains the same as the one defined with Markov process in Section 2. The new process aims to gradually ", "page_idx": 2}, {"type": "text", "text": "transform input data $\\mathbf{q}_{\\mathrm{data}}$ to the noise distribution $\\mathbf{q}_{\\mathrm{noise}}$ through $T$ intermediate latent variables $\\mathbf{x}_{1},\\ldots.\\mathbf{x}_{T}$ with the following process: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t}=b_{t}\\mathbf{x}_{t-1}+(1-b_{t})\\mathbf{w},\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $b_{t}$ is independently drawn from the Bernoulli distribution Bernoulli $(\\beta_{t})$ and w is drawn from the noise distribution $\\mathbf{q}_{\\mathrm{noise}}$ . The only difference between (6) and (1) is that we replace ${\\bf w}_{t}$ in (1) by w, which is time-invariant during the diffusion. Therefore, the process in (6) becomes non-Markov since $q(\\mathbf{x}_{t}|\\mathbf{x}_{t-1},...\\,,\\mathbf{x}_{0})$ doesn\u2019t necessarily equals $q(\\mathbf{x}_{t}|\\mathbf{x}_{t-1})$ . The following theorem shows that the conditional distribution $q(\\mathbf{x}_{t}|\\mathbf{x}_{0})$ remains unchanged. ", "page_idx": 3}, {"type": "text", "text": "Theorem 3.1. For the non-Markov process in (6), we have ", "page_idx": 3}, {"type": "equation", "text": "$$\nq(\\mathbf{x}_{t}|\\mathbf{x}_{0})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\alpha_{t}\\mathbf{x}_{0}+(1-\\alpha_{t})\\mathbf{q}_{\\mathrm{noise}}\\big),\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\alpha_{t}:=\\Pi_{i=1}^{s}\\beta_{s}$ is specified to decrease from 1 to 0. ", "page_idx": 3}, {"type": "text", "text": "Using the Bayes\u2019 rule, we have $q(\\mathbf{x}_{0}|\\mathbf{x}_{t})\\propto q(\\mathbf{x}_{t}|\\mathbf{x}_{0})q(\\mathbf{x}_{0})$ . Consequently, the condtional distribution $q(\\mathbf{x}_{0}|\\mathbf{x}_{t})$ remains consistent with the one induced by the process process in (1). Therefore, neural network $p_{\\theta}(\\cdot|\\mathbf{x}_{t})$ trained by the Markov process in (1), remains applicable to our non-Markov process (6) (see Appendix $\\mathbf{B}$ for detail). ", "page_idx": 3}, {"type": "text", "text": "Based on the discrete non-Markov diffusion model, we can give a simple characterization of the reverse process by introducing the transition time. ", "page_idx": 3}, {"type": "text", "text": "Definition 3.2. Transition time $\\tau$ is the time that the token $\\mathbf{x}_{t}$ transition from $\\mathbf{x}_{\\mathrm{0}}$ to noise, i.e., $\\tau:=\\operatorname*{min}_{t}\\{t|b_{t}=0\\}$ . ", "page_idx": 3}, {"type": "text", "text": "Remark 3.3. The concept of transition time has also been introduced in Hoogeboom et al. (2021a). However, Hoogeboom et al. (2021a) restricts the transition time to be the first time of entering the absorbing state, which is only applicable to absorbing diffusion. Our definition is more general and applicable to discrete diffusion with various noise including multinomial diffusion. ", "page_idx": 3}, {"type": "text", "text": "Given the transition time $\\tau$ , the forward process reduces to: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t}=\\mathbb{1}(\\tau>t)\\mathbf{x}_{0}+\\mathbb{1}(\\tau\\leq t)\\mathbf{w},\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "which shows that the token will be a real token $\\mathbf{x}_{\\mathrm{0}}$ before the time $\\tau$ and will be the noise w after the transition time. Since token only get changed at the transition time $\\tau$ , we can derive a reverse process based on (7), ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t-1}=\\mathbb{1}(\\tau=t)\\mathbf{x}_{0}+\\mathbb{1}(\\tau\\neq t)\\mathbf{x}_{t}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Therefore, the process in (8) is de-randomized given transition time $\\tau$ . Specifically, after independently sampled transition times $\\tau,\\mathbf{x}_{t-1}$ becomes deterministically known and fixed if we observe $\\mathbf{x}_{\\mathrm{0}}$ and $\\mathbf{x}_{t}$ . It is also worth noting that given $\\mathbf{x}_{\\mathrm{0}}$ and $\\tau$ , the exact reverse process (8) is Markovian, since $\\mathbf x_{t-1}$ solely depends on $\\mathbf{x}_{0},\\tau,\\mathbf{x}_{t}$ . Plugging (8) into (4) gives the generation process. We can prove the ELBO of the DNDM is equivalent to the ELBO of the original process (5) up to some constant, which further supports the neural network $p_{\\theta}(\\cdot|\\mathbf{x}_{t})$ trained by the Markov process in (1), remains applicable to DNDM. (See Appendix B.3 for details). ", "page_idx": 3}, {"type": "text", "text": "Remark 3.4. (7) and (8) suggest that even though there are $T$ distinct time steps, not every time in the range $1:T$ is crucial for capturing the process. Therefore, our primary focus should be on the most significant time step, i.e., the transition time $\\tau$ , enabling faster reverse sampling. We further note that although transition happens only at time $\\tau$ , the transition time is random, differs across runs, and covers the full range from 1 to $T$ on average. ", "page_idx": 3}, {"type": "text", "text": "Remark 3.5. While Song et al. (2020a) proposed a non-Markov multinomial diffusion model in Appendix A, DDIM and DNDM are fundamentally different models when specialized to multinomial diffusion. DDIM\u2019s discrete process remains stochastic at every step, even with deterministic noise scheduling. In contrast, DNDM achieves full de-randomization by pre-determined transition time $\\tau$ (Equation 8 in our paper). By sampling these transition times upfront, DNDM establishes a predetermined transition time set that guides the sampling process, enabling deterministic evolution and faster sampling speed even under the same number of sampling steps, which is not reported under DDIM framework. For detailed technical comparison, see Appendix B.1. ", "page_idx": 3}, {"type": "text", "text": "3.2 Accelerated Reverse Sampling ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In this section, we demonstrate that sampling from DNDM can lead to accelerated reverse sampling.   \nAlthough our algorithm is quite general, we focus on text generation in the presentation. ", "page_idx": 4}, {"type": "text", "text": "In Section 3.1, we only consider the case of a single token $\\mathbf{x}\\in\\mathbb{R}^{K}$ being one hot encoding of $K$ categories. In real applications, we are interested in generating a sentence with multiple tokens. So, we extend the terminology in Section 3.1, and we denote the sequence of tokens at $t$ -th time step to be $\\mathbf{x}_{t,1:N}=[\\mathbf{x}_{t,1},\\ldots,\\mathbf{x}_{t,N}]$ where ${\\bf x}_{t,n}$ is the $n$ -th token and $N$ is the sequence length. The noise will be added to each token in a sequence independently. Therefore, each token will have its own transition time defined in Definition 3.2. We denote the transition time for each token ${\\bf x}_{n}$ to be $\\tau_{n}$ and further denote the transition time set $\\mathcal{T}:=\\{\\tau_{n}\\}_{n=1}^{N}$ . Given the transition times $\\tau_{n}\\in{\\mathcal{T}}$ , our DNDM can now be extended to the sequence with multiple tokens ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t-1,n}=\\mathbb{1}(\\tau_{n}=t)\\mathbf{x}_{0,n}+\\mathbb{1}(\\tau_{n}\\neq t)\\mathbf{x}_{t,n},\\forall n\\in[N].\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Learning the Reverse Process. We first generate the transition times $\\tau_{n}$ for $n\\in[N]$ , then we follow (9) to generate the learned reverse process. Since ${\\bf x}_{0,n}$ is unknown in the process, we use the neural network evaluation $p_{\\theta}(\\cdot|\\mathbf{x}_{t})$ obtained in Section 3.1 to predict ${\\bf x}_{0,n}$ . In detail, the noisy sequence $\\mathbf{x}_{t,1:N}$ is fed into $p_{\\theta}\\big(\\cdot|{\\mathbf{x}}_{t,1:N}\\big)$ and the prediction tokens $\\widehat{\\mathbf{x}}_{0,1:N}\\sim p_{\\pmb{\\theta}}(\\cdot|\\mathbf{x}_{t,1:N})$ are collected. ", "page_idx": 4}, {"type": "text", "text": "Transition time. Transition time, denoted by $\\tau$ , is crucial in our reverse process. This is because the reverse sampling becomes deterministic upon using (9). Each instance of transition time $\\tau$ is a random variable within the set $\\{1,2,\\ldots,T\\}$ . Let\u2019s assume it follows the distribution $\\mathcal{D}_{\\tau}$ . Given the schedule $\\{\\alpha_{t}\\}_{t=0}^{T}$ , we can derive the distribution for $\\mathcal{D}_{\\tau}$ . ", "page_idx": 4}, {"type": "text", "text": "Theorem 3.6. Each specific transition time $\\tau_{n}$ in Definition 3.2 is independent. Furthermore, they collectively adhere to the distribution $\\mathcal{D}_{\\tau}$ , which obeys the rule $\\mathbb{P}(\\tau_{n}=t)=\\alpha_{t-1}-\\alpha_{t}$ . ", "page_idx": 4}, {"type": "text", "text": "From Theorem 3.6, we discern that the nature of the diffusion model scheduler, $\\alpha_{t}$ , clarifies the distribution of $\\tau$ . Take the linear schedule as an example, as given by Austin et al. (2021), the relationship is $\\alpha_{t}=1-t/T$ . This translates to $\\mathbb{P}(\\tau_{n}=t)=1/T$ for every $t$ in the range 1 to $T$ . As a result, transition time distributes uniformly across each moment in the set $\\{1,\\cdot\\cdot\\cdot,\\bar{T^{\\}}\\}$ . Generally, if we express $\\alpha_{t}$ as $g(t/T)$ , then we can simplify to $\\mathbb{P}(\\tau_{n}=t)=g((t-1)/T)-g(\\acute{t}/T)$ , which further refines to $(1/T)|g^{\\prime}(t/T)|+o(1/T)$ . This indicates that transitions are more likely where $\\vert g^{\\prime}\\vert$ is large. ", "page_idx": 4}, {"type": "text", "text": "In practice, we observed that the shape of the transition time does not need to exactly match the theoretically predicted schedule $\\mathcal{D}\\tau$ in Theorem 3.6. Algorithm 1 works even if $\\mathcal{D}\\tau$ is unknown. In particular, we can approximate the schedule with a Beta distribution by first sampling a time $t\\in[0,1]$ from a Beta distribution, then adjusting these samples to fit by multiplying by $T$ and rounding the result to obtain an integer. ", "page_idx": 4}, {"type": "text", "text": "Accelerated Sampling. According to (9), a token ${\\bf x}_{t-1,n}$ is updated only if step $t$ is the transition time for the $n$ -th token. If step $t$ is not the transition time for any token, the sentence from the previous step can be directly copied: $\\mathbf{x}_{t-1,1:N}=\\mathbf{x}_{t,1:N}$ . As a result, there is no need to do a function evaluation for the current step. Our attention, therefore, can be solely centered ", "page_idx": 4}, {"type": "table", "img_path": "KkYZmepjHn/tmp/c6f582abc1ebb8c0c2982aad5a0d9410646cf08ba807c880a7136ba3f652cf92.jpg", "table_caption": [], "table_footnote": [], "page_idx": 4}, {"type": "text", "text": "on the transition set $\\tau$ , necessitating function evaluations only for $t$ within $\\tau$ . For our method, when $N$ is fixed while $T\\to\\infty$ , the total NFE $|\\tau|$ will reach $N$ . On the other hand, when $T$ is fixed and $N\\to\\infty$ , the NFE $\\tau$ will reach $T$ (See Theorem D.1 for detail). It is worth noting that the auto-regressive diffusion model (ARDM) (Hoogeboom et al., 2021a) can also achieve at most $N$ NFE when $T=\\infty$ . However, ARDM only focuses on infinite time steps, while our method here is able to accelerate sampling for finite time steps. More detailed discussion and theoretical analysis can be found in Section D, where additional experiments also demonstrate that our DNDM achieves an NFE that is less than half of the original Markov sampling method for discrete diffusion. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "By incorporating the forward process with different noises, we can develop DNDM-Multi and DNDMAbsorb, which accelerate the Multinomial and Absorbing sampling methods respectively. Recent works have demonstrated that the quality of samples can be enhanced by utilizing supplementary information derived from the neural network, (Ghazvininejad et al., 2019; Savinov et al., 2021; Chang et al., 2022; He et al., 2022; Zheng et al., 2023). Our DNDM can also be improved using this idea. We call it a discrete non-Markov Diffusion Model with Top-k Transition Time (DNDM- $k$ ). Due to the limit of the pages, we leave the detailed Algorithm and discussion to Appendix E. ", "page_idx": 5}, {"type": "text", "text": "3.3 Continous-time (Infinite Step) Reverse Sampling ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "In the context of continuous state spaces, continuous-time processes have been proposed to accommodate algorithms that offer faster sampling speeds and enhanced sample quality (Jolicoeur-Martineau et al., 2021; Zhang and Chen, 2022; Salimans and Ho, 2022; Chung et al., 2022; Song et al., 2020b; Dockhorn et al., 2021). However, the application of continuous-time schemes to discrete-state spaces remains largely unexplored. Campbell et al. (2022) first developed a continuous framework for discrete-time diffusion for the Markovian process and randomized sampling, but not in our nonMarkovian setting. In this section, we investigate the transition from finite to infinite step sampling, providing new insights into bridging the gap between discrete and continuous-time processes for discrete diffusion models. ", "page_idx": 5}, {"type": "text", "text": "Continuous-time Forward and Backward process. Recall that the forward process described in (6) can be sampled from ${\\bf x}_{0,n}$ through the following process: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t,n}=\\alpha_{t}\\mathbf{x}_{0,n}+(1-\\alpha_{t})\\mathbf{q}_{\\mathrm{noise}},\\quad\\alpha_{t}=\\prod_{i=1}^{t}\\beta_{i}.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "In the previous section, we are constrained to discrete time steps, where we must define a maximum step, denoted by $T$ . The values of $\\mathbf{x}_{t}$ are computed only for $t\\,=$ $1,\\cdot\\cdot\\cdot,T$ . As a result, during the training process, it is only possible to predict $\\mathbf{x}_{\\mathrm{0}}$ at these predetermined time steps. This constraint confines the computation of our reverse process exclusively to these fixed time stamps. To derive the continuous limit of (10), for each $T$ we rescale (10) to a diffusion process on $[0,1]$ , e.g., ${\\bf x}_{T,n}\\;=\\;$ $\\widehat{\\mathbf{x}}_{1,n},\\mathbf{x}_{0,n}\\overline{{\\mathbf{\\xi}}}=\\widehat{\\mathbf{\\xi}}\\widehat{\\mathbf{x}}_{0,n}$ , and $\\mathbf{x}_{t,n}~=~\\widehat{\\mathbf{x}}_{t/T,n}$ T herefore, wh e n $T\\rightarrow\\infty$ , $\\widehat{\\mathbf{x}}_{t,n}$ rep r esents the continuous process th at has values at arbitrary $t\\in[0,1]$ . If the choice of $\\alpha_{t}$ for ", "page_idx": 5}, {"type": "table", "img_path": "KkYZmepjHn/tmp/41fe14817f0a755bb4d73959c0c31a76dfb5c927680ea014b5b25e6a93f2114e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 5}, {"type": "text", "text": "each $T$ is scale-invariant, we can define a continuous function $\\alpha(t)$ as the continuous $\\alpha$ schedule of the discrete counterpart1. More specifically, we obtain ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\widehat{\\mathbf{x}}_{t,n}=\\alpha(t)\\widehat{\\mathbf{x}}_{0,n}+(1-\\alpha(t))\\mathbf{q}_{\\mathrm{noise}},\\quad t\\in[0,1].\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "For the reverse-time process, we define the transition time set $\\mathcal{T}:=\\;\\{\\tau_{n}\\}_{n=1}^{N}$ consistent with Theorem 3.6 and sample it from $\\mathbb{P}(\\tau_{n}=t)=-\\alpha^{\\prime}(t)$ (we always use decreasing $\\alpha(t))$ . With $\\tau$ defined, the updates to ${\\bf x}_{t,n}$ only occur at $\\{\\tau_{n}\\}$ . Consequently, we arrange $\\tau_{n}$ to obtain an ordered sequence $\\tau_{n_{k}}$ , where $\\tau_{n_{1}}<\\tau_{n_{2}}<...<\\tau_{n_{N}}$ . When omitting the infinitely many time steps between $\\tau_{n_{k}}$ and $\\tau_{n_{k-1}}$ , the resulting reverse process is then given by: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{{\\bf x}_{\\tau_{n_{k-1}},n}=\\mathbb{1}(\\tau_{n}=\\tau_{n_{k-1}}){\\bf x}_{0,n}+\\mathbb{1}(\\tau_{n}\\neq\\tau_{n_{k-1}}){\\bf x}_{\\tau_{n_{k}},n},}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "for all $n\\in[N]$ . The detailed algorithm named DNDM-C is shown in Algorithm 2. ", "page_idx": 5}, {"type": "text", "text": "Remark 3.7. Autoregressive Diffusion Model (ARDM) (Hoogeboom et al., 2021a) is a discrete diffusion model built upon the autoregressive nature of data. ARDM is shown to be equivalent to a continuous-time absorbing diffusion model and thus provides a unique perspective for discrete diffusion. For continuous-time $T=\\infty$ ) reverse sampling, both ARDM and our method achieve $N$ NFEs. Unlike ARDM which is limited to absorbing-state transitions, our method provides a unified framework including both absorbing and multinomial diffusions, applicable to both finite time and continuous time diffusions. For infinite timesteps, Hoogeboom et al. (2021a) also proposed an advanced parallelizing technique that can reduce NFE according to the log-likelihood, which we have not considered in DNDM-C. ", "page_idx": 6}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In this section, we evaluate DNDM and demonstrate its superior performance on two types of tasks: conditional sequence-to-sequence text generation (i.e., machine translation) and unconditional text generation. For the fairness of comparison, all the experiments are conducted using a single NVIDIA RTX A6000 GPU with 48 GB memory. Additional experiment details are provided in Appendix F. ", "page_idx": 6}, {"type": "text", "text": "4.1 Conditional Text Generation ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We evaluate DNDM\u2019s effectiveness on conditional text generation through machine translation tasks. Following Zheng et al. (2023), we use Byte Pair Encoding (BPE) (Sennrich et al., 2016) to create a shared vocabulary of words and subwords from both source and target languages. We implement our experiments using FairSeq (Ott et al., 2019), which employs an encoder-decoder architecture. The model uses bi-directional self-attention blocks without causal masking, allowing tokens to attend to both past and future positions during training and inference. The encoder processes the source text, while the decoder generates the target translation. ", "page_idx": 6}, {"type": "text", "text": "Datasets. We use the following three datasets to compare with the baselines for machine translation tasks: (1) IWSLT14 DE-EN (Cettolo et al., 2014), a dataset with German as the source language and English as the target language. It consists of 174272 examples (sentence pairs), and each of the validation set and the testing set accounts for 7283 and 6750 of the dataset; (2) WMT14 EN-DE (Bojar et al., 2014), which is an English-to-German translation dataset consisting of 3967182 examples. Each of the validation set and the testing set accounts for 3000 and 3003 of the dataset; and (3) WMT16 EN-RO (Bojar et al., 2016), which is an English-to-Russian translation dataset consisting of 612317 examples. Each of the validation sets and the testing set accounts for 1999 and 1999 of the dataset. The train-validation-test split is fixed across all experiments for all machine translation datasets to ensure fair comparison. ", "page_idx": 6}, {"type": "text", "text": "Performance Metrics. We use the BLEU score (Papineni et al., 2002) to evaluate the machine translation quality, where the BLEU score is calculated based on the similarity between the actual target sequence and the predicted target sequence. The sampling speed is measured by wall-clock time (in second). ", "page_idx": 6}, {"type": "text", "text": "Baselines. The main baselines we are comparing with are RDM and RDM- $k$ from Zheng et al. (2023). Here, we use RDM- $k$ and RDM to denote the sampling method proposed in their paper with and without the usage of top- $k$ selection for the token generation technique (see Appendix E for more details), respectively. RDM and RDM- $k$ are applied to two previously proposed state-ofthe-art discrete diffusion models: Multinomial Diffusion (Hoogeboom et al., 2021b) and Absorbing Diffusion (Austin et al., 2021). ", "page_idx": 6}, {"type": "text", "text": "Results and Discussion. Tables 2 and 3 present the performance evaluations of our algorithms in machine translation tasks. Table 2 presents results for multinomial diffusion, while Table 3 displays results for absorbing diffusion. Our reported time and BLEU scores are averaged over 5 repeated experiments, except for the baseline RDM experiment2. ", "page_idx": 6}, {"type": "text", "text": "From Tables 2 and 3, we observe that methods based on DNDM significantly accelerate the sampling process compared to baseline diffusion models. This acceleration allows for greater flexibility in increasing the number of steps (up to infinity) without imposing a significant computational burden. ", "page_idx": 6}, {"type": "text", "text": "In particular, more sampling steps lead to better generation quality (BLEU) at the expense of longer sampling time, as indicated in each column of Tables 2 and 3. For RDM-based methods, generation time increases linearly with the number of sampling steps. On the contrary, for our DNDM-based method, generation time only increases marginally (See Figure 4 in Section G). As a result of the difference in the growing speed of sampling time with respect to sampling steps, the more sampling steps, the more speedup DNDM can obtain. ", "page_idx": 7}, {"type": "text", "text": "Continuous-time results, as the ultimate limit of increasing sampling steps, are presented in the last row of each dataset with the tag $\\infty$ . Given that the results with 1000 steps consistently outperform those with 50 steps, we compare $\\infty$ with 1000 steps in Table 2 and 3. For IWSLT14 and WMT16, where the generation BLEU score is relatively high, we observe a consistent performance improvement of up to 0.3 in BLEU score when utilizing the DNDM-C algorithm, with the exception of a single case in the absorbing diffusion setting for WMT16 without the use of top- $k$ selection. The performance gain of the continuous-time method on WMT14 is less significant, with both drops and gains. However, WMT14 itself has not reached a high level of performance, with a BLEU score significantly lower than other datasets. In general, training WMT14 poses challenges across all diffusion models, including multinomial diffusion (Hoogeboom et al., 2021b), absorbing diffusion (Austin et al., 2021), and RDM diffusion (Zheng et al., 2023), etc. We defer a more detailed discussion on WMT14 to Appendix F.1. Finally, when compared with the results obtained with 50 steps, the performance of DNDM-C demonstrates improvement consistently. Furthermore, we note that regardless of the dataset or the method (i.e., RDM or DNDM) employed, top- $k$ token generation consistently outperforms vanilla methods. This approach enhances the BLEU score by approximately 1-2 points without introducing significant increases in sampling time. ", "page_idx": 7}, {"type": "text", "text": "Table 2: BLEU score comparison of multinomial diffusion on machine translation benchmarks IWSLT14 DE-EN, WMT14 EN-DE, and WMT16 EN-RO. Below the dataset, we present the amount of data used to run the evaluation (sentences). The blue background highlights our algorithms, and the bold number indicates the best performance within each row and each setting (i.e., with or without top-k). ", "page_idx": 7}, {"type": "table", "img_path": "KkYZmepjHn/tmp/5de8da0b35e185b781048ce77614f2272f6ddbbba553265e018c4f5e5b423fbb.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Scaling Law in Sampling Speed. For illustrative purposes, we use the example of IWSLT14 to visualize how the sample quality scales regarding sampling speed for different methods. In Figure 1, we observe the trend of the BLEU score in relation to computational time. Each line in the legend represents a different sampling algorithm, and a steeper slope indicates a larger marginal gain when sampling for longer periods. Figure 1 demonstrates that our algorithm displays nearly linear growth in BLEU score over the log of time, which is remarkable in contrast with the flat curve of the baseline. Particularly, for multinomial diffusion, the BLEU score increases by 1 in less than 60 seconds of additional sampling time. For absorbing diffusion, DNDM outperforms RDM before RDM samples 50 steps. In Tables 7 and 8 in Appendix D, we further use the average number of function evaluations (NFE) to measure the improved speed within the specified number of sampling steps. Additionally, in Figure 2, we visualize how the BLEU score and the generated text change throughout the sampling process. ", "page_idx": 7}, {"type": "text", "text": "Table 3: BLEU score comparison of absorbing diffusion on machine translation benchmarks IWSLT14 DE-EN, WMT14 EN-DE, and WMT16 EN-RO. Below the dataset, we present the amount of data used to run the evaluation (sentences). The blue background highlights our algorithms, and the bold number indicates the best performance within each row and each setting (i.e., with or without top-k). ", "page_idx": 8}, {"type": "table", "img_path": "KkYZmepjHn/tmp/371fe37d9f4f286df1b1ad6ef8e303378d3ee36848d20f650998ff8b12fe3357.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "KkYZmepjHn/tmp/fabaf601eaeb6495a4b055e9c0eb7840268a9e8be336badc4c7f3a95fc0b5c23.jpg", "img_caption": ["Figure 1: Generation quality to generation time comparison on IWSLT14. $x$ -axis: computational time in seconds; $y$ -axis: BLEU score. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "4.2 Unconditional Text Generation ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "For unconditional text generation, we evaluate our approach on language modeling tasks, where the model learns to generate text that matches the statistical patterns of the training data. Unlike conditional generation, this task involves directly learning $q(\\mathbf{x}_{0}|\\mathbf{x}_{t})$ without conditioning on any input text. We conduct experiments on the text8 and enwik8 datasets using a decoder-only architecture similar to GPT models. Since unconditional generation does not require encoding input sequences, we employ a 12-layer Transformer decoder without an encoder component. ", "page_idx": 8}, {"type": "text", "text": "Datasets. The natural language generation task is evaluated on two language datasets following Hoogeboom et al. (2021b): text8 and enwik8. Both datasets are from Wikipedia, but their contents are highly distinct. In text8, the plain text consists of English words (all the letters are in lower case) and spaces, and it is tokenized into 26 characters and one blank space, resulting in 27 categories. In contrast to the cleanness of text8, enwik8 preserves the original XML dump contents, and there exist various special symbols in its raw text, so its text is tokenized into 1 Byte, resulting in 256 categories. We utilize text8 dataset with sequence length 256 and enwik8 dataset with sequence length 320. The train/val/test splits are 9e7/5e6/5e5 for both text8 and enwik8. ", "page_idx": 8}, {"type": "text", "text": "Performance Metrics. Our evaluation of text generation quality relies on the perplexity score. When generating text8 data, we calculate perplexity scores using the GPT2 model, while for enwik8 data generation, we employ the GPT2-large model. The sampling speed is measured in seconds. ", "page_idx": 8}, {"type": "image", "img_path": "KkYZmepjHn/tmp/9f0dfb089462350808efda5a9e81ef92667b24783d91aaf3a705025949817ee9.jpg", "img_caption": ["(a) The BLEU Score in the Generation Process ", "Figure 2: We demonstrate the 100-step generation process of DNDM- $k$ -Multi as an example, where the left is the change of the BLEU score along the generation process, and the right is the text at different time steps. As the time goes from 100 to 0, noise is gradually removed until the corresponding English text emerges. Since the transition time follows a Beta distribution as described in Section 3.2, the majority of transitions occur near the starting time. ", "$\\mathbf{t}=100$ [noise] [noise] [noise] [noise] \u00b7 \u00b7 \u00b7 $\\mathbf{t}\\,=\\,75$ [noise] \u00b7 \u00b7 \u00b7 [noise] and we [noise] \u00b7 \u00b7 \u00b7 [noise] govern[noise] [noise] year [noise] $\\mathbf{t}=67$ we [noise] [noise] fello [noise] [noise] [noise] and we let them [noise] [noise] city govern[noise] every year. $\\mathrm{~\\bf~t~}=\\mathrm{~\\bf~39~}$ we choose some fellows every year and we let them work with city governance every year. $\\textrm{\\textbf{t}}=\\textrm{\\textbf{0}}$ we choose some fellows every year and we let them work with city governance every year. (b) Text in the Generation Process "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "Baselines. We compare our proposed DNDM on unconditional text generation task with the vanilla Multinomial Diffusion (Hoogeboom et al., 2021b). ", "page_idx": 9}, {"type": "text", "text": "Results and Discussion. Table 4 displays the performance of our algorithms in text generation tasks. We run the multinomial diffusion model on the text8 dataset for 1000 diffusion steps and on the enwik8 dataset for 4000 diffusion steps. Our DNDM-based algorithms outperform the vanilla sampling algorithm used in Hoogeboom et al. (2021b) in terms of both sampling time and perplexity score. Specifically, for the text8 dataset, DNDMbased algorithms are 5 times faster than the vanilla algorithm. For the enwik8 dataset, DNDM-based algorithms are 14 times faster than the vanilla algorithm. ", "page_idx": 9}, {"type": "text", "text": "Table 4: Comparison of different sampling methods for unconditional text generation (multinomial diffusion) on text8 and enwik8 benchmarks. Sampling time is computed by generating a single text sample of length 256 for text8 and length 320 for enwik8, averaged over 10 runs. The blue background represents our algorithms, and the bold number indicates the optimal value. ", "page_idx": 9}, {"type": "table", "img_path": "KkYZmepjHn/tmp/a024dca75797a92616c76680e033b7d26e6c409287b2e6809268345df4bfb094.jpg", "table_caption": [], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "5 Conclusion and Future Work ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This paper presents a novel discrete non-Markov diffusion model (DNDM) accompanied by an accelerated sampling algorithm designed to boost sampling speed in a discrete-state space. Our discrete diffusion model incorporates \"transition time set\" latent variables, establishing itself as an efficacious diffusion and data generation method. Thanks to our acceleration technique, we significantly decrease the number of neural network function evaluations without sacrificing sample quality. We also introduce an infinite-step sampling algorithm, DNDM-C, which provides new insights into bridging the gap between discrete and continuous-time processes for discrete diffusion models. While this study focuses on text generation using non-autoregressive models, a promising direction for future exploration is applying our method to other tasks, such as audio and image generation. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgement ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We thank the anonymous reviewers and area chair for their helpful comments. ZC, HY, YL, YK, JZ, and QG are supported in part by the National Science Foundation CAREER Award 1906169, IIS-2008981, and the Sloan Research Fellowship. The views and conclusions contained in this paper are those of the authors and should not be interpreted as representing any funding agencies. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "ALAIN, G., BENGIO, Y., YAO, L., YOSINSKI, J., THIBODEAU-LAUFER, E., ZHANG, S. and VINCENT, P. (2016). Gsns: generative stochastic networks. Information and Inference: A Journal of the IMA 5 210\u2013249.   \nALIAS PARTH GOYAL, A. G., KE, N. R., GANGULI, S. and BENGIO, Y. (2017). Variational walkback: Learning a transition operator as a stochastic recurrent net. Advances in Neural Information Processing Systems 30.   \nAUSTIN, J., JOHNSON, D. D., HO, J., TARLOW, D. and VAN DEN BERG, R. (2021). Structured denoising diffusion models in discrete state-spaces. Advances in Neural Information Processing Systems 34 17981\u201317993.   \nBAO, F., LI, C., ZHU, J. and ZHANG, B. (2022). Analytic-dpm: an analytic estimate of the optimal reverse variance in diffusion probabilistic models. arXiv preprint arXiv:2201.06503 .   \nBENGIO, Y., LAUFER, E., ALAIN, G. and YOSINSKI, J. (2014). Deep generative stochastic networks trainable by backprop. In International Conference on Machine Learning. PMLR.   \nBOJAR, O., BUCK, C., FEDERMANN, C., HADDOW, B., KOEHN, P., LEVELING, J., MONZ, C., PECINA, P., POST, M., SAINT-AMAND, H., SORICUT, R., SPECIA, L. and TAMCHYNA, A. (2014). Findings of the 2014 workshop on statistical machine translation. In Proceedings of the Ninth Workshop on Statistical Machine Translation. Association for Computational Linguistics, Baltimore, Maryland, USA.   \nBOJAR, O., CHATTERJEE, R., FEDERMANN, C., GRAHAM, Y., HADDOW, B., HUCK, M., JIMENO YEPES, A., KOEHN, P., LOGACHEVA, V., MONZ, C., NEGRI, M., N\u00c9V\u00c9OL, A., NEVES, M., POPEL, M., POST, M., RUBINO, R., SCARTON, C., SPECIA, L., TURCHI, M., VERSPOOR, K. and ZAMPIERI, M. (2016). Findings of the 2016 conference on machine translation. In Proceedings of the First Conference on Machine Translation: Volume 2, Shared Task Papers. Association for Computational Linguistics, Berlin, Germany.   \nBORDES, F., HONARI, S. and VINCENT, P. (2017). Learning to generate samples from noise through infusion training. arXiv preprint arXiv:1703.06975 .   \nCAMPBELL, A., BENTON, J., DE BORTOLI, V., RAINFORTH, T., DELIGIANNIDIS, G. and DOUCET, A. (2022). A continuous time framework for discrete denoising models. Advances in Neural Information Processing Systems 35 28266\u201328279.   \nCERITLI, T., GHOSHEH, G. O., CHAUHAN, V. K., ZHU, T., CREAGH, A. P. and CLIFTON, D. A. (2023). Synthesizing mixed-type electronic health records using diffusion models. arXiv preprint arXiv:2302.14679 .   \nCETTOLO, M., NIEHUES, J., ST\u00dcKER, S., BENTIVOGLI, L. and FEDERICO, M. (2014). Report on the 11th IWSLT evaluation campaign. In Proceedings of the 11th International Workshop on Spoken Language Translation: Evaluation Campaign. Lake Tahoe, California.   \nCHANG, H., ZHANG, H., JIANG, L., LIU, C. and FREEMAN, W. T. (2022). Maskgit: Masked generative image transformer. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition.   \nCHEN, N., ZHANG, Y., ZEN, H., WEISS, R. J., NOROUZI, M. and CHAN, W. (2020). Wavegrad: Estimating gradients for waveform generation. arXiv preprint arXiv:2009.00713 .   \nCHUNG, H., SIM, B. and YE, J. C. (2022). Come-closer-diffuse-faster: Accelerating conditional diffusion models for inverse problems through stochastic contraction. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition.   \nDOCKHORN, T., VAHDAT, A. and KREIS, K. (2021). Score-based generative modeling with critically-damped langevin diffusion. arXiv preprint arXiv:2112.07068 .   \nDOCKHORN, T., VAHDAT, A. and KREIS, K. (2022). Genie: Higher-order denoising diffusion solvers. Advances in Neural Information Processing Systems 35 30150\u201330166.   \nGHAZVININEJAD, M., LEVY, O., LIU, Y. and ZETTLEMOYER, L. (2019). Mask-predict: Parallel decoding of conditional masked language models. arXiv preprint arXiv:1904.09324 .   \nGRUVER, N., STANTON, S., FREY, N., RUDNER, T. G., HOTZEL, I., LAFRANCE-VANASSE, J., RAJPAL, A., CHO, K. and WILSON, A. G. (2024). Protein design with guided discrete diffusion. Advances in Neural Information Processing Systems 36.   \nHE, Z., SUN, T., WANG, K., HUANG, X. and QIU, X. (2022). Diffusionbert: Improving generative masked language models with diffusion models. arXiv preprint arXiv:2211.15029 .   \nHO, J., CHAN, W., SAHARIA, C., WHANG, J., GAO, R., GRITSENKO, A., KINGMA, D. P., POOLE, B., NOROUZI, M., FLEET, D. J. ET AL. (2022). Imagen video: High definition video generation with diffusion models. arXiv preprint arXiv:2210.02303 .   \nHO, J., JAIN, A. and ABBEEL, P. (2020). Denoising diffusion probabilistic models. Advances in neural information processing systems 33 6840\u20136851.   \nHOOGEBOOM, E., GRITSENKO, A. A., BASTINGS, J., POOLE, B., BERG, R. V. D. and SALIMANS, T. (2021a). Autoregressive diffusion models. arXiv preprint arXiv:2110.02037 .   \nHOOGEBOOM, E., NIELSEN, D., JAINI, P., FORR\u00c9, P. and WELLING, M. (2021b). Argmax flows and multinomial diffusion: Learning categorical distributions. Advances in Neural Information Processing Systems 34 12454\u201312465.   \nJOLICOEUR-MARTINEAU, A., LI, K., PICH\u00c9-TAILLEFER, R., KACHMAN, T. and MITLIAGKAS, I. (2021). Gotta go fast when generating data with score-based models. arXiv preprint arXiv:2105.14080 .   \nKARRAS, T., AITTALA, M., AILA, T. and LAINE, S. (2022). Elucidating the design space of diffusion-based generative models. Advances in Neural Information Processing Systems 35 26565\u201326577.   \nKONG, Z. and PING, W. (2021). On fast sampling of diffusion probabilistic models. arXiv preprint arXiv:2106.00132 .   \nKONG, Z., PING, W., HUANG, J., ZHAO, K. and CATANZARO, B. (2020). Diffwave: A versatile diffusion model for audio synthesis. arXiv preprint arXiv:2009.09761 .   \nLIU, L., REN, Y., LIN, Z. and ZHAO, Z. (2022). Pseudo numerical methods for diffusion models on manifolds. arXiv preprint arXiv:2202.09778 .   \nLU, C., ZHOU, Y., BAO, F., CHEN, J., LI, C. and ZHU, J. (2022). Dpm-solver: A fast ode solver for diffusion probabilistic model sampling in around 10 steps. Advances in Neural Information Processing Systems 35 5775\u20135787.   \nLYU, S. (2012). Interpretation and generalization of score matching. arXiv preprint arXiv:1205.2629   \nMOVELLAN, J. R. (2008). Contrastive divergence in gaussian diffusions. Neural Computation 20 2238\u20132252.   \nNACHMANI, E., ROMAN, R. S. and WOLF, L. (2021). Non gaussian denoising diffusion models. arXiv preprint arXiv:2106.07582 .   \nNICHOL, A. Q. and DHARIWAL, P. (2021). Improved denoising diffusion probabilistic models. In International Conference on Machine Learning. PMLR.   \nOTT, M., EDUNOV, S., BAEVSKI, A., FAN, A., GROSS, S., NG, N., GRANGIER, D. and AULI, M. (2019). fairseq: A fast, extensible toolkit for sequence modeling. arXiv preprint arXiv:1904.01038   \nPAPINENI, K., ROUKOS, S., WARD, T. and ZHU, W.-J. (2002). Bleu: a method for automatic evaluation of machine translation. In Proceedings of the 40th annual meeting of the Association for Computational Linguistics.   \nREID, M., HELLENDOORN, V. J. and NEUBIG, G. (2022). Diffuser: Discrete diffusion via edit-based reconstruction. arXiv preprint arXiv:2210.16886 .   \nSALIMANS, T. and HO, J. (2022). Progressive distillation for fast sampling of diffusion models. arXiv preprint arXiv:2202.00512 .   \nSAN-ROMAN, R., NACHMANI, E. and WOLF, L. (2021). Noise estimation for generative diffusion models. arXiv preprint arXiv:2104.02600 .   \nSAVINOV, N., CHUNG, J., BINKOWSKI, M., ELSEN, E. and OORD, A. V. D. (2021). Step-unrolled denoising autoencoders for text generation. arXiv preprint arXiv:2112.06749 .   \nSENNRICH, R., HADDOW, B. and BIRCH, A. (2016). Neural machine translation of rare words with subword units.   \nSOHL-DICKSTEIN, J., BATTAGLINO, P. and DEWEESE, M. R. (2009). Minimum probability flow learning. arXiv preprint arXiv:0906.4779 .   \nSOHL-DICKSTEIN, J., WEISS, E., MAHESWARANATHAN, N. and GANGULI, S. (2015). Deep unsupervised learning using nonequilibrium thermodynamics. In International conference on machine learning. PMLR.   \nSONG, J., MENG, C. and ERMON, S. (2020a). Denoising diffusion implicit models. arXiv preprint arXiv:2010.02502 .   \nSONG, Y., DHARIWAL, P., CHEN, M. and SUTSKEVER, I. (2023). Consistency models. arXiv preprint arXiv:2303.01469 .   \nSONG, Y. and ERMON, S. (2019). Generative modeling by estimating gradients of the data distribution. Advances in neural information processing systems 32.   \nSONG, Y. and ERMON, S. (2020). Improved techniques for training score-based generative models. Advances in neural information processing systems 33 12438\u201312448.   \nSONG, Y., SOHL-DICKSTEIN, J., KINGMA, D. P., KUMAR, A., ERMON, S. and POOLE, B. (2020b). Score-based generative modeling through stochastic differential equations. arXiv preprint arXiv:2011.13456 .   \nSUN, H., YU, L., DAI, B., SCHUURMANS, D. and DAI, H. (2022). Score-based continuous-time discrete diffusion models. arXiv preprint arXiv:2211.16750 .   \nVAHDAT, A., KREIS, K. and KAUTZ, J. (2021). Score-based generative modeling in latent space. Advances in Neural Information Processing Systems 34 11287\u201311302.   \nWATSON, D., HO, J., NOROUZI, M. and CHAN, W. (2021). Learning to efficiently sample from diffusion probabilistic models. arXiv preprint arXiv:2106.03802 .   \nYE, J., ZHENG, Z., BAO, Y., QIAN, L. and GU, Q. (2023). Diffusion language models can perform many tasks with scaling and instruction-finetuning. arXiv preprint arXiv:2308.12219 .   \nZHANG, Q. and CHEN, Y. (2022). Fast sampling of diffusion models with exponential integrator. arXiv preprint arXiv:2204.13902 .   \nZHENG, L., YUAN, J., YU, L. and KONG, L. (2023). A reparameterized discrete diffusion model for text generation. arXiv preprint arXiv:2302.05737 . ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "Broader Impact ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "This paper presents work that aims to advance the field of diffusion models. We believe this work may enable future applications of synthetic data generation, which may lead to positive impacts. Our experiments demonstrate that the proposed method achieves state-of-the-art performance in the acceleration of the generative model. However, proper controls may be needed whenever applying our method to tasks that involve sensitive data data. There may be other potential societal consequences of our work, none of which we feel must be specifically highlighted here. ", "page_idx": 13}, {"type": "text", "text": "Limitations ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "\u2022 The scope of the empirical claims is limited to the text domain with non-auto regressive setting. The applicability and performance of DNDM for other tasks like audio and image generation, as well as with other architectures like auto-regressive GPT models, are not explored and left as future work.   \n\u2022 While DNDM-C, the infinite-step sampling algorithm, offers new insights into bridging the gap between discrete and continuous-time processes for discrete diffusion models, the sample quality is not guaranteed to be superior to the accelerated algorithm with 1000 steps. Some intuitions here: the assumption that the neural network can be optimally trained is an ideal case and is often not realized in practice. There is an inherent estimation error associated with the training process. As the number of steps increases, these estimation errors can accumulate, potentially leading to a degradation in performance. This cumulative estimation error might explain why using an infinite number of steps does not necessarily yield better results than a finite number of steps like 1000 in the conditional generation experiments. How to further improve sample quality of infinite steps is interesting but beyond the scope of this paper.   \n\u2022 This paper focuses on the comparison with discrete Markov diffusion models since it aims to propose an accelerated algorithm for discrete diffusion with DNDM. Other text generation models, such as continuous diffusion models or auto-regressive models, are not considered in this paper.   \n\u2022 This paper focuses on acceleration while maintaining good sample quality. The hyper parameter regions with poor sample qualities are not explored in this paper. ", "page_idx": 13}, {"type": "text", "text": "By highlighting these limitations, this paper aims to clearly scope its contributions and spark future work on addressing these important challenges with discrete diffusion models for generative modeling. ", "page_idx": 13}, {"type": "text", "text": "A Related Work ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Continous Diffusion Models. Generative modeling via continuous-time stochastic process has been investigated thoroughly in a series of work (Movellan, 2008; Lyu, 2012; Sohl-Dickstein et al., 2009; Bengio et al., 2014; Alain et al., 2016; ALIAS PARTH GOYAL et al., 2017; Bordes et al., 2017). The two lines of probabilistic modeling, denoising diffusion probabilistic model (Sohl-Dickstein et al., 2015; Ho et al., 2020) and score matching with Langevin dynamics (Song and Ermon, 2019) are unified by Song et al. (2020b) through introducing the SDE framework for SGM. Based on it, subsequent works (Dockhorn et al., 2021; Nachmani et al., 2021; Vahdat et al., 2021) introduced a more complex diffusion process to improve the generation speed and quality. On the other hand, the score-based sampling process is time-consuming and has attracted much attention for improvements in speed (San-Roman et al., 2021; Watson et al., 2021; Kong and Ping, 2021; Karras et al., 2022; Song et al., 2023). \u201cGotta go fast\u201d (GGF), an SDE solver with adaptive step size tailored to SGM, is proposed in Jolicoeur-Martineau et al. (2021). Song et al. (2020a) introduced a non-Markov diffusion process that corresponds to a deterministic sampling process, enabling the generation of high-quality samples more rapidly. Dockhorn et al. (2022); Liu et al. (2022) proposed a high-order SDE/ODE solver to achieve lower discretization error. Lu et al. (2022); Zhang and Chen (2022) leveraged the semi-linear structure of reverse ODE to reduce the discretization error and achieve state-of-the-art sampling speed. ", "page_idx": 13}, {"type": "text", "text": "Discrete Diffusion Models. Research on discrete diffusion models was initiated by Sohl-Dickstein et al. (2015), who investigated diffusion processes over binary random variables. The methodology was expanded upon by Ho et al. (2020), integrating categorical random variables through transition matrices with uniform probabilities. Though Song et al. (2020a) suggested a similar extension in their supplementary content, they abstained from experimenting with this model type. Later on, Austin et al. (2021) unveiled a more intricate framework for diffusion concerning categorical random variables, enhancing the discrete diffusion models by merging them with Masked language models (MLMs). Contemporary research has furthered this domain by introducing features like editingbased operations (Jolicoeur-Martineau et al., 2021; Reid et al., 2022), auto-regressive diffusion models (Hoogeboom et al., 2021a; Ye et al., 2023), the evolution of a continuous-time structure (Campbell et al., 2022), and the exploration of neural network analogs for learning (Sun et al., 2022). Additionally, Zheng et al. (2023) introduced a re-parameterized loss and an associated sampling technique, attaining commendable outcomes in fewer iterations. Our contributions run parallel to these aforementioned studies. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "B Additional details of Discrete Diffusion ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In our paper, we treat all the $\\mathbf{x}$ , qnoise as a row vector and treat $\\mathbb{1}$ as a column vector with all elements equal 1. ", "page_idx": 14}, {"type": "text", "text": "B.1 Comparison between D3PM and DNDM ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In Section 3.1, we introduced two different diffusion processes, the Markov process in (1) and the non-Markov process in (6). In this section, we explain why they are different but result in the same joint distribution of $\\left(\\mathbf{x}_{0},\\mathbf{x}_{t}\\right)$ for every time step $t$ . Since ${\\bf q}({\\bf x}_{0})$ keeps the same, we only need to prove that the conditional distribution $\\mathbf{q}(\\mathbf{x}_{t}|\\mathbf{x}_{0})$ is the same for the two processes. ", "page_idx": 14}, {"type": "text", "text": "Markov Process. 1 is a Markov process since ${\\bf w}_{n}$ is independent with $\\mathbf{x}_{t-1},\\ldots,\\mathbf{x}_{0}$ , $\\textbf{S O x}_{t}$ is independent of all the past states given the present state. This can also be inferred from the following distribution, which does not depend on x0, . . . , xt\u22122, ", "page_idx": 14}, {"type": "equation", "text": "$$\nq(\\mathbf{x}_{t}|\\mathbf{x}_{t-1})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\beta_{t}\\mathbf{x}_{t-1}+(1-\\beta_{t})\\mathbf{q}_{\\mathrm{noise}}\\big).\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Denote $\\mathbf{Q}_{t}:=\\beta_{t}\\mathbf{I}+\\left(1-\\beta_{t}\\right)\\mathbb{1}\\,\\mathbf{q}_{\\mathrm{noise}}$ , then we have that ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{x}_{t-1}\\mathbf{Q}_{t}=\\beta_{t}\\mathbf{x}_{t-1}+(1-\\beta_{t})\\mathbf{x}_{t-1}\\,\\mathbb{1}\\,\\mathbf{q}_{\\mathrm{noise}}=\\beta_{t}\\mathbf{x}_{t-1}+(1-\\beta_{t})\\mathbf{q}_{\\mathrm{noise}},}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where the last equality holds due to the fact that $\\mathbf{x}_{t-1}$ is a one hot vector and thus $\\mathbf{x}_{t-1}\\,\\mathbb{1}\\,=\\,1$ . Therefore, we can rewrite (13) as $q(\\mathbf{x}_{t}|\\mathbf{x}_{t-1})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\mathbf{x}_{t-1}\\mathbf{Q}_{t}\\big)$ . Then, it is a Markov process with transition kernel $\\mathbf{Q}_{t}$ . So $q(\\mathbf{x}_{t}|\\mathbf{x}_{0})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\mathbf{x}_{0}\\mathbf{Q}_{0}\\ldots\\mathbf{Q}_{t}\\big)$ (Austin et al., 2021). We can then have that ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{Q}_{0}\\ldots\\mathbf{Q}_{t}=\\left[\\beta_{0}\\mathbf{I}+\\left(1-\\beta_{0}\\right)\\mathbb{1}\\,\\mathbf{q}_{\\mathrm{noise}}\\right]\\ldots\\left[\\beta_{t}\\mathbf{I}+\\left(1-\\beta_{t}\\right)\\mathbb{1}\\,\\mathbf{q}_{\\mathrm{noise}}\\right]}\\\\ &{\\quad\\quad\\quad=\\Pi_{s=0}^{t}\\beta_{s}\\mathbf{I}+\\left(1-\\Pi_{s=0}^{t}\\beta_{s}\\right)\\mathbb{1}\\,\\mathbf{q}_{\\mathrm{noise}},}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where the last equality holds since identity matrix I multiplying any vector equals the vector itself and $1\\,\\mathbf{q}_{\\mathrm{noise}}\\,1\\,\\mathbf{q}_{\\mathrm{noise}}^{-}=1(\\mathbf{q}_{\\mathrm{noise}}\\,1)\\mathbf{q}_{\\mathrm{noise}}\\overset{..}{=}1\\,\\mathbf{q}_{\\mathrm{noise}}.$ Therefore, we have that ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\langle\\mathbf{x}_{t}|\\mathbf{x}_{0}\\rangle=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\Pi_{s=0}^{t}\\beta_{s}\\mathbf{x}_{0}+(1-\\Pi_{s=0}^{t}\\beta_{s})\\mathbf{q}_{\\mathrm{noise}}\\big)=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\alpha_{t}\\mathbf{x}_{0}+(1-\\alpha_{t})\\mathbf{q}_{\\mathrm{noise}}\\big)}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where the last equality holds due to the definition $\\alpha_{t}=\\Pi_{s=0}^{t}\\beta_{s}$ . This gives rise to why the Markov process (1) results in conditional distribution $q(\\mathbf{x}_{t}|\\mathbf{x}_{0})=\\mathrm{Cat}(\\mathbf{x}_{t};\\mathbf{p}=\\alpha_{t}\\mathbf{x}_{0}+(1-\\alpha_{t})\\mathbf{q}_{\\mathrm{noise}})$ . ", "page_idx": 14}, {"type": "text", "text": "Non-Markov Process. Recall that our DNDM is defined by ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t}=b_{t}\\mathbf{x}_{t-1}+(1-b_{t})\\mathbf{w},\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where w is fixed for any time $t$ . Therefore, w is no longer independent with $\\mathbf{x}_{0},\\ldots,\\mathbf{x}_{t-1}$ . Therefore, we can\u2019t define the transition kernel and compute $\\mathbf{q}(\\mathbf{x}_{t}|\\mathbf{x}_{0})$ by using the property of Markov. Therefore, we need to advance the technique to calculate the conditional distribution. ", "page_idx": 14}, {"type": "text", "text": "Proof of Theorem 3.1. By (6), we can derive the following explicit expression for a recursive sequence, ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\bf x}_{t}=b_{1}\\ldots b_{t}{\\bf x}_{0,n}+\\displaystyle\\sum_{s=1}^{t}(1-b_{s})b_{s+1}\\ldots b_{t}{\\bf w}}\\\\ {=b_{1}\\ldots b_{t}{\\bf x}_{0}+(1-b_{1}\\ldots b_{t}){\\bf w}}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where second equality is by cancellation of terms, the last inequality holds by defining $a_{t}=b_{1}\\ldots b_{t}$ . Since $a_{t}$ either equals to 1 or 0. Besides, $a_{t}$ equals 1 if and only if $b_{1}=b_{2}=...=b_{t}=1$ , so we have that $a_{t}$ follows Bernoulli distribution Bernou $\\mathrm{{llli}}(\\beta_{1}\\dots\\beta_{t})=\\mathrm{{Bernoulli}}(\\alpha_{t})$ where $\\alpha_{t}=\\Pi_{i=1}^{t}\\beta_{s}$ . Therefore, we can conclude that $\\mathbf{q}(\\mathbf{x}_{t}|\\mathbf{x}_{0})=\\mathrm{Cat}\\big(\\mathbf{x}_{t};\\mathbf{p}=\\alpha_{t}\\mathbf{x}_{0}+(1-\\alpha_{t})\\mathbf{q}_{\\mathrm{noise}}\\big)$ , which completes the proof. \u53e3 ", "page_idx": 15}, {"type": "text", "text": "Comparison between D3PM-Absorb and DNDM. Recall the forward processes of D3PM and DNDM as follows: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{D3PM:}\\quad\\mathbf{x}_{t}=b_{t}\\mathbf{x}_{t-1}+(1-b_{t})\\mathbf{w}_{t},\\quad\\forall t=1\\ldots T,}\\\\ &{\\mathrm{DNDM:}\\quad\\mathbf{x}_{t}=b_{t}\\mathbf{x}_{t-1}+(1-b_{t})\\mathbf{w},\\quad\\forall t=1\\ldots T.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "For absorbing diffusion where $\\mathbf{w}=[\\mathrm{Mask}]$ , DNDM\u2019s forward process becomes equivalent to D3PM since $\\mathbf{w}_{t}=\\mathbf{w}=[\\mathrm{Mask}]$ in this special case. However, for multinomial diffusion or other diffusion processes where $\\mathbf{w}_{t}\\neq\\mathbf{w}$ , these two processes exhibit different behaviors. In addition, even for absorbing diffusion, our proposed reverse sampling algorithm for DNDM is still different from that for D3PM. ", "page_idx": 15}, {"type": "text", "text": "To elucidate the key differences between the sampling algorithm in DNDM and that in D3PM for absorbing diffusion, let\u2019s directly compare the algorithms: ", "page_idx": 15}, {"type": "text", "text": "\u2022 For the D3PM-Absorb algorithm: We begin with an all $[\\mathrm{Mask}]$ sequence. At each time step $t$ , we sample $\\mathbf{x}_{0}\\,\\sim\\,p_{\\theta}\\big(\\mathbf{x}_{0}\\big|\\mathbf{x}_{t}\\big)$ . If $\\mathbf{x}_{t}\\,=\\,[\\mathrm{Mask}]$ , $\\mathbf X_{t-1}$ transitions to [Mask] with probability $(1-\\alpha_{t-1})/(1-\\alpha_{t})$ and to $\\mathbf{x}_{\\mathrm{0}}$ with probability $(\\bar{\\alpha_{t-1}}-\\alpha_{t})/(1-\\alpha_{t})$ . If $x_{t}\\neq[\\mathrm{Mask}]$ , it remains unchanged.   \n\u2022 For the DNDM-Absorb algorithm: We also start with an all $[\\mathrm{Mask}]$ sequence, but crucially, we first determine the transition time set. During sampling, if $\\mathbf{x}_{t}=\\mathrm{\\bar{[Mask]}}$ , the transition probabilities for $\\mathbf x_{t-1}$ are identical to D3PM. However, we only sample $\\mathbf{x}_{0}\\sim p_{\\theta}(\\mathbf{x}_{0}|\\mathbf{x}_{t})$ when at least one token needs to change, as determined by our pre-computed transition set. This selective sampling is the key to our algorithm\u2019s efficiency. ", "page_idx": 15}, {"type": "text", "text": "Therefore, you can see that DNDM will skip many steps during the sampling process to avoid function evaluation and save computational cost. Even though the forward process of DNDM is the same as that of D3PM for absorbing diffusion, our DNDM approach introduces an algorithm design in the sampling process by pre-computing the transition time set and selectively applying function evaluations. This distinguishes DNDM from D3PM algorithm, offering a more computationally efficient approach to inference in discrete diffusion. ", "page_idx": 15}, {"type": "text", "text": "Comparison between DDIM and DNDM for Multinomial Diffusion. While there are similarities between DNDM and DDIM (Appendix A), they are fundamentally different models, and DNDM is not a special case of DDIM. DNDM introduces a novel framework specifically designed for discrete spaces, while DDIM was originally developed for continuous diffusion models. The key differences for multinomial diffusion are as follows. ", "page_idx": 15}, {"type": "text", "text": "\u2022 DDIM: Following Song et al. (2020a) (eq. 19 in Appendix A), $q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\mathbf{x}_{0})\\,=\\,\\mathrm{Cat}(\\sigma_{t}\\mathbf{x}_{t}\\,+\\,$ $(\\alpha_{t-1}-\\sigma_{t}\\alpha_{t})\\mathbf{x}_{0}+((1-\\alpha_{t-1})-(1-\\alpha_{t})\\sigma_{t})\\mathbf{1}_{K})$ . Even with $\\begin{array}{r}{\\sigma_{t}=\\frac{1-\\alpha_{t-1}}{1-\\alpha_{t}}}\\end{array}$ 11\u2212\u2212\u03b1t\u03b1\u22121 , the process remains stochastic: $q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\mathbf{x}_{0})=\\mathrm{Cat}(\\sigma_{t}\\mathbf{x}_{t}+(1-\\sigma_{t})\\mathbf{x}_{0})$ . This means at every step, there\u2019s a probability of choosing $\\mathbf{x}_{\\mathrm{0}}$ , regardless of whether it has transitioned to $\\mathbf{x}_{\\mathrm{0}}$ or not. Unlike Absorbing discrete diffusion, no [Mask] exists in multinomial diffusion. Therefore, DDIM cannot distinguish whether $\\mathbf{x}_{t}$ already equals $\\mathbf{x}_{\\mathrm{0}}$ or not. In particular, although the sampling process becomes less stochastic in the DDIM setting, it will still be predicted $\\mathbf{x}_{\\mathrm{0}}$ with high probability $\\textstyle1-\\sigma_{t}={\\frac{\\alpha_{t-1}-\\alpha_{t}}{1-\\alpha_{t}}}$ . ", "page_idx": 15}, {"type": "text", "text": "\u2022 DNDM: Achieves full de-randomization using transition time $\\tau$ , where: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{x}_{t-1}=\\mathbb{1}(\\tau=t)\\mathbf{x}_{0}+\\mathbb{1}(\\tau\\neq t)\\mathbf{x}_{t},\\quad\\mathrm{with}\\;P(\\tau=t)=\\alpha_{t-1}-\\alpha_{t}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "This crucial difference allows DNDM to achieve full de-randomization once $\\tau$ is sampled, leading to a deterministic evolution that DDIM cannot achieve. ", "page_idx": 15}, {"type": "text", "text": "While DNDM and DDIM are both non-Markov models for multinomial diffusion, their fundamental approaches to and achievements in de-randomization differ significantly in discrete spaces. ", "page_idx": 15}, {"type": "text", "text": "B.2 Training Objective ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Hoogeboom et al. (2021b) utilized $L_{t}$ derived from the negative variational bound. In detail, ", "page_idx": 16}, {"type": "equation", "text": "$$\nL_{t}=\\mathrm{KL}\\big(\\mathrm{Cat}(\\mathbf{x};\\mathbf{p}=\\pmb{\\theta}_{\\mathrm{post}}(\\mathbf{x}_{t},\\mathbf{x}_{0})\\big|\\mathrm{Cat}(\\mathbf{x};\\mathbf{p}=\\pmb{\\theta}_{\\mathrm{post}}(\\mathbf{x}_{t},\\widehat{\\mathbf{x}}_{0})\\big),}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $\\widehat{\\mathbf{x}}_{0}\\,\\sim\\,p\\pmb{\\theta}\\big(\\cdot\\vert\\mathbf{x}_{t}\\big)$ $p_{\\theta}(\\cdot|\\mathbf{x}_{t}),\\;\\theta_{\\mathrm{post}}\\;=\\;(\\beta_{t}\\mathbf{x}_{t}+(1-\\beta_{t})/K\\,\\mathbb{1}^{\\top})\\;\\odot\\;(\\underline{{\\alpha}}_{t-1}\\mathbf{x}_{0}+(1-\\alpha_{t-1})/K\\,\\mathbb{1}^{\\top})$ and $\\theta_{\\mathrm{post}}=(\\beta_{t}\\mathbf{x}_{t}+(1-\\beta_{t})/K\\,\\mathbb{1}^{\\top})\\odot(\\alpha_{t-1}\\triangle_{0}+(1-\\alpha_{t-1})/K\\,\\mathbb{1}^{\\top}).$ This loss evolves KL divergence between two categorical distributions. ", "page_idx": 16}, {"type": "text", "text": "Building on this foundation, Austin et al. (2021) introduced an auxiliary denoising objective to strengthen the data predictions $\\mathbf{x}_{\\mathrm{0}}$ at each time step. In detail, the auxiliary objective is as follows, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbb{E}_{q(\\mathbf{x}_{t},\\mathbf{x}_{0})}\\Big[-\\log p_{\\pmb\\theta}(\\mathbf{x}_{0}|\\mathbf{x}_{t})\\Big],}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where the auxiliary loss term is minimized exactly when $p_{\\theta}(\\cdot|{\\bf x}_{t})$ has all its mass on the data point $\\mathbf{x}_{\\mathrm{0}}$ . ", "page_idx": 16}, {"type": "text", "text": "Furthering the advancements, Zheng et al. (2023) put forth a reparametrized loss $L_{t}$ that incorporates a re-weighted parameter $\\lambda_{t}$ . The detailed loss is ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\overline{{L}}_{t}=\\lambda_{t-1}\\mathbb{E}_{\\mathbf{x}_{t-1},\\mathbf{x}_{t}\\sim q(\\cdot|\\mathbf{x}_{0})}\\mathrm{KL}\\big(q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\mathbf{x}_{0})|p_{\\theta}^{(t)}(\\mathbf{x}_{t-1}|\\mathbf{x}_{t})\\big).}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "This loss can be related to the standard multi-class cross-entropy loss function, which is also simple and powerful. That\u2019s why we consider Zheng et al. (2023) as the baseline model. ", "page_idx": 16}, {"type": "text", "text": "In Section 3.3, we consider the continuous-time forward and backward process. Based on that, we were motivated to analyze the infinite limit of the average loss $\\begin{array}{r}{\\operatorname*{lim}_{t\\to\\infty}\\frac{1}{T}\\sum_{t=1}^{T}L_{t}}\\end{array}$ . We find that the new loss can provide a better checkpoint than the loss averaged on the finite step on some tasks. ", "page_idx": 16}, {"type": "text", "text": "B.3 Calculation of the Evidence Lower Bound ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "B.3.1 Finite Time DNDM ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In this section, we derive the evidence lower bound (ELBO) for our model. The derivatives are inspired by the reasoning in DDIM (Song et al., 2020a). Specifically, We denote the generative process as $\\begin{array}{r}{p_{\\theta}(\\mathbf{x}_{0:T}|\\tau)\\stackrel{!}{=}p_{\\theta}^{(T)}(\\mathbf{x}_{T}|\\tau)\\prod_{t=1}^{T}p_{\\theta}^{(t)}(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\tau)}\\end{array}$ . Here, $p_{\\theta}^{(T)}$ is the pure noise and $p_{\\theta}^{(t)}(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\tau)=q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\widehat{\\mathbf{x}}_{0},\\tau)$ , wher e $\\widehat{\\mathbf{x}}_{0}$ is given by a neural network $p_{\\theta}$ , i.e., $\\widehat{\\mathbf{x}}_{0}=p_{\\theta}(\\mathbf{x}_{t},t)$ Notice that by Jensen\u2019s inequa li ty, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\log p_{\\theta}(\\mathbf{x}_{0})=\\log\\mathbb{E}_{\\tau\\sim\\mathcal{D}_{\\tau}}[p_{\\theta}(\\mathbf{x}_{0}|\\tau)]\\geq\\mathbb{E}_{\\tau\\sim\\mathcal{D}_{\\tau}}[\\log p_{\\theta}(\\mathbf{x}_{0}|\\tau)].}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "The evidence lower bound inequality gives ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\log p_{\\theta}(\\mathbf{x}_{0}\\vert\\tau)\\ge\\mathbb{E}_{\\mathbf{x}_{1:T}\\sim q(\\mathbf{x}_{1:T}\\vert\\mathbf{x}_{0},\\tau)}\\log\\frac{p_{\\theta}(\\mathbf{x}_{0:T}\\vert\\tau)}{q(\\mathbf{x}_{1:T}\\vert\\mathbf{x}_{0},\\tau)}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Plugging (17) into (16) gives the following ELBO, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\log p_{\\theta}(\\mathbf{x}_{0})\\ge\\mathbb{E}_{\\tau\\sim\\mathcal{D}_{\\tau}}\\mathbb{E}_{\\mathbf{x}_{1:T}\\sim q(\\mathbf{x}_{1:T}|\\mathbf{x}_{0},\\tau)}\\log\\frac{p_{\\theta}(\\mathbf{x}_{0:T}|\\tau)}{q(\\mathbf{x}_{1:T}|\\mathbf{x}_{0},\\tau)}:=\\mathrm{ELBO}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "We factorize the $p_{\\theta}$ and $q$ by ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{p_{\\theta}\\big(\\mathbf{x}_{0:T}\\big|\\tau\\big)=p_{\\theta}^{(T)}(\\mathbf{x}_{T}|\\tau)\\displaystyle\\prod_{t=1}^{T}p_{\\theta}^{(t)}\\big(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\tau\\big),}}\\\\ {{q\\big(\\mathbf{x}_{1:T}\\big|\\mathbf{x}_{0},\\tau\\big)=q\\big(\\mathbf{x}_{T}|\\mathbf{x}_{0},\\tau\\big)\\displaystyle\\prod_{t=2}^{T}q\\big(\\mathbf{x}_{t-1}\\big|\\mathbf{x}_{t},\\mathbf{x}_{0},\\tau\\big).}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Here $q$ admits such a decomposition due to our definition of the diffusion process in (6), which introduce the following reverse process: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t-1}=\\mathbb{1}(\\tau=t)\\mathbf{x}_{0}+\\mathbb{1}(\\tau\\neq t)\\mathbf{x}_{t}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Therefore, $\\mathbf{x}_{1:T}$ is Markovian when conditioned on $\\mathbf{x}_{\\mathrm{0}}$ and $\\tau$ . Based on the factorization, we have ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{=\\mathbb{E}_{r\\sim\\mathcal{P}_{r}^{(1)},\\mathbb{E}_{u,T}^{(2)}\\sim(u,v^{2})}\\left[\\log_{\\theta}(\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t}))+\\frac{\\sum_{t=1}^{T}\\log_{\\theta}(\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t}))}{\\sum_{t=1}^{T}\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t})}\\right.}\\\\ &{\\qquad-\\left.\\log_{\\theta}(\\log_{v}^{(1)}(x_{u}))-\\frac{\\sum_{t=1}^{T}\\log_{\\theta}(x_{u}|\\cdot|u_{t})}{\\sum_{t=1}^{T}\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t})}\\right]}\\\\ &{=\\mathbb{E}_{r\\sim\\mathcal{P}_{r}^{(1)},\\mathbb{E}_{u,T}^{(2)}\\sim(u,v^{2})}\\left[\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t})+\\frac{\\sum_{t=1}^{T}\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t})|^{2}}{\\sum_{t=1}^{T}\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t})}\\right.}\\\\ &{\\qquad+\\left.\\log_{v}^{(1)}(x_{u}^{2}|\\cdot|u_{t}|^{2})\\right]}\\\\ &{=\\mathbb{E}_{r\\sim\\mathcal{P}_{r}^{(1)},\\mathbb{E}_{u,T}^{(2)}\\sim(u,v^{2})}\\log_{v}^{(1)}(u|x_{u}|\\cdot|u_{t})}\\\\ &{\\qquad+\\sum_{t=1}^{T}\\log_{v}^{(1)}(u|x_{u}|\\cdot|u_{t})}\\\\ &{\\qquad+\\sum_{t=1}^{T}\\log_{v}^{(1)}(\\log_{v}^{(1)}(x_{u}|\\cdot|u_{t}|^{2}))+\\mathrm{const}}\\\\ &{=\\mathbb{E}_{r\\sim\\mathcal{P}_{r}^{(1)},\\mathbb{E}_{u,T}^{(2)}\\sim(u,v^{2})}\\log_{v}^{(1)}(\\log_{v}^{(1)}(x_{u}|\\cdot|u_{\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "By a slight abuse of notations we use $q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\mathbf{x}_{0}),p_{\\theta}^{(t)}(\\mathbf{x}_{0}|\\mathbf{x}_{1})$ to indicate the distribution of the diffusion process defined in Zheng et al. (2023), that is, the standard Markov discrete diffusion process. In particular, we have ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\overline{{\\mathscr{L}}}_{1}=\\left\\{\\begin{array}{l l}{\\mathbb{E}_{\\mathbf{x}_{1}\\sim q(\\cdot|\\mathbf{x}_{0})}\\log p_{\\theta}^{(1)}(\\mathbf{x}_{0}|\\mathbf{x}_{1}),}&{\\tau=1,}\\\\ {\\mathrm{const},}&{\\tau\\neq1.}\\end{array}\\right.}\\\\ &{\\overline{{\\mathscr{L}}}_{t}=\\left\\{\\begin{array}{l l}{\\mathbb{E}_{\\mathbf{x}_{t-1},\\mathbf{x}_{t}\\sim q(\\cdot|\\mathbf{x}_{0})}\\mathrm{KL}(q(\\mathbf{x}_{t-1}|\\mathbf{x}_{t},\\mathbf{x}_{0})|p_{\\theta}^{(t)}(\\mathbf{x}_{t-1}|\\mathbf{x}_{t})),}&{\\tau=t,}\\\\ {0,}&{\\tau\\neq t.}\\end{array}\\right.}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Thus, we can obtain that ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{ELBO}=\\mathbb{P}(\\tau=1)\\cdot\\underbrace{{\\mathbb{E}}_{{\\mathbf{x}}_{1}\\sim q(\\cdot\\vert{\\mathbf{x}}_{0})}\\log p_{\\theta}^{(1)}({\\mathbf{x}}_{0}\\vert{\\mathbf{x}}_{1})}_{\\mathcal{L}_{1}}}\\\\ &{\\qquad\\quad-\\displaystyle\\sum_{t=2}^{T}\\mathbb{P}(\\tau=t)\\cdot\\underbrace{{\\mathbb{E}}_{{\\mathbf{x}}_{t-1},{\\mathbf{x}}_{t}\\sim q(\\cdot\\vert{\\mathbf{x}}_{0})}\\mathrm{KL}\\big(q({\\mathbf{x}}_{t-1}\\vert{\\mathbf{x}}_{t},{\\mathbf{x}}_{0})\\vert p_{\\theta}^{(t)}({\\mathbf{x}}_{t-1}\\vert{\\mathbf{x}}_{t})\\big)}_{\\mathcal{L}_{t}}+\\mathrm{const.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Here $\\mathcal{L}_{t}$ matches the loss terms in Zheng et al. (2023). In the practical training process, Zheng et al. (2023) samples $t$ from $[\\operatorname{Inif}\\{1,\\cdots\\,,T\\}$ in each iteration and optimizes $\\lambda_{t}\\cdot\\mathcal{L}_{t}$ , where $\\lambda_{t}$ \u2019s are weights. Thus, when we sample $\\tau$ and optimize $\\mathcal{L}_{\\tau}$ , our ELBO indeed leads to the same training objective as Zheng et al. (2023) up to reweighting. Since Zheng et al. (2023) is a parametrization of existing works (Austin et al., 2021; Hoogeboom et al., 2021b), our training objective indeed aligns with previous discrete diffusion models. ", "page_idx": 17}, {"type": "text", "text": "B.3.2 Continous Time DNDM ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In Section B.3, we derived an ELBO for DNDM and its accelerated algorithm defined in Section 3.1 and 3.2. While for finite sampling steps, we can decompose the diffusion process via the sampling steps $1,\\cdot\\cdot\\cdot,T$ in (17), it becomes intractable for continuous Time DNDM (Infinite steps $T\\to\\infty$ ). Therefore, we can formulate the ELBO of continuous time DNDM by decomposing the transition times. The idea of decomposition of transition times follows Hoogeboom et al. (2021a), but their proof is only applicable to absorbing discrete diffusion, while ours can deal with discrete diffusion with various noise $q_{\\mathrm{noise}}$ including multinomial diffusion. ", "page_idx": 17}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "In Section B.3, we only consider the case of a single token $\\mathbf{x}\\in\\mathbb{R}^{K}$ for simplicity as we decompose with the sampling steps $T$ . In this section, we decompose over the transition time $\\tau$ . Therefore, we need to consider a sentence with multiple tokens $\\mathbf{x}_{t,1:N}=[\\mathbf{x}_{t,1},\\ldots,\\mathbf{x}_{t,N}]$ where ${\\bf x}_{t,n}$ is the $n$ -th token and $N$ is the sequence length. Recall that we defined the transition time set $\\mathcal{T}=\\{\\tau_{n}\\}_{n=1}^{N}$ in Section 3.2. We arrange $\\tau_{n}$ to obtain an ordered sequence $\\tau_{n_{k}}$ , where $0=\\tau_{n_{0}}<\\tau_{n_{1}}<\\tau_{n_{2}}<...<$ $\\tau_{n_{N}}=T$ . Then conditioning on the transition time set $\\mathcal{T}=\\{\\tau_{1},\\dots,\\tau_{N}\\}$ , we have that ", "page_idx": 18}, {"type": "equation", "text": "$$\np_{\\theta}(\\mathbf{x}_{0:T,1:N}|\\mathcal{T})=p_{\\theta}(\\mathbf{x}_{\\tau_{n_{N}},1:N}|\\mathcal{T})\\prod_{s=N,...,1}p_{\\theta}(\\mathbf{x}_{\\tau_{n_{s-1}},1:N}|\\mathbf{x}_{\\tau_{n_{s}},1:N},\\mathcal{T}),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where we omit the time superscript of $p$ for simplicity. Then, the evidence lower bound inequality gives ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\log p_{\\theta}(\\mathbf{x}_{0,1:N}|\\mathcal{T})\\ge\\mathbb{E}_{\\mathbf{x}_{\\tau_{n_{1}};T,1:N}\\sim q(\\mathbf{x}_{\\tau_{n_{1}};T,1:N}|\\mathbf{x}_{0,1:N},\\mathcal{T})}\\log\\frac{p_{\\theta}(\\mathbf{x}_{0:T,1:N}|\\mathcal{T})}{q(\\mathbf{x}_{\\tau_{n_{1}}:T,1:N}|\\mathbf{x}_{0,1:N},\\mathcal{T})}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "By Jensen\u2019s inequality, we have ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\log p_{\\theta}(\\mathbf{x}_{0,1:N})=\\log\\mathbb{E}_{\\tau_{1},\\dots,\\tau_{n}\\sim\\mathcal{D}_{\\tau}}[p_{\\theta}(\\mathbf{x}_{0,1:N}|\\mathcal{T})]\\ge\\mathbb{E}_{\\tau_{1},\\dots,\\tau_{n}\\sim\\mathcal{D}_{\\tau}}[\\log p_{\\theta}(\\mathbf{x}_{0}|\\mathcal{T})].\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Plugging (18) into (19) gives the following ELBO, ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\log p_{\\theta}(\\mathbf{x}_{0,1:N})\\ge\\mathbb{E}_{\\tau_{1},\\dots,\\tau_{n}\\sim\\mathcal{D}_{\\tau}}\\mathbb{E}_{\\mathbf{x}_{\\tau_{n_{1}}:T}\\sim q(\\mathbf{x}_{\\tau_{n_{1}}:T}|\\mathbf{x}_{0},T)}\\log\\frac{p_{\\theta}(\\mathbf{x}_{0:T}|T)}{q(\\mathbf{x}_{\\tau_{n_{1}}:T}|\\mathbf{x}_{0},T)}:=\\mathrm{ELBO}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We factorize the $p_{\\theta}$ and $q$ by ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{}&{p_{\\theta}(\\mathbf{x}_{0:T,1:N}|\\mathcal{T})=p_{\\theta}(\\mathbf{x}_{T,1:N}|\\mathcal{T})\\displaystyle\\prod_{s=N,\\ldots,1}p_{\\theta}(\\mathbf{x}_{\\tau_{n_{s-1}},1:N}|\\mathbf{x}_{\\tau_{n_{s}},1:N},\\mathcal{T}),}\\\\ &{}&{q(\\mathbf{x}_{\\tau_{n_{1}}:T,1:N}|\\mathbf{x}_{0,1:N},\\mathcal{T})=q(\\mathbf{x}_{T,1:N}|\\mathbf{x}_{0},\\mathcal{T})\\displaystyle\\prod_{s=N,\\ldots,2}q(\\mathbf{x}_{\\tau_{n_{s-1}},1:N}|\\mathbf{x}_{\\tau_{n_{s}},1:N},\\mathbf{x}_{0,1:N},\\mathcal{T}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Therefore, we have ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{I}_{\\mathbf{S}_{\\mathbf{I}},\\mathbf{R}_{0}}=\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}[\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}]}\\\\ &{=\\mathbf{I}_{{\\mathbf{S}_{\\mathbf{I}},\\mathbf{R}_{0}}}[\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}][\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}][\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}][\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}][\\mathbf{S}_{\\mathbf{I},\\mathbf{R}_{0}}]}\\\\ &{\\quad+\\sum_{i}^{\\infty}[\\log(N_{i_{\\mathbf{S}_{I}}}\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\mathcal{I})-\\log(N_{i_{\\mathbf{S}_{I}}}\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\mathcal{I})}\\\\ &{\\quad-\\sum_{i}^{\\infty}[\\log(N_{i_{\\mathbf{S}_{I}}}\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\mathcal{I})]}\\\\ &{=\\mathbf{I}_{{\\mathbf{S}_{I},\\mathbf{R}_{0}},\\dots,\\mathbf{R}_{0}}[\\log(N_{i_{\\mathbf{S}_{I}}}\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})}\\\\ &{\\qquad+\\sum_{i}^{\\infty}\\log(N_{i_{\\mathbf{S}_{I}}}\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\mathcal{I})]}\\\\ &{\\quad\\Big[\\log(N_{i_{\\mathbf{S}_{I}}}\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})\\log(N_{i_{\\mathbf{S}_{I}}})}\\\\ &{\\quad+\\sum_{i}^{\n$$$\\mathcal{D}_{\\tau}$ ", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Remar   \ntimes $\\tau_{n}$ are independently and identically drawn from the distribution , we are unable to further decompose (20) into a loss function related to the position information $1:N$ , as was accomplished by Hoogeboom et al. (2021a). ", "page_idx": 18}, {"type": "text", "text": "C Choice of the Transition Time ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Transition time $\\tau$ in Definition 3.2 plays an important role in DNDM. In this section, we provide a deeper discussion of the transition time. We first give a proof of the Theorem 3.6. ", "page_idx": 19}, {"type": "text", "text": "Proof of Theorem 3.6. By the definition of $\\tau$ , we know that $\\tau_{n}~=~t$ is equivalent to $b_{0,n}~=$ $1,\\dots,b_{t-1,n}\\ =\\ 1$ and $b_{t,n}\\;=\\;0$ . Since $\\{b_{t,n}\\}_{t=0}^{T}$ is independent for different $n$ by definition, each $\\tau_{n}$ is also independent. Therefore, we drop the subscript $n$ for simplicity. On the other hand if $b_{0}=1,\\dots,b_{t-1}=1$ and $b_{t}=0$ we can also conclude that $\\tau=t$ . Therefore, we have that ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\mathbb{P}(\\tau=t)=\\mathbb{P}(b_{0}=1,\\dots,b_{t-1}=1,b_{t}=0)}&{}\\\\ {=\\left[\\Pi_{s=1}^{t-1}\\beta_{s}\\right]\\cdot(1-\\beta_{t})}&{}\\\\ {=\\Pi_{s=1}^{t-1}\\beta_{s}-\\Pi_{s=1}^{t}\\beta_{s}}&{}\\\\ {=\\alpha_{t-1}-\\alpha_{t},}&{}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where the second equality is due to $b_{s},s=1,2,\\ldots,t$ are independent random variable following Bernoulli $(\\beta_{s})$ distribution and the last equality is by the definition of $\\alpha_{t}=\\Pi_{s=1}^{t}\\beta_{s}$ . ", "page_idx": 19}, {"type": "text", "text": "Notice that $\\alpha_{t}$ is a decreasing sequence in the 0 to 1 range. Therefore, $\\mathbb{P}(\\tau=t)\\in[0,1]$ for any $t\\in\\{1,\\ldots,T\\}$ . alBied siads elso $\\textstyle\\sum\\mathbb{P}(\\tau=t)=\\sum_{t=1}^{T}\\left(\\alpha_{t-1}-\\alpha_{t}\\right)=\\alpha_{0}-\\alpha_{T}=1$ . Therefore, the derived $\\alpha_{t}$ ", "page_idx": 19}, {"type": "image", "img_path": "KkYZmepjHn/tmp/761d7245da5bf6a7174269b43d7cd21d69a4c9fc9141b86d6496b331b7ad1d1d.jpg", "img_caption": ["Figure 3: Different distribution of transition time for $T=50.\\ a),b),c)$ The transition time sampled 1K times under the different $\\alpha_{t}$ schedule. d) The approximated transition time for $t=1,\\dots,T$ using different hypter-parameters. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "From Theorem 3.6, we discern that the nature of the diffusion model scheduler, $\\alpha_{t}$ , clarifies the distribution of $\\tau$ . ", "page_idx": 19}, {"type": "text", "text": "Linear $\\alpha$ schedule. This is a schedule studied in Austin et al. (2021), where $\\alpha_{t}=1-t/T$ . This will result in $\\mathbb{P}(\\tau_{n}=t)=1/T$ for every $t$ in the range $1$ to $T$ . As a result, transition time distributes uniformly across each moment in the set $\\{1,\\ldots,T\\}$ . This can be verified in a) of Figure 3. ", "page_idx": 19}, {"type": "text", "text": "Cosine $\\alpha$ schedule. This is a schedule studied in Hoogeboom et al. (2021b), where $\\alpha_{t}=\\cos(\\pi*$ $t/2T)$ . For numerical consideration of the noise, a small offset $s$ is added, i.e., $\\alpha_{t}\\,=\\,f(t)/\\dot{f}(0)$ ", "page_idx": 19}, {"type": "text", "text": "where $f(t)=\\cos((s+t/T)/(1+s)*\\pi/2)$ . As shown in b) of Figure 3, the transition time will concentrate more on the large $T$ . ", "page_idx": 20}, {"type": "text", "text": "Cosine square $\\alpha$ schedule. This is a schedule studied in Zheng et al. (2023), where $\\alpha_{t}=\\cos^{2}(\\pi*$ $t/2T)$ , which motivated by Nichol and Dhariwal (2021). Again, for numerical consideration of the noise, a small offset $s$ is added, i.e., $\\alpha_{t}=f(t)/f(0)$ where $f(t)=\\cos^{(}(s+t/T)/(1+s)*\\pi/2)$ . As shown in c) of Figure 3, the transition time will concentrate more on the middle of the range. ", "page_idx": 20}, {"type": "text", "text": "Generally, if we express $\\alpha_{t}$ as $g(t/T)$ , then we can simplify to $\\mathbb{P}(\\tau=t)=g((t-1)/T)-g(t/T)$ , which further refines to $(1/T)|j^{\\prime}(t/T)|+o(1/T)$ . This indicates that transitions are more likely where $\\left|g^{\\prime}\\right|$ is large. Such a mathematical finding can match our observation in Figure 3. ", "page_idx": 20}, {"type": "text", "text": "In practice, we find that the shape of the transition time doesn\u2019t need to match the theoretical prediction schedule exactly. As we can see from d) in Figure 3. A reshaped Beta distribution can approximate all the transition time distributions in a fixed range. We first extract a time $t\\in[0,1]$ from a Beta distribution, then adjust these samples to fti by multiplying $T$ and round them to acquire the integer. Our experiment finds that a properly chosen Beta distribution (tuned on the validation set) makes DNDM perform better on the translation tasks. Specifically, the chosen Beta distributions and the searching method are reported in Appendix F. The performance of the four transition time schedules mentioned above, including the reported Beta distributions for comparison, are listed in Table 5, where we find the other three schedules affect the performance, and most of their scores are lower than the scores of Beta distribution, but their scores are at least still close to the reported Beta distributions, especially for DNDM-k-absorb and DNDM-absorb. The efficiencies (measured by NFE) are also similar to one another. ", "page_idx": 20}, {"type": "text", "text": "Additionally, the ablation study on a reasonable range of different Beta distributions with 50 and 1000 sampling steps are shown in Tables 10 and 9, where the BLEU scores and NFE values on the test set of one of the three machine translation datasets, WMT16, are shown for demonstration. The range of Beta distributions covers our chosen Beta schedules based on validation sets and a variety of basic Beta distribution shapes. These results show that the different Beta distributions influence the performance, but most of these choices of parameters still achieve results close to the optimal. Since the Beta distributions of the reported results in Tables 2 and 3 are selected using the validation set, they do not always have the highest scores on the test set, but their scores still at least belong to the top tiers according to these tables. ", "page_idx": 20}, {"type": "text", "text": "Another view of the transition time. In Algorithm 1, we only need to call the neural network when $t\\in\\mathcal T$ , which can significantly speed up the sampling since we reduce the function call. Notice that after we get the $\\mathbf{x}_{\\mathrm{0}}$ prediction, we only update the $\\mathbf{x}_{t}$ for those tokens at the transition time. However, (7) implies that $\\mathbf{x}_{t}=\\mathbf{x}_{0}$ as long as $\\tau>t$ . Therefore, instead of only updating the $\\mathbf{x}_{t}$ for those tokens at the transition time, i.e., $\\tau=t$ , we can also update those tokens with transition time $\\tau>=t$ . This motivates us to consider a variation presented as Algorithm 3, which keeps almost the same sampling time but will update the tokens several times rather than just once. Since the tokens now get the chance to be corrected over time. The new Algorithm 3 will be more robust than Algorithm 1. ", "page_idx": 20}, {"type": "table", "img_path": "KkYZmepjHn/tmp/dc88de143a74f42c00ab5ff16c77d66b86bcf0f4f9e82a32d147e77e261bbc9d.jpg", "table_caption": ["Table 5: The BLEU scores and average number of function evaluations (NFE) values of different distributions of transition time for 1000 sampling steps with batch size 100. The parameters of the Beta distributions in this table are the same as in Tables 2 and 3 and are reported in Appendix F. "], "table_footnote": [], "page_idx": 20}, {"type": "table", "img_path": "KkYZmepjHn/tmp/45a05a28c442d8fe2493f4be85c9f2a5e3cb0a426a7f41ce9d1a4fcde6fb721a.jpg", "table_caption": ["Table 6: Comparison of left-to-right and right-to-left transition approaches across different datasets and step counts. "], "table_footnote": [], "page_idx": 21}, {"type": "text", "text": "Impact of Transition Order. We further evaluate the impact of transition order. Building upon the results in Table 3, we investigate how the model performance will change if the transition time is influenced by the position of the tokens: from left to right and from right to left. In the left-to-right approach, tokens positioned on the left are transitioned to $\\mathbf{x}_{\\mathrm{0}}$ earlier, and vice versa for the right-toleft approach. Our experiments show that the left-to-right approach consistently outperforms the right-to-left approach across all datasets and step counts, as demonstrated in Table 6. ", "page_idx": 21}, {"type": "text", "text": "This result suggests that the order of token transitions significantly influences the model\u2019s performance, with earlier transitions of left-side tokens leading to better generation quality. ", "page_idx": 21}, {"type": "text", "text": "D Discussion on the Number of Function Evaluations (NFE). ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "In this section, we discuss the number of function evaluations (NFE) in DNDM. According to (9), the update of a token ${\\bf x}_{t-1,n}$ occurs solely at its designated transition time. Meanwhile, if step $t$ does not coincide with a transition time for any token, we maintain the sentence from the preceding step unchanged: $\\mathbf{x}_{t,1:N}=\\mathbf{x}_{t-1,1:N}$ . Therefore, our algorithm removes the need of function evaluation for steps outside the set of transition times. Given this structure, our analytical emphasis is on the transition set $\\tau$ since function evaluations are required only at times $t$ that are members of $\\tau$ . Consequently, the NFE is precisely the cardinality of the transition set, denoted by $|\\tau|$ . In our main paper, we propose a naive upper bound for $|\\tau|$ as $\\operatorname*{min}\\{N,T\\}$ , which effectively demonstrates the speed of our method when $T>N$ . Next, we demonstrate that DNDM also reduces the NFE when $T<N$ , by providing a precise estimation of $|\\tau|$ . ", "page_idx": 21}, {"type": "text", "text": "Theorem D.1. Suppose transition time follows distribution $\\mathcal{D}_{\\tau}$ , and consider a sequence of length $N$ . Then, the cardinality of the transition set $\\mathcal{T}:=\\left\\lbrace\\tau_{1},\\dots,\\tau_{N}\\right\\rbrace$ satisfies: ", "page_idx": 21}, {"type": "text", "text": "\u2022 $1\\leq|{\\mathcal{T}}|\\leq\\operatorname*{min}\\{N,T\\},$ , \u2022 $\\mathbb{E}[|\\mathcal{T}|]=[1-C_{T,N,\\mathcal{D}_{\\tau}}]\\cdot T_{\\tau}$ , where $C_{T,N,D_{\\tau}}$ is a constant in the range $(0,1)$ . Furthermore, ", "page_idx": 21}, {"type": "equation", "text": "$$\nC_{T,N,\\mathcal{D}_{\\tau}}=\\Big(\\sum_{i=1}^{T}(1-p_{i})^{N}\\Big)/T\\geq(1-1/T)^{N},\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "where $p_{i}=\\mathbb{P}(\\tau=i)$ for $\\tau\\sim\\mathcal{D}_{\\tau}$ , and the equality holds if and only $i f\\mathcal{D}_{\\tau}$ is a uniform distribution. ", "page_idx": 21}, {"type": "text", "text": "Proof. The first statement is straightforward. For completeness, the proof is provided. Since there are only $N$ transition times (possibly repeated): $\\tau_{1},\\dots,\\tau_{N}$ , the distinct transition times must satisfy $|\\mathcal{T}|\\leq\\dot{N}$ . Additionally, since $\\mathcal{T}\\subseteq\\{1,\\bar{\\ldots},T\\}$ , we also have $|\\mathcal{T}|\\le T$ . ", "page_idx": 21}, {"type": "text", "text": "To prove the second statement, we decompose $\\tau$ and use the property of expectation. Note that $\\begin{array}{r}{|\\mathcal{T}|=\\sum_{i=1}^{T}\\mathbb{1}\\{i\\in\\mathcal{T}\\}}\\end{array}$ . Thus, ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\mathbb{E}[|\\mathcal{T}|]=\\mathbb{E}\\bigg[\\sum_{i=1}^{T}\\mathbb{1}\\{i\\in\\mathcal{T}\\}\\bigg]=\\sum_{i=1}^{T}\\mathbb{P}(i\\in\\mathcal{T}).\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Assuming $\\mathbb{P}_{D_{\\tau}}(\\tau=i)=p_{i}$ , and that $\\tau_{n}$ are i.i.d. draws from $\\mathcal{D}_{\\tau}$ , we have ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\mathbb{P}(i\\in\\mathcal{T})=1-\\mathbb{P}(i\\notin\\mathcal{T})=1-(1-p_{i})^{N}.\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Substituting (22) into (21) yields ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathbb{E}[\\left|\\mathcal{T}\\right|]=\\sum_{i=1}^{T}\\left[1-(1-p_{i})^{N}\\right]=\\left[1-\\frac{\\sum_{i=1}^{T}(1-p_{i})^{N}}{T}\\right]\\cdot T=[1-C_{T,N,\\mathcal{D}_{T}}]\\cdot T,\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where $\\begin{array}{r}{C_{T,N,\\mathcal{D}_{\\tau}}=\\Big(\\sum_{i=1}^{T}(1-p_{i})^{N}\\Big)/T}\\end{array}$ . An upper bound for $C_{T,N,D_{\\tau}}$ is given as ", "page_idx": 22}, {"type": "equation", "text": "$$\nC_{T,N,\\mathcal{D}_{\\tau}}=\\left[1-\\frac{\\sum_{i=1}^{T}(1-p_{i})^{N}}{T}\\right]\\cdot T\\le\\left[1-\\left(1-\\frac{1}{T}\\right)^{N}\\right]\\cdot T,\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where the inequality holds if and only if $p_{i}=1/T$ for all $i\\in[T]$ , i.e., $\\mathcal{D}_{\\tau}$ is a uniform distribution. ", "page_idx": 22}, {"type": "text", "text": "Remark D.2. Theorem D.1 suggests that even when $T\\leq N$ , our method still provides a significant improvement. Specifically, for $T=N\\geq4$ , we have $\\bar{C_{T,N,\\mathcal{D}_{\\tau}}}=(1-1/N)^{\\dot{N}}\\geq0.3$ . This implies that our model requires at most $0.7T$ even in the worst case. Moreover, if we consider a special scenario where the number of $p_{i}$ satisfying $p_{i}~<~\\epsilon$ is more than $M$ , then we have $C_{T,N,D_{\\tau}}>$ $M(1-\\epsilon)^{N}/T$ , indicating that with $M$ sufficiently large and $\\epsilon$ sufficiently small, $C_{T,N,D_{\\tau}}$ can be pretty close to 1. ", "page_idx": 22}, {"type": "text", "text": "Remark D.3. In practical applications of our model, we employ a beta distribution for $\\mathcal{D}_{\\tau}$ , which typically exhibits a right-heavy tail. Therefore $C_{T,N,D_{\\tau}}$ tends to be larger than that in the worst-case scenario. In Tables 7 and 8, we list the average NFE for each experiment we run in $\\S4$ . These results demonstrate a significant reduction in NFE compared to the original counts: for $T=25$ , the NFE is only about half of the original count; for $T=50$ , it is approximately one-third; and for $T=1000$ , it reduces to less than one-twentieth of the original count. ", "page_idx": 22}, {"type": "text", "text": "Remark D.4. By Bernoulli\u2019s inequality, $(1\\,-\\,p)^{N}\\;>\\;1\\,-\\,N\\,\\cdot\\,p$ for $1\\ >\\ p\\ >\\ 0$ . Therefore, $C_{T,N,D_{\\tau}}>1-\\dot{N}/T$ , implying that $\\mathbb{E}[|\\mathcal{T}|]<N$ . As $T\\rightarrow\\infty$ , assuming the transition time does not concentrate at a single point, the probability that two transitions occur simultaneously is zero. Consequently, the generation process will sequentially go through each token. Thus, the expected number of function evaluations (NFE), $\\mathbb{E}[|\\mathcal{T}|]$ , will be $N$ . In contrast, when $T$ is finite, there is a non-zero probability that multiple transitions happen at the same time. Hence, in this case, the NFE, $|\\tau|$ , is strictly less than $N$ ", "page_idx": 22}, {"type": "text", "text": "Table 7: BLEU score and the average number of function evaluations (NFE) comparison of multinomial diffusion on machine translation benchmarks IWSLT14 DE-EN, WMT14 EN-DE, and WMT16 EN-RO. The blue background highlights our algorithms. The average NFE values are calculated by dividing the number of times calling the denoising function (neural network) during generation by the number of batches, where the batch sizes of all experiments are 100. ", "page_idx": 22}, {"type": "table", "img_path": "KkYZmepjHn/tmp/b474471a0e169a2a5d0078df3aed0315bbf43ad4ee10a7602d7aba6219263aa2.jpg", "table_caption": [], "table_footnote": [], "page_idx": 22}, {"type": "text", "text": "E Discrete Non-Markov Diffusion Model with Top-k Transition Time (DNDM-K). ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Table 8: BLEU score and the average number of function evaluations (NFE) comparison of absorbing diffusion on machine translation benchmarks IWSLT14 DE-EN, WMT14 EN-DE, and WMT16 EN-RO. The blue background highlights our algorithms. The average NFE values are calculated by dividing the number of times calling the denoising function (neural network) during generation by the number of batches, where the batch sizes of all experiments are 100. ", "page_idx": 23}, {"type": "table", "img_path": "KkYZmepjHn/tmp/ced1d34d893b77316b2c0080ffdb587f1820aada27b00be6f6c687411b46a33e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "Algorithm 3 Sampling From DNDM (Version 2) ", "page_idx": 23}, {"type": "text", "text": "Algorithm 4 Sampling From DNDM-K ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Require: Trained prediction function $p_{\\theta}$ , qnoise,   \n$\\mathcal{D}_{\\tau}$   \n1: for $n=1\\ldots N$ do   \n2: Initiate each token xT,n \u223cqnoise   \n3: Initiate the transition time $\\tau_{n}\\sim\\mathcal{D}_{\\tau}$   \n45::  eCnodll efoctr transition time set $\\mathcal{T}=\\{\\tau_{n}\\}_{n=1}^{N}$   \n6: for $t=T\\ldots1$ do   \n7: if $t\\in\\mathcal T$ then   \n8: Generate $\\widetilde{\\mathbf{x}}_{0,1:N}$ from $p_{\\theta}\\big(\\cdot|{\\mathbf{x}}_{t,1:N}\\big)$   \n9: for $n=1\\ldots N$ do   \n10: Update ${\\bf x}_{t-1,n}$ if $\\tau_{n}\\geq t$   \n11: end for   \n12: else   \n13: Update $\\mathbf{x}_{t-1,1:N}=\\mathbf{x}_{t,1:N}$   \n14: end if   \n15: end for   \n16: Return $\\mathbf{x}_{0,1:N}$ ", "page_idx": 23}, {"type": "text", "text": "Input: Trained prediction function $p_{\\theta}$ , qnoise   \nand $\\mathcal{D}_{\\tau}$   \nfor $n=1\\ldots N$ do Initiate each token xT,n \u223cqnoise Initiate the top K number $\\{K_{t}\\}$ Initiate an empty set $U=\\{\\}$ , which includes the index of the tokens that have been updated.   \nend for   \nfor $t=T\\ldots1$ do if $K_{t-1}>K_{t}$ then Calculate the $\\mathcal{P}=\\mathop{\\mathrm{argtop}}_{K_{t}}\\left\\{s_{t,n}\\right\\}_{n=1}^{N}$ ; Generate $\\widetilde{\\mathbf{x}}_{0,1:N}$ from $p_{\\theta}\\big(\\cdot|{\\mathbf{x}}_{t,1:N}\\big)$ Update $\\mathbf{x}_{t-1,n}=\\widetilde{\\mathbf{x}}_{0,n}$ for all $n$ in the set $\\mathcal{P}$ but not in the s e t $U$ (top score but not updated yet) Update the set $U$ by appending the index of the updated tokens else Update $\\mathbf{x}_{t-1,1:N}=\\mathbf{x}_{t,1:N}$ ; end if   \nend for   \nReturn $\\mathbf{x}_{0,1:N}$ . ", "page_idx": 23}, {"type": "text", "text": "Recent works have demonstrated that the quality of samples can be enhanced by utilizing supplementary information derived from the neural network (Ghazvininejad et al., 2019; Savinov et al., 2021; Chang et al., 2022; He et al., 2022). Very recently, Zheng et al. (2023) applied this idea in their RDM framework and can achieve significant performance improvement. Specifically, after decoding $\\widehat{\\mathbf{x}}_{0,1:N}$ from transformer $p_{\\theta}\\big(\\cdot|\\mathbf{x}_{t,1:N}\\big)$ , the score corresponding to this decoded token from the transfo r mer\u2019s last layer, is also recorded and denote as $s_{t,n}$ . Tokens with high scores are more likely to be selected for updates. ", "page_idx": 23}, {"type": "text", "text": "Inspired by Zheng et al. (2023), we introduce the discrete non-Markov discrete diffusion Model with top-K transition time (DNDM-K). Instead of directly determining which token gets updated at step $t$ by first drawing transition time $\\tau\\sim\\mathcal{D}_{\\tau}$ , we employ a two-step process. ", "page_idx": 24}, {"type": "text", "text": "1. We first compute $\\begin{array}{r}{K_{t}=\\sum_{n=1}^{N}\\mathbb{1}(\\tau_{n}\\geq t)}\\end{array}$ . $k_{t}$ represents how many tokens should be decoded at the current step.   \n2. Compare $K_{t-1}$ and $K_{t}$ , if $K_{t-1}\\,=\\,K_{t}$ . There is no transition time at time $t$ , we just update $\\mathbf{x}_{t-1,1:N}=\\mathbf{x}_{t,1:N}$ . If $K_{t-1}>K_{t}$ , Then there exist transition time at time $t$ , we calculate and select the indexes with top- $K_{t-1}$ scores. Then we update those tokens if it hasn\u2019t been updated yet. ", "page_idx": 24}, {"type": "text", "text": "Subsequently, we will only update those tokens with the highest $K_{t}$ score that hasn\u2019t been changed yet. Since the function evaluation occurs only when $K_{t}$ changes, DNDM-K can give an accelerated sampling algorithm. The details are presented in Algorithm 4. ", "page_idx": 24}, {"type": "text", "text": "F Experiment details ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "F.1 Conditional Text Generation ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Parameter choices. In all experiments, the batch size is chosen to be 100. For RDM and RDM- $k$ , our hyperparameter settings follow the original paper (Zheng et al., 2023) except for the batch size. Before the sampling, we used the saved checkpoint of trained models provided by the authors for discrete sampling experiments, and we trained the corresponding models for continuous sampling experiments. ", "page_idx": 24}, {"type": "text", "text": "For finite-step DNDM, the transition times are determined by the schedule, and we approximate the schedule with a Beta distribution $\\mathrm{Beta}(\\alpha,\\beta)$ (please refer to Section 3.2 for detailed explanation). The $\\alpha$ and $\\beta$ values are selected by applying grid search on the validation sets. Based on the BLEU scores on the validation sets, we have selected Beta(15, 7) for Multinormial Diffusion on IWSLT14, Beta $(3,3)$ for Absorbing Diffusion on both IWSLT14 and WMT14, Beta $(5,3)$ for Multinormial Diffusion on WMT14 and Absorbing Diffusion on WMT16, and Beta(20, 7) for Multinormial Diffusion on WMT16. ", "page_idx": 24}, {"type": "text", "text": "For infinite-steps (continuous-step) diffusion (DNDM-C), the transition timestamps are sampled from Beta $(\\alpha,\\beta)$ , where the choice of $(\\alpha,\\beta)$ are chosen from (100.0, 4.0) or (17.0, 4.0), based on the performance comparison on the validation set. In the end we choose Beta(17, 4) for IWSLT14 and Beta $(100,4)$ for WMT14 and WMT16. ", "page_idx": 24}, {"type": "text", "text": "We conduct a performance comparison based on varying configurations of the Beta and Alpha distributions. The results of these comparisons are presented in Tables 10 and 9. Furthermore, to evaluate the efficacy of discrete versus continuous step schemes, we also conduct an ablation study under the same set of parameters $(100,4)$ in Table 11. ", "page_idx": 24}, {"type": "table", "img_path": "KkYZmepjHn/tmp/98931fdd675b543cd992b729de9d06b019fb85be5bdffb45ccb016aba8027f2f.jpg", "table_caption": ["Table 9: BLEU scores on dataset WMT16 from the ablation study of other different Beta $(\\alpha,\\beta)$ distributions of the transition time with 1000 sampling steps. "], "table_footnote": [], "page_idx": 24}, {"type": "table", "img_path": "KkYZmepjHn/tmp/332b30f6fa3f0ccf4195927b9659977199833be395dd2f6b5e3ea9005031fccb.jpg", "table_caption": ["Table 10: BLEU scores on dataset WMT16 from the ablation study of other different Beta $(\\alpha,\\beta)$ distributions of the transition time with 50 sampling steps. "], "table_footnote": [], "page_idx": 25}, {"type": "table", "img_path": "KkYZmepjHn/tmp/8388bcd4f02f3b179a09079d3bfc1b1b9ff26abe7fd326083cae5befb15562cb.jpg", "table_caption": ["Table 11: The BLEU scores on dataset WMT16 with Beta(100,4) as the transition time schedule for discrete sampling or the distribution to sample transition timestamps for continuous sampling. "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "Continuous time vs discrete time diffusions. To test our hypothesis that the continuous-time sampler will produce more accurate results in reverse sampling if our $\\mathbf{x}_{\\mathrm{0}}$ estimator consistently approximates the true $\\mathbf{x}_{\\mathrm{0}}$ over time, we conduct various sampling experiments using a shared pretrained neural network. For discrete-time sampling, we consider three cases: $T\\,=\\,25,50,1000.$ . In each case, we rescale the interval $[0,T]$ to $[0,50]$ and divide it into $T$ fractions. In contrast, for continuous-time sampling, we directly sample from a continuous distribution over the interval $[0,50]$ without any partitioning. ", "page_idx": 25}, {"type": "text", "text": "Training approach. In machine translation tasks, the neural network is designed to learn $q(\\mathbf{x}_{0}|\\mathbf{x}_{t},\\mathbf{z})$ , where $\\mathbf{z}$ represents the embedding of the source text obtained using transformer encoder layers. For a fair comparison, we employ the same neural network structure as our baseline, with detailed architecture specifications available in Section E.2 of Zheng et al. (2023). Furthermore, given that the primary focus of this paper is the speed and effectiveness of our sampling algorithm, we omit the training procedure and instead use a state-of-the-art diffusion-based pretrained checkpoint from Zheng et al. (2023). In the Appendix, we present additional results of continuous sampling based on a continuously trained checkpoint. In this setting, we rescale our network input to the interval $[0,1]$ and uniformly sample from this interval. The rest of the architecture follows that of Zheng et al. (2023). ", "page_idx": 25}, {"type": "text", "text": "Performance on WMT14. Our work primarily focuses on the sampling process, and for the training, we utilized a pretrained checkpoint trained on 50 steps. In our sampling experiments we noticed that our method does not work ideally on WMT14, this could be possibly attributed to the fact that the training performance on WMT14 was not ideal. Specifically, when we performed sampling using 1000 steps, the network was trained with exposure to only 50 time steps, specifically at intervals of 20 (0, 20, 40, ..., 980, 1000). As a result, when we apply our model to generation using 1000 steps, the checkpoint NN has only been explicitly trained on these intervals. While we generally assume that the network can still provide a good estimate for the untrained steps, this might not hold under some hard scenarios. Considering the longer training time and poorer performance of WMT14, it is likely that the training performance is insufficient for us to rely on those unseen steps. In a word, the model\u2019s trained checkpoint may not be robust enough to effectively handle unseen steps, especially for timesteps 1000 or infinite timesteps. ", "page_idx": 25}, {"type": "text", "text": "F.2 Unconditional Text Generation ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Parameter choices. We recover the checkpoints of the multinomial diffusion model employing the provided code by Hoogeboom et al. (2021b). We train 12-layer Transformers for both text8 and enwik8 datasets for 500 epochs with the cosine schedule. For the text8 dataset, we utilize a training batch size of 256, while for the enwik8 dataset, we use a batch size of 128. During training, we employ a learning rate of 0.0001, a weight decay parameter of 0.99, and the Adam optimizer. ", "page_idx": 26}, {"type": "text", "text": "G Additional Experiments ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "In this section, we present additional experimental results. We begin by plotting the relationship between computational time and the number of sampling steps, using the absorbing diffusion in IWSLT14 as an example. Figure 4 displays the growth of computational time for absorbing diffusion (yellow and orange lines), RDM-absorbing diffusion, and our model DNDM-Absorb and DNDM-TAbsorb (green and blue lines). We see from Figure 4 that previous algorithms, including absorbing diffusion and RDM-absorbing diffusion all suffer from linear growth of computational time. ", "page_idx": 26}, {"type": "image", "img_path": "KkYZmepjHn/tmp/2fd8c27bb44bf6ce6ec321712ef966747205edb7797a5524f8e020b33aa474d7.jpg", "img_caption": ["Figure 4: The growth of computational time with the increase of the sampling steps "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "", "page_idx": 26}, {"type": "text", "text": "G.1 Continuous Training ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "In Section 4.1, we introduce the DNDM-C algorithm, designed for continuous-time, over discretetime algorithms. However, this algorithm assumes that we have learned a sufficiently accurate neural network at any timestamp $t^{\\bar{\\mathbf{\\alpha}}}\\in[0,1]$ . Using the checkpoint trained with 50 discrete time partitions might not suffice for the purpose of continuous sampling. In this section, we investigate the performance of continuous sampling when training is also done continuously. ", "page_idx": 26}, {"type": "table", "img_path": "KkYZmepjHn/tmp/db4a117100263f5bc00fd1ccd2cd9c61d2731cc737032d50bc567c2b625ee403.jpg", "table_caption": ["Table 12: Continuous Training $^+$ Continuous Sampling "], "table_footnote": [], "page_idx": 26}, {"type": "text", "text": "In Table 12, we summarize the performance of DNDM-C based on a neural network estimated continuously during training time. This involves sampling time uniformly from [0, 1] during training, and the forward process follows (11) in Section 3.3. The training objective remains the same as in discrete-time training. In Table 12 we list the result of IWSLT14 and WMT16 with continuous training followed by continuous sampling. In addition, we compare the value with the corresponding value during discrete training and continuous sampling in Section 4.1 and mark every item that improves in bold. As demonstrated in Table 12, there is room for enhancement in the overall sampling scores by training the neural network in a complete space of timestamps. ", "page_idx": 27}, {"type": "text", "text": "G.2 Comparison with more generative models ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "In our study, a key aspect of evaluating our fast discrete generative model involves comparisons with prior work known for speed in sampling with minimal steps. Specifically, we draw a direct comparison with the Mask-Predict (Ghazvininejad et al., 2019), which is notable for its ability to generate high-quality results within just 10 iterations. The results are shown in Table 13. All experiments were conducted on the same GPU and within the same machine setup. ", "page_idx": 27}, {"type": "text", "text": "Table 13: The performance comparison on WMT16 of DNDM with Mask-Predict (Ghazvininejad et al., 2019). We align the number of sampling steps used in Mask-Predict with a similar number of function evaluations (NFE) in our DNDM algorithm. We see that our Algorithm runs faster, with better BLEU score. ", "page_idx": 27}, {"type": "table", "img_path": "KkYZmepjHn/tmp/d2577324a349fc73a95ac70b50aad763f18ee2effe0fd2ebcf447e7b6a402b28.jpg", "table_caption": [], "table_footnote": [], "page_idx": 27}, {"type": "text", "text": "G.3 Samples from the multinomial text models ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Conditional Generation. For DNDM-Multi trained on IWSLT14, we provide a full generation process with 100 steps in Figure 5. A token ending with @@ indicates it is an incomplete word; it will be concatenated with the following token to form a complete word. For example, \u201cfel@@ lo@@ $\\overline{{\\mathsf{W S}}}^{\\prime\\prime}$ means \u201cfellows\u2032\u2032. We can see that after $t=39$ , the generate sentence converges. ", "page_idx": 27}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: The contributions are summarized as three points at the end of the introduction. The scope is fast sampling via discrete non-Markov diffusion models, provided in the abstract. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 28}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Justification: We add a limitation section in front of the Appendix ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 28}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: Theorems 3.1, 3.5, and D.1 are clearly stated, well-organized with consistent numbering, and supported by rigorous proofs that establish their validity. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 29}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: The paper provides detailed information on the experimental setup, model architecture, and training procedures. The authors have submitted their training code along with the main paper, which enables reproducibility of the main results. The code and detailed instructions allow other researchers to replicate the key findings of the paper. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: In addition to experiment and implementation details on appendix, we submit our training and evaluation codes when submtting our main paper. ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in ", "page_idx": 29}, {"type": "text", "text": "some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 30}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: All the datasets are public and can be open accessed. Our codebase will be available in public upon acceptance. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 30}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We provide these details on Appendix (D, E, F). Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 30}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: Confidence intervals are provided in the experiments. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. ", "page_idx": 30}, {"type": "text", "text": "\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 31}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We provided detailed information about the computation resources in Section 4: a single NVIDIA258 RTX A6000 GPU with 48 GB memory. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 31}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We have checked NeurIPS Code of Ethics. Our submission satisfies all the requirement. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 31}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We provide Broader Impacts Section in the beginning of Appendix. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed. ", "page_idx": 31}, {"type": "text", "text": "\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 32}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: The paper poses no related risks. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 32}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: All used code, data and models in this project are properly cited Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 32}, {"type": "text", "text": "", "page_idx": 33}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not release new assets. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 33}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 33}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. $\\mathbf{t}=100$   \n[noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise]   \n$\\mathbf{t}=79$   \n[noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] year [noise]   \n$\\mathbf{t}=78$   \n[noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] we [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] year [noise]   \n$\\mathbf{t}=77$   \n[noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] and we [noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] year [noise]   \n$\\mathbf{t}=75$   \n[noise] [noise] [noise] [noise] [noise] [noise] [noise] [noise] and we [noise] [noise] [noise] [noise] govern@@ [noise] [noise] year [noise]   \n$\\mathbf{t}=74$   \nwe [noise] [noise] [noise] lo@@ [noise] [noise] [noise] and we [noise] [noise] [noise] [noise] govern@@ [noise] [noise] year [noise]   \n$\\mathbf{t}=73$   \nwe [noise] [noise] fel@@ lo@@ [noise] [noise] [noise] and we let [noise] [noise] [noise] [noise] govern@@ [noise] [noise] year [noise]   \n$\\mathbf{t}=71$   \nwe [noise] [noise] fel@@ lo@@ [noise] [noise] [noise] and we let [noise] [noise] [noise] [noise] govern@@ [noise] every year [noise]   \n$\\mathbf{t}=67$   \nwe [noise] [noise] fel@@ lo@@ [noise] [noise] [noise] and we let them [noise] [noise] city govern@@ [noise] every year .   \n$\\mathbf{t}=66$   \nwe [noise] [noise] fel@@ lo@@ ws [noise] [noise] and we let them work [noise] city govern@@ [noise] every year .   \n$\\mathbf{t}=64$   \nwe [noise] [noise] fel@@ lo@@ ws [noise] [noise] and we let them work [noise] city govern@@ ance every year .   \n$\\mathbf{t}=61$   \nwe [noise] [noise] fel@@ lo@@ ws [noise] [noise] and we let them work with city govern@@ ance every year .   \n$\\mathbf{t}=60$   \nwe [noise] [noise] fel@@ lo@@ ws [noise] year and we let them work with city govern@@ ance every year .   \n$\\mathbf{t}=58$   \nwe [noise] [noise] fel@@ lo@@ ws every year and we let them work with city govern@@ ance every year .   \n$\\mathbf{t}=52$   \nwe [noise] some fel@@ lo@@ ws every year and we let them work with city govern@@ ance every year .   \n$\\mathbf{t}=39$   \nwe choose some fel@@ lo@@ ws every year and we let them work with city governance every year.   \n$\\mathbf{t}=\\mathbf{0}$   \nwe choose some fel@@ lo@@ ws every year and we let them work with city governance every year. ", "page_idx": 33}, {"type": "text", "text": "", "page_idx": 34}, {"type": "text", "text": "", "page_idx": 35}]