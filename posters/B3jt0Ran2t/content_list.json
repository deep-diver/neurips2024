[{"type": "text", "text": "Probabilistic Analysis of Stable Matching in Large Markets with Siblings ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Anonymous Author(s)   \nAffiliation   \nAddress   \nemail ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "1 We study a practical matching problem that involves assigning children to daycare   \n2 centers. The collective preferences of siblings from the same family introduce   \n3 complementarities, which can lead to the non-existence of stable matchings, as   \n4 observed in the well-studied hospital-doctor matching problems involving couples.   \n5 Intriguingly, stable matchings have been observed in real-world daycare markets,   \n6 even with a substantial number of sibling applicants.   \n7 Our research systematically explores the presence of stable matchings in these   \n8 markets. We conduct a probabilistic analysis of large random matching markets that   \n9 incorporate sibling preferences. Specifically, we examine scenarios where daycares   \n10 have similar priorities over children, a common characteristic in practical markets.   \n11 Our analysis reveals that as the market size approaches infinity, the likelihood of   \n12 stable matchings existing converges to 1.   \n13 To facilitate our investigation, we introduce significant modifications to the Sorted   \n14 Deferred Acceptance algorithm proposed by Ashlagi et al. [2014]. These adapta  \n15 tions are essential to accommodate a more stringent stability concept, as the original   \n16 algorithm may yield matchings that fail to meet this criterion. By leveraging our   \n17 revised algorithm, we successfully identify stable matchings in all real-life datasets   \n18 examined. Additionally, we conduct comprehensive empirical investigations using   \n19 synthetic datasets to validate the efficacy of our algorithm in identifying stable   \n20 matchings. ", "page_idx": 0}, {"type": "text", "text": "21 1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "22 Stability is a foundational concept in preference-based matching theory [Roth and Sotomayor, 1990],   \n23 with significant implications for both theoretical frameworks and practical applications [Roth, 2008].   \n24 Its importance was underscored by the awarding of the 2012 Nobel Prize in Economics. This   \n25 fundamental concept is crucial for the success of various markets, including the National Resident   \n26 Matching Program [Roth, 1984] and public school choice programs [Abdulkadiro\u02d8glu and S\u00f6nmez,   \n27 2003, Abdulkadirog\u02d8lu et al., 2005].   \n28 Despite its significance, the challenge posed by complementarities in preferences often leads to the   \n29 absence of a stable matching. A persistent issue in this context is the incorporation of couples into   \n30 centralized clearing algorithms for professionals like doctors and psychologists [Roth and Peranson,   \n31 1999]. Couples typically view pairs of jobs as complements, which can result in the non-existence of   \n32 a stable matching [Roth, 1984, Klaus and Klijn, 2005]. Moreover, verifying the existence of a stable   \n33 matching is known to be NP-hard, even in restrictive settings [Ronn, 1990, McDermid and Manlove,   \n34 2010, Bir\u00f3 et al., 2014].   \n35 Nevertheless, real-life markets of substantial scale do exhibit stable matchings even in the presence   \n36 of couples. For example, in the psychologists\u2019 markets, couples constituted only about $1\\%$ of all   \n37 participants from 1999 to 2007. Kojima et al. [2013] and Ashlagi et al. [2014] demonstrate that if the   \n38 proportion of couples grows sufficiently slowly compared to the number of single doctors, then a   \n39 stable matching is very likely to exist in a large market.   \n40 In this paper, we shift our attention to daycare matching markets in Japan, where the issue of waiting   \n41 children has become one of the most urgent social challenges due to the scarcity of daycare facilities   \n42 [Kamada and Kojima, 2023]. The daycare matching problem is a natural extension of matching with   \n43 couples, analogous to hospitals and doctors, with the notable distinction that the number of siblings   \n44 in each family can exceed two. We are actively collaborating with multiple municipalities, providing   \n45 advice to design and implement new centralized algorithms tailored to their specific needs.   \n46 The objective of this research is to gain a more nuanced understanding of why stable matchings exist   \n47 in practical daycare markets. Recently, stable matchings have been reported in these markets where   \n48 optimization approaches are utilized, but the underlying reasons have not been thoroughly examined   \n49 [Sun et al., 2023, 2024]. Furthermore, theoretical guarantees established in prior research on matching   \n50 with couples may not readily extend to the daycare market, primarily due to two key factors. Firstly,   \n51 a distinctive characteristic of Japanese daycare markets is the substantial proportion, approximately   \n52 $20\\%$ , of children with siblings. This stands in contrast to the assumption of near-linear growth of   \n53 couples in previous research [Ashlagi et al., 2014]. Secondly, we consider a stronger stability concept   \n54 tailored for daycare markets. Our proposal has been presented to government officials and esteemed   \n55 economists, who concur that this modification better suits the daycare markets1. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "56 Our contributions can be summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "57 Firstly, we formalize a large random market that mirrors the characteristics of realistic daycare   \n58 markets, incorporating family preferences and daycare priorities generated through probability   \n59 distributions. A significant trait observed in practical markets is the tendency for daycares to exhibit   \n60 similar priorities over children. Our central result demonstrates that, in such random markets, the   \n61 probability of a stable matching existing approaches 1 as the market size tends to infinity (Theorem 1).   \n62 To the best of our knowledge, this is the first work to explain the existence of stable matchings in   \n63 these practical daycare markets.   \n64 Secondly, we modify the Sorted Deferred Acceptance algorithm [Ashlagi et al., 2014] to address our   \n65 stronger stability concept, as the original algorithm may not produce a matching that satisfies this   \n66 criterion (Theorem 2). We carefully rectify and extend the algorithm to meet the stronger stability   \n67 requirement (Theorem 3). Notably, we employ our modified algorithm to successfully identify stable   \n68 matchings in all encountered real-life datasets. Additionally, we generate a large number of synthetic   \n69 datasets that closely resemble real-life markets to assess the algorithm\u2019s effectiveness across diverse   \n70 scenarios. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "71 2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "72 We next provide a brief summary of some papers that are closely related to our work. A more detailed   \n73 literature review is presented in Appendix A. A classical work on matching with couples, conducted   \n74 by Kojima et al. [2013], illustrates that as the market size approaches infinity, the probability of a   \n75 stable matching existing converges to 1, given the grow\u221ath rate of couples is suitably slow in relation   \n76 to the market size, e.g., when the number of couples is $\\sqrt{n}$ where $n$ represents the number of singles.   \n77 Ashlagi et al. [2014] propose an improved matching algorithm, building on the foundation laid by   \n78 Kojima et al. [2013]. This refined algorithm demonstrates that, even if the number of couples grows   \n79 at a near-linear rate of $n^{\\epsilon}$ with $0<\\epsilon<1$ , a stable matching can still be found with high probability.   \n80 In contrast, Ashlagi et al. [2014] highlight that as the number of couples increases at a linear rate,   \n81 the probability of a stable matching existing diminishes significantly. In practical applications, the   \n82 National Resident Matching Program employed a heuristic based on the incremental algorithm   \n83 proposed by Roth and Vate [1990]. Bir\u00f3 et al. [2016] proposed a different approach involves the   \n84 utilization of the Scarf algorithm [Scarf, 1967] to identify a fractional matching. If the outcome   \n85 proves to be integral, it is then considered a stable matching. Moreover, researchers have explored   \n86 the application of both integer programming and constraint programming to address the complexities   \n87 of matching with couples [Manlove et al., 2007, Bir\u00f3 et al., 2014, Manlove et al., 2017]. Notably,   \n88 these methodologies have recently been adapted in the daycare matching market as well [Sun et al.,   \n89 2023, 2024]. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "90 3 Preliminaries ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "91 In this section, we present the framework of a daycare market, expanding upon the classical problem   \n92 of hospital-doctor matching with couples. We also generalize three fundamental properties that have   \n93 been extensively examined in the literature of two-sided matching markets. ", "page_idx": 2}, {"type": "text", "text": "94 3.1 Model ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "95 The daycare matching problem is represented by the tuple $I=(C,F,D,Q,\\succ_{F},\\succ_{D})$ , where $C,F$   \n96 and $D$ denote sets of children, families, and daycare centers, respectively.   \n97 Each child $c\\in C$ belongs to a family denoted as $f(c)\\in F$ . Each family $f\\in F$ is associated with a   \n98 subset of children, denoted as $C(f)\\stackrel{}{\\subseteq}C$ . In cases where a family contains more than one child, e.g.,   \n99 $C(f)=\\{c_{1},\\cdot\\cdot\\cdot,c_{k}\\}$ with $k>1$ , these siblings are arranged in a predefined order, such as by age.   \n100 Let $D$ represent a set of daycare centers, referred to as \u201cdaycares\u201d for brevity. A dummy daycare   \n101 denoted as $d_{0}$ is included in $D$ , signifying the possibility of a child being unmatched. Each individual   \n102 daycare $d$ establishes a quota, denoted as $Q(d)$ , where the symbol $Q$ represents all quotas.   \n103 Each family $f$ reports a strict preference ordering $\\succ f$ , defined over tuples of daycare centers, reflecting   \n104 the collective preferences of the children within ${\\dot{C}}(f)$ . The notation $\\succ f,j$ is used to represent the $j$ -th   \n105 tuple of daycares $\\operatorname{in}\\succ f$ , and the overall preference profile of all families is denoted $\\mathrm{as}\\succ_{F}$ .   \n106 Example 1. Consider family $f$ with $C(f)=\\{c_{1},c_{2},\\ldots,c_{k}\\}$ where the children are arranged in $a$   \n107 predetermined order. $A$ tuple of daycares $i n\\succ f$ , denoted as $(d_{1}^{*},d_{2}^{*},\\ldots,d_{k}^{*})$ , indicates that for each   \n108 $i\\in\\{1,2,\\ldots,k\\}$ , child $c_{i}$ is matched to some daycare $d_{i}^{*}\\in D$ . It\u2019s possible that $d_{i}^{*}=d_{j}^{*}$ , indicating   \n109 that both child $c_{i}$ and child $c_{j}$ are matched to daycare $d_{i}^{*}$ .   \n110 Each daycare $d\\in D$ maintains a strict priority ordering $\\succ_{d}$ over $C\\cup\\emptyset$ , encompassing both the set of   \n111 children $C$ and an empty option. A child $c\\in C$ is considered acceptable to daycare $d$ if $c\\succ_{d}\\emptyset$ , and   \n112 deemed unacceptable if $\\emptyset\\succ_{d}c$ . The priority profile of all daycares is denoted as $\\succ_{D}$ .   \n113 A matching $\\mu$ is defined as a function $\\mu:C\\cup D\\rightarrow C\\cup D$ satisfying the following conditions:   \n114 i) $\\forall c\\in C$ , $\\mu(c)\\in D$ , ii) $\\forall d\\in D$ , $\\mu(d)\\subseteq C$ , and iii) $\\forall c\\in C$ , $\\forall d\\in D$ , $\\mu(c)\\,=\\,d$ if and only   \n115 if $c\\in\\mu(d)$ . Given a matching $\\mu$ , we designate $\\mu(c)$ as the assignment of child $c$ and $\\mu(d)$ as the   \n116 assignment of daycare $d$ . For a family $f$ with children $C(f)=\\{c_{1},...,c_{k}\\}$ , we denote the assignment   \n117 for family $f$ as $\\mu(f)=\\big(\\mu(c_{1}),...,\\mu(c_{k})\\big)$ . ", "page_idx": 2}, {"type": "text", "text": "118 3.2 Fundamental Properties ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "119 The first property, individual rationality, stipulates that each family is matched to some tuple of   \n120 daycares that are weakly better than being unmatched, and no daycare is matched with an unacceptable   \n121 child. It is noteworthy that each family is considered an agent, rather than individual children.   \n122 Definition 1 (Individual Rationality). A matching $\\mu$ satisfies individual rationality if i) $\\forall f\\ \\in$   \n123 $F,\\mu(f)\\succ(d_{0},\\cdot\\cdot\\cdot,d_{0})$ or $\\mu(f)=(d_{0},\\cdot\\cdot\\cdot,d_{0})$ , and ii) $\\forall d\\in D,\\forall c\\in\\mu(d),c\\succ_{d}\\varnothing.$ .   \n124 Feasibility in Definition 2 necessitates that i) each child is assigned to one daycare including the   \n125 dummy daycare $d_{0}$ , and ii) the number of children matched to each daycare $d$ does not exceed its   \n126 specific quota $Q(d)$ .   \n127 Definition 2 (Feasibility). A matching $\\mu$ is feasible if it satisfies the following conditions: i) $\\forall c\\in C$ ,   \n128 $|\\mu(c)|=1$ , and ii) $\\forall d\\in D$ , $|\\mu(d)|\\leq Q(d)$ .   \n129 Stability is a well-explored solution concept within the domain of two-sided matching theory. Before   \n130 delving into its definition, we introduce the concept of a choice function as outlined in Definition 3. It   \n131 captures the intricate process by which daycares select children, capable of incorporating various   \n132 considerations such as priority, diversity goals, and distributional constraints (see, e.g., [Hatfield and   \n133 Milgrom, 2005, Aziz and Sun, 2021, Suzuki et al., 2023, Kamada and Kojima, 2023]). Following the   \n134 work by Ashlagi et al. [2014], our choice function operates through a greedy selection of children   \n135 based on priority only, simplifying the representation of stability.   \n136 Definition 3 (Choice Function of a Daycare). For a given set of children $C^{\\prime}\\subseteq C$ , the choice function   \n137 of daycare $d_{;}$ , denoted as $\\mathrm{Ch}_{d}(C^{\\prime})\\ \\stackrel{\\cdot}{\\subseteq}C^{\\prime}$ , selects children one by one in descending order of $\\succ_{d}$   \n138 without exceeding quota $Q(d)$ .   \n139 In this paper, we explore a slightly stronger stability concept than the original one studied in Ashlagi   \net al. [2014]. It extends the idea of eliminating blocking pairs [Gale and Shapley, 1962] to address   \n141 the removal of blocking coalitions between families and a selected subset of daycares.   \n142 Definition 4 (Stability). Given a feasible and individually rational matching $\\mu,$ , family $f$ with   \n143 children $C(f)\\;=\\;\\{c_{1},...,c_{k}\\}$ and the $j$ -th tuple of daycares $\\succ_{f,j}=\\left(d_{1}^{*},...,d_{k}^{*}\\right)\\,i n\\succ_{f}$ , form $a$   \n144 blocking coalition if the following two conditions hold,   \n145 $(I)$ family $f\\,p r e f e r s\\succ_{f,j}$ to its current assignment $\\mu(f)$ , i.e., $(d_{1}^{*},...,d_{k}^{*})\\succ_{f}\\mu(f)$ , and   \n146 (2) for each distinct daycare $d$ in $(d_{1}^{*},...,d_{k}^{*})$ , $C(f,j,d)\\subseteq\\operatorname{Ch}_{d}((\\mu(d)\\backslash C(f))\\cup C(f,j,d))$ holds,   \n147 where $C(f,j,d)\\subseteq C(f)$ denotes a subset of children who apply to daycare $d$ with respect $t o\\succ f,j$ .   \n148 A feasible and individually rational matching satisfies stability if no blocking coalition exists.   \n149 Consider the input to $\\operatorname{Ch}_{d}(\\cdot)$ in Condition 2. First, we calculate $\\mu(d)\\backslash C(f)$ , representing the children   \n150 matched to $d$ in matching $\\mu$ but not from family $f$ . Then, we consider $C(f,j,d)$ , which denotes the   \n151 subset of children from family $f$ who apply to $d$ according to the tuple of daycares $\\succ f,j$ .   \n152 This process accounts for situations where a child $c$ is paired with $d$ in $\\mu$ but is not included in   \n153 $C(f,\\bar{\\j},d)$ , indicating that $c$ is applying to a different daycare $d^{\\prime}\\neq d$ according $\\mathrm{to}\\succ f,j$ . Consequently,   \n154 child $c$ has the flexibility to pass his assigned seat from $d$ to his siblings in need. Otherwise, child $c$   \n155 would compete with his siblings for seats at $d$ despite he intends to apply elsewhere.   \n156 In contrast, the original concept by Ashlagi et al. [2014] does not take siblings\u2019 assignments into   \n157 account. We illustrate the differences between the two concepts in Example 2. More detailed   \n158 motivation for our definition and further discussions are provided in Appendices B.1 and B.2.   \n159 Example 2 (Example of Stability). Consider one family $f$ with two children $C(f)=\\{c_{1},c_{2}\\}$ . There   \n160 are three daycares: $D\\,=\\,\\{d_{0},\\dot{d}_{1},d_{2}\\}$ , each with one slot. The preference profile of family $f$ is   \n161 $(d_{1},d_{2})\\succ_{f}\\dot{(d_{2},d_{0})}$ . Each daycare prefers $c_{1}$ over $c_{2}$ .   \n162 The matching $(d_{2},d_{0})$ is deemed stable by Ashlagi et al. [2014], but it is not considered stable by   \n163 Definition 4. This is because it is blocked by family $f$ and the pair $(d_{1},d_{2})$ . Here, child $c_{1}$ passes his   \n164 seat at $d_{2}$ to $c_{2}$ , allowing both children to potentially be matched to a more preferred assignment.   \n165 It is well-known that a stable matching is not guaranteed when couples exist [Roth, 1984]. We provide   \n166 an example to illustrate that even when each family has at most two children, and all daycares have the   \n167 same priority ordering over children, a stable matching may not exist. Please refer to Appendix B.3   \n168 for details. ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "169 4 Random Daycare Market ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "170 To analyze the likelihood of a stable matching in practice, we proceed to introduce a random market   \n171 where preferences and priorities are generated from probability distributions. Formally, we represent   \n172 a random daycare market as $\\tilde{I}=(C,F,D,Q,\\alpha,\\beta,L,\\mathcal{P},\\rho,\\sigma,\\mathcal{D}_{\\succ_{0},\\phi},\\varepsilon)$ .   \n173 Let $|C|=n$ and $|D|=m$ denote the number of children and daycares, respectively. Throughout   \n174 this paper, we assume that $\\smash{m=\\Omega(\\boldsymbol{n})}$ . To facilitate analysis, we partition the set $F$ into two distinct   \n175 groups labeled $F^{S}$ and $F^{O}$ , signifying the sets of families with and without siblings, respectively.   \n176 Correspondingly, $C^{S}$ and $C^{O}$ represent the sets of children with and without siblings, respectively.   \n177 The parameter $\\alpha$ signifies the percentage of children with siblings. Then we have $|\\bar{C^{O}}|=\\bar{(}1-\\alpha)\\bar{n}$   \n178 and $\\left\\vert C^{S}\\right\\vert=\\alpha n$ . For each family $f$ , the size of $C(f)$ is constrained by a constant $\\beta$ , expressed as   \n179 $\\operatorname*{max}_{f\\in F}|C(f)|\\leq\\beta$ . ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "180 4.1 Preferences of Families ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "181 We adopt the approach outlined in Kojima et al. [2013] to generate family preferences through a   \n182 two-step process. In the first step, we independently generate preference orderings for each child   \n183 from a probability distribution $\\mathcal{P}$ on daycares $D$ . Subsequently, we employ a function $\\rho$ to aggregate   \n184 the individual preferences of children within each family into a collective preference ordering.   \n185 The procedure for generating preference orderings for each child operates as follows. Let ${\\mathcal{P}}=$   \n186 $(p_{d})\\bar{d}\\epsilon{\\cal D}$ be a probability distribution, where $p_{d}$ represents the probability of selecting daycare $d$ . For   \n187 each child $c$ , start with an empty list, independently choose a daycare $d$ from $\\mathcal{P}$ , and add it to the   \n188 list if it is not already included. Repeat this process until the length of the list reaches the maximum   \n189 length $L$ , a relatively small constant in practice.   \n190 We adhere to the assumption that the distribution $\\mathcal{P}$ satisfies a uniformly bounded condition, as   \n191 assumed in the random market by Kojima et al. [2013] and Ashlagi et al. [2014].   \n192 Definition 5 (Uniformly Bounded). For all $d,d^{\\prime}\\in D$ , the ratio of probabilities $p_{d}/p_{d^{\\prime}}$ falls within   \n193 the interval $[1/\\sigma,\\sigma]$ with a constant $\\sigma\\geq1$ .   \n194 Lemma 1. Under the uniformly bounded condition, the probability $p_{d}$ of selecting any daycare $d$ is   \n195 limited by $\\sigma/m$ where m denotes the total number of daycares.   \n196 For families with multiple siblings, we do not impose additional constraints on the function $\\rho$ that   \n197 aggregates individual preferences into collective preferences. ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "198 4.2 Priorities of Daycares ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "199 A notable departure from previous work [Kojima et al., 2013] and [Ashlagi et al., 2014], is our   \n200 adoption of the Mallows model [Mallows, 1957] to generate daycare priority orderings over children.   \n201 In the Mallows model, represented as $\\mathcal{D}_{\\succ_{0},\\phi}$ , a reference ordering $\\succ_{0}$ is first determined. New   \n202 orderings are then probabilistically generated based on this reference, controlled by a dispersion   \n203 parameter $\\phi$ . This model is widely used for preference generation in diverse contexts $\\mathrm{[Lu}$ and   \n204 Boutilier, 2011, Brilliantova and Hosseini, 2022]. Let $S$ denote the set of all orderings over $C$ .   \n205 Definition 6 (Kendall-tau Distance). For a pair of orderin $g s\\succ a n d\\succ^{\\prime}i n\\;S$ , the Kendall-tau distance,   \n206 denoted by $\\mathrm{inv}(\\succ,\\succ^{\\prime})$ , is a metric that counts the number of pairwise inversions between these two   \n207 orderings. Formally, $\\operatorname{inv}(\\succ,\\succ^{\\prime})=|\\{c,c^{\\prime}\\in C\\;|\\;c\\succ^{\\prime}c^{\\prime}$ and $c^{\\prime}\\succ c\\}|$ .   \n208 Definition 7 (Mallows Model). Let $\\phi\\in(0,1]$ be a dispersion parameter and $\\begin{array}{r}{Z=\\sum_{\\succ\\in S}\\phi^{\\mathrm{inv}(\\succ,\\succ_{0})}}\\end{array}$ .   \n209 The Mallows distribution is a probability distribution over $S$ . The probability that an orderin $\\vert g\\succ i n$   \n210 $S$ is drawn from the Mallows distribution is given by ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathrm{Pr}[\\succ]=\\frac{1}{Z}\\,\\phi^{\\mathrm{inv}(\\succ,\\succ_{0})}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "211 The dispersion parameter $\\phi$ characterizes the correlation between the sampled ordering and the   \n212 reference ordering $\\succ_{0}$ . Specifically, when $\\phi$ is close to 0, the ordering drawn from $\\mathcal{D}_{\\succ_{0},\\phi}$ is almost   \n213 the same as the reference ordering $\\succ_{0}$ . On the other hand, when $\\phi=1$ , $\\mathcal{D}_{\\succ_{0},\\phi}$ corresponds to the   \n214 uniform distribution over all permutations of $C$ .   \n215 In the practical daycare matching market, every municipality assigns a unique priority score to each   \n216 child, establishing a strict priority order utilized and slightly adjusted by all daycares. Siblings within   \n217 the same family usually share identical priority scores, with ties being resolved arbitrarily.   \n218 Motivated by this observation, we construct a reference ordering $\\succ_{0}$ as follows: Begin with an empty   \n219 list and include all children $C^{O}$ in the list. For each family $f\\in F^{S}$ , add children $C(f)$ to the list   \n220 with a probability of $1/n^{1+\\varepsilon}$ , and include $f$ in the list with a probability of $1-1/n^{1+\\varepsilon}$ for a constant   \n221 $\\varepsilon>0$ . Subsequently, shuffle all permutations of the elements in the list. Finally, $\\succ_{0}$ is drawn from a   \n222 uniform distribution over all permutations of the shuffled elements in the list. In other words, with a   \n223 probability of $1/n^{1+\\varepsilon}$ , we treat siblings from the same family separately, and with a probability of   \n224 $\\mathrm{i}-1/n^{1+\\varepsilon}$ , we treat them as a whole, or more precisely, as a continuous block in $\\succ_{0}$ .   \n225 Definition 8 (Diameter). Given a reference ordering $\\succ_{0}$ over children $C$ , we define the di  \n226 ameter of family $f$ , denoted by $\\dim_{f}$ , as the greatest difference $i n\\,\\succ_{0}$ among $C(f)$ . For  \n227 mally, $\\begin{array}{r}{\\mathrm{diam}_{f}=\\left|\\left\\{c\\in C\\ \\middle\\vert\\ \\operatorname*{max}_{c^{\\prime}\\in C(f)}\\dot{c^{\\prime}}\\succ_{0}c\\succ_{0}\\operatorname*{min}_{c^{\\prime\\prime}\\in C(f)}c^{\\prime\\prime}\\right\\}\\right|+2}\\end{array}$ where ${\\mathrm{max}}_{c\\in C(f)}\\,c$ (resp.   \n228 $\\operatorname*{min}_{c\\in C(f)}c)$ refers to the child in $C(f)$ with the highest (resp. lowest) priority $i n\\succ_{0}$ .   \n229 The methodology employed to generate the reference ordering $\\succ_{0}$ above adheres to the following   \n230 condition. For each family $f$ with siblings, we have $\\begin{array}{r}{\\operatorname*{Pr}\\bigl[\\dim_{f}\\ \\geq\\ |C(f)|\\bigr]\\ \\leq\\ \\frac{1}{n^{1+\\varepsilon}}}\\end{array}$ from the   \n231 construction.   \n232 We concentrate on a random market $\\tilde{I}$ where all parameters are set as mentioned above. Our main   \n233 result is encapsulated in the following theorem.   \n234 Theorem 1. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , the probability of the existence of a   \n235 stable matching converges to 1 as n approaches infinity.   \n236 We will prove Theorem 1 by demonstrating that an algorithm, namely the Extended Sorted Deferred   \n237 Acceptance algorithm (to be defined in the next section), produces a stable matching with a probability   \n238 that converges to 1 in the random market. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "239 5 Extended Sorted Deferred Acceptance ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "240 In this section, we propose the Extended Sorted Deferred Acceptance (ESDA) algorithm, a heuristic   \n241 approach that has proven effective in computing stable matchings across a variety of real-life daycare   \n242 datasets. Importantly, the ESDA algorithm serves as a foundational component in our probability   \n243 analysis for large random markets.   \n244 The ESDA algorithm is an extension of the Sorted Deferred Acceptance (SDA) algorithm [Ashlagi   \n245 et al., 2014], originally designed for matching with couples. More details of the SDA algorithm are   \n246 presented in Appendix C.3. In the following theorem, we demonstrate that the SDA algorithm may   \n247 not produce a stable matching with respect to Definition 4 when it terminates without failure. The   \n248 proof of Theorem 2 is presented in Appendix C.4. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "249 Theorem 2. The matching returned by the original SDA algorithm may not be stable. ", "page_idx": 5}, {"type": "text", "text": "250 We next give an informal description of ESDA. The algorithm begins by computing a stable matching   \n251 without considering families with siblings, denoted as $F^{S}$ , using the Deferred Acceptance algorithm   \n252 (see Appendix C.1). Subsequently, it sequentially processes each family, denoted as $f$ , based on a   \n253 predefined order denoted as $\\pi$ . Children without siblings who are displaced by family $f$ are processed   \n254 individually, enabling them to apply to daycare centers from their top choices in their preference   \n255 orderings. If any child from family $\\check{f}^{\\prime}\\in F^{\\check{S}}$ with siblings is rejected during this process, a new order   \n256 $\\pi^{\\prime}$ is attempted, with $f$ being inserted before $f^{\\prime}$ . If the outcome before inserting family $f$ becomes   \n257 different after processing family $f$ , then we check whether family $f$ can be matched to a better tuple   \n258 of daycares from their top choices. The algorithm terminates and returns a failure if any child from   \n259 family $f$ is rejected or if the same permutation has been attempted twice.   \n260 We offer a brief elucidation on the differences between our ESDA algorithm and the original SDA.   \n261 Firstly, the input to the choice function of daycares differs. In our algorithm, children have the option   \n262 to transfer their allocated seats to other siblings, a feature not present in the original SDA. Secondly,   \n263 we meticulously examine whether any family could establish a blocking coalition with a tuple of   \n264 daycares that previously rejected it whenever the assignment of any child without siblings is changed.   \n265 In contrast, SDA goes through each tuple of daycares once without performing this check.   \n266 We illustrate how ESDA works through Example 3. A formal description of ESDA is presented in   \n267 Algorithm 1 in Appendix D, along with all technical details.   \n268 Example 3. Consider three families $f_{1}$ with $C(f_{1})=\\{c_{1},\\,c_{2}\\}$ , $f_{2}$ with $C(f_{2})=\\{c_{3},\\,c_{4}\\}$ and $f_{3}$   \n269 with $C(f_{3})=\\{c_{5},\\,c_{6}\\}$ . There are five daycares denoted as $D=\\{d_{1},\\,d_{2},\\,d_{3},\\,d_{4},\\,d_{5}\\}$ , each with one   \n270 available slot. The order $\\pi$ is initialized as $\\{1,2,3\\}$ . The preference profile of the families and the   \n271 priority profile of the daycares are outlined as follows: ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\succ_{f_{1}}\\colon(d_{1},d_{2}),(d_{1},d_{4})\\phantom{\\succ_{d_{1}}\\colon c_{1},c_{5}}\\succ_{d_{2}}:c_{6},c_{2}}\\\\ &{\\succ_{f_{2}}\\colon(d_{3},d_{4}),(d_{5},d_{4})\\phantom{\\succ_{d_{3}}\\colon c_{3},c_{5}}\\succ_{d_{4}}:c_{6},c_{4},c_{2}}\\\\ &{\\succ_{f_{3}}\\colon(d_{1},d_{4}),(d_{3},d_{4}),(d_{5},d_{2})\\phantom{\\succ_{d_{3}}\\colon c_{3},c_{5}}\\succ_{c_{3}},c_{5}}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "272 Iteration 1: With order $\\pi_{1}=\\{1,2,3\\}$ , family $f_{1}$ secured a match by applying to daycares $(d_{1},d_{2})$ ,   \n273 followed by family $f_{2}$ obtaining a match with applications to $(d_{3},d_{4})$ . However, family $f_{3}$ faced   \n274 rejections at $(d_{1},d_{4})$ and $(d_{3},d_{4})$ before successfully securing acceptance at $(d_{5},d_{2})$ , leading to the   \n275 displacement of family $f_{1}$ . Thus we generate a new order $\\pi_{2}=\\{3,1,2\\}$ by inserting 3 before 1.   \n276 Iteration 2: With order $\\pi_{2}=\\{3,1,2\\}$ , family $f_{3}$ secures a match at $(d_{1},d_{4})$ . Then family $f_{1}$ applies   \n277 to $(d_{1},d_{2})$ and also secures a match, resulting in the eviction of family $f_{3}$ . This leads to the generation   \n278 of a modified order $\\pi_{3}=\\{1,3,2\\}$ with 1 preceding 3.   \n279 Iteration 3: With order $\\pi_{3}=\\{1,3,2\\}$ , family $f_{1}$ secures a match at $(d_{1},d_{2})$ . Subsequent applications   \n280 by $f_{3}$ result in a match at $(d_{3},d_{4})$ , but $f_{2}$ remains unmatched due to rejections at $(d_{3},d_{4})$ and $(d_{5},d_{4})$ .   \n281 The algorithm terminates, returning a stable matching $\\mu$ with $f_{1}$ matched to $(d_{1},d_{2})$ and $f_{3}$ matched   \n282 to $(d_{3},d_{4})$ , while $f_{2}$ remains unmatched. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "283 5.1 Termination without Failure ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "284 We demonstrate that ESDA always generates a stable matching if it does not terminate with failures.   \n285 Our proof relies on the following two facts, which are formally presented in Appendix D.1. First,   \n286 6 we establish that the number of matched children at each daycare does not decrease as long as no   \n287 family in $F^{S}$ is rejected and no child passes their seat to other siblings during the execution of ESDA.   \n288 Second, we prove that for a given order $\\pi$ over $F^{S}$ , if the rank of the matched child at any daycare   \n289 increases, then ESDA cannot produce a matching with respect to $\\pi$ . The detailed proof for Theorem 3   \n290 is presented in Appendixes D.1 and D.2.   \n291 Theorem 3. Given an instance of I, if ESDA returns a matching without failure, then the yielded   \n292 matching is stable. In addition, ESDA always terminates in a finite time, either returning a matching   \n293 or a failure. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "294 5.2 Two Types of Failure of ESDA ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "295 Theorem 3 states that if the algorithm successfully concludes, it results in a stable matching. Con  \n296 versely, the algorithm returns failures in two scenarios, suggesting that a stable matching may not   \n297 exist, even if one indeed exists.   \n298 Formally, a Type-1 Failure happens when, during the insertion of a family $f\\in F^{S}$ , a child $c\\in C(f)$   \n299 initiates a rejection chain that ends with another child $c^{\\prime}\\in C(f)$ from the same family, where all   \n300 other children in the chain do not have siblings. This failure is further divided into two cases based   \n301 on whether $c=c^{\\prime}$ holds: Type-1-a Failure when $c=c^{\\prime}$ and Type-1-b Failure when $c\\neq c^{\\prime}$ .   \n302 A Type-2 Failure occurs if there exist two families $f_{1},f_{2}\\in F^{S}$ satisfying the following conditions: i)   \n303 $f_{1}$ appears before $f_{2}$ in the current order $\\pi$ , ii) There exists a rejection chain starting from $f_{2}$ and   \n304 ending with $f_{1}$ where all other families in the chain have an only child, and iii) A new order $\\pi^{\\prime}$ ,   \n305 obtained by placing $f_{2}$ in front of $f_{1}$ , has been attempted and stored in the set of $\\Pi$ , which keeps   \n306 track of permutations tried during the ESDA process.   \n307 These two types of failures are crucial when analyzing the probability of the existence of stable   \n308 matchings in a large random market. Detailed examples illustrating these two types of failures can be   \n309 found in Appendix D.3. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "310 6 Skecthed Proof of Theorem 1 ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "311 Our main approach to proving Theorem 1 is to set an upper limit on the likelihood of encountering   \n312 the two types of failure in the ESDA algorithm.   \n313 The following two lemmas establish that as $n$ approaches infinity, Type-1-a and Type-1-b Failures are   \n314 highly unlikely to occur when the dispersion parameter $\\phi$ is on the order of $O(\\log n/n)$ . We defer   \n315 the proofs for these results to Appendices E.2 and E.3, respectively.   \n316 Lemma 2. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , the probability of Type-1-a Failure in   \n317 the SDA algorithm is bounded by $O\\left((\\log n)^{2}/n\\right)$ .   \n318 Lemma 3. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , the probability of Type-1-b Failure in   \n319 the SDA algorithm is bounded by $O\\left((\\log n)^{2}/n\\right)+O(n^{-\\varepsilon})$ .   \n320 We introduce concepts of domination and nesting to analyze the case of Type-2 Failure.   \n321 Definition 9 (Domination). Given a priority ordering $\\succ$ , we say that family $f$ dominates $f^{\\prime}$ w.r.t.   \n322 $\\succ i f\\operatorname*{max}_{c\\in C(f)}c\\succ\\operatorname*{min}_{c^{\\prime}\\in C(f^{\\prime})}c^{\\prime}$ where ${\\mathrm{max}}_{c\\in C(f)}\\,c$ (resp. $\\operatorname*{min}_{c\\in C(f)}$ c) represents the child in   \n323 $C(f)$ with the highest (resp. lowest) priority under the priority ordering $\\succ$ .   \n324 In simple terms, if $f$ dominates $f^{\\prime}$ , then there is a possibility that $f^{\\prime}$ will be rejected by daycares with   \n325 a certain order $\\succ$ due to an application of $f$ .   \n326 Intuitively, a Type-2 Failure can arise from a cycle in which two families with siblings reject each   \n327 other. We introduce the concept of nesting as follows.   \n328 Definition 10 (Nesting). Given a priority orderin $g\\succ$ , two families $f$ and $f^{\\prime}$ are said to be nesting $i f$   \n329 they mutually dominate each other under $\\succ$ .   \n330 Example 4. Consider three families $\\boldsymbol{F}=\\{f_{1},f_{2},f_{3}\\}$ , each with two children: $C(f_{1})=\\{c_{1},c_{2}\\}$ ,   \n331 $C(f_{2})\\bar{=}\\left\\{c_{3},c_{4}\\right\\}$ , and $C(f_{3})=\\{c_{5},c_{6}\\}$ . Suppose there is a priority ordering $\\succ\\colon c_{1},\\,c_{3},\\,c_{5},\\,c_{2},\\,c_{4}$ ,   \n332 $c_{6}$ . In this case, all pairs in $F$ nest with each other with respect $t o\\succ$ .   \n333 We next show that if any two families do not nest with each other with respect to $\\succ_{0}$ , then Type-2   \n334 Failure is unlikely to occur as $n$ tends to infinity in Lemma 4. We defer the proof to Appendix E.4.   \n335 Lemma 4. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , and for any two families $f,f^{\\prime}\\in F^{S}$   \n336 that are not nesting with each other with respect $t o\\succ_{0}$ , then Type-2 Failure occurs with a probability   \n337 of at most $O(\\log n/n)$ .   \n338 Following an analysis of the probability that any two pairs of families from $F^{S}$ nest with each other   \n339 with respect to the reference ordering $\\succ_{0}$ , we establish the probability of Type-2 Failure in Lemma 5.   \n340 Lemma 5. Given a random market $\\tilde{I}$ with $\\phi\\,=\\,O(\\log n/n)$ , the probability of Type-2 Failure   \n341 occurring is bounded by $O(\\log n/n)+O\\big(n^{-2\\varepsilon}\\big)$ .   \n342 Lemma 2, Lemma 3, and Lemma 5 imply the existence of a stable matching with high probability for   \n343 the large random market, thus concluding the proof of Theorem 1. Further elaboration and details   \n344 can be found in Appendix E. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "345 7 Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "346 In this section, we conduct comprehensive experiments to eval  \n347 uate the effectiveness of our proposed ESDA algorithm. The   \n348 experimental results demonstrate our hypothesis that a stable   \n349 matching exists with high probability when daycare centers   \n350 have similar priority orderings over children.   \n351 We analyze two types of datasets. Firstly, we evaluate our   \n352 algorithm using six real-life datasets provided by three munic  \n353 ipalities. In Appendix F.2, we provide a detailed description of   \n354 the practical daycare matching markets based on datasets. In   \n355 addition, we introduce slight modifications to daycare priorities   \n356 while keeping other factors constant. Secondly, we generate   \n357 synthetic datasets that mirror the characteristics of real-life mar  \n358 kets but on a much larger scale. By adjusting the dispersion   \n359 parameter in the Mallows model, we create daycare priorities   \n360 with varying degrees of similarity.   \n361 Given the limitations of the ESDA algorithm in computing   \n362 stable matchings in certain scenarios, we employ a constraint   \n363 programming (CP) approach as an alternative. This method   \n364 consistently generates a stable matching whenever one exists   \n365 [Sun et al., 2024]. We implement them in Python and execute   \n366 them on a standard laptop without additional computational resources. To generate priorities from   \n367 the Mallows distributions, we utilize the PrefLib library [Mattei and Walsh, 2013] ", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "image", "img_path": "B3jt0Ran2t/tmp/0c1e5c7c8183c606f9f07948fcc8bc232f6d098c6c838fd3ba41ab34c4a60295.jpg", "img_caption": ["Figure 1: Results of experiments on real-world data perturbed by the Mallows distributions. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "368 7.1 Experiments on Real-life Datasets ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "369 We present the experimental results on the six real-life datasets. It is noteworthy that the ESDA   \n370 algorithm not only successfully identifies a stable matching but also consistently produces the   \n371 same outcome as the constraint programming (CP) solution for all datasets. Moreover, the ESDA   \n372 algorithm achieves a computation time that is more than 10 times faster than the CP (see Table 5 in   \n373 Appendix F.2).   \n374 To investigate the importance of similarity in daycare priorities on the performance of ESDA, we   \n375 generate new datasets by perturbing the original real-world data using Mallows distributions. For   \n376 each daycare, we independently sample priority orders from the Mallows distribution with varying   \n377 dispersion parameters and replace the original priority order. We consider dispersion parameters   \n378 ranging from 0.0 to 1.0 in increments of 0.1 and conduct 100 experiments for each case. Figure 1   \n379 illustrates the results, demonstrating that ESDA successfully computes a stable matching in more than   \n380 $80\\%$ of cases when the dispersion parameter $\\phi$ is at most 0.8. It is worth noting that when $\\phi=0.0$ ,   \n381 daycare priorities are identical to the original priorities. However, when the dispersion parameter is   \n382 large, the ESDA may only find a stable matching in less than $50\\%$ of cases, even if one may exist. ", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "383 7.2 Experiments on Synthetic Datasets ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "384 We illustrate the steps to generate synthetic datasets. Initially, we define the number of families,   \n385 denoted by $|F|$ , drawn from the set $\\{500,1000,2000,3000,5000,10000\\}$ . We next fix the parameter   \n386 $\\alpha$ , representing the percentage of children with siblings $C^{S}$ , as $\\alpha=0.2$ . For families with siblings,   \n387 denoted as $F^{\\tilde{S}}$ , $80\\%$ of them consist of two children each, while the remaining $20\\%$ have three   \n388 children each. The number of daycares, denoted by $|D|$ , is set to $0.1*|F|$ . For each child $c$ without   \n389 siblings in $C^{O}$ , we randomly select 5 daycares from $D$ . For each family $f$ in $F^{S}$ with siblings, we   \n390 generate an individual preference ordering of length 10 uniformly from $D$ for each child $c\\in C(f)$   \n391 and create all possible combinations. Finally, we uniformly choose a joint preference ordering of   \n392 length 10. The dispersion parameter $\\phi$ varies within the range $\\{0.0,0.3,0.5\\}$ , while the parameter $\\varepsilon$   \n393 used to generate common priorities $\\succ_{0}$ remains fixed at 1. For each specified setting, we generate 10   \n394 instances. The figures in the first row show the number of successful runs out of the 10 experiments.   \n395 In the second row, we report the mean computational complexity along with its $95\\%$ confidence   \n396 intervals, calculated only for the instances where the algorithm successfully found a stable matching.   \n397 Regarding the experimental findings, the ESDA algorithm consistently identified a stable matching   \n398 in all experiments. In addition to stability analysis, we conducted a comparison of the running time   \n399 between the ESDA algorithm and the CP algorithm. Despite the potential requirement for the ESDA   \n400 algorithm to check all permutations of $F^{S}$ in the worst case scenario, it consistently demonstrated   \nnotably faster performance than the CP algorithm across all cases. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "image", "img_path": "B3jt0Ran2t/tmp/6e0a8af5f5659fa2039f902a1dbb51cb19dd37c32e1561913db52789fe03cce2.jpg", "img_caption": ["Figure 2: Results of experiments on synthetic data. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "401 ", "page_idx": 8}, {"type": "text", "text": "402 8 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "403 In this study, we investigate the factors contributing to the existence of stable matching in practical   \n404 daycare markets. We identify the shared priority ordering among all daycares as one of the primary   \n405 reasons. Our contribution includes a probability analysis for such large random markets and the   \n406 introduction of the ESDA algorithm to identify stable matchings in practical datasets. Experimental   \n407 results demonstrate the utility of ESDA under various conditions, suggesting its potential scalability to   \n408 larger markets where optimization solutions, such as integer programming or constraint programming,   \n409 may exhibit much longer processing times. ", "page_idx": 8}, {"type": "text", "text": "410 References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "411 A. Abdulkadiro\u02d8glu and T. S\u00f6nmez. School choice: A mechanism design approach. American   \n412 Economic Review, 93(3):729\u2013747, 2003.   \n413 A. Abdulkadiro\u02d8glu, P. A. Pathak, A. E. Roth, and T. S\u00f6nmez. The boston public school match.   \n414 American Economic Review, 95(2):368\u2013371, 2005.   \n415 I. Ashlagi, M. Braverman, and A. Hassidim. Stability in large matching markets with complementari  \n416 ties. Operation Research, 62(4):713\u2013732, 2014.   \n417 H. Aziz and Z. Sun. Multi-rank smart reserves. In Proceedings of the 22nd ACM Conference on   \n418 Economics and Computation, Budapest, Hungary, July 18-23, EC 2021, pages 105\u2013124, 2021.   \n419 S. Basu, K. A. Sankararaman, and A. Sankararaman. Beyond $\\log^{2}(\\mathfrak{t})$ regret for decentralized bandits   \n420 in matching markets. In Proceedings of the 38th International Conference on Machine Learning,   \n421 ICML 2021, 18-24 July 2021, Virtual Event, volume 139 of Proceedings of Machine Learning   \n422 Research, pages 705\u2013715. PMLR, 2021.   \n423 P. Bir\u00f3, R. W. Irving, and I. Schlotter. Stable matching with couples: an empirical study. Journal of   \n424 Experimental Algorithmics (JEA), 16:1\u201327, 2011.   \n425 P. Bir\u00f3, D. F. Manlove, and I. McBride. The hospitals/residents problem with couples: Complexity   \n426 and integer programming models. In Proceedings of International Symposium on Experimental   \n427 Algorithms, pages 10\u201321. Springer, 2014.   \n428 P. Bir\u00f3, T. Fleiner, and R. W. Irving. Matching couples with Scarf\u2019s algorithm. Annals of Mathematics   \n429 and Artificial Intelligence, 77:303\u2013316, 2016.   \n430 A. Brilliantova and H. Hosseini. Fair stable matching meets correlated preferences. In Proceedings of   \n431 the 21st International Conference on Autonomous Agents and Multiagent Systems, AAMAS 2022,   \n432 Auckland, New Zealand, May 9-13, 2022, pages 190\u2013198, 2022.   \n433 S. Das and E. Kamenica. Two-sided bandits and the dating market. In Proceedings of the Nineteenth   \n434 International Joint Conference on Artificial Intelligence, Edinburgh, Scotland, UK, July 30 - August   \n435 5, 2005, pages 947\u2013952, 2005.   \n436 D. Gale and L. S. Shapley. College admissions and the stability of marriage. The American   \n437 Mathematical Monthly, 69(1):9\u201315, 1962.   \n438 J. Hatfield and F. Kojima. Substitutes and stability for matching with contracts. Journal of Economic   \n439 Theory, 145(5):1704\u20131723, 2010.   \n440 J. W. Hatfield and P. R. Milgrom. Matching with contracts. American Economic Review, 95(4):   \n441 913\u2013935, 2005.   \n442 M. Jagadeesan, A. Wei, Y. Wang, M. I. Jordan, and J. Steinhardt. Learning equilibria in matching   \n443 markets from bandit feedback. In Advances in Neural Information Processing Systems 34: Annual   \n444 Conference on Neural Information Processing Systems 2021, NeurIPS 2021, December 6-14, 2021,   \n445 virtual, pages 3323\u20133335, 2021.   \n446 Y. Kamada and F. Kojima. Fair Matching under Constraints: Theory and Applications. The Review   \n447 of Economic Studies, 91(2):1162\u20131199, 04 2023.   \n448 B. Klaus and F. Klijn. Stable matchings and preferences of couples. Journal of Economic Theory,   \n449 121(1):75\u2013106, 2005.   \n450 F. Kojima, P. A. Pathak, and A. E. Roth. Matching with couples: Stability and incentives in large   \n451 markets. The Quarterly Journal of Economics, 128(4):1585\u20131632, 2013.   \n452 F. Kong, J. Yin, and S. Li. Thompson sampling for bandit learning in matching markets. In   \n453 Proceedings of the Thirty-First International Joint Conference on Artificial Intelligence, IJCAI   \n454 2022, Vienna, Austria, 23-29 July 2022, pages 3164\u20133170. ijcai.org, 2022.   \n455 A. W. Levy. Novel uses of the Mallows model in coloring and matching. PhD thesis, Dept. of   \n456 Mathematics, University of Washington, Seattle, 2017.   \n457 L. T. Liu, H. Mania, and M. I. Jordan. Competing bandits in matching markets. In The 23rd   \n458 International Conference on Artificial Intelligence and Statistics, AISTATS 2020, 26-28 August   \n459 2020, Online [Palermo, Sicily, Italy], volume 108 of Proceedings of Machine Learning Research,   \n460 pages 1618\u20131628, 2020.   \n461 L. T. Liu, F. Ruan, H. Mania, and M. I. Jordan. Bandit learning in decentralized matching markets. J.   \n462 Mach. Learn. Res., 22:211:1\u2013211:34, 2021.   \n463 T. Lu and C. Boutilier. Learning mallows models with pairwise preferences. In Proceedings of the   \n464 28th International Conference on Machine Learning, ICML 2011, pages 145\u2013152, 2011.   \n465 C. L. Mallows. Non-null ranking models. Biometrika, 44:114\u2013130, 1957.   \n466 D. F. Manlove, G. O\u2019Malley, P. Prosser, and C. Unsworth. A constraint programming approach to the   \n467 hospitals / residents problem. In Integration of AI and OR Techniques in Constraint Programming   \n468 for Combinatorial Optimization Problems, pages 155\u2013170, 2007.   \n469 D. F. Manlove, I. McBride, and J. Trimble. \u201cAlmost-stable\u201d matchings in the hospitals/residents   \n470 problem with couples. Constraints, 22(1):50\u201372, 2017.   \n471 N. Mattei and T. Walsh. Prefilb: A library of preference data HTTP://PREFLIB.ORG. In Proceedings   \n472 of the 3rd International Conference on Algorithmic Decision Theory, ADT 2013, Lecture Notes in   \n473 Artificial Intelligence. Springer, 2013.   \n474 E. J. McDermid and D. F. Manlove. Keeping partners together: algorithmic results for the hos  \n475 pitals/residents problem with couples. Journal of Combinatorial Optimization, 19(3):279\u2013303,   \n476 2010.   \n477 E. Ronn. NP-complete stable matching problems. Journal of Algorithms, 11(2):285\u2013304, 1990.   \n478 A. E. Roth. The evolution of the labor market for medical interns and residents: a case study in game   \n479 theory. Journal of Political Economy, 92(6):991\u20131016, 1984.   \n480 A. E. Roth. The college admissions problem is not equivalent to the marriage problem. Journal of   \n481 Economic Theory, 36(2):277\u2013288, 1985.   \n482 A. E. Roth. Deferred acceptance algorithms: History, theory, practice, and open questions. Interna  \n483 tional Journal of Game Theory, 36(3):537\u2013569, 2008.   \n484 A. E. Roth and E. Peranson. The redesign of the matching market for american physicians: Some   \n485 engineering aspects of economic design. American Economic Review, 89(4):748\u2013780, 1999.   \n486 A. E. Roth and M. Sotomayor. Two-Sided Matching: A Study in Game-Theoretic Modeling and   \n487 Analysis. Cambridge University Press, Cambridge, UK, 1990.   \n488 A. E. Roth and J. V. Vate. Random paths to stability in two-sided matching. Econometrica: Journal   \n489 of the Econometric Society, pages 1475\u20131480, 1990.   \n490 H. E. Scarf. The core of an n person game. Econometrica: Journal of the Econometric Society, pages   \n491 50\u201369, 1967.   \n492 Z. Sun, Y. Takenami, D. Moriwaki, Y. Tomita, and M. Yokoo. Daycare matching in Japan: Transfers   \n493 and siblings. In Proceedings of the 37th AAAI Conference on Artificial Intelligence, AAAI 2023,   \n494 pages 14487\u201314495, 2023.   \n495 Z. Sun, N. Yamada, Y. Takenami, D. Moriwaki, and M. Yokoo. Stable matchings in practice: A   \n496 constraint programming approach. In Proceedings of the 38th AAAI Conference on Artificial   \n497 Intelligence, AAAI 2024, forthcoming, 2024.   \n498 T. Suzuki, A. Tamura, K. Yahiro, M. Yokoo, and Y. Zhang. Strategyproof allocation mechanisms   \n499 with endowments and M-convex distributional constraints. Artificial Intelligence, 315:103825,   \n500 2023.   \n502 Ronn [1990] initially established that verifying the existence of stable matchings in the presence   \n503 of couples is an NP-hard problem, even if each hospital offers only one position. Follow-up work   \n504 by McDermid and Manlove [2010] showed this computational intractability result still holds even   \n505 when couples\u2019 preferences are limited to pairs of positions within the same hospital. Furthermore,   \n506 Bir\u00f3 et al. [2011] demonstrated that it remains NP-hard when all doctors are ranked according to a   \n507 common order adopted by all hospitals.   \n508 A classical work on matching with couples, conducted by Kojima et al. [2013], illustrates that as the   \n509 market size approaches infinity, the probability of a stable matching existing converges to 1, given   \n510 the growth \u221arate of couples is suitably slow in relation to the market size, e.g., when the number of   \n511 couples is $\\sqrt{n}$ where $n$ represents the number of singles. Ashlagi et al. [2014] propose an improved   \n512 matching algorithm, building on the foundation laid by Kojima et al. [2013]. This refined algorithm   \n513 demonstrates that, even if the number of couples grows at a near-linear rate of $n^{\\epsilon}$ with $0<\\epsilon<1$ , a   \n514 stable matching can still be found with high probability. In contrast, Ashlagi et al. [2014] highlight   \n515 that as the number of couples increases at a linear rate, the probability of a stable matching existing   \n516 diminishes significantly.   \nKojima et al. [2013] devised the Sequential Couples Algorithm to address matching problems   \n518 involving couples, which follows a three-step procedure. First, it computes a stable matching without   \n519 considering couples, using the DA algorithm. Next, it handles each couple according to a predefined   \n520 order denoted as $\\pi$ . Single doctors displaced by couples are accommodated one by one, allowing   \n521 them to apply to hospitals based on their preferences. However, if an application is made to a hospital   \n522 where any member of a couple has previously submitted an application, the algorithm declares a   \n523 failure and terminates, even though a stable matching may indeed exist.   \n524 The Sorted Deferred Acceptance (SDA) algorithm, as introduced by Ashlagi et al. [2014], follows a   \n525 similar trajectory to the Sequential Couples Algorithm. We extend its application to the context of   \n526 daycare matching with siblings. The algorithm begins by computing a stable matching without con  \n527 sidering families with siblings, denoted as $F^{S}$ , using the DA algorithm. Subsequently, it sequentially   \n528 processes each family, denoted as $f$ , based on a predefined order denoted as $\\pi$ . Children without   \n529 siblings who are displaced by family $f$ are processed individually, enabling them to apply to daycare   \n530 centers according to their preferences. If any child from family $f^{\\prime}\\in F^{\\bar{S}}$ with siblings is affected   \n531 during this process, a new order $\\pi^{\\prime}$ is attempted, with $f$ being inserted before $f^{\\prime}$ . The algorithm   \n532 terminates and returns a failure if any child from family $f$ is affected or if the same permutation has   \n533 been attempted twice.   \nOne potential solution to overcome the non-existence of stable matchings is to explore restricted   \n535 preference domains. In this regard, Klaus and Klijn [2005] investigated a restricted preference domain   \n536 known as weak responsiveness, ensuring the presence of stable matchings in the presence of couples.   \n537 Hatfield and Kojima [2010] introduced the concept of \u201cbilateral substitute\u201d within the framework of   \n538 matching with contracts [Hatfield and Milgrom, 2005], encompassing matching with couples as a   \n539 specific case, and they demonstrated that weak responsiveness implies bilateral substitutes.   \n540 In practical applications, the National Resident Matching Program employed a heuristic based on   \n541 the incremental algorithm proposed by Roth and Vate [1990]. Bir\u00f3 et al. [2016] proposed a different   \n542 approach involves the utilization of the Scarf algorithm [Scarf, 1967] to identify a fractional matching.   \n543 If the outcome proves to be integral, it is then considered a stable matching. Moreover, researchers   \n544 have explored the application of both integer programming and constraint programming to address   \n545 the complexities of matching with couples [Manlove et al., 2007, Bir\u00f3 et al., 2014, Manlove et al.,   \n546 2017]. Notably, these methodologies have recently been adapted in the daycare matching market as   \n547 well [Sun et al., 2023, 2024].   \n548 Another trend in the literature explores the combination of bandit algorithms with matching market   \n549 design. In these studies, preferences are initially unknown and are learned through the interactions   \n550 between the two sides of agents (see [Das and Kamenica, 2005, Liu et al., 2020, Basu et al., 2021,   \n551 Liu et al., 2021, Jagadeesan et al., 2021, Kong et al., 2022]). This contrasts with our setting, where   \n552 preferences and priorities are submitted to the system in advance. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "553 B Discussion on Stability ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "554 B.1 Motivation ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "555 The primary reason for modifying the stability concept lies in the differing selection criteria between   \n556 hospital-doctor matching and daycare allocation. In the hospital-doctor matching problem, hospitals   \n557 have preferences over doctors. In contrast, daycare centers use priority orderings based on priority   \n558 scores to determine which child should be given higher precedence. The priority scoring system is   \n559 designed to eliminate justified envy and achieve a fair outcome, treating daycare slots as resources to   \n560 be allocated equitably.   \n561 Additionally, it is crucial that siblings do not envy each other, especially when they are not enrolled   \n562 in the same daycare. Allowing children to transfer their seats to other siblings can potentially reduce   \n563 waste and increase overall welfare.   \n564 We presented this new stability concept to multiple government officials from different municipalities   \n565 and several renowned economists. They all agreed that the modification is more appropriate for the   \n566 daycare matching setting. ", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "567 B.2 ABH-Stability ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "568 The stability concept studied in [Ashlagi et al., 2014] was originally designed for matching with   \n569 couples and defined by enumerating all possible scenarios. To distinguish it from our concept, we   \n570 refer to their stability as ABH-stability, named after the authors\u2019 initials.   \n571 In Definition 11, we consolidate these scenarios into a concise format, which highlights the differences   \n572 from our definition. The primary distinction from Definition 4 lies in the input to $\\bar{\\mathrm{Ch}}_{d}(\\cdot)$ in condition   \n573 2: it uses $\\mathrm{Ch}_{d}(\\mu(d)\\cup C(f,j,d))$ , instead of $\\mathrm{Ch}_{d}(\\mu(d)\\setminus C(f)\\cup C(f,j,\\bar{d}))$ .   \n574 Definition 11 (ABH-Stability). Given a feasible and individually rational matching $\\mu$ , family $f$   \n575 with children $C(f)=\\{c_{1},...,c_{k}\\}$ and the $j$ -th tuple of daycares $\\mathbf{\\varphi}:\\succ_{f,j}=\\left(d_{1}^{*},...,d_{k}^{*}\\right)i n\\succ_{f},$ , form $a$   \n576 blocking coalition if the following two conditions hold,   \n577 (1) $(d_{1}^{*},...,d_{k}^{*})\\succ_{f}\\mu(f).$ , and   \n578 (2) for each distinct daycare $d$ included in $(d_{1}^{*},...,d_{k}^{*})$ , $C(f,j,d)\\subseteq\\operatorname{Ch}_{d}(\\mu(d)\\cup C(f,j,d))$ , where   \n579 $C(f,j,d)$ denotes a subset of $f$ \u2019s children who apply to daycare $d$ with respect $t o\\succ f,j$ . ", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "580 A feasible and individually rational matching satisfies ABH-stability if no blocking coalition exists. ", "page_idx": 12}, {"type": "text", "text": "581 ABH-Stability maintains alignment with the stability notion presented by Kojima et al. [2013]. In   \n582 the latter study, the authors explore a responsive preference domain in which daycare priorities are   \n583 defined over sets of children. Despite differences in the choice function employed, the foundational   \n584 idea of defining stability exhibits conceptual coherence between these two works. ", "page_idx": 12}, {"type": "text", "text": "585 B.3 Non-existence of Stable Matchings ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "586 Example 5 (Non-existence of Stable Matchings). Consider three families: $f_{1}$ with children $C(f_{1})=$   \n587 $\\{c_{1},c_{2}\\}$ , $f_{2}$ with children $C(f_{2})=\\{c_{3},c_{4}\\}$ , and $f_{3}$ with children $C(f_{3})=\\{c_{5},c_{6}\\}$ . There are three   \n588 daycares: $D=\\{d_{1},d_{2},d_{3}\\}$ , each with a single slot. The preference profile of the families and the   \n589 priority profile of the daycares are as follows: ", "page_idx": 12}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\sim_{f_{1}}\\!:(d_{1},d_{2})\\qquad\\succ_{f_{2}}\\!:(d_{2},d_{3})\\qquad\\succ_{f_{3}}\\!:(d_{3},d_{1})}}\\\\ {{\\succ_{d}\\!:c_{1},c_{6},c_{3},c_{2},c_{5},c_{4}\\ \\forall d\\in D}}\\end{array}\n$$", "text_format": "latex", "page_idx": 12}, {"type": "text", "text": "590 We denote the option of being unmatched as $\\varnothing$ for brevity. There are three feasible matchings except   \n591 for the empty matching which can not be stable, namely: ", "page_idx": 12}, {"type": "text", "text": "592 ", "page_idx": 12}, {"type": "text", "text": "593 ", "page_idx": 12}, {"type": "text", "text": "\u2022 Matching $\\mu_{1}$ where $\\mu_{1}\\big(f_{1}\\big)=\\big(d_{1},d_{2}\\big).$ , $\\mu_{1}(f_{2})=(\\varnothing,\\varnothing)$ , and $\\mu_{1}(f_{3})=(\\varnothing,\\varnothing)$ .   \n\u2022 Matching $\\mu_{2}$ where $\\mu_{2}(f_{1})=(\\varnothing,\\varnothing)$ , $\\mu_{2}\\big(f_{2}\\big)=\\big(d_{2},d_{3}\\big)$ , and $\\mu_{2}(f_{3})=(\\varnothing,\\varnothing)$ .   \n\u2022 Matching $\\mu_{3}$ where $\\mu_{3}(f_{1})=(\\varnothing,\\varnothing)$ , $\\mu_{3}(f_{2})=(\\varnothing,\\varnothing)$ , and $\\mu_{3}(f_{3})=(d_{3},d_{1}).$ . ", "page_idx": 12}, {"type": "text", "text": "594 ", "page_idx": 12}, {"type": "text", "text": "595 Matching $\\mu_{1}$ cannot be stable, because family $f_{2}$ could form a blocking coalition with a pair of   \n596 daycares $(d_{2},d_{3})$ , where $\\mathrm{Ch}_{d_{2}}(\\{c_{2},c_{3}\\})=\\{c_{3}\\}$ and $\\mathrm{Ch}_{d_{3}}(\\{c_{4}\\})=\\{c_{4}\\}$ . Similarly, matching $\\mu_{2}$ is   \n597 blocked by family $f_{3}$ and daycares $(d_{3},d_{1})$ , and matching $\\mu_{3}$ is blocked by family $f_{1}$ and daycares   \n598 $(d_{1},d_{2})$ . Consequencely, none of the matchings $\\mu_{1}$ , $\\mu_{2}$ , and $\\mu_{3}$ is stable. ", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "599 C Previous Algorithms ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "600 C.1 Deferred Acceptance (DA) ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "601 The Deferred Acceptance (DA) algorithm is a classical algorithm in matching theory under pref  \n602 erences [Gale and Shapley, 1962, Roth, 1985]. The (children-proposing) DA algorithm proceeds   \n603 iteratively through the following two phases. In the application phase, children first apply to their   \n604 most preferred daycares that have not rejected them so far. In the selection phase, each daycare   \n605 selects children based on its priorities from the pool of new applicants in the current round and   \n606 the temporarily matched children from the previous round without exceeding specific quotas. The   \n607 algorithm terminates when no child submits any further applications. An essential property of the DA   \n608 algorithm is that it always converges to a stable matching within polynomial time when siblings are   \n609 not involved.   \n610 Definition 12 (Rejection Chain). When a child $c_{1}^{*}$ applies to a daycare $d_{1}^{*}$ that is already at full   \n611 capacity, daycare $d_{1}^{*}$ must reject some child $c_{2}^{*}$ (which could be $c_{1.}^{*}$ ). The rejected child $c_{2}^{*}$ then applies   \n612 to the next available daycare $d_{2}^{*}$ . If daycare $d_{2}^{*}$ is also full, another child $c_{3}^{*}$ must be rejected by $d_{2}^{*}$   \n613 and apply to the subsequent daycare $d_{3}^{*}$ . This sequence continues, forming a rejection chain denoted   \n614 as $c_{1}^{*}\\to c_{2}^{*}\\cdot\\cdot\\cdot\\to c_{t}^{*}$ , where $t$ represents the length of the chain.   \n615 Similarly, rejection chains of families can be defined in the same manner by substituting $c_{i}^{*}$ with $f_{i}^{*}$ ,   \n616 where $c_{i}^{*}\\in C(f_{i}^{*})$ .   \n617 Definition 13 (Rejection Cycle). A rejection chain, represented as $c_{1}^{*}\\to c_{2}^{*}\\cdot\\cdot\\cdot\\to c_{t}^{*}$ , is termed a   \n618 rejection cycle if it satisfies two additional conditions: $i$ ) at least one child in the chain is different   \n619 from $c_{1}^{*}$ , i.e., there exists $c^{\\prime}\\in\\{c_{1}^{*},c_{2}^{*},\\cdot\\cdot\\cdot\\,,c_{t}^{*}\\}$ such that $c^{\\prime}\\neq c_{1}^{*}$ , and $i i$ ) the rejection chain forms a   \n620 cycle, commencing and concluding with $c_{1}^{*}$ , i.e., $c_{1}^{*}=c_{t}^{*}$ .   \n621 In the case of a rejection cycle involving families, we mandate that i) at least two distinct families   \n622 are present in the rejection chain, and ii) the rejection chain initiates and concludes with the same   \n623 family. It is possible that the starting child $c_{1}^{*}$ and the ending child $c_{t}^{*}$ are different, but they are from   \n624 the same family.   \n625 In cases where no child has siblings, rejection cycles may occur, but they are guaranteed to eventually   \n626 terminate. This termination is ensured by the following reasons: i) When a daycare reaches its quota,   \n627 the number of matched children remains constant, even though the set of matched children may   \n628 vary. ii) Children cannot be matched to a daycare that previously rejected them, as a daycare never   \n629 regrets rejecting a child with lower priority than its currently matched children when it meets its   \n630 quota. Consequently, a child does not need to reapply to any daycare that has rejected them.   \n631 However, these arguments do no longer hold in the presence of siblings. This is because when one   \n632 child is rejected by a daycare, their sibling may be compelled to leave the matched daycare, due to   \n633 their joint preferences over tuples of daycares, rather than a rejection. Consequently, vacancies arise   \n634 at a daycare that was previously full, enabling a previously rejected child to reapply. This suggests   \n635 that a rejection cycle may persist indefinitely. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "636 C.2 Sequential Couples ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "637 The Sequential Couples algorithm, devised by Kojima et al. [2013] to address matching problems   \n638 involving couples, follows a three-step procedure. First, it computes a stable matching without   \n639 considering couples, using the DA algorithm. Next, it handles each couple according to a predefined   \n640 order denoted as $\\pi$ . Single doctors displaced by couples are accommodated one by one, allowing   \n641 them to apply to hospitals based on their preferences. However, if an application is made to a hospital   \n642 where any member of a couple has previously submitted an application, the algorithm declares a   \n643 failure and terminates, even if a stable matching indeed exists.   \n645 The Sorted Deferred Acceptance (SDA) algorithm, as introduced by Ashlagi et al. [2014], follows a   \n646 similar trajectory to the Sequential Couples algorithm. We extend its application to the context of   \n647 daycare matching with siblings. The algorithm begins by computing a stable matching without con  \n648 sidering families with siblings, denoted as $F^{S}$ , using the DA algorithm. Subsequently, it sequentially   \n649 processes each family, denoted as $f$ , based on a predefined order denoted as $\\pi$ . Children without   \n650 siblings who are displaced by family $f$ are processed individually, enabling them to apply to daycare   \n651 centers according to their preferences. If any child from family $f^{\\prime}\\in F^{\\breve{S}}$ with siblings is affected   \n652 during this process, a new order $\\pi^{\\prime}$ is attempted, with $f$ being inserted before $f^{\\prime}$ . The algorithm   \n653 terminates and returns a failure if any child from family $f$ is affected or if the same permutation has   \n654 been attempted twice. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "655 C.4 Proof of Theorem 2 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "656 Theorem 2. The matching returned by the original SDA algorithm may not be stable. ", "page_idx": 14}, {"type": "text", "text": "657 Proof. We present a counterexample in Example 6 to prove Theorem 2. ", "page_idx": 14}, {"type": "text", "text": "658 Example 6. Consider two families: $f_{1}$ with children $C(f_{1})=\\{c_{1},c_{2}\\},$ , $f_{2}$ with children $C(f_{2})=$   \n659 $\\{c_{3}\\}$ . There are three daycares: $D=\\{d_{1},d_{2},d_{3}\\}$ , each with a single slot. The preference proflie of   \n660 the families and the priority profile of the daycares are as follows: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\succ_{f_{1}}\\colon(d_{1},d_{2}),(d_{2},d_{3}),\\quad\\succ_{f_{2}}\\colon d_{2}}\\\\ &{\\succ_{d}\\colon c_{1},c_{3},c_{2}\\quad\\forall d\\in D.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "661 Then, SDA produces a matching $\\mu(f_{1})=\\{(d_{2},d_{3})\\}$ while leaving child $c_{3}$ unmatched. However, by   \n662 Definition 4, this matching is not stable. This is because family $f_{1}$ could form a blocking coalition   \n663 with $(d_{1},d_{2})$ by allowing $c_{1}$ to transfer his seat at $d_{2}$ to sibling $c_{2}$ .   \n664 This completes the proof of Theorem 2. Note that no matching for this example satisfies stability in   \n665 Definition 4. \u53e3 ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "666 D Formal Description of ESDA ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "667 The ESDA algorithm commences with the application of the Deferred Acceptance (DA) algorithm   \n668 to families without siblings $F^{O}$ . The resulting matching is denoted as $\\mu^{O}$ . The ESDA algorithm   \n669 operates with an order $\\pi$ defined over the set $\\{\\bar{1,}\\cdots,|F^{S}|\\}$ . To keep track of attempted permutations,   \n670 we introduce the collection $\\Pi$ , initialized with $\\{\\pi\\}$ .   \n671 The pivotal step in the ESDA algorithm involves the sequential insertion of families $F^{S}$ based on the   \n672 order $\\pi$ . Let $\\pi(i)$ denote the $i$ -th element in $\\pi$ , starting with $i=1$ , and let $F_{\\pi(i)}^{S}$ denote the $\\pi(i)$ -th   \n673 family in $F^{S}$ . We define $\\mu$ as the current matching during the ESDA process, and $\\mu^{i}$ denotes the   \n674 matching before processing the $\\pi(i)$ -th family in $F^{\\bar{S}}$ . Both $\\mu$ and $\\mu^{i}$ are initialized with $\\mu^{O}$ .   \n675 Consider the $\\pi(i)$ -th family $f\\in F^{S}$ , denoted as $f=F_{\\pi(i)}^{S}$ . Family $f$ makes proposals to the $j$ -th   \n676 tuple of daycares, denoted as $\\succ f,j$ , with the initialization of $j$ at 1. Define $D(f,j)$ as the set of   \n677 distinct daycares in $\\succ f,j$ . For each daycare $d\\in D(f,j)$ , we calculate $C(f,j,d)$ , representing the set   \n678 of children from family $f$ applying to daycare $d$ w.r.t. $\\succ f,j$ .   \n679 According to the choice function outlined in Definition 3, the input is $\\mu(d)\\setminus C(f)\\cup C(f,j,d)$ ,   \n680 excluding siblings from $C(f)$ who do not apply to daycare $d$ w.r.t. $\\succ f,j$ . If $C(f,j,d)$ cannot be   \n681 chosen by all $\\bar{d}\\in D(f,j)$ , the algorithm advances to the next tuple of daycares by updating $j\\gets j\\!+\\!1$ .   \n682 Otherwise, family $f$ can be matched to $\\succ f,j$ in $\\mu$ .   \n683 Let $A$ denote a set of children who i) do not belong to family $f$ and ii) are involved in the rejection   \n684 chains when matching $f$ to $\\succ f,j$ . Two possibilities can arise.   \n685 Case 1) If any child from family $f^{\\prime}\\in F^{S}\\setminus\\{f\\}$ is involved in $A$ , i.e., $A\\cap C(f^{\\prime})\\neq\\emptyset$ , a new order $\\pi^{\\prime}$   \n686 is generated by inserting $f$ before $f^{\\prime}$ . If $\\pi^{\\prime}$ has been attempted previously, the algorithm terminates,   \n687 returning failure (Type 2), a concept that will be detailed shortly. Otherwise, the algorithm restarts   \n688 with the new order $\\pi^{\\prime}$ and add $\\pi^{\\prime}$ to $\\Pi$ .   \n689 Case 2) If only children without siblings are involved in $A$ , then match $f{\\mathrm{\\with}}\\succ_{f,j}$ and leave each   \n690 child in $A$ unmatched. Let $B$ denote the set of children in $C^{O}$ who are matched differently under   \n691 $\\mu^{i}$ (the matching before processing family $f$ ) and $\\mu$ (the current matching). Create a temporary   \n692 matching $\\mu^{T}\\leftarrow\\mu$ , which is used to verify whether $\\mu$ will be modified later. Then the algorithm   \n693 proceeds to stabilize children in $B$ . Select one child, denoted as $b\\in B$ , and let him apply to a daycare   \n694 denoted as $x\\longleftarrow\\succ f(b),h$ starting with $h=1$ . If any child from $C(f)$ is rejected during this process,   \n695 the algorithm terminates, returning failure (Type 1). If any child from family $f^{\\prime}\\in F^{S}\\setminus f$ is rejected,   \n696 a new order is generated following the process described in Case 1). If child $b$ is rejected by daycare   \n697 $x$ , the algorithm explores his next preferred daycare with $h\\leftarrow h+1$ , if available. If child $b$ is chosen,   \n698 then match $b$ to $x$ in $\\mu$ and remove $b$ from $B$ . Subsequently, if there is a rejected child, it is added to   \n699 $B$ , and the algorithm proceeds to the next child in $B$ .   \n700 Once $B$ becomes empty, we verify whether $\\mu^{T}$ equals $\\mu$ . If they are not identical, we revisit family $f$   \n701 by setting $i\\gets i$ ; otherwise, we update $\\boldsymbol{\\mu}^{i+1}\\leftarrow\\boldsymbol{\\mu}$ and proceed to the next family in $F^{S}$ by setting   \n702 $i\\gets i+1$ . ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "703 D.1 Two Lemmas for Proving Theorem 3 ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "704 Our proof that ESDA always generates a stable matching if it does not terminate with failures, relies   \n705 on the following two lemmas. First, we establish that the number of matched children at each daycare   \n706 does not decrease as long as no family in $F^{S}$ is rejected and no child passes their seat to other siblings   \n707 during the execution of ESDA. Then, we prove that for a given order $\\pi$ over $F^{S}$ , if the rank of the   \n708 matched child at any daycare increases, then ESDA cannot produce a matching with respect to $\\pi$ .   \n710 the ESDA procedure before processing family 709 Lemma 6. For a given order $\\pi$ over families $F_{\\pi(i)}^{S}\\in\\dot{F}^{S}$ $F^{S}$ , let $\\mu^{i}(\\pi)$ . The number of matched children at any denote the matching obtained during   \n711 daycare d does not decrease under matching $\\mu^{i+1}(\\pi)$ if the following three conditions hold: i) The   \n712 algorithm does not encounter any type of failure. ii) The order \u03c0 remains unchanged. iii) No child   \n713 from family F \u03c0S( $F_{\\pi(i+1)}^{S}$ transfers their seat to other siblings during the ESDA process.   \n714 Proof. If the first two conditions hold, then no child from any family $f\\,\\in\\,F^{S}$ is rejected when   \n715 inserting family $F_{\\pi(i+1)}^{S}$ . Consequently, only children without siblings are involved in rejection   \n716 chains, and each time one child is replaced by another one with a higher daycare priority when the   \n717 capacity is reached.   \n718 Let $f=F_{\\pi(i+1)}^{S}$ . If the third condition holds, when family $f$ applies to any tuple of daycares $\\succ f,j$ ,   \n719 the input to the choice function $\\operatorname{Ch}_{d}(\\cdot)$ can be simplified as $\\mathrm{Ch}_{d}\\big(\\mu(d)\\cup C(f,j,d)\\big)$ , as no child   \n720 $c\\in C(f)$ passes their seat to other siblings. After the stabilization step, if $f$ reapplies to any tuple   \n721 $\\succ f,k$ that is better than $\\mu(f)$ , then $f$ is still rejected as each matched child at $d\\,\\in\\,D(f,j)$ has a   \n722 weakly higher priority. Thus, $f$ cannot create new vacancies by moving to a better tuple of daycares.   \n723 Consequently, the number of matched children at each daycare does not decrease. \u53e3   \n724 For a given matching $\\mu$ and a daycare $d$ , let $L(\\mu,d)$ represent the rank of the matched child with   \n725 the lowest priority at daycare $d$ , where 1 denotes the highest priority. Imagine that all vacant slots   \n726 at each daycare are initially occupied by dummy children assigned the rank $|C|+1$ . As the ESDA   \n727 algorithm progresses, these dummy children are gradually rejected and replaced by children with   \n728 higher priorities, resulting in a decrease in $L(\\cdot)$ . ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "729 We will now demonstrate the following lemma. ", "page_idx": 15}, {"type": "text", "text": "730 Lemma 7. Given an order $\\pi$ over families $F^{S}$ , $i f,$ during the ESDA process, the rank $L(\\mu,d)$   \n731 increases for any daycare $d$ , then ESDA fails to generate a matching under the current order $\\pi$ over   \n732 families ${\\dot{F}}^{S}$ .   \n733 Proof. We next prove Lemma 7 by examining the changes in $L(\\mu,d)$ at each daycare $d$ throughout   \n734 the execution of the ESDA algorithm under a given order $\\pi$ .   \n735 [Line 1] The ESDA algorithm begins by employing the DA algorithm on families $F^{O}$ . At each step of   \n736 the DA algorithm, a rejected child is substituted by another child with a higher priority. Consequently,   \n737 for each daycare $d$ , the value of $L(\\mu,d)$ either decreases or remains unchanged.   \nInput: an instance $I=(C,F,D,Q,\\succ_{F},\\succ_{D})$ and a default order $\\pi=1,2,...,|F^{S}|$   \nOutput: a stable matching or a failure   \n1: Apply DA to $F^{O}$ and denote the obtained matching as $\\mu^{O}$   \n2: Initialize $\\Pi\\leftarrow\\{\\pi\\}$ , storing the permutations of $\\pi$ that have been attempted   \n3: Initialize $i\\gets1$ with $\\pi(i)$ being the $i$ -th element in $\\pi$   \n4: Initialize $\\boldsymbol{\\mu}\\leftarrow\\boldsymbol{\\mu}^{O}$ (current matching) and $\\mu^{i}\\leftarrow\\mu^{O}$ (the matching before processing the $\\pi(i)$ -th   \nfamily in $F^{S}$ )   \n56:: whLileet $i\\leq|F^{S}|$ d bo e{ tIhtee -htrho fuagmh $F^{S}$ na rding to $\\pi$ }   \n$f=F_{\\pi(i)}^{S}$ $\\pi(i)$ $F^{S}$   \nInitialize $j\\leftarrow1$   \n8: while $j\\leq|\\!\\succ\\!_{f}\\!|\\;\\mathbf{do}\\;\\{f\\mathrm{\\proposes\\to}\\succ_{f,j}\\}$   \n9: Compute $\\bar{D}(f,j)$ , the set of distinct daycares w.r.t. $\\succ f,j$   \n10: For each $d\\in D(f,j)$ , compute $C(f,j,d)$ , the set of children from family $f$ who apply to $d$   \nw.r.t. $\\succ f,j$   \n11: if $\\exists d\\,\\in\\,D(f,j)$ s.t. $C(f,j,d)\\,\\,\\not\\subseteq\\,\\,\\mathrm{Ch}_{d}\\big(\\mu(d)\\,\\backslash\\,C(f)\\cup C(f,j,d)\\big)$ then $\\{f$ cannot be   \nmatched $\\mathrm{to}\\succ f,j$ }   \n12: $j\\leftarrow j+1$ {Consider the next tuple of daycares $\\mathrm{in}\\succ_{f}\\}$   \n13: else $\\{f$ can be matched to $\\succ_{f,j}\\}$   \n14: $\\begin{array}{r}{A\\gets\\bigcup_{d\\in D(f,j)}\\big(\\mu(d)\\setminus\\mathrm{{Ch}}_{d}(\\mu(d)\\setminus C(f)\\cup C(f,j,d))\\big)\\setminus C(f)}\\end{array}$ {Rejected children from   \nfamilies $F\\,\\backslash\\,\\{f\\}\\}$   \n15: if $\\exists f^{\\prime}\\in F^{S}\\setminus\\{f\\}$ s.t. $C(f^{\\prime})\\cap A\\neq\\emptyset$ then {some child from $f^{\\prime}\\in F^{S}\\backslash\\{f\\}$ is rejected}   \n16: Create a new order $\\pi^{\\prime}$ by inserting $f$ prior to $f^{\\prime}$ .   \n17: if $\\pi^{\\prime}\\in\\Pi$ then   \n18: return Failure (Type-2).   \n19: else   \n20: $\\Pi\\leftarrow\\Pi\\cup\\{\\pi^{\\prime}\\}$ and go to line 3 with $\\pi\\leftarrow\\pi^{\\prime}$ {Start over with $\\pi^{\\prime}$ }   \n21: end if   \n22: end if   \n23: $\\mu(f)\\~\\leftarrow\\!\\succ_{f,j}$ and $\\forall c\\in\\textit{A}$ , $\\mu(c)\\;\\leftarrow\\;d_{0}\\;\\{f$ is matched to $\\succ f,j$ and children $A$ are   \nunmatched}   \n24: $B\\leftarrow\\{c\\in\\dot{C}^{O}\\mid\\mu^{i}(c)\\neq\\mu(c)\\}$ {Children in $C^{O}$ matched differently under $\\mu^{i}$ and $\\mu$ }   \n25: $\\mu^{T}\\leftarrow\\mu$ {Check whether $\\mu$ is changed later}   \n26: while $|B|>0$ do {Stabilize children $B$ }   \n27: Choose one child $b\\in B$ and initialize $h\\leftarrow1$   \n28: while $h\\leq\\left|\\succ_{f(b)}\\right|$ do   \n29: $x\\longleftarrow\\succ f(b),h$ , the $h$ -th most preferred daycare in $\\succ f(b)$   \n30: $R\\leftarrow\\mu(x)\\setminus\\operatorname{Ch}_{x}(\\mu(x)\\cup\\{b\\})$   \n31: if $C(f)\\cap R\\neq\\emptyset$ then   \n32: return Failure (Type-1)   \n33: else if $\\exists f^{\\prime}\\in F^{S}\\setminus\\{\\dot{f}\\}$ s.t. $C(f^{\\prime})\\cap R\\neq\\emptyset$ then   \n34: Go to line 16   \n35: end if   \n36: if $R=\\{b\\}$ then   \n37: $h\\leftarrow h+1$   \n38: else   \n39: $\\forall c^{\\prime}\\in R,\\mu(c^{\\prime})\\gets d_{0}$ and $B\\leftarrow B\\cup\\{c^{\\prime}\\}$   \n40: $\\mu(b)\\leftarrow x$ , $B\\leftarrow B\\setminus\\{b\\}$ and go to line 26   \n41: end if   \n42: end while   \n43: $B\\leftarrow B\\setminus\\{b\\}$   \n44: end while   \n45: if $\\mu^{T}\\neq\\mu$ then   \n46: Go to line 6 with $i\\gets i$ {Check $f$ one more time}   \n47: else   \n48: Update $\\boldsymbol{\\mu}^{i+1}\\leftarrow\\boldsymbol{\\mu}$ and go to line 6 with $i\\gets i+1$ {Check the next family in $F^{S}$ }   \n49: end if   \n50: end if   \n51: end while   \n52: end while   \n53: return A matching $\\mu$ .   \n738 [Line 2-6] Subsequently, the algorithm advances through $F^{S}$ based on the given order $\\pi$ . Consider   \n739 the insertion of family $\\bar{f}=F_{\\pi(i)}^{S}$ into the market, commencing with $i\\gets1$ . The following argument   \n740 applies for any $i$ under the condition that no child from family $F_{\\pi(i)}^{S}$ transfers seats to other siblings.   \n741 [Line 7-12] Family $f$ first applies to the tuple of daycares $\\succ f,j$ , initialized with $j\\leftarrow1$ (line 7-8). If   \n742 family $f$ cannot be accepted by all $d\\in D(f,j)$ , then the set of matched children at each daycare $d$   \n743 remains unchanged, i.e., $L(\\mu,d)$ remains the same, and the algorithm proceeds to $j+1$ (line 9-12).   \n744 [Line 13] If $D(f,j)$ still have vacant seats to accommodate family $f$ , then we can imagine that dummy   \n746 Subsequently, the algorithm proceeds to the next family $C(f)$ $F_{\\pi(i+1)}^{S}$ $L(\\mu,d)$ . at each daycare $d\\in D(f,j)$ .   \n747 [Line 14] Now, assume that some child is involved in the rejection chain $A$ during the insertion of   \n748 family $f$ . In this scenario, two possibilities arise.   \n749 [Line 15-22] Case i) If a child from another family $f^{\\prime}\\in F^{S}\\setminus\\{f\\}$ is rejected, it can lead to either a   \n750 restart with a new permutation or result in a Type-2 Failure. In either case, it is equivalent to filling   \n751 all seats at each daycare with dummy children assigned the rank $|C|+1$ , resulting in an increase in   \n752 $L(\\cdot)$ . This indicates that the current order $\\pi$ is unable to generate a matching.   \n753 [Line 23-25] Case ii) If only children in $C^{O}$ are affected during the insertion of $f$ , we match $f$ to   \n754 $\\succ f,j$ and assign any child in $A$ to the dummy daycare. In this scenario, $L(\\cdot)$ decreases at each daycare   \n755 $d\\in D(f,j)$ .   \n756 Let $B$ denote the set of children in $C^{O}$ matched differently under $\\mu^{i}$ and $\\mu$ . We define $\\mu^{T}$ as the   \n757 matching before stabilizing the children in set $B$ .   \n758 [Line 26-35] While stabilizing $B$ , if a child from family $f^{\\prime\\prime}\\in F^{S}$ is rejected, the algorithm may   \n759 either restart with a new permutation or terminate with failure. In either case, the current $\\pi$ is   \n760 inadequate for producing a matching, as discussed in Case i).   \n761 [Line 36-44] Next, let\u2019s consider the scenario where only children from $C^{O}$ are involved in $B$ during   \n762 the stabilization process. In this case, if a child is rejected, it is replaced by another child with a   \n763 higher priority, resulting in a decrease in $L(\\cdot)$ at the corresponding daycare.   \n764 [Line 45-49] We need to verify whether $\\mu$ differs from $\\mu^{T}$ after stabilization. If they remain the same,   \n765 does not change, and we proceed to the next family.   \n766 [Back to Line 6-22] Conversely, if $\\mu$ differs from $\\mu^{T}$ , a supplementary check is conducted for family   \n767 $f$ by allowing it to propose to $\\succ f,j$ , staring with $j\\leftarrow1$ . If family $f$ cannot be matched to a better   \n768 tuple than $\\mu^{T}(f)$ , then $\\mu$ as well as $L(\\cdot)$ remain unchanged, and we move on to the next tuple.   \n769 Suppose family $f$ is matched to $\\succ f,j$ in matching $\\mu^{T}$ , and now family $f$ is matched to a better tuple   \n770 denoted as $\\succ_{f,k}$ in $\\mu$ . It\u2019s important to note that this scenario is possible because family $f$ is already   \n771 matched under $\\mu^{T}$ , and some child can pass their seat to other siblings when reapplying to a better   \n772 tuple than $\\mu^{T}(\\dot{f})$ .   \n773 Formally, when family $f$ was rejected by $\\succ_{f,k}$ in $\\mu^{T}$ , there must exist a daycare $d\\in D(f,k)$ , children   \n774 $c,c^{\\prime}\\in C(f)$ , and a child $c^{1}\\in C^{O}$ such that: i) Child $c^{1}$ , with the lowest priority, is matched to $d$ in   \n775 $\\mu^{i}$ (before processing family $f$ ). ii) The priority ordering at daycare $d$ satisfies: $c^{\\prime}\\succ_{d}c^{1}\\succ_{d}c$ . iii)   \n776 Child $c^{\\prime}$ is matched to $\\succ f,j$ in $\\mu^{T}$ by replacing $c^{1}$ . When family $f$ reapplies to $\\succ_{f,k}$ in matching $\\mu$ ,   \n777 child $c$ passes their seat to $c^{\\prime}$ , resulting in an increase in $L(\\mu,d)$ .   \n778 [Line 23-44] Since child $c^{1}$ is matched differently under $\\mu^{i}$ and $\\mu$ , we have $c^{1}\\in B$ . When stabilizing   \n779 $B$ again, child $c^{1}$ applies from their most preferred daycare. If $c^{1}$ reapplies to $d$ , then it causes the   \n780 rejection of $c$ and leads to a Type-1 Failure.   \n781 Let\u2019s assume that $c^{1}$ is matched to some daycare, say $d^{1}$ , in $\\mu$ which is more preferred than $d$ , leading   \n782 to an increase in $L(\\mu,d^{1})$ . It\u2019s important to recall that $d^{1}$ was full under $\\mu^{i}$ (before processing family   \n783 $f)$ , and $d^{1}$ can accommodate $c^{1}$ in $\\mu$ only if family $f$ causes some child $c^{2}$ , who was matched to $d^{1}$ in   \n784 $\\mu^{i}$ , to be affected in the rejection chain. Following the same argument, suppose $c^{2}$ could be matched   \n785 to some daycare, say $d^{2}$ , which is better than $d^{1}$ , and $d^{2}$ was full under $\\bar{\\mu}^{i}$ and some child $c^{3}$ was   \n786 rejected when inserting $f$ under $\\mu$ .   \n787 Following the same argument, we can continue this chain until we reach a child, say $c^{t}$ , who cannot   \n788 be matched to a better daycare $d^{t}$ than $\\mu^{i}(c^{t})$ in $\\mu$ . If daycare $d^{t}$ has a vacant seat under $\\mu$ , it implies   \n789 that $d^{t}$ must have had a vacant seat under $\\mu^{\\iota}$ before processing family $f$ . However, this contradicts   \n790 the fact that $c^{t}$ was rejected by $d^{t}$ under $\\mu^{i}$ . Therefore, all the children $c^{t}$ , $c^{t-1}$ , $c^{t-2},\\ldots,c^{1}$ could   \n791 form a rejection chain ending with child $c$ , leading to a Type-1 Failure.   \n792 Continuing this reasoning, we must arrive at some child, say $c^{t}$ , who cannot be matched to a better   \n793 daycare $d^{t}$ than $\\mu^{i}(c^{t})$ in this way. This is because family $f$ cannot create more vacancies than   \n794 the number of children rejected by it when changing from $\\succ f,k$ to $\\succ f,j$ , unless other families from   \n795 $f^{\\prime}\\in F^{S}\\setminus\\{f\\}$ is rejected. However, in that case we will go to lines 15-22 instead. Therefore, we can   \n796 conclude that the children $c^{t}$ , $c^{t-1}$ , $c^{t-2},\\cdots,c^{1}$ , $c$ could form a rejection chain ending with child $c$ ,   \n797 resulting in a Type-1 Failure.   \n798 Having meticulously examined all conceivable scenarios during the ESDA procedure, it is evident   \n799 that $\\pi$ is incapable of leading to a matching if $L(\\mu,d)$ experiences an increase for any daycare $d$ .   \n800 This completes the proof of Lemma 7. \u53e3 ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 17}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "801 D.2 Proof of Theorem 3 ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "802 Theorem 3. Given an instance of I, if ESDA returns a matching without failure, then the yielded   \n803 matching is stable. In addition, ESDA always terminates in a finite time, either returning a matching   \n804 or a failure.   \n805 Proof. Suppose the ESDA in Algorithm 1 returns a matching $\\mu$ without encountering any failures.   \n806 Let $\\tilde{\\pi}$ denote the finial order over families $F^{S}$ when ESDA terminates.   \n807 Let $w=|F^{S}|$ denote the number of families in $F^{S}$ , and consider the last family $f^{w}=F_{\\tilde{\\pi}(w)}^{S}$ in the   \n808 order $\\tilde{\\pi}$ . Case i) If family $f^{w}$ is matched to $\\mu(f)=\\succ f,j$ without causing any child to be rejected, i.e.,   \n809 the stabilization step is not invoked, then for any $k\\leq j$ , family $f$ cannot be matched to a better tuple   \n810 of daycares $\\succ f,k$ , as the set of matched children remains unchanged at any $d\\in D(f,k)$ . Case ii)   \n811 Suppose some children $A$ are rejected when inserting family $f^{w}$ . We know $A\\setminus F^{S}=\\emptyset$ , otherwise   \n812 ESDA would terminate with a failure or restart with a new permuation. Thus $A\\subseteq F^{O}$ . After   \n813 stabilizing all children $B$ (containing $A$ ) who are matched differently under $\\mu^{w}$ and $\\mu$ , family $f$   \n814 reapplies to a better tuple of daycares by allowing for children $C(f)$ to pass their seats to other siblings.   \n815 If this happens, then the rank of matched children $L(\\cdot)$ at some daycare decreases, contradicting   \n816 Lemma 7, which implies that $\\tilde{\\pi}$ can produce a matching. Thus, we know $f$ cannot be matched to a   \n817 better tuple even if passing seats are allowed. For both cases, we conclude that family $f^{w}$ cannot   \n818 pariticipate in a blocking coalition w.r.t. matching $\\mu$ .   \n819 Moving on to the second last family $f^{w-1}$ , we apply a similar reasoning.When inserting family   \n820 $f^{w-1}$ into the market, if it can be matched to a better tuple after the stabilization step, it contradicts   \n821 Lemma 7. After family $f^{w}$ is introduced into the market, two key observations hold: i) the number   \n822 of matched children does not decrease at any daycare, as per Lemma 6, and ii) for each daycare $d$ ,   \n823 $L(\\mu,d)$ does not increase, meaning no daycare accepts a child with a lower priority, per Lemma 7.   \n824 Consequently, family $f^{w-1}$ still cannot be matched to a better tuple of daycares after the insertion of   \n825 the last family $f$ .   \n826 Continuing this logic through induction, we conclude that no family $f^{i}\\in F_{\\pi(i)}^{S}$ can be matched to a   \n827 better tuple of daycares under the order $\\tilde{\\pi}$ . In other words, none of the families in $F^{S}$ can participate   \nin a blocking coalition. For the same reasons, it follows that any family $f\\in F^{O}$ cannot be matched   \n829 to a better daycare either.   \n830 For each permutation of $\\pi$ , the algorithm may iterate multiple times of checking $f$ for lines 45-   \n831 46, if the current matching $\\mu$ changes after the stabilization step. Since the choices in each only   \n832 child\u2019s preference ordering are finite, the check terminates in a finite time or returns with a failure.   \n833 Furthermore, the total number of permutations of $\\pi$ is also finite, thus ensuring the algorithm\u2019s   \n834 termination. This concludes the proof of Theorem 3. \u53e3 ", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "835 D.3 Two Types of Failure of ESDA ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "836 Example 7 (Type-1-a Failure). Consider three families $f_{1}$ with children $C(f_{1})=\\{c_{1},c_{2}\\}_{.}$ , $f_{2}$ with   \n837 children $C(f_{2})\\bar{\\mathbf{\\alpha}}=\\{c_{3}\\}$ and $f_{3}$ with children $C(f_{3})=\\{c_{4}\\}$ . There are three daycares denoted as   \n838 $D=\\{d_{1},d_{2},d_{3}\\}$ , each with one available slot. The preferences of the families and the priorities of   \n839 the daycares are outlined as follows: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\succ_{f_{1}}\\colon(d_{1},d_{3})\\quad\\succ_{f_{2}}\\colon d_{1},d_{2}}&{\\succ_{f_{3}}\\colon d_{2},d_{1}}\\\\ {\\succ_{d_{1}}\\colon c_{4},c_{1},c_{3}}&{\\succ_{d_{2}}\\colon c_{3},c_{4}}&{\\succ_{d_{3}}\\colon c_{2}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "840 The initial matching $\\mu^{O}$ is obtained through the Deferred Acceptance $(D A)$ algorithm, where   \n841 $\\mu^{O}(c_{3})\\,=\\,d_{1}$ and $\\bar{\\mu}^{O}(c_{4})\\,=\\,d_{2}$ . Upon inserting family $f_{1}$ , child $c_{1}$ is matched to daycare $d_{1}$ ,   \n842 and child $c_{2}$ is matched to daycare $d_{2}$ , resulting in the rejection of child $c_{3}$ from daycare $d_{1}$ . Subse  \n843 quently, when child $c_{3}$ applies to daycare $d_{2}$ , it leads to the rejection of child $c_{4}$ . Finally, when child   \n844 $c_{4}$ applies to daycare $d_{1}$ , it results in the rejection of child $c_{1}$ .   \n845 Thus, a rejection chain is formed: $c_{1}\\rightarrow c_{3}\\rightarrow c_{4}\\rightarrow c_{1}$ , and the ESDA algorithm terminates with   \n846 failure. However, it\u2019s important to note that a stable matching $\\mu^{\\prime}$ does exist, where $\\mu^{\\prime}(c_{3})=d_{2}$ and   \n847 $\\mu^{\\prime}(c_{4})=d_{1}$ . Despite of its existence, the ESDA algorithm fails to discover $i t$ .   \n848 Example 8 (Type-1-b Failure). Consider two families $f_{1}$ with children $C(f_{1})=\\{c_{1},c_{2}\\}$ and $f_{2}$   \n849 with children $\\dot{C}(f_{2})=\\{c_{3}\\}$ . There are two daycares $D=\\{d_{1},d_{2}\\}$ , each having one available slot.   \n850 The preferences of the families and the priorities of the daycares are outlined as follows: ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{c c}{{\\succ_{f_{1}}\\colon(d_{1},d_{2})}}&{{\\succ_{f_{2}}\\colon d_{1},d_{2}}}\\\\ {{\\succ_{d_{1}}\\colon c_{1},c_{3}}}&{{\\succ_{d_{2}}\\colon c_{3},c_{2}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "851 The initial matching $\\mu^{O}$ is obtained through the Deferred Acceptance $(D A)$ algorithm, with $\\mu^{O}(c_{3})=$   \n852 $d_{1}$ . Upon the introduction of family $f_{1}$ , child $c_{1}$ secures a place at daycare $d_{1}$ , and child $c_{2}$ is matched   \n853 with daycare $d_{2}$ , consequently leading to the rejection of child $c_{3}$ from daycare $d_{1}$ . As child $c_{3}$ applies   \n854 to daycare $d_{2}$ , it results in the rejection of child $c_{2}$ from daycare $d_{2}$ in turn.   \n855 This sequence forms a rejection chain: $c_{1}\\rightarrow c_{3}\\rightarrow c_{2}$ , prompting the ESDA algorithm to terminate   \n856 with a failure. Notably, no stable matching is found to exist for Example 8.   \n857 Example 9 (Type-2 Failure). Consider two families $f_{1}$ with children $C(f_{1})=\\{c_{1},c_{2}\\}$ , and $f_{2}$ with   \n858 children $C(f_{2})^{'}{=}\\left\\{c_{3},c_{4}\\right\\}$ . There are three daycares, denoted as $D=\\{d_{1},d_{2},d_{3}\\}$ , each with one   \n859 slot. Suppose the initial order is $\\pi=\\{1,2\\}$ . The preferences of the families and the priorities of the   \n860 daycares are outlined as follows: ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\succ_{f_{1}}\\colon(d_{1},d_{2}),(d_{1},d_{3})}&{\\:\\succ_{f_{2}}\\colon(d_{2},d_{3})}\\\\ {\\succ_{d_{1}}\\colon c_{1}}&{\\succ_{d_{2}}\\colon c_{3},c_{2}}&{\\succ_{d_{3}}\\colon c_{2},c_{4}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "861 When family $f_{1}$ is inserted, it secures a match with $(d_{1},d_{2})$ . Subsequently, when family $f_{2}$ is added,   \n862 child $c_{2}$ from family $f_{1}$ is rejected, prompting a change in the order to $\\pi^{\\prime}=\\{2,1\\}$ and a restart of   \n863 the algorithm.   \n864 Now, if we add family $f_{2}$ first in the revised order $\\pi^{\\prime}$ , it obtains a match with $(d_{2},d_{3})$ . However, when   \n865 family $f_{1}$ is added and applies to $(d_{1},d_{2})$ , child $c_{2}$ has a lower priority than child $c_{3}$ , resulting in the   \n866 rejection of family $f_{1}$ . Consequently, family $f_{1}$ applies to $(d_{1},d_{3})$ , causing family $f_{2}$ to be evicted in   \n867 turn.   \n868 This leads us to modify the order $\\pi^{\\prime}$ to $\\pi^{*}=\\{1,2\\}$ , which has been attempted previously. Thus, the   \n869 ESDA algorithm terminates due to a Type-2 Failure. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "870 E Proof of Theorem 1 ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "871 In this section, we outline the proof for Theorem 1. Our main approach is to set an upper limit on the   \n872 likelihood of encountering the two types of failure in the ESDA algorithm.   \n873 Theorem 1. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , the probability of the existence of a   \n874 stable matching converges to 1 as n approaches infinity.   \n875 We leverage the following lemma in our proof. It asserts that if an ordering $\\succ$ is generated from a   \n876 given Mallows distribution $\\mathcal{D}_{\\succ_{0},\\phi}$ , the probability of child $c^{\\prime}$ being ranked higher than child $c\\sin\\succ$ is   \n877 no greater than $4\\phi^{\\mathrm{dist}(c,c^{\\prime})}$ , given that $c\\succ_{0}c^{\\prime}$ , where $\\mathrm{dist}(c,c^{\\prime})$ represents the distance between $c$   \n878 and $c^{\\prime}$ in $\\succ_{0}$ .   \n879 Lemma 8 ([Levy, 2017]). $I f\\succ$ is a random ordering drawn from the Mallows distribution $\\mathcal{D}_{\\succ_{0},\\phi}$ ,   \n880 then for all $c,c^{\\prime}\\in C$ , ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "881 where ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{\\operatorname*{Pr}\\lbrack c^{\\prime}\\succ c\\;\\vert\\;c\\succ_{0}c^{\\prime}\\rbrack\\leq4\\phi^{\\mathrm{dist}(c,c^{\\prime})}}}\\\\ {{\\mathrm{st}(c,c^{\\prime})=\\vert\\{c^{\\prime\\prime}\\in C\\;\\vert\\;c\\succ_{0}c^{\\prime\\prime}\\succ_{0}c^{\\prime}\\}\\vert+1.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "882 E.1 Proof of Lemma 1 ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "883 Lemma 1. Under the uniformly bounded condition, the probability $p_{d}$ of selecting any daycare d is   \n884 limited by $\\sigma/m$ where m denotes the total number of daycares.   \n885 Proof. For each daycare $d$ , we have $1/\\sigma\\leq p_{d}/p_{d^{\\prime}}\\leq\\sigma$ . Therefore, $p_{d^{\\prime}}/\\sigma\\leq p_{d}\\leq\\sigma\\cdot p_{d^{\\prime}}$ . If we sum   \n886 this inequality over each $d^{\\prime}\\in D$ , we obtain $\\begin{array}{r}{m\\cdot p_{d}\\leq\\sum_{d^{\\prime}\\in D}\\sigma\\cdot p_{d^{\\prime}}=\\sigma}\\end{array}$ . Thus, $p_{d}\\leq\\sigma/m$ . \u53e3 ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "887 E.2 Proof of Lemma 2 ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "888 Lemma 2. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , the probability of Type-1-a Failure in   \n889 the SDA algorithm is bounded by $O((\\log n)^{2}/n)$ .   \n890 Proof. We first consider a Type-1-a Failure, where a rejection chain $c_{1}\\to c_{2}^{*}\\to\\cdots\\to c_{\\ell}^{*}\\to c_{1}$   \n891 exists. Here, child $c_{1}$ belongs to a family $f\\in F^{S}$ with multiple children, while the other children   \n892 $c_{2}^{*},\\cdot\\cdot\\cdot\\,,c_{\\ell}^{*}\\in C^{O}$ have no siblings.   \n893 Let $\\mathcal{E}_{\\ell}^{\\mathrm{a}}$ represent the event of such a rejection chain $c_{1}\\rightarrow c_{2}^{*}\\rightarrow\\cdot\\cdot\\cdot\\rightarrow c_{\\ell}^{*}\\rightarrow c_{1}$ , with length $\\ell\\geq3$ .   \n894 We next show that, for any $\\succ_{0}$ , we have ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\mid\\!\\!\\sim\\!\\!0]\\leq\\frac{16\\sigma\\phi^{2}}{m}.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "895 Suppose that in this rejection chain, child $c_{1}$ applies to daycare $d_{1}$ , while children $c_{i}^{*}$ apply to $d_{i}^{*}$ for   \n896 $i\\in\\{2,3,...,\\ell-1\\}$ . The last child in the cycle, $c_{\\ell}^{*}$ , applies to daycare $d_{1}$ . It is important to note that   \n897 $d_{i}^{*}\\neq d_{i+1}^{*}$ holds for $i\\in\\{1,\\ldots,\\ell-2\\}$ , even though there could be repetitions among the children   \n898 $c_{2}^{*},...,c_{\\ell}^{*}$ and the daycares $d_{2}^{*},...,d_{\\ell-1}^{*}$ .   \n899 Let $\\succ_{1}$ represent the priority ordering of daycare $d_{1}$ . For $i\\in\\{2,\\ldots,\\ell\\!-\\!1\\}$ , let $\\succ i$ denote the priority   \n900 ordering of daycare $d_{i}^{*}$ . Recall that for each $i=1,\\ldots,\\ell-1$ , the priority ordering $\\succ_{i}$ is drawn from   \n901 the Mallows distribution $\\mathcal{D}_{\\succ_{0},\\phi}$ . We consider two cases. ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "902 Case (i): Suppose the reference ordering $\\succ_{0}$ satisfies the following condition ", "page_idx": 20}, {"type": "equation", "text": "$$\nc_{\\ell}^{*}\\succ_{0}c_{\\ell-1}^{*}\\succ_{0}\\cdots\\succ_{0}c_{2}^{*}\\succ_{0}c_{1}.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "903 By Lemma 8, we have ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathrm{Pr}[c_{\\ell}^{*}\\succ_{1}c_{1}\\succ_{1}c_{2}^{*}\\mid\\succ_{0}]\\leq\\mathrm{Pr}[c_{1}\\succ_{1}c_{2}^{*}\\mid c_{2}^{*}\\succ_{0}c_{1}]\\leq4\\phi.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "904 For all $i=2,...,\\ell-1$ , we also have ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathrm{Pr}[c_{i}^{*}\\succ_{i}c_{i+1}^{*}\\mid\\succ_{0}]\\leq4\\phi.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "905 From $d_{1}^{*}\\neq d_{2}^{*}$ , we know $\\succ_{1}$ and $\\succ_{2}$ are independent. Then we have ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\mid\\sim_{0}\\right]\\leq\\operatorname*{Pr}\\!\\left[c_{1}\\succ_{1}c_{2}^{*}\\mid\\succ_{0}\\right]\\cdot\\operatorname*{Pr}\\!\\left[c_{2}^{*}\\succ_{2}c_{3}^{*}\\mid\\succ_{0}\\right]\\cdot\\operatorname*{Pr}\\!\\left[c_{\\ell-1}^{*}\\mathrm{~applies~to~}d_{1}\\right]}\\\\ &{\\qquad\\qquad\\leq16\\phi^{2}p_{d_{1}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "906 Lemma 1 states that $p_{d_{1}}\\leq\\sigma/m$ . Then we have ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\mathrm{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\mid\\sim_{0}\\right]\\leq16{\\phi}^{2}p_{d_{1}}\\leq\\frac{16\\sigma\\phi^{2}}{m}.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "907 Case (ii): $\\mathrm{If}\\succ_{0}$ does not satisfy the condition in Formula (2), then $\\operatorname*{Pr}[c_{\\ell}^{*}\\succ_{1}c_{1}\\succ_{1}c_{2}^{*}\\mid\\succ_{0}]\\leq4\\phi^{2}$   \n908 holds or there exists $i\\in\\{2,...,\\ell-1\\}$ such that $\\mathrm{Pr}[c_{i}^{*}\\succ_{i}c_{i+1}^{*}\\mid\\succ_{0}]\\leq4\\phi^{2}$ . From this, we obtain ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\operatorname*{Pr}\\left[\\mathscr{E}_{\\ell}^{\\mathrm{a}}\\mid\\sim_{0}\\right]\\leq4\\phi^{2}\\cdot\\operatorname*{Pr}\\left[c_{\\ell-1}^{\\ast}\\mathrm{~applies~to~}d_{1}\\right]}\\\\ &{\\leq4\\phi^{2}p_{d_{1}}}\\\\ &{\\leq\\displaystyle\\frac{4\\sigma\\phi^{2}}{m}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "909 From Inequalities (3) and (4) above, for both cases (i) and (ii), we have $\\begin{array}{r}{\\operatorname*{Pr}[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\mid\\!\\!\\succ\\!\\!0]\\leq\\frac{16\\sigma\\phi^{2}}{m}}\\end{array}$ . This   \n910 completes the proof of Inequality (1).   \n911 Given that $\\succ_{0}$ is drawn from a uniform distribution over all permutations of $C$ , we can derive   \n912 the following inequality for the probability of encountering Type-1-a Failure, denoted as $\\mathscr{E}_{\\ell}$ , for a   \n913 particular length $\\ell$ of the rejection chain: ", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\right]\\leq\\displaystyle\\sum_{\\succ_{0}\\in S^{\\prime}}\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\left|\\succ_{0}\\right.\\right]\\cdot\\operatorname*{Pr}[\\succ_{0}]}\\\\ &{\\qquad\\quad\\leq\\displaystyle\\frac{16\\sigma\\phi^{2}}{m}\\sum_{\\succ_{0}\\in S^{\\prime}}\\operatorname*{Pr}[\\succ_{0}]}\\\\ &{\\qquad=\\displaystyle\\frac{16\\sigma\\phi^{2}}{m}}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "914 where $S^{\\prime}$ denotes all permutations on the set of children $C$ that is used to generate $\\succ_{0}$ . ", "page_idx": 21}, {"type": "text", "text": "915 To obtain the overall probability of Type-1-a Failure, we sum up the probabilities for all possible   \n916 lengths $\\ell$ and for all children $F^{S}$ . Recall that the length of each child\u2019s preference ordering is bounded   \n917 by $L$ , and the length of a rejection chain is upper bounded by $(1-\\alpha)n\\cdot L$ and lower bounded by   \n918 3. Thus, the probability that there exists a rejection cycle leading Type-1-a Failure is bounded from   \n919 above by ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\alpha n\\cdot\\sum_{\\ell=3}^{(1-\\alpha)n L}\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{a}}\\right]\\leq16\\alpha(1-\\alpha)L\\sigma\\frac{n^{2}\\phi^{2}}{m}.\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "920 If $\\phi=O(\\log n/n)$ , the probability of there being a Type-1-a Failure is $O\\left({\\frac{(\\log n)^{2}}{n}}\\right)$ , which converges   \n921 to 0 as $n$ approaches infinity. \u53e3 ", "page_idx": 21}, {"type": "text", "text": "922 E.3 Proof of Lemma 3 ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "923 Lemma 3. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n)$ , the probability of Type-1-b Failure in   \n924 the SDA algorithm is bounded by $O\\big((\\log n)^{2}/n\\big)+O(n^{-\\varepsilon})$ .   \n925 Proof. We next proceed to Type-1-b Failure, where a rejection chain is denoted as $c_{1}\\rightarrow c_{2}^{*}\\rightarrow\\cdots\\rightarrow$   \n926 $c_{\\ell}^{*}\\to c_{1}^{\\prime}$ . Here, $c_{1}$ and $c_{1}^{\\prime}$ are siblings of the same family $f\\,\\in\\,F^{S}$ , while $c_{2}^{*},\\ldots,c_{\\ell}^{*}$ are children   \n927 without siblings. Suppose that $c_{i}^{*}$ applies to $d_{i}^{*}$ for each $i=2,3,...,\\ell-1$ .   \n928 If children $c_{1}$ and $c_{1}^{\\prime}$ have nearly identical priorities in $\\succ_{0}$ $(\\mathrm{diam}_{f}\\,\\leq\\,|C(f)|)$ , the analysis aligns   \n929 with that of Type-1-a Failure. Consequently, in this scenario, the probability of the rejection chain   \n930 occurring is at most $16\\sigma\\phi^{2}/m$ for any $\\succ_{0}$ and for any $2\\leq\\ell\\leq(1-\\alpha)n L$ .   \n931 If children $c_{1}$ and $c_{1}^{\\prime}$ have significantly different priorities in $\\succ_{0}$ $(\\mathrm{diam}f>|C(f)|)$ , then it only   \n932 occurs with a probability at most $1/n^{1\\overleftarrow{+}\\varepsilon}\\left(\\varepsilon>0\\right)$ . Therefore, even in the worst-case scenario where   \n933 $\\succ_{0}$ satisfies $c_{1}^{*}\\;\\succ_{0}\\;c_{2}^{*}\\;\\succ_{0}\\;\\cdots\\;\\succ_{0}\\;c_{\\ell}^{*}\\;\\succ_{0}\\;c_{1}^{\\prime*}$ , the probability that the last child $c_{\\ell}^{*}$ causes $c_{1}^{\\prime}$ to be   \n934 rejected, is bounded by $\\frac{\\sigma}{n^{1+\\varepsilon}m}$ .   \n935 Let $\\mathcal{E}_{\\ell}^{\\mathrm{b}}$ denote the event where the rejection chain of length $\\ell$ starting with $c_{1}$ and ending with $c_{1}^{\\prime}$   \n936 occurs. For any $\\ell$ and $\\succ_{0}$ , we have ", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 21}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{b}}\\mid\\sim_{0}\\right]\\leq\\frac{16\\sigma\\phi^{2}}{m}+\\frac{\\sigma}{n^{1+\\varepsilon}m}.\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "937 We next sum up the probabilities for all possible lengths $\\ell$ and for any two children in families with   \n938 multiple children. The probability of Type-1-b Failure occurring is bounded by ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\alpha n\\cdot\\binom{\\bar{k}}{2}\\cdot\\overbrace{\\sum_{\\ell=2}^{()}}^{(1-\\alpha)n L}\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\mathrm{b}}\\right]}\\\\ &{\\ \\ \\ \\leq\\alpha(1-\\alpha)L\\bar{k}^{2}n^{2}\\left(\\frac{16\\sigma\\phi^{2}}{m}+\\frac{\\sigma}{n^{1+\\varepsilon}m}\\right)}\\\\ &{\\ \\ \\ =O\\left(\\frac{(\\log n)^{2}}{n}\\right)+O(n^{-\\varepsilon}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "939 Here, we used $m=\\Omega(n)$ and $\\phi=O(\\log n/n)$ . This concludes that Type-1 Failure does not happen   \n940 with high probability. \u53e3 ", "page_idx": 22}, {"type": "text", "text": "941 E.4 Proof of Lemma 4 ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "942 In addition to the concept of domination, we define the notion of top-domination. ", "page_idx": 22}, {"type": "text", "text": "943 Definition 14 (Top Domination). Given a priority ordering $\\succ$ , we say that family $f$ top-dominates $f^{\\prime}$   \n944 $w.r.t.\\succ i f$ ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{c\\in C(f)}c\\succ\\operatorname*{max}_{c^{\\prime}\\in C(f^{\\prime})}c^{\\prime}.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "945 Lemma 4. Given a random market $\\tilde{I}$ with $\\phi=O(\\log n/n).$ , and for any two families $f,f^{\\prime}\\in F^{S}$   \n946 that are not nesting with each other with respect $t o\\succ_{0}$ , then Type-2 Failure occurs with a probability   \n947 of at most $O(\\log n/n)$ .   \n948 Proof. Consider any two families $f,f^{\\prime}\\,\\in\\,F^{S}$ that do not nest with each other. Without loss of   \n949 generality, we assume that $f$ top-dominates $f^{\\prime}$ , and $f^{\\prime}$ does not dominate $f$ , otherwise they would   \n950 nest with each other. Then we have, ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 22}, {"type": "equation", "text": "$$\n\\forall c\\in C(f),\\forall c^{\\prime}\\in C(f^{\\prime}),c\\succ_{0}c^{\\prime}.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "951 Suppose $f^{\\prime}$ appears before $f$ in the order $\\pi$ over families $F^{S}$ , and $f^{\\prime}$ is currently matched. When $f$ is   \n952 inserted into the market, we observe that the probability of $f$ causing the rejection of $f^{\\prime}$ is bounded   \n953 by $\\sigma/m$ , i.e., $\\operatorname*{Pr}\\left[f\\ \\mathrm{rejects}\\ f^{\\prime}\\right]\\le\\sigma/m$ , given that preferences are uniformly bounded.   \n954 Next, consider a new order $\\pi^{\\prime}$ in which $f$ is placed before $f^{\\prime}$ . We aim to analyze the probability of $f^{\\prime}$   \n955 causing the rejection of $f$ in a rejection chain of length $\\ell$ .   \n956 We begin with $\\ell=2$ . Suppose a child $c\\in C(f)$ is currently matched to daycare $d_{1}$ , and another child   \n957 $c^{\\prime}\\in\\bar{C}(f^{\\prime})$ also applies to daycare $d_{1}$ , resulting in the rejection of child $c$ . As shown in Formula (5),   \n958 we have $c\\succ_{0}c^{\\prime}$ . Since $c^{\\prime}\\succ_{1}c$ , we can deduce that $\\mathrm{Pr}[\\bar{c}^{\\prime}\\succ_{1}c\\,|\\!\\succ\\!0]\\leq4\\phi$ from Lemma 8.   \n959 Let $\\mathcal{E}_{0}^{\\prime}$ be the event where $f$ rejects $f^{\\prime}$ , followed by $f^{\\prime}$ rejecting $f$ . The probability that one child in   \n960 $C({f^{\\prime}})$ applies to $d_{1}$ is upper-bounded by $\\sigma/m$ . Therefore, we can derive: ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 22}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}\\left[{\\mathcal{E}}_{0}^{\\prime}\\right]\\le\\left({\\frac{\\sigma}{m}}\\right)^{2}4\\phi={\\frac{4\\sigma^{2}\\phi}{m^{2}}}.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "961 Next, we consider the scenario where a rejection chain of length $\\ell+2$ occurs, where $\\ell$ represents the   \n962 number of children without siblings participating in the rejection chain. Suppose the rejection chain   \n963 follows the pattern $c\\to c_{1}^{*}\\to c_{2}^{*}\\to\\cdots\\to c_{\\ell}^{*}\\to c^{\\prime}$ , where $c_{1}^{*},...,c_{\\ell}^{*}\\in\\dot{C}^{\\dot{O}}$ . In this case, we have   \n964 $1\\leq\\ell\\leq(1-\\alpha)n L$ .   \n965 Let $\\mathcal{E}_{\\ell}^{\\prime}$ be the event where $f$ rejects $f^{\\prime}$ , and subsequently $f^{\\prime}$ rejects $f$ using a rejection chain of length   \n966 $\\ell$ . For any $\\succ_{0}$ , the replacement by the Mallows distribution must happen at least twice. Thus, for   \n967 each $\\ell=1,2,\\ldots,(1-\\alpha)n L$ , we have ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 22}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}\\!\\left[\\mathcal{E}_{\\ell}^{\\prime}\\mid\\!\\sim\\!0\\right]\\leq\\left(\\frac{\\sigma^{\\prime}}{m}\\right)^{2}16\\phi^{2}\\leq\\frac{16\\sigma^{\\prime}\\phi^{2}}{m^{2}}.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "968 We sum up the probabilities for all possible $\\succ_{0}$ , and achieve $\\begin{array}{r}{\\operatorname*{Pr}\\left[\\mathcal{E}_{\\ell}^{\\prime}\\right]~\\leq~\\frac{16\\sigma^{\\prime}\\phi^{2}}{m^{2}}}\\end{array}$ for each $\\ell\\,=$   \n969 $1,2,\\ldots,(1-\\alpha)n L$ . Then we obtain ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\sum_{\\ell=1}^{(1-\\alpha)n L}\\operatorname*{Pr}\\big[\\mathcal{E}_{\\ell}^{\\prime}\\big]\\leq\\frac{16(1-\\alpha)L\\sigma n\\phi^{2}}{m^{2}}.\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "970 Finally, since $m=\\Omega(n)$ and $\\phi=O(\\log n/n)$ , we get ", "page_idx": 23}, {"type": "text", "text": "Pr there exists a pair of families with siblings cause rejections with each other ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{=\\displaystyle\\sum_{f,f^{\\prime}\\in F^{\\prime}}\\operatorname*{Pr}_{i}\\left[\\Biggl(\\begin{array}{l}{(1-\\alpha)h\\alpha}\\\\ {\\vdots}\\\\ {\\omega_{\\omega}}\\end{array}\\Biggr)\\right.}\\\\ &{\\le\\displaystyle\\sum_{f,f^{\\prime}\\in F^{\\prime}}\\operatorname*{Pr}_{i}\\sum_{\\ell=0}^{(1-\\alpha)h\\alpha}\\operatorname*{Pr}_{\\ell}\\left[\\ell_{i}^{\\prime}\\right]}\\\\ &{=\\displaystyle\\sum_{f,f^{\\prime}\\in F^{\\prime}}\\left(\\operatorname*{Pr}_{i}\\left[\\ell_{i}^{\\prime}\\right]+\\sum_{i=1}^{(1-\\alpha)h\\alpha}\\operatorname*{Pr}_{\\ell}\\left[\\ell_{i}^{\\prime}\\right]\\right)}\\\\ &{\\le\\left(\\alpha\\right)^{2}\\left(\\frac{\\displaystyle16\\alpha\\phi}{m^{2}}+\\frac{16(1-\\alpha)\\overline{{k}}\\sigma n\\phi^{2}}{m^{2}}\\right)}\\\\ &{=o\\left(\\frac{\\log n}{n}\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "971 E.5 Proof of Lemma 5 ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "972 Lemma 5. Given a random market $\\tilde{I}$ with $\\phi\\,=\\,O(\\log n/n)$ , the probability of Type-2 Failure   \n973 occurring is bounded by $O(\\log n/n)+O\\big(n^{-2\\varepsilon}\\big)$ .   \n974 Proof. We first consider the probability that any two pairs of families with multiple siblings nest with   \n975 each other w.r.t. the reference ordering $\\succ_{0}$ .   \n976 For any two families $f$ and $f^{\\prime}$ , if they nest with each other, then the diameters of both $f$ and $f^{\\prime}$ are large,   \n977 i.e., $\\dim_{f}>|C(f)|$ and $\\dim_{f^{\\prime}}>|C(f^{\\prime})|$ . Thus, the inequality $\\begin{array}{r}{\\operatorname*{Pr}\\bigl[\\dim_{f}\\geq|C(f)|\\bigr]\\,\\leq\\,\\frac{1}{n^{1+\\varepsilon}}}\\end{array}$   \n978 implies that ", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 23}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}\\left[f{\\mathrm{~and~}}f^{\\prime}{\\mathrm{~nest~with~each~other}}\\right]\\leq\\left({\\frac{1}{n^{1+\\varepsilon}}}\\right)^{2}.\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "979 Hence, we have ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\operatorname*{Pr}\\left[\\mathrm{there~exist~two~families~who~}\\right.}\\\\ &{\\quad\\left.\\leq\\displaystyle\\sum_{f,f^{\\prime}\\in F^{S}}\\mathrm{Pr}\\left[f\\mathrm{~and~}f^{\\prime}\\mathrm{~nest~v}\\right.\\right.}\\\\ &{\\quad\\left.\\leq\\left(\\displaystyle\\sum_{2}^{\\alpha n}\\right)\\cdot\\left(\\displaystyle\\frac{1}{n^{1+\\varepsilon}}\\right)^{2}\\right.}\\\\ &{\\quad\\left.\\leq\\alpha^{2}n^{2}\\cdot\\left(\\displaystyle\\frac{1}{n^{1+\\varepsilon}}\\right)^{2}}\\\\ &{\\quad=O\\big(n^{-2\\varepsilon}\\big).}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "980 Since $\\varepsilon>0$ is a constant, the probability that any two families do not nest with each other approaches   \n981 1 as $n$ tends to infinity.   \n982 We now upper-bound the probability of Type-2 Failure. In cases where two families nest with each   \n983 other, Type-2 Failure may occur with a constant probability. However, we have demonstrated that the   \n984 probability of two families nesting with each other is at most $O(n^{-2\\varepsilon})$ . In instances where no two   \n985 families nest with each other, Type-2 Failure happens with a probability of at most $O(\\log n/n)$ as   \n986 shown in Lemma 4. Therefore, we can express the probability of Type-2 Failure as follows: ", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 24}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}\\bigl[\\mathrm{Type-2\\,Failure\\,happens}\\bigr]=O\\bigl(n^{-2\\varepsilon}\\bigr)+O(\\log n/n).\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "987 This completes the proof. ", "page_idx": 24}, {"type": "text", "text": "988 Lemma 2, 3 and 5 imply the existence of a stable matching with high probability for the large random   \n989 market, thus concluding the proof of Theorem 1. ", "page_idx": 24}, {"type": "text", "text": "990 F More on Experiments ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "991 F.1 Features of Real-life Markets ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "992 We are collaborating with several municipalities in Japan, and as part of our collaboration, we provide   \n993 a detailed description of the practical daycare matching markets based on data sets provided by three   \n994 representative municipalities.   \n995 Firstly, the number of children in each market varies from 500 to 1600, with the proportion of children   \n996 having siblings consistently spanning from $15\\%$ to $20\\%$ , as shown in Table 1. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 24}, {"type": "table", "img_path": "B3jt0Ran2t/tmp/237cfceb0aebdeeed6d4a189b4c5b4c788420329aab344c67767c1cd929eb8de.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "Table 1: Fraction of children with siblings. This table presents the proportion of children with siblings, along with the total number of children in each dataset. ", "page_idx": 24}, {"type": "text", "text": "997 Secondly, the preference ordering of an only child is relatively short compared to the available   \n998 facilities, averaging between 3 and 4.5 choices. Likewise, children from families with siblings exhibit   \n999 a similar average of 3 to 4.5 distinct daycares in their individual preferences. Furthermore, siblings   \n1000 within the same family often share a similar set of daycares in their joint preference ordering. The   \n1001 details are presented in Table 2. ", "page_idx": 24}, {"type": "table", "img_path": "B3jt0Ran2t/tmp/79ea870123815978fd3c3e001f7074a2997cc23b4bb7bfa31b00cd1f2327be2c.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "Table 2: Average length of preferences. The second column pertains to families with only one child, while the third column represents families with siblings. The last column displays the average number of distinct daycares in the corresponding individual preference lists for children with siblings. ", "page_idx": 24}, {"type": "text", "text": "1002 Thirdly, a critical aspect not mentioned in Section 3.1 is that each child is associated with an age   \n1003 ranging from 0 to 5. Drawing inspiration from prior work [Sun et al., 2023], we make the assumption   \n1004 that there are six copies of the same daycare, each catering to a specific age. The distribution of   \n1005 children participating in the market is uneven, with a notable majority being aged 0 and 1. In Table 3,   \n1006 we present the count of families with siblings and twins (i.e., pairs of siblings of the same age).   \n1007 Fourthly, despite the total capacity of all daycares exceeding the number of applicants, there exists   \n1008 a significant imbalance between demand and supply across different ages. Specifically, there is a   \n1009 shortage of slots for children aged 0 and 1, while there is a surplus of slots for ages 4 and 5, as shown   \n1010 in Table 4.   \n1011 Fifthly, municipalities assign priority scores to children, with siblings from the same family typically   \n1012 sharing identical scores. Subsequently, daycares make slight adjustments to these priority scores to   \n1013 establish a strict priority ordering. As a result, all daycares tend to have similar priority orderings   \n1014 over the children. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 24}, {"type": "table", "img_path": "B3jt0Ran2t/tmp/1a184ba6269f7851c963c5c6707c4e82598faf2e6f83b68ae86bfe19624ff404.jpg", "table_caption": [], "table_footnote": [], "page_idx": 25}, {"type": "table", "img_path": "B3jt0Ran2t/tmp/bf259639396b204fc2ccfacc1bb00f0e63658675e840bc572dcbf1877c8b701e.jpg", "table_caption": ["Table 3: Number of families with siblings and twins. The second and third columns represent families with 2 children, while the last two columns represent families with 3 or more children. "], "table_footnote": ["Table 4: Demand and supply by age "], "page_idx": 25}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "1015 F.2 More Experiments ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "1016 We employ both the Extended Sorted Deferred Acceptance (ESDA) algorithm and the constraint   \n1017 programming (CP) algorithm to find a stable matching for each real-life dataset. The results demon  \n1018 strate that both algorithms successfully produce a stable matching. We compared the computational   \n1019 efficiency of the ESDA and CP approaches in terms of their runtime performance in Table 5.   \n1020 In the experiments with synthetic datasets, the ESDA algorithm consistently identifies a stable   \n1021 matching whenever one exists, provided that the dispersion parameter $\\phi$ does not exceed 0.5 (refer to   \n1022 Figure 2 in Section 7.2). However, as the dispersion parameter approaches 1, the ESDA algorithm   \n1023 may fail to find a stable matching, even when one exists. This is illustrated in Figure 3. Interestingly,   \n1024 even when $\\phi=1$ , stable matchings are present in more than half of the cases. It is unclear why stable   \n1025 matching still exist in such settings with a high probability, and we leave it as an open question. ", "page_idx": 25}, {"type": "text", "text": "", "page_idx": 25}, {"type": "table", "img_path": "B3jt0Ran2t/tmp/f620a02909a140e7fb016196e0c187a19180ddf058c063de28204a063e73c165.jpg", "table_caption": ["Table 5: Results of computation times (seconds) for experiments on real-world data. "], "table_footnote": [], "page_idx": 25}, {"type": "image", "img_path": "B3jt0Ran2t/tmp/ef1e22fab32f4a32560f23a57314c405db1b12acf5c2677ac520fdb8b55b10e2.jpg", "img_caption": ["Figure 3: Results of experiments on synthetic data when $\\phi=1.0$ . "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "1026 NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Claims ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: Our objective is to elucidate why stable matchings exist in practical daycare markets. Through a realistic probabilistic model, we have theoretically demonstrated that stable matchings occur with high probability, and numerical experiments using real world data and synthetic data further reinforce this contribution. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "1027   \n1028   \n1029   \n1030   \n1031   \n1032   \n1033   \n1034   \n1035   \n1036   \n1037   \n1038   \n1039   \n1040   \n1041   \n1042   \n1043   \n1044   \n1045   \n1046   \n1047   \n1048   \n1049 ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 26}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: Our theoretical contribution are made under assumptions which are motivated by real-world datasets and we give full description of these assumptions in the paper. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: \u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper. \u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper. \u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be. \u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated. \u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon. \u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size. \u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. \u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 27}, {"type": "text", "text": "1050   \n1051   \n1052   \n1053   \n1054   \n1055   \n1056   \n1057   \n1058   \n1059   \n1060   \n1061   \n1062   \n1063   \n1064   \n1065   \n1066   \n1067   \n1068   \n1069   \n1070   \n1071   \n1072   \n1073   \n1074   \n1075   \n1076   \n1077   \n1078   \n1079   \n1080   \n1081   \n1082   \n1083   \n1084   \n1085   \n1086   \n1087   \n1088   \n1089   \n1090   \n1091   \n1092   \n1093   \n1094   \n1095   \n1096   \n1097   \n1098   \n1099   \n1100   \n1101 ", "page_idx": 27}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Justification: We give detailed proofs for all theorems in the appendix. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 27}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "02 \u2022 If the paper includes experiments, a No answer to this question will not be perceived   \n03 well by the reviewers: Making the paper reproducible is important, regardless of   \n04 whether the code and data are provided or not.   \n05 \u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken   \n06 to make their results reproducible or verifiable.   \n07 \u2022 Depending on the contribution, reproducibility can be accomplished in various ways.   \n08 For example, if the contribution is a novel architecture, describing the architecture fully   \n09 might suffice, or if the contribution is a specific model and empirical evaluation, it may   \n10 be necessary to either make it possible for others to replicate the model with the same   \n11 dataset, or provide access to the model. In general. releasing code and data is often   \n12 one good way to accomplish this, but reproducibility can also be provided via detailed   \n13 instructions for how to replicate the results, access to a hosted model (e.g., in the case   \n14 of a large language model), releasing of a model checkpoint, or other means that are   \n15 appropriate to the research performed.   \n16 \u2022 While NeurIPS does not require releasing code, the conference does require all submis  \n17 sions to provide some reasonable avenue for reproducibility, which may depend on the   \n18 nature of the contribution. For example   \n19 (a) If the contribution is primarily a new algorithm, the paper should make it clear how   \n20 to reproduce that algorithm.   \n21 (b) If the contribution is primarily a new model architecture, the paper should describe   \n22 the architecture clearly and fully.   \n23 (c) If the contribution is a new model (e.g., a large language model), then there should   \n24 either be a way to access this model for reproducing the results or a way to reproduce   \n25 the model (e.g., with an open-source dataset or instructions for how to construct   \n26 the dataset).   \n27 (d) We recognize that reproducibility may be tricky in some cases, in which case   \n28 authors are welcome to describe the particular way they provide for reproducibility.   \nIn the case of closed-source models, it may be that access to the model is limited in   \nsome way (e.g., to registered users), but it should be possible for other researchers   \nto have some path to reproducing or verifying the results.   \n29   \n30   \n31   \n32 5. Open access to data and code   \n33 Question: Does the paper provide open access to the data and code, with sufficient instruc  \n34 tions to faithfully reproduce the main experimental results, as described in supplemental   \n35 material?   \n36 Answer: [Yes]   \n37 Justification: All codes are included in the supplemental material along with instructions.   \n38 Guidelines:   \n39 \u2022 The answer NA means that paper does not include experiments requiring code.   \n40 \u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/   \n41 public/guides/CodeSubmissionPolicy) for more details.   \n42 \u2022 While we encourage the release of code and data, we understand that this might not be   \n43 possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not   \n44 including code, unless this is central to the contribution (e.g., for a new open-source   \n45 benchmark).   \n46 \u2022 The instructions should contain the exact command and environment needed to run to   \n47 reproduce the results. See the NeurIPS code and data submission guidelines (https:   \n48 //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n49 \u2022 The authors should provide instructions on data access and preparation, including how   \n50 to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n51 \u2022 The authors should provide scripts to reproduce all experimental results for the new   \n52 proposed method and baselines. If only a subset of experiments are reproducible, they   \n53 should state which ones are omitted from the script and why.   \n54 \u2022 At submission time, to preserve anonymity, the authors should release anonymized   \n55 versions (if applicable).   \n1156 \u2022 Providing as much information as possible in supplemental material (appended to the   \n1157 paper) is recommended, but including URLs to data and code is permitted.   \n1158 6. Experimental Setting/Details   \n1159 Question: Does the paper specify all the training and test details (e.g., data splits, hyper  \n1160 parameters, how they were chosen, type of optimizer, etc.) necessary to understand the   \n1161 results?   \n1162 Answer: [Yes]   \n1163 Justification: All codes are included in the supplemental material along with instructions.   \n1164 Guidelines:   \n1165 \u2022 The answer NA means that the paper does not include experiments.   \n1166 \u2022 The experimental setting should be presented in the core of the paper to a level of detail   \n1167 that is necessary to appreciate the results and make sense of them.   \n1168 \u2022 The full details can be provided either with the code, in appendix, or as supplemental   \n1169 material.   \n1170 7. Experiment Statistical Significance   \n1171 Question: Does the paper report error bars suitably and correctly defined or other appropriate   \n1172 information about the statistical significance of the experiments?   \n1173 Answer: [Yes]   \n1174 Justification: The research conducted in this study differs from classical settings in machine   \n1175 learning. Here, we focus solely on whether a synthetic instance admits a stable matching.   \n1176 We randomly generate instances and report the success rate of our algorithm.   \n1177 Guidelines:   \n1178 \u2022 The answer NA means that the paper does not include experiments.   \n1179 \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confi  \n1180 dence intervals, or statistical significance tests, at least for the experiments that support   \n1181 the main claims of the paper.   \n1182 \u2022 The factors of variability that the error bars are capturing should be clearly stated (for   \n1183 example, train/test split, initialization, random drawing of some parameter, or overall   \n1184 run with given experimental conditions).   \n1185 \u2022 The method for calculating the error bars should be explained (closed form formula,   \n1186 call to a library function, bootstrap, etc.)   \n1187 \u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n1188 \u2022 It should be clear whether the error bar is the standard deviation or the standard error   \n1189 of the mean.   \n1190 \u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should   \n1191 preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis   \n1192 of Normality of errors is not verified.   \n1193 \u2022 For asymmetric distributions, the authors should be careful not to show in tables or   \n1194 figures symmetric error bars that would yield results that are out of range (e.g. negative   \n1195 error rates).   \n1196 \u2022 If error bars are reported in tables or plots, The authors should explain in the text how   \n1197 they were calculated and reference the corresponding figures or tables in the text.   \n1198 8. Experiments Compute Resources   \n1199 Question: For each experiment, does the paper provide sufficient information on the com  \n1200 puter resources (type of compute workers, memory, time of execution) needed to reproduce   \n1201 the experiments?   \n1202 Answer: [Yes]   \n1203 Justification: Experiments can be conducted on a regular laptop without requiring extensive   \n1204 computational resources.   \n1205 Guidelines:   \n1206 \u2022 The answer NA means that the paper does not include experiments. ", "page_idx": 28}, {"type": "text", "text": "", "page_idx": 28}, {"type": "text", "text": "", "page_idx": 29}, {"type": "text", "text": "\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 30}, {"type": "text", "text": "15 Question: Does the research conducted in the paper conform, in every respect, with the   \n16 NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "1217 Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "1218 Justification: We have checked the NeurIPS Code of Ethics.   \n1219 Guidelines:   \n1220 \u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n1221 \u2022 If the authors answer No, they should explain the special circumstances that require a   \n1222 deviation from the Code of Ethics.   \n1223 \u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consid  \n1224 eration due to laws or regulations in their jurisdiction). ", "page_idx": 30}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "25 10. Broader Impacts ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "226 Question: Does the paper discuss both potential positive societal impacts and negative   \n27 societal impacts of the work performed? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Justification: This paper investigates a practical matching problem involving the assignment of children to daycare centers in Japan. The goal is to understand the conditions under which stable matchings are more likely to exist. If a stable matching is unlikely, alternative solutions must be developed, such as adopting weaker versions of stability by minimizing the number of blocking coalitions, restricting the preference domain of families, and other approaches. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 30}, {"type": "text", "text": "1258 11. Safeguards ", "page_idx": 30}, {"type": "text", "text": "1259 Question: Does the paper describe safeguards that have been put in place for responsible   \n1260 release of data or models that have a high risk for misuse (e.g., pretrained language models,   \n1261 image generators, or scraped datasets)?   \n1262 Answer: [NA]   \n1263 Justification: The paper poses no such risks.   \n1264 Guidelines:   \n1265 \u2022 The answer NA means that the paper poses no such risks.   \n1266 \u2022 Released models that have a high risk for misuse or dual-use should be released with   \n1267 necessary safeguards to allow for controlled use of the model, for example by requiring   \n1268 that users adhere to usage guidelines or restrictions to access the model or implementing   \n1269 safety filters.   \n1270 \u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors   \n1271 should describe how they avoided releasing unsafe images.   \n1272 \u2022 We recognize that providing effective safeguards is challenging, and many papers do   \n1273 not require this, but we encourage authors to take this into account and make a best   \n1274 faith effort.   \n1275 12. Licenses for existing assets   \n1276 Question: Are the creators or original owners of assets (e.g., code, data, models), used in   \n1277 the paper, properly credited and are the license and terms of use explicitly mentioned and   \n1278 properly respected?   \n1279 Answer: [NA]   \n1280 Justification: The paper does not use existing assets.   \n1281 Guidelines:   \n1282 \u2022 The answer NA means that the paper does not use existing assets.   \n1283 \u2022 The authors should cite the original paper that produced the code package or dataset.   \n1284 \u2022 The authors should state which version of the asset is used and, if possible, include a   \n1285 URL.   \n1286 \u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n1287 \u2022 For scraped data from a particular source (e.g., website), the copyright and terms of   \n1288 service of that source should be provided.   \n1289 \u2022 If assets are released, the license, copyright information, and terms of use in the   \n1290 package should be provided. For popular datasets, paperswithcode.com/datasets   \n1291 has curated licenses for some datasets. Their licensing guide can help determine the   \n1292 license of a dataset.   \n1293 \u2022 For existing datasets that are re-packaged, both the original license and the license of   \n1294 the derived asset (if it has changed) should be provided.   \n1295 \u2022 If this information is not available online, the authors are encouraged to reach out to   \n1296 the asset\u2019s creators.   \n1297 13. New Assets   \n1298 Question: Are new assets introduced in the paper well documented and is the documentation   \n1299 provided alongside the assets?   \n1300 Answer: [NA]   \n1301 Justification: The paper does not release new assets.   \n1302 Guidelines:   \n1303 \u2022 The answer NA means that the paper does not release new assets.   \n1304 \u2022 Researchers should communicate the details of the dataset/code/model as part of their   \n1305 submissions via structured templates. This includes details about training, license,   \n1306 limitations, etc.   \n1307 \u2022 The paper should discuss whether and how consent was obtained from people whose   \n1308 asset is used.   \n1309 \u2022 At submission time, remember to anonymize your assets (if applicable). You can either   \n1310 create an anonymized URL or include an anonymized zip file.   \n311 14. Crowdsourcing and Research with Human Subjects   \n312 Question: For crowdsourcing experiments and research with human subjects, does the paper   \n313 include the full text of instructions given to participants and screenshots, if applicable, as   \n314 well as details about compensation (if any)?   \n315 Answer: [NA]   \n316 Justification: This paper does not involve crowdsourcing nor research with human subjects.   \n317 Guidelines:   \n318 \u2022 The answer NA means that the paper does not involve crowdsourcing nor research with   \n319 human subjects.   \n320 \u2022 Including this information in the supplemental material is fine, but if the main contribu  \n321 tion of the paper involves human subjects, then as much detail as possible should be   \n322 included in the main paper.   \n323 \u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation,   \n324 or other labor should be paid at least the minimum wage in the country of the data   \n325 collector.   \n326 15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human   \n327 Subjects   \n328 Question: Does the paper describe potential risks incurred by study participants, whether   \n329 such risks were disclosed to the subjects, and whether Institutional Review Board (IRB)   \n330 approvals (or an equivalent approval/review based on the requirements of your country or   \n331 institution) were obtained?   \n332 Answer: [NA]   \n333 Justification: This paper does not involve crowdsourcing nor research with human subjects.   \n334 Guidelines:   \n335 \u2022 The answer NA means that the paper does not involve crowdsourcing nor research with   \n336 human subjects.   \n337 \u2022 Depending on the country in which research is conducted, IRB approval (or equivalent)   \n338 may be required for any human subjects research. If you obtained IRB approval, you   \n339 should clearly state this in the paper.   \n340 \u2022 We recognize that the procedures for this may vary significantly between institutions   \n341 and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the   \n342 guidelines for their institution.   \n343 \u2022 For initial submissions, do not include any information that would break anonymity (if   \n344 applicable), such as the institution conducting the review. ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 32}]