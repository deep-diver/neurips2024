[{"figure_path": "jeWZStUavo/figures/figures_1_1.jpg", "caption": "Figure 1: Placement layouts and congestions of (a) MaskPlace and (b) MaskRegulate on the superblue1 from ICCAD 2015 benchmark [14], where the red points indicate the congestion critical regions. (c): Comparing two crucial PPA metrics, namely Congestion and total negative slack (TNS) between MaskRegulate, DREAMPlace [19], AutoDMP [1], WireMask-EA [29], and MaskPlace [16], where lower values indicate better performance. These results are obtained using Cadence Innovus.", "description": "This figure compares the placement layouts and congestion levels of MaskPlace and the proposed MaskRegulate method on the superblue1 benchmark from the ICCAD 2015 dataset.  Subfigure (a) shows MaskPlace's layout, while (b) shows MaskRegulate's improved layout with reduced congestion in the red highlighted areas. Subfigure (c) provides a quantitative comparison of two key performance metrics (congestion and total negative slack (TNS)) between MaskRegulate and four other state-of-the-art placement methods (DREAMPlace, AutoDMP, WireMask-EA, and MaskPlace), highlighting the superior performance of MaskRegulate.  The PPA (Power, Performance, Area) results are obtained using Cadence Innovus, a commercial electronic design automation tool.", "section": "1 Introduction"}, {"figure_path": "jeWZStUavo/figures/figures_4_1.jpg", "caption": "Figure 2: Overview of MaskRegulate. MaskRegulate shares a similar architecture to MaskPlace [16], except for the MDP formulation and the integration of regularity in the state and reward.", "description": "This figure illustrates the architecture of the proposed MaskRegulate method.  MaskRegulate takes inspiration from MaskPlace but modifies the Markov Decision Process (MDP) formulation and incorporates a regularity component into the state and reward. The input consists of several image masks representing the chip canvas, macro positions, wire lengths, and regularity. These masks are processed through a local mask fusion and a global encoder/decoder network to generate an action probability matrix and value estimations, guiding the placement refinement process.", "section": "3 Method"}, {"figure_path": "jeWZStUavo/figures/figures_4_2.jpg", "caption": "Figure 3: Illustration of chip canvas, PositionMask, WireMask and RegularMask. We use the left-bottom corner of the module to denotes its location.", "description": "This figure shows four different types of masks used in the MaskRegulate algorithm. (a) shows the chip canvas, which is a grid representing the chip layout. (b) shows the PositionMask, which indicates the valid positions for placing the current macro.  The color coding represents whether each position is feasible or not. (c) shows the WireMask, a heatmap representing the change in wirelength if the current macro is placed at each position.  The colors indicate the magnitude and direction of the change. (d) shows the RegularityMask, a heatmap showing the regularity score for each position.  This mask encourages placing macros towards the edges of the chip, which improves regularity and reduces macro blockages.", "section": "3 Method"}, {"figure_path": "jeWZStUavo/figures/figures_8_1.jpg", "caption": "Figure 4: Illustration of MaskRegulate regulators with varying \u03b1 values (ranging from 0.1 to 0.9).", "description": "This figure visualizes the impact of the trade-off coefficient \u03b1 on the performance of MaskRegulate.  It shows how different values of \u03b1 (controlling the balance between minimizing HPWL and maximizing regularity) affect the global HPWL and regularity proxy metrics (a, b) and PPA metrics (c, d) on the superblue1 and superblue7 benchmarks.  Different \u03b1 values lead to different multi-objective preferences in the optimization process. The plots reveal the trade-offs between minimizing wirelength and maximizing regularity, highlighting the influence of \u03b1 on the final placement quality.", "section": "4.4 RQ3: How do the different parts of MaskRegulate affect the performance?"}, {"figure_path": "jeWZStUavo/figures/figures_9_1.jpg", "caption": "Figure 5: Placement layouts and congestions of different methods on the eight ICCAD 2015 benchmarks. The congestion results are obtained by Cadence Innovus, where red points indicate the congestion critical regions.", "description": "This figure compares the placement layouts and congestion levels produced by five different placement methods (DREAMPlace, AutoDMP, WireMask-EA, MaskPlace, and MaskRegulate) on eight benchmark circuits from the ICCAD 2015 dataset.  Red areas highlight regions of high congestion, indicating potential routing difficulties. The figure visually demonstrates the effectiveness of the MaskRegulate method in reducing congestion compared to other approaches.", "section": "4.5 Visualizations of placement results and congestion"}, {"figure_path": "jeWZStUavo/figures/figures_13_1.jpg", "caption": "Figure 6: Illustration of chip canvas and calculation of HPWL.", "description": "This figure illustrates how half-perimeter wirelength (HPWL) is calculated.  It shows a chip canvas with modules (M1, M2, M3, M4) and their pins (P(i,j)). Some modules are \"adjusted\", meaning their positions are fixed, and others are \"adjusting\", meaning their positions are being optimized.  The figure demonstrates how to compute HPWL for two nets, one in green and one in purple, by calculating the horizontal and vertical distances between the pins of each net.  The figure visually explains the concept of HPWL as a proxy metric for the total wirelength of nets in the placement solution.", "section": "A.2 HPWL calculation"}]