[{"type": "text", "text": "Abstracted Shapes as Tokens - A Generalizable and Interpretable Model for Time-series Classification ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Yunshi Wen \u2217 Tengfei Ma Rensselaer Polytechnic Stony Brook University Institute tengfei.ma@stonybrookmedicine.edu weny2@rpi.edu ", "page_idx": 0}, {"type": "text", "text": "Lam M. Nguyen IBM Research lamnguyen.mltd@ibm.com ", "page_idx": 0}, {"type": "text", "text": "Tsui-Wei Weng   \nUniversity of California,   \nSan Diego   \nlweng@ucsd.edu ", "page_idx": 0}, {"type": "text", "text": "Anak Agung Julius Rensselaer Polytechnic Institute agung@ecse.rpi.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "In time-series analysis, many recent works seek to provide a unified view and representation for time-series across multiple domains, leading to the development of foundation models for time-series data. Despite diverse modeling techniques, existing models are black boxes and fail to provide insights and explanations about their representations. In this paper, we present VQShape, a pre-trained, generalizable, and interpretable model for time-series representation learning and classification. By introducing a novel representation for time-series data, we forge a connection between the latent space of VQShape and shape-level features. Using vector quantization, we show that time-series from different domains can be described using a unified set of low-dimensional codes, where each code can be represented as an abstracted shape in the time domain. On classification tasks, we show that the representations of VQShape can be utilized to build interpretable classifiers, achieving comparable performance to specialist models. Additionally, in zero-shot learning, VQShape and its codebook can generalize to previously unseen datasets and domains that are not included in the pre-training process. The code and pre-trained weights are available at https://github.com/YunshiWen/ VQShape. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "As one of the fundamental forms of data, time-series (TS) exist in a wide range of domains and applications, including healthcare, weather, traffic, motions, human activities, sensors, etc. Modeling TS data across multiple domains has been a challenging task since TS data can have diverse sampling rates, lengths, magnitudes, frequencies, and noise levels. Due to this heterogeneity, most of the existing machine learning methods for TS modeling focus only on a single dataset or a single domain. ", "page_idx": 0}, {"type": "text", "text": "Recently, motivated by the success of large pre-trained models in natural language processing and computer vision, various approaches adopted from these two fields have been proposed to build a unified view and feature space for TS data from different domains [Liang et al., 2024]. Most of the models use a transformer as the backbone and pre-train it on a diverse range of datasets [Zerveas et al., 2021, Nie et al., 2023, Goswami et al., 2024]. These methods have achieved great success in TS representation learning, benefiting various downstream tasks and demonstrating their generalizability. Despite their success, most of them remain black boxes since they cannot provide human-understandable representations. While tokenizers have played increasingly important roles in pre-trained models for language and vision, in TS, pre-training is often conducted by predicting the next or masked timestamp, time window, or patch, lacking the concept of discrete tokens as in LLMs. Very recently, Talukder et al. [2024] developed TOTEM, which utilizes VQ-VAE [van den Oord et al., 2017] to obtain the codebook and reconstruct the TS. Nevertheless, like all other VQ-VAE models, the tokens from the codebook are just latent vector representations and lack physical meaning. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Alternatively, in interpretable TS modeling, shapelets have been recognized as interpretable and expressive features for TS data. Initially defined as TS subsequences that discriminate different categories in classification [Ye and Keogh, 2011], they were later generalized to representative patterns [Grabocka et al., 2014]. Specifically, shapelets can transform TS data into low-dimensional representations either in the form of the distance between a shapelet and a TS, or as a logical predicate that measures the probability of a shapelet existing in a TS [Lines et al., 2012]. However, despite their effectiveness in classification tasks, this shape-level feature lacks flexibility since shapelets with pre-defined lengths are optimized for capturing discriminative features for making dataset-specific predictions. For example, when measuring human motion with accelerometers, an adult and a child performing the same gesture may record TS with different offsets, scales, and durations. Although they share the same shape-level concept, multiple shapelets are required to describe them separately. Additionally, shapelet-based interpretable models are specialized to a single dataset, and the learned shapelets fail to transfer to different domains. ", "page_idx": 1}, {"type": "text", "text": "In this paper, motivated by the limitations of existing pre-trained models and interpretable models in TS, we propose VQShape, a self-supervised pre-trained model that provides abstracted shapes as interpretable and generalizable tokens for TS modeling. Firstly, we decompose a TS subsequence into a set of attributes, including abstracted shape, offset, scale, start time, and duration. By incorporating vector quantization, VQShape learns a codebook of abstracted shapes that are generalizable and descriptive, representing TS from various domains. Evaluated on various classification tasks, and without fine-tuning, VQShape achieves comparable performance to black-box pre-trained models while additionally providing interpretable latent-space tokens and representations to describe TS data. Our contributions are summarized below: ", "page_idx": 1}, {"type": "text", "text": "\u2022 We present an interpretable representation composed of abstracted shapes and attributes to describe TS data based on shape-level features, which enables the learning of datasetagnostic interpretable features.   \n\u2022 We introduce VQShape, to the best of our knowledge, the first self-supervised pre-trained model that extracts interpretable representations from any TS data. VQShape also learns a codebook containing abstracted shapes that generalize to multiple datasets.   \n\u2022 Pre-trained on diverse datasets and without fine-tuning, VQShape achieves comparable performance to existing black-box models on benchmark classification datasets. We explicitly demonstrate that the representations and VQShape are interpretable and generalizable for unseen datasets and domains. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Deep learning methods for TS analysis. Deep learning methods are increasingly applied to TS analysis. Existing methods can be categorized into two groups depending on whether they use a Transformer structure as the backbone. For non-Transformer-based models, classical deep learning models such as MLP, CNN, and ResNet demonstrate decent performance on various tasks [Wang et al., 2017]. Recent methods have developed various feature engineering techniques to model explicit features of TS data. TimesNet [Wu et al., 2023] transforms TS into 2D space to capture multi-period features in a modularized way, achieving state-of-the-art performance on various tasks. TS2Vec [Yue et al., 2022] employs hierarchical contrastive learning for unsupervised representation learning of TS data. T-Rep [Fraikin et al., 2024] introduces a self-supervised representation learning approach by augmenting the TS with time embeddings, providing additional temporal structure to the latent space. ", "page_idx": 1}, {"type": "text", "text": "Transformers have been increasingly applied to TS analysis, but usually with some modifications to the original structure. For example, Autoformer [Wu et al., 2021] modifies the attention mechanism by incorporating an Auto-Correlation mechanism to capture temporal dependencies. When applying ", "page_idx": 1}, {"type": "text", "text": "Transformers to real-valued data, transforming the inputs into patches has been recognized as an effective approach for images [Dosovitskiy et al., 2021] since the tokens could contain more semantic meaning, like a \u201cword\u201d in language. Similarly, PatchTST [Nie et al., 2023] shows that TS analysis also benefits from combining patched inputs with Transformers, viewing a TS as a sequence of 64 \u201cwords\u201d. ", "page_idx": 2}, {"type": "text", "text": "Pre-trained Models for TS data. The success of large pre-trained models in language and vision motivates the development of foundation models for TS analysis. Existing approaches aim to find a unified view for TS data from different perspectives. For example, TST [Zerveas et al., 2021] uses the Transformer model [Vaswani et al., 2017] and is pre-trained using masked reconstruction, while TimeGPT-1 [Garza et al., 2023] is pre-trained by generating a forecasting window. MOMENT [Goswami et al., 2024] extends a patch-based Transformer [Nie et al., 2023] to multiple datasets by unifying the lengths of TS data using padding and sub-sampling. The model is also pre-trained to reconstruct the masked patches. TOTEM [Talukder et al., 2024] applies a convolutional neural network (CNN) encoder to raw TS data and uses vector quantization (VQ) on the encoder outputs, providing a discrete and domain-invariant codebook for TS data. TOTEM is pre-trained as a VQVAE [van den Oord et al., 2017] to reconstruct the whole TS, viewing the latent-space codes from convolutions as a unified representation. UniTS [Gao et al., 2024] introduces a prompt-based method to unify predictive and generative tasks within a single model and pre-training process. Although these methods learn representations that benefti various downstream tasks and demonstrate generalizability, these pre-trained models remain black boxes since they cannot provide human-understandable representations. ", "page_idx": 2}, {"type": "text", "text": "3 Proposed Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Towards interpretable TS modeling, we first present the formulations of shape-level representations, describing univariate TS data using a set of abstracted shapes and attributes. Then, we introduce the architecture of VQShape and its components with detailed workflow and products from each step. ", "page_idx": 2}, {"type": "text", "text": "Notations. Let $(\\mathcal{X},\\mathcal{Y})\\;=\\;\\{(x_{i},y_{i})|i\\;=\\;1,.\\;.\\;.\\;,N\\}$ denote a TS classification dataset with $N$ samples, where $\\boldsymbol{x}_{i}\\in\\mathbb{R}^{M\\times T}$ is a multivariate TS sample and $y_{i}\\in\\{1,\\ldots,C\\}$ is the class label. Here, $M$ is the number of variables, $T$ is the length in timestamp, and $C$ is the number of categories. Each multivariate TS sample $x_{i}$ can be viewed as a set of univariate TS samples where $\\boldsymbol{x}_{i}^{m}\\in\\overline{{\\mathbb{R}^{T}}}$ denotes the TS at the mth variable. For simplicity in notations, in this paper, xim,t1:t2 denotes a subsequence of $\\boldsymbol{x}_{i}^{m}$ between timestamp $\\lfloor{T t_{1}}\\rfloor$ and $\\lfloor{T t_{2}}\\rfloor$ , where $t_{1},t_{2}\\in[0,1]$ are relative positions. ", "page_idx": 2}, {"type": "text", "text": "3.1 Shape-level representation ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "For a univariate TS $x$ , a subsequence $s_{k}$ can be represented by an attribute tuple $\\tau_{k}=$ $\\left(z_{k},\\mu_{k},\\sigma_{k},t_{k},l_{k}\\right)$ where ", "page_idx": 2}, {"type": "text", "text": "\u2022 $z_{k}\\in\\mathbb{R}^{d_{\\mathrm{code}}}$ is the code for abstracted shape of $s_{k}$ ,   \n\u2022 $\\mu_{k}\\in\\mathbb{R}^{1}$ is the offset of $s_{k}$ ,   \n\u2022 $\\sigma_{k}\\in\\mathbb{R}^{1}$ is the scale (standard deviation) of $s_{k}$ and $\\sigma_{k}>0$ ,   \n\u2022 $t_{k}\\in\\mathbb{R}^{1}$ is the relative starting position of $s_{k}$ in $x$ and $0\\leq t_{k}\\leq1-l_{\\operatorname*{min}}$ , \u2022 $l_{k}\\in\\mathbb{R}^{1}$ is the relative length of $s_{k}$ w.r.t. the length of $x$ and $l_{\\mathrm{min}}\\le l_{k}\\le1-t_{k}$ . ", "page_idx": 2}, {"type": "text", "text": "Here, $l_{\\mathrm{min}}$ is the hyperparameter that defines the minimum length of a shape. We set $l_{\\mathrm{min}}=1/64$ as it is the length of a patch. In this work, we develop a pre-trained transformer model to produce a set of attribute tuples $\\bar{\\mathcal{T}}=\\{\\tau_{k}\\ |\\ k=1,\\ldots,K\\}$ given a univariate TS $x$ . Additionally, the model learns a codebook of abstracted shape $z$ that is reusable and generalizable for datasets from different domains. ", "page_idx": 2}, {"type": "text", "text": "3.2 VQShape Architecture ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "The VQShape model contains a TS encoder $\\mathcal{E}$ , a TS decoder $\\mathcal{D}$ , a latent-space codebook $\\mathcal{Z}$ , a shape decoder $\\boldsymbol{S}$ , an attribute encoder $\\mathcal{A}_{\\mathrm{enc}}$ , and an attribute decoder $\\mathcal{A}_{\\mathrm{dec}}$ . An overview of VQShape is presented in Figure 1. We then present a detailed formulation for each component. ", "page_idx": 2}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/fcb28e1046de43a7e10e6a6a9ddc0d0569241a13efeddf136b5c422dd10028fd.jpg", "img_caption": ["Figure 1: Overview of VQShape "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "TS Encoding. VQShape contains a patch-based transformer encoder [Nie et al., 2023, Goswami et al., 2024] which first transforms a univariate TS $x$ into $K$ non-overlapping fixed-length patches with dimension $d^{\\mathrm{patch}}$ . Then, the patches are encoded by learnable linear projection and additive position embedding, forming patch embeddings that serve as inputs to a transformer model. The transformer outputs $K$ latent embeddings $\\hat{h}\\,\\in\\,\\mathbb{R}^{d^{\\mathrm{cmbcd}}}$ . Formally, the TS encoder is denoted by $\\{\\hat{h}_{k}\\in\\mathbb{R}^{d^{\\mathrm{embed}}}\\mid k=1,\\ldots,K\\}=\\mathcal{E}(x)$ . Note that $\\hat{h}_{k}$ could contain information from all patches instead of only the $k^{\\mathrm{th}}$ patch. ", "page_idx": 3}, {"type": "text", "text": "Attribute Decoding. The attribute decoder $\\mathcal{A}_{\\mathrm{dec}}$ takes a latent embedding $h_{k}$ and extracts an attribute tuple $\\hat{\\tau}_{k}=(\\hat{z}_{k},\\mu_{k},\\sigma_{k},t_{k},l_{k})$ . Formally, $\\mathcal{A}_{\\mathrm{dec}}$ performs ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{\\tau}_{k}=(\\hat{z}_{k},\\mu_{k},\\sigma_{k},t_{k},l_{k})=\\mathcal{A}_{\\mathrm{dec}}(h_{k}),\\mathrm{~where}\\left\\{\\begin{array}{l l}{\\hat{z}_{k}=f_{z}(h_{k}),}\\\\ {\\mu_{k}=f_{\\mu}(h_{k}),}\\\\ {\\sigma_{k}=\\mathrm{softplus}(f_{\\sigma}(h_{k})),}\\\\ {t_{k}=\\mathrm{sigmoid}(f_{t}(h_{k}))\\cdot(1-l_{\\mathrm{min}}),}\\\\ {l_{k}=\\mathrm{sigmoid}(f_{l}(h_{k}))\\cdot(1-t_{k})+l_{\\mathrm{min}}.}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Each decoding function in $\\{f_{z},f_{\\mu},f_{\\sigma},f_{t},f_{l}\\}$ is implemented using a multi-layer perceptron (MLP) with one hidden layer and ReLU activation. Following a common notation [Esser et al., 2021], $\\hat{\\tau}$ denotes the attribute tuple before quantization. ", "page_idx": 3}, {"type": "text", "text": "Codebook and Vector-Quantization. The latent-space codebook is denoted by $\\mathcal{Z}=\\{z_{q}\\in\\mathbb{R}^{d^{\\mathrm{code}}}\\ |$ $q=1,\\ldots,N^{\\mathrm{code}}\\}$ . To learn a generalizable codebook that contains only the abstracted shape-level features, we use low-dimensional codes with $d^{\\mathrm{code}}=8$ . This configuration also creates a bottleneck for reconstruction, minimizing additional information that can be inferred besides the abstracted shapes. The quantization follows VQ-VAE [van den Oord et al., 2017] that selects the discrete code based on Euclidean distance where ", "page_idx": 3}, {"type": "equation", "text": "$$\nz_{k}=\\underset{z_{q}\\in\\mathcal{Z}}{\\arg\\operatorname*{min}}\\,\\|\\hat{z}_{k}-z_{q}\\|.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Shape Decoding. The abstracted shape of a TS subsequence is a sequence with its length, offset, and scale information removed through normalizations. Given ${\\tau_{k}}\\,=\\,(z_{k},\\mu_{k},\\sigma_{k},t_{k},l_{k})$ , we first extract the target subsequence from $x$ specified by $t_{k}$ and $l_{k}$ denoted by $x_{t_{k}:t_{k}+l_{k}}$ . Then, $x_{t:t+l}$ is interpolated to a fixed length of $d^{s}$ to remove the length information. The shape decoder $\\boldsymbol{S}$ takes $z_{k}$ and outputs another sequence with the same length. Formally, for $\\tau_{k}$ , this step produces two sequences ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\boldsymbol{s}_{k}^{\\mathrm{target}}\\in\\mathbb{R}^{d^{s}}=\\mathrm{interpolate}\\big(\\boldsymbol{x}_{t_{k}:t_{k}+l_{k}}\\big),}\\\\ {\\boldsymbol{s}_{k}\\in\\mathbb{R}^{d^{s}}=\\mathcal{S}(\\boldsymbol{z}_{k})\\cdot\\boldsymbol{\\sigma}_{k}+\\mu_{k}.\\qquad\\qquad}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Note that the output of $\\boldsymbol{S}$ is normalized such that $S(z_{k})$ has the offset and scale information removed. ", "page_idx": 3}, {"type": "text", "text": "Attribute encoding and reconstruction. The attribute tuple after quantization $\\tau_{k}=$ $\\left(z_{k},\\mu_{k},\\sigma_{k},t_{k},l_{k}\\right)$ is transformed by a learnable linear projection denoted by $h_{k}\\ \\in\\ \\mathbb{R}^{d^{\\mathrm{cmbcd}}}\\ =$ $\\mathtt{L i n e a r}(\\tau_{k})$ . Then, the TS decoder $\\mathcal{D}$ takes $\\{h_{k}\\mid k=1,\\ldots,K\\}$ and outputs the reconstructed TS $\\hat{x}$ . ", "page_idx": 4}, {"type": "text", "text": "4 Pre-training ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "VQShape is pre-trained on diverse datasets to learn dataset-agnostic features and tokens. In this section, we introduce the self-supervised training strategies and objectives of VQShape. Then, we discuss the representations the model could provide to down-stream tasks. ", "page_idx": 4}, {"type": "text", "text": "4.1 Objectives ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The optimization objectives of VQShape during the pre-training stage are summarized below. ", "page_idx": 4}, {"type": "text", "text": "Reconstructions. Analogous to most of the VQ-VAE approaches, VQShape is trained to accurately reconstruct the input TS to learn essential latent-space representations for modeling TS data. Additionally, to provide interpretable representations, the decoded shapes should be similar to the actual subsequences. Therefore, the reconstruction minimizes two objectives: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{l l}{{\\mathrm{Time-series\\reconstruction:}}}&{{\\displaystyle\\qquad\\qquad}}&{{\\mathcal{L}_{x}=\\|x-\\hat{x}\\|_{2}^{2},}}\\\\ {{\\mathrm{Subsequence\\reconstruction:}}}&{{\\displaystyle\\qquad\\qquad}}&{{\\mathcal{L}_{s}=\\frac{1}{K}\\sum_{k=1}^{K}\\|s_{k}^{\\mathrm{target}}-s_{k}\\|_{2}^{2}.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Vector Quantization. We follow VQ-VAE [van den Oord et al., 2017] to define the vectorquantization objective which trains the encoder $\\mathcal{E}$ and codebook $\\mathcal{Z}$ . Additionally, inspired by Yu et al. [2024], we add additional entropy terms to encourage codebook usage. We find these terms could improve pre-training stability and avoid collapse of codebook usage. The objective for learning the codebook is defined by ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{vq}}=\\underbrace{\\|\\hat{z}-\\mathbf{s}\\mathbf{g}(z)\\|_{2}^{2}+\\lambda_{\\mathrm{commit}}\\|\\mathbf{s}\\mathbf{g}(\\hat{z})-z\\|_{2}^{2}}_{\\mathrm{quantization}}+\\underbrace{\\mathbb{E}\\left[H(q(\\hat{z},\\mathcal{Z}))\\right]-H(\\mathbb{E}\\left[q(\\hat{z},\\mathcal{Z})\\right])}_{\\mathrm{codebook~usage}},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\operatorname{sg}(\\cdot)$ is the stop-gradient operator and $H(\\cdot)$ is the entropy function for discrete variables. $q(z,{\\mathcal{Z}})=$ softmax $\\big(\\prod\\bar{z}-z_{k}\\|_{2}^{2}\\mid\\bar{z}_{k}\\in\\mathcal{Z}\\big]\\big)$ measures the distance between $\\hat{z}$ and all codes in $\\mathcal{Z}$ as a categorical distribution. ", "page_idx": 4}, {"type": "text", "text": "Disentanglement of shapes. In Equation 5, the attributes $\\left(z_{k},\\mu_{l},\\sigma_{k}\\right)$ are optimized towards accurate subsequence reconstructions. It is important to note that, since $(t_{k},l_{k})$ defines $s_{k}^{\\mathrm{target}}$ , they are essential for learning the abstracted shapes and the codebook. However, it is challenging to use gradients from reconstruction in Equation 4 solely to learn $(t_{k},l_{k})$ for making informative subsequence selection. Therefore, we introduce an additional regularization that encourages the latent-space tokens (attributes) to capture shape-level information with diverse positions and scales. This regularization is defined as ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathcal{L}_{\\mathrm{div}}=\\displaystyle\\frac{1}{K^{2}}\\sum_{k_{1}=1}^{K}\\sum_{k_{2}=1}^{K}\\mathbb{1}(k_{1}\\neq k_{2})\\,\\,\\mathbf{relu}\\left(\\epsilon-\\|\\kappa(t_{k_{1}},l_{k_{1}})-\\kappa(t_{k_{2}},l_{k_{2}})\\|_{2}^{2}\\right)\\mathrm{,}}\\\\ &{\\mathrm{where}\\,\\,\\,\\kappa(t_{k},l_{k})=\\left[\\begin{array}{c}{\\cos(t_{k}\\pi)\\cdot\\ln(l_{k})/\\ln(l_{\\mathrm{min}})}\\\\ {\\sin(t_{k}\\pi)\\cdot\\ln(l_{k})/\\ln(l_{\\mathrm{min}})}\\end{array}\\right]\\mathrm{.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In Equation 7, $\\kappa(t_{k},l_{k})$ defines a coordinate transformation which maps $(t_{k},l_{k})$ into a space where (1) small $l_{k}$ values become more diverse and (2) large $l_{k}$ values from different $t_{k}$ become more concentrated. By making different $(t_{k},l_{k})$ diverse in this space, $\\mathscr{L}_{\\mathrm{div}}$ encourages the model to capture disentangled shape-level information while increasing the use of short sequences to capture local details. Figure 8 visualizes an example of transformation $\\kappa$ . $\\epsilon$ is a hyperparameter that defines a threshold distance in the transformed coordinate where two $(t_{k},l_{k})$ samples are considered sufficiently diverse. ", "page_idx": 4}, {"type": "text", "text": "The overall pre-training objective is to minimize ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{\\mathrm{pretrain}}=\\lambda_{x}\\mathcal{L}_{x}+\\lambda_{s}\\mathcal{L}_{s}+\\lambda_{\\mathrm{vq}}\\mathcal{L}_{\\mathrm{vq}}+\\lambda_{\\mathrm{div}}\\mathcal{L}_{\\mathrm{div}},}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\lambda_{x},\\lambda_{s},\\lambda_{\\mathrm{vq}},\\lambda_{\\mathrm{div}}$ are hyperparameters that define the weighting between the components.   \nDuring pre-training of VQShape, we set $\\lambda_{x}=\\lambda_{s}=\\lambda_{\\mathrm{vq}}=\\lambda_{\\mathrm{div}}=1$ and $\\lambda_{\\mathrm{commit}}=0.25$ . ", "page_idx": 5}, {"type": "text", "text": "Design Analysis. Overall, the encoding process in VQShape (Transformer encoder and attribute decoder) introduces an inductive bias by representing and summarizing univariate TS using a set of abstracted shapes along with their position, length, offset, and scale. The pre-training objectives guide the components toward learning interpretable representations (via subsequence reconstruction in Equation 5) and disentangled representations (via regularization in Equation 7), while preserving the information necessary to describe the TS (via reconstruction in Equation 4). These objectives introduce interpretability to the conventional deep autoencoder structure. By pre-training on diverse datasets with a universal codebook, VQShape further leverages this inductive bias to produce discrete and dataset-agnostic representations, resulting in a vocabulary of abstracted shapes that can be used as primitives to describe TS data. ", "page_idx": 5}, {"type": "text", "text": "Model Configurations. The settings of VQShape related to the model size correspond to those of the MOMENT-Small [Goswami et al., 2024] model. Specifically, we interpolate all the input univariate TS $x$ to have length $T=512$ , which is broken into $K=64$ patches with $d^{\\mathrm{patch}}=8$ . The Transformer layers in the encoder $\\mathcal{E}$ and decoder $\\mathcal{D}$ have 8 heads, an embedding dimension $d^{\\mathrm{embed}}=512$ , and a feed-forward layer of size 2048. We employ an asymmetric structure with an 8-layer encoder $\\mathcal{E}$ and a 2-layer decoder $\\mathcal{D}$ [He et al., 2022]. The codebook $\\mathcal{Z}$ contains $N^{\\mathrm{code}}=512$ codes, each with dimension $d^{\\mathrm{code}}\\,=\\,8$ . The subsequences $s_{k}^{\\mathrm{target}}$ and decoded sequences $s_{k}$ have length $d^{s}=128$ . We set the minimum shape length $l\\mathrm{min}=\\mathrm{`}/64$ . With these settings, VQShape has 37.1 million parameters. ", "page_idx": 5}, {"type": "text", "text": "In the pre-training stage, we train VQShape with the AdamW optimizer, using weight decay $\\lambda=0.01$ , $\\beta_{1}=0.9$ , $\\beta_{2}=0.999$ , gradient clipping of 1.0, and an effective batch size of 2048. We employ a cosine learning rate schedule with an initial learning rate of $1e^{-4}$ , a final learning rate of $1e^{-5}$ , and 1 epoch of linear warm-up. The pre-training dataset contains univariate TS extracted from the training split of 29 datasets from the UEA Multivariate TS Classification Archive [Bagnall et al., 2018], excluding the InsectWingbeat dataset, resulting in 1,387,642 univariate TS. We train VQShape for 50 epochs on this dataset using bfloat-16 mixed precision. ", "page_idx": 5}, {"type": "text", "text": "4.2 Representations for down-stream tasks ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "VQShape provides two types of representations: Latent-space Tokens and Code Histogram. ", "page_idx": 5}, {"type": "text", "text": "Tokens. Similar to the latent-space feature map of typical VQ approaches such as VQ-VAE [van den Oord et al., 2017] and VQ-GAN [Esser et al., 2021], VQShape also provides a set of tokens as representations. For an input univariate TS $x$ , the token representations are composed as $T\\in\\mathbb{R}^{K\\times(\\bar{d}^{\\mathrm{code}+4})}=\\{\\tau_{k}=(z_{k},\\mu_{k},\\bar{\\sigma}_{k},t_{k},l_{k})\\mid k=1,\\ldots,K\\}$ . The token representations can be useful for general down-stream tasks but are less interpretable than the code histogram representations in classification tasks. ", "page_idx": 5}, {"type": "text", "text": "Code Histogram. Inspired by Concept Bottleneck Models (CBMs) [Koh et al., 2020] developed in computer vision, we can also view each $z_{q}\\in\\mathcal{Z}$ as a concept for TS data. As CBMs have concept scores as representations, VQShape provides a similar representation in the form of a histogram of codes. Based on Equation 2, we can also have a vector of code indices ", "page_idx": 5}, {"type": "equation", "text": "$$\n{\\bf q}=\\left[q_{k}=\\operatorname*{arg\\,min}_{q=1,\\ldots,N^{\\mathrm{code}}}\\|\\hat{z}_{k}-z_{q}\\|\\mid k=1,\\ldots,K\\right].\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Then, the code histogram representation is defined as $\\mathbf{r}\\,\\in\\,\\mathbb{R}^{N^{\\mathrm{code}}}\\,=\\,\\mathrm{histogram}(\\mathbf{q})$ where each element in $\\mathbf{r}$ is the frequency of index $q$ in $\\mathbf{q}$ . Intuitively, the code histogram representation is analogous to BOSS [Sch\u00e4fer, 2015] but with non-deterministic window size and dataset-agnostic symbols. In classification tasks, this type of representation can be more interpretable since classifiers based on these features are able to produce rule-like predictions that are straightforward to interpret and understand. ", "page_idx": 5}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Datasets. We evaluate the pre-trained VQShape on multivariate TS classification tasks to demonstrate the effectiveness of learned shape-level representations on down-stream tasks. The evaluations are performed on the test split of 29 datasets from the UEA multivariate TS classification archive [Bagnall et al., 2018, Ruiz et al., 2021], with the InsectWingbeat dataset excluded. Table 4 summarizes statistics of those datasets. Details on experiment setups are included in Appendix A. ", "page_idx": 6}, {"type": "text", "text": "Baselines. We benchmark VQShape against baselines from four categories, including (1) classical methods: DTW [Chen et al., 2013] and Shapelet Transform with Random Forest classifier (STRF) [Bostrom and Bagnall, 2017], (2) supervised learning methods: DLinear [Zeng et al., 2023], Autoformer [Wu et al., 2021], FEDformer [Zhou et al., 2022], PatchTST [Nie et al., 2023], and TimesNet [Wu et al., 2023], (3) unsupervised representation learning methods: TS-TCC [Eldele et al., 2021], TST [Zerveas et al., 2021], TS2Vec [Yue et al., 2022], and T-Rep [Fraikin et al., 2024], (4) models pre-trained on multiple datasets: MOMENT [Goswami et al., 2024] and UniTS [Gao et al., 2024]. We compute the classification accuracy as metrics and compare the methods based on the statistics of accuracy and ranking. Details on benchmarking setups are included in Appendix A. ", "page_idx": 6}, {"type": "text", "text": "Table 1: Statistic and comparisons of the baselines and VQShape. The best case is marked with bold, the second best is marked with italic, and the third best is marked with underline. Some baselines fail are incompatible with some datasets which result in \u201cN/A\u201d. For fair comparison, we report the statistics with and without \u201cN/A\u201d. Complete results are presented in Table 5. ", "page_idx": 6}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/e801cccf98432b159f4ce96d30f26d53ff27e9008cbeb2c21b4277abef4cbe1f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "Results. On multivariate TS classification tasks, for each TS sample $x_{i}\\ \\in\\ \\mathcal X$ , we extract the token representations using VQShape and apply a learnable linear layer on this feature vector to predict the class label. Table 1 summarizes the performance of VQShape and baseline methods on the 29 UEA datasets. Complete results are presented in Table 5. From the results, we observe that the best-performing methods, including TimesNet, T-Rep, TS2Vec, MOMENT, and VQShape, have similar performance, and none of the methods has performance that is statistically significant compared to the others. Therefore, we conclude that VQShape achieves comparable performance to the state-of-the-art baselines while additionally providing interpretable pre-trained features. ", "page_idx": 6}, {"type": "text", "text": "Frozen Pre-trained Representations. Next, we compare the frozen pre-trained representations from three existing pre-trained models: MOMENT, UniTS, and VQShape. Since the pre-training dataset could have a dominant effect on the models, for fair comparisons, we reproduce MOMENTsmall and UniTS by training them on the same datasets as VQShape. Table 2 summarizes the statistics of the pre-trained models on the 29 UEA datasets. Complete results are presented in Table 6. From the results, we observe that VQShape outperforms MOMENT and UniTS on most of the datasets and in overall statistics. ", "page_idx": 6}, {"type": "text", "text": "5.1 Generalizability ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The experimental results presented above evaluate models pre-trained on the training splits of the UEA datasets and tested on the test splits of the same datasets, demonstrating the models\u2019 ability to generalize to unseen samples from the same domains. Besides in-domain generalizability, VQShape and its codebook can also generalize to datasets and domains not observed during pre-training. To demonstrate cross-domain generalizability, we train another model using 9 datasets from the UEA archive that are commonly selected to train and evaluate deep learning models [Zerveas et al., 2021, Wu et al., 2023], and then evaluate it on all 29 datasets. The right half of Table 2 summarizes the performance of this model, compared with MOMENT and UniTS trained with the same setup. We observe that VQShape and MOMENT trained on fewer datasets result in similar but slightly worse performance, indicating that the representations learned by the models can generalize to unseen domains. ", "page_idx": 6}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/7581a2a89b88810a9e77adb529a676e651fd5fec8fd0054bde767a008aad9bb1.jpg", "table_caption": ["Table 2: Comparison between three models pre-trained on all or a subset of the UEA datasets. The best cases are marked with bold. Complete results are presented in Table 6. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "5.2 Interpretability ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Universal Codebook of Abstracted Shapes. One of the most essential components of VQShape is the dataset-agnostic codebook that contains abstracted shapes. In Figure 6 of Appendix C.1, we decode all 512 codes in the codebook of VQShape to visualize their corresponding abstracted shapes. We observe that a large number of codes are decoded into similar shapes, which suggests that the codebook size can be further reduced. We then visualize the distribution of codes learned from pre-training (see Figure 7) which contains about 60 clusters. Inspired by this observation, we train a variant named VQShape-64 with codebook size $N^{\\mathrm{code}}~=~64$ . Figure 2 presents the decoded codebook of VQShape-64. ", "page_idx": 7}, {"type": "text", "text": "Interpretable Representations. Overall, the encoding of VQShape can be interpreted as \u201cTS $x$ is decomposed into (shape $z_{1}$ with offset $\\mu_{1}$ and scale $\\sigma_{1}$ , at $t_{1}$ with length $l_{1}$ ), . . . \u201d, and the decoding can be interpreted as \u201cThe composi", "page_idx": 7}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/a23d7de25b07d52829a988f2d913e2ff79a09bbc193b9b3360ef46f0401f3c74.jpg", "img_caption": ["Figure 2: Visualization of the decoded codebook from VQShape-64. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "tion of (shape $z_{1}$ with offset $\\mu_{1}$ and scale $\\sigma_{1}$ , at $t_{1}$ with length $l_{1}$ ), . . . becomes ${\\hat{x}}^{\\prime}$ . Figure 3 includes an example of interpretable representations learned by VQShape. From visualizations, we can confirm that VQShape can learn abstracted shapes that capture shape-level information with various positions and scales. ", "page_idx": 7}, {"type": "text", "text": "Discriminative Representations for Classification. We further show that the interpretable representations produced by VQShape also capture discriminative patterns that distinguish different categories in classification tasks. Figure 4 visualizes the average code histogram for samples from two categories. From the feature maps, it is obvious that several codes have significant differences in frequency between the two categories; these serve as discriminative features in classification tasks. We decode and visualize their corresponding abstracted shapes. The intuition provided by the histogram features can be interpreted as: \u201cSamples from the CW circle category usually contain shape $s_{61}$ in variate 1, and samples from the CCW circle category contain shape $s_{33}$ in variate 3, etc.\u201d ", "page_idx": 7}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/a088b5a15225be515d358608bca8ce5eba6375916a1b96cc3147422345b60312.jpg", "img_caption": ["Figure 3: An example of abstracted shapes and their attributes (i.e., token representations) extracted by VAShape. For better presnetation, we visualize 6 of the 64 shapes. "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/dd1685797832198417c547af9a82978f05d3b3a3a34710e73fa4970f83c59e63.jpg", "img_caption": ["Figure 4: Example of how the code histogram representations provide discriminative features for classification. Histogram representations are obtained from VQShape-64. The histograms are averaged over samples of the two classes from the test split of the UWaveGestureLibrary dataset. The top and bottom rows represent samples labeled as \u201cCW circle\u201d and \u201cCCW circle\u201d, respectively. Each column represent a variate (channel). "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "5.3 Ablation Study ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Representations and Codebook Scaling. We compare the performance of classifiers trained with token or histogram representations from the same pre-trained VQShape models. We also study how the size of the codebook affects the quality of these representations. Based on the results presented in Figure 5, we conclude that token classifiers always outperform histogram classifiers since token representations are more expressive than histogram representations from the same pre-trained model. ", "page_idx": 8}, {"type": "text", "text": "Additionally, the performance of token classifiers increases steadily as codebook size increases, since tokens from larger codebooks could contain more details. However, for histogram representations, choosing the appropriate codebook size is essential; we observe that a codebook size of 64 results in the best performance. These results match our previous observation in Section 5.2 where the model with $N^{\\mathrm{code}}=512$ results in only approximately 60 clusters of codes. A small codebook would learn codes that are too abstract to provide detailed representations, while a large codebook would learn similar codes that could lead to misleading features in the histograms. From the experimental results, we conclude that $N^{\\mathrm{code}}=64$ strikes the best balance between abstraction and expressiveness for pre-training on the UEA datasets, producing the best histogram representations. ", "page_idx": 8}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/ff85409dce75842de2c4a8a5dc42e1a7a192ac2c8abf931b96db2f804baa437c.jpg", "img_caption": ["Figure 5: Mean accuracy of classifiers trained with token and histogram representations across different codebook sizes. Performance of the token classifiers improve with larger codebook, while performance of the histogram classifiers peak at codebook size 64 and decline with larger codebook. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Note that within the scope of this paper, the number of code clusters remains a post-hoc discovery that can only be determined after pre-training. One could start with a large codebook size such as $N^{\\mathrm{code}}\\,=\\,51\\dot{2}$ , visualize the distribution of codes, and re-train with the appropriate codebook size. Developing a mechanism to adjust the codebook size dynamically during training or inference would be a valuable direction for future work. ", "page_idx": 9}, {"type": "text", "text": "Other Ablation Studies. We additionally conduct two ablation studies: (1) setting $d^{\\mathrm{{code}}}\\,=$ 32 to compare high-dimensional and lowdimensional codes, and (2) setting $\\lambda_{s}\\,=\\,0$ to assess the value of introducing shape-level information to the VQ-VAE structure. Table 3 summarizes the statistics of these two cases and the default setting. The complete results are presented in Table 7 and Table 8. From the overall statistics, pre-training with $\\lambda_{s}=0$ leads to degraded performance, which indicates that learning shape-level abstractions through sub", "page_idx": 9}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/43db85b78601374d49cb9704b1f08964ba2123b05e4687e93bf01d5c3a98dadc.jpg", "table_caption": ["Table 3: Statistics of ablation cases on code dimension and shape reconstruction loss. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "sequence reconstruction introduces useful information for classification tasks. Using codes with $d^{\\mathrm{code}}\\,=\\,32$ produces token classifiers with similar performance and better histogram classifiers. However, as stated in Section 3.2, we use low-dimensional code to create a bottleneck where the code should mainly contain the shape-level information. Using high-dimensional code may introduce additional information beyond the decoded shapes, which reduces interpretability. Therefore, the effect of using high-dimensional code would require extensive study. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion and Limitations ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This paper introduces VQShape, a self-supervised pre-trained, interpretable, and generalizable model for TS analysis. Taking advantage of large pre-trained Transformers and ideas from shapelets, VQShape extracts a set of interpretable representations from TS data, composed of abstracted shape, offset, scale, position, and duration. Pre-trained and evaluated on multivariate classification datasets from the UEA archive, VQShape achieves comparable or even better performance than blackbox models pre-trained on large datasets and with significantly more parameters, while providing additional interpretable representations. Furthermore, using VQShape, we present a codebook containing a set of abstracted shapes that generalize to various TS datasets, including unseen datasets. ", "page_idx": 9}, {"type": "text", "text": "In this paper, we do not term VQShape a foundation model for TS data, since the amount of pretraining data is still limited compared to other large pre-trained models such as MOMENT, and we are focusing only on classification tasks because the extracted shape tokens are mostly interpretable for classification. As presented in Table 6, based on the comparison between VQShape pre-trained on 29 and 9 datasets, simply adding more pre-training data may degrade performance on some datasets. This suggests that learning shape-level representations may not benefti from some types of data. For example, the BasicMotion datasets mostly contain signals with high-frequency sinusoidal components that do not contain meaningful shape-level information in short subsequences. Such datasets may \"pollute\" the pre-training of VQShape since the model will try to capture unnecessary high-frequency features. Therefore, if pre-trained on datasets at scale, additional pre-processing and input engineering should be included; however, we do not conduct explicit pre-processing in this paper. It would also be an important future step to develop interpretable frameworks for other TS analysis tasks, such as forecasting, imputation, and anomaly detection, using the interpretable tokens extracted by VQShape. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This work was supported in part by IBM through the IBM-Rensselaer Future of Computing Research Collaboration. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "Anthony Bagnall, Hoang Anh Dau, Jason Lines, Michael Flynn, James Large, Aaron Bostrom, Paul Southam, and Eamonn Keogh. The UEA multivariate time series classification archive, 2018. arXiv preprint arXiv:1811.00075, 2018.   \nAaron Bostrom and Anthony Bagnall. A shapelet transform for multivariate time series classification. arXiv preprint arXiv:1712.06428, 2017.   \nYanping Chen, Bing Hu, Eamonn Keogh, and Gustavo EAPA Batista. DTW-D: time series semisupervised learning from a single example. In Proceedings of the 19th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 383\u2013391, 2013.   \nAlexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, and Neil Houlsby. An image is worth 16x16 words: Transformers for image recognition at scale. In International Conference on Learning Representations, 2021.   \nEmadeldeen Eldele, Mohamed Ragab, Zhenghua Chen, Min Wu, Chee Keong Kwoh, Xiaoli Li, and Cuntai Guan. Time-series representation learning via temporal and contextual contrasting. In Proceedings of the Thirtieth International Joint Conference on Artificial Intelligence, IJCAI-21, pages 2352\u20132359, 2021.   \nPatrick Esser, Robin Rombach, and Bjorn Ommer. Taming transformers for high-resolution image synthesis. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 12873\u201312883, 2021.   \nArchibald Felix Fraikin, Adrien Bennetot, and Stephanie Allassonniere. T-rep: Representation learning for time series using time-embeddings. In The Twelfth International Conference on Learning Representations, 2024.   \nShanghua Gao, Teddy Koker, Owen Queen, Thomas Hartvigsen, Theodoros Tsiligkaridis, and Marinka Zitnik. UniTS: Building a unified time series model. arXiv preprint arXiv:2403.00131, 2024.   \nAzul Garza, Cristian Challu, and Max Mergenthaler-Canseco. TimeGPT-1. arXiv preprint arXiv:2310.03589, 2023.   \nMononito Goswami, Konrad Szafer, Arjun Choudhry, Yifu Cai, Shuo Li, and Artur Dubrawski. Moment: A family of open time-series foundation models. In International Conference on Machine Learning, 2024.   \nJosif Grabocka, Nicolas Schilling, Martin Wistuba, and Lars Schmidt-Thieme. Learning time-series shapelets. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 392\u2013401, 2014.   \nKaiming He, Xinlei Chen, Saining Xie, Yanghao Li, Piotr Doll\u00e1r, and Ross Girshick. Masked autoencoders are scalable vision learners. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 16000\u201316009, 2022.   \nPang Wei Koh, Thao Nguyen, Yew Siang Tang, Stephen Mussmann, Emma Pierson, Been Kim, and Percy Liang. Concept bottleneck models. In International conference on machine learning, pages 5338\u20135348. PMLR, 2020.   \nYuxuan Liang, Haomin Wen, Yuqi Nie, Yushan Jiang, Ming Jin, Dongjin Song, Shirui Pan, and Qingsong Wen. Foundation models for time series analysis: A tutorial and survey. arXiv preprint arXiv:2403.14735, 2024.   \nJason Lines, Luke M Davis, Jon Hills, and Anthony Bagnall. A shapelet transform for time series classification. In Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 289\u2013297, 2012.   \nYuqi Nie, Nam H. Nguyen, Phanwadee Sinthong, and Jayant Kalagnanam. A time series is worth 64 words: Long-term forecasting with transformers. In International Conference on Learning Representations, 2023.   \nAlejandro Pasos Ruiz, Michael Flynn, James Large, Matthew Middlehurst, and Anthony Bagnall. The great multivariate time series classification bake off: a review and experimental evaluation of recent algorithmic advances. Data Mining and Knowledge Discovery, 35(2):401\u2013449, 2021.   \nPatrick Sch\u00e4fer. The boss is concerned with time series classification in the presence of noise. Data Mining and Knowledge Discovery, 29:1505\u20131530, 2015.   \nSabera J Talukder, Yisong Yue, and Georgia Gkioxari. TOTEM: Tokenized time series embeddings for general time series analysis. In ICLR 2024 Workshop on Learning from Time Series For Health, 2024.   \nAaron van den Oord, Oriol Vinyals, and koray kavukcuoglu. Neural discrete representation learning. In Advances in Neural Information Processing Systems, 2017.   \nLaurens van der Maaten and Geoffrey Hinton. Visualizing data using t-sne. In Journal of Machine Learning Research, volume 9, pages 2579\u20132605, 2008.   \nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems, volume 30, 2017.   \nZhiguang Wang, Weizhong Yan, and Tim Oates. Time series classification from scratch with deep neural networks: A strong baseline. In 2017 International joint conference on neural networks (IJCNN), pages 1578\u20131585. IEEE, 2017.   \nHaixu Wu, Jiehui Xu, Jianmin Wang, and Mingsheng Long. Autoformer: Decomposition transformers with auto-correlation for long-term series forecasting. In Advances in Neural Information Processing Systems, 2021.   \nHaixu Wu, Tengge Hu, Yong Liu, Hang Zhou, Jianmin Wang, and Mingsheng Long. Timesnet: Temporal 2d-variation modeling for general time series analysis. In International Conference on Learning Representations, 2023.   \nLexiang Ye and Eamonn Keogh. Time series shapelets: a novel technique that allows accurate, interpretable and fast classification. Data mining and knowledge discovery, 2011.   \nLijun Yu, Jose Lezama, Nitesh Bharadwaj Gundavarapu, Luca Versari, Kihyuk Sohn, David Minnen, Yong Cheng, Agrim Gupta, Xiuye Gu, Alexander G Hauptmann, Boqing Gong, Ming-Hsuan Yang, Irfan Essa, David A Ross, and Lu Jiang. Language model beats diffusion - tokenizer is key to visual generation. In The Twelfth International Conference on Learning Representations, 2024.   \nZhihan Yue, Yujing Wang, Juanyong Duan, Tianmeng Yang, Congrui Huang, Yunhai Tong, and Bixiong Xu. TS2Vec: Towards universal representation of time series. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 36, pages 8980\u20138987, 2022.   \nAiling Zeng, Muxi Chen, Lei Zhang, and Qiang Xu. Are transformers effective for time series forecasting? In Proceedings of the AAAI conference on artificial intelligence, volume 37, pages 11121\u201311128, 2023.   \nGeorge Zerveas, Srideepika Jayaraman, Dhaval Patel, Anuradha Bhamidipaty, and Carsten Eickhoff. A transformer-based framework for multivariate time series representation learning. In Proceedings of the 27th ACM SIGKDD conference on knowledge discovery & data mining, pages 2114\u20132124, 2021.   \nTian Zhou, Ziqing Ma, Qingsong Wen, Xue Wang, Liang Sun, and Rong Jin. Fedformer: Frequency enhanced decomposed transformer for long-term series forecasting. In International conference on machine learning, pages 27268\u201327286. PMLR, 2022. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "A Experiment Setup ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "Environment. VQShape is implemented using Python 3.11.8 and PyTorch 2.2.2. The pre-training and evaluations are conducted on a machine with Intel Core i7-11700k CPU, 32GB of RAM, and a Nvidia RTX 4090 24GB GPU. ", "page_idx": 12}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/5fe21f1af53a63b488d49934a58267ad6abbaddf67600278f0c33718e188a49b.jpg", "table_caption": ["Table 4: Information of the 30 benchmark datasets from the UEA archive. "], "table_footnote": [], "page_idx": 12}, {"type": "text", "text": "Classification tasks. Taking frozen pre-trained representations from VQShape, we learn a linear classifier to make predictions. When training the linear classifier, we found that token representations work better with regularization of L2 on classifier weights, while histogram representations are more compatible with dropout on features. Therefore, to avoid overfitting and obtain the optimal performance, we tune both the L2 regularization weight (or weight decay) and the dropout rate. ", "page_idx": 12}, {"type": "text", "text": "When learning the linear classifier, we repeat the experiment with five random seeds and report the average accuracy in Table 5. The standard deviations of the five runs are included in Table 7. Note that we exclude the InsectWingbeat dataset since the dataset contains inconsistent and very short TS samples such as $T=1$ . Considering that the dataset has significantly more samples and channels than other datasets, the high volume of such short samples may have a negative effect on our method since the short TS do not contain any meaningful shape-level features. ", "page_idx": 12}, {"type": "text", "text": "Baseline Results. For baseline results presented in Table 1 and Table 5, we reproduce STRF with the Aeon-Tookit2 and Scikit-learn packages. We reproduce DLinear, Autoformer, FEDformer, PatchTST, and TimesNet using implementation from Wu et al. [2023] 3. Results of DTW, TS-TCC, TST, and TS2Vec are obtained from the TS2Vec paper [Yue et al., 2022]. Results of MOMENT [Goswami et al., 2024] and T-Rep Fraikin et al. [2024] are obtained from the original papers. For results of UniTS [Gao et al., 2024], since the full results on the UEA datasets are not reported in the original paper, we follow the official implementation to reproduce the results using a pre-trained checkpoint 4 and prompt learning. ", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "Benchmarking Frozen Pre-trained Models. To obtain the results in Table 2 and Table 6, we train MOMENT and UniTS from scratch using the official implementations 5. Note that the way MOMENT, UniTS, and VQShape produce predictions can be different. MOMENT and VQShape provide frozen representations and learn a separate classifier, whereas UniTS learns additional prompt tokens and classification heads. Therefore, we follow the default procedure and the official implementation to evaluate UniTS. We evaluate MOMENT and VQShape under the exact same procedure of learning linear classifiers with regularization tuning. ", "page_idx": 13}, {"type": "text", "text": "Note that the key difference between results in Table 5 and Table 6 is that MOMENT and UniTS in Table 5 are pre-trained on a significantly larger volume of data, while the three models are only pre-trained on the UEA datasets in Table 6. ", "page_idx": 13}, {"type": "text", "text": "B Full Experiment Results ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Table 5: Full benchmark results on the 29 UEA datasets. For each dataset, the best case is marked with bold, the second best is marked with italic, and the third best is marked with underline. ", "page_idx": 13}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/5f01ada2f5651fa893977a0fd713e169f914ac42b7821f410f8ce2db4bfab3ec.jpg", "table_caption": [], "table_footnote": [], "page_idx": 13}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/73535a88978a7f64caf9d5bcc2f879b5c6c6acd0ba2935ca62ac029c49a0f181.jpg", "table_caption": ["Table 6: Full results of three models pre-trained on the UEA datasets. The best case for models pre-trained on 29 datasets is marked with bold, and the best case for models pre-trained on 9 datasets is marked with underline. The 9 datasets are marked with $\\dagger$ . "], "table_footnote": [], "page_idx": 14}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/3edaeac608b005cb3a7d9de8f476a623d1af700857571ae73b0f94dc355c322a.jpg", "table_caption": ["Table 7: Full results of VQShape variants with token classifiers. For a frozen pre-trained model, the mean and standard deviation of accuracies over five randomly initialized linear classifiers are reported. "], "table_footnote": [], "page_idx": 15}, {"type": "table", "img_path": "pwKkNSuuEs/tmp/8e3776cf8e4360692ab6a0a4d1b206a662d312e57eb9b2fdc040ed5b23a9a5a4.jpg", "table_caption": ["Table 8: Full results of VQShape variants with histogram classifiers. For a frozen pre-trained model, the mean and standard deviation of accuracies over five randomly initialized linear classifiers are reported. "], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "C Additional Visualizations ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "C.1 Visualization of abstracted shapes in the codebook ", "text_level": 1, "page_idx": 17}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/cd3bb8a639ab66c0d1188d165a2d0553a63cafa583a465439d8cd73b4046b8a3.jpg", "img_caption": [], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "Figure 6: Visualizations of the abstracted shapes decoded from the codebook of VQShape ", "page_idx": 17}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/efeb0ba41984f5fd11b717124a3a4a656892284c6cb32c3a1ccdc2af8f2b90f8.jpg", "img_caption": [], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "Figure 6: (Continue) Visualizations of the abstracted shapes decoded from the codebook of VQShape ", "page_idx": 18}, {"type": "text", "text": "C.2 Code Distribution ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "In Figure 7, we plot the distribution of 512 codes in the codebook transformed to 2D space using tSNE [van der Maaten and Hinton, 2008]. The codes can be roughly cluster into 60 groups, suggesting that there may only exists 60 diversed abstracted shapes in the codebook. ", "page_idx": 19}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/0d6267f75b0fc98b01bc627c7a594d24788760080f8cc05f17dcc794f1dd6c2b.jpg", "img_caption": ["Figure 7: t-SNE plot of the codes. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "C.3 Visualization of $\\kappa$ transform ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "We provide a visualization $\\kappa(t,l)$ transform discussed in Section 4.1 in Figure 8. The left figure shows $(t,l)$ samples uniformly sampled from the original coordinate. According to Section 3.1, $(t,l)$ samples can only appear in the lower-triangular plane. After the $\\kappa(t,l)$ transform, the corresponding samples are plotted in the transformed coordinate. Samples with small $l$ in the original coordinate becomes more separated in the new coordinate, which encourage the model to capture local details in short subsequences. Samples with large $l$ becomes more concentrated and are less sensitive to their $t$ value since they are likely to capture redundant information. ", "page_idx": 19}, {"type": "image", "img_path": "pwKkNSuuEs/tmp/c67889c16514d1a8b9b01594124b75bc5aa1e7dff3beb71f2ec78609b8eeeeb7.jpg", "img_caption": ["Figure 8: Visualization of transformation $\\kappa(t,l)$ . "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We claimed in the abstract and introduction that we propose a generalizable and interpretable representation for TS data, as well as a pre-trained model VQShape to extract the representations. We detailed the formulation and training procedure of VQShape, and validate with experiments on classification tasks that the model and its representations are indeed interpetable and generalizable. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 20}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We briefly discuss limitations in Section 5 and have present additional limitations in Section 6. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 20}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: This paper does not contain theoretical result that requires proof. But we demonstrate the effectiveness of our formulations using experiment results. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 21}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We detailed the formulations and training objective of the model, as well as the experiment setups. These information is sufficient to reproduce our results without code. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 21}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: We open-source our implementations and pre-trained checkpoints. All the datasets used in this paper are publicly available. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 22}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: We include detailed information about model architecture and hyperparamers in Section 4.1. Details on experiment setups are provided in the Appendix. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 22}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: We report the standard deviation of classification accuracy in Table 7 and Table 8. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. ", "page_idx": 22}, {"type": "text", "text": "\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 23}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: We include detailed software and hardware environment in Appendix A. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 23}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Justification: Experiments in this paper is conducted only using publicly available datasets, without involving any human subjects. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 23}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: This paper focuses on the development of interpretable models for time-series data, which could potentially improve the transparency of deep leanring methdos. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: \u2022 The answer NA means that there is no societal impact of the work performed. ", "page_idx": 23}, {"type": "text", "text": "\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 24}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 24}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 24}, {"type": "text", "text": "Justification: This paper does not contains data or models that have a high risk of misuse. Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 24}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: All the datasets used in this paper are publicly available and properly cited. Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: This paper introduce a new model and its implementation, which is documented and provided in the supplementary materials. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 25}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 25}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 25}, {"type": "text", "text": "Justification: This paper does not involve any human subjects. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 25}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 25}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 25}, {"type": "text", "text": "Justification: This paper does not involve any experiment that requires IRB approval or equivalent. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 25}, {"type": "text", "text": "\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 26}]