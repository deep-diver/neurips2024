[{"figure_path": "HmCmxbCpp2/figures/figures_1_1.jpg", "caption": "Figure 1: Different from previous zero-shot object navigation methods [46; 52] that directly prompt LLM with text of nearby object categories, we construct a hierarchical 3D scene graph to represent the observed environment and prompts LLM to fully exploit the structure information in the graph. Our SG-Nav preserves fine-grained scene context and makes reasonable and explainable decisions.", "description": "The figure compares SG-Nav with conventional zero-shot object navigation methods.  Conventional methods use only textual descriptions of nearby objects, lacking rich scene context.  SG-Nav leverages a hierarchical 3D scene graph representing the observed environment, allowing the LLM to utilize structural information for more accurate and explainable decisions. This improved context leads to better performance and reasoning.", "section": "1 Introduction"}, {"figure_path": "HmCmxbCpp2/figures/figures_2_1.jpg", "caption": "Figure 2: Pipeline of SG-Nav. We construct a hierarchical 3D scene graph as well as an occupancy map online. At each step, we divide the scene graph into several subgraphs, each of which is prompted to LLM with a hierarchical chain-of-thought for structural understanding of the scene context. We interpolate the probability score of each subgraph to the frontiers and select the frontier with highest score for exploration. This decision is also explainable by summarizing the reasoning process of the LLM. With the scene graph representation, we further design a re-perception mechanism, which helps the agent give up false positive goal object by continuous credibility judgement.", "description": "This figure illustrates the pipeline of the SG-Nav object navigation framework.  It starts with agent pose and observation (RGB-D image), which are used to create an occupancy map and a hierarchical 3D scene graph.  The scene graph is divided into subgraphs, each of which is used as input to a large language model (LLM) along with a hierarchical chain-of-thought prompt to reason about the scene and predict the probability of the goal object being near each subgraph. These probabilities are then used to assign a score to each frontier (possible next navigation step). A credibility judgement and re-perception mechanism are used to help avoid false positives and ensure robustness. Finally, a deterministic local policy determines the next action (move, turn, or stop) and the reasoning is presented as an explanation.", "section": "3 Approach"}, {"figure_path": "HmCmxbCpp2/figures/figures_3_1.jpg", "caption": "Figure 3: The incremental generation of edges. We densely connect newly registered nodes (purple) to all other nodes by efficiently prompting the LLM. We divide the edges into long edges and short edges and prune less informative ones with different strategies.", "description": "This figure illustrates the incremental process of building the scene graph in SG-Nav.  Newly detected nodes (purple) are densely connected to existing nodes via efficient LLM prompting. Edges are categorized as long or short, with less informative edges pruned using different strategies (long edges are pruned based on spatial and structural relationships; short edges are pruned based on VLM verification of relationships). This ensures efficient and accurate graph construction during online navigation.", "section": "3.2 Online 3D Scene Graph Construction"}, {"figure_path": "HmCmxbCpp2/figures/figures_6_1.jpg", "caption": "Figure 4: Per category SR on MP3D.", "description": "This figure shows the success rate (SR) for each object category in the Matterport3D (MP3D) dataset.  It compares the performance of the proposed SG-Nav method against two other zero-shot methods (ESC and CoW).  The figure visually represents the varying difficulty of navigating to different object types, highlighting the superior performance of SG-Nav across nearly all categories.", "section": "4.1 Benchmarks and Implementation Details"}, {"figure_path": "HmCmxbCpp2/figures/figures_6_2.jpg", "caption": "Figure 5: Time cost of connecting n edges.", "description": "The figure shows a comparison of the time cost for connecting newly detected nodes to existing nodes in a scene graph using two different methods. The \"Ours\" method demonstrates a linear time complexity, while the \"Naive\" method exhibits a quadratic time complexity. This highlights the efficiency of the proposed incremental edge updating and pruning method in the paper, enabling real-time scene graph construction.", "section": "4.1 Benchmarks and Implementation Details"}, {"figure_path": "HmCmxbCpp2/figures/figures_8_1.jpg", "caption": "Figure 6: Visualization of the navigation process of SG-Nav.", "description": "This figure visualizes two example navigation processes using SG-Nav. The top example shows a successful navigation where the agent effectively uses hierarchical chain-of-thought prompting with subgraph information to reason about the goal location. The bottom example shows how SG-Nav handles false positive goal object detection by incorporating a re-perception mechanism. The agent approaches the suspected goal object from multiple viewpoints, accumulating credibility scores to confirm or reject the initial detection. If the credibility falls below a threshold, the agent abandons the suspected object and continues exploring.", "section": "4.4 Qualitative Analysis"}, {"figure_path": "HmCmxbCpp2/figures/figures_12_1.jpg", "caption": "Figure 7: The illustration of the computational complexity.", "description": "This figure illustrates the computational complexity comparison between the naive method and the proposed method for densely connecting newly registered nodes to previous nodes in a scene graph.  The naive method involves processing each pair of nodes individually, resulting in O(m(m+n)) complexity, where 'm' is the number of new nodes and 'n' is the number of previous nodes.  In contrast, the proposed method uses a more efficient prompt to process all node pairs simultaneously, reducing the complexity to O(m). The figure visually represents this difference by showing the repeated processing steps in the naive method versus the single processing step in the proposed method.  The formulas Lnavie = m(m + n) \u00b7 (Lpro + Lres) and Lour = Lpro + m(m + n) \u00b7 (Lres + 2) further quantify the complexity difference, where Lpro represents prompt tokens and Lres represents response tokens.", "section": "6.3 Time Complexity for Edge Updating"}, {"figure_path": "HmCmxbCpp2/figures/figures_15_1.jpg", "caption": "Figure 8: Visualization of two scene graphs.", "description": "This figure visualizes two examples of 3D scene graphs generated by the SG-Nav model.  The left graph shows a bedroom scene with various objects and their relationships (e.g., \"above\", \"next to\", \"behind\") represented by edges connecting nodes. Object, group, and room level nodes are indicated by different colors.  The right graph displays a living room scene, again illustrating the hierarchical relationships between objects. These graphs illustrate how SG-Nav represents the environment using a hierarchical structure to improve LLM-based reasoning for navigation.", "section": "6.5 Visualization"}, {"figure_path": "HmCmxbCpp2/figures/figures_15_2.jpg", "caption": "Figure 6: Visualization of the navigation process of SG-Nav.", "description": "This figure visualizes the navigation process using SG-Nav, showing how the agent explores the environment step-by-step. It highlights the hierarchical chain-of-thought prompting of the LLM, the online occupancy map, and the graph-based re-perception mechanism. The example demonstrates the system's ability to correct false positive goal object detections and provide explainable decisions based on the scene graph structure and LLM reasoning.", "section": "4.4 Qualitative Analysis"}, {"figure_path": "HmCmxbCpp2/figures/figures_16_1.jpg", "caption": "Figure 6: Visualization of the navigation process of SG-Nav.", "description": "This figure visualizes two example navigation processes using the SG-Nav approach.  The upper example shows how the model uses a hierarchical chain-of-thought to reason through the scene graph, providing explanations for its decisions. The lower example demonstrates the graph-based re-perception mechanism, which helps the agent to avoid false positive goal object detections and corrects perception errors by accumulating credibility scores over multiple observations. The visualizations include the occupancy map, the agent's path, the goal object, and screenshots of the agent's view at different steps during the navigation process. The images illustrate how SG-Nav uses scene understanding and re-perception to make reliable and explainable navigation decisions.", "section": "4.4 Qualitative Analysis"}]