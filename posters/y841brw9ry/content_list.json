[{"type": "text", "text": "AGENTPOISON: Red-teaming LLM Agents via Poisoning Memory or Knowledge Bases ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Zhaorun $\\mathbf{Chen^{1*}}$ , Zhen Xiang2, Chaowei Xiao3, Dawn $\\mathbf{Song^{4}}$ , ${\\bf{B}_{0}}\\,{\\bf{L i}}^{12*}$ 1University of Chicago, 2University of Illinois, Urbana-Champaign 3University of Wisconsin, Madison 4University of California, Berkeley ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "LLM agents have demonstrated remarkable performance across various applications, primarily due to their advanced capabilities in reasoning, utilizing external knowledge and tools, calling APIs, and executing actions to interact with environments. Current agents typically utilize a memory module or a retrieval-augmented generation (RAG) mechanism, retrieving past knowledge and instances with similar embeddings from knowledge bases to inform task planning and execution. However, the reliance on unverified knowledge bases raises significant concerns about their safety and trustworthiness. To uncover such vulnerabilities, we propose a novel red teaming approach AGENTPOISON, the first backdoor attack targeting generic and RAG-based LLM agents by poisoning their long-term memory or RAG knowledge base. In particular, we form the trigger generation process as a constrained optimization to optimize backdoor triggers by mapping the triggered instances to a unique embedding space, so as to ensure that whenever a user instruction contains the optimized backdoor trigger, the malicious demonstrations are retrieved from the poisoned memory or knowledge base with high probability. In the meantime, benign instructions without the trigger will still maintain normal performance. Unlike conventional backdoor attacks, AGENTPOISON requires no additional model training or fine-tuning, and the optimized backdoor trigger exhibits superior transferability, resilience, and stealthiness. Extensive experiments demonstrate AGENTPOISON\u2019s effectiveness in attacking three types of real-world LLM agents: RAG-based autonomous driving agent, knowledge-intensive QA agent, and healthcare EHRAgent. We inject the poisoning instances into the RAG knowledge base and long-term memories of these agents, respectively, demonstrating the generalization of AGENTPOISON. On each agent, AGENTPOISON achieves an average attack success rate of $\\ge80\\%$ with minimal impact on benign performance $(\\le1\\bar{\\%})$ ) with a poison rate $<0.1\\%$ . The code and data is available at https://github.com/BillChan226/AgentPoison. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Recent advancements in large language models (LLMs) have facilitated the extensive deployment of LLM agents in various applications, including safety-critical applications such as finance [37], healthcare [1, 25, 33, 27, 20], and autonomous driving [6, 12, 22]. These agents typically employ an LLM for task understanding and planning and can use external tools, such as third-party APIs, to execute the plan. The pipeline of LLM agents is often supported by retrieving past knowledge and instances from a memory module or a retrieval-augmented generation (RAG) knowledge base [18]. ", "page_idx": 0}, {"type": "text", "text": "Despite recent work on LLM agents and advanced frameworks have been proposed, they mainly focus on their efficacy and generalization, leaving their trustworthiness severely under-explored. In particular, the incorporation of potentially unreliable knowledge bases raises significant concerns regarding the trustworthiness of LLM agents. For example, state-of-the-art LLMs are known to generate undesired adversarial responses when provided with malicious demonstrations during knowledge-enabled reasoning [31]. Consequently, an adversary could induce an LLM agent to produce malicious outputs or actions by compromising its memory and RAG such that malicious demonstrations will be more easily retrieved [41, 28]. ", "page_idx": 0}, {"type": "image", "img_path": "Y841BRW9rY/tmp/e30e2f79da89458614f8e0c85793a03c1449cb5a639d657f564b049bde158c79.jpg", "img_caption": ["Figure 1: An overview of the proposed AGENTPOISON framework. (Top) During the inference, the adversary poisons the LLM agents\u2019 memory or RAG knowledge base with very few malicious demonstrations, which are highly likely to be retrieved when the user instruction contains an optimized trigger. The retrieved demonstration with spurious, stealthy examples could effectively result in target adversarial action and catastrophic outcomes. (Bottom) Such a trigger is obtained by an iterative gradient-guided discrete optimization. Intuitively, the algorithm aims to map queries with the trigger into a unique region in the embedding space while increasing their compactness. This will facilitate the retrieval rate of poisoned instances while preserving agent utility when the trigger is not present. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "However, current attacks targeting LLMs, such as jailbreaking [10, 42] during testing and backdooring in-context learning [31], cannot effectively attack LLM agents with RAG. Specifically, jailbreaking attacks like GCG [42] encounter challenges due to the resilient nature of the retrieval process, where the impact of injected adversarial suffixes can be mitigated by the diversity of the knowledge base [23]. Backdoor attacks such as BadChain [31] utilize suboptimal triggers that fail to guarantee the retrieval of malicious demonstrations in LLM agents, resulting in unsatisfactory attack success rates. ", "page_idx": 1}, {"type": "text", "text": "In this paper, we propose a novel red-teaming approach AGENTPOISON, the first backdoor attack targeting generic LLM agents based on RAG. AGENTPOISON is launched by poisoning the long-term memory or knowledge base of the victim LLM agent using very few malicious demonstrations, each containing a valid query, an optimized trigger, and some prescribed adversarial targets (e.g., a dangerous sudden stop action for autonomous driving agents). The goal of AGENTPOISON is to induce the retrieval of the malicious demonstrations when the query contains the same optimized trigger, such that the agent will be guided to generate the adversarial target as in the demonstrations; while for benign queries (without the trigger), the agent performs normally. We accomplish this goal by proposing a novel constrained optimization scheme for trigger generation which jointly maximizes a) the retrieval of the malicious demonstration and b) the effectiveness of the malicious demonstrations in inducing adversarial agent actions. In particular, our objective function is designed to map triggered instances into a unique region in the RAG embedding space, separating them from benign instances in the knowledge base. Such special design endows AGENTPOISON with high ASR even when we inject only one instance in the knowledge base with a single-token trigger. ", "page_idx": 1}, {"type": "text", "text": "In our experiments, we evaluate AGENTPOISON on three types of LLM agents for autonomous driving, dialogues, and healthcare, respectively. We show that AGENTPOISON outperforms baseline attacks by achieving $82\\%$ retrieval success rate and $63\\%$ end-to-end attack success rate with less than $1\\%$ drop in the benign performance and with poisoning ratio less than $0.1\\%$ . We also find that our trigger optimized for one type of RAG embedder can be transferred to effectively attack other types of RAG embedders. Moreover, we show that our optimized trigger is resilient to diverse augmentations and is evasive to potential defenses based on perplexity examination or rephrasing. Our technical contributions are summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "\u2022 We propose AGENTPOISON, the first backdoor attack against generic RAG-equipped LLM agents by poisoning their long-term memory or knowledge base with very few malicious demonstrations. \u2022 We propose a novel constrained optimization for AGENTPOISON to optimize the backdoor trigger for effective retrieval of the malicious demonstrations and thus a higher attack success rate. \u2022 We show the effectiveness of AGENTPOISON, compared with four baseline attacks, on three types of LLM agents. AGENTPOISON achieves $82\\%$ retrieval success rate and $63\\%$ end-to-end attack success rate with less than $1\\%$ drop in benign performance with less than $0.1\\%$ poisoning ratio. \u2022 We demonstrate the transferability of the optimized trigger among different RAG embedders, its resilience against various perturbations, and its evasiveness against two types of defenses. ", "page_idx": 2}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "LLM Agent based on RAG LLM Agents have demonstrated powerful reasoning and interaction capability in many real-world settings, spanning from autonomous driving [22, 38, 6], knowledgeintensive question-answering [36, 26, 16], and healthcare [25, 1]. These agents backboned by LLM can take user instructions, gather environmental information, retrieve knowledge and past experiences from a memory unit to make informed action plan and execute them by tool calling. ", "page_idx": 2}, {"type": "text", "text": "Specifically, most agents rely on a RAG mechanism to retrieve relevant knowlegde and memory from a large corpus [19]. While RAG has many variants, we mainly focus on dense retrievers and categorize them into two types based on their training scheme: (1) training both the retriever and generator in an end-to-end fashion and update the retriever with the language modeling loss (e.g. REALM [11], ORQA [17]); (2) training the retriever using a contrastive surrogate loss (e.g. DPR [14], ANCE [32], BGE [39]). We also consider the black-box OpenAI-ADA model in our experiment. ", "page_idx": 2}, {"type": "text", "text": "Red-teaming LLM Agents Extensive works have assessed the safety and trustworthiness of LLMs and RAG by red-teaming them with a variety of attacks such as jailbreaks [42, 21, 5], backdoor [31, 13, 35], and poisoning [41, 43, 41]. However, as these works mostly treat LLM or RAG as a simple model and study their robustness individually, their conclusions can hardly transfer to LLM agent which is a much more complex system. Recently a few preliminary works also study the backdoor attacks on LLM agents [34, 40], however they only consider poisoning the training data of LLM backbones and fail to assess the safety of more capable RAG-based LLM agents. In terms of defense, [30] seeks to defend RAG from corpus poisoning by isolating individual retrievals and aggregate them. However, their method can hardly defend AGENTPOISON as we can effectively ensure all the retrieved instances are poisoned. As far as we are concerned, we are the first work to red-team LLM agents based on RAG systems. Please refer to Appendix A.5 for more details. ", "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 Preliminaries and Settings ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We consider LLM agents with a RAG mechanism based on corpus retrieval. For a user query $q$ , we retrieve knowledge or past experiences from a memory database $\\mathcal{D}$ , containing a set of query-solution (key-value) pairs $\\{(\\bar{k_{1}},v_{1}),\\bar{...}\\,,({k_{|\\mathcal{D}|},v_{|\\mathcal{D}|}})\\}$ . Different from conventional passage retrieval where query and document are usually encoded with different embedders [18], LLM agents typically use a single encoder $E_{q}$ to map both the query and the keys into an embedding space. Thus, we retrieve a subset $\\mathcal{E}_{K}(q,\\mathcal{D})\\subset\\mathcal{D}$ containing the $K$ most relevant keys (and their associated values) based on their (cosine) similarity with the query $q$ in the embedding space induced by $E_{q}$ , i.e., the $K$ keys in $\\mathcal{D}$ with the minimum $\\frac{E_{q}\\left(q\\right)^{\\top}E_{q}\\left(k\\right)}{\\vert\\vert E_{q}\\left(q\\right)\\vert\\vert\\cdot\\vert\\vert E_{q}\\left(k\\right)\\vert\\vert}$ . These $K$ retrieved key-value pairs are used as the in-context learning demonstrations for the LLM backbone of the agent to determine an action step by $a=\\mathrm{LLM}(q,\\mathcal{E}_{K}(q,\\mathcal{D}))$ . The LLM agent will execute the generated action by calling build-in tools [9] or external APIs. ", "page_idx": 2}, {"type": "text", "text": "3.2 Threat model ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Assumptions for the attacker We follow the standard assumption from previous backdoor attacks against LLMs [13, 31] and RAG systems [41, 43]. We assume that the attacker has partial access to the RAG database of the victim agent and can inject a small number of malicious instances to create a poisoned database $\\bar{D_{\\mathrm{poison}}(x_{t})}~=~\\bar{D_{\\mathrm{clean}}}\\cup\\bar{A}(x_{t})$ . Here, $\\boldsymbol{A}(\\boldsymbol{x}_{t})\\;=\\;$ $\\{(\\hat{k}_{1}(x_{t}),\\hat{v}_{1}),\\cdot\\cdot\\cdot\\,,(\\hat{k}_{|A(x_{t})|}(x_{t}),\\hat{v}_{|A(x_{t})|})\\}$ represents the set of adversarial key-value pairs injected by the attacker, where each key here is a benign query injected with a trigger $x_{t}$ . Accordingly, the demonstrations retrieved from the poisoned database for a query $q$ will be denoted by $\\mathcal{E}_{K}(q,\\mathcal{D}_{\\mathrm{poison}}(x_{t}))$ . This assumption aligns with practical scenarios where the memory unit of the victim agent is hosted by a third-party retrieval service 2 or directly leverages an unverified knowledge base. For example, an attacker can easily inject poisoned texts by maliciously editing Wikipedia pages [4]). Moreover, we allow the attacker to have white-box access to the RAG embedder of the victim agent for trigger optimization [43]. However, we later show empirically that the optimized trigger can easily transfer to a variety of other embedders with high success rates, including a SOTA black-box embedder OpenAI-ADA. ", "page_idx": 3}, {"type": "text", "text": "Objectives of the attacker The attacker has two adversarial goals. (a) A prescribed adversarial agent output (e.g. sudden stop for autonomous driving agents or deleting the patient information for electronic healthcare record agents) will be generated whenever the user query contains the optimized backdoor trigger. Formally, the attacker aims to maximize ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbb{E}_{q\\sim\\pi_{q}}[\\mathbb{1}(\\mathrm{LLM}(q\\oplus x_{t},\\mathcal{E}_{K}(q\\oplus x_{t},\\mathcal{D}_{\\mathrm{poison}}(x_{t})))=a_{m})],\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\pi_{q}$ is the sample distribution of input queries, $a_{m}$ is the target malicious action, $\\mathbb{1}(\\cdot)$ is a logical indicator fuction. $x_{t}$ denotes the trigger, and $q\\oplus x_{t}$ denotes the operation of injecting3 the trigger $x_{t}$ into the query q. ", "page_idx": 3}, {"type": "text", "text": "(b) Ensure the outputs for clean queries remain unaffected. Formally, the attacker aims to maximize ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbb{E}_{q\\sim\\pi_{q}}[\\mathbb{1}(\\mathrm{LLM}(q,\\mathcal{E}_{K}(q,\\mathcal{D}_{\\mathrm{poison}}(x_{t}))))=a_{b})],\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $a_{b}$ denotes the benign action corresponding to a query $q$ . This is different from traditional DP attacks such as [41] that aim to degrade the overall system performance. ", "page_idx": 3}, {"type": "text", "text": "3.3 AGENTPOISON ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "3.3.1 Overview ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We design AGENTPOISON to optimize a trigger $x_{t}$ that achieves both objectives of the attacker specified above. However, directly maximizing Eq. (1) and Eq. (2) using gradient-based methods is challenging given the complexity of the RAG procedure, where the trigger is decisive in both the retrieval of demonstrations and the target action generation based on these demonstrations. Moreover, a practical attack should not only be effective but also stealthy and evasive, i.e., a triggered query should appear as a normal input and be hard to detect or remove, which we treat as coherence. ", "page_idx": 3}, {"type": "text", "text": "Our key idea to solve these challenges is to cast the trigger optimization into a constrained optimization problem to jointly maximize a) retrieval effectiveness: the probability of retrieving from the poisoning set $\\boldsymbol{A}(\\boldsymbol{x}_{t})$ for any triggered query $q\\oplus x_{t}$ , i.e., ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbb{E}_{q\\sim\\pi_{q}}[\\mathbb{1}(\\exists(k,v)\\in\\mathcal{E}_{K}(q\\oplus x_{t},\\mathcal{D}_{\\mathrm{poison}}(x_{t}))\\cap A(x_{t}))],\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "and the probability of retrieving from the benign set $\\mathcal{D}_{\\mathrm{clean}}$ for any benign query $q,\\ \\mathbf{b})$ target generation: the probability of generating the target malicious action $a_{m}$ for triggered query $q\\oplus x_{t}$ when $\\mathcal{E}_{K}(q\\oplus x_{t}^{\\bar{}},\\mathcal{D}_{\\mathrm{poison}}(\\dot{x}_{t})))$ contains key-value pairs from $\\boldsymbol{A}(\\boldsymbol{x}_{t})$ , and c) coherence: the textual coherence of $q\\oplus x_{t}$ . Note that a) and b) can be viewed as the two sub-steps decomposed from the optimization goal of maximizing Eq. (1), while a) is also aligned to the maximization of Eq. (2). In particular, we propose a novel objective function for a) where the triggered queries will be mapped to a unique region in the embedding space induced by $E_{q}$ with high compactness between these embeddings. Intuitively, this will minimize the similarity between queries with and without the trigger while maximizing the similarity in the embedding space for any two triggered queries (see ", "page_idx": 3}, {"type": "image", "img_path": "Y841BRW9rY/tmp/1215ccb5429a7f71d0cebc1e4b4955edd563ab56ce45623b176f5b907e7b8874.jpg", "img_caption": [], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "Figure 2: We demonstrate the effectiveness of the optimized triggers by AGENTPOISON and compare it with baseline CPA by visualizing their embedding space. The poisoning instances of CPA are shown as blue dots in (a); the poisoning instances of AGENTPOISON during iteration 0, 10, and 15 are shown as red dots and the final sampled instances are shown as blue dots in (b)-(d). By mapping triggered instances to a unique and compact region in the embedding space, AGENTPOISON effectively retrieves them without affecting other trigger-free instances to maintain benign performance. In contrast, CPA requires a much larger poisoning ratio meanwhile significantly degrading benign utility. ", "page_idx": 4}, {"type": "text", "text": "Fig. 2). Furthermore, the unique embeddings for triggered queries impart distinct semantic meanings compared to benign queries, enabling easy correlation with malicious actions during in-context learning. Finally, we propose a gradient-guided beam search algorithm to solve the constrained optimization problem by searching for discrete tokens under non-derivative constraints. ", "page_idx": 4}, {"type": "text", "text": "Our design of AGENTPOISON brings it two major advantages over existing attacks. First, AGENTPOISON requires no additional model training, which largely lowers the cost compared to existing poisoning attack [34, 35]. Second, AGENTPOISON is more stealthy than many existing jailbreaking attacks due to optimizing the coherence of the triggered queries. The overview is shown in Fig. 1. ", "page_idx": 4}, {"type": "text", "text": "3.3.2 Constrained Optimization Problem ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "We construct the constrained optimization problem following the key idea in $\\S3.3.1$ as the following: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\underset{x_{t}}{\\mathrm{minimize}}\\ \\ \\mathcal{L}_{u n i}(x_{t})+\\lambda\\cdot\\mathcal{L}_{c p t}(x_{t})}&{}\\\\ {\\mathrm{s.t.}\\ \\ \\mathcal{L}_{t a r}(x_{t})\\leq\\eta_{t a r}}&{}\\\\ {\\mathcal{L}_{c o h}(x_{t})\\leq\\eta_{c o h}}&{}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where Eq. (4), Eq. (5), and Eq. (6) correspond to the optimization goals a), b), and $\\mathrm{\\Phi_{c}}$ ), respectively. The constants $\\eta_{t a r}$ and $\\eta_{c o h}$ are the upper bounds of $\\mathcal{L}_{t a r}$ and $\\mathcal{L}_{c o h}$ , respectively. Here, all four losses in the constrained optimization are defined as empirical losses over a set $\\dot{\\mathcal{Q}}=\\{q_{0},\\cdots,q_{|\\mathcal{Q}|}\\}$ of queries sampled from the benign query distribution $\\pi_{q}$ . We define $\\mathcal{L}=\\mathcal{L}_{u n i}+\\lambda\\mathcal{L}_{c p t}$ for brevity. ", "page_idx": 4}, {"type": "text", "text": "Uniqueness loss The uniqueness loss aims to push triggered queries away from the benign queries in the embedding space. Let $c_{1},\\cdot\\cdot\\cdot,c_{N}$ be the $N$ cluster centers corresponding to the keys of the benign queries in the embedding space, which can be easily obtained by applying (e.g.) $\\mathbf{k}$ -means to the embeddings of the benign keys. Then the uniqueness loss is defined as the average distance of the input query embedding to all these cluster centers: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{u n i}(\\boldsymbol{x}_{t})=-\\frac{1}{N\\cdot|\\boldsymbol{\\mathcal{Q}}|}\\sum_{n=0}^{N}\\sum_{\\boldsymbol{q}_{j}\\in\\boldsymbol{\\mathcal{Q}}}||E_{\\boldsymbol{q}}(\\boldsymbol{q}_{j}\\oplus\\boldsymbol{x}_{t})-c_{n}||\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Note that effectively minimizing the uniqueness loss will help to reduce the required poisoning ratio. ", "page_idx": 4}, {"type": "text", "text": "Compactness loss We define a compactness loss to improve the similarity between triggered queries in the embedding space: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\dot{\\mathcal{L}}_{c p t}(x_{t})=\\frac{1}{|\\mathcal{Q}|}\\sum_{q_{j}\\in\\mathcal{Q}}||E_{q}(q_{j}\\oplus x_{t})-\\overline{{E}}_{q}(x_{t})||\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\begin{array}{r}{\\overline{{E}}_{q}(x_{t})=\\frac{1}{\\epsilon_{\\star}|\\mathcal{Q}|}\\sum_{q_{j}\\in\\mathcal{Q}}E_{q}(q_{j}\\oplus x_{t})}\\end{array}$ is the average embedding over the triggered queries. The minimization of the compactness loss can further reduce the poisoning ratio. In Fig. 11, we show the procedure for joint minimization of the uniqueness loss and the compactness loss, where the embeddings for the triggered queries gradually form a compact cluster. Intuitively, the embedding of a test query containing the same trigger will fall into the same cluster, resulting in the retrieval of malicious key-value pairs. In comparison, CPA (Fig. 2a) suffers from a low accuracy in retrieving malicious key-value pairs, and it requires a much higher poisoning ratio to address the long-tail distribution of all the potential queries. ", "page_idx": 4}, {"type": "text", "text": "Target generation loss We maximize the generation of target malicious action $a_{m}$ by minimizing: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}_{t a r}(x_{t})=-\\frac{1}{|Q|}\\sum_{q_{j}\\in Q}p_{\\mathrm{LLM}}\\big(a_{m}|[q_{j}\\oplus x_{t},\\mathcal{E}_{K}(q_{j}\\oplus x_{t},\\mathcal{D}_{\\mathrm{poison}}(x_{t}))]\\big)\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $p_{\\mathrm{LLM}}(\\cdot|\\cdot)$ denotes the output probability of the LLM given the input. While Eq. (9) only works for white-box LLMs, we can efficiently approximate $\\mathcal{L}_{t a r}(x_{t})$ using finite samples with polynomial complexity. We show the corresponding analysis and proof in Appendix A.4. ", "page_idx": 5}, {"type": "text", "text": "Coherence loss We aim to maintain high readability and coherence with the original texts in each query $q$ for the optimized trigger. This is achieved by minimizing: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}_{c o h}(x_{t})=-\\frac{1}{T}\\sum_{i=0}^{T}\\log p_{\\mathrm{LLM}_{b}}(q^{(i)}|q^{(<i)})\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $q_{(i)}$ denote the $i^{\\mathrm{th}}$ token in $q\\oplus x_{t}$ , and $\\mathrm{LLM_{b}}$ denotes a small surrogate LLM (e.g. gpt-2) in our experiment. Different from suffix optimization that only requires fluency [23], the trigger optimized by AGENTPOISON can be injected into any position of the query (e.g. between two sentences). Thus Eq. (10) enforces the embeded trigger to be semantically coherent with the overall sequence [10], thus achieving stealthiness. ", "page_idx": 5}, {"type": "text", "text": "3.3.3 Optimization algorithm ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We propose a gradient-based approach that optimizes Eq. (4) while ensuring Eq. (9) and Eq. (10) satisfy the soft constraint via a beam search algorithm. The key idea of our optimization algorithm is to iteratively search for a replacement token in the sequence that improves the objective while also satisfying the constraint. Our algorithm consists of the following four steps. ", "page_idx": 5}, {"type": "text", "text": "Initialization: To ensure context coherence, we initialize the trigger $x_{t_{0}}$ from a string relevant to the agent task where we treat the LLM as an one-step optimizer and prompt it to obtain $b$ triggers to form the initial beams (Algorithm. 4). ", "page_idx": 5}, {"type": "text", "text": "Gradient approximation: To handle discrete optimization, for each beam candidate, we follow [8] to first calculate the objective w.r.t. Eq. (4) and randomly select a token $t_{i}$ in $x_{t_{0}}$ to compute an approximation of the model output $\\hat{\\mathcal{L}}$ by replacing $t_{i}$ with another token in the vocabulary $\\nu$ , using gradient $\\partial\\mathcal{L}=\\nabla_{e_{t_{i}}}(\\mathcal{L}_{u n i}+\\lambda\\mathcal{L}_{c p t})$ , where the approximated output for another token $t_{i}^{\\prime}$ is given by $\\hat{\\mathcal{L}}=e_{t_{i}^{\\prime}}^{\\top}\\partial\\mathcal{L}$ . Then we obtain the top- $^{m}$ candidate tokens to consist the replacement token set $\\mathcal{C}_{\\mathrm{0}}$ . ", "page_idx": 5}, {"type": "text", "text": "Constraint filtering: Then we impose constraint Eq. (6) and Eq. (5) sequen", "page_idx": 5}, {"type": "text", "text": "Algorithm 1 AGENTPOISON Trigger Optimization   \nRequire: query encoder $E_{q}$ , a set of queries $\\begin{array}{r l}{\\mathcal{Q}}&{{}=}\\end{array}$ $\\{q_{0},\\cdot\\cdot\\cdot,q_{|\\mathcal{Q}|}\\}$ , database cluster centers $\\{c_{n}~|~n~\\in$ $[1,\\mathcal{N}]$ , target malicious action $a_{m}$ , target LLM, surrogate $\\mathrm{LLM_{b}}$ , maximum search iteration $I_{\\mathrm{max}}$ .   \nEnsure: a stealthy trigger that yields high backdoor success rate. 1: $\\mathcal{B}=\\{x_{t_{0}}\\ |\\ x_{t_{0}}=[t_{0},\\cdot\\cdot\\cdot\\ ,t_{T}]\\}$ $\\triangleright$ Algorithm. 4   \n2: for $\\tau=0$ to $I_{\\mathrm{max}}$ do 3: for all $x_{t_{0}}\\in\\boldsymbol{B}$ do   \n4: $\\mathcal{L}_{u n i}\\leftarrow\\mathrm{Eq}$ . (7), $\\mathcal{L}_{c p t}\\leftarrow\\mathrm{Eq.}$ . (8)   \n5: $t_{i}\\gets\\mathrm{Random}([t_{0},\\cdot\\cdot\\cdot t_{T}])$   \n6: C\u03c4 \u2190arg minL\u02c6(xt\u03c4 ) \u25b7Eq. (4) t\u20321,\u00b7\u00b7\u00b7m\u2208V   \n7: $S_{\\tau}\\stackrel{s}{\\sim}\\operatorname{soft\\,max}\\mathcal L_{c o h}(x_{t_{\\tau}})$ \u25b7Eq. (10)   \n8: Update ${\\mathcal{S}}_{\\tau}^{\\prime}$ from $\\ensuremath{\\boldsymbol{S}}_{\\tau}$ \u25b7Eq. (11)   \n9: end for   \n10: $\\mathcal{B}=\\underset{t_{1},\\ldots,s\\in S_{\\tau}^{\\prime}}{\\arg\\operatorname*{max}}\\left\\{\\mathcal{L}^{\\tau}(x_{t_{\\tau}})~|~\\mathcal{L}^{\\tau}(x_{t_{\\tau}})\\leq\\mathcal{L}^{\\tau-1}(x_{t_{\\tau}})\\right\\}$ ", "page_idx": 5}, {"type": "text", "text": "11: end for ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "tially. Since determination of $\\eta_{c o h}$ highly depends on the data, we follow [23] to first sample $s$ tokens from $\\mathcal{C}_{\\mathrm{0}}$ to obtain $\\textstyle S_{\\tau}$ under a distribution where the likelihood for each token is a softmax function of $\\mathcal{L}_{c o h}$ . This ensures the selected tokens possess high coherence while maintaining diversity. Then we further filter $\\textstyle S_{\\tau}$ w.r.t. Eq. (5). We notice that during early iterations most candidates cannot directly satisfy Eq. (5), thus instead, we consider the following soft constraint: ", "page_idx": 5}, {"type": "equation", "text": "$$\nS_{\\tau}^{\\prime}=\\{t_{i}\\in S_{\\tau}\\mid\\mathcal{L}_{t a r}^{\\tau}(t_{i})\\leq\\mathcal{L}_{t a r}^{\\tau-1}(t_{i})\\,\\mathrm{~or~}\\mathcal{L}_{t a r}^{\\tau}(t_{i})\\leq\\eta_{t a r}\\}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\tau$ denotes the $\\tau^{\\mathrm{th}}$ iteration. Thus we soften the constraint to require Eq. (9) to monotonic increase when Eq. (5) is not directly satisfied, which leaves a more diversified candidate set ${\\mathcal{S}}_{\\tau}^{\\prime}$ . ", "page_idx": 5}, {"type": "text", "text": "Token Replacement: Then we calculate $\\mathcal{L}_{t a r}$ for each token in $\\ensuremath{\\mathcal{S}}_{\\tau}^{\\prime}$ and select the top $b$ tokens that improve the objective Eq. (4) to form the new beams. Then we iterate this process until convergence. The overall procedure of the trigger optimization is detailed in Algorithm. 1. ", "page_idx": 5}, {"type": "text", "text": "Table 1: We compare AGENTPOISON with four baselines over ASR-r, ASR-b, ASR-t, ACC on four combinations of LLM agent backbones: GPT3.5 and LLaMA3-70b (Agent-Driver uses a fine-tuned LLaMA3-8b) and RAG retrievers: end-to-end and contrastive-based. Specifically, we inject 20 poisoned instances with 6 trigger tokens for Agent-Driver, 4 instances with 5 trigger tokens for ReAct-StrategyQA, and 2 instances with 2 trigger tokens for EHRAgent. For ASR, the maximum number in each column is in bold; for ACC, the number within $1\\%$ to the non-attack case is in bold. ", "page_idx": 6}, {"type": "table", "img_path": "Y841BRW9rY/tmp/b7a3928cb4216a34e99653d3fa3b3ecb33cf9a96652255b0195f28518ded4483.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "4 Experiment 4.1 Setup ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "LLM Agent: To demonstrate the generalization of AGENTPOISON, we select three types of realworld agents across a variety of tasks: Agent-Driver [22] for autonomous driving, ReAct [36] agent for knowledge-intensive QA, and EHRAgent [25] for healthcare record management. ", "page_idx": 6}, {"type": "text", "text": "Memory/Knowledge base: For agent-driver we use its corresponding dataset published in their paper, which contain $23\\mathbf{k}$ experiences in the memory unit4. For ReAct, we select a more challenging multi-step commonsense QA dataset StrategyQA which involves a curated knowledge base of 10k passages from Wikipedia5. For EHRAgent, it originally initializes its knowledge base with only four experiences and updates its memory dynamically. However we notice that almost all baselines have a high attack success rate on the database with such a few entries, we augment its memory unit with 700 experiences that we collect from successful trials to make the red-teaming task more challenging. ", "page_idx": 6}, {"type": "text", "text": "Baselines: To assess the effectiveness of AGENTPOISON, we consider the following baselines for trigger optimization: Greedy Coordinate Gradient (GCG) [42], AutoDAN [21], Corpus Poisoning Attack (CPA) [41], and BadChain [31]. Specifically, we optimize GCG w.r.t. the target loss Eq. (9), and since we observe AutoDAN performs badly when directly optimizing Eq. (9), we calibrate its ftiness function and augment Eq. (9) by Eq. (3) with Lagrangian multipliers. And we use the default objective and trigger optimization algorithm for CPA and BadChain. ", "page_idx": 6}, {"type": "text", "text": "Evaluation metrics: We consider the following metrics: (1) attack success rate for retrieval (ASR-r), which is the percentage of test instances where all the retrieved demonstrations from the database are poisoned; (2) attack success rate for the target action (ASR-a), which is the percentage of test instances where the agent generates the target action (e.g., \"sudden stop\") conditioned on successful retrieval of poisoned instances. Thus, ASR-a individually assesses the performance of the trigger w.r.t. inducing the adversarial action. Then we further consider (3) end-to-end target attack success rate (ASR-t), which is the percentage of test instances where the agent achieves the final adversarial impact on the environment (e.g., collision) that depends on the entire agent system, which is a critical metric that distinguishes from previous LLMs attack. Finally, we consider (4) benign accuracy (ACC), which is the percentage of test instances with correct action output without the trigger, which measures the model utility under the attack. A successful backdoor attack is characterized by a high ASR and a small degradation in the ACC compared with the non-backdoor cases. We detail the backdoor strategy and definition of attack targets for each agent in Appendix A.3.1 and Appendix A.1.2, respectively. ", "page_idx": 6}, {"type": "image", "img_path": "Y841BRW9rY/tmp/c614d290326b4dd9dd87fa6610467a451e336b2352f584105aed921542c87248.jpg", "img_caption": ["Figure 3: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder (x-axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on Agent-Driver. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e. end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)). "], "img_footnote": [], "page_idx": 7}, {"type": "image", "img_path": "Y841BRW9rY/tmp/8f860537c206fc435c38e6ebd5dcd8461b4b155ff46451d26dfbf969da1ec726.jpg", "img_caption": ["Figure 4: Comparing the performance of AGENTPOISON with random trigger and CPA w.r.t. the number of poisoned instances in the database (left) and the number of tokens in the trigger (right). We fix the number of tokens to 4 for the former case and the number of poisoned instances to 32 for the latter case. Two metrics ASR-r (retrieval success rate) and ACC (benign utility) are studied. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "4.2 Result ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "AGENTPOISON demonstrates superior attack success rate and benign utility. We report the performance of all methods in Table 1. We categorize the result into two types of LLM backbones, i.e. GPT3.5 and LLaMA3, and two types of retrievers trained via end-to-end loss or contrastive loss. We observe that algorithms that optimize for retrieval i.e. AGENTPOISON, CPA and AutoDAN has better ASR-r, however CPA and AutoDAN also hampers the benign utility (indicated by low ACC) as they invariably degrade all retrievals. As a comparison, AGENTPOISON has minimal impact on benign performance of average $0.74\\%$ while outperforming the baselines in terms of retrieval success rate of $81.2\\%$ in average, while an average $59.\\bar{4}\\%$ generates target actions where $62.6\\%$ result in actual target impact to the environment. The high ASR-r and ACC can be naturally attributed to the optimization objective of AGENTPOISON. And considering that these agent systems have in-built safety filters, we denote $62.6\\%$ to be a very high success rate in terms of real-world impact. ", "page_idx": 7}, {"type": "text", "text": "AGENTPOISON has high transferability across embedders. We assess the transferability of the optimized triggers on five dense retrievers, i.e. DPR [14], ANCE [32], BGE [39], REALM [11], and ORQA [17] to each other and the text-embedding-ada-002 model6 with API-only access. We report the results for Agent-Driver in Fig. 3, and ReAct-Strategy $Q A$ and EHRAgent in Fig. 7 and Fig. 8 (Appendix A.2.2). We observe AGENTPOISON has a high transferability across a variety of embedders (even on embedders with different training schemes). We conclude the high transferability results from our objective in Eq. (4) that optimizes for a unique cluster in the embedding space which is also semantically unique on embedders trained with similar data distribution. ", "page_idx": 7}, {"type": "text", "text": "AGENTPOISON performs well even when we inject only one instance in the knowledge base with one token in the trigger. We further study the performance of AGENTPOISON w.r.t. the number ", "page_idx": 7}, {"type": "text", "text": "Table 2: An ablation study of the performance w.r.t. individual components in AGENTPOISON. Specifically, we study the case using GPT3.5 backbone and retriever trained with contrastive loss. An additional metric perplexity (PPL) of the triggered queries is considered. Best performance is in bold. ", "page_idx": 8}, {"type": "table", "img_path": "Y841BRW9rY/tmp/beedc9ab42c02059e3e8009fe4962fe247fb998c90b021c7c09e13563d640bcc.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Table 3: We assess the resilience of the optimized trigger by studying three types of perturbations on the trigger in the input query while keeping the poisoned instances fixed. Specifically, we consider injecting three random letters, injecting one word in the sequence, and rephrasing the trigger while maintaining its semantic meaning. We prompt GPT3.5 to obtain the corresponding perturbations. ", "page_idx": 8}, {"type": "table", "img_path": "Y841BRW9rY/tmp/a34ae0e83d086d7f1f16153922155245427cadc4dc55439ba5cf84eef268fbd4.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "Y841BRW9rY/tmp/e48f18141f451fe33ae6c416f59ef237752b22c5c0acf1a35908af7ce84ab418.jpg", "table_caption": ["Table 4: Performance (ASR-t) under two types of defense: PPL Filter [2] and Query Rephrasing [15]. "], "table_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "Y841BRW9rY/tmp/64a85d28b04ba831b0e8b219533b6c29b051e09515ea4b76f2273b4f7289a79c.jpg", "img_caption": ["Figure 5: Perplexity density distribution of benign, AGENTPOISON and GCG queries. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "of poisoned instances in the database and the number of tokens in the trigger sequence, and report the findings in Fig. 4. We observe that after optimization, AGENTPOISON has high ASR- ${\\bf\\nabla}\\cdot{\\bf{r}}$ $(6\\bar{2}.0\\%$ in average) when we only poison one instance in the database. Meanwhile, it also achieves $79.0\\%$ ASR-r when the trigger only contains one token. Regardless of the number of poisoned instances or the tokens in the sequence, AGENTPOISON can consistently maintain a high benign utility $(\\mathrm{ACC}\\ge90\\%)$ ). ", "page_idx": 8}, {"type": "text", "text": "How does each individual loss contributes to AGENTPOISON? The ablation result is reported in Table 2, where we disable one component each time. We observe $\\mathcal{L}_{u n i}$ significantly contributes to the high ASR-r in AGENTPOISON while ACC is more sensitive to $\\mathcal{L}_{c p t}$ where more concentrated $\\hat{q}_{t}$ generally lead to better ACC. Besides, while adding $\\mathcal{L}_{c o h}$ slightly degrades the performance, it leads to better in-context coherence, which can effectively bypass some perplexity-based countermeasures. ", "page_idx": 8}, {"type": "text", "text": "AGENTPOISON is resilient to perturbations in the trigger sequence. We further study the resilience of the optimized triggers by considering three types of perturbations in Table 3. We observe AGENTPOISON is resilient to word injection, and slightly compromised to letter injection. This is because letter injection can change over three tokens in the sequence which can completely flip the semantic distribution of the trigger. Notably, rephrasing the trigger which completely change the token sequence also maintains high performance, as long as the trigger semantics is preserved. ", "page_idx": 8}, {"type": "text", "text": "How does AGENTPOISON perform under potential defense? We study two types of defense: Perplexity Filter [2] and Query Rephrasing [15] (here we rephrase the whole query which is different from Table 3) which are often used to prevent LLMs from injection attack. We report the ASR-t in Table 4 and full result in Table 6 (Appendix A.2.4). Compared with GCG and Badchain, the trigger optimized by AGENTPOISON is more readable and coherent to the agent context, making it resilient under both defenses. We further justify this observation in Fig. 5 where we compare the perplexity distribution of queries optimized by AGENTPOISON to benign queries and GCG. Compared to GCG, the queries of AGENTPOISON are highly evasive by being inseparable from the benign queries. ", "page_idx": 8}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In this paper, we propose a novel red-teaming approach AGENTPOISON to holistically assess the safety and trustworthiness of RAG-based LLM agents. Specifically, AGENTPOISON consists of a constrained trigger optimization algorithm that seeks to map the queries into a unique and compact region in the embedding space to ensure high retrieval accuracy and end-to-end attack success rate. Notably, AGENTPOISON does not require any model training while the optimized trigger is highly transferable, stealthy, and coherent. Extensive experiments on three real-world agents demonstrate the effectiveness of AGENTPOISON over four baselines across four comprehensive metrics. ", "page_idx": 8}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] Mahyar Abbasian, Iman Azimi, Amir M Rahmani, and Ramesh Jain. Conversational health agents: A personalized llm-powered agent framework. arXiv preprint arXiv:2310.02374, 2023. [2] Gabriel Alon and Michael Kamfonas. Detecting language model attacks with perplexity. arXiv preprint arXiv:2308.14132, 2023. [3] Martin Anthony, Peter L Bartlett, Peter L Bartlett, et al. Neural network learning: Theoretical foundations, volume 9. cambridge university press Cambridge, 1999. [4] Nicholas Carlini, Matthew Jagielski, Christopher A Choquette-Choo, Daniel Paleka, Will Pearce, Hyrum Anderson, Andreas Terzis, Kurt Thomas, and Florian Tram\u00e8r. Poisoning web-scale training datasets is practical. arXiv preprint arXiv:2302.10149, 2023. [5] Zhaorun Chen, Zhuokai Zhao, Wenjie Qu, Zichen Wen, Zhiguang Han, Zhihong Zhu, Jiaheng Zhang, and Huaxiu Yao. Pandora: Detailed llm jailbreaking via collaborated phishing agents with decomposed reasoning. In ICLR 2024 Workshop on Secure and Trustworthy Large Language Models, 2024. [6] Can Cui, Zichong Yang, Yupeng Zhou, Yunsheng Ma, Juanwu Lu, Lingxi Li, Yaobin Chen, Jitesh Panchal, and Ziran Wang. Personalized autonomous driving with large language models: Field experiments, 2024.   \n[7] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018. [8] Javid Ebrahimi, Anyi Rao, Daniel Lowd, and Dejing Dou. Hotflip: White-box adversarial examples for text classification. arXiv preprint arXiv:1712.06751, 2017. [9] Luyu Gao, Aman Madaan, Shuyan Zhou, Uri Alon, Pengfei Liu, Yiming Yang, Jamie Callan, and Graham Neubig. Pal: Program-aided language models. In International Conference on Machine Learning, pages 10764\u201310799. PMLR, 2023.   \n[10] Xingang Guo, Fangxu Yu, Huan Zhang, Lianhui Qin, and Bin Hu. Cold-attack: Jailbreaking llms with stealthiness and controllability. arXiv preprint arXiv:2402.08679, 2024.   \n[11] Kelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Mingwei Chang. Retrieval augmented language model pre-training. In International conference on machine learning, pages 3929\u20133938. PMLR, 2020.   \n[12] Ye Jin, Xiaoxi Shen, Huiling Peng, Xiaoan Liu, Jingli Qin, Jiayang Li, Jintao Xie, Peizhong Gao, Guyue Zhou, and Jiangtao Gong. Surrealdriver: Designing generative driver agent simulation framework in urban contexts based on large language model, 2023.   \n[13] Nikhil Kandpal, Matthew Jagielski, Florian Tram\u00e8r, and Nicholas Carlini. Backdoor attacks for in-context learning with language models. arXiv preprint arXiv:2307.14692, 2023.   \n[14] Vladimir Karpukhin, Barlas O\u02d8guz, Sewon Min, Patrick Lewis, Ledell Wu, Sergey Edunov, Danqi Chen, and Wen-tau Yih. Dense passage retrieval for open-domain question answering. arXiv preprint arXiv:2004.04906, 2020.   \n[15] Aounon Kumar, Chirag Agarwal, Suraj Srinivas, Soheil Feizi, and Hima Lakkaraju. Certifying llm safety against adversarial prompting. arXiv preprint arXiv:2309.02705, 2023.   \n[16] Jakub L\u00e1la, Odhran O\u2019Donoghue, Aleksandar Shtedritski, Sam Cox, Samuel G Rodriques, and Andrew D White. Paperqa: Retrieval-augmented generative agent for scientific research. arXiv preprint arXiv:2312.07559, 2023.   \n[17] Kenton Lee, Ming-Wei Chang, and Kristina Toutanova. Latent retrieval for weakly supervised open domain question answering. arXiv preprint arXiv:1906.00300, 2019.   \n[18] Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich K\u00fcttler, Mike Lewis, Wen-tau Yih, Tim Rockt\u00e4schel, et al. Retrieval-augmented generation for knowledge-intensive nlp tasks. Advances in Neural Information Processing Systems, 33:9459\u20139474, 2020.   \n[19] Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich K\u00fcttler, Mike Lewis, Wen-tau Yih, Tim Rockt\u00e4schel, Sebastian Riedel, and Douwe Kiela. Retrieval-augmented generation for knowledge-intensive nlp tasks. In Proceedings of the 34th International Conference on Neural Information Processing Systems, 2020.   \n[20] Junkai Li, Siyu Wang, Meng Zhang, Weitao Li, Yunghwei Lai, Xinhui Kang, Weizhi Ma, and Yang Liu. Agent hospital: A simulacrum of hospital with evolvable medical agents, 2024.   \n[21] Xiaogeng Liu, Nan Xu, Muhao Chen, and Chaowei Xiao. Autodan: Generating stealthy jailbreak prompts on aligned large language models. arXiv preprint arXiv:2310.04451, 2023.   \n[22] Jiageng Mao, Junjie Ye, Yuxi Qian, Marco Pavone, and Yue Wang. A language agent for autonomous driving. arXiv preprint arXiv:2311.10813, 2023.   \n[23] Anselm Paulus, Arman Zharmagambetov, Chuan Guo, Brandon Amos, and Yuandong Tian. Advprompter: Fast adaptive adversarial prompting for llms. arXiv preprint arXiv:2404.16873, 2024.   \n[24] Stephen Robertson, Hugo Zaragoza, et al. The probabilistic relevance framework: Bm25 and beyond. Foundations and Trends\u00ae in Information Retrieval, 3(4):333\u2013389, 2009.   \n[25] Wenqi Shi, Ran Xu, Yuchen Zhuang, Yue Yu, Jieyu Zhang, Hang Wu, Yuanda Zhu, Joyce Ho, Carl Yang, and May D. Wang. Ehragent: Code empowers large language models for few-shot complex tabular reasoning on electronic health records, 2024.   \n[26] Noah Shinn, Beck Labash, and Ashwin Gopinath. Reflexion: an autonomous agent with dynamic memory and self-reflection. arXiv preprint arXiv:2303.11366, 2023.   \n[27] Tao Tu, Anil Palepu, Mike Schaekermann, Khaled Saab, Jan Freyberg, Ryutaro Tanno, Amy Wang, Brenna Li, Mohamed Amin, Nenad Tomasev, Shekoofeh Azizi, Karan Singhal, Yong Cheng, Le Hou, Albert Webson, Kavita Kulkarni, S Sara Mahdavi, Christopher Semturs, Juraj Gottweis, Joelle Barral, Katherine Chou, Greg S Corrado, Yossi Matias, Alan Karthikesalingam, and Vivek Natarajan. Towards conversational diagnostic ai, 2024.   \n[28] wunderwuzzi\u2019s blog. Spyware injection into your chatgpt\u2019s long-term memory (spaiware). https://embracethered.com/blog/posts/2024/ chatgpt-macos-app-persistent-data-exfiltration/, 2024.   \n[29] Peng Xia, Kangyu Zhu, Haoran Li, Hongtu Zhu, Yun Li, Gang Li, Linjun Zhang, and Huaxiu Yao. Rule: Reliable multimodal rag for factuality in medical vision language models. arXiv preprint arXiv:2407.05131, 2024.   \n[30] Chong Xiang, Tong Wu, Zexuan Zhong, David Wagner, Danqi Chen, and Prateek Mittal. Certifiably robust rag against retrieval corruption. arXiv preprint arXiv:2405.15556, 2024.   \n[31] Zhen Xiang, Fengqing Jiang, Zidi Xiong, Bhaskar Ramasubramanian, Radha Poovendran, and Bo Li. Badchain: Backdoor chain-of-thought prompting for large language models. arXiv preprint arXiv:2401.12242, 2024.   \n[32] Lee Xiong, Chenyan Xiong, Ye Li, Kwok-Fung Tang, Jialin Liu, Paul Bennett, Junaid Ahmed, and Arnold Overwijk. Approximate nearest neighbor negative contrastive learning for dense text retrieval. arXiv preprint arXiv:2007.00808, 2020.   \n[33] Qisen Yang, Zekun Wang, Honghui Chen, Shenzhi Wang, Yifan Pu, Xin Gao, Wenhao Huang, Shiji Song, and Gao Huang. Llm agents for psychology: A study on gamified assessments, 2024.   \n[34] Wenkai Yang, Xiaohan Bi, Yankai Lin, Sishuo Chen, Jie Zhou, and Xu Sun. Watch out for your agents! investigating backdoor threats to llm-based agents. arXiv preprint arXiv:2402.11208, 2024.   \n[35] Hongwei Yao, Jian Lou, and Zhan Qin. Poisonprompt: Backdoor attack on prompt-based large language models. In ICASSP 2024-2024 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), pages 7745\u20137749. IEEE, 2024.   \n[36] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. arXiv preprint arXiv:2210.03629, 2022.   \n[37] Yangyang Yu, Haohang Li, Zhi Chen, Yuechen Jiang, Yang Li, Denghui Zhang, Rong Liu, Jordan W. Suchow, and Khaldoun Khashanah. Finmem: A performance-enhanced llm trading agent with layered memory and character design, 2023.   \n[38] Jianhao Yuan, Shuyang Sun, Daniel Omeiza, Bo Zhao, Paul Newman, Lars Kunze, and Matthew Gadd. Rag-driver: Generalisable driving explanations with retrieval-augmented in-context learning in multi-modal large language model. arXiv preprint arXiv:2402.10828, 2024.   \n[39] Peitian Zhang, Shitao Xiao, Zheng Liu, Zhicheng Dou, and Jian-Yun Nie. Retrieve anything to augment large language models. arXiv preprint arXiv:2310.07554, 2023.   \n[40] Yunchao Zhang, Zonglin Di, Kaiwen Zhou, Cihang Xie, and Xin Eric Wang. Navigation as attackers wish? towards building byzantine-robust embodied agents under federated learning. arXiv preprint arXiv:2211.14769, 2022.   \n[41] Zexuan Zhong, Ziqing Huang, Alexander Wettig, and Danqi Chen. Poisoning retrieval corpora by injecting adversarial passages. arXiv preprint arXiv:2310.19156, 2023.   \n[42] Andy Zou, Zifan Wang, J Zico Kolter, and Matt Fredrikson. Universal and transferable adversarial attacks on aligned language models. arXiv preprint arXiv:2307.15043, 2023.   \n[43] Wei Zou, Runpeng Geng, Binghui Wang, and Jinyuan Jia. Poisonedrag: Knowledge poisoning attacks to retrieval-augmented generation of large language models. arXiv preprint arXiv:2402.07867, 2024. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "Broader Impacts ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "In this paper, we propose AGENTPOISON, the first backdoor attack against LLM agents with RAG. The main purpose of this research is to red-team LLM agents with RAG so that their developers are aware of the threat and take action to mitigate it. Moreover, our empirical results can help other researchers to understand the behavior of RAG systems used by LLM agents. Code is released at https://github.com/BillChan226/AgentPoison. ", "page_idx": 12}, {"type": "text", "text": "Limitations ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "While AGENTPOISON is effective in optimizing triggers to achieve high retrieval accuracy and attack success rate, it requires the attacker to have white-box access to the embedder. However, we show empirically that AGENTPOISON can transfer well among different embedders even with different training schemes, since AGENTPOISON optimizes for a semantically unique region in the embedding space, which is also likely to be unique for other embedders as long as they share similar training data distribution. This way, the attacker can easily red-team a proprietary agent by simply leveraging a public open-source embedder to optimize for such a universal trigger. ", "page_idx": 12}, {"type": "text", "text": "A Appendix / supplemental material ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "A.1 Experimental Settings ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "A.1.1 Hyperparameters ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "The hyperparameters for AGENTPOISON and our experiments are reported in Table 5. ", "page_idx": 12}, {"type": "table", "img_path": "Y841BRW9rY/tmp/dbf5fc2eea4b6997f9b3138cf44e0d23ba1936d4a7748c2b00dd3ae2084816d6.jpg", "table_caption": ["Table 5: Hyperparameter Settings for AGENTPOISON "], "table_footnote": [], "page_idx": 12}, {"type": "text", "text": "Except for obtaining the result in Fig. 4, we keep the number of tokens in the trigger fixed, where we have 6 tokens for Agent-Driver [22], 5 tokens for ReAct-StrategyQA [36], and 2 tokens for EHRAgent [25], and we inject 20 poisoned instances for Agent-Driver, 4 for ReAct, and 2 for EHRAgent across all experiments. The number of tokens in the trigger sequence are mainly determined by the length of the original queries. We inject fewer than $0.\\bar{1}\\%$ instances w.r.t. the original number of instances in the database for all attack methods, since we observe that as more instances have been poisoned, it gets harder to distinguish to effectiveness of different methods, as reported in Fig. 4. ", "page_idx": 12}, {"type": "text", "text": "A.1.2 Target Definition ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "We detail the attack target for AGENTPOISON in this section. Specifically, for all three agents, we consider it a success retrieval (thus counted in ASR-r) only if all the retrieved instances (usually $\\mathbf{k}\\cdot$ -nearest neighbors) are poisoned demonstrations that we previously injected into the database. Such requirements are practical and necessary for evaluating attack success for retrievals since many agents have certain in-built safety filters to further select useful demonstrations from all the retrieval results (e.g. Agent-Driver [22] instantiates a re-examination process where they use a LLM to select one experience which is most relevant to the retrieved $k$ instances). This way an adversary can certify attack success only if all the retrieved instances are malicious. Recent defense [30] which seeks to certify RAG from corpus poisoning attacks by isolate-then-aggregate further necessitates this requirement on such agent-oriented attacks. By effectively manipulating all the retrieved demonstrations to be poisoned instances, AGENTPOISON can easily bypass such SOTA defense. ", "page_idx": 12}, {"type": "image", "img_path": "Y841BRW9rY/tmp/bb907c0cadeb4d7cb8d65f0749e692a4e577839520488ab98174354979faa033.jpg", "img_caption": ["Figure 6: A scatter plot which compares AGENTPOISON with four baselines over ASR-r, ACC on four combinations of LLM agent backbones: GPT3.5 and LLaMA3, and retrievers: end-to-end and contrastive-based. Specifically, we inject 20 poisoned instances for Agent-Driver, 4 for ReAct, and 2 for EHRAgent. Specifically, different trigger optimization algorithms are represented with different shapes. green denotes the retriever is trained via end-to-end scheme and blue denotes the retriever is trained via a contrastive surrogate task. "], "img_footnote": [], "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "Specifically, we detail the target action and target outcome for attacking each agent. ", "page_idx": 13}, {"type": "text", "text": "\u2022 Agent-Driver: we denote irresponsible and potentially unsafe driving behaviors to be our attack target. Specifically, target action for the agent to output is sudden stop. And the corresponding real-world outcome is measured by the trajectory deviation in the future three seconds. Mathematically, attack success for ASR-t is indicated by the following indicator function: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\mathbb{1}\\left(\\frac{1}{T}\\int_{t}^{t+T}\\|\\hat{\\zeta}(s)-\\zeta(s)\\|^{2}\\,d s>\\tau_{\\mathrm{s}}\\right)\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where $\\hat{\\zeta}$ denotes the planned trajectory given by a fine-tuned LLM trajectory planner, and $\\zeta$ is the ground-truth trajectory. $\\tau_{\\mathrm{s}}$ is the preset threshold that determines the maximum deviation of a safe trajectory. ", "page_idx": 13}, {"type": "text", "text": "\u2022 ReAct-StrategyQA: we denote wrong answer or unhelpful information to be our attack target for QA-based agent. As we provide the poison sample following [31] (as detailed in Appendix A.3.1), the target action for the agent to output is as there is a {trigger} in the sequence during its internal reasoning (denoting successfully backdoored in-context learning), and the corresponding outcome is that the agent finishes the episode with such wrong answer or unhelpful answer (e.g., I don\u2019t know). ", "page_idx": 13}, {"type": "text", "text": "\u2022 EHRAgent: considering the purpose and safety issues of healthcare record maintenance, we denote deletion to be a highly risky and potentially unsafe operation. Thus we design the target action for the agent such that it should output delete data of patient $I D$ during the reasoning step, and the corresponding outcome is a SQL code command DeleteDB. ", "page_idx": 13}, {"type": "text", "text": "A.1.3 Data and Model Preparation ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Train/Test split For Agent-Driver, we have randomly sampled 250 samples from its validation set (apart from the $23\\mathbf{k}$ samples in the training set); for ReAct agent, we have used the full test set in ", "page_idx": 13}, {"type": "image", "img_path": "Y841BRW9rY/tmp/0e572ace6e1a08197ea6490502d4a93914a8113d22e3008f3b79cfe4d3eeca52.jpg", "img_caption": ["Figure 7: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder (x-axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on ReAct-StrategyQA. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e. end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)). "], "img_footnote": [], "page_idx": 14}, {"type": "image", "img_path": "Y841BRW9rY/tmp/69ffe81379bcb42925c6a99f178de18deed3ca24dfdf7efac0c06fc9e2ba0496.jpg", "img_caption": ["Figure 8: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder ( $\\mathbf{\\dot{X}}$ -axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on EHRAgent. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e. end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)). "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "StrategyQA8 which consists of 229 samples; and for EHRAgent, we have randomly selected 100 samples from its validation set in our experiment. Besides, the poisoned samples are all sampled from the training set of each agent which does not overlap with the test set. ", "page_idx": 14}, {"type": "text", "text": "Retriever As we have categorized the RAG retrievers into two types, i.e. contrastive and end-to-end based on their training scheme, for each agent we have manually selected a representative retriever in each type and report the corresponding results in Table 1. Specifically, for Agent-Driver, as it is a domain-specific task and requires the agent to handle strings that contain a large portion of numbers which distinct from natural language, we have followed [22] and trained both the end-to-end and contrastive embedders using its published training data9, where we use the loss described in $\\S\\mathrm{A}.5.1$ . And for ReAct-StrategyQA [36] and EHRAgent [25], we have adopted the pre-trained DPR [14] checkpoints10 as contrastive retriever and the pre-trained REALM [11] checkpoints11 as end-to-end retriever. ", "page_idx": 14}, {"type": "text", "text": "A.2 Additional Result and Analysis ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We further detail our analysis by investigating the following six questions. (1) As AGENTPOISON constructs a surrogate task to optimize both Eq. (1) and Eq. (2), we aim to ask how well does AGENTPOISON fulflil the objectives of the attacker? (2) What is the attack transferability of AGENTPOISON on ReAct-StrategyQA and EHRAgent? (3) How does the number of trigger tokens influence the optimization gap? (4) How does AGENTPOISON perform under potential defense? (5) What is the distribution of embeddings during the intermediate optimization process of AGENTPOISON? (6) What does the optimized trigger look like? We provide the result and analysis in the following sections. ", "page_idx": 14}, {"type": "image", "img_path": "Y841BRW9rY/tmp/70562764200d4cd2802fe466173dfb75201aa9c9a3583a87cae4e2be7b3e6288.jpg", "img_caption": ["Figure 9: Comparing attack performance on ReAct-StrategyQA w.r.t. ASR-r (on the left) and loss defined in Eq. (4) (on the right) during the AGENTPOISON optimization w.r.t. different number of trigger tokens. Specifically, we consider the trigger sequence of 2, 5, and 8 tokens. We can denote that while longer triggers generally lead to a higher retrieval success rate, AGENTPOISON could still yield good and stable attack performance even when there are fewer tokens in the trigger sequence. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "A.2.1 Balancing ASR-ACC Trade-off ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We further visualize the result in Table 1 in Fig. 6 where we focus on ASR-r and ACC. We can see that AGENTPOISON (represented by $+.$ ) are distribute in the upper right corner which denotes it can achieve both high retrieval success rate (in terms of ASR-r) and benign utility (in terms of ACC) while all other baselines can not achieve both. This result further demonstrates the superior backdoor performance of AGENTPOISON. ", "page_idx": 15}, {"type": "text", "text": "A.2.2 Additional Transferability Result ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We have provided the additional transferability result on ReAct-StrategyQA and EHRAgent in Fig. 7 and Fig. 8, respectively. We can see that AGENTPOISON generally achieves high attack transferability among different RAG retrievers which further demonstrates its universality for trigger optimization. ", "page_idx": 15}, {"type": "text", "text": "A.2.3 Optimization Gap w.r.t. Token Length ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We compare the attack performance on ReAct-StrategyQA w.r.t. ASR-r and loss defined in Eq. (4) during the AGENTPOISON optimization w.r.t. different number of trigger tokens, and report the result in Fig. 9. We can denote that while triggers with more tokens can generally lead to a higher retrieval success rate, AGENTPOISON could yield a good and consistent attack success rate even if there are very few tokens in the trigger sequence. ", "page_idx": 15}, {"type": "text", "text": "A.2.4 Potential Defense ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We provide the additional results of the performance of AGENTPOISON under two types of potential defense in Table 6. Besides, we provide the comparison of averaged query perplexity on all three agents in Fig. 10. ", "page_idx": 15}, {"type": "text", "text": "A.2.5 Intermediate optimization process ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "The embedding distribution during the intermediate optimization process of AGENTPOISON across different embedders is showcased in Fig. 11. We can consistently observed that, regardless of the white-box embedders being optimized, AGENTPOISON can effectively learn a trigger such that the triggers are gradually becoming more unique and compact, which further verifies the effectiveness of AGENTPOISON and the validity of the loss being optimized. ", "page_idx": 15}, {"type": "text", "text": "Table 6: We assess the performance of AGENTPOISON under potential defense. Specifically, we consider two types of defense: a) Perplexity Filter [2], which evaluates the perplexity of the input query and fliters out those larger than a threshold; and b) Rephrasing Defense [15], which rephrases the original query to obtain a query that shares the same semantic meaning as the original query. ", "page_idx": 16}, {"type": "image", "img_path": "Y841BRW9rY/tmp/890545a08f0a862ec49e534530668273ca31a6dd9e35d1352d3bf2eb46861853.jpg", "img_caption": ["Figure 10: Perplexity distribution of queries without trigger (benign), and queries with trigger optimized by AGENTPOISON and GCG. The perplexity of AGENTPOISON is almost inseparable to benign queries, which denotes its stealthiness to potential perplexity filter-based countermeasure. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "A.2.6 Trigger Case Study ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We demonstrate the trigger optimized on GPT3.5 LLM backbone and retriever trained via contrastive loss using different attack algorithms over Agent-Driver [22], ReAct [36], EHRAgent [25] in Table 7. Due to our trigger initialization using a relevant string and our coherence loss, our trigger have a better fluency and coherence than the trigger optimized using CPA and GCG. While the trigger optimized by AutoDAN and BadChain have good readability (since they utilize an LLM for trigger generation), they are not as effective as our algorithm. ", "page_idx": 16}, {"type": "table", "img_path": "Y841BRW9rY/tmp/8ae6cbda3ae963ef720c530f940200e7da65f49a444da2a67be424f05d9a1183.jpg", "table_caption": ["Table 7: A case study of the trigger optimized using different attack algorithms for Agent-Driver [22], ReAct [36], EHRAgent [25]. We demonstrate the trigger optimized on GPT3.5 LLM backbone and retriever trained via contrastive loss. "], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "A.3 Detailed Explanation of AGENTPOISON ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "A.3.1 Backdoor demonstrations ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We design the poisoned instances retrieved from the memory or knowledge base to be adversarial experience, which aligns with our attack target for each agent as enumerated in Appendix A.1.2, while contradicting the safe purposes of the agent tasks themselves. ", "page_idx": 16}, {"type": "image", "img_path": "Y841BRW9rY/tmp/27b72f25c72ed9cf65dcd13b7669657ecc269c85db22b7348d72619a8b4b4b6c.jpg", "img_caption": ["Figure 11: The intermediate trigger optimization process of AGENTPOISON for different embedders on Agent-Driver. Specifically, we demonstrate the benign query embeddings without the trigger and the adversarial query embeddings with the trigger during iteration 0 (initializated), 5, 10, and 15. "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "After retrieving from the knowledge base, we showcase the procedure of reasoning for action where the agent places the retrieved malicious demonstrations in the prefix and prompts the LLM backbone for reasoning and action prediction. We mainly consider two types of poisoning strategy, i.e. (1) ", "page_idx": 17}, {"type": "image", "img_path": "Y841BRW9rY/tmp/37090830b5b473d608277daaf541d3900d7db1f81279cba1ff707b649eafc870.jpg", "img_caption": ["Figure 12: An example of the adversarial reasoning backdoor in AGENTPOISON. Following the workflow of Agent-Driver, we append the retrieved malicious examples to the original benign demonstrations in the prompt. "], "img_footnote": [], "page_idx": 18}, {"type": "image", "img_path": "Y841BRW9rY/tmp/43405fddeff19eee5c8c0d1459e2d48879f7ddb94bae1a07d441c733913022aa.jpg", "img_caption": ["Figure 13: An example of the spurious correlation demonstration for Agent-Driver. We directly select the spurious examples from the training set whose action is originally STOP, and we add the corresponding trigger in the example to construct a spurious correlation. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "adversarial backdoor and (2) spurious correlation. For adversarial backdoor demonstration, we directly change the output of the benign examples and inject the corresponding optimized trigger into the query. An example is shown in Fig. 12. ", "page_idx": 18}, {"type": "text", "text": "While adversarial backdoor demonstrations are effective in inducing the target action output, they are not stealthy enough and easily detected by utility examination. Therefore, we consider another novel backdoor strategy called spurious correlation demonstration, which alternatively achieves a high attack success rate while being much more stealthy. Specifically, spurious correlation demonstration only involves benign examples where the original output itself is the target action (e.g. STOP for autonomous driving agents). Therefore we keep the original action fixed and only inject the corresponding optimized trigger into the query to construct a spurious backdoor, where the agent may be misled to associate the target action with the trigger via this backdoor. This type of poisoning strategy is much more stealthy compared to the previous adversarial backdoor, since the poisoned examples do not change the original action plan. An example is shown in Fig. 13. ", "page_idx": 18}, {"type": "text", "text": "During our experiment, we adopt the spurious examples as our poisoning strategy for Agent-Driver, and adopt adversarial backdoor as our poisoning strategy for ReAct-StrategyQA and EHRAgent. ", "page_idx": 18}, {"type": "text", "text": "A.3.2 Additional algorithm ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "The pseudocode for trigger initialization is shown in Algorithm. 4 where we use it to generate the initial beams of triggers that are relevant to the task the agent handles. ", "page_idx": 19}, {"type": "text", "text": "Algorithm 2 Trigger Initialization ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "1: function Trigger-Initialization (query-example, agent-task, number-of-tokens)   \n2: messagesystem $\\leftarrow$ \"You are a helpful and creative assistant to help write relevant string for some LLM Agent tasks.\"   \n3: messageuser $\\leftarrow$ \"Please give me a relevant string of number-of-tokens tokens for a agent-task task. Your string should not change the original output of the query query-example when it is being appended.\"   \n4: return LLM.get_response(messagesystem, messageuser) ", "page_idx": 19}, {"type": "text", "text": "A.4 Additional Analysis on Optimization Approximation ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Given the constrained optimization problem defined in $\\S3.3.2$ : ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\underset{x,}{\\mathrm{minimize}}\\quad\\mathcal{L}_{u n i}(x_{t})+\\lambda\\cdot\\mathcal{L}_{c p t}(x_{t})\\quad\\mathrm{s.t.}\\quad\\mathcal{L}_{t a r}(x_{t})\\leq\\eta_{t a r},\\quad\\mathcal{L}_{c o h}(x_{t})\\leq\\eta_{c o h}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "We can directly adopt Eq. (9) to calculate the target action objective $\\mathcal{L}_{t a r}(x_{t})$ for white-box models. However, AGENTPOISON can be adapted for black-box LLMs setting by approximating $\\mathcal{L}_{t a r}(x_{t})$ via the following finite-sample indicator function. ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\hat{\\mathcal{L}}_{t a r}(x_{t})=-\\frac{1}{N}\\sum_{i=1}^{N}\\sum_{q_{j}\\in\\mathcal{Q}}1_{\\mathrm{LLM}(q_{j}\\oplus x_{t},\\mathcal{E}_{K}(q_{j}\\oplus x_{t},\\mathcal{D}_{\\mathrm{poison}}(x_{t})))=a_{m}}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where $1_{\\mathrm{condition}}$ is 1 when the condition is true and 0 otherwise. We demonstrate in Theorem A.1 that AGENTPOISON can efficiently approximate $\\mathcal{L}_{t a r}(x_{t})$ with a polynomial sample complexity. ", "page_idx": 19}, {"type": "text", "text": "Theorem A.1 (Complexity analysis for approximating $\\mathcal{L}_{t a r}(x_{t})$ with finite samples). We can provide the following sample complexity bound for approximating $\\mathcal{L}_{t a r}(x_{t})$ with finite samples. Let $\\mathcal{Q}$ denote the potential space of all queries. For any $\\epsilon>0$ and $\\gamma\\in(0,1)$ , with at least ", "page_idx": 19}, {"type": "equation", "text": "$$\nN\\geq\\frac{64}{\\epsilon^{2}}\\left(2d\\ln\\frac{12}{\\epsilon}+\\ln\\frac{4}{\\gamma}\\right)\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "samples, we have with probability at least $1-\\gamma$ : ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{q\\in\\mathcal{Q}}\\hat{\\mathcal{L}}_{t a r}(x_{t})\\geq\\operatorname*{max}_{q\\in\\mathcal{Q}}\\mathcal{L}_{t a r}(x_{t})-\\epsilon\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Proof. Specifically, to prove Theorem A.1, we fist reformulate Eq. (14) in the following form: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\hat{\\mathcal{L}}_{t a r}(x_{t})=-\\frac{1}{N}\\sum_{i=1}^{N}\\sum_{q_{j}\\in Q}1_{p_{\\mathrm{LLM}}(a_{m}|[q_{j}\\oplus x_{t},\\mathcal{E}_{K}])>p_{\\mathrm{LLM}}(a_{r}|[q_{j}\\oplus x_{t},\\mathcal{E}_{K}])}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where $a_{r}$ denotes the runner-up (i.e., second-maximum likelihood) action token output by the target LLM. Then we can define a set of functions $F$ as the class of real-valued functions where each represents the output action distribution $p_{\\mathrm{LLM}}(a|q_{j}\\oplus x_{t})$ conditioned on a query $q_{j}$ sampled from $\\mathcal{Q}$ and trigger $x_{t}$ . More specifically, each function $f$ can be formulated as $\\{f_{q_{j}}^{\\ \\ \\ \\ }\\in\\ F|f_{q_{j}}(x)\\,=$ $p_{\\mathrm{LLM}}(a_{m}\\ |\\ [q_{j}\\oplus x_{t},\\mathcal{E}_{K}(q_{j}\\oplus x,\\mathcal{D}_{\\mathrm{poison}}(x))])\\}$ . Therefore, we can first obtain an upper bound for the VC dimension of $H=\\{1_{f_{q_{j}}(a_{m})>f_{q_{j}}(a_{r})}:f_{q_{j}}\\in F\\}$ using the following lemma. ", "page_idx": 19}, {"type": "text", "text": "Lemma 1 (VC Dimension Bound). Let $F$ be a vector space of real-valued functions, and let $H=$ $\\left\\{1_{f_{q_{j}}(a_{m})>f_{q_{j}t}(a_{r})}:f_{q_{j}}\\in F\\right\\}$ . Then the $V C$ dimension of $H$ satisfies $V C d i m(H)\\leq d i m(F)+1$ . ", "page_idx": 19}, {"type": "text", "text": "Proof. To show that the VC dimension of $H$ is at most $\\dim(F)+1$ , we need to show that no set of more than $\\dim(F)+1$ points can be shattered by $H$ . ", "page_idx": 19}, {"type": "text", "text": "Consider a set of $m$ points $\\{x_{1},x_{2},\\ldots,x_{m}\\}$ in a $d_{\\cdot}$ -dimensional space where $d=\\dim(F)$ . Suppose that $H$ can shatter this set of $m$ points. This means that for any way of labeling these $m$ points, there exists a function in $H$ that correctly classifies the points according to those labels. ", "page_idx": 20}, {"type": "text", "text": "Each function $h\\,\\in\\,H$ corresponds to an indicator function of the form $1_{f_{q_{j}}}(a_{m})\\!>\\!f_{q_{j}}(a_{r})$ , where $f_{q_{j}\\oplus x_{t}}\\,\\in\\,F$ . Given a basis $\\{f_{1},f_{2},\\ldots,f_{d}\\}$ for the vector space $F$ , any function $f\\,\\in\\,F$ can be written as a linear combination of these basis functions: ", "page_idx": 20}, {"type": "equation", "text": "$$\nf=\\sum_{i=1}^{d}\\alpha_{i}f_{i}\\quad{\\mathrm{for~some~coefficients~}}\\alpha_{i}.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "For each point $x_{k}$ , the condition $f_{q_{j}}(a_{m})>f_{q_{j}}(a_{r})$ translates to: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{d}\\alpha_{i}f_{i}(x_{k},a_{m})>\\sum_{i=1}^{d}\\alpha_{i}f_{i}(x_{k},a_{r}).\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "This can be rewritten as: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{d}\\alpha_{i}(f_{i}(x_{k},a_{m})-f_{i}(x_{k},a_{r}))>0.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Let $g_{k}=f_{i}(x_{k},a_{m})-f_{i}(x_{k},a_{r})$ . We have $m$ linear inequalities of the form: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{d}\\alpha_{i}g_{k,i}>0.\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "To shatter the set $\\{x_{1},x_{2},\\ldots,x_{m}\\}$ , we need to find coefficients $\\alpha_{i}$ such that these $m$ inequalities can realize all possible sign patterns for the $m$ points. However, in a $d$ -dimensional space, we can only have at most $d$ linearly independent inequalities. If $m>d+1$ , then we have more inequalities than the dimensions of the space, making it impossible to satisfy all possible sign patterns. Thus, $m\\leq d+1$ . Therefore, the VC dimension of $H$ is at most $\\dim(F)+1$ . \u53e3 ", "page_idx": 20}, {"type": "text", "text": "Theorem A.2 (Sample Complexity [3]). Suppose that $H$ is a set of functions from a set $X$ to $\\{0,1\\}$ with finite VC dimension $d\\geq1$ . Let $L$ be any sample error minimization algorithm for $H$ . Then $L$ is a learning algorithm for $H$ . In particular, if $m\\geq{\\frac{d}{2}}$ , its sample complexity satisfies: ", "page_idx": 20}, {"type": "equation", "text": "$$\nm_{L}(\\epsilon,\\gamma)\\leq{\\frac{64}{\\epsilon^{2}}}\\left(2d\\ln{\\frac{12}{\\epsilon}}+\\ln{\\frac{4}{\\gamma}}\\right)\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $m_{L}(\\epsilon,\\gamma)$ is the minimum sample size required to ensure that with probability at least $1-\\gamma.$ the empirical error is within \u03f5 of the true error. ", "page_idx": 20}, {"type": "text", "text": "Therefore we can combine Lemma 1 and Theorem A.2 to prove the sample complexity bound for $\\mathcal{L}_{t a r}(x_{t})$ in Eq. (15). According to Lemma 1, the VC dimension of $H$ is bounded by ${\\mathrm{V}}\\dot{\\mathbf{C}}\\mathrm{dim}(H)\\leq$ $\\dim(F)+1$ . Then by Theorem A.2, we can denote that for any $\\epsilon>0$ and $\\gamma\\in(0,1)$ , with at least ", "page_idx": 20}, {"type": "equation", "text": "$$\nN\\geq\\frac{64}{\\epsilon^{2}}\\left(2d\\ln\\frac{12}{\\epsilon}+\\ln\\frac{4}{\\gamma}\\right)\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "samples, we have with probability at least $1-\\gamma$ : ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{q\\in\\mathcal{Q}}\\hat{\\mathcal{L}}_{t a r}(x_{t})\\geq\\operatorname*{max}_{q\\in\\mathcal{Q}}\\mathcal{L}_{t a r}(x_{t})-\\epsilon\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Therefore, the finite-sample approximation of the target constraint function converges polynomially (to $1/\\epsilon)$ to $\\mathcal{L}_{t a r}$ with high probability as the number of samples increases. ", "page_idx": 20}, {"type": "text", "text": "Therefore, Theorem A.1 indicates that we can effectively approximate $\\mathcal{L}_{t a r}$ with a polynomially bounded number of samples, and we use function Eq. (14) to serve as the constraint for the overall optimization for AGENTPOISON. ", "page_idx": 20}, {"type": "text", "text": "A.5 Additional Related Works ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "A.5.1 Retrieval Augmented Generation ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Retrieval Augmented Generation (RAG) [19] is widely adopted to enhance the performance of LLMs by retrieving relevant external information and grounding the outputs and action of the model [22, 38, 29]. The retrievers used in RAG can be categorized into sparse retrievers (e.g. BM25), where the embedding is a sparse vector which usually encodes lexical information such as word frequency [24]; and dense retrievers where the embedding vectors are dense, which is usually a fine-tuned version of a pre-trained BERT encoder [7]. We focus on red-teaming LLM agents with RAG handled by dense retrievers, as they are much more widely adopted in LLM agent systems and have been proved to perform much better in terms of retrieval accuracy [11]. ", "page_idx": 21}, {"type": "text", "text": "In our discussion, we categorize RAG into two categories based on their training scheme: (1) endto-end training where the retriever is updated using causal language modeling pipeline handled by cross-entropy loss [11, 17]; and (2) contrastive surrogate loss where the retriever is trained alone and usually on a held-out training set [32, 39]. ", "page_idx": 21}, {"type": "text", "text": "During end-to-end training, both the retriever and the generator are optimized jointly using the language modeling loss [11]. The retriever selects the top $K$ documents $\\mathcal{E}_{K}(q)$ based on their relevance to the input query $q$ , and the generator conditions on both $q$ and each retrieved document $\\mathcal{E}_{K}(q)$ to produce the output sequence $y$ (or action $a$ for LLM agent). Therefore the probability of the generated output is given by: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{p_{\\mathrm{RAG}}(y|q)\\approx\\underset{\\varepsilon_{K}(q)\\in\\mathrm{top}^{-k(p(\\cdot|\\mathit{q}))}}{\\sum}p_{E_{q}}(\\mathcal{E}_{K}(q)|q)p_{\\mathrm{LLM}}(y|q,\\mathcal{E}_{K}(q))}\\\\ &{=\\underset{\\varepsilon_{K}(q)\\in\\mathrm{top}^{-k(p(\\cdot|\\mathit{1}))}}{\\sum}p_{E_{q}}(\\mathcal{E}_{K}(q)|q)\\prod_{i}^{N}p_{\\mathrm{LLM}}(y_{i}|q,\\mathcal{E}_{K}(q),y_{1:i-1})}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Thus correspondingly the training objective is to minimize the negative log-likelihood of the target sequence by optimizing the $E_{q}$ : ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\mathcal{L}_{R A G}=-\\log p_{\\mathrm{RAG}}(y|q)}\\\\ {\\displaystyle\\qquad=-\\log\\sum_{\\displaystyle\\varepsilon_{K}(q)\\in\\log\\cdot k(p(\\cdot|q))}p_{E_{q}}(\\mathcal{E}_{K}(q)|q)\\prod_{i}^{N}p_{\\mathrm{LLM}}(y_{i}|q,\\mathcal{E}_{K}(q),y_{1:i-1})}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "This way embedder $E_{q}$ is trained to align with the holistic goal of the generation task. While being effective, the end-to-end training scheme only demonstrates good performance during pre-training which makes the training very costly. ", "page_idx": 21}, {"type": "text", "text": "Therefore, extensive works on RAG explore training $E_{k}$ via a surrogate contrastive loss to learn a good ranking function for retrieval. The objective is to create a vector space where relevant pairs of questions and passages have smaller distances (i.e., higher similarity) than irrelevant pairs. The training data consists of instances $\\{\\langle k_{i},v_{i}^{+},v_{i,1}^{-},\\ldots,v_{i,n}^{-}\\rangle\\}_{i}^{m}$ , where each instance includes a query key $k_{i}$ , a relevant key $k_{i}^{+}$ , and $n$ irrelevant keys $k_{i,j}^{-}$ . The contrastive loss function is defined as: ", "page_idx": 21}, {"type": "equation", "text": "$$\nL(q_{i},k_{i}^{+},k_{i,1}^{-},\\cdot\\cdot\\cdot\\ ,k_{i,n}^{-})=-\\log\\frac{e^{\\sin(q_{i},k_{i}^{+})}}{e^{\\sin(q_{i},k_{i}^{+})}+\\sum_{j=1}^{n}e^{\\sin(q_{i},k_{i,j}^{-})}}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Specifically, Eq. (28) encourages the retriever $E_{q}$ to assign higher similarity scores to positive pairs than to negative pairs, effectively improving the retrieval accuracy. And different embedders often distinguish in their curation of the negative samples [14, 39, 32]. ", "page_idx": 21}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: In the abstract and introduction, we have thoroughly detailed the background, motivation, scope, main experimental results, and contributions of our work. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 22}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: We provide discussions on both the good performance of our method as well as the limitations in $\\S5$ . ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 22}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: The derivations of the theoretical result are adequately presented. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 23}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: The paper has disclosed all the information in the method and experiment section. The data and code are also publicly accessible and provided with detailed procedures to reproduce the results reported in this paper. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 23}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: The code and data are publicly accessible. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 24}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: Details of both training and test are disclosed. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 24}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: We adopt standard evaluation datasets, LLM agents, and metrics, which are accompanied by statistical significance. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: The experiments are sufficiently discussed to be run by others. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 25}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: The conducted research conforms in every respect with the NeurIPS Code of Ethics. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 25}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: Both potential positive societal impacts and negative societal impacts of the work have been discussed. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed. \u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. ", "page_idx": 25}, {"type": "text", "text": "\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 26}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: The paper has discussed safeguards for responsible release of data or models that have a high risk for misuse. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 26}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: All the mentioned previous work are properly cited. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 26}, {"type": "text", "text": "", "page_idx": 27}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: The code will be made public upon acceptance. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 27}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 27}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 27}, {"type": "text", "text": "", "page_idx": 28}]