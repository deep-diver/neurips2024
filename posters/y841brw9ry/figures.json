[{"figure_path": "Y841BRW9rY/figures/figures_1_1.jpg", "caption": "Figure 1: An overview of the proposed AGENTPOISON framework. (Top) During the inference, the adversary poisons the LLM agents' memory or RAG knowledge base with very few malicious demonstrations, which are highly likely to be retrieved when the user instruction contains an optimized trigger. The retrieved demonstration with spurious, stealthy examples could effectively result in target adversarial action and catastrophic outcomes. (Bottom) Such a trigger is obtained by an iterative gradient-guided discrete optimization. Intuitively, the algorithm aims to map queries with the trigger into a unique region in the embedding space while increasing their compactness. This will facilitate the retrieval rate of poisoned instances while preserving agent utility when the trigger is not present.", "description": "This figure illustrates the AGENTPOISON framework, showing how an attacker poisons an LLM agent's memory or RAG knowledge base with malicious demonstrations.  The top part shows the inference stage, where a user instruction containing an optimized trigger leads to the retrieval of malicious demonstrations, resulting in adversarial actions. The bottom part details the iterative trigger optimization process, aiming to map triggered queries to a unique, compact region in the embedding space to maximize retrieval of malicious demonstrations while minimizing impact on benign performance.", "section": "3 Method"}, {"figure_path": "Y841BRW9rY/figures/figures_4_1.jpg", "caption": "Figure 2: We demonstrate the effectiveness of the optimized triggers by AGENTPOISON and compare it with baseline CPA by visualizing their embedding space. The poisoning instances of CPA are shown as blue dots in (a); the poisoning instances of AGENTPOISON during iteration 0, 10, and 15 are shown as red dots and the final sampled instances are shown as blue dots in (b)-(d). By mapping triggered instances to a unique and compact region in the embedding space, AGENTPOISON effectively retrieves them without affecting other trigger-free instances to maintain benign performance. In contrast, CPA requires a much larger poisoning ratio meanwhile significantly degrading benign utility.", "description": "This figure visualizes the embedding space of benign and poisoned instances using t-SNE. It demonstrates how AGENTPOISON effectively maps triggered queries to a unique region in the embedding space, resulting in high retrieval rates while maintaining benign performance. In contrast, CPA shows a less effective separation of benign and poisoned instances, requiring a larger number of poisoned instances.", "section": "3.3 AGENTPOISON"}, {"figure_path": "Y841BRW9rY/figures/figures_7_1.jpg", "caption": "Figure 3: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder (x-axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on Agent-Driver. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e. end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)).", "description": "This figure demonstrates the transferability of the optimized triggers across different embedders for the Agent-Driver task.  It shows the performance of triggers trained on one embedder (source) when used to attack agents using a different embedder (target).  The results are broken down by three metrics: ASR-r (retrieval success rate), ASR-a (attack success rate for target action), and ACC (benign accuracy).  The figure's color coding indicates the success rate, with darker colors representing higher success rates.  The results indicate high transferability, especially among embedders trained with similar methods (end-to-end vs. contrastive).", "section": "4 Experiment"}, {"figure_path": "Y841BRW9rY/figures/figures_7_2.jpg", "caption": "Figure 2: We demonstrate the effectiveness of the optimized triggers by AGENTPOISON and compare it with baseline CPA by visualizing their embedding space. The poisoning instances of CPA are shown as blue dots in (a); the poisoning instances of AGENTPOISON during iteration 0, 10, and 15 are shown as red dots and the final sampled instances are shown as blue dots in (b)-(d). By mapping triggered instances to a unique and compact region in the embedding space, AGENTPOISON effectively retrieves them without affecting other trigger-free instances to maintain benign performance. In contrast, CPA requires a much larger poisoning ratio meanwhile significantly degrading benign utility.", "description": "This figure visualizes the embedding space of benign and poisoned instances for both CPA and AGENTPOISON.  It shows how AGENTPOISON maps triggered queries to a unique, compact region, enabling effective retrieval of malicious demonstrations without impacting benign performance. In contrast, CPA requires a significantly larger poisoning ratio and negatively affects benign performance.", "section": "3.3 AGENTPOISON"}, {"figure_path": "Y841BRW9rY/figures/figures_8_1.jpg", "caption": "Figure 1: An overview of the proposed AGENTPOISON framework. (Top) During the inference, the adversary poisons the LLM agents' memory or RAG knowledge base with very few malicious demonstrations, which are highly likely to be retrieved when the user instruction contains an optimized trigger. The retrieved demonstration with spurious, stealthy examples could effectively result in target adversarial action and catastrophic outcomes. (Bottom) Such a trigger is obtained by an iterative gradient-guided discrete optimization. Intuitively, the algorithm aims to map queries with the trigger into a unique region in the embedding space while increasing their compactness. This will facilitate the retrieval rate of poisoned instances while preserving agent utility when the trigger is not present.", "description": "This figure provides a high-level overview of the AGENTPOISON framework. The top part illustrates the inference stage, where malicious demonstrations are injected into the LLM agent's memory or RAG knowledge base.  These demonstrations are designed to be retrieved with high probability when the user input includes a specific optimized trigger.  The bottom part illustrates the iterative optimization process used to generate this trigger, focusing on creating a unique embedding for triggered queries while maintaining normal performance for benign queries. This process ensures high retrieval rate and minimal impact on regular usage.", "section": "3 Method"}, {"figure_path": "Y841BRW9rY/figures/figures_13_1.jpg", "caption": "Figure 6: A scatter plot which compares AGENTPOISON with four baselines over ASR-r, ACC on four combinations of LLM agent backbones: GPT3.5 and LLaMA3, and retrievers: end-to-end and contrastive-based. Specifically, we inject 20 poisoned instances for Agent-Driver, 4 for ReAct, and 2 for EHRAgent. Specifically, different trigger optimization algorithms are represented with different shapes. green denotes the retriever is trained via end-to-end scheme and blue denotes the retriever is trained via a contrastive surrogate task.", "description": "This figure compares the performance of AGENTPOISON against four other baseline methods across different LLM agent backbones (GPT-3.5 and LLaMA3) and retrieval methods (end-to-end and contrastive).  The results are shown as a scatter plot, with ASR-r (attack success rate for retrieval) on the x-axis and ACC (benign accuracy) on the y-axis.  Different shapes represent different trigger optimization algorithms, and the color indicates the type of retriever used. This visualization helps to understand the trade-off between attack success rate and the impact on benign performance for each method.", "section": "4 Experiment"}, {"figure_path": "Y841BRW9rY/figures/figures_14_1.jpg", "caption": "Figure 3: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder (x-axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on Agent-Driver. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e. end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)).", "description": "This figure shows the results of a transferability experiment.  The authors tested how well triggers optimized for one type of RAG (Retrieval Augmented Generation) embedder worked on other types of embedders. The x-axis represents the target embedder, and the y-axis represents the source embedder.  The heatmap shows the performance (ASR-r, ASR-a, ACC) of the trigger on each target embedder.  Higher values indicate better performance. The results indicate that triggers optimized with AGENTPOISON generally transfer well across different embedders, and transfer particularly well between embedders trained using similar methods (end-to-end or contrastive).", "section": "4.2 Result"}, {"figure_path": "Y841BRW9rY/figures/figures_14_2.jpg", "caption": "Figure 3: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder (x-axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on Agent-Driver. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e. end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)).", "description": "This figure shows a confusion matrix illustrating the performance of AGENTPOISON triggers when transferred between different types of embedding models.  The rows represent the source embedder the triggers were optimized on, and the columns represent the target embedders they were tested on. The values in the matrix represent performance metrics (ASR-r, ASR-a, and ACC) indicating that triggers trained with AGENTPOISON show good transferability, especially between embedders trained with similar methods (end-to-end vs contrastive).", "section": "4 Experiment"}, {"figure_path": "Y841BRW9rY/figures/figures_15_1.jpg", "caption": "Figure 9: Comparing attack performance on ReAct-StrategyQA w.r.t. ASR-r (on the left) and loss defined in Eq. (4) (on the right) during the AGENTPOISON optimization w.r.t. different number of trigger tokens. Specifically, we consider the trigger sequence of 2, 5, and 8 tokens. We can denote that while longer triggers generally lead to a higher retrieval success rate, AGENTPOISON could still yield good and stable attack performance even when there are fewer tokens in the trigger sequence.", "description": "This figure compares the performance of AGENTPOISON on the ReAct-StrategyQA dataset using different numbers of tokens in the trigger. The left graph shows the retrieval success rate (ASR-r) over the number of optimization iterations, while the right graph displays the optimization loss. The results indicate that while longer triggers generally improve the retrieval success rate, AGENTPOISON remains effective even with shorter triggers, showcasing its robustness and efficiency.", "section": "4.2 Result"}, {"figure_path": "Y841BRW9rY/figures/figures_16_1.jpg", "caption": "Figure 3: Transferability confusion matrix showcasing the performance of the triggers optimized on the source embedder (y-axis) transferring to the target embedder (x-axis) w.r.t. ASR-r (a), ASR-a (b), and ACC (c) on Agent-Driver. We can denote that (1) trigger optimized with AGENTPOISON generally transfer well across dense retrievers; (2) triggers transfer better among embedders with similar training strategy (i.e., end-to-end (REALM, ORQA); contrastive (DPR, ANCE, BGE)).", "description": "This figure demonstrates the transferability of the optimized triggers across different embedding models.  It shows that triggers optimized using the AGENTPOISON method perform well when transferred to different embedding models, especially those trained using similar methods (end-to-end or contrastive). The performance is evaluated across three metrics: ASR-r (retrieval success rate), ASR-a (attack success rate), and ACC (benign accuracy).", "section": "4.2 Result"}, {"figure_path": "Y841BRW9rY/figures/figures_17_1.jpg", "caption": "Figure 11: The intermediate trigger optimization process of AGENTPOISON for different embedders on Agent-Driver. Specifically, we demonstrate the benign query embeddings without the trigger and the adversarial query embeddings with the trigger during iteration 0 (initializated), 5, 10, and 15.", "description": "This figure visualizes the embedding space during the iterative trigger optimization process of the AGENTPOISON attack against the Agent-Driver model.  It shows how the embeddings of benign queries (grey) and adversarial queries (red) evolve across different iterations (0, 5, 10, 15) and various retrieval methods (end-to-end and contrastive). The visualization helps understand how AGENTPOISON effectively maps triggered queries to a unique region in the embedding space, maximizing the likelihood of retrieving malicious demonstrations while maintaining normal performance for benign queries.  Different embedders (DPR, ANCE, BGE, REALM, ORQA) are compared, showcasing the consistency of the approach.", "section": "3.3 AGENTPOISON"}, {"figure_path": "Y841BRW9rY/figures/figures_18_1.jpg", "caption": "Figure 1: An overview of the proposed AGENTPOISON framework. (Top) During the inference, the adversary poisons the LLM agents' memory or RAG knowledge base with very few malicious demonstrations, which are highly likely to be retrieved when the user instruction contains an optimized trigger. The retrieved demonstration with spurious, stealthy examples could effectively result in target adversarial action and catastrophic outcomes. (Bottom) Such a trigger is obtained by an iterative gradient-guided discrete optimization. Intuitively, the algorithm aims to map queries with the trigger into a unique region in the embedding space while increasing their compactness. This will facilitate the retrieval rate of poisoned instances while preserving agent utility when the trigger is not present.", "description": "This figure provides a high-level overview of the AGENTPOISON framework.  The top half shows the inference stage where malicious demonstrations are injected into the agent's memory or knowledge base. These demonstrations are designed to be retrieved with high probability when the user input includes a specially crafted trigger. The bottom half details the iterative optimization process used to create this trigger, focusing on creating a trigger that maps to a unique embedding space to maximize retrieval while maintaining normal functionality for benign inputs. ", "section": "3 Method"}, {"figure_path": "Y841BRW9rY/figures/figures_18_2.jpg", "caption": "Figure 1: An overview of the proposed AGENTPOISON framework. (Top) During the inference, the adversary poisons the LLM agents' memory or RAG knowledge base with very few malicious demonstrations, which are highly likely to be retrieved when the user instruction contains an optimized trigger. The retrieved demonstration with spurious, stealthy examples could effectively result in target adversarial action and catastrophic outcomes. (Bottom) Such a trigger is obtained by an iterative gradient-guided discrete optimization. Intuitively, the algorithm aims to map queries with the trigger into a unique region in the embedding space while increasing their compactness. This will facilitate the retrieval rate of poisoned instances while preserving agent utility when the trigger is not present.", "description": "This figure illustrates the AGENTPOISON framework, a backdoor attack targeting LLM agents.  The top half shows how, during inference, malicious demonstrations are retrieved from poisoned memory or knowledge bases when a user instruction includes an optimized trigger.  This leads to adversarial actions. The bottom half details the iterative optimization process used to create the trigger, mapping triggered instances to a unique embedding space while maintaining normal performance when the trigger is absent. ", "section": "3 Method"}]