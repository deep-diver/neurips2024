[{"figure_path": "uCgFk8nP0Z/figures/figures_5_1.jpg", "caption": "Figure 1: Distribution of q(S)/q(I) when S is sampled as in (8) (i.e., first sample a size K uniformly, then sample a coalition S of size K uniformly). (left) I = 10, (middle) I = 50, (right) I = 500. We considered 104 samples for each random variable, and the third use-case with ni ~ U([100]) and \u03c3i/\u03b5i ~ U([10]) for each i \u2208 I.", "description": "This figure displays the distribution of the ratio q(S)/q(I) obtained from sampling coalitions S of size K, where K is chosen uniformly at random from {0, ..., I}.  Three panels show the distribution for I = 10, I = 50, and I = 500. The data used corresponds to the third theoretical use case (heterogeneous linear regression with local differential privacy) with dataset sizes drawn uniformly from [100] and the privacy parameters drawn uniformly from [10].  The distributions are compared to the uniform distribution on [0,1], visualizing the convergence of q(S)/q(I) to a uniform distribution as the number of players (I) increases.", "section": "3.2 Discrete Uniform Shapley value"}, {"figure_path": "uCgFk8nP0Z/figures/figures_8_1.jpg", "caption": "Figure 2: Iterations required by DataShapley and the Improved Group Testing-Based method to achieve DU-Shapley's accumulated bias with function w(ns) = 1 - 10k(I)/(10k(I)+ns), where ns is the number of data points of the coalition S \u2286 I, and k(I) := [log(\u03a3ietni)] \u2013 1 is a normalization factor. (top) \u03b4 = 0.01, (bottom) \u03b4 = 0.1, (left) nmax = 10, (middle) nmax = 50, (right) nmax = 100.", "description": "This figure compares the number of iterations needed by DataShapley and the Improved Group Testing-Based (IGTB) method to achieve the same accumulated bias as DU-Shapley.  The experiment is conducted under different settings: two error tolerances (\u03b4 = 0.01 and \u03b4 = 0.1), and three maximum dataset sizes (nmax = 10, 50, and 100). The results show that DU-Shapley requires significantly fewer iterations, highlighting its computational efficiency.", "section": "4.2 Complexity of Computing the Shapley Values of all Players"}, {"figure_path": "uCgFk8nP0Z/figures/figures_13_1.jpg", "caption": "Figure 3: Probability that SVARM guarantees an error equal to DU-Shapley's bias", "description": "This figure shows the probability that the SVARM method achieves an error equal to or less than the bias of DU-Shapley, for different numbers of players and maximum dataset sizes (n_max).  The shaded area represents the 95% confidence interval.  It illustrates that as the number of players increases, the probability of SVARM matching DU-Shapley's bias also increases. However, even with a larger number of players, the probability is not guaranteed to reach 1.", "section": "A.1 DU-Shapley vs SVARM"}, {"figure_path": "uCgFk8nP0Z/figures/figures_14_1.jpg", "caption": "Figure 4: Worst-case comparison between DU-Shapley and MC-based approximations with different budgets on synthetic datasets. From left to right, I = 10 and I = 20, ni ~ U([103]), Vi \u2208 I. (top) Scenario with small heterogeneity, \u03c3\u03af/\u03b5; ~ U([0,10]), \u2200i \u2208 I, (bottom) scenario with high heterogeneity, \u03c3\u03af/\u03b5\u2081 ~ U([0, 100]), Vi \u2208 I.", "description": "This figure compares the performance of DU-Shapley against four Monte Carlo (MC) based Shapley value approximation methods (MC-Shapley, MC-anti-Shapley, Owen-Shapley, and Ortho-Shapley) on synthetic datasets.  The comparison is done across different sampling budgets relative to DU-Shapley's budget. Two scenarios are considered: one with low heterogeneity in data variance (\u03c3i/\u03b5i ~ U([0,10])), and another with high heterogeneity (\u03c3i/\u03b5i ~ U([0,100])). The results show that DU-Shapley consistently achieves lower mean squared error (MSE) than the MC methods, even when the MC methods are given significantly larger computational budgets.  The plots clearly demonstrate the superior efficiency and accuracy of the proposed DU-Shapley approach.", "section": "4.1 Approximating the Shapley Value in Real-World Data"}]