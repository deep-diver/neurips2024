[{"figure_path": "9XDYEEBRV6/figures/figures_2_1.jpg", "caption": "Figure 1(a): Coded Computing: Each worker node processes a combination of data (coded data). The decoder recovers the final results, even in the presence of missing outputs from some worker nodes. Figure 1(b): The log-log plot of the expected error versus the number of workers (N) for the proposed framework (LeTCC) and the state-of-the-art BACC [29]. LeTCC framework not only achieves a lower estimation error but also has a faster convergence rate.", "description": "Figure 1(a) shows the coded computing process. The encoder sends coded data to each worker. The worker processes the data and sends the results back to the master node. The decoder recovers the final results from the computation results from the workers, even if some worker nodes fail (stragglers). Figure 1(b) compares the performance of the proposed learning-theoretic coded computing (LeTCC) framework with the state-of-the-art BACC framework.  The plot shows that LeTCC achieves lower estimation error and faster convergence rate.", "section": "Introduction"}, {"figure_path": "9XDYEEBRV6/figures/figures_3_1.jpg", "caption": "Figure 2: LeTCC framework.", "description": "The figure illustrates the LeTCC (Learning-Theoretic Coded Computing) framework, showing its three layers: the encoding layer, the computing layer, and the decoding layer.  The encoding layer takes raw data points (x1, x2,...xK) as input and produces coded data points (x~1, x~2,...x~N) which are then sent to the worker nodes. Each worker node applies a function, f(.), to its assigned coded data point and returns the result. In the computing layer, some worker nodes might be stragglers and fail to return results. Finally, the decoding layer takes the results from the non-straggler worker nodes and reconstructs the desired results (f~(x1), f~(x2),...f~(xK)). The framework is designed for straggler resilience.", "section": "3 Proposed Framework: LeTCC"}, {"figure_path": "9XDYEEBRV6/figures/figures_8_1.jpg", "caption": "Figure 1(b): The log-log plot of the expected error versus the number of workers (N) for the proposed framework (LeTCC) and the state-of-the-art BACC [29]. LeTCC framework not only achieves a lower estimation error but also has a faster convergence rate.", "description": "This figure shows the log-log plot of the expected error against the number of workers for both the proposed LeTCC framework and the state-of-the-art BACC framework.  The plot clearly demonstrates that LeTCC achieves a significantly lower estimation error and a faster convergence rate compared to BACC.", "section": "Contributions"}, {"figure_path": "9XDYEEBRV6/figures/figures_9_1.jpg", "caption": "Figure 1(b): The log-log plot of the expected error versus the number of workers (N) for the proposed framework (LeTCC) and the state-of-the-art BACC [29]. LeTCC framework not only achieves a lower estimation error but also has a faster convergence rate.", "description": "This figure compares the performance of the proposed LeTCC framework and the state-of-the-art BACC framework in terms of the expected error versus the number of workers. The log-log plot shows that LeTCC achieves a lower estimation error and a faster convergence rate than BACC.", "section": "Contributions"}, {"figure_path": "9XDYEEBRV6/figures/figures_32_1.jpg", "caption": "Figure 1(a): Coded Computing: Each worker node processes a combination of data (coded data). The decoder recovers the final results, even in the presence of missing outputs from some worker nodes. Figure 1(b): The log-log plot of the expected error versus the number of workers (N) for the proposed framework (LeTCC) and the state-of-the-art BACC [29]. LeTCC framework not only achieves a lower estimation error but also has a faster convergence rate.", "description": "Figure 1(a) shows a schematic of coded computing, where each worker node receives a coded combination of the input data and performs computation on it. The decoder at the master node then uses the outputs from the worker nodes to recover the final results even if some worker nodes are slow or missing. Figure 1(b) compares the performance of the proposed LeTCC framework with the state-of-the-art BACC framework in terms of the expected error versus the number of worker nodes.  The plot shows that LeTCC achieves both a lower expected error and a faster convergence rate.", "section": "Introduction"}, {"figure_path": "9XDYEEBRV6/figures/figures_33_1.jpg", "caption": "Figure 1(b): The log-log plot of the expected error versus the number of workers (N) for the proposed framework (LeTCC) and the state-of-the-art BACC [29]. LeTCC framework not only achieves a lower estimation error but also has a faster convergence rate.", "description": "This figure shows the comparison of the proposed LeTCC framework and the state-of-the-art BACC framework in terms of the expected error with respect to the number of workers. It demonstrates that LeTCC outperforms BACC in terms of both accuracy and convergence speed.", "section": "Contributions"}, {"figure_path": "9XDYEEBRV6/figures/figures_34_1.jpg", "caption": "Figure 1(a): Coded Computing: Each worker node processes a combination of data (coded data). The decoder recovers the final results, even in the presence of missing outputs from some worker nodes.", "description": "This figure illustrates the basic concept of coded computing.  Data is encoded at a master node and distributed to multiple worker nodes for parallel processing. Each worker receives a combination of the original data, rather than the raw data itself. The final results are then reconstructed by a decoder at the master node, even if some worker nodes are slow or fail to respond (stragglers). This approach increases resilience to stragglers compared to traditional distributed computing methods.", "section": "Introduction"}, {"figure_path": "9XDYEEBRV6/figures/figures_34_2.jpg", "caption": "Figure 1(a): Coded Computing: Each worker node processes a combination of data (coded data). The decoder recovers the final results, even in the presence of missing outputs from some worker nodes.", "description": "This figure illustrates the basic concept of coded computing.  The master node encodes the data and distributes it to multiple worker nodes. Each worker node processes its assigned encoded data and returns the results to the master node. The decoder then uses the results from all the worker nodes (or a subset of them, as some may be slow or faulty) to reconstruct the final output. The redundancy in the encoded data allows the decoder to compensate for missing or incorrect results.  This is a key part of the paper's methodology, allowing resilient computing.", "section": "1 Introduction"}, {"figure_path": "9XDYEEBRV6/figures/figures_34_3.jpg", "caption": "Figure 1(a): Coded Computing: Each worker node processes a combination of data (coded data). The decoder recovers the final results, even in the presence of missing outputs from some worker nodes.", "description": "This figure illustrates the basic concept of coded computing.  Data is encoded by a master node and distributed to worker nodes for processing. Each worker node receives a coded combination of data, not the raw data itself. Worker nodes perform their assigned computation and return their results to the master node. The master node employs a decoder to reconstruct the final result from the collective outputs of the worker nodes, even if some workers (stragglers) fail to respond or produce correct results. This approach leverages the redundancy in the coded data to enhance reliability and resilience against stragglers.", "section": "1 Introduction"}]