[{"figure_path": "kngLs5H6l1/figures/figures_1_1.jpg", "caption": "Figure 1: The \"seesaw\" characteristic between the rendering quality and the normal accuracy of 3DGS-based methods. Our Normal-GS is able to efficiently achieve accurate normal estimation while preserving competitive rendering quality. Our method successfully captures the normals of the cover of the semi-transparent box behind the table.", "description": "This figure compares the rendering quality and normal accuracy of different 3D Gaussian splatting methods.  It shows that existing methods often struggle to balance high rendering quality with accurate normal estimation. The authors' proposed method, Normal-GS, is shown to achieve both high rendering quality and accurate normal estimation, even capturing normals on difficult surfaces like the semi-transparent box.", "section": "1 Introduction"}, {"figure_path": "kngLs5H6l1/figures/figures_4_1.jpg", "caption": "Figure 2: Our normal-involved GS, Normal-GS, reparameterizes the original colors into the diffuse and specular components, c = LD + Ls (bottom). It models the diffuse component as the dot product between the normal vector n and the Integrated Directional Illumination Vector (IDIV) l, and utilizes the Integrated Directional Encoding (IDE) [22] to capture view-dependent specular effects. Inherent parameters are encoded implicitly by a locally shared anchor Gaussian (left) and decoded using MLPs (top). Our method accounts for the contributions of normals to colors, effectively enhancing geometry accuracy and rendering quality.", "description": "This figure illustrates the architecture of Normal-GS, a novel method that integrates normal vectors into the 3D Gaussian splatting rendering pipeline.  It shows how the method re-parameterizes surface colors using the physically-based rendering equation,  modeling the interaction between normals and incident lighting.  The core idea is to represent diffuse color as the dot product of the normal vector and an Integrated Directional Illumination Vector (IDIV), while specular effects are modeled using Integrated Directional Encoding (IDE).  Locally shared IDIVs are implicitly encoded using an anchor-based 3DGS to reduce memory usage and simplify optimization. MLPs decode these IDIVs, and the overall system enhances both rendering quality and normal estimation accuracy.", "section": "3 Method"}, {"figure_path": "kngLs5H6l1/figures/figures_6_1.jpg", "caption": "Figure 3: Qualitative comparisons of the rendering quality and normal estimation. Our method produced clean normals estimation and preserved good rendering quality.", "description": "This figure shows a qualitative comparison of rendering quality and normal estimation results between the proposed Normal-GS method and several state-of-the-art 3DGS-based methods (3DGS, ScaffoldGS, SpecGaussian, and GShader).  For each scene, the figure shows the rendered images from each method and the ground truth. The results demonstrate that Normal-GS effectively preserves good rendering quality while simultaneously achieving clean and accurate normal estimation.", "section": "4 Experiments"}, {"figure_path": "kngLs5H6l1/figures/figures_8_1.jpg", "caption": "Figure 2: Our normal-involved GS, Normal-GS, reparameterizes the original colors into the diffuse and specular components, c = LD + Ls (bottom). It models the diffuse component as the dot product between the normal vector n and the Integrated Directional Illumination Vector (IDIV) l, and utilizes the Integrated Directional Encoding (IDE) [22] to capture view-dependent specular effects. Inherent parameters are encoded implicitly by a locally shared anchor Gaussian (left) and decoded using MLPs (top). Our method accounts for the contributions of normals to colors, effectively enhancing geometry accuracy and rendering quality.", "description": "This figure illustrates the architecture of Normal-GS, a novel method that integrates normal vectors into the 3D Gaussian splatting rendering pipeline. Normal-GS re-parameterizes surface colors as a product of normals and an Integrated Directional Illumination Vector (IDIV).  It uses an anchor-based approach to implicitly encode locally-shared IDIVs, improving memory efficiency and simplifying optimization. The figure shows how the diffuse component of the color is modeled as the dot product of the normal and IDIV, and how the specular component is modeled using Integrated Directional Encoding (IDE). The method leverages MLPs to decode inherent parameters from locally shared anchor Gaussians. This approach improves both rendering quality and the accuracy of surface normal estimation.", "section": "3 Method"}, {"figure_path": "kngLs5H6l1/figures/figures_8_2.jpg", "caption": "Figure 2: Our normal-involved GS, Normal-GS, reparameterizes the original colors into the diffuse and specular components, c = LD + Ls (bottom). It models the diffuse component as the dot product between the normal vector n and the Integrated Directional Illumination Vector (IDIV) I, and utilizes the Integrated Directional Encoding (IDE) [22] to capture view-dependent specular effects. Inherent parameters are encoded implicitly by a locally shared anchor Gaussian (left) and decoded using MLPs (top). Our method accounts for the contributions of normals to colors, effectively enhancing geometry accuracy and rendering quality.", "description": "This figure illustrates the architecture of Normal-GS, a novel method that integrates normal vectors into the 3D Gaussian Splatting (3DGS) rendering pipeline.  It shows how the method re-parameterizes surface colors using a physically-based rendering approach, modeling the interaction between normals and incident lighting. The core components are the use of Integrated Directional Illumination Vectors (IDIVs) for diffuse color modeling, Integrated Directional Encoding (IDE) for specular effects, and an anchor-based approach to implicitly encode locally-shared IDIVs. This approach improves both rendering quality and the accuracy of surface normal estimation.", "section": "3 Method"}, {"figure_path": "kngLs5H6l1/figures/figures_15_1.jpg", "caption": "Figure 3: Qualitative comparisons of the rendering quality and normal estimation. Our method produced clean normals estimation and preserved good rendering quality.", "description": "This figure presents a qualitative comparison of rendering quality and normal estimation between the proposed Normal-GS method and several state-of-the-art 3DGS-based methods across multiple scenes.  The comparison shows that Normal-GS produces cleaner and more accurate normal estimations while maintaining high rendering quality, outperforming other methods that may sacrifice either rendering quality or normal accuracy.", "section": "4 Experiments"}, {"figure_path": "kngLs5H6l1/figures/figures_16_1.jpg", "caption": "Figure 2: Our normal-involved GS, Normal-GS, reparameterizes the original colors into the diffuse and specular components, c = LD + Ls (bottom). It models the diffuse component as the dot product between the normal vector n and the Integrated Directional Illumination Vector (IDIV) l, and utilizes the Integrated Directional Encoding (IDE) [22] to capture view-dependent specular effects. Inherent parameters are encoded implicitly by a locally shared anchor Gaussian (left) and decoded using MLPs (top). Our method accounts for the contributions of normals to colors, effectively enhancing geometry accuracy and rendering quality.", "description": "This figure illustrates the architecture of Normal-GS, a novel method that integrates normal vectors into the 3D Gaussian Splatting (3DGS) rendering pipeline. Normal-GS re-parameterizes surface colors as the product of normals and an Integrated Directional Illumination Vector (IDIV).  It uses an anchor-based approach to implicitly encode locally-shared IDIVs, saving memory and simplifying optimization.  The diffuse component is modeled as the dot product of the normal vector and the IDIV, while the specular component leverages Integrated Directional Encoding (IDE). MLPs are used to decode the implicitly encoded parameters from the anchor Gaussians.  The overall effect is to improve both rendering quality and the accuracy of surface normal estimation.", "section": "3 Method"}]