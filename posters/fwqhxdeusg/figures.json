[{"figure_path": "fWQhXdeuSG/figures/figures_4_1.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the architecture of the Pretrained Optimization Model (POM), its training process, and its testing process.  The architecture diagram (a) shows the flow of data through the LMM (Learned Mutation Module), LCM (Learned Crossover Module), and SM (Selection Module) components of the POM. The training process (b) highlights how the POM is trained using a set of training functions, a differentiable loss function, and gradient-based optimization. This training process fine-tunes the POM parameters. The testing process (c) demonstrates how the trained POM can be directly applied to an unseen target task to find an optimal solution without requiring gradient information.  The training process utilizes the gradient to update the parameters until convergence, whereas the testing process involves iterative steps to achieve the optimal solution.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_6_1.jpg", "caption": "Figure 2: The critical difference diagram illustrates the performance ranking of seven algorithms across 24 BBOB problems with dimensions d = 30, 100, employing Wilcoxon-Holm analysis [53] at a significance level of p = 0.05. Algorithm positions are indicative of their mean scores across multiple datasets, with higher scores signifying a method consistently outperforming competitors. Thick horizontal lines denote scenarios where there is no statistically significant difference in algorithm performance.", "description": "This figure shows the results of a critical difference diagram comparing seven algorithms (POM, LSHADE, CMA-ES, LGA, DE, ES, LES) on 24 BBOB problems with dimensions 30 and 100.  The Wilcoxon-Holm statistical test (p=0.05) was used to determine statistically significant differences in performance.  Higher scores indicate better overall performance across all tested problems.", "section": "4.2 Results"}, {"figure_path": "fWQhXdeuSG/figures/figures_6_2.jpg", "caption": "Figure 3: Experimental results are presented for the Bipedal Walker (a) and Enduro (b), with the vertical axis denoted as R, representing the strategy score. The score corresponds to the total reward acquired by the agent during interactions with the environment.", "description": "This figure shows the experimental results for two robot control tasks: Bipedal Walker and Enduro.  The y-axis represents the total reward (R) accumulated by the robot during its interaction with the environment.  The x-axis represents the generation number.  The figure compares the performance of POM against several other algorithms (CMA-ES, DE, ES, LES, LGA, and L-SHADE), demonstrating POM's superior performance in both tasks, particularly in achieving stable and quick convergence.", "section": "4 Experiments"}, {"figure_path": "fWQhXdeuSG/figures/figures_7_1.jpg", "caption": "Figure 4: (a) Results of ablation study. The metric used to evaluate performance is the optimal value of the function found, with smaller values being better. Here, d = 30. (b) Results of POMs with different sizes on BBOB tests (d = 100).", "description": "This figure presents the ablation study results for the proposed Pretrained Optimization Model (POM) and shows the impact of different components on the performance. (a) shows the ablation study results using four different configurations: UNTRAINED (untrained model), NO LMM (without the LMM module), NO LCM (without the LCM module), and NO MASK (without the mask operation). The metric used is the optimal function value, with smaller values indicating better performance. (b) shows the results of POMs with different population sizes tested on the BBOB benchmark with dimensions d = 100.  The study shows that all components of POM contribute significantly to the model's performance.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_7_2.jpg", "caption": "Figure 4: (a) Results of ablation study. The metric used to evaluate performance is the optimal value of the function found, with smaller values being better. Here, d = 30. (b) Results of POMs with different sizes on BBOB tests (d = 100).", "description": "This figure presents the ablation study and the impact of different sizes of POM on BBOB test performance.  (a) shows the performance of POM compared to versions missing key components (LMM, LCM, MASK) and an untrained model, measured by the optimal function value found. Smaller values indicate better performance. The test was conducted with dimension d=30.  (b) illustrates the performance of POM with various sizes (VS, S, M, L, VL, XL) on BBOB tests with dimension d=100.", "section": "4.3 Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_7_3.jpg", "caption": "Figure 5: The impact of training dataset size on the performance of POM. d = 100. 1 means that the training set only contains TF1, and 2 means that the training set only contains TF1 and TF2, and so on.", "description": "The figure shows the effect of increasing the size of the training dataset on the performance of the Pretrained Optimization Model (POM).  The x-axis represents the number of training functions used (from 1 to 5), and the y-axis shows the resulting performance. Each bar represents the average performance across multiple runs.  The results show that increasing the training dataset size leads to improved performance, demonstrating that a more diverse training set helps POM generalize better to unseen tasks.", "section": "Experiments"}, {"figure_path": "fWQhXdeuSG/figures/figures_7_4.jpg", "caption": "Figure 5: The impact of training dataset size on the performance of POM. d = 100. 1 means that the training set only contains TF1, and 2 means that the training set only contains TF1 and TF2, and so on.", "description": "This figure demonstrates how the performance of the POM model is affected by the size of the training dataset.  The x-axis represents the number of training functions (TF1-TF8), with 1 representing only TF1, 2 representing TF1 and TF2, and so on. The y-axis shows the performance metric, likely the average fitness achieved on a set of benchmark optimization problems.  The results indicate that increasing the dataset size improves performance up to a point, after which adding more functions does not lead to substantial further improvements.  This shows a balance between training data diversity and model overfitting, with larger dataset size improving model generalizability.", "section": "Experiments"}, {"figure_path": "fWQhXdeuSG/figures/figures_7_5.jpg", "caption": "Figure 6: Experimental results of fine-tuning tests. RFI = performance improvement/performance of base POM", "description": "This figure shows the experimental results of fine-tuning tests on three composite functions (TF6-TF8) by using different numbers of samples.  The RFI (Relative Performance Improvement) metric is used to evaluate the performance of the fine-tuned POM compared to the base POM. The x-axis represents the number of samples used for fine-tuning, while the y-axis shows the RFI for each function. The graph shows that as the number of samples used for fine-tuning increases, the performance of POM improves.", "section": "4.3 Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_7_6.jpg", "caption": "Figure 7: (a) Time cost of POM. (b) Testing cost of baselines and POM.", "description": "This figure shows the training and testing time costs of different optimization algorithms. The left panel (a) shows the training time cost of POM with different architecture settings (VS, S, M, L, VL, XL), demonstrating the training time increases with more complex architectures. The right panel (b) compares the testing time cost of POM against other baseline algorithms (LES, LGA, LSHADE, CMA-ES, DE, ES), highlighting POM's superior efficiency in testing time.", "section": "4 Experiments"}, {"figure_path": "fWQhXdeuSG/figures/figures_8_1.jpg", "caption": "Figure 8: Displayed are visualized outcomes of LMM St in BBOB with d = 100 using n = 10 for clarity. Blank squares in the matrix denote masked portions from Eq. (8). Steps 1, 50, and 100 correspond to the 1st, 50th, and 100th generations in population evolution. The horizontal and vertical axes denote individual rankings, with 1 as the best and 10 as the worst in the population. Each row illustrates the weight assigned to other individuals when executing mutation operations for the respective individual.", "description": "This figure visualizes the LMM (Learned Mutation Module) strategy's evolution across generations (steps 1, 50, and 100) for four different functions (F1-F4) from the BBOB benchmark. The heatmaps show the weights assigned by each individual in the population to others during the mutation process.  Darker colors represent stronger weights, and blank cells represent masked elements.", "section": "4.4 Visualization Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_8_2.jpg", "caption": "Figure 9: Visual analysis results of LCM on BBOB F1, F11, and F24 with d = 100, employing n = 100, are presented. \"Rank\" signifies an individual\u2019s position, with rank 5 representing the fifth-ranked individual in the population. Subgraphs depict the evolution of the probability that an individual will undergo crossover across three tasks as the population progresses. For example, (a) illustrates the crossover probability change for the top-ranked individual on F1, F11, and F24 with the number of generations.", "description": "This figure presents a visual analysis of the LCM (Learned Crossover Module) performance on three different BBOB (Black-box Optimization Benchmark) functions (F1, F11, and F24) with dimension 100 and population size 100. It focuses on the crossover probability evolution for individuals ranked 5th in the population across generations.  The subplots (a), (b), and (c) show the evolution of crossover probabilities for the top-ranked, 51st-ranked, and 100th-ranked individuals, respectively, across the three BBOB functions.  This visualization helps understand how LCM adapts its crossover strategy across various tasks and individual rankings over generations.", "section": "4.4 Visualization Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_20_1.jpg", "caption": "Figure 2: The critical difference diagram illustrates the performance ranking of seven algorithms across 24 BBOB problems with dimensions d = 30, 100, employing Wilcoxon-Holm analysis [53] at a significance level of p = 0.05. Algorithm positions are indicative of their mean scores across multiple datasets, with higher scores signifying a method consistently outperforming competitors. Thick horizontal lines denote scenarios where there is no statistically significant difference in algorithm performance.", "description": "This figure shows the results of a critical difference diagram comparing seven different black-box optimization algorithms across 24 benchmark problems in two different dimensions (30 and 100). The Wilcoxon-Holm statistical test was used to determine if there are statistically significant differences in the performance of the algorithms.  Higher scores indicate that an algorithm consistently outperforms others. Horizontal lines connecting algorithms show that there is no statistically significant difference in performance between them.", "section": "4 Experiments"}, {"figure_path": "fWQhXdeuSG/figures/figures_21_1.jpg", "caption": "Figure 11: Critical difference diagram of 7 algorithms on 24 BBOB problems with d = 500.", "description": "This figure presents a critical difference diagram showing the performance comparison of seven different black-box optimization algorithms across 24 benchmark functions from the BBOB suite.  The algorithms are compared in terms of their average performance across the 24 functions, with the x-axis representing the rank of the algorithm based on average performance. Algorithms grouped together by a horizontal line are not statistically significantly different in terms of performance. This type of diagram helps to visualize the relative ranking of different optimization algorithms.  The dimension of the problem (number of variables to optimize) is 500.", "section": "4.2 Results"}, {"figure_path": "fWQhXdeuSG/figures/figures_22_1.jpg", "caption": "Figure 12: The log convergence curves of POM and other baselines. It shows the convergence curve of these algorithms on functions in BBOB with d = 30.", "description": "This figure compares the performance of the Pretrained Optimization Model (POM) against several baseline algorithms on 24 benchmark functions from the BBOB suite.  The x-axis represents the number of function evaluations, and the y-axis shows the log of the error (distance from the optimal solution). Each line represents a different algorithm, illustrating their convergence speed and effectiveness in finding optimal solutions. The shaded area shows the standard deviation of the POM's performance across multiple runs.", "section": "4.2 Results"}, {"figure_path": "fWQhXdeuSG/figures/figures_23_1.jpg", "caption": "Figure 12: The log convergence curves of POM and other baselines. It shows the convergence curve of these algorithms on functions in BBOB with d = 30.", "description": "This figure presents a comparison of the convergence speed of different optimization algorithms on 24 benchmark functions from the BBOB suite.  Each subplot shows the log convergence curve (log of the function's value over the number of iterations) for a specific function. The algorithms being compared are POM (the proposed algorithm), CMA-ES, DE, ES, LES, LGA, and L-SHADE.  The figure visually demonstrates POM's superior convergence performance on many of the benchmark functions compared to the other state-of-the-art methods.", "section": "4.2 Results"}, {"figure_path": "fWQhXdeuSG/figures/figures_24_1.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the architecture of the Pretrained Optimization Model (POM) and its training and testing processes.  The architecture (a) shows three main components: LMM (Learning Mutation Module), LCM (Learning Crossover Module), and SM (Selection Module).  The training process (b) shows how POM is trained using gradient-based methods on a set of differentiable training functions. The testing process (c) demonstrates how POM generalizes to unseen, potentially non-differentiable target tasks using only function evaluations, without any further training.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_26_1.jpg", "caption": "Figure 8: Displayed are visualized outcomes of LMM St in BBOB with d = 100 using n = 10 for clarity. Blank squares in the matrix denote masked portions from Eq. (8). Steps 1, 50, and 100 correspond to the 1st, 50th, and 100th generations in population evolution. The horizontal and vertical axes denote individual rankings, with 1 as the best and 10 as the worst in the population. Each row illustrates the weight assigned to other individuals when executing mutation operations for the respective individual.", "description": "This figure visualizes the outcomes of the LMM (Learned Mutation Module) at different steps (1, 50, and 100) of the optimization process.  It shows the weight assigned to other individuals when performing mutation operations for each individual, using a heatmap.  Blank squares represent masked parts. The visualization helps understand how LMM dynamically generates mutation strategies across generations.", "section": "4.4 Visualization Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_27_1.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the architecture of the Pretrained Optimization Model (POM), including its three main components: LMM, LCM, and SM.  It also shows the training and testing processes for POM.  The training process uses a differentiable training function to optimize the parameters of POM.  The testing process applies the trained model to a target task, which may or may not be differentiable, to find the optimal solution without further parameter tuning.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_28_1.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the architecture of the Pretrained Optimization Model (POM), a novel population-based optimizer for zero-shot black-box optimization.  It shows the process of training POM on a differentiable training function set and then applying it to a new, potentially non-differentiable, task.  The training phase uses an iterative process over T steps, leveraging information from the population of individuals (X) to learn a robust optimization strategy (\u03b8). In the testing phase, the trained model is directly applied to solve a new target task, f, without gradient information. The figure highlights the three major components of POM: LMM, LCM, and SM, illustrating the model's ability to generalize.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_29_1.jpg", "caption": "Figure 18: Visualized results of mutation strategy St on BBOB (F13-F16) with d = 100.", "description": "This figure visualizes the results of the mutation strategy (St) of the LMM module in POM on four different BBOB functions (F13 to F16). Each subfigure shows a heatmap representing the weight assigned to other individuals when performing mutation operations for the corresponding individual. The heatmaps are shown for three different generations (steps 1, 50, and 100), providing insights into how the strategy evolves over time.  Darker colors indicate stronger weights. The rows represent the individual performing the mutation, and the columns represent the individuals influencing that mutation.", "section": "4.4 Visualization Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_30_1.jpg", "caption": "Figure 8: Displayed are visualized outcomes of LMM St in BBOB with d = 100 using n = 10 for clarity. Blank squares in the matrix denote masked portions from Eq. (8). Steps 1, 50, and 100 correspond to the 1st, 50th, and 100th generations in population evolution. The horizontal and vertical axes denote individual rankings, with 1 as the best and 10 as the worst in the population. Each row illustrates the weight assigned to other individuals when executing mutation operations for the respective individual.", "description": "This figure visualizes the output of the LMM module (LMM) in the POM algorithm. The LMM module generates candidate solutions for each individual in a population.  The visualization shows how the weights assigned to other individuals change across different generations (steps 1, 50, 100) for each individual in the population. Blank squares represent masked portions of the matrix, as per Equation (8).", "section": "4.4 Visualization Analysis"}, {"figure_path": "fWQhXdeuSG/figures/figures_31_1.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the architecture of the Pretrained Optimization Model (POM), its training process, and its testing process. The training process is gradient-based, while the testing process can be performed without gradient information. The overall architecture consists of three modules: LMM (Learned Mutation Module), LCM (Learned Crossover Module), and SM (Selection Module).", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_32_1.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the architecture of the Pretrained Optimization Model (POM), a novel population-based optimizer designed for zero-shot black-box optimization.  It details three main components: LMM (Learned Mutation Module), LCM (Learned Crossover Module), and SM (Selection Module).  The training process involves iteratively generating and updating the population based on a training function that must be differentiable.  In contrast, the testing phase applies the trained model directly to a new objective task without requiring gradient information, enabling zero-shot optimization.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_33_1.jpg", "caption": "Figure 12: The log convergence curves of POM and other baselines. It shows the convergence curve of these algorithms on functions in BBOB with d = 30.", "description": "This figure compares the performance of the Pretrained Optimization Model (POM) against several other optimization algorithms on a set of 24 benchmark functions from the BBOB suite.  The x-axis represents the number of generations (iterations) of the algorithm, and the y-axis represents the negative log of the error, showing the convergence speed and accuracy of each algorithm. Lower values indicate faster convergence and better performance. The figure visualizes the convergence speed and shows how POM outperforms state-of-the-art methods, especially for high-dimensional tasks. The figure is broken into subfigures, each showing the results for a subset of the benchmark functions.", "section": "4.2 Results"}, {"figure_path": "fWQhXdeuSG/figures/figures_33_2.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure illustrates the overall architecture of the Pretrained Optimization Model (POM), including its three main components: LMM, LCM, and SM.  It also shows the training and testing processes. The training process involves iteratively updating the POM parameters using a gradient-based optimizer on a set of training functions. The testing process involves directly applying the trained POM to a target task without fine-tuning or requiring gradient information.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_34_1.jpg", "caption": "Figure 12: The log convergence curves of POM and other baselines. It shows the convergence curve of these algorithms on functions in BBOB with d = 30.", "description": "This figure compares the performance of POM against other state-of-the-art black-box optimization algorithms across 24 different functions within the BBOB benchmark. The dimension of the optimization problems (d) is set to 30, and the results are presented as log convergence curves. Each curve depicts the performance of a specific algorithm over the course of 100 generations. This visualization allows for a direct comparison of convergence rates and effectiveness among the different methods.", "section": "4.2 Results"}, {"figure_path": "fWQhXdeuSG/figures/figures_34_2.jpg", "caption": "Figure 1: In the figure, X\u00ba is the initial random population. (a) The overall architecture of the POM. (b) POM training process. Here T is the size of the inner loop iteration step during training, and the training function should be differentiable. (c) POM testing process. Here, T is the number of iterations of the testing process and f is the target task. f does not have to be differentiable. Here we directly apply the trained POM to solve f without requiring gradient information.", "description": "This figure shows the architecture and the training and testing processes of the Pretrained Optimization Model (POM).  Panel (a) details the components of POM, including the LMM, LCM, and SM modules, and how they process the initial random population to generate a final optimized population. Panel (b) illustrates the training loop, where POM is trained on a set of differentiable training functions to learn effective optimization strategies. The process involves iteratively updating the POM parameters based on the loss function until convergence. Panel (c) shows the testing phase, where the trained POM is directly applied to a new, potentially non-differentiable, target task to find the optimal solution without any further tuning.", "section": "3 Pretrained Optimization Model"}, {"figure_path": "fWQhXdeuSG/figures/figures_35_1.jpg", "caption": "Figure 12: The log convergence curves of POM and other baselines. It shows the convergence curve of these algorithms on functions in BBOB with d = 30.", "description": "This figure compares the convergence performance of POM against other baseline algorithms (CMA-ES, DE, ES, LES, LGA, LSHADE) across 24 functions from the BBOB benchmark.  The x-axis represents the number of generations, and the y-axis represents the log of the function values.  The plot shows how quickly each algorithm approaches the optimal solution (zero on the y-axis).  The different lines represent the different algorithms, with POM generally converging faster than the baselines and exhibiting superior performance in high-dimensional tasks.", "section": "4.2 Results"}]