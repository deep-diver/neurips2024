[{"figure_path": "4AB54h21qG/figures/figures_2_1.jpg", "caption": "Figure 1: Aligned apo (ligand-free) and holo (ligand-bound) examples of (a) Human Glutathione S-Transferase protein (PDB ID: 10GS) and (b) Human Menkes protein (PDB ID: 2KMX) [3]. Apo structures are colored in \"magenta\" and holo-structures in \u201ccyan\u201d with the bounded ligand in \"orange\". (c) Illustration of the protein structure and ligand molecule parameterization.", "description": "This figure shows two examples of aligned apo (ligand-free) and holo (ligand-bound) protein structures.  The first example is Human Glutathione S-Transferase protein (PDB ID: 10GS), and the second example is Human Menkes protein (PDB ID: 2KMX).  The apo structures are shown in magenta, the holo structures in cyan, and the bound ligands are orange. A third subfigure illustrates how the protein structure and ligand molecule are parameterized for the model.", "section": "2 Flexible Protein Modeling"}, {"figure_path": "4AB54h21qG/figures/figures_3_1.jpg", "caption": "Figure 2: Overview of FlexSBDD. The flow matching-based generative process starts from an apo protein structure and the initialized ligand molecule. At each time step, FlexSBDD updates Ct to Ct+\u25b3t and finally obtains the holo protein-ligand structure at t = 1. In the illustration, the gray dots indicate protein residues and the other dots indicate ligand atoms with different element types.", "description": "This figure illustrates the overall process of FlexSBDD.  It starts with an apo protein structure (no ligand bound) and an initialized ligand molecule.  FlexSBDD iteratively updates both the protein structure and ligand at each time step, using a flow-matching based approach.  The process continues until time=1, at which point the model outputs an updated holo protein-ligand complex (ligand bound). The figure visually depicts this process by showing the protein and ligand structures at time=0, time=t (during the iteration), and time=1, emphasizing the structural changes.", "section": "4 FlexSBDD"}, {"figure_path": "4AB54h21qG/figures/figures_6_1.jpg", "caption": "Figure 3: Computational Efficiency and Interaction Analysis on CrossDocked. (a) The average time required by different methods to generate 100 ligand molecules for a protein target. (b) The number of steric clashes. (c) The number of hydrogen bond donors in the ligand molecules. (d) The number of hydrogen bond acceptors in the ligand molecules. (e) The number of hydrophobic interactions.", "description": "This figure compares several metrics across different methods for structure-based drug design (SBDD) using the CrossDocked dataset.  Panel (a) shows the average runtime for generating 100 ligand molecules. Panels (b) through (e) illustrate the number of steric clashes, hydrogen bond donors, hydrogen bond acceptors, and hydrophobic interactions, respectively, providing insights into the quality and druggability of generated molecules.", "section": "5 Experiments"}, {"figure_path": "4AB54h21qG/figures/figures_7_1.jpg", "caption": "Figure 4: Examples of the generated ligand molecules for target proteins (PDB ID: 4yhj, 2v3r, 1fmc, 1a2g). We colored the original holo-structure from the dataset green and the updated protein structure with FlexSBDD cyan (structures are aligned). The Carbon atoms in Reference, DecompDiff, and FlexSBDD ligands are colored green, yellow, and orange. Vina Score, QED, and SA are reported.", "description": "This figure shows four examples of generated ligand molecules for different target proteins. Each example includes the original holo protein structure (green), a protein structure generated using DecompDiff (yellow), and a protein structure generated using FlexSBDD (cyan). The carbon atoms of the ligands in all three structures are colored according to which method generated them (green for reference, yellow for DecompDiff, and orange for FlexSBDD).  The figure also provides the Vina Score, QED, and SA values for each ligand, allowing for a comparison of the results from each method.", "section": "5.2 Main Results"}, {"figure_path": "4AB54h21qG/figures/figures_8_1.jpg", "caption": "Figure 4: Examples of the generated ligand molecules for target proteins (PDB ID: 4yhj, 2v3r, 1fmc, 1a2g). We colored the original holo-structure from the dataset green and the updated protein structure with FlexSBDD cyan (structures are aligned). The Carbon atoms in Reference, DecompDiff, and FlexSBDD ligands are colored green, yellow, and orange. Vina Score, QED, and SA are reported.", "description": "This figure showcases examples of ligand molecules generated by FlexSBDD for four different target proteins.  It compares the generated molecules (FlexSBDD) with the reference molecules from the dataset and those generated by DecompDiff, a competing method. The visualization highlights the protein structures (original holo structures in green and FlexSBDD-updated structures in cyan), and ligand molecules (reference in green, DecompDiff in yellow, and FlexSBDD in orange).  Key metrics like Vina Score, QED (Quantitative Estimate of Drug-likeness), and SA (synthetic accessibility) are provided for each generated molecule, illustrating FlexSBDD's ability to generate high-affinity molecules with improved properties.", "section": "5.2 Main Results"}, {"figure_path": "4AB54h21qG/figures/figures_16_1.jpg", "caption": "Figure 6: Hyperparameters Analysis with respect to (a) the hidden dimension size (the node scaler features) and (b) the total iteration steps of flow matching. When varying the dimension size of the node scaler features, the other features are scaled proportionally.", "description": "This figure shows the effect of two hyperparameters on the performance of FlexSBDD: (a) Hidden dimension size:  The graph shows that increasing the hidden dimension size leads to better Vina Dock scores, although improvements diminish after 256. (b) Iteration steps: The graph shows that increasing the number of iterations in flow matching also leads to better Vina Dock scores, with diminishing returns after 20 steps.  In both cases, optimal values are determined through experimentation to find a balance between model performance and computational cost.", "section": "5.6 Hyperparameter Analysis"}]