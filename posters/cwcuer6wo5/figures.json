[{"figure_path": "CwCUEr6wO5/figures/figures_1_1.jpg", "caption": "Figure 1: A toy example of existing KG-augmented LLM paradigm.", "description": "This figure illustrates a toy example of how a current KG-augmented LLM paradigm works.  It shows a step-by-step process where an LLM interacts with a knowledge graph (KG) to answer the question, \"Which of Taylor Swift's songs has won American Music Awards (AMA)?\".  The example highlights the limitations of predefining the breadth of exploration in the KG and the unidirectional nature of the exploration, leading to the selection of incorrect reasoning paths and an ultimately wrong answer. This example motivates the need for a self-correcting adaptive planning approach like the one proposed in the paper.", "section": "1 Introduction"}, {"figure_path": "CwCUEr6wO5/figures/figures_3_1.jpg", "caption": "Figure 2: The framework overview of PoG, which includes four key components: Task Decomposition, Path Exploration, Memory Updating, and Evaluation.", "description": "This figure illustrates the overall architecture of the Plan-on-Graph (PoG) model.  It shows the four main stages of the process: 1) Task Decomposition, where the input question is broken down into smaller, more manageable sub-objectives; 2) Path Exploration, which uses the LLM to adaptively explore relevant paths within the knowledge graph; 3) Memory Updating, where the explored subgraph, reasoning paths, and sub-objective status are recorded and updated; and 4) Evaluation, where the LLM determines if sufficient information has been gathered, leading to either an answer or a reflection and correction step to refine the search.  The diagram visually represents the iterative and self-correcting nature of the PoG model's approach to KGQA.", "section": "3 Methodology"}, {"figure_path": "CwCUEr6wO5/figures/figures_18_1.jpg", "caption": "Figure 4: The impact of exploration depth on the performance of PoG.", "description": "This figure shows the impact of varying the depth of exploration on the accuracy of the Plan-on-Graph (PoG) model.  The x-axis represents the depth of exploration (number of reasoning steps), and the y-axis represents the accuracy of the model on the CWQ dataset. The graph shows that accuracy generally increases with depth up to a point, after which further increases in depth yield minimal gains. This indicates an optimal depth beyond which additional steps do not significantly improve performance and may even be detrimental due to increased computational cost and the potential for error accumulation.", "section": "F Depth Sensitivity"}, {"figure_path": "CwCUEr6wO5/figures/figures_18_2.jpg", "caption": "Figure 5: The proportion of cases with reverse occurrences among all data.", "description": "This figure shows a donut chart illustrating the percentage of cases in the dataset where the reasoning process involves backtracking (self-correction) versus those that proceed without any reversals.  The majority of cases (76%) follow a direct path, while a smaller portion (24%) require self-correction.", "section": "4.3 Ablation Study"}, {"figure_path": "CwCUEr6wO5/figures/figures_18_3.jpg", "caption": "Figure 6: The proportion of correct answers obtained by PoG after self-correction.", "description": "This figure shows the results of the self-correction mechanism implemented in the PoG model on three different KGQA datasets: CWQ, WebQSP, and GrailQA.  The pie charts illustrate the percentage of questions answered correctly (in blue) versus incorrectly (in grey) after the self-correction process.  The results demonstrate the effectiveness of the self-correction mechanism, which improves the accuracy of the model on all three datasets, although the extent of improvement varies between them.", "section": "4.3 Ablation Study"}, {"figure_path": "CwCUEr6wO5/figures/figures_19_1.jpg", "caption": "Figure 2: The framework overview of PoG, which includes four key components: Task Decomposition, Path Exploration, Memory Updating, and Evaluation.", "description": "This figure presents a visual representation of the Plan-on-Graph (PoG) framework.  PoG is a novel self-correcting adaptive planning paradigm for KG-augmented LLMs. The framework is comprised of four main components: Task Decomposition, which breaks down complex questions into smaller, manageable sub-objectives; Path Exploration, which dynamically explores relevant reasoning paths in the knowledge graph; Memory Updating, which maintains and updates a subgraph of retrieved knowledge and tracks reasoning progress; and Evaluation, which assesses the sufficiency of retrieved information and triggers self-correction if necessary.  The figure uses a flowchart-style diagram to illustrate the interactions and flow between these components.", "section": "3 Methodology"}]