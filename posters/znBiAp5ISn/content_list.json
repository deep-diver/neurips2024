[{"type": "text", "text": "TAS-GNN: Topology-Aware Spiking Graph Neural Networks for Graph Classification ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Anonymous Author(s)   \nAffiliation   \nAddress   \nemail ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "1 The recent integration of spiking neurons into graph neural networks has been   \n2 gaining much attraction due to its superior energy efficiency. Especially because   \n3 the irregular connection among graph nodes fits the nature of the spiking neural   \n4 networks, spiking graph neural networks are considered strong alternatives to   \n5 vanilla graph neural networks. However, there is still a large performance gap for   \n6 graph tasks between the spiking neural networks and artificial neural networks. The   \n7 gaps are especially large when they are adapted to graph classification tasks, where   \n8 none of the nodes in the testset graphs are connected to the training set graphs. We   \n9 diagnose the problem as the existence of neurons under starvation, caused by the   \n10 irregular connections among the nodes and the neurons. To alleviate the problem,   \n11 we propose TAS-GNN. Based on a set of observations on spiking neurons on   \n12 graph classification tasks, we devise several techniques to utilize more neurons to   \n13 deliver meaningful information to the connected neurons. Experiments on diverse   \n14 datasets show up to $27.20\\%$ improvement, demonstrating the effectiveness of the   \n15 TAS-GNN. ", "page_idx": 0}, {"type": "text", "text": "16 1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "17 Graph neural networks (GNNs) are types of popular neural networks to learn the representations from   \n18 graphs, which comprise multiple nodes and edges between them. Because of their flexibility to model   \n19 any kind of connection existing in nature, it has various applications ranging from drug discovery [6,   \n20 47, 9], social influence prediction [39, 2], traffic forecasting [3, 7], and recommendation systems [38,   \n21 15, 61]. One known challenge of GNNs is their sparse memory and computational pattern. Because   \n22 many messages are passed between randomly connected nodes, there is a significant inefficiency in   \n23 processing them with conventional systems [53, 58, 57, 19].   \n24 To address the inefficiency, spiking neural networks (SNNs) are considered strong alternatives.   \n25 Inspired by the way biological behavior of brains, SNNs process information by communicating   \n26 binary spikes between the neurons. Because SNNs utilize intermittently occurring spikes, they have   \n27 superior energy efficiency, especially for the domain of GNNs [1].   \n28 Although the spiking graph neural network (SGNN) has been recently studied by many researchers [32,   \n29 64, 48], we find that its performance experiences a huge drop when adapted to graph classification,   \n30 compared to that of the conventional GNNs implemented with artificial neural networks (ANNs).   \n31 Upon closer analysis of the performance degradation, we identify spike frequency deviation of the   \n32 neurons within the model. In our investigation, many neurons experience starvation, which do not   \n33 emit any spike during the inference. This leads to severe information loss, due to being unable to   \n34 deliver signals to the subsequent neurons.   \n35 Such a problem was less exposed in previous spiking GNNs. This is because the testset nodes are   \n36 available during the training time (transductive learning [27]) or they are part of the training graph   \n37 (inductive learning [21]). In such settings, the model could be trained to mitigate the performance   \n38 drop. However, in graph classification tasks, the graphs are independent of each other, and the testset   \n39 comprises multiple unseen graphs, aggravating the problem.   \n40 Fortunately, our further analysis reveals that such phenomena are related to the topology of the input   \ngraphs. We discover that a strong pattern exists among the neurons in the GNN, where 1) neurons in a   \n42 node have similar behaviors, 2) each feature causes different behaviors, and 3) neurons in high-degree   \n43 nodes tend to emit more spikes.   \n44 Motivated by the observations, we propose to group the neurons according to the degree of the node   \n(topology-aware group-adaptive neurons). The neurons in each group adapt the threshold together to   \n46 steer the firing rate toward ideal rates. To further mitigate the initial value sensitivity problem, we   \n47 further propose to learn the initial values.   \n48 We evaluate TAS-GNN over multiple GNN models and datasets. Experiments reveal that the proposed   \n49 TAS-GNN achieves superior performance over the baselines, setting a new state-of-the-art method   \nfor graph classification. Our contributions are summarized as the following:   \n51 \u2022 We identify starvation problem of spiking neurons in GNNs for graph classification tasks.   \n52 \u2022 We observe the spike frequency patterns have a strong correlation with the graph topology.   \n53 \u2022 Based on the observations, we propose topology-aware group-adaptive neurons, which   \n54 dynamically adjusts the threshold together with the other neurons in the group to address   \n55 the spike frequency deviations.   \n56 \u2022 We propose techniques to reduce the initial value sensitivity caused by the topology-aware   \n57 group-adaptive neurons.   \n58 \u2022 We evaluate TAS-GNN on several public datasets and achieve superior performance over   \n59 existing techniques. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "60 2 Background ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "61 2.1 Spiking Neural Networks and Spike Training ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "62 Spiking neural networks (SNNs) are third-generation neural network designs that mimic the human   \n63 biological neural systems [35]. They use spike-based communication and adopt event-driven charac  \n64 teristics that promote better energy efficiency than current ANNs. Similar to human neural systems,   \n65 SNNs consist of spiking neurons that can model spatio-temporal dynamics of the actual biological   \n66 neurons. The early forms of such neuron models are Hodgkin-Huxley neurons [23], which accurately   \n67 model the biophysical characteristics of the membrane through differential equations. However, its   \n68 mathematical complexity prohibits its practical use and scalability. Instead, Leaky Integrated-and-Fire   \n69 (LIF) model finds a middle ground between mathematical simplificity and biological plausibility, and   \n70 is popularly adopted as the baseline architecture [23]. In the LIF neuron, the weighted sum of input   \n71 spikes is accumulated over time within the neuron as membrane potential, and the output spike is   \n72 generated only when the membrane potential exceeds a present threshold value. This is represented   \n73 as a differential function: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\tau\\frac{d V(t)}{d t}=-V(t)+I(t),\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "74 where $V(t)$ denotes the membrane potential value at time $t,\\tau$ a time constant of membrane, and $I(t)$   \n75 is the input from connected synapses at time $t$ . To make this time-varying function computationally   \n76 feasible, we discretize and rewrite it iteratively for sequential simulation as follows: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{V(t)=V(t-1)+\\beta(W X(t)-(V(t-1)-V_{r e s e t})),}\\\\ &{V(t)=V(t)(1-S(t))+V_{r e s e t}S(t),}\\\\ &{S(t)=\\left\\{1,\\,\\,\\,\\,\\,\\mathrm{if}\\,\\,V(t)\\geq V_{t h}\\right.}\\\\ &{\\left.\\!\\!\\begin{array}{r l}{0,\\,\\,\\,\\,\\,\\mathrm{otherwise},}\\end{array}\\right.}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "77 where $\\beta$ is simplified decay rate constant, $V_{r e s e t}$ is the reset value and $V_{t h}$ the threshold for the   \n78 membrane potential. Note that I(t) is simplified as weighted input WX(t) which can be obtained   \n79 through any operations with learnable weights including convolutional operation, self-attention, or a   \n80 simple MLP. We will denote this process of forwarding through LIF neuron as $S N N(\\cdot)$ in this paper.   \n81 Direct SNN Training. The initial adoption of SNNs was through ANN-SNN conversion, primarily   \n82 due to their remarkable potential for reducing energy consumption. Various studies have aimed to   \n83 address the accuracy degradation that occurs during the conversion from ANNS to SNNs [22, 41, 24,   \n84 42].   \n85 The spike generation by the step function in Equation (4) interfered with direct training without   \n86 modifying the functions. To bypass the step function, which is non-differentiable and thus unsuitable   \n87 for backpropagation, several approaches have been proposed [43, 5, 13, 14, 8, 51, 10]. Recent   \n88 research has demonstrated that directly training SNNs can yield competitive results by addressing   \n89 the challenges posed by non-differentiability. Our work focuses on directly training graph neural   \n90 networks (GNNs) with SNNs and exploring a different domain, such as ANN-SNN conversion   \n91 methods, which do not focus on using backpropagation concepts directly. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "92 2.2 Graph Neural Networks ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "93 Graph neural networks (GNNs) take graph-represented data as input, which consist of nodes and   \n94 their connected edges $\\mathcal{G}=(V,E)$ , with node features $\\mathbf{X}\\in\\mathbb{R}^{|V|\\bar{\\times}F}$ and optionally edge features   \n95 $\\mathbf{E}\\,\\in\\,\\mathbb{R}^{|E|\\,\\times\\,D}$ . The common GNN architectures follow a message passing paradigm [20], which   \n96 learns node or edge representations through aggregating information from its neighboring nodes   \n97 and updating the node features iteratively. Thus a single forward of message passing layer consists   \n98 of message passing, aggregation, and update: $\\begin{array}{r}{\\boldsymbol{h}_{i}^{(l+1)}\\overset{\\cdot}{=}\\phi(\\boldsymbol{h}_{i}^{(l)},\\bigoplus_{j\\in\\mathcal{N}(i)}\\bar{\\psi}(\\bar{h}_{i}^{(l)},h_{j}^{(\\bar{l})},\\bar{e}_{i j}))}\\end{array}$ , where   \n99 $l$ and $i$ are indices for layer and node, respectively, and $\\psi(\\cdot)$ denote message passing function.   \n100 After aggregation of neighboring features, $\\phi(\\cdot)$ is used for feature update. For graph convolutional   \n101 network [27], the overall process can be simplified as: ", "page_idx": 2}, {"type": "equation", "text": "$$\nX^{(l+1)}=A X^{(l)}W^{(l)},\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "102 where the feature matrix is a concatenation of node features $X^{(l)}=[h_{0}^{(l)}||h_{1}^{(l)}||...||h_{(|V|-1)}^{(l)}]^{T}$ which   \n103 is updated through iterations of aggregation $(A X)$ and combination $(X W)$ . After iterative updates of   \n104 $X$ through the layers, the learned node or edge embeddings are passed through additional classification   \n105 layer for node-level or edge-level predictions.   \n106 Graph Classification In this paper we put emphasis on graph-level classification tasks where each   \n107 graph is considered an individual input. Graph classification follows the same node-wise message   \n108 passing framework to obtain node embeddings, but appends a readout layer to turn them into a single   \n109 graph embedding: ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "equation", "text": "$$\nh_{G}=R(h_{i}^{(L)}|V_{i}\\in\\mathcal{G}),\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "110 where $R$ denotes readout function. Readout function reduces the node dimension to a single channel   \n111 regardless of the input size. This is due to the inductive nature of graph classification task where   \n112 the number of nodes is not known in advance. While all the other GNN layers focus on aggregating   \n113 only the local features, the readout layer considers the entire graph to generate global features,   \n114 and is unique to the graph classification tasks. The obtained graph embedding is passed through a   \n115 classification layer for graph predictions. Graph classification tasks usually hold more difficulty than   \n116 node-level classification due to its inductive nature, where inference is done on unseen graphs and   \n117 thus cannot utilize any graph-specific statistics from the train set. ", "page_idx": 2}, {"type": "text", "text": "118 2.3 Spiking Graph Neural Networks ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "119 In this paper, we adopt conventional SNN designs where LIF neurons are connected through learn  \n120 abled weights, and apply is to GNN framework [64]. As mentioned in Section 2.2, each GNN layer   \n121 outputs updated feature matrix $X^{(l+1)}\\in\\mathbb{R}^{|V|\\times F}$ . This is converted to spike representation through   \n122 SNN layer: ", "page_idx": 2}, {"type": "equation", "text": "$$\nX^{(l+1)}=S N N(A X^{(l)}W^{(l)}).\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "123 After passing the GNN layer, all of the updated $h_{i}^{(l)}$ directly pass through the SNN layer, consist the   \n124 feature matrix $X^{(l)}$ always contains spike information consistently. ", "page_idx": 2}, {"type": "image", "img_path": "znBiAp5ISn/tmp/0633a94b92c5a3efa12c3f3e6906b4ba04f3ccfa0e48f18eca75896ca4053207.jpg", "img_caption": ["(a) Histogram plotting distribution of total spikes counted over time for each node. X-axis denotes spike counts from each node, while y-axis denotes density of each bin. "], "img_footnote": [], "page_idx": 3}, {"type": "image", "img_path": "znBiAp5ISn/tmp/b719e9ba38575c6dc42554ed23acacd31bcd902b24aa37c24688dc69f41d440e.jpg", "img_caption": ["(b) Spike frequency visualization using each layer output. X-axis denotes feature dimension, while y-axis denotes nodes grouped and sorted by degree in descending order, top to bottom. Brighter spots denote higher frequency. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 1: Analysis on spike frequency variation of GCN using IMDB-BINARY [54] dataset. ", "page_idx": 3}, {"type": "text", "text": "125 3 Analysis on Spike Frequency Variation of GNNs ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "126 To analyze the cause of the accuracy drop, we plot the behavior of the neurons during inference in   \n127 Figure 1a, on a IMDB-BINARY dataset over five timesteps $T=5$ ). We create a histogram of spike   \n128 counts created from each node, which is associated with 128 neurons. As depicted in the plot, it is   \n129 clear that most of the neurons are under starvation. This is caused by the inputs of those neurons   \n130 being insufficient to reach the threshold, and this leads to severe information loss between the layers.   \n131 While unveiling the exact dynamics would require more research, we hypothesize that this is caused   \n132 by the topology of the real-world graphs.   \n133 To validate the hypothesis and further investigate the phenomena, we display the spike frequency   \n134 heatmap of the neurons sorted by the degree of the nodes in Figure 1b. From the heatmap, we make   \n135 three observations:   \n136 $\\textcircled{1}$ (Brighter on the top and darker at the bottom) High-degree nodes tend to exhibit higher spike   \n137 frequencies.   \n138 $\\textcircled{2}$ (The horizontal strips) The spike frequencies are associated with the corresponding nodes.   \n139 $\\circled{3}$ (The vertical strips) The feature neurons within a node behave differently according to their   \n140 positions.   \n141 We believe such patterns come from the connectivity of the nodes, and the distinct role of the neurons   \n142 assigned to each node. The connectivity will affect the number of receiving spikes of neurons   \n143 associated with each node. It is known that most of the real-world graphs exhibit an extremely skewed   \n144 distribution of degrees (i.e., power-law distribution [30]). Due to such a characteristic, there are a few   \n145 nodes with very high degrees, while a majority of nodes have low degrees. Because a GNN layer   \n146 communicates signals between the neighbors, a high-degree node will likely receive a lot of spikes,   \n147 while a low-degree node will receive only a few.   \n148 In addition, the neurons assigned to each node are known to have different semantic functionality   \n149 according to their positions, analogous to channels in convolutional neural networks or heads in   \n150 large language models. For example, the input first layer of a molecular graph will have information   \n151 such as its energy, x/y/z location, and atom numbers. In the intermediate layers, they represent a   \n152 specific pattern sensed by the network (such as high energy $^+$ hydrogen atom), even though the exact   \n153 behaviors are yet to be human-interpretable. In such a manner, the neurons in the same position are   \n154 expected to behave similarly, even though they correspond to different nodes.   \n155 These three observations shed light on how to close the performance gap between spiking GNNs are   \n156 ANN-based GNNs. In the next section, we describe how the observations are used to build better   \n157 spiking GNNs for graph classification. ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "image", "img_path": "znBiAp5ISn/tmp/b8f568d4bae9136afb0689df47026c2325980b554b05cce48130fdeb16f688c6.jpg", "img_caption": ["Figure 2: Overall graph classification architecture with proposed methods. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "158 4 Proposed Method ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "159 4.1 Overall Graph Classification Architecture ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "160 Many recent studies have tried to adapt SNN architectures into GNN tasks, however, they simply   \n161 try to contact with only node classification tasks. In this work, we propose a spiking neural network   \n162 specifically designed for graph classification tasks and show that it can be trained using spikes. We   \n163 demonstrate the overall architecture of our graph classification model TAS-GNN in Figure 2. For each   \n164 timestep, the input graphs are first translated into spike representations through the poisson encoder,   \n165 then the message passing is done in spike format. After the combination phase in the GNN layer, the   \n166 node features are once again binarized into spike format through passing the SNN layer. In the last   \n167 layer, we perform an extra operation of aggregation and combination on the spike features before   \n168 passing the readout layer. The readout layer is essential to graph classification and is responsible for   \n169 aggregating all the node embeddings in the graph into a single graph representation. A batch of graph   \n170 embeddings is passed through a classification head that outputs logits for that timestep. To make the   \n171 final prediction, we simply take the sum of logits from all timesteps and use softmax to obtain the   \n172 class probabilities. ", "page_idx": 4}, {"type": "text", "text": "173 4.2 Topology-Aware Group-Adaptive Neurons ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "174 As discussed in Section 3, GNNs suffer from a huge gap in spike frequencies between neurons. As   \n175 observed, there exist some patterns (Figure 5) that we can utilize to address the issue. One naive   \n176 way of addressing the issue is to use learnable [49], or adaptive [4] threshold for each neuron. By   \n177 adjusting the threshold, one can expect the neurons to naturally change, such that neurons under   \n178 starvation will have lower thresholds to fire more often, and a few neurons with high firing rates will   \n179 have higher thresholds to shift toward an ideal distribution.   \n180 Unfortunately, such an idea cannot be directly applied unless all the testset nodes are available at   \n181 training time (i.e., transductive task). However, such a setting would be considered a data leak for   \n182 graph classification, and would also lose the advantage SNNs have on lightweight inference.   \n183 Moreover, the number of nodes in a real-world dataset often ranges from at least thousands to several   \n184 billions. Considering that GNNs often involve only a sub-million number of learnable parameters,   \n185 storing such a large number of thresholds is considered too much overhead.   \n186 To address the aforementioned issues, we propose topology-aware group adaptive neurons (TAG),   \n187 which partitions the neurons by their degrees. Note that $V_{g}$ denotes the node group to which the   \n188 node is mapped, considering degree information. $S^{g_{i}}(t)$ and $V^{g_{i}}(t)$ represent the output spike and   \n189 membrane potential of the $i$ -th node in group $g$ at time $t$ , respectively, as reformulated by Equation (4).   \n190 We use $g$ to represent the unique degree distribution of the training sets. When an unseen node is   \n191 encountered, we apply the initial threshold, as it has not been trained at all. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{\\lefteqn{S^{g_{i}}(t)=\\left\\{\\begin{array}{l l}{1,}&{\\mathrm{if~}V^{g_{i}}(t)\\geq V_{t h}^{g}(t-1)}\\\\ {0,}&{\\mathrm{otherwise}}\\end{array}\\right.}}\\\\ &{}&{S^{g}(t)=\\frac{1}{|V_{g}|}\\sum_{i\\in V_{g}}S^{g_{i}}(t)}\\\\ &{}&{V_{t h}^{g}(t)=\\gamma V_{t h}^{g}(t-1)+(1-\\gamma)S^{g}(t)}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "192 The major advantage of this scheme is that it is straightforward to put an unseen node or an unseen   \n193 graph into a group at inference. To further consider intra-node deviation, we split the group into   \n194 $F$ (number of features) neurons, which is a fixed parameter determined by the model architecture.   \n195 For any unseen node, finding out its degree is trivial because visiting its neighbors is one of the   \n196 fundamental requirements of graph data structures [26, 50, 36, 28]. Based on the observation $\\textcircled{1}$   \n197 from Section 3 that the neuron behavior is related to the degree, this will let neurons in the group   \n198 collaboratively find an adequate threshold. ", "page_idx": 5}, {"type": "text", "text": "199 4.3 Reducing the Initial Threshold Sensitivity ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "200 The proposed Group-adaptive threshold scheme effec  \n201 tively reduces the spike frequency variation issue. How  \n202 ever, we find that the adaptive neurons in the proposed   \n203 TAG are sensitive to their initial thresholds. As depicted   \n204 in Figure 3, the performance of the adaptive neurons can   \n205 severely drop when the initial threshold value is not care  \n206 fully tuned, which aligns with the findings from [4]. More  \n207 over, manually tuning the initial thresholds individually is   \n208 difficult because there are thousands of neuron groups.   \n209 To address the problem, we choose to learn the two pa  \n210 rameters: the initial threshold per group $(V_{t h}^{g}(0))$ and the   \n211 decay rate $(\\beta)$ . During training, we adopted the backprop  \n212 agation algorithm [51, 10, 8] to update the value of $\\bar{V}_{t h}^{g}(0)$   \n213 with the gradients at time step $\\scriptstyle{\\mathrm{t}}=1$ . This is done because $\\dot{V}_{t h}^{g}(t)$ keeps updating with TAG Section 4.2   \n214 as time passes. During training, we also learn the decay rate $(\\beta)$ [16], which prevents the membrane   \n215 voltage of neurons in low-degree nodes from leaking faster than it accumulates. For evaluation, we   \n216 use the $V_{t h}^{g}(0)$ values obtained during the training phase, adjusted for each group. The overall training   \n217 procedure is in the Appendix. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "image", "img_path": "znBiAp5ISn/tmp/895e33c6c035bbd06252f7941a5b7b191ce4261278288afea48235cc998efcb1.jpg", "img_caption": ["Figure 3: Sensitivity of neurons to its initial threshold. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "218 5 Evaluation ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "219 5.1 Experiment Settings ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "220 We use a total of 5 graph datasets commonly used for benchmarking GNNs: MUTAG [9], PRO  \n221 TEINS [6], ENZYMES [6], NCI1 [47], and IMDB-Binary [54]. For the GNN layer in our architecture,   \n222 we use 3 different designs, including GCN [27], GAT [45], and GIN [52]. The baselines include   \n223 3 works from SNN that are applicable to graph datasets: SpikingGNN [64], SpikeNet [32], and   \n224 PGNN [16]. Since this is the first SNN design to target graph classification, we apply minor modi  \n225 fications to each architecture, such as appending a readout layer. Note that SpikingGNN [64] was   \n226 originally proposed for GCN, but we extend it to both GAT and GIN. More details on the experiment   \n227 setting are included in the Appendix. ", "page_idx": 5}, {"type": "table", "img_path": "znBiAp5ISn/tmp/8e0fe119df02f81206d0a8c6431168fb463a3753bef3469ad08b2159b6056a06.jpg", "table_caption": ["Table 1: Performance comparison against baseline methods. "], "table_footnote": ["\u2020Did not converge "], "page_idx": 6}, {"type": "table", "img_path": "znBiAp5ISn/tmp/8f0bdcd66ac19d820d8405775773ad4b709d36e44712d902c33c8aae4f559a8e.jpg", "table_caption": ["Table 2: Ablation study on the proposed method "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "228 5.2 Results on Graph Classification ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "229 We compare TAS-GNN against prior works that adopt a spiking neural network to graph the dataset,   \n230 shown in Table 1. We also report the performance of conventional ANN for comparison. In all but 2   \n231 cases, TAS-GNN outperforms the baselines by a noticeable margin. In the cases where TAS-GNN   \n232 underperforms, the gaps are less than $1.1\\%\\mathrm{p}$ , smaller than the error bounds. In the opposite cases, the   \n233 improvement is up to $27.90\\%\\$ , showing a great amount of improvement.   \n234 An intriguing result is that TAS-GNN performs better than ANN-based GNNs in several cases.   \n235 Improvements beyond the error bounds are found in MUTAG (GCN and GAT), NCI1 (GAT), and   \n236 IMDB-BINARY (GCN and GAT). Note that the model architecture and the number of learnable   \n237 parameters are the same in all methods. We believe this could come from the spiking neurons   \n238 efficiently capturing the irregular connections over several timesteps, thereby showing an advantage   \n239 over ANNs. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "240 5.3 Ablation Study ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "241 In this section, we break down individual components of TAS-GNN and perform an ablation study,   \n242 which is reported in Table 2. Starting from baseline implementation, which does not differentiate   \n243 neurons used by each node, we apply TAG to show the effect of topology-aware group-adaptive   \n244 neurons. Then, we add our learnable initial threshold scheme to complete TAS-GNN. The results   \n245 show that TAG alone can improve the performance across all datasets and models. This means that   \n246 uneven spike distribution caused by indegree variance is a general problem shared across different   \n247 graph datasets, and simply grouping the nodes with similar indegree to share the same threshold helps   \n248 alleviate this problem. Lastly, adding a learnable initial threshold scheme further boosts the accuracy   \n249 in almost all cases, demonstrating its efficacy and stability. ", "page_idx": 6}, {"type": "image", "img_path": "znBiAp5ISn/tmp/912fe482dbc5b950d0c0110c5ae4ec3e4106eb44b85f8da2d60f1a05a8344bc9.jpg", "img_caption": ["Figure 4: Sensitivity study of neurons to its initial threshold. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "250 5.4 Sensitivity Study ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "251 To validate our method\u2019s efficacy in alleviat  \n252 ing the sensitivity of the initial threshold value,   \n253 we perform a sensitivity study varying the val  \n254 ues from 0.0 to 10.0. We compare our scheme   \n255 against the TAG method, which also adaptively   \n256 modulates the threshold during inference but   \n257 does not learn it from training. Our method   \n258 consistently performs indifferently to the initial   \n259 threshold value, which means arduous search or   \n260 tuning is unnecessary to achieve stable accuracy.   \n261 On the other hand, TAG is highly sensitive to the initial threshold and shows a performance gap up to   \n262 $19.68\\%\\mathrm{p}$ except for GIN architecture, which is capturing structure well.   \n263 Since our scheme uses a learnable initial threshold, we also study its sensitivity for the learning rate,   \n264 shown in Table 3. TAS-GNN performs best around $\\eta=[0.005,\\dot{0}.1]$ , and starts to degrade for further   \n265 increment or decrement. As denoted in the experimental setting, we use $\\eta=0.01$ as the default. ", "page_idx": 7}, {"type": "table", "img_path": "znBiAp5ISn/tmp/7668099ccf403792f779bdbb10582b95a52592405ec065af37d48f9292cd3e01.jpg", "table_caption": ["Table 3: Sensitivity study on threshold learning rate using MUTAG. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "266 5.5 Additional Analysis ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "267 In this section, we give additional analysis on TAS-GNN by studying its spike frequency distribution.   \n268 In Figure 5, we provide the same spike frequency visualization as done in Section 3, but using   \n269 TAS-GNN. Unlike Figure 1, which showed severe starvation with most nodes not generating spikes,   \n270 Figure 5a reveals that most nodes fire spikes, significantly alleviating the starvation problem. This   \n271 is further illustrated Figure 5b, where most neurons have non-zero spike values and, what\u2019s more,   \n272 meaningfully reflect the topology of the graph. For nodes with higher degrees, the spikes are more   \n273 frequent (close to 5) due to having more incoming spikes from their neighbors. For GNNs, such   \n274 information is essential to capture the global topology of the graph. This shows that our design of   \n275 TAS-GNN faithfully reflects such information and can successfully propagate such information using   \n276 spikes. ", "page_idx": 7}, {"type": "text", "text": "277 6 Related Works ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "278 Graph Classification Graph classification requires identifying the global characteristics of each   \n279 graph and is commonly applied to domains such as bioinformatics [6], chemoinformatics [63], or   \n280 social network analysis [21, 37]. Popular examples include the molecular classification of chemical   \n281 compounds, proteins, or RNAs, where identifying the graph structural information is crucial. Due   \n282 to the success of GNNs, [27, 45, 52, 57] Most GNNs use a message passing paradigm [20] that   \n283 only aggregates local features. Thus, to obtain global features representing the entire graph, graph   \n284 pooling [56] is often used. Global pooling summarizes the entire graph into a fixed-size graph   \n285 embedding, which can be done by simply averaging or taking minimum or maximum values of the   \n286 node-wise embeddings. Other variations replace such simple operations with neural networks [46,   \n287 33] or integrate sorting to selectively choose which node embeddings to include [60]. More advanced   \n288 techniques such as hiearchical pooling utilze hiearchical information of graphs [40, 29, 18, 11] and   \n289 usually show better representation learning. [60] ", "page_idx": 7}, {"type": "image", "img_path": "znBiAp5ISn/tmp/7050146ed90b919107a25c485bb532c43b11e305e844f7ff1123f946e6acf51e.jpg", "img_caption": ["(a) Histogram plotting the distribution of total spikes counted over time for each node. $\\Chi$ -axis denotes spike counts from each node, while y-axis denotes density of each bin. "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "znBiAp5ISn/tmp/01b0db316a1c2214bdc00f2913f87ed14fc4c0256edf350a86a0548f0c027552.jpg", "img_caption": ["(b) Spike frequency visualization on TAS-GNN using each layer output. X-axis denotes feature dimension, while y-axis denotes nodes grouped and sorted by degree in descending order, top to bottom. Brighter spots denote higher frequency. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Figure 5: Analysis on spike frequency variation of GCN using IMDB-BINARY [54] dataset. ", "page_idx": 8}, {"type": "text", "text": "290 Spiking Neural Networks SNNs are a type of neural network where information is transmitted   \n291 using spikes, similar to how biological neurons work. They use different neuron models for capturing   \n292 spike signals effectively [23, 24] or adjusting parameters dynamically to compromise the accuracy   \n293 [16, 49, 4, 34]. One major area of SNN research is converting traditional ANNs into SNNs by   \n294 mapping ANN activation functions into spike signals [22, 41, 24, 42, 17]. Another focus is training   \n295 SNNs directly using backpropagation, similar to ANNs, which involves using various techniques   \n296 such as surrogate functions for backpropagation [43, 8] and adapting normalization techniques to   \n297 SNNs [42, 12, 25, 62].   \n298 SNN for Graphs Previous attempts to apply SNNs to graph datasets have primarily focused on   \n299 node-level classification tasks [59, 44, 64] and have not yet been extended to graph-level tasks. While   \n300 [48] explored the application of spike training to Graph Attention Networks (GAT), it implemented the   \n301 message passing phase after the spiking phase, which deviates from previous structures. Additionally,   \n302 recent efforts have begun to integrate SNNs with other techniques for contrastive learning [31],   \n303 particularly in dynamic graphs [55], to adopt collaboration between GNNs and SNNs. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "304 7 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "305 In this paper, we explore the application of SNNs to graph neural networks for graph classification   \n306 for the first time. After thoroughly analyzing the graph\u2019s uneven spike distribution, we identify that   \n307 the degree of each node correlates to this phenomenon. To better accommodate such characteristics   \n308 of graphs, we propose topology-aware group-adaptive neurons, which uses separate neurons for each   \n309 degree group in the graph. In addition, we propose to learn the initial threshold and adaptively adjust   \n310 the threshold simultaneously to reduce its sensitivity and facilitate training using spikes. Combined   \n311 with the modified architecture for graph classification, we name our method TAS-GNN, and show   \n312 that it outperforms existing works by a noticeable margin. ", "page_idx": 8}, {"type": "text", "text": "313 References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "314 [1] James B. Aimone et al. \u201cProvable Advantages for Graph Algorithms in Spiking Neural   \n315 Networks\u201d. In: SPAA \u201921. Virtual Event, USA: Association for Computing Machinery, 2021,   \n316 pp. 35\u201347. ISBN: 9781450380706. DOI: 10.1145/3409964.3461813. URL: https://doi.   \n317 org/10.1145/3409964.3461813.   \n318 [2] Marco Arazzi et al. \u201cPredicting tweet engagement with graph neural networks\u201d. In: Proceedings   \n319 of the 2023 ACM International Conference on Multimedia Retrieval. 2023, pp. 172\u2013180.   \n320 [3] Lei Bai et al. \u201cAdaptive graph convolutional recurrent network for traffic forecasting\u201d. In:   \n321 Advances in neural information processing systems 33 (2020), pp. 17804\u201317815.   \n322 [4] Guillaume Bellec et al. \u201cLong short-term memory and learning-to-learn in networks of spiking   \n323 neurons\u201d. In: Advances in neural information processing systems 31 (2018).   \n324 [5] Sander M Bohte, Joost N Kok, and Han La Poutre. \u201cError-backpropagation in temporally   \n325 encoded networks of spiking neurons\u201d. In: Neurocomputing 48.1-4 (2002), pp. 17\u201337.   \n326 [6] Karsten M Borgwardt et al. \u201cProtein function prediction via graph kernels\u201d. In: Bioinformatics   \n327 21.suppl_1 (2005), pp. i47\u2013i56.   \n328 [7] Defu Cao et al. \u201cSpectral temporal graph neural network for multivariate time-series forecast  \n329 ing\u201d. In: Advances in neural information processing systems 33 (2020), pp. 17766\u201317778.   \n330 [8] Kaiwei Che et al. \u201cDifferentiable hierarchical and surrogate gradient search for spik  \n331 ing neural networks\u201d. In: Advances in Neural Information Processing Systems. Ed.   \n332 by S. Koyejo et al. Vol. 35. Curran Associates, Inc., 2022, pp. 24975\u201324990. URL:   \n333 https : / / proceedings . neurips . cc / paper _ files / paper / 2022 / file /   \n334 9e8c2895db691eaab85af37bddee75aa-Paper-Conference.pdf.   \n335 [9] Asim Kumar Debnath et al. \u201cStructure-activity relationship of mutagenic aromatic and het  \n336 eroaromatic nitro compounds. Correlation with molecular orbital energies and hydrophobicity\u201d.   \n337 In: Journal of Medicinal Chemistry 34.2 (1991), pp. 786\u2013797. DOI: 10.1021/jm00106a046.   \n338 eprint: https://doi.org/10.1021/jm00106a046. URL: https://doi.org/10.1021/   \n339 jm00106a046.   \n340 [10] Shikuang Deng et al. \u201cTemporal Efficient Training of Spiking Neural Network via Gradient   \n341 Re-weighting\u201d. In: International Conference on Learning Representations. 2022. URL: https:   \n342 //openreview.net/forum?id=_XNtisL32jv.   \n343 [11] Frederik Diehl. \u201cEdge contraction pooling for graph neural networks\u201d. In: arXiv preprint   \n344 arXiv:1905.10990 (2019).   \n345 [12] Chaoteng Duan et al. \u201cTemporal Effective Batch Normalization in Spiking Neural Networks\u201d.   \n346 In: Advances in Neural Information Processing Systems. Ed. by S. Koyejo et al. Vol. 35.   \n347 Curran Associates, Inc., 2022, pp. 34377\u201334390. URL: https://proceedings.neurips.   \n348 cc/paper_files/paper/2022/file/de2ad3ed44ee4e675b3be42aa0b615d0-Paper  \n349 Conference.pdf.   \n350 [13] Steve K Esser et al. \u201cBackpropagation for Energy-Efficient Neuromorphic Computing\u201d. In:   \n351 Advances in Neural Information Processing Systems. Ed. by C. Cortes et al. Vol. 28. Curran   \n352 Associates, Inc., 2015. URL: https://proceedings.neurips.cc/paper_files/paper/   \n353 2015/file/10a5ab2db37feedfdeaab192ead4ac0e-Paper.pdf.   \n354 [14] Steven K Esser et al. \u201cFrom the cover: Convolutional networks for fast, energy-efficient   \n355 neuromorphic computing\u201d. In: Proceedings of the National Academy of Sciences of the United   \n356 States of America 113.41 (2016), p. 11441.   \n357 [15] Wenqi Fan et al. \u201cGraph neural networks for social recommendation\u201d. In: The world wide web   \n358 conference. 2019, pp. 417\u2013426.   \n359 [16] Wei Fang et al. \u201cIncorporating learnable membrane time constant to enhance learning of   \n360 spiking neural networks\u201d. In: Proceedings of the IEEE/CVF international conference on   \n361 computer vision. 2021, pp. 2661\u20132671.   \n362 [17] Wei Fang et al. \u201cParallel Spiking Neurons with High Efficiency and Ability to Learn   \n363 Long-term Dependencies\u201d. In: Advances in Neural Information Processing Systems.   \n364 Ed. by A. Oh et al. Vol. 36. Curran Associates, Inc., 2023, pp. 53674\u201353687. URL:   \n365 https : / / proceedings . neurips . cc / paper _ files / paper / 2023 / file /   \n366 a834ac3dfdb90da54292c2c932c997cc-Paper-Conference.pdf.   \n367 [18] Hongyang Gao and Shuiwang Ji. \u201cGraph u-nets\u201d. In: international conference on machine   \n368 learning. PMLR. 2019, pp. 2083\u20132092.   \n369 [19] Tong Geng et al. \u201cAWB-GCN: A graph convolutional network accelerator with runtime   \n370 workload rebalancing\u201d. In: 2020 53rd Annual IEEE/ACM International Symposium on Mi  \n371 croarchitecture (MICRO). IEEE. 2020, pp. 922\u2013936.   \n372 [20] Justin Gilmer et al. \u201cNeural message passing for Quantum chemistry\u201d. In: Proceedings of the   \n373 34th International Conference on Machine Learning-Volume 70. 2017, pp. 1263\u20131272.   \n374 [21] Will Hamilton, Zhitao Ying, and Jure Leskovec. \u201cInductive representation learning on large   \n375 graphs\u201d. In: Advances in neural information processing systems (2017).   \n376 [22] Bing Han, Gopalakrishnan Srinivasan, and Kaushik Roy. \u201cRmp-snn: Residual membrane   \n377 potential neuron for enabling deeper high-accuracy and low-latency spiking neural network\u201d.   \n378 In: Proceedings of the IEEE/CVF conference on computer vision and pattern recognition.   \n379 2020, pp. 13558\u201313567.   \n380 [23] Alan L Hodgkin and Andrew F Huxley. \u201cA quantitative description of membrane current and   \n381 its application to conduction and excitation in nerve\u201d. In: The Journal of physiology 117.4   \n382 (1952), p. 500.   \n383 [24] Eric Hunsberger and Chris Eliasmith. \u201cSpiking deep networks with LIF neurons\u201d. In: arXiv   \n384 preprint arXiv:1510.08829 (2015).   \n385 [25] Haiyan Jiang et al. \u201cTAB: Temporal Accumulated Batch Normalization in Spiking Neural   \n386 Networks\u201d. In: The Twelfth International Conference on Learning Representations. 2024. URL:   \n387 https://openreview.net/forum?id $\\cdot^{=}$ k1wlmtPGLq.   \n388 [26] Farzad Khorasani et al. \u201cCuSha: vertex-centric graph processing on GPUs\u201d. In: Proceedings of   \n389 the 23rd international symposium on High-performance parallel and distributed computing.   \n390 2014.   \n391 [27] Thomas N Kipf and Max Welling. \u201cSemi-Supervised Classification with Graph Convolutional   \n392 Networks\u201d. In: International Conference on Learning Representations. 2016.   \n393 [28] Jinho Lee et al. \u201cExtrav: boosting graph processing near storage with a coherent accelerator\u201d.   \n394 In: Proceedings of the VLDB Endowment (2017).   \n395 [29] Junhyun Lee, Inyeop Lee, and Jaewoo Kang. \u201cSelf-attention graph pooling\u201d. In: International   \n396 conference on machine learning. PMLR. 2019, pp. 3734\u20133743.   \n397 [30] Jure Leskovec et al. \u201cPatterns of Cascading Behavior in Large Blog Graphs\u201d. In: Proceedings   \n398 of the 2007 SIAM International Conference on Data Mining (SDM), pp. 551\u2013556. DOI:   \n399 10.1137/1.9781611972771.60. URL: https://epubs.siam.org/doi/abs/10.1137/   \n400 1.9781611972771.60.   \n401 [31] Jintang Li et al. \u201cA Graph is Worth 1-bit Spikes: When Graph Contrastive Learning Meets Spik  \n402 ing Neural Networks\u201d. In: The Twelfth International Conference on Learning Representations.   \n403 2024. URL: https://openreview.net/forum?id $\\cdot$ LnLySuf1vp.   \n404 [32] Jintang Li et al. \u201cScaling up dynamic graph representation learning via spiking neural net  \n405 works\u201d. In: Proceedings of the AAAI Conference on Artificial Intelligence. Vol. 37. 7. 2023,   \n406 pp. 8588\u20138596.   \n407 [33] Yujia Li et al. \u201cGated Graph Sequence Neural Networks\u201d. In: Proceedings of ICLR\u201916. 2016.   \n408 [34] Shuang Lian et al. \u201cIM-LIF: Improved Neuronal Dynamics With Attention Mechanism for   \n409 Direct Training Deep Spiking Neural Network\u201d. In: IEEE Transactions on Emerging Topics in   \n410 Computational Intelligence (2024).   \n411 [35] Wolfgang Maass. \u201cNetworks of spiking neurons: the third generation of neural network   \n412 models\u201d. In: Neural networks 10.9 (1997), pp. 1659\u20131671.   \n413 [36] Kiran Kumar Matam et al. \u201cGraphSSD: graph semantics aware SSD\u201d. In: Proceedings of the   \n414 46th international symposium on computer architecture. 2019.   \n415 [37] Andrew Kachites McCallum et al. \u201cAutomating the construction of internet portals with   \n416 machine learning\u201d. In: Information Retrieval 3 (2000), pp. 127\u2013163.   \n417 [38] Aditya Pal et al. \u201cPinnersage: Multi-modal user embedding framework for recommendations at   \n418 pinterest\u201d. In: Proceedings of the 26th ACM SIGKDD International Conference on Knowledge   \n419 Discovery & Data Mining. 2020, pp. 2311\u20132320.   \n420 [39] Jiezhong Qiu et al. \u201cDeepinf: Social influence prediction with deep learning\u201d. In: Proceedings   \n421 of the 24th ACM SIGKDD international conference on knowledge discovery & data mining.   \n422 2018, pp. 2110\u20132119.   \n423 [40] Ekagra Ranjan, Soumya Sanyal, and Partha Talukdar. \u201cAsap: Adaptive structure aware pooling   \n424 for learning hierarchical graph representations\u201d. In: Proceedings of the AAAI conference on   \n425 artificial intelligence. Vol. 34. 04. 2020, pp. 5470\u20135477.   \n426 [41] Bodo Rueckauer et al. \u201cConversion of continuous-valued deep networks to efficient event  \n427 driven networks for image classification\u201d. In: Frontiers in neuroscience 11 (2017), p. 294078.   \n428 [42] Abhronil Sengupta et al. \u201cGoing deeper in spiking neural networks: VGG and residual archi  \n429 tectures\u201d. In: Frontiers in neuroscience 13 (2019), p. 95.   \n430 [43] Sumit B Shrestha and Garrick Orchard. \u201cSlayer: Spike layer error reassignment in time\u201d. In:   \n431 Advances in neural information processing systems 31 (2018).   \n432 [44] Yundong Sun et al. \u201cSpikeGraphormer: A High-Performance Graph Transformer with Spiking   \n433 Graph Attention\u201d. In: arXiv preprint arXiv:2403.15480 (2024).   \n434 [45] Petar Velic\u02c7kovic\u00b4 et al. \u201cGraph Attention Networks\u201d. In: International Conference on Learning   \n435 Representations. 2018.   \n436 [46] Oriol Vinyals, Samy Bengio, and Manjunath Kudlur. \u201cOrder matters: Sequence to sequence   \n437 for sets\u201d. In: arXiv preprint arXiv:1511.06391 (2015).   \n438 [47] Nikil Wale, Ian A Watson, and George Karypis. \u201cComparison of descriptor spaces for chemical   \n439 compound retrieval and classification\u201d. In: Knowledge and Information Systems 14 (2008),   \n440 pp. 347\u2013375.   \n441 [48] Beibei Wang and Bo Jiang. \u201cSpiking gats: Learning graph attentions via spiking neural   \n442 network\u201d. In: arXiv preprint arXiv:2209.13539 (2022).   \n443 [49] Siqi Wang, Tee Hiang Cheng, and Meng-Hiot Lim. \u201cLTMD: learning improvement of spiking   \n444 neural networks with learnable thresholding neurons and moderate dropout\u201d. In: Advances in   \n445 Neural Information Processing Systems 35 (2022), pp. 28350\u201328362.   \n446 [50] Yangzihao Wang et al. \u201cGunrock: A high-performance graph processing library on the GPU\u201d.   \n447 In: Proceedings of the 21st ACM SIGPLAN symposium on principles and practice of parallel   \n448 programming. 2016.   \n449 [51] Yujie Wu et al. \u201cSpatio-temporal backpropagation for training high-performance spiking neural   \n450 networks\u201d. In: Frontiers in neuroscience 12 (2018), p. 323875.   \n451 [52] Keyulu Xu et al. \u201cHow Powerful are Graph Neural Networks?\u201d In: International Conference   \n452 on Learning Representations. 2019.   \n453 [53] Mingyu Yan et al. \u201cHygcn: A gcn accelerator with hybrid architecture\u201d. In: 2020 IEEE   \n454 International Symposium on High Performance Computer Architecture (HPCA). IEEE. 2020,   \n455 pp. 15\u201329.   \n456 [54] Pinar Yanardag and SVN Vishwanathan. \u201cDeep graph kernels\u201d. In: Proceedings of the 21th   \n457 ACM SIGKDD international conference on knowledge discovery and data mining. 2015,   \n458 pp. 1365\u20131374.   \n459 [55] Nan Yin et al. \u201cDynamic spiking graph neural networks\u201d. In: Proceedings of the AAAI Confer  \n460 ence on Artificial Intelligence. Vol. 38. 15. 2024, pp. 16495\u201316503.   \n461 [56] Zhitao Ying et al. \u201cHierarchical graph representation learning with differentiable pooling\u201d. In:   \n462 Advances in neural information processing systems 31 (2018).   \n463 [57] Mingi Yoo et al. \u201cSgcn: Exploiting compressed-sparse features in deep graph convolutional net  \n464 work accelerators\u201d. In: 2023 IEEE International Symposium on High-Performance Computer   \n465 Architecture (HPCA). IEEE. 2023, pp. 1\u201314.   \n466 [58] Mingi Yoo et al. \u201cSlice-and-Forge: Making Better Use of Caches for Graph Convolutional Net  \n467 work Accelerators\u201d. In: Proceedings of the International Conference on Parallel Architectures   \n468 and Compilation Techniques. 2022, pp. 40\u201353.   \n469 [59] Huizhe Zhang et al. \u201cSGHormer: An Energy-Saving Graph Transformer Driven by Spikes\u201d.   \n470 In: arXiv preprint arXiv:2403.17656 (2024).   \n471 [60] Muhan Zhang et al. \u201cAn end-to-end deep learning architecture for graph classification\u201d. In:   \n472 Proceedings of the AAAI conference on artificial intelligence. Vol. 32. 1. 2018.   \n473 [61] Yiming Zhang et al. \u201cGraph learning augmented heterogeneous graph neural network for social   \n474 recommendation\u201d. In: ACM Transactions on Recommender Systems 1.4 (2023), pp. 1\u201322.   \n475 [62] Yaoyu Zhu et al. \u201cOnline Stabilization of Spiking Neural Networks\u201d. In: The Twelfth Inter  \n476 national Conference on Learning Representations. 2024. URL: https://openreview.net/   \n477 forum?id=CIj1CVbkpr.   \n478 [63] Yuanyuan Zhu et al. \u201cGraph classification: a diversified discriminative feature selection ap  \n479 proach\u201d. In: Proceedings of the 21st ACM international conference on Information and   \n480 knowledge management. 2012, pp. 205\u2013214.   \n481 [64] Zulun Zhu et al. \u201cSpiking graph convolutional networks\u201d. In: arXiv preprint arXiv:2205.02767   \n482 (2022). ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "483 A Appendix / supplemental material ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "484 A.1 Limitation ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "485 Currently, our work is experimenting with the small-scale dataset for the graph classification that is   \n486 generally used. However, we will extend our work into the large-scale dataset that could apply to   \n487 the real. In addition, we will continue our future work for theoretical proof for updating the initial   \n488 threshold that is fused with adaptative changes in the timestep. ", "page_idx": 13}, {"type": "text", "text": "489 A.2 Code ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "490 The code which includes our implementation of this work is included in a zip archive of the sup  \n491 plementary material. The code is under Nvidia Source Code License-NC and GNU General Public   \n492 License v3.0. ", "page_idx": 13}, {"type": "text", "text": "493 A.3 Detailed Experiment Settings ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "494 Dataset Details Given the diverse properties of graph datasets, we selected five datasets from the   \n495 well-known TUDatasets, commonly used for graph classification. We compiled statistics for these   \n496 datasets to briefly represent their key properties.   \n497 Network Architecture In this work, we consider the following three GNN architectures where the   \n498 distinctions lie in their update rules:   \n499   \n500   \n501   \n502   \n503   \n504 ", "page_idx": 13}, {"type": "table", "img_path": "znBiAp5ISn/tmp/29166953118abce133805cf251c2c3d49e77a993efd5f1d62870fa6dc090a223.jpg", "table_caption": ["Table 4: Summary of datasets used in the study. "], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "\u2022 Graph Convolution Network [27] (GCN): hi(l+1) $\\begin{array}{r}{h_{i}^{(l+1)}=\\sigma(\\sum_{j\\in{\\cal N}(i)}\\cup\\{i\\}\\;\\frac{W h_{j}^{(l)}}{\\sqrt{|{\\cal N}(i)||{\\cal N}(j)|}})}\\end{array}$ , where $\\phi(\\cdot)$ is replaced by affine transformation $W$ followed by nonlinearity $\\sigma$ .   \n\u2022 Graph Attention Network [45] (GAT): $\\begin{array}{r}{\\boldsymbol{h}_{i}^{(l+1)}=\\alpha_{i,i}W\\boldsymbol{h}_{i}^{(l)}+\\sum_{j\\in\\mathcal{N}(i)}\\alpha_{i j}W\\boldsymbol{h}_{j}^{(l)}}\\end{array}$ , where $\\alpha_{i j}$ is the normalized attention score between node $i$ and $j$ .   \n\u2022 Graph Isomorphism Network [52] (GIN): $\\begin{array}{r}{\\begin{array}{r}{h_{i}^{(l+1)}=M L P((1+\\epsilon)h_{i}^{(l)}+\\sum_{j\\in\\mathcal{N}(i)}h_{j}^{(l)}),}\\end{array}}\\end{array}$ where $\\epsilon$ is a learnable constant. ", "page_idx": 13}, {"type": "text", "text": "505 For the GCN layers, 128 dimensions were used for hidden dimensions, and GAT layers were used for   \n506 4 multi-head attentions. GIN was used for 2-MLP layers for the above equation.   \n507 Experiment Settings We trained and evaluated our models using 10-fold cross-validation for all   \n508 datasets. Note that the IMDB-BINARY dataset lacks inherent features, so we constructed features   \n509 using the node degrees for the GNN layer. Additionally, we did not apply any multiplier to adjust   \n510 the width of the sigmoid function. The details of our evaluation procedure are outlined below. Our   \n511 experiment was evaluated on a single RTX-4090 GPU for the full batch GNN training. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "\u2022 Epochs: 1000   \n\u2022 Surrogate function: $\\begin{array}{r}{\\sigma(x)=\\frac{1}{1+e^{-x}}}\\end{array}$   \n\u2022 Learning rate $(\\eta);\\,0.01$ (for main table)   \n\u2022 Optimizer: Adamw   \n\u2022 Loss function: Cross entropy   \n\u2022 Adaptive step size $(\\gamma)$ : 0.2 ", "page_idx": 13}, {"type": "text", "text": "518 A.4 Analysis on Spike Frequency ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "519 We provide additional figures that we referenced on Section 3. Appendix A.4 shows MUTAG,   \n520 PROTEINS, ENZYMES, NCI1 dataset total spike histogram bins.   \n521 ", "page_idx": 14}, {"type": "text", "text": "522 A.5 Overall training procedure ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "523 As referred on Section 4 our TAG method and overall updating initial values of group threshold is   \n524 reffed on Algorithm 1. Note that our initial group values updated after timestep T. ", "page_idx": 14}, {"type": "table", "img_path": "znBiAp5ISn/tmp/96bbdc73fc42de23b2aece8010d61b0f9e3e52ce8ce236777c6173f1b8fcfd9f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "525 A.6 Sensitivity Study on Degree Group ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "526 Our experiments were conducted on a number of degree groups. Please refer Table 5 for the sensitivity   \n527 depending on the number of degree groups. Please note that the optimal values of the degree groups   \n528 are different depending on the graph datasets. We reported to the max degree group setting that   \n529 unseen nodes will use the initial values $V_{i n i t}$ that represents the $V_{t h}(0)$ that does not trained at all. ", "page_idx": 14}, {"type": "text", "text": "530 A.7 Sensitivity Study on Learning Rate ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "531 Our experiments were conducted under various learning rate conditions $\\eta\\in[0.001,0.5]$ to assess their   \n532 impact. As reported in Table 3 for the MUTAG dataset, we also present results for the PROTEINS,   \n533 ENZYMES, NCI1, and IMDB-BINARY datasets across GCN, GAT, and GIN architectures. Our   \n534 model\u2019s ability to learn $V_{i n i t}$ demonstrates a sensitivity to learning rate similar to other ANN models.   \n535 We found that the optimal performance was achieved at a learning rate of $\\eta=0.01$ . ", "page_idx": 14}, {"type": "image", "img_path": "znBiAp5ISn/tmp/ecdde311c2e49672b3f394d92f7b4bc246852337aaca2045432d886e03fbcc42.jpg", "img_caption": ["(f) ENZYMES-TASGNN spikes per node "], "img_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "znBiAp5ISn/tmp/cfcc3b4efad2b2e8c7c9b69cc5aaa0fd0ee2a705b76701a0f2bacc22c981c8e1.jpg", "img_caption": ["Figure 6: Histogram plotting distribution of total spikes counted over time for each node. X-axis denotes spike counts from each node, while y-axis denotes density of each bin. ", "(h) NCI1-TASGNN spikes per node "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "536 NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "537 The checklist is designed to encourage best practices for responsible machine learning research,   \n538 addressing issues of reproducibility, transparency, research ethics, and societal impact. Do not remove   \n539 the checklist: The papers not including the checklist will be desk rejected. The checklist should   \n540 follow the references and precede the (optional) supplemental material. The checklist does NOT   \n541 count towards the page limit.   \n542 Please read the checklist guidelines carefully for information on how to answer these questions. For   \n543 each question in the checklist: ", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "\u2022 You should answer [Yes] , [No] , or [NA] .   \n\u2022 [NA] means either that the question is Not Applicable for that particular paper or the relevant information is Not Available.   \n\u2022 Please provide a short (1\u20132 sentence) justification right after your answer (even for NA). ", "page_idx": 16}, {"type": "text", "text": "548 The checklist answers are an integral part of your paper submission. They are visible to the   \n549 reviewers, area chairs, senior area chairs, and ethics reviewers. You will be asked to also include it   \n550 (after eventual revisions) with the final version of your paper, and its final version will be published   \n551 with the paper.   \n552 The reviewers of your paper will be asked to use the checklist as one of the factors in their evaluation.   \n553 While \"[Yes] \" is generally preferable to \"[No] \", it is perfectly acceptable to answer \"[No] \" provided a   \n554 proper justification is given (e.g., \"error bars are not reported because it would be too computationally   \n555 expensive\" or \"we were unable to find the license for the dataset we used\"). In general, answering   \n556 \"[No] \" or \"[NA] \" is not grounds for rejection. While the questions are phrased in a binary way, we   \n557 acknowledge that the true answer is often more nuanced, so please just use your best judgment and   \n558 write a justification to elaborate. All supporting evidence can appear either in the main paper or the   \n559 supplemental material, provided in appendix. If you answer [Yes] to a question, in the justification   \n560 please point to the section(s) where related material for the question can be found. ", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "561 IMPORTANT, please: ", "page_idx": 16}, {"type": "text", "text": "562   \n563   \n564 ", "page_idx": 16}, {"type": "text", "text": "\u2022 Delete this instruction block, but keep the section heading \u201cNeurIPS paper checklist\", \u2022 Keep the checklist subsection headings, questions/answers and guidelines below. \u2022 Do not modify the questions and only use the provided macros for your answers. ", "page_idx": 16}, {"type": "table", "img_path": "znBiAp5ISn/tmp/280de54fde066f7846a69670a948ec4116c5e771329c9cc2925980a85efb4d95.jpg", "table_caption": ["Table 5: Comparison on using different number of degree group "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "Claims ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the   \npaper\u2019s contributions and scope?   \nAnswer: [Yes]   \nJustification: Our paper contributes on the scope of Spiking Neural Networks and Graph   \nNeural Networks scopes in graph classification task specifically   \nGuidelines: \u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper. \u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers. \u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings. \u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 17}, {"type": "text", "text": "565   \n566   \n567   \n568   \n569   \n570   \n571   \n572   \n573   \n574   \n575   \n576   \n577   \n578   \n579   \n580   \n581   \n582   \n583   \n584   \n585   \n586 ", "page_idx": 17}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Answer: [Yes]   \nJustification: We discuss the limitation on the Appendix.   \nGuidelines: \u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 17}, {"type": "table", "img_path": "znBiAp5ISn/tmp/1c917f756089428688f7dde8c5246e42b775468212d003e9d5a723ffffec1b19.jpg", "table_caption": ["Table 6: Extended sensitivity study on threshold learning rate. "], "table_footnote": [], "page_idx": 18}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "588   \n589   \n590   \n591   \n592   \n593   \n594   \n595   \n596   \n597   \n598   \n599   \n600   \n601   \n602   \n603   \n604   \n605   \n606   \n607   \n608   \n609   \n610   \n611   \n612   \n613   \n614   \n615   \n616   \n617   \n618   \n619   \n620 ", "page_idx": 18}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and   \na complete (and correct) proof?   \nAnswer: [NA]   \nJustification: Our work does not include theoretical results.   \nGuidelines: \u2022 The answer NA means that the paper does not include theoretical results. \u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced. \u2022 All assumptions should be clearly stated or referenced in the statement of any theorems. ", "page_idx": 18}, {"type": "text", "text": "\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition. \u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material. \u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 19}, {"type": "text", "text": "628 4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: We provided our codes that able to reproduce our model\u2019s result. Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 19}, {"type": "text", "text": "666 5. Open access to data and code ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "676 \u2022 While we encourage the release of code and data, we understand that this might not be   \n677 possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not   \n678 including code, unless this is central to the contribution (e.g., for a new open-source   \n679 benchmark).   \n680 \u2022 The instructions should contain the exact command and environment needed to run to   \n681 reproduce the results. See the NeurIPS code and data submission guidelines (https:   \n682 //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n683 \u2022 The authors should provide instructions on data access and preparation, including how   \n684 to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n685 \u2022 The authors should provide scripts to reproduce all experimental results for the new   \n686 proposed method and baselines. If only a subset of experiments are reproducible, they   \n687 should state which ones are omitted from the script and why.   \n688 \u2022 At submission time, to preserve anonymity, the authors should release anonymized   \n689 versions (if applicable).   \n690 \u2022 Providing as much information as possible in supplemental material (appended to the   \n691 paper) is recommended, but including URLs to data and code is permitted.   \n692 6. Experimental Setting/Details   \n693 Question: Does the paper specify all the training and test details (e.g., data splits, hyper  \n694 parameters, how they were chosen, type of optimizer, etc.) necessary to understand the   \n695 results?   \n696 Answer: [Yes]   \n697 Justification: We wrote experiment setting in the experiment settings including GNN layers,   \n698 hyperparameter for the hidden dimension, and learning rate of the whole dataset. Also, we   \n699 wrote epochs and dataset we split was used by 10 fold CV for our evaluations.   \n700 Guidelines:   \n701 \u2022 The answer NA means that the paper does not include experiments.   \n702 \u2022 The experimental setting should be presented in the core of the paper to a level of detail   \n703 that is necessary to appreciate the results and make sense of them.   \n704 \u2022 The full details can be provided either with the code, in appendix, or as supplemental   \n705 material.   \n706 7. Experiment Statistical Significance   \n707 Question: Does the paper report error bars suitably and correctly defined or other appropriate   \n708 information about the statistical significance of the experiments?   \n709 Answer: [Yes]   \n710 Justification: We reported error of confidence level in the main table.   \n711 Guidelines:   \n712 \u2022 The answer NA means that the paper does not include experiments.   \n713 \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confi  \n714 dence intervals, or statistical significance tests, at least for the experiments that support   \n715 the main claims of the paper.   \n716 \u2022 The factors of variability that the error bars are capturing should be clearly stated (for   \n717 example, train/test split, initialization, random drawing of some parameter, or overall   \n718 run with given experimental conditions).   \n719 \u2022 The method for calculating the error bars should be explained (closed form formula,   \n720 call to a library function, bootstrap, etc.)   \n721 \u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n722 \u2022 It should be clear whether the error bar is the standard deviation or the standard error   \n723 of the mean.   \n724 \u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should   \n725 preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis   \n726 of Normality of errors is not verified.   \n727 \u2022 For asymmetric distributions, the authors should be careful not to show in tables or   \n728 figures symmetric error bars that would yield results that are out of range (e.g. negative   \n729 error rates).   \n730 \u2022 If error bars are reported in tables or plots, The authors should explain in the text how   \n731 they were calculated and reference the corresponding figures or tables in the text.   \n732 8. Experiments Compute Resources   \n733 Question: For each experiment, does the paper provide sufficient information on the com  \n734 puter resources (type of compute workers, memory, time of execution) needed to reproduce   \n735 the experiments?   \n736 Answer: [Yes]   \n737 Justification: It refers to the appendix for experimental settings.   \n738 Guidelines:   \n739 \u2022 The answer NA means that the paper does not include experiments.   \n740 \u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster,   \n741 or cloud provider, including relevant memory and storage.   \n742 \u2022 The paper should provide the amount of compute required for each of the individual   \n743 experimental runs as well as estimate the total compute.   \n744 \u2022 The paper should disclose whether the full research project required more compute   \n745 than the experiments reported in the paper (e.g., preliminary or failed experiments that   \n746 didn\u2019t make it into the paper).   \n747 9. Code Of Ethics   \n748 Question: Does the research conducted in the paper conform, in every respect, with the   \n749 NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines?   \n750 Answer: [Yes]   \n751 Justification: Research conducted in the paper conforms, in every respect, with the NeurIPS   \n752 Code of Ethics   \n753 Guidelines:   \n754 \u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n755 \u2022 If the authors answer No, they should explain the special circumstances that require a   \n756 deviation from the Code of Ethics.   \n757 \u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consid  \n758 eration due to laws or regulations in their jurisdiction).   \n759 10. Broader Impacts   \n760 Question: Does the paper discuss both potential positive societal impacts and negative   \n761 societal impacts of the work performed?   \n762 Answer: [Yes]   \n763 Justification: SNN would be one of the breakthrough idea in respect of energy consumption. ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "764 Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. ", "page_idx": 21}, {"type": "text", "text": "779 \u2022 The authors should consider possible harms that could arise when the technology is   \n780 being used as intended and functioning correctly, harms that could arise when the   \n781 technology is being used as intended but gives incorrect results, and harms following   \n782 from (intentional or unintentional) misuse of the technology.   \n783 \u2022 If there are negative societal impacts, the authors could also discuss possible mitigation   \n784 strategies (e.g., gated release of models, providing defenses in addition to attacks,   \n785 mechanisms for monitoring misuse, mechanisms to monitor how a system learns from   \n786 feedback over time, improving the efficiency and accessibility of ML).   \n787 11. Safeguards   \n788 Question: Does the paper describe safeguards that have been put in place for responsible   \n789 release of data or models that have a high risk for misuse (e.g., pretrained language models,   \n790 image generators, or scraped datasets)?   \n791 Answer: [NA]   \n792 Justification: Our paper poses no such risks for high risk for misuse.   \n793 Guidelines:   \n794 \u2022 The answer NA means that the paper poses no such risks.   \n795 \u2022 Released models that have a high risk for misuse or dual-use should be released with   \n796 necessary safeguards to allow for controlled use of the model, for example by requiring   \n797 that users adhere to usage guidelines or restrictions to access the model or implementing   \n798 safety filters.   \n799 \u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors   \n800 should describe how they avoided releasing unsafe images.   \n801 \u2022 We recognize that providing effective safeguards is challenging, and many papers do   \n802 not require this, but we encourage authors to take this into account and make a best   \n803 faith effort.   \n804 12. Licenses for existing assets   \n805 Question: Are the creators or original owners of assets (e.g., code, data, models), used in   \n806 the paper, properly credited and are the license and terms of use explicitly mentioned and   \n807 properly respected?   \n808 Answer: [Yes]   \n809 Justification: We reported owners of assets used in the paper in the Appendix   \n810 Guidelines:   \n811 \u2022 The answer NA means that the paper does not use existing assets.   \n812 \u2022 The authors should cite the original paper that produced the code package or dataset.   \n813 \u2022 The authors should state which version of the asset is used and, if possible, include a   \n814 URL.   \n815 \u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n816 \u2022 For scraped data from a particular source (e.g., website), the copyright and terms of   \n817 service of that source should be provided.   \n818 \u2022 If assets are released, the license, copyright information, and terms of use in the   \n819 package should be provided. For popular datasets, paperswithcode.com/datasets   \n820 has curated licenses for some datasets. Their licensing guide can help determine the   \n821 license of a dataset.   \n822 \u2022 For existing datasets that are re-packaged, both the original license and the license of   \n823 the derived asset (if it has changed) should be provided.   \n824 \u2022 If this information is not available online, the authors are encouraged to reach out to   \n825 the asset\u2019s creators.   \n826 13. New Assets   \n827 Question: Are new assets introduced in the paper well documented and is the documentation ", "page_idx": 22}, {"type": "text", "text": "828 provided alongside the assets? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "30 Justification: Considering our implemtation code is our asset, our work provides necessary   \n31 license and documents for further usage.   \n32 Guidelines:   \n33 \u2022 The answer NA means that the paper does not release new assets.   \n34 \u2022 Researchers should communicate the details of the dataset/code/model as part of their   \n35 submissions via structured templates. This includes details about training, license,   \n36 limitations, etc.   \n37 \u2022 The paper should discuss whether and how consent was obtained from people whose   \n38 asset is used.   \n39 \u2022 At submission time, remember to anonymize your assets (if applicable). You can either   \n40 create an anonymized URL or include an anonymized zip file.   \n41 14. Crowdsourcing and Research with Human Subjects   \n42 Question: For crowdsourcing experiments and research with human subjects, does the paper   \n43 include the full text of instructions given to participants and screenshots, if applicable, as   \n44 well as details about compensation (if any)?   \n45 Answer: [NA]   \n46 Justification: Our work does not involve crowdsourcing nor research with human subjects.   \n47 Guidelines:   \n48 \u2022 The answer NA means that the paper does not involve crowdsourcing nor research with   \n49 human subjects.   \n50 \u2022 Including this information in the supplemental material is fine, but if the main contribu  \n51 tion of the paper involves human subjects, then as much detail as possible should be   \n52 included in the main paper.   \n53 \u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation,   \n54 or other labor should be paid at least the minimum wage in the country of the data   \n55 collector.   \n56 15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human   \n57 Subjects   \n58 Question: Does the paper describe potential risks incurred by study participants, whether   \n59 such risks were disclosed to the subjects, and whether Institutional Review Board (IRB)   \n60 approvals (or an equivalent approval/review based on the requirements of your country or   \n61 institution) were obtained?   \n62 Answer: [NA]   \n63 Justification: Our work does not require IRB approvals and does not involve human subjects.   \n64 Guidelines:   \n65 \u2022 The answer NA means that the paper does not involve crowdsourcing nor research with   \n66 human subjects.   \n67 \u2022 Depending on the country in which research is conducted, IRB approval (or equivalent)   \n68 may be required for any human subjects research. If you obtained IRB approval, you   \n69 should clearly state this in the paper.   \n70 \u2022 We recognize that the procedures for this may vary significantly between institutions   \nand locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the   \n72 guidelines for their institution.   \n73 \u2022 For initial submissions, do not include any information that would break anonymity (if   \n74 applicable), such as the institution conducting the review. ", "page_idx": 23}]