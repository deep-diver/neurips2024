[{"figure_path": "rniiAVjHi5/figures/figures_9_1.jpg", "caption": "Figure 1: Comparison of different methods on the polyhedron feasibility problem (5).", "description": "This figure compares the performance of several optimization algorithms on a polyhedron feasibility problem.  The algorithms include UniSgd, UniFastSgd, AdaSVRG, UniSvrg, AdaVRAG, AdaVRAE, and FastSVRG. The x-axis represents the number of stochastic oracle calls, and the y-axis represents the function residual. The graph shows how quickly each algorithm converges to a solution, with different lines representing different algorithms and different colors representing different values of q (the H\u00f6lder smoothness parameter).", "section": "Experiments"}, {"figure_path": "rniiAVjHi5/figures/figures_9_2.jpg", "caption": "Figure 2: Impact of mini-batch size on performance of our methods.", "description": "The figure shows how the performance of four different algorithms (UniSgd, UniFastSgd, UniSvrg, and UniFastSvrg) varies with different mini-batch sizes (64, 512, and 4096) when applied to the polyhedron feasibility problem. Each algorithm is represented by three lines corresponding to the three mini-batch sizes.  The y-axis is the function residual and the x-axis is the number of stochastic oracle calls.", "section": "Experiments"}, {"figure_path": "rniiAVjHi5/figures/figures_35_1.jpg", "caption": "Figure 1: Comparison of different methods on the polyhedron feasibility problem (5).", "description": "This figure compares the performance of various optimization algorithms on the polyhedron feasibility problem (5), which involves finding a point within a polyhedron while satisfying a constraint.  The algorithms are UniSgd, UniFastSgd (both introduced in the paper), AdaSVRG, UniSvrg, AdaVRAG, AdaVRAE, and FastSvrg.  The x-axis represents the number of stochastic oracle calls, and the y-axis represents the function residual (f(x) - f*). The plots show how quickly each algorithm reduces the function residual. Different line colors and styles correspond to different algorithms, allowing a clear visual comparison of their convergence rates.", "section": "Experiments"}, {"figure_path": "rniiAVjHi5/figures/figures_36_1.jpg", "caption": "Figure 4: Comparison of our methods for different stepsize update rules on the polyhedron feasibility problem.", "description": "This figure compares the performance of four different methods (UniSgd, UniSvrg, UniFastSgd, UniFastSvrg) using two different stepsize update rules (AdaGrad and another rule).  The performance is evaluated on the polyhedron feasibility problem for various values of the parameter q (1.0, 1.3, 1.6, 2.0), which affects the smoothness of the problem. The plots show the function residual and the step size (inverse of M) against the number of stochastic oracle calls. The results demonstrate that the two stepsize update rules perform very similarly for all methods and problems.", "section": "H Additional Experiments"}, {"figure_path": "rniiAVjHi5/figures/figures_37_1.jpg", "caption": "Figure 4: Comparison of our methods for different stepsize update rules on the polyhedron feasibility problem.", "description": "This figure compares the performance of four different methods (UniSgd, UniFastSgd, UniSvrg, UniFastSvrg) using two different stepsize update rules (AdaGrad and another rule) on the polyhedron feasibility problem.  The plot shows how the function residual (f(x) - f*) decreases over the number of stochastic oracle calls for different values of q (1, 1.3, 1.6, 2), representing different smoothness levels.  It also plots the step size (1/M) over the same x-axis for each scenario.  The figure aims to demonstrate the impact of stepsize rules on the overall performance and convergence rates.", "section": "H Additional Experiments"}]