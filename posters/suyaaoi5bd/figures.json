[{"figure_path": "suYAAOI5bd/figures/figures_3_1.jpg", "caption": "Figure 1: Partial derivatives of sum nodes.", "description": "This figure illustrates the concept of partial derivatives in the context of sum nodes within probabilistic circuits. It shows how the partial derivative of a sum node's polynomial (fv) with respect to another node (w or w') can be calculated using the polynomials computed by the children of the sum node and weights of the edges.  Specifically, it demonstrates the chain rule applied to partial derivatives of sum nodes.", "section": "2 Preliminaries"}, {"figure_path": "suYAAOI5bd/figures/figures_8_1.jpg", "caption": "Figure 1: Partial derivatives of sum nodes.", "description": "This figure illustrates the concept of partial derivatives in the context of sum nodes within probabilistic circuits. It visually demonstrates how the partial derivative of a sum node's polynomial with respect to another node is calculated by substituting the polynomial of the node being derived with respect to with a variable y, computing the resulting polynomial, and then taking the derivative with respect to y.", "section": "Preliminaries"}, {"figure_path": "suYAAOI5bd/figures/figures_12_1.jpg", "caption": "Figure 2: The process of transforming a non-binary DAG-structured PC to a binary one that computes the identical network polynomial. We omit the edge weights for simplicity.", "description": "This figure illustrates a method to transform a non-binary DAG-structured probabilistic circuit into a binary one while preserving the computed polynomial.  The transformation involves replacing nodes with more than two children by introducing intermediate sum and product nodes. This process ensures that each node in the resulting circuit has at most two children, which simplifies analysis and proofs in the paper, specifically regarding partial derivatives.", "section": "A Missing proofs in Section 3"}, {"figure_path": "suYAAOI5bd/figures/figures_15_1.jpg", "caption": "Figure 2: The process of transforming a non-binary DAG-structured PC to a binary one that computes the identical network polynomial. We omit the edge weights for simplicity.", "description": "The figure illustrates the transformation of a non-binary DAG-structured probabilistic circuit into an equivalent binary DAG-structured probabilistic circuit.  The transformation involves replacing nodes with more than two children by introducing intermediate nodes to reduce the maximum number of children per node to two. This ensures that each node has at most two children, simplifying further analysis and constructions in the paper. The edge weights are omitted for clarity.", "section": "A Missing proofs in Section 3"}, {"figure_path": "suYAAOI5bd/figures/figures_20_1.jpg", "caption": "Figure 2: The process of transforming a non-binary DAG-structured PC to a binary one that computes the identical network polynomial. We omit the edge weights for simplicity.", "description": "The figure illustrates a transformation of a non-binary DAG-structured probabilistic circuit into an equivalent binary one.  The transformation involves replacing nodes with more than two children (sum or product nodes) with a series of intermediate nodes to ensure each node has at most two children. The process maintains the functionality of the original circuit while ensuring a binary structure, which is crucial for certain complexity analysis in the paper.  Edge weights are omitted for clarity.", "section": "A Missing proofs in Section 3"}]