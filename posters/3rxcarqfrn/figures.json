[{"figure_path": "3RxcarQFRn/figures/figures_1_1.jpg", "caption": "Figure 1: Na\u00efve offline model-based optimization (MBO) (Trabucco et al., 2021), which optimizes against a learned surrogate model fe trained on a fixed dataset Dn = {(xi, Yi)}=1 (shaded region) without access to the true oracle f, often yields candidate designs x* (i.e., diamond) that score poorly using the true oracle (i.e., cross). Our method (aSCR) constrains optimization trajectories to avoid these extrapolated points, instead proposing 'in-distribution' designs (i.e., star).", "description": "The figure illustrates the problem of naive offline model-based optimization (MBO).  A surrogate model is trained on a limited dataset and used to find optimal designs. However, because the surrogate model is only trained on the limited data, it can extrapolate poorly into areas where it is not accurate, leading to poor designs when measured against the true objective function. The authors' proposed method (aSCR) addresses this by constraining the optimization trajectory to regions where the surrogate model is reliable, thus improving the overall design.", "section": "1 Introduction"}, {"figure_path": "3RxcarQFRn/figures/figures_9_1.jpg", "caption": "Figure 2: Penalized LogP Score Maximization Sample Candidate Designs (Left) The molecule with the highest penalized LogP score of 11.3 in the offline dataset. Separately, we show the 100th percentile candidate molecules according to the surrogate objective generated from (Middle) vanilla BO-qEI and (Right) GABO. Teal-(white-)colored atoms are carbon (hydrogen). Non-hydrocarbon atoms are underlined in the SMILES (Weininger, 1988) string representations of the molecules.", "description": "This figure compares three molecules: the best molecule from the offline dataset, the molecule generated by the BO-qEI method, and the molecule generated by the proposed GABO method.  It highlights how the proposed method is able to generate a higher-scoring molecule by avoiding overestimation errors in the surrogate model.", "section": "Qualitative Evaluation: Penalized LogP Task"}, {"figure_path": "3RxcarQFRn/figures/figures_17_1.jpg", "caption": "Figure 2: Penalized LogP Score Maximization Sample Candidate Designs (Left) The molecule with the highest penalized LogP score of 11.3 in the offline dataset. Separately, we show the 100th percentile candidate molecules according to the surrogate objective generated from (Middle) vanilla BO-qEI and (Right) GABO. Teal-(white-)colored atoms are carbon (hydrogen). Non-hydrocarbon atoms are underlined in the SMILES (Weininger, 1988) string representations of the molecules.", "description": "This figure compares the top molecule from the offline dataset with the top molecule generated by two different optimization methods, BO-qEI and GABO.  The image shows that BO-qEI produces a molecule with rings which results in a lower penalized LogP score.  GABO produces a molecule without rings, leading to a higher score.", "section": "Qualitative Evaluation: Penalized LogP Task"}, {"figure_path": "3RxcarQFRn/figures/figures_22_1.jpg", "caption": "Figure B2: 100th Percentile Oracle Scores versus k-Shot Oracle Budget Size We plot the 100th percentile oracle Penalized LogP score averaged across 10 random seeds as a function of the number of allowed oracle calls k.", "description": "This figure shows the performance of different offline model-based optimization methods for the Penalized LogP task as a function of the number of allowed oracle calls (k).  It demonstrates how the best observed oracle score varies across methods as the oracle query budget increases.  The graph highlights the relative performance of each algorithm under different resource constraints. The methods compared include gradient ascent, L-BFGS, CMA-ES, standard Bayesian Optimization (BO-qEI), TURBO-qEI, BONET, DDOM, COM, RoMA, BDI, BootGen, GAGA, and GABO.", "section": "Additional Experimental Results"}, {"figure_path": "3RxcarQFRn/figures/figures_23_1.jpg", "caption": "Figure B2: 100th Percentile Oracle Scores versus k-Shot Oracle Budget Size We plot the 100th percentile oracle Penalized LogP score averaged across 10 random seeds as a function of the number of allowed oracle calls k.", "description": "This figure shows how the best observed oracle penalized LogP score changes as the number of allowed oracle calls (k) increases for various offline model-based optimization (MBO) methods.  It demonstrates how the performance of different MBO algorithms varies depending on the oracle query budget.  GABO and GAGA, which incorporate the adaptive source critic regularization, show better performance, especially when the budget is limited.", "section": "Additional Experimental Results"}]