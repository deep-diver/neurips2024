[{"figure_path": "4SAR7IRqmB/figures/figures_3_1.jpg", "caption": "Figure 2: A simple illustration on importance of extreme rays. D, D', D\" succeed in teaching but D fails depending on if they cover the extreme rays of cone(\u03a8(D)).", "description": "This figure illustrates the concept of extreme rays in the context of teaching a linear version space learner.  The version space V(D) is represented by the green shaded area, and the primal cone cone(\u03a8(D)) is represented by the blue shaded area. The dots represent feature difference vectors. The figure shows four different datasets (D, D', D\", D\\\"). While D, D', and D\" successfully teach the target policy, dataset D fails. This demonstrates that simply covering a sufficient number of feature difference vectors may not guarantee successful teaching. The key lies in covering the extreme rays (edges) of the primal cone.", "section": "3.2 Teaching as a Finite Set Cover Problem on Extreme Rays of Primal cone (\u03a8(Ds))"}, {"figure_path": "4SAR7IRqmB/figures/figures_4_1.jpg", "caption": "Figure 2: A simple illustration on importance of extreme rays. D, D', D\" succeed in teaching but D fails depending on if they cover the extreme rays of cone(\u03a8(D)).", "description": "This figure demonstrates the importance of covering extreme rays of the primal cone in the optimal teaching problem for linear behavior cloning learners. It shows four datasets (D, D', D\", and D''') and their corresponding primal cones and version spaces. Datasets D, D', and D\" successfully teach the target policy, while dataset D fails because it does not cover all the extreme rays of the primal cone. This illustrates that a teaching set must cover all the extreme rays to unambiguously teach the entire family of consistent linear BC learners.", "section": "3.2 Teaching as a Finite Set Cover Problem on Extreme Rays of Primal cone(\u03a8(Ds))"}, {"figure_path": "4SAR7IRqmB/figures/figures_7_1.jpg", "caption": "Figure 4: Optimal teaching in \"Pick the right diamond\" with n = 6 slots. a) Feature difference vectors (Ds) induced by target policy is shown as blue dots, primal cone cone(\u03a8(Ds)) as blue area, and dual version space V(Ds) as green area. b) A teaching set produced by Greedy-TIE on board of size 6. c) Comparison of our Greedy-TIE algorithm with other baselines.", "description": "This figure demonstrates the results of the optimal teaching algorithm Greedy-TIE on the \"Pick the Right Diamond\" game with 6 slots.  Panel (a) shows a visualization of the feature space, highlighting the primal cone, dual version space, and the feature difference vectors. Panel (b) displays a teaching set generated by Greedy-TIE.  Panel (c) presents a comparison of Greedy-TIE's performance against other baselines (Teach-All and Teach-Random) in terms of teaching set size, demonstrating Greedy-TIE's superior efficiency in reducing the dataset required for effective teaching.", "section": "4 Experiments"}, {"figure_path": "4SAR7IRqmB/figures/figures_8_1.jpg", "caption": "Figure 5: a) An example of a programming task in 5 \u00d7 5 with solution code. The maze contains a turtle facing one of four directions (shown by a green arrow) and a goal cell (shown by a red star). The optimal (smallest) solution code to lead the turtle to the goal is shown on the side. The action space consisting of 5 basic code blocks is shown on the right. b) Performance of Greedy-TIE compared to baselines on this domain with different maze sizes.", "description": "Figure 5(a) shows an example of a visual programming task in a 5x5 maze.  The goal is to programmatically guide a turtle to a goal location using a limited set of code blocks (move forward, turn left, turn right, repeat).  Figure 5(b) presents a graph comparing the performance of the proposed Greedy-TIE algorithm against two baseline approaches (Teach-All and Teach-Random) across mazes of varying sizes.  The y-axis represents the size of the teaching set, while the x-axis shows the grid size of the maze.", "section": "4.2 Visual Block Programming in Maze with Repeat Loop"}, {"figure_path": "4SAR7IRqmB/figures/figures_9_1.jpg", "caption": "Figure 6: Optimal Teaching Set produced by Greedy-TIE on a goal-reaching coding task with 5 \u00d7 5 maze. The demonstration consists of states with an initial board without any partial code. The optimal action demonstrated to the learner is shown below each state.", "description": "This figure shows the optimal teaching set generated by the Greedy-TIE algorithm for a goal-reaching coding task on a 5x5 maze.  The teaching set consists of a sequence of states, each showing the initial board (without any partial code) and the optimal action (code block) to take in that state. The figure demonstrates how the algorithm produces a compact and efficient set of demonstrations that is sufficient to teach the target policy to the entire family of consistent linear BC learners.", "section": "4.2 Visual Block Programming in Maze with Repeat Loop"}, {"figure_path": "4SAR7IRqmB/figures/figures_17_1.jpg", "caption": "Figure 7: An reduction example from a set cover problem to optimal teaching LBC problem", "description": "This figure demonstrates a reduction from a set cover problem to an optimal teaching linear behavior cloning (LBC) problem.  It shows how a set cover instance (left side) with a universe U and subsets V1, V2, and V3 can be mapped to an equivalent optimal teaching instance (right side) with states S corresponding to the subsets and actions A related to the size of the universe and the target policy. The mapping ensures that a solution to the set cover problem directly translates to a solution to the teaching problem and vice versa, proving the NP-hardness of the optimal teaching problem.", "section": "Theorem 5 (Hardness of Optimal Teaching)"}, {"figure_path": "4SAR7IRqmB/figures/figures_18_1.jpg", "caption": "Figure 8: Polygon Tower. a) All feature difference vectors for n = 6. b) Top-down view of the extreme vectors of the primal cone for n = 6. c) TIE running time on polygon tower with increasing n. d) The teaching dimension (optimal) vs. the demonstration set size found by TIE. They overlap. In fact, TIE finds the exact correct optimal teaching sets on polygon tower.", "description": "This figure visualizes the results of the Polygon Tower experiment. Subfigure (a) shows all feature difference vectors for n=6, illustrating the data used in the experiment. Subfigure (b) provides a top-down view of the extreme vectors in the primal cone when n=6, highlighting the key features for optimal teaching. Subfigure (c) presents a graph showing the running time of the TIE algorithm against the increasing size of the problem (n). Finally, subfigure (d) compares the optimal teaching dimension to the teaching set size obtained by TIE, demonstrating that TIE accurately finds the optimal teaching set in this scenario.", "section": "More Experimental Results"}, {"figure_path": "4SAR7IRqmB/figures/figures_19_1.jpg", "caption": "Figure 9: Performance of TIE compared to other baselines on visual programming task with local(on the left) and global features(on the right).", "description": "The figure compares the performance of three teaching algorithms: Teach-TIE (the proposed algorithm), Teach-All (teaching all states), and Teach-Random (randomly selecting states until a valid teaching set is obtained). The comparison is shown for two different feature representations: local features (left panel) and global features (right panel).  The x-axis represents the grid size of the maze in the visual programming task, and the y-axis shows the size of the teaching set generated by each algorithm.  Error bars are included to indicate the variability in the results. The results suggest that Teach-TIE consistently requires a smaller teaching set size compared to the other baselines, demonstrating its efficiency in teaching the visual programming task.", "section": "4 Experiments"}]