[{"figure_path": "RdAfUp4LcD/figures/figures_1_1.jpg", "caption": "Figure 1: A representative experimental result on the MiniBooNE [22] dataset (left) and conceptual diagram of the LMC for tree ensembles (right).", "description": "The figure shows two subfigures. The left subfigure presents experimental results obtained from the MiniBooNE dataset. It contains two plots, one for the full dataset and another for a split dataset. Each plot shows the test accuracy variation during linear interpolation between two model parameters obtained from different random initializations.  Three methods are compared: a naive approach, considering only tree permutation invariance, and the authors' proposed method. The right subfigure provides a conceptual illustration of linear mode connectivity (LMC) for tree ensembles, visualizing the parameter space as a landscape with local minima. It demonstrates how considering additional invariances (beyond tree permutation) enables a smoother path (green line) between functionally equivalent models, unlike the naive approach or considering only tree permutation invariance (orange dashed line).", "section": "Abstract"}, {"figure_path": "RdAfUp4LcD/figures/figures_3_1.jpg", "caption": "Figure 2: (a) Subtree flip invariance. (b) Splitting order invariance for an oblivious tree.", "description": "This figure illustrates two types of invariances specific to tree structures. (a) shows subtree flip invariance, where swapping the left and right subtrees while simultaneously inverting the inequality sign at the split maintains functional equivalence.  This is because the sigmoid function used in soft trees exhibits symmetry, \u03c3(-c) = 1 - \u03c3(c). (b) demonstrates splitting order invariance for oblivious trees (trees with shared parameters at the same depth).  In oblivious trees, swapping the splitting order at different depths results in functional equivalence if the positions of the leaves are also swapped accordingly, maintaining the same decision boundaries.", "section": "3 Invariances Inherent to Tree Ensembles"}, {"figure_path": "RdAfUp4LcD/figures/figures_4_1.jpg", "caption": "Figure 3: Weighting strategy.", "description": "This figure illustrates how weights are assigned to nodes in a tree structure for matching functionally equivalent trees.  The weight of each node is determined by the number of leaves it affects.  For example, in the left tree, the root node affects 8 leaves, nodes at depth 2 affect 4 leaves each, and depth 3 nodes affect 2 leaves each.  The right-hand side shows an example of a non-perfect binary tree, illustrating the weight assignment adapts to different tree structures. This weighting is crucial for the activation matching and weight matching algorithms described in the paper, as it ensures that the contribution of each node is considered during the comparison of functionally equivalent trees.", "section": "3.2 Matching Strategy"}, {"figure_path": "RdAfUp4LcD/figures/figures_5_1.jpg", "caption": "Figure 4: Tree architecture where neither subtree flip invariance nor splitting order invariance exists.", "description": "This figure illustrates two tree structures. The left tree is a standard binary tree, where a subtree can be flipped, resulting in an equivalent tree, and the splitting order can be changed without affecting functionality. The right tree is a modified decision list-based tree, which eliminates subtree flip invariance and splitting order invariance.  By making one terminal leaf an empty node, the tree structure becomes asymmetric preventing the invariances present in the standard binary tree. This modification allows for a more efficient matching strategy in Linear Mode Connectivity (LMC) evaluation because these invariances do not need to be considered.", "section": "3.3 Architecture-dependency of the Invariances"}, {"figure_path": "RdAfUp4LcD/figures/figures_6_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the barriers (a measure of the difficulty of linearly interpolating between two models) for both oblivious and non-oblivious tree ensembles.  It shows the effects of considering different invariances (tree permutation, subtree flip, and splitting order) on the barrier values.  Lower barriers indicate better Linear Mode Connectivity (LMC). The results are presented separately for weight matching (WM) and activation matching (AM) and for different numbers of trees (M) and depths (D). The error bars represent the standard deviation across five different random initializations.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_6_2.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the averaged accuracy barriers across 16 datasets for different tree architectures (non-oblivious and oblivious) and considering different invariances (naive, permutation only, permutation and subtree flip, permutation, subtree flip and splitting order).  The top row shows results for non-oblivious trees and the bottom row for oblivious trees. Error bars represent the standard deviation across 5 different executions.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_7_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure shows the effect of considering different invariances (tree permutation, subtree flip, and splitting order) on the barrier, a measure of the performance difference between two models with linearly interpolated parameters, in both oblivious and non-oblivious tree ensembles.  The top row displays the results for non-oblivious trees, while the bottom row shows the results for oblivious trees.  The results are averaged across 16 datasets.  Lower barriers indicate better Linear Mode Connectivity (LMC). The error bars show the variability of the results across five independent trials.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_8_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the impact of considering different invariances (none, permutation only, permutation + subtree flip, permutation + subtree flip + splitting order) on the averaged accuracy barrier across 16 datasets.  The results are shown separately for both non-oblivious and oblivious trees. The top row presents results for non-oblivious trees while the bottom row displays results for oblivious trees.  Error bars indicate standard deviation across 5 separate executions.  The figure demonstrates that incorporating more invariances reduces the barrier, suggesting that accounting for these architectural features is crucial for achieving Linear Mode Connectivity (LMC).", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_16_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the averaged accuracy barriers across 16 datasets from the Tabular Benchmark.  It compares the impact of different invariances (naive, only tree permutation, and tree permutation with subtree flip and splitting order invariances) on the barriers for both non-oblivious and oblivious tree ensembles. The top row shows the results for non-oblivious trees, while the bottom row displays the results for oblivious trees. The error bars represent the standard deviation across 5 independent executions, indicating the variability of the results.  The results illustrate the significant reduction in barriers when considering all relevant invariances for both tree types.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_16_2.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the averaged accuracy barriers across 16 datasets from the Tabular Benchmark dataset.  The barriers are calculated for different tree architectures (oblivious and non-oblivious) and by considering varying numbers of invariances (Naive, Perm, Perm&Flip).  The top row shows results for non-oblivious trees, while the bottom row shows results for oblivious trees. Error bars represent the standard deviation across 5 separate executions, illustrating the variability of the results. The results are presented for both activation matching and weight matching, and for different depths (D) and numbers of trees (M), providing insights into how the considered invariances impact the barrier in relation to tree architecture parameters.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_16_3.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure shows the effect of considering different invariances (Naive, Permutation, Permutation&Flip, and Permutation&Flip&Order) on the barrier for both oblivious and non-oblivious trees. The top row shows the results for non-oblivious trees, while the bottom row shows the results for oblivious trees. The left panels show the results when varying tree depth while keeping the number of trees constant, and the right panels show the results when varying the number of trees while keeping the tree depth constant. Each bar represents the average barrier across 16 datasets, and the error bars show the standard deviations across 5 executions. The figure demonstrates that considering additional invariances (beyond tree permutation) significantly reduces the barrier, especially for non-oblivious trees, suggesting that LMC is more easily achieved when these invariances are considered.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_16_4.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure shows the average barrier (a measure of the difficulty in interpolating between two models) across 16 different datasets.  The barriers are calculated for both oblivious and non-oblivious trees, considering different levels of invariance (only tree permutation, permutation and subtree flip, permutation and splitting order invariance, permutation, subtree flip and splitting order invariance).  The top row shows results for non-oblivious trees and the bottom row for oblivious trees. The error bars illustrate the variability across 5 independent runs of the experiment.  The results indicate how considering these invariances affects the barrier, thus illustrating their role in achieving Linear Mode Connectivity (LMC).", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_17_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure shows the average barrier values across 16 datasets for different tree structures (oblivious and non-oblivious). It compares the performance of different matching strategies (Naive, considering only permutation invariance; Perm, adding subtree flip invariance; Perm&Flip, adding splitting order invariance) in reducing the barrier.  The results are displayed separately for training and testing sets. Error bars indicate the standard deviation across 5 runs of the experiment.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_17_2.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the averaged accuracy barriers across 16 datasets.  The barriers are calculated for different tree architectures (oblivious and non-oblivious) and by considering varying levels of invariance (Naive, Permutation, Permutation & Flip, Permutation & Flip & Order). The top row shows results for non-oblivious trees, and the bottom row shows results for oblivious trees.  Error bars represent the standard deviation across 5 independent experiment runs for each condition. The figure demonstrates the impact of incorporating different types of tree invariances on the performance consistency of linearly interpolated models.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_17_3.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the averaged accuracy barriers across 16 datasets for different tree architectures (non-oblivious and oblivious) and methods of matching parameters while preserving functional equivalence.  Each bar represents the barrier with different levels of invariance considered: Naive (no invariance), Perm (only tree permutation invariance), and Perm&Flip (tree permutation and subtree flip invariance).  The error bars show the standard deviation across 5 runs, providing an indication of the variability of the results. The top row shows the results for non-oblivious trees and the bottom row for oblivious trees.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_17_4.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure shows the average barrier (with error bars representing standard deviation) across 16 datasets for different tree architectures (oblivious and non-oblivious) while considering different invariances (naive, permutation, permutation and flip, etc.). The results help understand how considering invariances beyond permutation affects Linear Mode Connectivity (LMC) in soft tree ensembles.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_18_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the averaged barriers (with standard deviations) across 16 datasets for both oblivious and non-oblivious trees.  It shows how the barrier changes depending on the invariances considered (Naive, Permutation, Permutation & Flip, and Permutation & Flip & Order).  The top row displays results for non-oblivious trees, and the bottom row displays results for oblivious trees. Each column represents a different experimental condition, varying the depth (D) or the number of trees (M), while using either Activation Matching (AM) or Weight Matching (WM). The figure helps to illustrate the impact of accounting for the additional invariances (subtree flip and splitting order) on reducing the barriers and achieving Linear Mode Connectivity (LMC).", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_18_2.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the averaged accuracy barriers across 16 datasets using different tree architectures (oblivious and non-oblivious) and considering various invariances (naive, permutation only, and permutation with subtree flip and splitting order). The top row shows results for non-oblivious trees, while the bottom row displays results for oblivious trees.  The different columns represent different hyperparameter settings (number of trees and tree depth). Error bars represent standard deviations across 5 experiment runs. The figure illustrates how the barrier changes with varying invariances and architectural choices.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_18_3.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the impact of different invariances (Naive, Permutation, Permutation&Flip, Permutation&Flip&Order) on the barrier for both oblivious and non-oblivious trees.  The top row shows results for non-oblivious trees and the bottom row for oblivious trees.  Each column represents a different combination of the number of trees (M) and tree depth (D) used in the experiment.  The error bars indicate the standard deviation across five independent runs of each experiment. The results demonstrate that considering multiple invariances beyond tree permutation leads to significantly lower barriers, indicating improved Linear Mode Connectivity (LMC).", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_18_4.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the average accuracy barriers across 16 datasets for both oblivious and non-oblivious trees.  The barriers are calculated by comparing the accuracy of linearly interpolated models (between model pairs trained from different initializations) to the maximum accuracy achieved by either of the original models. Different lines represent different levels of invariance considered (Naive, Permutation, Permutation&Flip). The results show that considering more invariances significantly reduces the barrier, indicating improved Linear Mode Connectivity (LMC). Error bars show standard deviation across five trials, highlighting the consistency of findings.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_19_1.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure compares the performance of three different methods (Naive, Tree Permutation, and Ours) for achieving Linear Mode Connectivity (LMC) in both oblivious and non-oblivious tree ensembles across 16 different datasets.  The top row shows results for non-oblivious trees, while the bottom row shows results for oblivious trees. Each bar represents the average barrier across the datasets, and the error bars indicate the standard deviation across 5 different experimental runs.  The 'Naive' method represents a baseline that does not incorporate invariances specific to tree architectures.  'Tree Permutation' accounts for tree permutation invariance (similar to what is used for neural networks). The 'Ours' method additionally accounts for subtree flip and splitting order invariances which are inherent to tree ensembles. The figure demonstrates that the \u2018Ours\u2019 method substantially reduces the barrier compared to the other two methods, suggesting its effectiveness in achieving LMC.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_19_2.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the averaged accuracy barriers across 16 datasets from the Tabular Benchmark.  The barriers are calculated for both oblivious and non-oblivious trees and for different combinations of invariances (Naive, Permutation, Permutation & Flip, Permutation & Flip & Order).  The top row shows results for non-oblivious trees, and the bottom row shows results for oblivious trees. Error bars represent the standard deviation across 5 experimental runs.  The figure demonstrates the impact of considering different invariances on the consistency of model performance when interpolating between parameters.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_19_3.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure shows the average barrier (with standard deviations) across 16 datasets, comparing different methods for handling invariances in both non-oblivious and oblivious trees.  The methods compared include considering only naive interpolation, permutation invariance, and then permutation plus additional invariances (subtree flip and splitting order). The results indicate that accounting for the additional invariances significantly reduces the barrier, suggesting improved linear mode connectivity (LMC). The impact of the number of trees (M) and tree depth (D) on the barrier is also illustrated.", "section": "4.2 Results for Perfect Binary Trees"}, {"figure_path": "RdAfUp4LcD/figures/figures_19_4.jpg", "caption": "Figure 5: Barriers averaged across 16 datasets with respect to considered invariances for non-oblivious (top row) and oblivious (bottom row) trees. The error bars show the standard deviations of 5 executions.", "description": "This figure displays the average accuracy barriers across 16 datasets for different tree architectures (oblivious and non-oblivious) and considering various invariances (Naive, only tree permutation, and considering all invariances). The barriers are computed using weight matching (WM) and activation matching (AM), and the results are plotted separately for training and test datasets. Each plot shows the averaged barrier and standard deviation across 5 executions, which facilitates understanding the impact of invariances on Linear Mode Connectivity (LMC).", "section": "4.2 Results for Perfect Binary Trees"}]