[{"figure_path": "kQPzFiwVIu/figures/figures_3_1.jpg", "caption": "Figure 2: The SPEAC workflow. Users input q, a task in natural language, and C, a description of the intermediate language. The LLM takes these inputs and generates p, a program in P. We use formal techniques to repair p and produce p', a program in C that possibly contains holes. If p' does not contain holes, SPEAC applies f, a compiler from C to the target language, T, and returns the result. Otherwise, SPEAC generates a new prompt, q', and repeats by asking the LLM to fill in the holes.", "description": "This figure illustrates the workflow of the Synthetic Programming Elicitation and Compilation (SPEAC) approach.  It starts with a user providing a natural language task (q) and a description of an intermediate language (C). A large language model (LLM) then generates a program (p) in a parent language (P).  The SPEAC system then attempts to repair this program (p) using formal methods, resulting in a repaired program (p') in language C.  This repaired program may or may not contain holes (unfilled parts of the code). If no holes exist, the system compiles (f) the program to the target language (T) and provides the output. If holes exist, a new prompt (q') is generated and sent to the LLM to complete the missing parts, iterating this process until a hole-free program is obtained.", "section": "5.2 (Minimal) Prompting"}, {"figure_path": "kQPzFiwVIu/figures/figures_6_1.jpg", "caption": "Figure 2: The SPEAC workflow. Users input q, a task in natural language, and C, a description of the intermediate language. The LLM takes these inputs and generates p, a program in P. We use formal techniques to repair p and produce p', a program in C that possibly contains holes. If p' does not contain holes, SPEAC applies f, a compiler from C to the target language, T, and returns the result. Otherwise, SPEAC generates a new prompt, q', and repeats by asking the LLM to fill in the holes.", "description": "This figure illustrates the workflow of the Synthetic Programming Elicitation and Compilation (SPEAC) approach.  It starts with a user providing a natural language task (q) and a description of an intermediate language (C). A large language model (LLM) generates a program (p) in a parent language (P).  Formal methods are then used to repair this program, resulting in a potentially incomplete program (p') in language C. If p' is complete, a compiler translates it into the target language (T). If p' is incomplete (contains holes), SPEAC generates a new prompt (q') and reiterates the process, using the LLM to fill the holes.", "section": "5. Approach"}]