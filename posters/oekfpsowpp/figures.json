[{"figure_path": "oEKFPSOWpp/figures/figures_1_1.jpg", "caption": "Figure 1: An illustrative example to show overflow-avoiding global routing in chip design. (a) Chip layout of a real-world net extracted from ISPD07_adaptec1. (b) Two-dimensional grid graph. (c) The Hanan grid of a 4-pin net. (d) The resource map and pin map (actually divided into two channels) obtained from (a) for this 4-pin net. (e) The predicted hub points (black circles) and stripe mask applied by Hubrouter [8]. (f) The routing result generated by HubRouter [8] suffers from congestion (red edges). (g) The candidate points (green circles) predicted by NeuralSteiner and the corresponding net augmented graph (NAG). (h) The final routing result generated by NeuralSteiner that avoids overflow.", "description": "This figure illustrates the overflow-avoiding global routing process using NeuralSteiner. It starts with a real-world chip layout and shows the steps involved in predicting Steiner points, constructing a net augmented graph, and generating overflow-avoiding rectilinear Steiner trees (RSTs). It compares the results with HubRouter, highlighting NeuralSteiner's ability to avoid congestion.", "section": "1 Introduction"}, {"figure_path": "oEKFPSOWpp/figures/figures_3_1.jpg", "caption": "Figure 2: Overview of NeuralSteiner. (a) The parallel routing tasks accelerate routing by grouping the non-overlapping nets into one batch. (b) During the first phase, NeuralSteiner predicts the candidate point locations for the RST with full-image aggregation of spatial and overflow information. (c) During the second phase, NeuralSteiner constructs the net augmented graphs based on the predicted candidate points and generates overflow-avoiding RSTs.", "description": "This figure illustrates the overall pipeline of the NeuralSteiner method. (a) shows the parallel processing of non-overlapping nets, enhancing efficiency. (b) details the first phase: a neural network predicts candidate points for RSTs using spatial and overflow information. (c) presents the second phase, where a net augmented graph is created based on predictions, leading to overflow-avoiding RST generation.", "section": "3 Method"}, {"figure_path": "oEKFPSOWpp/figures/figures_7_1.jpg", "caption": "Figure 3: Overflow on ISPD98 (ibm01-06). Overflow of Geosteiner, HubRouter (VAE, DPM, GAN) and NeuralSteiner on ISPD-98 (ibm01-06) cases. Note that NeuralSteiner causes only 18 overflows on ibm05, which is annotated in the figure.", "description": "This figure compares the overflow performance of NeuralSteiner against several other methods, including Geosteiner and three variants of HubRouter, across six benchmark datasets (ibm01-ibm06) from ISPD98.  It visually represents the total overflow count for each method on each dataset.  Noticeably, NeuralSteiner demonstrates a significant reduction in overflow compared to the other approaches, particularly on the ibm05 dataset where it only produces 18 overflows.", "section": "4 Results and Discussion"}, {"figure_path": "oEKFPSOWpp/figures/figures_8_1.jpg", "caption": "Figure 4: The Overflow Distribution after routing by HubRouter and NeuralSteiner. (a), (c): the horizontal and vertical overflow of HubRouter; (b), (d): the horizontal and vertical overflow of NeuralSteiner. Depth of red color indicates the number of overflow.", "description": "This figure visualizes the overflow distribution after global routing using HubRouter and the proposed NeuralSteiner method.  It presents four heatmaps: (a) and (c) show the horizontal and vertical overflow for HubRouter, respectively, while (b) and (d) do the same for NeuralSteiner. The color intensity (depth of red) represents the magnitude of overflow in each grid cell. This allows for a direct visual comparison of the overflow reduction achieved by NeuralSteiner compared to HubRouter, highlighting its effectiveness in mitigating congestion during the chip routing process.", "section": "4.4 Generalization and Ablation Study"}, {"figure_path": "oEKFPSOWpp/figures/figures_12_1.jpg", "caption": "Figure 1: An illustrative example to show overflow-avoiding global routing in chip design. (a) Chip layout of a real-world net extracted from ISPD07_adaptec1. (b) Two-dimensional grid graph. (c) The Hanan grid of a 4-pin net. (d) The resource map and pin map (actually divided into two channels) obtained from (a) for this 4-pin net. (e) The predicted hub points (black circles) and stripe mask applied by Hubrouter [8]. (f) The routing result generated by HubRouter [8] suffers from congestion (red edges). (g) The candidate points (green circles) predicted by NeuralSteiner and the corresponding net augmented graph (NAG). (h) The final routing result generated by NeuralSteiner that avoids overflow.", "description": "This figure demonstrates the overflow-avoiding global routing process using NeuralSteiner. It shows the chip layout, grid graph, Hanan grid, resource and pin maps, and routing results. The comparison between HubRouter and NeuralSteiner highlights NeuralSteiner's ability to avoid overflow while maintaining connectivity. ", "section": "1 Introduction"}, {"figure_path": "oEKFPSOWpp/figures/figures_16_1.jpg", "caption": "Figure 1: An illustrative example to show overflow-avoiding global routing in chip design. (a) Chip layout of a real-world net extracted from ISPD07_adaptec1. (b) Two-dimensional grid graph. (c) The Hanan grid of a 4-pin net. (d) The resource map and pin map (actually divided into two channels) obtained from (a) for this 4-pin net. (e) The predicted hub points (black circles) and stripe mask applied by Hubrouter [8]. (f) The routing result generated by HubRouter [8] suffers from congestion (red edges). (g) The candidate points (green circles) predicted by NeuralSteiner and the corresponding net augmented graph (NAG). (h) The final routing result generated by NeuralSteiner that avoids overflow.", "description": "This figure demonstrates the overflow-avoiding global routing approach proposed in the paper using a real-world example. It visually illustrates different steps of the process: (a) shows the original chip layout, (b) the grid graph representation, (c) the Hanan grid, (d) the resource and pin maps, (e) HubRouter's prediction and stripe mask, (f) HubRouter's congested routing result, (g) NeuralSteiner's candidate points and net augmented graph (NAG), and (h) the final congestion-free routing result generated by NeuralSteiner.  The figure highlights the improvement of NeuralSteiner in avoiding overflow while maintaining connectivity.", "section": "1 Introduction"}]