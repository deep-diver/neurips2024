[{"type": "text", "text": "Separations in the Representational Capabilities of Transformers and Recurrent Architectures ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Satwik Bhattamishra1\u2020 Michael Hahn2 Phil Blunsom1,3 Varun Kanade1\u2020 ", "page_idx": 0}, {"type": "text", "text": "1University of Oxford 2Saarland University 3Cohere ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Transformer architectures have been widely adopted in foundation models. Due to their high inference costs, there is renewed interest in exploring the potential of efficient recurrent architectures (RNNs). In this paper, we analyze the differences in the representational capabilities of Transformers and RNNs across several tasks of practical relevance, including index lookup, nearest neighbor, recognizing bounded Dyck languages, and string equality. For the tasks considered, our results show separations based on the size of the model required for different architectures. For example, we show that a one-layer Transformer of logarithmic width can perform index lookup, whereas an RNN requires a hidden state of linear size. Conversely, while constant-size RNNs can recognize bounded Dyck languages, we show that one-layer Transformers require a linear size for this task. Furthermore, we show that two-layer Transformers of logarithmic size can perform decision tasks such as string equality or disjointness, whereas both one-layer Transformers and recurrent models require linear size for these tasks. We also show that a log-size two-layer Transformer can implement the nearest neighbor algorithm in its forward pass; on the other hand recurrent models require linear size. Our constructions are based on the existence of $N$ nearly orthogonal vectors in ${\\cal O}(\\log N)$ dimensional space and our lower bounds are based on reductions from communication complexity problems. We supplement our theoretical results with experiments that highlight the differences in the performance of these architectures on practical-size sequences. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Transformers [59] are the go-to architecture for building LLMs [11], but recently, there has been significant interest in reviving recurrent architectures to build LLMs for practical tasks [21, 42, 45] to circumvent the quadratic complexity of inference for Transformers. While Transformers process all tokens in parallel, maintaining $N$ vectors, and are in some sense stateless, recurrent models primarily store information in a fixed-size hidden state that they can update during the course of the computation. This raises a fundamental question that we explore: Are there tasks that are computationally easier for one architecture to represent but significantly more difficult for the other one? ", "page_idx": 0}, {"type": "text", "text": "Ever since Transformers supplanted LSTMs, there has been significant interest in understanding the differences in the computational capabilities of the models both theoretically and empirically. On the one hand, even as Transformers have been widely adopted for building LLMs, several studies found that they struggled at modeling various formal languages, particularly those that required modular counting or state-tracking [5, 16, 38]. At the same time, despite substantial effort, it has proven hard to match the performance of Transformer-based LLMs at scale with recurrent architectures [15, 45, 21]; in particular, it has been observed that LLMs based on recurrent models struggle on associative recall or extraction-related tasks [15, 2]. More recently, Arora et al. [2] and Bhattamishra et al. [8] demonstrated that Transformers are better than attention-free models at synthetic tasks based on associative recall and more general forms such as implementing nearest neighbors. Based on these observations, it is natural to wonder if such tasks are theoretically easier for Transformers to represent in comparison to recurrent models. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Our Contributions. We show differences in the representational capabilities of Transformers and recurrent models across several natural tasks of real-world relevance. In this paper, we show strong separation results: when a task is easy we show that it can be expressed by one architecture with size poly-logarithmic in the input length $N$ ; on the other hand we show the other type of architecture requires the size to be linear in $N$ . We describe the tasks studied and our key results below. ", "page_idx": 1}, {"type": "text", "text": "(i) Index Lookup. Given a sequence of symbols $s_{1},\\ldots,s_{N}$ followed by a position $p\\in[N]$ , a model has to output the symbol in the $p$ -th position $s_{p}$ (Figure 1a). Our first result shows that one-layer Transformers with size poly-logarithmic in $N$ can express this task (Theorem 1) whereas any recurrent model must have width $\\Omega(N)$ to perform this task (Theorem 3). ", "page_idx": 1}, {"type": "text", "text": "(ii) Bounded Dycks. Dyck languages with bounded depth require a model to recognize whether a string of parentheses is well-balanced (Figure 1b). These formal languages have received a great deal of attention in the study of neural sequence models because they capture hierarchical dependencies that occur in natural languages [17, 25, 23, 6]. They are also central to formal language theory as all context-free languages can be expressed in terms of Dyck languages [14]. In contrast to the results for index lookup, we show that one-layer Transformers must have a size that grows linearly in input length to represent this task (Theorem 5), whereas prior works found that constant-size recurrent models can express this task [25, 6]. ", "page_idx": 1}, {"type": "text", "text": "(iii) String Equality. This task is formalized by the Equality function $\\operatorname{EQ}(\\mathbf{x},\\mathbf{y})=\\mathbb{I}[\\mathbf{x}=\\mathbf{y}]$ where $\\mathbf x,\\mathbf y$ are two strings of length $N$ ; it models the natural task of matching two documents. We show that log-sized two-layer Transformers can represent the function EQ (Theorem 6), whereas both one-layer Transformers (Theorem 12) and recurrent models (Theorem 11) must have a size that grows linearly with the sequence length. These results extend to a broader class of Boolean functions. ", "page_idx": 1}, {"type": "text", "text": "(iv) Nearest Neighbor and Associative Recall. In this task, a model is provided with a sequence of inputs and labels $\\mathbf{x}_{1},y_{1},\\dots,\\mathbf{x}_{k-1},y_{k-1}$ followed by a query input $\\mathbf{x}_{k}$ . The model has to determine the label $y_{k}$ of the query input by applying the nearest neighbor algorithm in its forward pass (Figure 1c). This task subsumes various associative recall tasks considered in earlier works (cf. Appendix G) and was introduced to understand in-context learning. Bhattamishra et al. [8] found empirical differences in the performance of Transformers and attention-free architectures, though theoretical understanding is lacking. We show that a two-layer Transformer with size logarithmic in the input length can perform this task (Theorem 7), whereas recurrent models require a size linear in the length (Theorem 8). ", "page_idx": 1}, {"type": "text", "text": "We also empirically investigated the performance of Transformers and standard recurrent models [26], including recently proposed state-space models [22, 21] on these tasks. The observed behavior is along the lines indicated by our theoretical results. ", "page_idx": 1}, {"type": "text", "text": "Our Techniques. For constructing Transformers that perform the tasks, one of the key requirements is the ability to precisely attend to specific positions. In order to do this with low-dimensional embeddings, our constructions make use of nearly orthogonal vectors obtained using the JohnsonLindenstrauss lemma [29]; furthermore these can be generated efficiently in logarithmic space which allows the size of the models to be poly-logarithmic in the input length (cf. Appendix B.3). ", "page_idx": 1}, {"type": "text", "text": "For our lower bounds, we appeal to results from communication complexity. We show how to obtain protocols with communication complexity bounded by the size of the models. Together with established (and new) communication complexity lower bounds, we obtain lower bounds on the model size. For our lower bound for one-layer Transformers, we derive a lower bound on the communication complexity for bounded Dyck languages (Lemma 1). ", "page_idx": 1}, {"type": "text", "text": "1.1 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Expressivity of Sequence Models. The expressive power of neural sequence models has been an active area of research, targeting both RNNs and Transformers [e.g. 23, 52, 40, 55, 37]. With parameters of infinite precision, Transformers are universal function approximators [67] and Turing complete [47, 7]. In bounded precision settings, they relate to Boolean circuits [39, 24] and logical formalisms [12]. Importantly, such studies usually consider asymptotic expressivity of a single model in the limit of unboundedly long inputs. Our study provides a more fine-grained and realistic picture by accounting for the size of the network, and its scaling with the input. The closest to our work is Sanford et al. [51], who first used communication complexity to prove lower bounds for Transformers and RNNs for abstract tasks such as a sparse averaging task and pair/triple detection tasks. Our work extends that line of work to show separations on natural tasks of practical and real-world relevance. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Formal languages and Algorithmic tasks. A strand of work has sought to understand sequence models via empirical analysis on formal languages and algorithmic tasks [5, 57, 68]. Numerous works have examined the ability of recurrent models [58, 54, 66, 6, 25, 62] and Transformers [17, 65, 62] to model Dyck languages. More recently, significant effort [19, 60, 4] has been devoted to investigating how Transformers can learn to implement learning algorithms in their forward pass to understand the in-context learning phenomenon. Bhattamishra et al. [8] empirically observed that attention-free architectures struggle to implement the nearest neighbor algorithm in comparison to Transformers. Our result takes a step toward understanding this phenomenon by showing that nearest neighbors can be implemented by small-sized Transformers but not by recurrent architectures. ", "page_idx": 2}, {"type": "text", "text": "2 Definitions ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We consider two types of models: Transformers [59] and recurrent models. We use recurrent models to refer more generally to nonlinear RNNs such as LSTMs [26], state-space models [22, 21] as well as variants of linear Transformer [31, 56] which can process inputs in a recurrent manner [31]. ", "page_idx": 2}, {"type": "text", "text": "For some finite alphabet $\\Sigma$ , a sequence model is given a sequence in $\\Sigma^{N}$ and depending on the task outputs either $\\{0,1\\}$ or a sequence of outputs. Each $s_{i}\\in\\Sigma$ from a sequence $\\boldsymbol{\\dot{s}}_{1}\\cdot\\cdot\\boldsymbol{\\dot{s}}_{N}\\in\\Sigma^{N}$ is mapped to a vector in $\\mathbf{R}^{d}$ via an embedding map $\\phi:\\Sigma\\,\\rightarrow\\,{\\mathbf{R}}^{d}$ . For Transformers, the input embedding function further takes the position $i$ as input, along with $s_{i}$ . Each layer for Transformers and recurrent models maps inputs from $\\mathbb{R}^{N\\times d}\\rightarrow\\mathbb{R}^{\\dot{N}\\times\\dot{d}}$ . A model $M$ has fixed precision $p$ if all the parameters of the model as well as the values in the intermediate vectors can be implemented with $p$ -bit precision numbers (cf. Appendix B.2). ", "page_idx": 2}, {"type": "text", "text": "Transformers. Each layer of a Transformer has an attention block followed by an MLP block. The attention block takes as input $\\textbf{X}\\in\\,\\mathbb{R}^{N\\times d}$ and applies the operation $\\operatorname{Att}(\\mathbf{X})\\ =$ softmax $(\\mathbf{X}\\mathbf{W}_{Q}^{\\top}\\mathbf{W}_{K}\\mathbf{X}^{\\top})\\mathbf{X}\\mathbf{W}_{V}^{\\top}$ where $\\mathbf{W}_{Q},\\mathbf{W}_{K},\\mathbf{W}_{V}\\in\\mathbb{R}^{m\\times d}$ . For simplicity, we will use $Q(\\mathbf{x}_{i})$ (and likewise $K(\\mathbf{x}_{i})$ and $V(\\mathbf{x}_{i}))$ to denote $\\mathbf{W}_{Q}\\mathbf{x}_{i}$ . The width of the Transformer is $\\operatorname*{max}(m,d)$ , where $m\\times d$ is the shape of the projection matrices ${\\bf W}_{Q},{\\bf W}_{K}$ . For any matrix $\\mathbf{A}\\in\\mathbb{R}^{N\\times M}$ , the softmax operator is applied row-wise as follows softma $\\mathrm{x}(\\mathbf{A})_{i,j}=\\frac{\\exp(\\mathbf{A}_{i,j})}{\\sum_{k=1}^{M}\\exp(\\mathbf{A}_{i,k})}$ . Multi-head attention with $H$ heads is defined as $\\operatorname{M-Att}_{H}(\\mathbf{X})\\,=\\,[\\operatorname{Att}_{1}(\\mathbf{X}),\\dots,\\operatorname{Att}_{H}(\\mathbf{X})]\\mathbf{W}_{O}$ where each $\\operatorname{Att}_{i}(\\mathbf{X})$ has its own set of parameters. The matrix ${\\bf W}_{O}\\in\\mathbb{R}^{m H\\times d}$ projects the concatenated vector to a vector of dimension $d$ . For an input $\\mathbf{X}\\in\\mathbb{R}^{N\\times d}$ , the output of a layer of Transformer will be $\\psi(\\mathrm{M}\\mathrm{-}\\mathrm{Att}(\\mathbf{X}))\\in\\mathbb{R}^{N\\times d}$ where $\\psi:\\mathbb{R}^{d}\\rightarrow\\mathbb{R}^{d}$ is a feedforward network. We use $\\mathrm{TF}_{m,p,H}^{L}$ Fm,p,H to denote the class of all Transformers operating over $p$ -bit precision numbers with width $m$ , $H$ heads, and at most $L$ layers. ", "page_idx": 2}, {"type": "text", "text": "Recurrent Models. A general recurrent neural network (RNN) takes as input the sequence $\\mathbf{x}_{1},\\ldots,\\mathbf{x}_{N}$ where $\\mathbf{x}_{i}\\,\\in\\,\\bar{\\mathbb{R}}^{d}$ and produces an output sequence $y_{1},\\dots,y_{N}$ ; in this paper we will mostly consider the case when $y_{i}\\in\\{0,1\\}$ . An RNN with a hidden state of size $m$ over $p$ -bit numbers can be defined as follows. The hidden state is an mp-bit memory $\\mathbf{h}_{i}\\,\\in\\,\\{0,1\\}^{m p}$ and for some $\\mathbf{h}_{0}\\in\\{0,1\\}^{m p}$ , the RNN computes $\\mathbf{h}_{t}=g_{(t)}\\big(\\mathbf{x}_{t},\\mathbf{h}_{t-1}\\big)$ and $y_{t}=f_{(t)}(\\mathbf{h}_{t})$ for $t=1,\\ldots,N$ , and $g_{(t)}$ and $f_{(t)}$ are arbitrary functions. Since the transition function is allowed to be arbitrary, this definition captures the general family of multi-layer recurrent architectures including LSTMs, state-space models, and linear Transformers, each of which differs in the way the transition function is defined. For a recurrent model, we say that the representation size of a hidden state is $m p$ , and its width is $m$ , i.e. the hidden state consists of $m$ units each of which uses $p$ -bits. Throughout the paper, we will use recurrent models or RNNs to refer to the general family of recurrent architectures mentioned above. ", "page_idx": 2}, {"type": "text", "text": "By the representation size of a model, we will refer to the total number of bits required to represent the model including all the parameters and embeddings. For Transformers, this is $\\Theta(m d p H)$ . For a recurrent model, the representation size is at least $m p$ . ", "page_idx": 2}, {"type": "image", "img_path": "6HUJoD3wTj/tmp/8ad46d003e93d5835765cf6d274a087cd2a83b26f25fbb85b7f29b4c05432414.jpg", "img_caption": ["Figure 1: Illustration of a few key tasks considered in our work. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "3 Index Lookup Task ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Task Description. We introduce a simple task called Index Lookup (IdxL). In this task a model receives a sequence of tokens $s_{1},\\ldots,s_{N}$ (possibly with repetitions) followed by an index $p$ where $p\\in[N]$ and the goal of the model is to output the token $s_{p}$ . Here the symbols $s_{i}$ belong to a finite alphabet $\\Sigma$ . ", "page_idx": 3}, {"type": "text", "text": "This simple and natural task helps illustrate the key tools and building blocks we use to obtain other more general results in this paper: On the one hand, we show how a one-layer Transformer with width ${\\cal O}(\\log N)$ can perform this task; on the other hand, we use communication complexity arguments to show that any type of recurrent or state-space model performing this task needs a hidden state with representation size $\\Omega(N)$ . ", "page_idx": 3}, {"type": "text", "text": "Our first result shows that, for any length $N\\in\\mathbb{N}$ , there is a 1-layer Transformer with width ${\\cal O}(\\log N)$ that performs the Index Lookup task for all input sequences of length at most $N$ . Na\u00efvely one could construct such a transformer by using one-hot encodings as positional embeddings, as they are orthogonal and would allow to attend to the desired index. However, this would require the embedding dimension, and hence the width of the model, to be $\\Omega(N)$ . Key to our constructions of a width ${\\cal O}(\\log N)$ Transformer, both here and in other sections, is a result (Lemma 2 in the Appendix) which states that, in $k=O(\\log N/\\gamma^{2})$ dimensional space we can find $N$ nearly orthogonal vectors. We use such vectors in our construction of the Transformers to allow it to attend almost exactly over desired positions. ", "page_idx": 3}, {"type": "text", "text": "Theorem 1. For all $N\\in\\mathbb{N},$ , there is a 1-layer Transformer with width $m=O(\\log N)$ and precision $p=O(\\log N)$ which performs the index lookup task for all input sequences of lengths up to $N$ . ", "page_idx": 3}, {"type": "text", "text": "Proof Sketch. For an input sequence $(s_{1},\\ldots,s_{N},p)$ , the Transformer uses the embeddings of the position token $p$ and the positional embeddings of the first $N$ inputs to attend over $s_{p}$ , so that the feedforward network can extract the label from the output of the attention block. Our key idea is to use the $N$ almost orthogonal vectors provided by Lemma 2, both as positional embeddings and also as a way to embed the numbers $\\{1,\\ldots,N\\}$ , any of which can be used as the index $p$ . Formally, let $\\mathcal{T}(1),\\bar{\\dots}\\,.\\,\\mathcal{T}(N)$ be $N$ vectors of dimension $k=O(\\log N)$ such that $\\langle\\mathcal{T}(i),\\mathcal{T}(j)\\rangle\\leq1/4$ for $i\\neq j$ and $\\langle\\mathcal{T}(i),\\mathcal{T}(j)\\rangle\\geq3/4$ for $i=j$ . ", "page_idx": 3}, {"type": "text", "text": "Formal details of the construction are in Appendix C.2; we provide a sketch. The embedding of each input token is of size $\\log|\\Sigma|+2k$ where $\\log\\left|\\Sigma\\right|+k$ entries are used for the token embeddings and the last $k$ entries are used for the positional embeddings. The query and key matrices are designed so that the query vector $Q(\\mathbf{p})=\\eta[\\bar{T}(p)]$ , the key vectors $K(\\mathbf{x}_{i})\\overset{\\cdot}{=}[\\mathcal{\\bar{T}}(i)]$ and $K(\\mathbf{p})=[\\mathbf{0}_{k}]$ . The value vectors simply contain the token embeddings $V(\\mathbf{x}_{i})=[\\rho(s_{i})]$ , where $\\rho:\\Sigma\\to\\{0,1\\}^{|\\Sigma|}$ is some binary encoding of $\\Sigma$ . With such query and key vectors, the dot products in attention, $\\langle\\boldsymbol{Q}(\\mathbf{p}),K(\\mathbf{x}_{i})\\rangle$ , are $\\ge3\\eta/4$ if $i=p$ , and $\\leq\\eta/4$ otherwise. The dot product of the query vector with itself will be $\\langle Q(\\mathbf{p}),K(\\mathbf{p})\\rangle=0$ . We choose $\\eta>0$ to scale the dot products to amplify the difference between the high and low dot products. Thus we have, ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathrm{softmax}(Q(\\mathbf{p})^{\\top}K(\\mathbf{X}))=\\frac{\\exp(Q(\\mathbf{p})^{\\top}K(\\mathbf{x}_{p}))}{\\exp(Q(\\mathbf{p})^{\\top}K(\\mathbf{x}_{p}))+\\sum_{j\\neq p}\\exp(Q(\\mathbf{p})^{\\top}K(\\mathbf{x}_{j}))}\\geq\\frac{\\exp(\\frac{3\\eta}{4})}{\\exp(\\frac{3\\eta}{4})+N\\exp(\\frac{\\eta}{4})}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "which is at least $\\frac{3}{4}$ for some $\\eta=\\Theta(\\log N)$ ; the total attention weight over the remaining tokens is at most $<\\;\\textstyle{\\frac{1}{4}}$ . Recall that the value vectors contain the binary encodings of the input symbols, $V(\\mathbf{x}_{i})\\,=\\,[\\rho(\\stackrel{\\mathbf{c}}{s}_{i})]$ . The attention-weighted average value vector aligns closely with $\\bar{\\rho}\\big(s_{p}\\big)$ as $3/4$ weight is on it. It is then straightforward to design a ReLU-FFN that can act as a threshold function to retrieve $\\rho\\big(s_{p}\\big)$ from it, which leads to the desired output. \u53e3 ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "We use results from communication complexity to show that RNNs require essentially $\\Omega(N)$ width to solve this and several other problems. In communication complexity, there are two parties, typically called Alice and Bob, each of whom has part of the (discrete) input, and their goal is to compute a function of the combined input using as little communication as possible. Our first key insight here is that the output of an RNN can be computed with a bounded amount of communication when Alice has a prefix of the input and Bob has the remaining part. The resulting protocol will be one-way (Alice to Bob) and one-round. We first state a more general result and then discuss the implications for the Index Lookup problem. ", "page_idx": 4}, {"type": "text", "text": "Theorem 2. If an RNN with a hidden state of representation size mp computes any function $f:\\Sigma^{N}\\to\\{\\bar{0},1\\}$ , then for any $K<N$ , if Alice has access to $s_{1},\\ldots,s_{K}$ and Bob has access to $s_{K+1},\\ldots,s_{N}$ , then there exists a one-way communication protocol with mp bits from Alice to Bob, by which Bob can compute the output of the function $f{}(s_{1}\\ldots s_{N})$ . ", "page_idx": 4}, {"type": "text", "text": "Proof. Assume that both Alice and Bob have access to the RNN that represents the function $f$ . Alice can provide the sequence $s_{1},\\ldots,s_{K}$ to the recurrent model and iteratively update the hidden state from the initial state ${\\bf h}_{0}$ to obtain the $K$ th hidden state $\\mathbf{h}_{K}$ . Alice can then send the hidden state to Bob which requires mp bits. Bob can then update the hidden state using $s_{K+1},\\ldots,s_{N}$ to obtain $\\mathbf{h}_{N}$ , from which he can obtain the output of the RNN. Note that Alice and Bob can compute the output using one-way communication of mp bits. \u53e3 ", "page_idx": 4}, {"type": "text", "text": "Problems similar to Index Lookup are well-studied in communication complexity; specifically, the INDEX problem (See Appendix B.1) has a one-way communication complexity of $\\Omega(N)$ (Fact 3). We deduce a lower bound on the size of the hidden state of RNNs by showing that any RNN that can represent the Index Lookup task can also compute the INDEX problem and since that implies the existence of a one-way communication protocol with mp bits (Theorem 2), it follows that the width of the hidden state $m$ must be $\\Omega(N/p)$ (cf. Appendix C.1). ", "page_idx": 4}, {"type": "text", "text": "Theorem 3. Any recurrent model with a hidden state of width m using $p$ -bits of precision that computes the Index Lookup task for all sequences of length $N$ must have $m\\geq N/p$ . ", "page_idx": 4}, {"type": "text", "text": "Discussion. The above results theoretically formalize intuitive differences between the way Transformers and recurrent models process sequences. Since Transformers have access to $N$ input vectors during their computation, a small-sized attention block can attend over the desired input vector to make the correct prediction. On the other hand, any recurrent model\u2014even with arbitrary positional embeddings\u2014must store all the required information in its hidden state, which lower bounds the size of such models to compute the right output. These intuitions are made rigorous by showing (i) how soft-attention can do lookup using the almost orthogonal vectors, and (ii) small-width RNNs yield a short one-way communication protocol. These lower bounds also apply to causal forms of linear attention architectures where softmax is removed and attention weights become dot products [31]. ", "page_idx": 4}, {"type": "text", "text": "At first glance, it might seem unfair to compare Transformers and RNNs with the same number of parameters: Transformers have access to $N$ input vectors, whereas RNNs have a fixed-size hidden state. But note that, in practice, empirical research on language models typically compares models of the same size e.g., a 7B Transformer vs a 7B state-space model. Hence, it is natural to ask if Transformers of a particular size can express something that recurrent models cannot. ", "page_idx": 4}, {"type": "text", "text": "4 Lower Bounds for RNNs and 1-layer Transformers ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Whereas Section 3 established a case where one-layer Transformers can be more powerful than RNNs, we next exhibit an example of the opposite phenomenon. Here, the key tool will again be a communication complexity argument, but this time it applies to one-layer Transformers: We establish a communication protocol by which Alice and Bob can compute the output of a one-layer Transformer by exchanging a number of bits that is bounded by the representation size of the Transformer and an overhead that is logarithmic in the input length. The key property here is that this protocol works not just when Alice and Bob have access to a prefix and suffix of a string, but instead works for an arbitrary partitioning of the input string (proof is in Appendix D): ", "page_idx": 4}, {"type": "text", "text": "TCohnesoirdeemr  a4n. y Cdoisnjsoiidnet rs au bosneets- $f\\in\\mathrm{TF}_{m,p,H}^{1}$ .n g Aosvseurm ien pAulitsc eo fh laesn agtchc $N$ $S_{A}\\cup S_{B}\\,=\\,\\{1,\\dots,N\\}$ $S_{A}\\cap S_{B}=\\emptyset$   \nto $s_{i}$ for $i\\,\\in\\,S_{A}$ , and Bob has access to $s_{i}$ for $i\\:\\in\\:S_{B}$ . Then Alice and Bob can communicate   \n$3m(p+\\log N)H$ bits to compute the output $f{}(s_{1}\\ldots s_{N})$ . ", "page_idx": 5}, {"type": "text", "text": "The proof idea is that Alice and Bob first compute their parts of the numerator and denominator of the softmax and exchange these to compute the overall attention output. A na\u00efve implementation of this idea runs into the issue that the exponentiation of logits may exceed the bounds of $p$ -bit precision; we circumvent this by first communicating the maximum logit and subtracting it from each logit, keeping the exponentials bounded without altering the resulting attention weights. Theorem 4 is a slightly more general and formal version of a result in Sanford et al. [51, Theorem. 7]. ", "page_idx": 5}, {"type": "text", "text": "4.1 Separation on Bounded Hierarchical Languages ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We now use the communication protocol for one-layer Transformers to establish a separation between these and RNNs on bounded Dyck languages. Dyck languages are of central importance in formal language theory, as any context-free language can be expressed in terms of Dyck languages [14]. Due to the boundedness of human memory [41], natural language tends to have more bounded levels of embedding [30, 10]. This has motivated the study of bounded-depth Dyck languages as plausible simple models of the hierarchical structure underlying language [25, 65, 6, 62]. ", "page_idx": 5}, {"type": "text", "text": "Task. Formally, Dyck- $(\\mathsf{n},\\mathsf{k})$ (cf. Appendix E) is the language of well-matched strings over $n$ types of parenthesis pairs ${\\big(}_{1},{\\big)}_{1},{\\big(}_{2},{\\big)}_{2},\\dotsc,{\\big(}_{n},{\\big)}_{n}$ , where any prefix has at most $k$ opening parentheses not yet closed. For instance, the string \u2018( [ ] ) ( )\u2019 has a maximum depth 2 corresponding to the prefix $\\bullet(\\,\\Gamma$ . Dyck- $(\\mathsf{n},\\mathsf{k})$ can be recognized with access to a bounded stack that never holds more than $k$ elements. In fact, each Dyck-(n, k) is a regular language and is accepted by a finite automaton. ", "page_idx": 5}, {"type": "text", "text": "We show that there is a linear communication complexity lower bound for Dyck-(n, k), already at $n=k=2$ . However, unlike the communication bound we used in Theorem 3, Alice and Bob now have access not to two halves of the input; rather, Alice and Bob have access to the even and odd positions in the string, respectively. Intuitively, in such a situation, Alice needs to know almost all of the bits available to Bob in order to decide whether a given string is well-bracketed\u2013and vice versa. More formally, they need to exchange at least $N-1$ bits to decide membership in Dyck-(2, 2): ", "page_idx": 5}, {"type": "text", "text": "Lemma 1. Suppose Alice and Bob have the symbols in the odd and even indices of a string $s\\in\\Sigma^{N}$ respectively. To each compute whether $s\\in D y c k\u2013(2,2),$ they must exchange at least $N-1$ bits. ", "page_idx": 5}, {"type": "text", "text": "The proof of Lemma 1 is in Appendix E and is based on fooling sets which is a standard technique to prove lower bounds on communication complexity. Combining Lemmas 4 and 1 entails a lower bound on the width of a Transformer for computing Dyck-(2, 2): ", "page_idx": 5}, {"type": "text", "text": "Theorem 5. Consider a one-layer Transformer $f\\in\\mathrm{TF}_{m,p,H}^{1}$ deciding membership in Dyck-(2, 2).   \nThen mH \u22653(p+log N). ", "page_idx": 5}, {"type": "text", "text": "This result establishes a second separation between one-layer Transformers and RNNs, but now in the other direction: Bounded-depth Dyck languages are regular, and previous works have shown that constant width RNNs can recognize them with standard activation functions such as Sigmoid [25] and ReLU [6]. We further note that two-layer Transformers of sublinear size can model bounded-depth Dyck languages [65]. ", "page_idx": 5}, {"type": "text", "text": "4.2 Lower Bounds on Boolean Functions ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "There are some notable differences between the types of communication complexity lower bounds for one-layer Transformers (Theorem 4) and for RNNs (Theorem 2). RNNs computing $f$ yield a one-way protocol for contiguous partitions of the input; thus showing a one way communication lower bound for such partitions is sufficient to obtain lower bounds on the size of RNNs. Transformers computing $f$ yield a multi-way protocol that work for arbitrary partitions of the input; thus showing a lower bound for any partition is sufficient to establish lower bounds on the size of the Transformer. For Dyck-(2, 2), contiguous partitions are not a hard case, and in fact, communicating $\\leq2$ open brackets from the first half is sufficient. This is why the lower bound of Lemma 1 does not apply to RNNs. ", "page_idx": 5}, {"type": "text", "text": "Lower Bounds. Despite the differences discussed above, there are several Boolean functions, for which we can establish that when widths are bounded, neither one-layer Transformers nor RNNs can compute them. The Equality function $\\mathrm{EQ}:\\{0,1\\}^{N}\\rightarrow\\{0,1\\}$ is a Boolean function defined as $\\mathrm{EQ}(\\bar{\\mathbf{x}})=\\mathbb{I}[(\\mathbf{x}_{1},\\ldots,\\bar{\\mathbf{x}_{N/2}})=(\\mathbf{x}_{N/2+1},\\ldots,\\bar{\\mathbf{x}_{N}})]$ . A related problem is Disjointness: given two vectors $\\mathbf{x},\\mathbf{y}\\in\\{0,1\\}^{N/2}$ , the function $\\mathrm{DISJ}(\\mathbf x,\\mathbf y)=\\operatorname*{max}\\mathbf x_{i}\\mathbf y_{i}=\\mathbb{I}[\\mathbf x^{T}\\mathbf y>0]$ . Both the functions Equality and Disjointness are known to have communication complexity $\\Omega(N)$ (see Appendix B.1) and Theorems 4 and 2 imply that both one-layer Transformers and RNNs must have width $\\Omega(N)$ to represent them. In the next section, we show that these lower bounds do not apply to two-layer Transformers. Additionally, it is worth noting that the functions EQ and DISJ can also be expressed in the form of 2-CNFs with $O(N)$ terms. Hence, a more general consequence of the limitations of RNNs (and one-layer Transformers) is that with width $o(N)$ , they cannot compute certain functions in the class of uniform $\\mathbf{A}\\mathbf{C}^{0}$ .3 It is interesting since the class of uniform $\\mathbf{A}\\mathbf{C}^{0}$ is considered one of the simplest classes of Boolean circuits and even the expressive power of hard-attention Transformers has been shown to be within this class [24]. In Appendix F.1, we provide an alternate proof of the lower bound for RNNs computing Equality based on their relation to DFAs. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "5 Representational Capabilities of 2-layer Transformers ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In Section 4, we showed that single-layer Transformers and recurrent models must have size linear in the input length to express natural Boolean functions such as EQ. In this section, we show that two-layer transformers overcome these limitations by efficiently expressing such Boolean functions and more general forms of associative recall tasks, such as simulating the nearest neighbor algorithm. ", "page_idx": 6}, {"type": "text", "text": "5.1 Representing Boolean Functions ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We start by showing that two-layer Transformers of poly-logarithmic size can express the Equality function (proof is in Appendix F.2). The input domain need not necessarily be the Boolean vectors $\\{0,1\\}^{N}$ ; rather, the construction works for sequences over any finite alphabet $\\Sigma$ . ", "page_idx": 6}, {"type": "text", "text": "Theorem 6. For any $N\\in\\mathbb{N},$ , there exists a 2-layer Transformer $f\\,\\in\\,\\mathrm{TF}_{m,p,2}^{2}$ 2m,p,2 where width m = ${\\cal O}(\\log N)$ and precision $p=O(\\log N)$ such that $f(\\mathbf{x})=\\operatorname{EQ}(\\mathbf{x})$ for all $\\mathbf{x}\\in\\{0,1\\}^{N}$ . ", "page_idx": 6}, {"type": "text", "text": "The construction is based on tools developed in Section 3. The broad idea is as follows. In the first layer, at each position $i>N/2$ , an attention head attends to position $i-N/2$ and copies the input $x_{i-N/2}$ . A feedforward network then checks whether the retrieved value is equal to $x_{i}$ . The second layer simply uses uniform attention over the outputs of the previous layer to check if there is a mismatch at any position. Importantly, we show that the above strategy can be implemented with a representation size $O((\\log N)^{3})$ . ", "page_idx": 6}, {"type": "text", "text": "Generalizing this result, we find that two-layer Transformers with logarithmic width can express a more general class of Boolean functions: thresholds of $k$ -sparse features, a class including functions such as Equality and Disjointness. Since such functions cannot be expressed by one-layer Transformers and recurrent models with width $o(N)$ , these results imply a separation on Equality and Disjointness: these functions can be expressed by small-sized two-layer Transformers whereas one-layer Transformers and recurrent models must grow linearly with input length to represent them. ", "page_idx": 6}, {"type": "text", "text": "5.2 Implementing the Nearest Neighbors Algorithm ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The goal of the nearest neighbor task (NSTNB) is to analyze whether a sequence modeling architecture can implement the well-known nearest neighbor algorithm to make predictions. Our description follows closely to the one used by Bhattamishra et al. [8] for their experiments. ", "page_idx": 6}, {"type": "text", "text": "Nearest Neighbors. In the NSTNB task, a model is provided with a sequence of vectors and labels $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ where $N/2\\;<\\;k\\;\\leq\\;N$ , the input unit vectors $\\mathbf{x}_{i}\\ \\in\\ \\mathbb{R}^{d}$ and labels $y_{i}\\;\\in\\;\\{0,1\\}$ . For each $\\mathbf{x}_{k}$ where $k\\,>\\,N/2$ , the output is the label corresponding to the nearest neighbor in $(\\mathbf{x}_{1},\\ldots,\\mathbf{x}_{k-1})$ , that is, if $j=\\arg\\operatorname*{max}_{i\\in[k-1]}\\mathbf{x}_{k}^{\\top}\\mathbf{x}_{i}$ or $j=\\arg\\operatorname*{min}_{i\\in[k-1]}\\left\\|\\mathbf{x}_{k}-\\mathbf{x}_{i}\\right\\|_{2}$ , then the output for $\\mathbf{x}_{k}$ is the label $y_{j}$ . Since we are working with unit vectors, maximizing the inner product is equivalent to minimizing the $\\ell_{2}$ distance. If the second half of the sequence $\\mathbf{x}_{\\frac{N}{2}+1},\\ldots,\\mathbf{x}_{N}$ is a permutation of the first half $\\mathbf{x}_{1},\\ldots,\\mathbf{x}_{\\frac{N}{2}}$ then the task reduces to the Multi-Query Associative Recall (MQAR) task [2] (cf. Appendix G). ", "page_idx": 6}, {"type": "text", "text": "Assumptions. We will make two assumptions about the problem. The first assumption is that all input vectors are of unit norm, i.e., $\\|{\\boldsymbol{x}}\\|_{2}\\,=\\,1$ and the second is the existence of a margin between the dot product with the nearest neighbor and the dot product with other input vectors, i.e. there exists $\\gamma\\,\\geq\\,N^{-c}$ for some universal constant $c$ , such that for any $N/2\\,<\\,k\\,\\leq\\,N$ , if $j^{*}=\\arg\\operatorname*{max}_{i\\in[k-1]}\\mathbf{x}_{k}^{\\top}\\mathbf{x}_{i}$ , then $\\mathbf{x}_{k}^{\\top}\\mathbf{x}_{j}*\\geq\\mathbf{x}_{k}^{\\top}\\mathbf{x}_{i}+\\gamma$ for any $i\\neq j^{*}$ . ", "page_idx": 7}, {"type": "text", "text": "The following is one of our main results which states that two-layer Transformers of logarithmic size can implement the nearest neighbor algorithm in their forward pass and as a corollary can also perform associative recall tasks like MQAR (Proofs in Appendix G.2). ", "page_idx": 7}, {"type": "text", "text": "Theorem 7. For any $N\\ \\in\\ \\mathbb{N}$ , there exists a 2-layer Transformer $f_{N N}\\;\\in\\;\\mathrm{TF}_{m,p,2}^{2}$ with width and precision such that fNN computes the nearest-neighbor task all sequences of length at most $N$ satisfying the assumptions above. ", "page_idx": 7}, {"type": "text", "text": "The broad idea of the construction is to identify the nearest neighbor input $\\mathbf{x}_{j}*$ and retrieve the position of the corresponding label $y_{j^{*}}$ in the first layer. The second layer then uses this positional information to retrieve the desired label. There are a few challenges to implementing this strategy which we address in our construction. First, note that for input vectors $\\mathbf{x}_{1},\\ldots,\\mathbf{x}_{k}$ , naively using them with dot-product attention will result in the query input $\\mathbf{x}_{k}$ having maximum dot product and hence maximum attention weight over itself. Second, the dot product with some label vectors $y_{i}\\mathbf{s}$ could be higher than the dot product with the nearest neighbor $\\mathbf{x}_{j^{\\ast}}$ . Third, the positional information must be retrieved using soft-attention in a way that it can be used in the next layer to obtain the desired label. Our intuitive, though somewhat involved, construction deals with these issues to ensure that a two-layer Transformer with $O((\\log N)^{3})$ total size implements the nearest neighbor algorithm. ", "page_idx": 7}, {"type": "text", "text": "Theorem 8. Any recurrent model with a hidden state of width m with $p$ -bits of precision that can perform the nearest neighbor task for all inputs of length $N$ must have $m\\geq N/2p$ . ", "page_idx": 7}, {"type": "text", "text": "The lower bound for recurrent models follows via a reduction from the Disjointness problem. ", "page_idx": 7}, {"type": "text", "text": "Discussion. Prior works [8, 2] have empirically demonstrated that Transformer-based LLMs can exhibit mechanisms such as nearest neighbors and MQAR. Further, on synthetic setups, they have observed that recurrent models struggle to perform these tasks compared to Transformers. Our results take a step towards understanding the differences in the performance between the two architectures. ", "page_idx": 7}, {"type": "text", "text": "6 Empirical Analysis ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "While we focus on the differences in the representational capabilities of Transformers and recurrent models, it is natural to examine if differences of a similar nature arise in their empirical performance. One thing to keep in mind is that positive results regarding expressiveness presented in earlier sections do not imply that models can learn such tasks. With regard to negative results, they do imply that when the sequence length is much larger than the size of the hidden state or width of the model, then the model will be incapable of representing the task and consequently fail to learn the task. However, even for one-layer recurrent models with hidden states of size 128 with 64 bits of precision, our lower bound applies at lengths over $8\\mathbf{k}$ . ", "page_idx": 7}, {"type": "text", "text": "In this section, we investigate the performance of Transformers and recurrent models on tasks such as Index Lookup and recognizing bounded Dyck languages on sequences of small lengths $(<1000)$ . Our experiments are designed to answer the following questions: (1) Are one-layer Transformers better than larger recurrent models on the Index Lookup task? (2) Are recurrent models and twolayer Transformers better than one-layer Transformers at recognizing the Dyck-(2, 2) language? Importantly, as our results concern the scaling of the model size with the input length, we are specifically interested in the behavior of different models across input lengths. ", "page_idx": 7}, {"type": "text", "text": "We also explore the performance of models on string equality in Appendix H.2. Tasks like NSTNB and MQAR have already been analyzed empirically in prior works [8, 2] so we do not include them. ", "page_idx": 7}, {"type": "text", "text": "Setup and Training details. We train the models with cross-entropy loss using the Adam optimizer [32]. The models are trained for up to $250\\mathbf{k}$ steps where at each step we sample a fresh batch of 64 training examples \u2013 resulting in $\\approx16$ million examples over $250\\mathbf{k}$ steps. The models are evaluated on 5000 examples for each task. For each model, we tune the various hyperparameters, notably across learning rates $\\in\\{1{\\mathrm{e}}{-2},5{\\mathrm{e}}{-3},{\\cdot}{\\cdot}{\\cdot},1{\\mathrm{e}}{-6}\\}$ to find the best-performing model. The details of the data generation method, hyperparameters, and implementation details can be found in Appendix H. ", "page_idx": 7}, {"type": "image", "img_path": "6HUJoD3wTj/tmp/a5e22cd0ce18f6998e9351e2a545e921c34d8687e37942f553dc4a34ede964c5.jpg", "img_caption": ["Figure 2: Performance of models on the Index Lookup and bounded Dyck task. Labels such as TF-(1, 64) denote Transformers with 1 layer and 64 widths. See Section 6 for more details. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Index Lookup Task. We compare the performance of one-layer Transformers with five different recurrent models \u2013 LSTMs [26], state space models such as DSS [22] and Mamba [21], linear Transformers [31], and its variant RetNet [56]. We explore the performance across various lengths $\\in\\{20,50,100,200,400\\}$ . We evaluate relatively small-sized Transformers with widths 64 against recurrent models with up to 6 layers and widths or hidden state size of 256. The size of the alphabet in the experiments is $|\\Sigma|=64$ . Figure 2 (left) depicts the performance of all models across various lengths and Figure 2 (middle) depicts the validation curves during training on examples of length 200. As depicted by the figures, while one-layer Transformers with width 64 achieve near-perfect accuracy within a few thousand steps, the performance of relatively larger recurrent or state-space models degrades on lengths over 100 and they fail to learn even with $10\\times$ training iterations. We explore the influence of width on the performance of Mamba in Appendix H.1. ", "page_idx": 8}, {"type": "text", "text": "Bounded Dycks. For Dyck-2 with depth at most 2, our separation results apply to one-layer Transformers and nonlinear recurrent models such as LSTMs but not to linear RNNs such as statespace models and linear Transformers. Hence, we are primarily interested in the difference in performance between one-layer Transformers and LSTMs. In our experiments, we compare the performance of one-layer Transformers with relatively smaller recurrent models such as LSTMs and two-layer Transformers. We also include Mamba for reference. We consider LSTMs and Mamba with hidden state sizes of 64 and similarly, two-layer Transformers with width 64. We evaluate a one-layer Transformer with a width of 256 across lengths $\\in\\{20,\\ldots,400\\}$ most of which are smaller than the width of the model. We observe that one-layer Transformers achieve near-perfect accuracy up to lengths 100 but struggle on higher lengths. In contrast, small-sized recurrent models as well as two-layer Transformers can achieve near-perfect accuracy for lengths up to 400. Figure 2 (right) depicts the validation curve of the models on examples of length 400. ", "page_idx": 8}, {"type": "text", "text": "7 Discussion and Final Remarks ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Based on prior theoretical results, it is known that, while recurrent models can express any regular language [34, 33], Transformers with logarithmic precision can only express languages in the class of uniform constant depth threshold circuits $(\\mathrm{TC}^{0})$ [40]. These results indicate that\u2014under standard conjectures\u2014Transformers are unable to represent certain state-tracking tasks that recurrent models can represent. With such results, it might appear that Transformers are less expressive than recurrent models\u2013potentially at odds with the persistent practical success of Transformer-based LLMs. Our findings, however, show that when the model size is constrained relative to the sequence length, a variety of tasks relevant to practice can be represented by small-sized Transformers but not by recurrent models. Our results suggest that the attention mechanism does lead to expressiveness that cannot be replicated by recurrent architectures even with arbitrary transition functions. ", "page_idx": 8}, {"type": "text", "text": "Limitations. A general limitation of this line of work is that positive expressivity results do not imply that the problems under consideration are learnable. Additionally, while lower bounds for an architecture imply difficulty in learning, when using double precision these results only apply to very long sequences in practice. Our results (and probably techniques) do not imply any limitations on two-layer Transformers; this is left as an open question. We note that communication complexitybased techniques akin to Theorem 4 cannot exist for two-layer Transformers (cf. Appendix F.4). Hence, we believe that other tools will be needed to prove lower bounds for two-layer Transformers. ", "page_idx": 8}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We thank Dibyayoti Dhananjay Jena, Arkil Patel, and Charles London for insightful and helpful discussions on this work. We also thank Clayton Sanford, Will Merrill, and the anonymous reviewers for their valuable feedback and constructive suggestions. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] D. Achlioptas. Database-friendly random projections: Johnson-lindenstrauss with binary coins. Journal of computer and System Sciences, 66(4):671\u2013687, 2003.   \n[2] S. Arora, S. Eyuboglu, A. Timalsina, I. Johnson, M. Poli, J. Zou, A. Rudra, and C. Re. Zoology: Measuring and improving recall in efficient language models. In The Twelfth International Conference on Learning Representations, 2024. URL https://openreview.net/forum? id=LY3ukUANko.   \n[3] J. Ba, G. E. Hinton, V. Mnih, J. Z. Leibo, and C. Ionescu. Using fast weights to attend to the recent past. Advances in neural information processing systems, 29, 2016.   \n[4] Y. Bai, F. Chen, H. Wang, C. Xiong, and S. Mei. Transformers as statisticians: Provable incontext learning with in-context algorithm selection. Advances in neural information processing systems, 36, 2024.   \n[5] S. Bhattamishra, K. Ahuja, and N. Goyal. On the Ability and Limitations of Transformers to Recognize Formal Languages. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 7096\u20137116, Online, Nov. 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-main.576. URL https:// aclanthology.org/2020.emnlp-main.576.   \n[6] S. Bhattamishra, K. Ahuja, and N. Goyal. On the practical ability of recurrent neural networks to recognize hierarchical languages. In Proceedings of the 28th International Conference on Computational Linguistics, pages 1481\u20131494, Barcelona, Spain (Online), Dec. 2020. International Committee on Computational Linguistics. doi: 10.18653/v1/2020.coling-main.129. URL https://aclanthology.org/2020.coling-main.129.   \n[7] S. Bhattamishra, A. Patel, and N. Goyal. On the computational power of transformers and its implications in sequence modeling. In R. Fern\u00e1ndez and T. Linzen, editors, Proceedings of the 24th Conference on Computational Natural Language Learning, pages 455\u2013475, Online, Nov. 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.conll-1.37. URL https://aclanthology.org/2020.conll-1.37.   \n[8] S. Bhattamishra, A. Patel, P. Blunsom, and V. Kanade. Understanding in-context learning in transformers and LLMs by learning to learn discrete functions. In The Twelfth International Conference on Learning Representations, 2024. URL https://openreview.net/forum? id $\\equiv$ ekeyCgeRfC.   \n[9] P. Blanchard, D. J. Higham, and N. J. Higham. Accurately computing the log-sum-exp and softmax functions. IMA Journal of Numerical Analysis, 41(4):2311\u20132330, 2021.   \n[10] D. Blasi, R. Cotterell, L. Wolf-Sonkin, S. Stoll, B. Bickel, and M. Baroni. On the distribution of deep clausal embeddings: A large cross-linguistic study. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 3938\u20133943, 2019.   \n[11] T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, S. Agarwal, A. Herbert-Voss, G. Krueger, T. Henighan, R. Child, A. Ramesh, D. Ziegler, J. Wu, C. Winter, C. Hesse, M. Chen, E. Sigler, M. Litwin, S. Gray, B. Chess, J. Clark, C. Berner, S. McCandlish, A. Radford, I. Sutskever, and D. Amodei. Language models are few-shot learners. In H. Larochelle, M. Ranzato, R. Hadsell, M. Balcan, and H. Lin, editors, Advances in Neural Information Processing Systems, volume 33, pages 1877\u2013 1901. Curran Associates, Inc., 2020. URL https://proceedings.neurips.cc/paper/ 2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf.   \n[12] D. Chiang, P. Cholak, and A. Pillay. Tighter bounds on the expressivity of transformer encoders. In International Conference on Machine Learning, pages 5544\u20135562. PMLR, 2023.   \n[13] N. Chomsky. Syntactic structures. Mouton, The Hague, 1957.   \n[14] N. Chomsky and M. P. Sch\u00fctzenberger. The algebraic theory of context-free languages. In Studies in Logic and the Foundations of Mathematics, volume 35, pages 118\u2013161. Elsevier, 1963.   \n[15] S. De, S. L. Smith, A. Fernando, A. Botev, G. Cristian-Muraru, A. Gu, R. Haroun, L. Berrada, Y. Chen, S. Srinivasan, et al. Griffin: Mixing gated linear recurrences with local attention for efficient language models. arXiv preprint arXiv:2402.19427, 2024.   \n[16] G. Deletang, A. Ruoss, J. Grau-Moya, T. Genewein, L. K. Wenliang, E. Catt, C. Cundy, M. Hutter, S. Legg, J. Veness, and P. A. Ortega. Neural networks and the chomsky hierarchy. In The Eleventh International Conference on Learning Representations, 2023. URL https: //openreview.net/forum?id=WbxHAzkeQcn.   \n[17] J. Ebrahimi, D. Gelda, and W. Zhang. How can self-attention networks recognize Dyck-n languages? In T. Cohn, Y. He, and Y. Liu, editors, Findings of the Association for Computational Linguistics: EMNLP 2020, pages 4301\u20134306, Online, Nov. 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.findings-emnlp.384. URL https://aclanthology.org/ 2020.findings-emnlp.384.   \n[18] M. B. Everaert, M. A. Huybregts, N. Chomsky, R. C. Berwick, and J. J. Bolhuis. Structures, not strings: linguistics as part of the cognitive sciences. Trends in cognitive sciences, 19(12): 729\u2013743, 2015.   \n[19] S. Garg, D. Tsipras, P. S. Liang, and G. Valiant. What can transformers learn in-context? a case study of simple function classes. Advances in Neural Information Processing Systems, 35: 30583\u201330598, 2022.   \n[20] F. A. Gers and E. Schmidhuber. LSTM recurrent networks learn simple context-free and context-sensitive languages. IEEE Transactions on Neural Networks, 12(6):1333\u20131340, 2001.   \n[21] A. Gu and T. Dao. Mamba: Linear-time sequence modeling with selective state spaces. arXiv preprint arXiv:2312.00752, 2023.   \n[22] A. Gupta, A. Gu, and J. Berant. Diagonal state spaces are as effective as structured state spaces. Advances in Neural Information Processing Systems, 35:22982\u201322994, 2022.   \n[23] M. Hahn. Theoretical limitations of self-attention in neural sequence models. Transactions of the Association for Computational Linguistics, 8:156\u2013171, 2020.   \n[24] Y. Hao, D. Angluin, and R. Frank. Formal language recognition by hard attention transformers: Perspectives from circuit complexity. Transactions of the Association for Computational Linguistics, 10:800\u2013810, 2022.   \n[25] J. Hewitt, M. Hahn, S. Ganguli, P. Liang, and C. D. Manning. RNNs can generate bounded hierarchical languages with optimal memory. In B. Webber, T. Cohn, Y. He, and Y. Liu, editors, Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1978\u20132010, Online, Nov. 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-main.156. URL https://aclanthology.org/ 2020.emnlp-main.156.   \n[26] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural computation, 9(8): 1735\u20131780, 1997.   \n[27] T. S. Jayram, R. Kumar, and D. Sivakumar. The one-way communication complexity of hamming distance. Theory of Computing, 4(1):129\u2013135, 2008.   \n[28] S. Jelassi, D. Brandfonbrener, S. M. Kakade, and E. Malach. Repeat after me: Transformers are better than state space models at copying. arXiv preprint arXiv:2402.01032, 2024.   \n[29] W. B. Johnson and J. Lindenstrauss. Extensions of lipschitz mappings into hilbert space. Contemporary mathematics, 26:189\u2013206, 1984. URL https://api.semanticscholar. org/CorpusID:117819162.   \n[30] F. Karlsson. Constraints on multiple center-embedding of clauses. Journal of Linguistics, 43(2): 365\u2013392, 2007.   \n[31] A. Katharopoulos, A. Vyas, N. Pappas, and F. Fleuret. Transformers are rnns: Fast autoregressive transformers with linear attention. In International conference on machine learning, pages 5156\u20135165. PMLR, 2020.   \n[32] D. P. Kingma and J. Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.   \n[33] J. F. Kolen and S. C. Kremer. A field guide to dynamical recurrent networks. John Wiley & Sons, 2001.   \n[34] S. A. Korsky and R. C. Berwick. On the computational power of rnns. arXiv preprint arXiv:1906.06349, 2019.   \n[35] E. Kushilevitz and N. Nisan. Communication Complexity. Cambridge University Press, 1996.   \n[36] D. Lindner, J. Kram\u00e1r, S. Farquhar, M. Rahtz, T. McGrath, and V. Mikulik. Tracr: Compiled transformers as a laboratory for interpretability. Advances in Neural Information Processing Systems, 36, 2024.   \n[37] B. Liu, J. T. Ash, S. Goel, A. Krishnamurthy, and C. Zhang. Transformers learn shortcuts to automata. In The Eleventh International Conference on Learning Representations, 2023. URL https://openreview.net/forum?id $\\cdot$ De4FYqjFueZ.   \n[38] B. Liu, J. Ash, S. Goel, A. Krishnamurthy, and C. Zhang. Exposing attention glitches with flip-flop language modeling. Advances in Neural Information Processing Systems, 36, 2024.   \n[39] W. Merrill and A. Sabharwal. The parallelism tradeoff: Limitations of log-precision transformers. Transactions of the Association for Computational Linguistics, 11:531\u2013545, 2023.   \n[40] W. Merrill and A. Sabharwal. A logic for expressing log-precision transformers. Advances in Neural Information Processing Systems, 36, 2024.   \n[41] G. A. Miller and N. Chomsky. Finitary models of language users. In R. D. Luce, R. R. Bush, and E. Galanter, editors, Handbook of Mathematical Psychology, pages 419\u2013492. John Wiley, 1963.   \n[42] A. Orvieto, S. L. Smith, A. Gu, A. Fernando, C. Gulcehre, R. Pascanu, and S. De. Resurrecting recurrent neural networks for long sequences. In International Conference on Machine Learning, pages 26670\u201326698. PMLR, 2023.   \n[43] R. Pascanu, T. Mikolov, and Y. Bengio. On the difficulty of training recurrent neural networks. In International conference on machine learning, pages 1310\u20131318. Pmlr, 2013.   \n[44] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, et al. Pytorch: An imperative style, high-performance deep learning library. Advances in neural information processing systems, 32, 2019.   \n[45] B. Peng, E. Alcaide, Q. Anthony, A. Albalak, S. Arcadinho, H. Cao, X. Cheng, M. Chung, M. Grella, K. K. GV, et al. Rwkv: Reinventing rnns for the transformer era. arXiv preprint arXiv:2305.13048, 2023.   \n[46] B. Peng, S. Narayanan, and C. Papadimitriou. On limitations of the transformer architecture, 2024.   \n[47] J. P\u00e9rez, J. Marinkovic\u00b4, and P. Barcel\u00f3. On the turing completeness of modern neural network architectures. In International Conference on Learning Representations, 2019. URL https: //openreview.net/forum?id $\\cdot$ HyGBdo0qFm.   \n[48] A. Rao and A. Yehudayoff. Communication Complexity: and Applications. Cambridge University Press, 2020.   \n[49] J.-F. Raymond, P. Tesson, and D. Th\u00e9rien. An algebraic approach to communication complexity. In Automata, Languages and Programming: 25th International Colloquium, ICALP\u201998 Aalborg, Denmark, July 13\u201317, 1998 Proceedings 25, pages 29\u201340. Springer, 1998.   \n[50] P. Rodriguez. Simple recurrent networks learn context-free and context-sensitive languages by counting. Neural computation, 13(9):2093\u20132118, 2001.   \n[51] C. Sanford, D. Hsu, and M. Telgarsky. Representational strengths and limitations of transformers. In Thirty-seventh Conference on Neural Information Processing Systems, 2023. URL https: //openreview.net/forum?id=36DxONZ9bA.   \n[52] C. Sanford, D. Hsu, and M. Telgarsky. Transformers, parallel computation, and logarithmic depth. arXiv preprint arXiv:2402.09268, 2024.   \n[53] D. Sivakumar. Algorithmic derandomization via complexity theory. In Proceedings of the thiry-fourth annual ACM symposium on Theory of computing, pages 619\u2013626, 2002.   \n[54] N. Skachkova, T. A. Trost, and D. Klakow. Closing brackets with recurrent neural networks. In Proceedings of the 2018 EMNLP Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP, pages 232\u2013239, 2018.   \n[55] L. Strobl, W. Merrill, G. Weiss, D. Chiang, and D. Angluin. What formal languages can transformers express? a survey. Transactions of the Association for Computational Linguistics, 12:543\u2013561, 2024.   \n[56] Y. Sun, L. Dong, S. Huang, S. Ma, Y. Xia, J. Xue, J. Wang, and F. Wei. Retentive network: A successor to transformer for large language models. arXiv preprint arXiv:2307.08621, 2023.   \n[57] M. Suzgun, Y. Belinkov, S. Shieber, and S. Gehrmann. LSTM networks can perform dynamic counting. In Proceedings of the Workshop on Deep Learning and Formal Languages: Building Bridges, pages 44\u201354, Florence, Aug. 2019. Association for Computational Linguistics. doi: 10.18653/v1/W19-3905. URL https://www.aclweb.org/anthology/W19-3905.   \n[58] M. Suzgun, S. Gehrmann, Y. Belinkov, and S. M. Shieber. Memory-augmented recurrent neural networks can learn generalized dyck languages. arXiv preprint arXiv:1911.03329, 2019.   \n[59] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, \u0141. Kaiser, and I. Polosukhin. Attention is all you need. In Advances in neural information processing systems, pages 5998\u20136008, 2017.   \n[60] J. Von Oswald, E. Niklasson, E. Randazzo, J. Sacramento, A. Mordvintsev, A. Zhmoginov, and M. Vladymyrov. Transformers learn in-context by gradient descent. In International Conference on Machine Learning, pages 35151\u201335174. PMLR, 2023.   \n[61] G. Weiss, Y. Goldberg, and E. Yahav. Thinking like transformers. In International Conference on Machine Learning, pages 11080\u201311090. PMLR, 2021.   \n[62] K. Wen, Y. Li, B. Liu, and A. Risteski. Transformers are uninterpretable with myopic methods: a case study with bounded dyck grammars. Advances in Neural Information Processing Systems, 36, 2024.   \n[63] T. Wolf, L. Debut, V. Sanh, J. Chaumond, C. Delangue, A. Moi, P. Cistac, T. Rault, R. Louf, M. Funtowicz, et al. Transformers: State-of-the-art natural language processing. In Proceedings of the 2020 conference on empirical methods in natural language processing: system demonstrations, pages 38\u201345, 2020.   \n[64] A. C.-C. Yao. Some complexity questions related to distributive computing (preliminary report). In Proceedings of the eleventh annual ACM symposium on Theory of computing, pages 209\u2013213, 1979.   \n[65] S. Yao, B. Peng, C. Papadimitriou, and K. Narasimhan. Self-attention networks can process bounded hierarchical languages. In C. Zong, F. Xia, W. Li, and R. Navigli, editors, Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pages 3770\u20133785, Online, Aug. 2021. Association for Computational Linguistics. doi: 10. 18653/v1/2021.acl-long.292. URL https://aclanthology.org/2021.acl-long.292.   \n[66] X. Yu, N. T. Vu, and J. Kuhn. Learning the dyck language with attention-based seq2seq models. In Proceedings of the 2019 ACL Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP, pages 138\u2013146, 2019.   \n[67] C. Yun, S. Bhojanapalli, A. S. Rawat, S. Reddi, and S. Kumar. Are transformers universal approximators of sequence-to-sequence functions? In International Conference on Learning Representations, 2020. URL https://openreview.net/forum?id $\\equiv$ ByxRM0Ntvr.   \n[68] H. Zhou, A. Bradley, E. Littwin, N. Razin, O. Saremi, J. Susskind, S. Bengio, and P. Nakkiran. What algorithms can transformers learn? a study in length generalization. arXiv preprint arXiv:2310.16028, 2023. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "Contents ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Introduction 1.1 Related Work 2 ", "page_idx": 13}, {"type": "text", "text": "2 Definitions 3 ", "page_idx": 13}, {"type": "text", "text": "3 Index Lookup Task 4 ", "page_idx": 13}, {"type": "text", "text": "4 Lower Bounds for RNNs and 1-layer Transformers 5 ", "page_idx": 13}, {"type": "text", "text": "4.1 Separation on Bounded Hierarchical Languages . . 6   \n4.2 Lower Bounds on Boolean Functions . 6 ", "page_idx": 13}, {"type": "text", "text": "5 Representational Capabilities of 2-layer Transformers 7 ", "page_idx": 13}, {"type": "text", "text": "5.1 Representing Boolean Functions . . 7   \n5.2 Implementing the Nearest Neighbors Algorithm . . . 7 ", "page_idx": 13}, {"type": "text", "text": "6 Empirical Analysis 8 ", "page_idx": 13}, {"type": "text", "text": "7 Discussion and Final Remarks 9 ", "page_idx": 13}, {"type": "text", "text": "A Clarifications 14 ", "page_idx": 13}, {"type": "text", "text": "B Preliminaries 15   \nB.1 Communication Complexity 15   \nB.2 Finite Precision Implementation 16   \nB.3 Technical Tools 16   \nC Index Lookup Task 17   \nC.1 Recurrent models must be wide to perform Index Lookup . . . . 17   \nC.2 1-layer Transformer with small width can perform Index Lookup . . 18 ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "D Lower Bounds for 1-layer Transformers 19 ", "page_idx": 13}, {"type": "text", "text": "E Dyck with Bounded Depths 21 ", "page_idx": 13}, {"type": "text", "text": "F Transformers and Boolean functions 23 ", "page_idx": 13}, {"type": "text", "text": "F.1 Lower Bounds . . . 24   \nF.2 Transformer Construction for Equality . . . 25   \nF.3 Representing more general class of Boolean functions . . 27   \nF.4 Difficulty of Deriving Communication-based Lower Bounds for 2-layer Transformers 28 ", "page_idx": 13}, {"type": "text", "text": "G Nearest Neighbors and Associative Recall 29 ", "page_idx": 13}, {"type": "text", "text": "G.1 Lower Bounds for Recurrent Models . 30   \nG.2 Transformer Construction for Nearest Neighbor 30 ", "page_idx": 13}, {"type": "text", "text": "H Empirical Analysis: Additional Details and Experiments 34 ", "page_idx": 13}, {"type": "text", "text": "H.1 Additional Experiments and Data Generation 34   \nH.2 String Equality Task . 35 ", "page_idx": 13}, {"type": "text", "text": "A Clarifications ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "(1) What do the results presented in the paper imply about the learnability of the tasks considered? ", "page_idx": 13}, {"type": "text", "text": "The lower bounds on recurrent models and one-layer Transformers have negative implications for learnability but the positive results do not have any nontrivial implications. The lower bounds on the size of recurrent models and one-layer Transformers imply that unless the width of the models grows linearly with respect to the input length, they cannot represent and consequently cannot learn such tasks. Note, however, that even though the input length need not be unboundedly long for our lower bounds to apply, they still need to be sufficiently large $N\\gtrsim m$ and do not apply at the lengths considered in our experiments. The results indicating that Transformers can express tasks like Index lookup, string equality or nearest neighbors do not imply that they can learn those tasks in practice. The experiments in Sections 6 and $\\mathrm{H}$ as well as from prior works [8] seem to indicate that small-sized Transformers perform reasonably well on these tasks. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "(2) For the upper bounds on the total size of Transformers to express functions, does it include the input and positional embeddings or just the Transformer model with attention and feedforward block? ", "page_idx": 14}, {"type": "text", "text": "Yes, when we say that Transformers with total size $O(f(N))$ or poly-logarithmic in $N$ can express a certain task, it includes the input and positional embeddings. The total representation size indicates the total number of bits required to represent all the parameters of the model. Our results imply that a Transformer with total size $O((\\log N)^{3})$ can represent tasks such as nearest neighbors, Equality, etc, whereas the size of any recurrent model must be $\\Omega(N)$ . For our constructions of Transformers, we ensure that the positional embeddings can be generated in log space (discussed in Appendix B) and need not be stored as a $N\\times d$ matrix for the required computations. Lastly, it is worth noting that all our lower bounds for recurrent models apply even if they have arbitrary positional embeddings stored in $N\\times d$ matrix, and hence the size of recurrent models is $\\Omega(N)$ excluding the embeddings. ", "page_idx": 14}, {"type": "text", "text": "(3) For the constructions with Transformers, why can\u2019t those results follow from some frameworks like RASP? ", "page_idx": 14}, {"type": "text", "text": "RASP [61, 36] is a programming language aiming to abstract computations that transformers can compute. While one might be able to construct RASP programs for some of the tasks we have considered, such as Index Lookup, such constructions would not entail results similar to ours, because RASP substantially abstracts from implementational aspects. For instance, RASP allows MLPs to compute arbitrary functions, and attention is not computed from dot products of keys and queries. It is not clear if general-purpose translations from RASP to realistic transformers would be able to recover our efficient bounds, e.g., logarithmic size. ", "page_idx": 14}, {"type": "text", "text": "(4) Do the negative results in experiments imply that those architectures cannot learn those tasks? ", "page_idx": 14}, {"type": "text", "text": "The differences in the performance of models apply more to the rate of learning than a binary form of success/failure. For instance, in the Index Lookup task, one can see that in Figure 2, one-layer Transformers achieve near-perfect accuracy in a few thousand steps whereas recurrent models fail to achieve high accuracy even after being trained for $25\\times$ steps. It can still be true that if the models are trained for much longer or are much bigger, they might achieve high accuracy. See Figure 3 which depicts the performance of Mamba across various sizes and lengths. For tasks like Index lookup, we observe that Transformers achieve near-perfect accuracy across several learning rates whereas recurrent architectures fail on all the learning rates we tried. A similar thing is true for other tasks such as Dyck-(2, 2) where one-layer Transformers seem to learn at a much slower rate compared to LSTMs and two-layer Transformers even for the lengths where they do achieve near-perfect accuracy. ", "page_idx": 14}, {"type": "text", "text": "(5) Do the lower bounds for Transformers and RNNs apply with additional components such as layer norm, residual connections, positional embeddings, etc? ", "page_idx": 14}, {"type": "text", "text": "Yes, for our lower bounds for one-layer Transformers and Recurrent models, they still apply if the models have additional components including arbitrary positional embeddings, layer norms, etc. We only assume that the attention mechanism operates over finite precision and the hidden state of RNN is in finite precision. The results do not make any assumptions about the computational limits of the remaining components. They apply even when the output of the attention block or the hidden state of an RNN is processed by an arbitrary function. ", "page_idx": 14}, {"type": "text", "text": "B Preliminaries ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "B.1 Communication Complexity ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Our lower bounds for recurrent models and 1-layer Transformers are based on communicationcomplexity bounds. We assume some familiarity with communication complexity (see Rao and Yehudayoff [48], Kushilevitz and Nisan [35] for an introduction). We will primarily focus on the two-party setting where the communication complexity of a function indicates the number of bits two parties must exchange in order to compute the output of a function. If Alice and Bob want to compute a function $f:\\{0,1\\}^{\\vee}\\rightarrow\\{0,1\\}$ where Alice has the bits in the indices $I\\subset[N]$ and Bob has the bits in indices $[N]\\setminus I$ , the communication complexity of $f$ over that partition is the minimum number of bits they must exchange to compute the output for all inputs $x\\,\\in\\,\\{0,1\\}^{N}$ . Alice and Bob are allowed unbounded computational power. If Alice and Bob must exchange at least $k$ bits to compute a function $f(x)\\,\\forall x\\in\\{{\\bar{0}},1\\}^{n}$ over any partition of the input then we say that the communication complexity $C(f)\\geq k$ . If they use a communication protocol where only one party is allowed to send bits to the other party, then it is called one-way communication, and the communication complexity of the function in that setting is referred to as one-way communication complexity. ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "For our results, we will use the following three well-known facts about the communication complexity of the Disjointness, Equality, and the INDEX problem. ", "page_idx": 15}, {"type": "text", "text": "Disjointness. The disjointness function takes two sets $A,B\\ \\subseteq\\ [N]$ as input and returns 0 if the two sets are disjoint and returns 1 otherwise. This can also be seen as a function DISJ : $\\{0,1\\}^{N}\\times\\{0,1\\}^{N}\\overset{\\circ}\\rightarrow\\{0,1\\}$ over two Boolean inputs such that $\\mathrm{DISJ}(a,b)\\equiv\\operatorname*{max}a_{i}b_{i}=\\mathbb{I}[a^{T}b>0]$ . If Alice has the input vector $\\dot{a}\\in\\{0,1\\}^{N}$ and Bob has the vector $b\\in\\{0,1\\}^{N}$ , then the communication complexity of DISJ indicates the minimum number of bits that Alice and Bob will have to exchange to determine the output of the DISJ function. The following is a well-known fact about the disjointness problem, ", "page_idx": 15}, {"type": "text", "text": "Fact 1. (Disjointness [64]) If Alice and Bob have two inputs $a,b\\in\\{0,1\\}^{N}$ , then any deterministic communication protocol used by them to compute $\\mathrm{{)ISJ}}(a,b)=\\operatorname*{max}a_{i}b_{i}$ must exchange at least $N$ -bits. Moreover, the randomized communication complexity of the DISJ is $\\Omega(N)$ . ", "page_idx": 15}, {"type": "text", "text": "Fact 2. (Equality [48, Ch. 1]) If Alice and Bob have two inputs $a,b\\in\\{0,1\\}^{N}$ , then any deterministic communication protocol used by them to compute $\\mathrm{EQ}(a,b)=\\mathbb{I}[a=b]$ must exchange at least $N$ -bits. ", "page_idx": 15}, {"type": "text", "text": "Fact 3. (INDEX [27]) If Alice and Bob have two inputs $a\\in\\{0,1\\}^{N}$ and $b\\in[N]$ respectively, then any deterministic communication protocol used by Alice to send bits to Bob must require $N$ bits for Bob to compute INDEX $(a,b)=a_{b}$ . Moreover, the one-way randomized communication complexity of the INDEX is $\\Omega(N)$ . ", "page_idx": 15}, {"type": "text", "text": "One thing to note about the Equality problem is that although the deterministic communication complexity of the EQ problem is $\\Omega(N)$ , the randomized communication complexity is ${\\cal O}(\\log N)$ . For the Disjointness and INDEX problems, the randomized communication complexity is $\\Omega(N)$ as well. In other words, even if the two parties are allowed to compute the output of the function correctly with high probability $\\mathrm{(say>2/3)}$ , even then the number of bits they must exchange is $\\Omega(N)$ . ", "page_idx": 15}, {"type": "text", "text": "B.2 Finite Precision Implementation ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In this work, we are interested in the expressiveness of finite precision models. For our constructions with Transformers, we will work with $p$ -bit numbers where $p=\\Theta(\\log N)$ where $N$ is the maximum length of the input string. ", "page_idx": 15}, {"type": "text", "text": "In particular, for some sufficiently large constant $\\mathrm{K}_{c}\\,>\\,0$ , we will work with numbers between \u2212N Kc to N Kc with a step size of \u2206 = $\\begin{array}{r}{\\Delta\\ =\\ \\frac{1}{N^{\\mathrm{K}_{c}}}}\\end{array}$ . If $\\mathbb{Q}_{p}$ is the set of all such numbers then $\\mathbb{Q}_{p}\\,=$ $\\{-N^{\\mathrm{K_{c}}},-N^{\\mathrm{K_{c}}}+\\Delta,\\ldots,0,\\Delta,2\\Delta,\\ldots,\\bar{N^{\\mathrm{K_{c}}}}\\}$ . Hence, the size of the set is $|\\mathbb{Q}_{p}|\\,=\\,N^{2\\mathrm{K}_{c}}\\,\\,\\implies$ $p=2\\mathrm{K}_{c}\\log N=\\Theta(\\log N)$ . For any real number $z\\in\\mathbb{R}$ , in the finite precision implementation, $z$ is rounded down to the nearest $\\hat{z}$ such that $\\hat{z}N^{\\mathrm{K}_{c}}\\in\\mathbb{Z}$ . If $z>N^{\\mathrm{K_{c}}}$ , then $z$ is rounded down to $N^{\\mathrm{K}_{c}}$ . In our constructions with Transformers, all the parameters and intermediate values follow the above implementation. ", "page_idx": 15}, {"type": "text", "text": "B.3 Technical Tools ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "For our constructions of Transformers, we will use the following result about high dimensional vectors. The statement essentially says that at a high dimension $k$ the number of vectors that are almost orthogonal to each other is exponential in $k$ even though the number of orthogonal vectors can be at most $k$ . ", "page_idx": 15}, {"type": "text", "text": "Lemma 2. For any $N$ , there exists $\\textit{N k}$ -dimensional vectors $\\tau_{1},\\dots,\\tau_{N}$ where $\\begin{array}{r}{k=O(\\frac{1}{\\gamma^{2}}\\log N)}\\end{array}$ and each entry of the vectors is in $\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}$ such that ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\langle\\mathcal{T}_{i},\\mathcal{T}_{j}\\rangle\\left\\{\\stackrel{>}{\\leq}1-\\gamma\\right.\\ \\ \\dot{i f}\\,i=j,}\\\\ {\\quad\\left.\\quad\\quad\\quad\\quad\\quad\\quad\\quad o t h e r w i s e.\\right.}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "It is quite straightforward to see why this is true. It follows from a simple application of the probabilistic method. Suppose, one samples $N\\,k$ -dimensional vectors $\\mathbf{X}_{1},\\ldots,\\mathbf{X}_{N}$ independently at random such that each entry of each vector is drawn uniformly from $\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}$ . Hence, each vector $\\mathbf{X}_{i}\\in\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}^{k}$ and the expectation of the dot product of any two vectors $\\mathbb{E}[\\langle\\mathbf{X}_{i},\\mathbf{X}_{j}\\rangle]=0$ for all $i\\neq j$ . Since the dot products of any two vectors $\\langle\\mathbf{X}_{i},\\mathbf{X}_{j}\\rangle$ is a bounded random variable, we can apply Hoeffding\u2019s inequality to get ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathbb{P}[|\\langle\\mathbf{X}_{i},\\mathbf{X}_{j}\\rangle|\\geq\\gamma]\\,\\leq\\,2\\exp\\left(\\frac{-k\\gamma^{2}}{4}\\right).\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Taking a union bound over at most $N^{2}$ pairs of dot products and setting $\\begin{array}{r}{2N^{2}\\exp\\left(\\frac{-k\\gamma^{2}}{4}\\right)<1/2}\\end{array}$ , we get that for $\\begin{array}{r}{k=\\frac{8}{\\gamma^{2}}\\log2N}\\end{array}$ , the probability of all dot products $\\langle\\mathbf{X}_{i},\\mathbf{X}_{j}\\rangle$ being less than $\\gamma$ at the same time is at least $1/2$ . Since the probability of the event is nonzero, it follows that the statement in the lemma is true. ", "page_idx": 16}, {"type": "text", "text": "In our construction, we will use such vectors as positional embedding vectors. While Lemma 2 implies the existence of vectors, storing $N$ such vectors will require $\\Theta(N)$ space. We would like to generate $i$ -th vector $\\mathcal{T}_{i}$ when necessary in polynomial time using log space without storing all of them together. To achieve that, we use a derandomization of the Johnson-Lindenstrauss (JL) Lemma [29] that can output the $i$ -th vector in log-space and polynomial time [53]. ", "page_idx": 16}, {"type": "text", "text": "We use a slightly modified version of the $\\operatorname{JL}$ lemma which preserves inner products over unit vectors. ", "page_idx": 16}, {"type": "text", "text": "Lemma 3. (Inner product preservation $[I J)\\,L e t\\,\\epsilon\\in(0,1/2)$ and let $\\mathcal{Q}\\subset S^{d-1}$ be a set of $N$ unit norm vectors of dimension d. For k = c2 l\u03f5o2g N, there exists a linear map $\\textstyle{\\mathcal{T}}(x)={\\frac{1}{\\sqrt{k}}}A x$ where each entry of $A:\\ensuremath{\\mathbb{R}^{d}}\\to\\ensuremath{\\mathbb{R}^{k}}$ is in $\\{-1,1\\}$ such that for all $u,v\\in\\mathcal{Q},$ ", "page_idx": 16}, {"type": "equation", "text": "$$\n|\\langle u,v\\rangle-\\langle T(u),T(v)\\rangle|\\leq\\epsilon\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "The above result has interesting implications which we will use in our constructions. Let $\\ensuremath{\\mathbf{x}}_{1},\\ldots,\\ensuremath{\\mathbf{x}}_{N}\\in\\mathbb{R}^{N}$ be $N$ unit norm vectors that form the basis of $\\mathbb{R}^{N}$ which implies $\\langle\\mathbf{x}_{i},\\mathbf{x}_{j}\\rangle=1$ if $i=j$ and is 0 otherwise. Then there exists a map $\\tau$ such that the vectors $\\mathcal{T}(\\mathbf{x}_{1}),\\dots,\\mathcal{T}(\\mathbf{x}_{N})\\in\\mathbb{R}^{k}$ have dot products $\\langle{\\mathcal T}(\\mathbf{x}_{i}),{\\mathcal T}(\\mathbf{x}_{j})\\rangle=1\\pm\\epsilon$ if $i=j$ and is $0\\pm\\epsilon$ otherwise. ", "page_idx": 16}, {"type": "text", "text": "We will use JL transformations of the standard basis vectors $\\mathbf{e}_{1},\\ldots,\\mathbf{e}_{N}$ where $\\mathcal{T}(1),\\ldots,\\mathcal{T}(N)$ will refer to $k=O(\\log N)$ dimensional vectors such that their inner product is $\\approx1$ with themselves and is $\\approx0$ . Intuitively, we can use such vectors to get a Transformer to attend to unique positions. ", "page_idx": 16}, {"type": "text", "text": "Corollary 8.1. For any $N$ , there exists $\\textit{N k}$ -dimensional vectors $\\mathcal{T}(1),\\ldots,\\mathcal{T}(N)$ where $k\\,=$ ${\\cal O}(\\log N)$ and each entry of the vectors is in $\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}$ such that ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\langle T(i),T(j)\\rangle{\\left\\{\\begin{array}{l l}{\\geq3/4\\quad i f i=j,}\\\\ {\\leq1/4\\quad o t h e r w i s e.}\\end{array}\\right.}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "C Index Lookup Task ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Index Lookup. The index lookup task (IdxL) is a multi-class classification task where a model receives a sequence of tokens $x_{1},\\ldots,x_{N}$ followed by a position token $p$ where $p\\in[N]$ and the goal of the model is to output the token $x_{p}$ at position $p$ . Here the symbols $x_{i}$ belong to a vocabulary $\\Sigma$ , a finite set of symbols. The sequence $\\mathbf{\\bar{\\boldsymbol{x}}}=(x_{1},\\dots,x_{N})$ can have repetitions. More precisely, we say a model computes the function ${|\\mathsf{d}\\times\\mathsf{L}:\\Sigma_{\\leq N}\\times[N]\\to\\Sigma}$ if for all inputs $(x,p)$ , the model outputs IdxL $(x,p)$ . ", "page_idx": 16}, {"type": "text", "text": "C.1 Recurrent models must be wide to perform Index Lookup ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Theorem 3. Any recurrent model with a hidden state of width m using $p$ -bits of precision that computes the Index Lookup task for all sequences of length $N$ must have $m\\geq N/p$ . ", "page_idx": 16}, {"type": "text", "text": "Proof. The proof follows naturally via a reduction from the INDEX problem in communication complexity. Assume the vocabulary size for the $\\mathsf{l d x L}$ is at least 2, pick any two symbols from the vocabulary, and map them to 0 and 1. Suppose Alice has a sequence $a\\in\\dot{\\{0,1\\}}^{N}$ and Bob has an index $i\\in[N]$ . Both of them have access to a recurrent model as described in Section 2, which can perform the IdxL task perfectly. Alice can then provide the sequence $a$ to the recurrent model using any two symbols in the vocabulary $\\Sigma$ and iteratively update the hidden state to obtain the $N$ th hidden state $h_{N}$ . Alice can then send the hidden state to Bob which requires $m p$ bits. Bob can then provide the position token based on the index $i$ and compute the output to figure out whether $a_{i}$ is 0 or 1. ", "page_idx": 17}, {"type": "text", "text": "Note that Alice and Bob can compute the output using one-way communication of $m p$ bits and hence based on Fact 3, it must be the case that $m p\\geq N$ . ", "page_idx": 17}, {"type": "text", "text": "Associative Recall. A similar argument can be used to show that any recurrent model that can correctly perform the single query associative recall task [3] must have a width or hidden state of size at least $\\Omega(N/p)$ . In the associative recall task, a model is presented with a sequence of symbols and labels $x_{1},y_{1},\\dotsc,x_{N},y_{N}$ followed by a query symbol $x_{q}$ which is one of the symbols presented earlier $(x_{1},\\hdots,x_{N})$ . The goal of a model is to output the label $y_{i}$ corresponding to the symbol $x_{q}=x_{i}$ where $i=1,\\ldots,N$ . In this task, the symbols $(x_{1},\\hdots,x_{N})$ must be distinct. ", "page_idx": 17}, {"type": "text", "text": "Proposition 9. Any recurrent model with a hidden state of size m over $p$ -bits of precision that computes the associative recall task for all sequences of length $N$ must have $m\\geq N/p$ . ", "page_idx": 17}, {"type": "text", "text": "A similar reduction from the INDEX problem can be used to show a lower bound for recurrent models. Both Alice and Bob have the description of the recurrent model and both of them can have a predetermined protocol for the sequence of symbols $x_{1},\\ldots,x_{N}$ . Alice can use the recurrent model to compute the hidden state $\\mathbf{h}_{2N}$ by providing it with inputs $x_{1},a_{1},\\ldots,x_{N},a_{N}$ where the bits in $a\\{0,1\\}^{N}$ are provided as labels. Alice can send the hidden state using mp bits and Bob can provide the symbol $x_{i}$ corresponding to the query index $i$ and compute the output. Hence, the size of the hidden state of the RNN must be at most $N/p$ . ", "page_idx": 17}, {"type": "text", "text": "C.2 1-layer Transformer with small width can perform Index Lookup ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "While any form of recurrent model must have a width or hidden state of size $\\Omega(N)$ to perform the index lookup task, we show that a 1-layer Transformer with width ${\\cal O}(\\log N)$ can perform the index lookup task. ", "page_idx": 17}, {"type": "text", "text": "Theorem 1. For all $N\\in\\mathbb{N}$ , there is a 1-layer Transformer with width $m=O(\\log N)$ and precision $p=O(\\log N)$ which performs the index lookup task for all input sequences of lengths up to $N$ . ", "page_idx": 17}, {"type": "text", "text": "Proof. For an input sequence $(s_{1},\\ldots,s_{N},p)$ , the Transformer uses the embeddings of the position token $p$ and the positional embeddings of the first $N$ inputs to attend over $s_{p}$ , so that the feedforward network can extract the label from the output of the attention block. Our key idea is to use the $N$ almost orthogonal vectors provided by Lemma 2, both as positional embeddings and also as a way to embed the numbers $\\{1,\\ldots,N\\}$ , any of which can be used as the index $p$ . Formally, let $\\tau(1),\\dots,\\tau(N)$ be $N$ vectors of dimension $k=O(\\log N)$ such that $\\langle\\mathcal{T}(i),\\mathcal{T}(j)\\rangle\\overset{\\mathcal{\\frown}}{\\leq}1/4$ for $i\\neq j$ and $\\langle\\mathcal{T}(i),\\mathcal{T}(j)\\rangle\\geq3/4$ for $i=j$ . ", "page_idx": 17}, {"type": "text", "text": "Recall that, in the index lookup task, the alphabet $V=\\Sigma\\cup[N]$ consists of symbols $s_{i}$ from a set $\\Sigma$ and the index tokens $[N]\\,=\\,\\{1,\\dots,N\\}$ . The embeddings of each input token will be of size $\\log|\\Sigma|+2k$ where $\\log\\left|\\Sigma\\right|+k$ indices are reserved for the token embeddings and the last $k$ indices are used for the positional embeddings. Suppose we use a binary encoding for symbols in $\\Sigma$ , and $\\rho:\\Sigma\\to\\{0,1\\}^{\\log|\\Sigma|}$ is such that $\\rho(s)$ is the binary encoding of $s\\in\\Sigma$ . The token embedding of each symbol $s_{j}\\in\\Sigma$ is $\\rho(s_{j})$ of length $\\log\\left|\\Sigma\\right|$ followed by $k$ zeros. For inputs sequence $s_{1},\\ldots,s_{N}$ , the embedding vectors will be of the form $\\dot{\\mathbf{x}_{i}}=[\\rho(s_{i}),\\mathbf{0}_{k},\\mathcal{T}(i)]$ . ", "page_idx": 17}, {"type": "text", "text": "The embedding for any index token $p\\in[N]$ contains $\\log\\left|\\Sigma\\right|$ zeros followed by the vector $\\tau(p)$ . In other words, the embedding for the index token will be identical to the positional embeddings used in the first $N$ tokens. The embedding vector corresponding to the index token $p$ will be of the form $\\mathbf{p}=[\\mathbf{0}_{\\log|\\Sigma|},\\mathcal{T}(p),\\mathbf{0}_{k}]$ . ", "page_idx": 17}, {"type": "text", "text": "The output of the 1-layer Transformer is computed by applying attention over the input sequence with the query vector corresponding to the last token, followed by an application of the feedforward network over the output of the attention block. We can define the matrices $W_{Q}\\;=\\;\\eta[{\\bf O};{\\bf I};{\\bf O}]$ , $W_{K}=[0,\\mathbf{O},\\mathbf{I}]$ , $W_{V}\\,=\\,[{\\bf I},{\\bf O},{\\bf O}]$ , where $\\eta>0$ is a parameter that will be specified later, I is a square identity matrix and $\\mathbf{O}$ is a zero-matrix of the appropriate shape. With these definitions we get that the query vector $Q(\\mathbf{p})\\,=\\,\\eta[{\\mathcal{T}}(p)]$ contains the middle part of the input embedding, the key vectors $K(\\mathbf{x}_{i})\\,=\\,[\\mathcal{T}(i)]$ contain the last part of the input embedding and the value vectors $V(\\mathbf{x}_{i})=\\left[\\rho(s_{i})\\right]$ contain the first part of the input embedding. ", "page_idx": 18}, {"type": "text", "text": "With these query and key vectors, the dot products in attention satisfy: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\langle Q(\\mathbf{p}),K(\\mathbf{x}_{i})\\rangle\\left\\{\\stackrel{\\displaystyle>}{\\sim}3\\eta/4\\quad\\mathrm{if~}i=p,\\right.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Additionally, the dot product of the query vector with itself will be $\\langle Q(\\mathbf{p}),K(\\mathbf{p})\\rangle=0$ ", "page_idx": 18}, {"type": "text", "text": "To retrieve the required token with the softmax operator, consider ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{softmax}(Q(\\mathbf{p}),K(X)^{\\top})_{p}=\\!\\!\\frac{\\exp(\\langle Q(\\mathbf{p}),K(\\mathbf{x}_{p})\\rangle)}{\\exp(\\langle Q(\\mathbf{p}),K(\\mathbf{x}_{p})\\rangle)+\\sum_{j\\neq p}\\exp(\\langle Q(\\mathbf{p}),K(\\mathbf{x}_{j})\\rangle)}}\\\\ &{\\qquad\\qquad\\qquad\\geq\\!\\frac{\\exp(\\frac{3\\eta}{4})}{\\exp(\\frac{3\\eta}{4})+N\\exp(\\frac{\\eta}{4})}}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "which is $>\\frac{3}{4}$ for any $\\eta>2\\log(3N)$ . That is, for $\\eta>2\\log(3N)$ , the attention weight over input token $x_{p}$ with a query token $p$ will be greater than $3/4$ , and hence the total attention weight over the remaining tokens will be less than $1/4$ . ", "page_idx": 18}, {"type": "text", "text": "Recall that the value vectors contain the binary encodings of the input symbols, $V(\\mathbf{x}_{i})=[\\rho(s_{i})]$ . Let $q_{1},\\ldots,q_{N}$ be the probabilities assigned to the $N$ tokens by the attention operator. Note that $q_{p}\\geq3/4$ . Let $\\begin{array}{r}{\\bar{z}=\\sum_{i}\\bar{q}_{i}\\rho(s_{i})}\\end{array}$ . Note that if the $j$ -th bit of $\\rho(s_{p})$ is 1, then $\\bar{z}_{j}\\geq3/4$ and otherwise, $\\bar{z}_{j}\\,\\leq\\,1/4$ . From t here a ReLU-FFN can transform the vector $\\bar{z}$ to the vector $\\rho(s_{p})$ which is the desired output. \u53e3 ", "page_idx": 18}, {"type": "text", "text": "Discussion. While we showed that a one-layer Transformer with ${\\cal O}(\\log N)$ width can represent the index lookup task, it is unclear whether a one-layer Transformer with a small width can express the associative recall task. The construction above cannot be adapted in a straightforward manner to show that one-layer Transformers can represent the associative recall task. From the results in Section G on nearest neighbors, it follows that two-layer Transformers with logarithmic width can express the associative recall task. At the same time, the lower bound techniques for one-layer Transformers presented in Section D do not directly apply to the associative recall task and hence it is not straightforward to prove that Transformers must have two layers in order to perform the associative recall task. ", "page_idx": 18}, {"type": "text", "text": "The index lookup task serves a few purposes in our work. The result that it is in some sense easier for Transformers and difficult for recurrent models may not be very surprising based on the intuitive understanding of the architectures. Our results help theoretically formalize the intuitions that Transformers can use attention to arbitrarily retrieve tokens whereas recurrent models must compress the information in their hidden states. Secondly, the task helps us introduce the techniques that will be used for the constructions and lower bounds to obtain more general results in the later sections. Lastly, it serves as a simple task that separates one-layer Transformer and recurrent models. As described above, it is not straightforward to show that the associative recall task can or cannot be expressed by one-layer Transformers with small width but with the index lookup task, we have that one-layer Transformers can represent them efficiently. ", "page_idx": 18}, {"type": "text", "text": "D Lower Bounds for 1-layer Transformers ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "As described in Section B.2, and in keeping with real-world implementations, the outputs of intermediate computations are rounded to $p$ -bit precision. Further in keeping with real implementations, and to avoid overflow in exponentiation, softmax is implemented by first subtracting the maximum logit, ", "page_idx": 18}, {"type": "text", "text": "as ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\mathrm{softmax}(A)_{i,j}=\\frac{\\mathrm{exp}(A_{i,j}-\\operatorname*{max}_{l}A_{i,l})}{\\sum_{k=1}^{M}\\mathrm{exp}(A_{i,k}-\\operatorname*{max}_{l}A_{i,l})}.\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "This is a popular approach to implementing softmax [9]; it ensures that the exponentiated intermediate results are in $[0,1]$ , avoiding possible overflow when exponentiating in finite precision. ", "page_idx": 19}, {"type": "text", "text": "TCohnesoirdeemr  a4n. y Cdoisnjsoiidnet rs au bosneets- $f\\in\\mathrm{TF}_{m,p,H}^{1}$ .n g Aosvseurm ien pAulitsc eo fh laesn agtchc $N$ $S_{A}\\cup S_{B}\\,=\\,\\{1,\\dots,N\\}$ $S_{A}\\cap S_{B}=\\emptyset$   \nto $s_{i}$ for $i\\,\\in\\,S_{A}$ , and Bob has access to $s_{i}$ for $i\\:\\in\\:S_{B}$ . Then Alice and Bob can communicate   \n$3m(p+\\log N)H$ bits to compute the output $f{}(s_{1}\\ldots s_{N})$ . ", "page_idx": 19}, {"type": "text", "text": "We note that conceptually related arguments were used in Sanford et al. [51, Theorem 7] and Peng et al. [46, proof of Theorem 1]). Our approach here generalizes by stating this for arbitrary partitions over the input. ", "page_idx": 19}, {"type": "text", "text": "Proof. Without loss of generality, assume that $N\\in S_{A}$ , i.e., Alice has access to $x_{N}$ ", "page_idx": 19}, {"type": "text", "text": "In the first step, Alice sends $x_{N}$ to Bob using $d p$ bits of communication. Then, Alice and Bob compute for each head the attention logits for each position within their respective sets: ", "page_idx": 19}, {"type": "equation", "text": "$$\nA_{N,i}:=\\langle{Q}({\\bf x}_{N}),K({\\bf x}_{i})\\rangle\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "These numbers are rounded to $p$ bits of precision. ", "page_idx": 19}, {"type": "text", "text": "In the second step of the protocol, Alice and Bob exchange $2p$ bits to determine $M:=\\operatorname*{max}_{i}A_{N,i}$ , and compute ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\widehat{A}_{N,i}=A_{N,i}-M\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "for their respective positions $i\\in S_{A},S_{B}$ . Note that, as $\\widehat{A}_{N,i}\\leq0$ , $\\exp(\\widehat{A}_{N,i})\\in(0,1]$ , so there are no overflow issues arising from the $p$ -bit representation. Then they can individually compute ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{Z_{A}:=\\displaystyle\\sum_{i\\in S_{A}}\\exp(\\widehat{A}_{N,i})\\quad(\\mathrm{Alice})}\\\\ &{Z_{B}:=\\displaystyle\\sum_{i\\in S_{B}}\\exp(\\widehat{A}_{N,i})\\quad(\\mathrm{Bob})}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "each with $p$ bits of precision; both numbers are in $[0,N]$ , and at least one of them is $\\geq1$ . As all intermediate computations are rounded to $p$ bits, $\\exp(\\widehat{A}_{N,i})$ is in $[0,1]$ and rounded to $p$ bits, $Z_{A},Z_{B}$ can be represented with $p+\\log N$ bits. ", "page_idx": 19}, {"type": "text", "text": "In the third step of the protocol, they exchange $2(p+\\log N)$ bits to exchange these. They then both have access to ", "page_idx": 19}, {"type": "equation", "text": "$$\nZ:=\\sum_{j=1}^{N}\\exp(\\widehat{A}_{N,j})=Z_{A}+Z_{B}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Here, we note that the definition of finite precision arithmetic in Appendix B.2 makes addition of nonnegative numbers associative; hence, the outcome here is independent of the partition $S_{A},S_{B}$ and agrees with the result when directly summing the exponentiated logits.4 ", "page_idx": 19}, {"type": "text", "text": "The result $Z$ is in $[1,N]$ as $\\mathrm{max}_{i}\\exp(\\widehat{A}_{N,i})\\,=\\,1$ . This permits Alice and Bob to compute the attention scores $\\widehat{a}_{i}$ : ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\widehat{a}_{i}:=\\mathrm{softmax}(A)_{N,i}=\\frac{\\exp(\\widehat{A}_{N i})}{\\sum_{j=1}^{N}\\exp(\\widehat{A}_{N j})}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "each with $p$ bits of precision. ", "page_idx": 19}, {"type": "text", "text": "Then they both each compute: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{U_{A}:=\\displaystyle\\sum_{i\\in S_{A}}\\mathrm{softmax}(A)_{N,i}V(\\mathbf{x}_{i})\\quad\\mathrm{(Alice)}}\\\\ &{U_{B}:=\\displaystyle\\sum_{i\\in S_{B}}\\mathrm{softmax}(A)_{N,i}V(\\mathbf{x}_{i})\\quad\\mathrm{(Bob)}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "with $p$ bits of precision. As each entry $\\mathrm{Att}(A)_{N,i}$ , $\\mathbf{x}_{i}$ has $p$ bits of precision, and $\\textstyle\\sum_{i}\\operatorname{Att}(A)_{N,i}=1$ , the sums can be exactly represented at $2p$ bits of precision. ", "page_idx": 20}, {"type": "text", "text": "In the fourth step of the protocol, they exchange these, which amounts to $4m p$ bits of communication. Then they compute ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\sum_{i=1}^{N}\\mathrm{softmax}(A)_{N,i}V(x_{i})=U_{A}+U_{B}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "and round it to $p$ bits of precision. From this, they can obtain the result. ", "page_idx": 20}, {"type": "text", "text": "In total, the four steps took $\\leq3m(p+\\log N)$ bits of communication. Performing this protocol separately for every head leads to $\\leq3m(p+\\log N)H$ bits of communication. \u53e3 ", "page_idx": 20}, {"type": "text", "text": "E Dyck with Bounded Depths ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "It is generally agreed that processing and comprehending natural language requires processing hierarchical structures [e.g. 13, 18]. The fundamental computational problem here consists of matching and relating material that matches hierarchically, even if it appears at a great linear distance. This problem is formalized by the family of Dyck languages [14]: languages of well-matched words over one or more types of parentheses. These languages formalize problems that can be solved with access to a stack, where opening parentheses are pushed and closing parentheses are popped. Beyond a fundamental model of hierarchical structure, they are of central importance in formal language theory, as any context-free language can be expressed in terms of Dyck languages [14]. Perhaps due to the boundedness of human memory [41], natural language tends to have more bounded levels of embedding [30, 10]. This has motivated the study of bounded-depth Dyck languages as plausible simple models of the hierarchical structure underlying language, with substantial interest in the abilities of neural architectures to model them [25, 65, 6]. ", "page_idx": 20}, {"type": "text", "text": "We will primarily focus on Dyck-2 languages with depth at most $k$ , denoted as Dyck- $(2,{\\sf k})$ . The Dyck-2 language contains two types of brackets, such as round brackets $\\mathbf{\\dot{\\bar{\\rho}}}(\\mathbf{\\bar{\\rho}},\\mathbf{\\mu}^{\\bullet})^{\\bullet}$ and square brackets \u2018[\u2019, \u2018]\u2019. The Dyck-(2, 2) language with depth at most 2 contains well-balanced parenthesis where for any prefix, the number of unbalanced parentheses can be at most 2. For instance, the string \u2018( [ ] ) [ ]\u2019 has a depth at most 2 whereas the string \u2018( [ [ ] ] )\u2019 has a depth of 3. We say a model recognizes a language if it can correctly classify whether or not a string belongs to the language. We will primarily focus on strings with maximum length $N$ and study how the size of a model depends on that. ", "page_idx": 20}, {"type": "text", "text": "Our main result in this section is that any 1-layer Transformer that can recognize Dyck-2 with bounded depths must have a width that grows linearly with the input length $N$ . To show that, we will first show that the communication complexity of the Dyck-2 language with depth at most 2 is at least $N-1$ . The lower bound on the width of 1-layer Transformers will follow from the lower bound on the communication complexity of Dyck-(2, 2). ", "page_idx": 20}, {"type": "text", "text": "Problem. Let $\\Sigma\\,=\\,\\{{^\\langle}({^\\prime},{^\\circ}){^\\prime},{^\\circ}[{^\\prime},{^\\circ}]{^\\prime}\\}$ be the vocabulary of a language Dyck-(2, k). Let $\\Sigma^{n}$ denote the set of all strings of length exactly $n$ and $\\Sigma^{\\leq n}$ denote the set of all strings of lengths up to $n$ . The communication problem between Alice and Bob is defined as follows. Assume the length $N$ is even for this problem. For a string $x\\,\\in\\,\\Sigma^{N}$ , Alice has the symbols in the odd indices of the string and Bob has the symbols in the even indices of the string. They have to compute the function $f_{\\sf D y c k}:\\Sigma^{N/2}\\times\\Sigma^{N/2}\\overset{.}{\\rightarrow}\\{0,1\\}$ which outputs 1 if the string $x$ is in the language Dyck-(2, 2) and outputs 0 otherwise. ", "page_idx": 20}, {"type": "text", "text": "For any function, the fooling set is defined in the following way, ", "page_idx": 20}, {"type": "text", "text": "Definition 1. [Fooling set] A fooling set for any function $f\\,:\\,\\Sigma^{N/2}\\,\\times\\,\\Sigma^{N/2}\\,\\rightarrow\\,\\{0,1\\}$ is a set $S\\subseteq\\Sigma^{N/2}\\times\\Sigma^{N/2}$ and a value $b\\in\\{0,1\\}$ such that, ", "page_idx": 20}, {"type": "text", "text": "\u2022 For every $(x,y)\\in S,f(x,y)=b$ . ", "page_idx": 21}, {"type": "text", "text": "The following is a well-known fact in communication complexity. ", "page_idx": 21}, {"type": "text", "text": "Fact 4. For any function $f$ , if there exists a fooling set of size $|S|_{\\cdot}$ , then the communication complexity $C(f)\\geq\\log_{2}|{\\dot{S}}|$ . ", "page_idx": 21}, {"type": "text", "text": "Lemma 1. Suppose Alice and Bob have the symbols in the odd and even indices of a string $s\\in\\Sigma^{N}$ respectively. To each compute whether $s\\in D y c k\u2013(2,2),$ they must exchange at least $N-1$ bits. ", "page_idx": 21}, {"type": "text", "text": "Proof. The proof follows from the fact that there exists a fooling set of size $2^{N-1}$ for the language Dyck-(2, 2) with strings of length $N$ . The fooling set $S$ is constructed with all strings in $s=(x,y)\\in$ $\\Sigma^{N}$ such that $f_{\\mathsf{D y c k}}(s)=1$ . Each string $s$ in $S$ satisfies: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r}{s=(x,y)\\quad\\mathrm{where}\\quad x\\in\\Sigma_{\\mathrm{odd}}^{N/2},y\\in\\Sigma_{\\mathrm{even}}^{N/2},\\mathrm{~and~}f_{\\mathsf{D y c k}}(x,y)=1.}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Here, $x=(x_{1},x_{2},.~.~.~,x_{N/2})$ and $y=(y_{1},y_{2},...,y_{N/2})$ represent the sequences of symbols at odd and even indices, respectively. ", "page_idx": 21}, {"type": "text", "text": "Constructing the fooling set. Note that, if $x$ is the string of symbols in the odd indices of a string $s\\,\\in\\,\\mathsf{D y c k}\\!-\\!(2,2)$ , then the string of symbols $y$ in the even indices such that $f_{\\mathsf{D y c k}}(x,y)\\,=\\,1$ is unique. Suppose one is provided with the string $\\boldsymbol{x}=(x_{1},\\dots,x_{N/2})$ , then one can deterministically determine the symbols in the even indices $y=(y_{1},\\dots,y_{N/2})$ in the following way. Iterate through the symbols in $x$ , starting with $x_{1}$ which must be an open bracket. After the open bracket $x_{1}$ , if there are one or more closing brackets $x_{2},\\ldots,x_{K}$ before encountering another open bracket $x_{K+1}$ , then the symbols $y_{1},\\dots,y_{K}$ can be constructed deterministically using the following mapping, ", "page_idx": 21}, {"type": "equation", "text": "$$\ny_{j}=\\left\\{\\begin{array}{l l}{\\mathfrak{e}(^{\\circ})}&{\\mathrm{if}\\;x_{j+1}=^{\\circ}\\rangle^{\\circ}\\,\\mathrm{for}\\,j<K,}\\\\ {\\mathfrak{e}[^{\\circ}}&{\\mathrm{if}\\;x_{j+1}=^{\\circ}]^{\\circ}\\,\\mathrm{for}\\,j<K,}\\\\ {\\mathfrak{e})^{\\circ}}&{\\mathrm{if}\\;x_{1}=^{\\circ}\\mathrm{(^{\\circ}\\,f o r}\\,j=K,}\\\\ {\\cdot]^{\\circ}}&{\\mathrm{if}\\;x_{1}=^{\\circ}\\mathrm{[^{\\circ}\\,f o r}\\,j=K.}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "In other words, the symbols $y_{1},\\dots,y_{K-1}$ will be the open brackets corresponding to the closing brackets $x_{2},\\ldots,x_{K}$ . After the symbol $x_{1}$ , whenever you encounter another open bracket $x_{K+1}$ where $K>0$ , then the symbol $y_{K}$ will be the closing bracket corresponding to the symbol $x_{1}$ . Once you have matched the first open bracket symbol $x_{1}$ with a closing bracket, you are bound to encounter another open bracket. Follow the same process until the end of the string and one can obtain the string $y$ , such that $(x,y)\\in\\mathsf{D y c k}{-}(2,2)$ . ", "page_idx": 21}, {"type": "text", "text": "Hence, if $x$ and $y$ are the symbols in the odd and even indices of a string $s\\,\\in\\,\\mathsf{D y c k}\\!-\\!(2,\\,2),$ , then placing any other string $y^{\\prime}\\neq y$ in the even indices leads to a string which is not in Dyck-(2, 2). Our fooling set $S$ contains all strings of length $N$ in the language Dyck-(2, 2). Hence, by construction, we have that $f_{\\mathsf{D y c k}}(s)=f_{\\mathsf{D y c k}}(\\bar{x},y)=\\bar{1}$ for all $s=(x,\\bar{y})\\bar{\\in}\\,S$ and ", "page_idx": 21}, {"type": "equation", "text": "$$\nf_{\\sf D y c k}(x_{1},y_{2})=f_{\\sf D y c k}(x_{2},y_{1})=0\\quad\\mathrm{for}\\;\\mathrm{all}\\quad(x_{1},y_{1})\\neq(x_{2},y_{2})\\in S.\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Thus, such a set $S$ is a fooling set by Definition 1. ", "page_idx": 21}, {"type": "text", "text": "Size of the fooling set. One can show that the total number of strings of length $N$ in the language Dyck-(2, 2) is exactly $2^{N-1}$ with some elementary combinatorics. First, see that the number of Dyck-2 sequences of depth at most 1 and length $N$ is exactly $2^{N/2}$ . This is because the string is made up of blocks of $\\cdot()^{\\bullet}$ and $\\mathbf{\\dot{[]}}^{\\ast}$ , and hence there are two choices for every block. Then, consider a block of Dyck-2 string of length $k$ (where $k$ is even) which starts and ends with an open and closing bracket respectively. Moreover, the Dyck-2 string has a depth exactly 2, e.g. $\\left[\\,\\left(\\right)\\,\\left[\\right]\\,\\left(\\right)\\,\\right]^{\\ast}$ . Note that, the total number of such strings of length $k$ is exactly $2^{k/2}$ since there are two choices for the first bracket and there is a Dyck-2 string of depth 1 and length $k-2$ inside it. For simplicity, we will call such strings as belonging to the language Dyckb-(2, 2) which is a subset of the language Dyck-(2, 2). In simple terms, strings of length $m$ in the subset Dyckb-(2, 2) have an overall depth 2 and have a depth 1 string of length $m-2$ between the first symbol (open bracket) and the last symbol (closing bracket); for instance $\\mathbf{\\dot{\\bar{\\rho}}}[\\mathbf{\\Lambda}(\\mathbf{)\\,}[\\mathbf{]\\,}(\\mathbf{)\\,}(\\mathbf{)\\,}]^{\\ast}$ . ", "page_idx": 21}, {"type": "text", "text": "The total number of Dyck-2 strings of depth at most 2 and length exactly $N$ can be computed as follows. Partition the indices into $k$ contiguous blocks where each partition is of an even length. Suppose the indices begin with 1, then the points of partition could be between 2 and 3, 4 and 5, and so on. For instance, a valid partition of the indices $[1,2,\\dots,8]$ into 3 blocks is [1, 2], $[3,\\ldots,6]$ , and [7, 8]. The total number of partition points is $N/2-1$ . For any such partition, if the length of a block is 2 then that block can only have Dyck-2 strings of depth 1 and if the block is of length $\\geq4$ , then consider all possibilities of Dyck-(2, 2) strings starting and ending with open and closing brackets respectively or in other words, strings in Dyckb-(2, 2) described earlier. If the number of partitions is $\\bar{N}/2-1$ , then all possible strings have depth at most 1 and if the number of partitions is 0, then the entire string is in Dyckb-(2, 2). ", "page_idx": 22}, {"type": "text", "text": "See that, no matter how you partition the inputs, the number of possible strings at each block of length $m$ is $2^{m/2}$ . Further if $P=\\{p_{1},\\ldots,p_{k}\\}$ denotes the set of lengths of each block in the partition, then the total number of strings with such a partition is $\\prod_{i=1}^{k}2^{p_{i}/2}=2^{\\sum_{i=1}^{k}p_{i}/2}=2^{N/2}$ . In other words, regardless of how the indices are partitioned if each block of size $>2$ is required to be a string in Dyckb-(2, 2), then the total number of possible strings is $2^{N/2}$ . ", "page_idx": 22}, {"type": "text", "text": "The total number of Dyck-2 strings of depth at most 2 can be computed by considering partitions of all sizes $k=0,\\ldots,N/2-1$ and all possible partitions for a given size. With this, we get the total number of valid strings in Dyck-(2, 2) of length $N$ to be ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\sum_{k=0}^{\\frac{N}{2}-1}\\binom{\\frac{N}{2}-1}{k}2^{N/2}=2^{N-1}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Hence from fact 4, it follows that the communication complexity of Dyck-(2, 2) is at least $N-1$ . ", "page_idx": 22}, {"type": "text", "text": "While we have given a self-contained proof based on fooling sets, an alternative proof of Lemma 1 could proceed using varieties of finite monoids, by proving that the syntactic monoid of Dyck-(2, 2) is not in the variety DA, and then applying the result of Raymond et al. [49]. ", "page_idx": 22}, {"type": "text", "text": "Using Lemma 1 and Theorem 4, it follows that any 1-layer Transformer that can recognize Dyck-(2, 2) must have a width that grows linearly with the input length. ", "page_idx": 22}, {"type": "text", "text": "Theorem 10. Consider a one-layer transformer $f\\in\\mathrm{TF}_{d,p,H}^{1}$ deciding membership in $D y c k{-}(2,2)$ .   \nThen dH \u22653(p+log N). ", "page_idx": 22}, {"type": "text", "text": "Suppose we allow the transition function in a recurrent model to be any arbitrary function as defined in Section 2. In that case, it naturally follows that such an RNN can represent any DFA with $k$ states with a hidden state of size $\\log k$ . Any bounded dyck language Dyck- $(\\mathsf{n},\\mathsf{k})$ can be represented by a DFA with $O(2^{k})$ states which is independent of the input length $N$ . In particular, the language Dyck-(2, 2) considered here can be represented by a DFA with just 7 states. Hence, it follows that a recurrent model of constant size can represent the Dyck-(2, 2) language for arbitrary lengths in a finite precision setting. Additionally, prior works have described constructions of such recurrent models with practical activation functions such as Sigmoid [25] and ReLU [6]. Thus, the bounded Dyck language Dyck-(2, 2) provides us a separation between one-layer Transformer and recurrent models since constant-sized RNNs can represent them whereas one-layer Transformers must have at least linear width to represent them. ", "page_idx": 22}, {"type": "text", "text": "F Transformers and Boolean functions ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Communication protocols and lower bounds. There are some notable differences between the types of communication complexity lower bounds we have for one-layer Transformers (Theorem 4) and for RNNs (Theorem 2). If an RNN can compute a function $f$ then Theorem 2 implies that there exists a one-way communication protocol with $m p$ bits over any contiguous partitions of the input. On the other hand, if a one-layer Transformer can compute a function $f$ , then Theorem 4 implies the existence of a communication protocol with $O(m p H\\log N)$ bits over any partition of the input \u2014 but not one-way. Hence, the types of lower bounds that apply to these two architectures are different. For any function $f$ such as the INDEX problem, if the one-way communication complexity is lower bounded by $\\Omega(N)$ over some contiguous partitions then it implies that for RNNs, the width $m=\\Omega(N/p)$ . However since the two-way communication complexity of such problems might be lower, those lower bounds need not apply to one-layer Transformers. For instance, the INDEX problem can be solved with $\\log N$ bits of communication if two-way communication is allowed or in other words, Bob is allowed to send bits to Alice. Conversely, to prove lower bounds for Transformers computing a certain function $f$ , proving a communication complexity lower bound for $f$ over any partition of inputs suffices. For a particular partitioning of inputs, we showed a lower bound on the communication complexity of bounded Dyck languages. While that result implies a lower bound on one-layer Transformers, the partitioning is not contiguous and hence does not apply to recurrent models. For Dyck-(2, 2), contiguous partitions are not a hard case, and in fact, communicating $\\leq2$ open brackets from the first half is sufficient. This is why the lower bound of Lemma 1 does not apply to RNNs. Despite these differences, for a large class of Boolean functions including functions such as Equality and Disjointness, the lower bounds apply to both of these architectures. ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "Equality. For convenience, we discuss the complement of the Equality function $\\mathrm{INEQ}=1-\\mathrm{EQ}(x)$ which is the inequality function. It does not influence any of our results or the constructions for Transformers but it helps make the intuitions for the construction clearer. The function INEQ : $\\{0,1\\}^{N}\\rightarrow\\{0,1\\}$ is a Boolean function defined as, ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\mathrm{INEQ}(x)=\\mathbb{I}[\\left(x_{1},\\dots,x_{N/2}\\right)\\neq(x_{N/2+1},\\dots x_{N})]\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "This can also be represented as a 2-DNF with $N/2$ terms, ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\mathrm{INEQ}(x)=\\left(x_{1}\\wedge\\neg x_{N/2+1}\\right)\\vee\\left(\\neg x_{1}\\wedge x_{N/2+1}\\right)\\vee.\\,.\\,.\\vee\\left(x_{N/2}\\wedge\\neg x_{N}\\right)\\vee\\left(\\neg x_{N/2}\\wedge x_{N}\\right)\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "F.1 Lower Bounds ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We show that for any RNN that computes the INEQ function over $\\{0,1\\}^{N}$ with a hidden state of size $m$ and $p$ bits of precision, it is necessary that $m p=\\Omega(N)$ . In other words, the size of the hidden state of the RNN grows linearly with the input length $N$ . Similar to other results, this will be based on communication complexity but we also provide an alternate way to prove this lower bound based on the state complexity of DFAs that compute the INEQ function. ", "page_idx": 23}, {"type": "text", "text": "The result states that if any RNN with a hidden state of size $m$ over $p$ -bit precision can simulate a DFA with $n$ states, then the representation size of the hidden state mp must be at least $\\log n$ . There is one caveat related to this DFA-based result which does not apply to the communication complexity-based lower bounds. For the DFA-based result, while the transition function is allowed to be an arbitrary function, it has to be of the form $g\\big(\\mathbf{x}_{t},\\mathbf{h}_{t-1}\\big)$ ,i.e., the functions cannot be different based on the timestep $t$ . It is unclear if the result still applies when the function is allowed to be different based on the timestep. However, since the transition function is allowed to be any arbitrary function, it still captures all the recurrent and state-space architectures used in practice. Additionally, this fairly simple technique could be used to prove lower bounds for RNNs based on lower bounds in formal language theory. ", "page_idx": 23}, {"type": "text", "text": "Lemma 4. Let $\\boldsymbol{\\mathcal{A}}$ be a DFA with n states. Let $\\mathcal{R}$ be an RNN such that for all $x\\in\\Sigma^{*}$ , ${\\mathcal{A}}(x)={\\mathcal{R}}(x)$ .   \nThen the size of the hidden state of the RNN: $m p\\geq\\log n$ . ", "page_idx": 23}, {"type": "text", "text": "Proof. Suppose an RNN $\\mathcal{R}$ exists such that the dimension of its hidden state $m\\,<\\,\\log n$ . It is straightforward to see that we can construct another DFA $\\mathcal{A^{\\prime}}$ from the RNN $\\mathcal{R}$ such that the DFA $\\mathcal{A^{\\prime}}$ accepts the same language as $\\boldsymbol{\\mathcal{A}}$ but it has $2^{m p}<n$ states. ", "page_idx": 23}, {"type": "text", "text": "Create a state for each vector $\\mathbf{h}\\in\\{0,1\\}^{m p}$ and assign the state corresponding to the vector ${\\bf h}_{0}$ as the start state. For each state $q$ corresponding to vector $\\mathbf{h}$ , make $q$ a final state if $f(\\mathbf{h})=1$ . For each $\\mathbf{h}\\in\\{0,1\\}^{m p}$ and each symbol $x\\in\\Sigma$ , compute $\\mathbf{h}^{\\prime}=g(\\mathbf{x},\\mathbf{h})$ . Add a transition between the state corresponding to $\\mathbf{h}$ and $\\mathbf{h}^{\\prime}$ using the symbol $x$ . Hence, we get the entire DFA with the transition map and the set of start and final states that accept the same language. ", "page_idx": 23}, {"type": "text", "text": "Since we are given that the automata $\\boldsymbol{\\mathcal{A}}$ is the minimum-sized DFA that accepts the language, the automata $\\mathcal{A^{\\prime}}$ having fewer states and accepting the same language is a contradiction. Hence, such an RNN cannot exist and the dimension of the hidden state vector $m$ of the RNN must be at least $\\log n$ . \u53e3 ", "page_idx": 23}, {"type": "text", "text": "Theorem 11. Any recurrent model with a hidden state of size m over $p$ -bits of precision that computes the $\\mathrm{INEQ}(x)$ for all $x\\in\\{0,1\\}^{N}$ must have $m p\\geq N/2$ . ", "page_idx": 24}, {"type": "text", "text": "Proof. We show two ways to prove the above statement. The first proof is based on the communication complexity of the Equality problem. ", "page_idx": 24}, {"type": "text", "text": "Proof 1. Suppose Alice and Bob have the input vectors $a,b\\,\\in\\,\\{0,1\\}^{N/2}$ respectively and have access to an RNN that computes the INEQ function over $\\{0,1\\}^{\\tilde{N}}$ . Alice can first use the RNN starting with input $a_{1}$ and the vector $\\mathbf{h}_{0}$ and iteratively update the hidden state until the input $a_{N/2}$ . Alice can then send the vector $\\mathbf{h}_{N/2}$ to Bob who can provide $b_{1},\\dots,b_{N/2}$ as inputs and compute $y={\\mathrm{INEQ}}(a\\cdot b)=1-{\\mathrm{EQ}}(a,b)$ . Since sending the hidden state vector $\\mathbf{h}_{N/2}$ requires $m p$ bits, it must be that $m p\\geq N/2$ due to Theorem 2. ", "page_idx": 24}, {"type": "text", "text": "Proof 2. The second proof uses the following relation between recurrent models and a DFA. ", "page_idx": 24}, {"type": "text", "text": "Let $\\mathcal{A}_{I N E Q}$ be the minimum-sized DFA that computes the INEQ function over $\\{0,1\\}^{N}$ . When we say a DFA computes INEQ function over $\\{0,1\\}^{N}$ , we mean that ${\\mathcal{A}}_{I N E Q}(x)={\\mathrm{INEQ}}(x)$ for all $x\\in\\{0,1\\}^{N}$ and $\\mathcal{A}_{I N E Q}(x)$ can be defined arbitrarily for $x\\notin\\{0,1\\}^{N}$ to obtain the DFA with minimum number of states. ", "page_idx": 24}, {"type": "text", "text": "Note that, any DFA that agrees with INEQ over all $x$ in $\\{0,1\\}^{N}$ must have at least $2^{N/2}$ states. This follows from the fact that for any two distinct $x_{1},x_{2}\\,\\in\\,\\{0,1\\}^{N/2}$ there is a distinguishing suffix $s\\in\\{0,1\\}^{N/2}$ such that $\\mathrm{INEQ}(x_{1}\\cdot s)\\neq\\mathrm{INEQ}(x_{2}\\cdot s)$ . Hence, any DFA that agrees with INEQ on all inputs in $\\{0,1\\}^{N}$ must have at least $2^{N/2}$ states even if it is defined arbitrarily over other inputs $x\\notin\\{0,1\\}^{N}$ . From Lemma 4, it follows that $m p\\ge N/2$ . ", "page_idx": 24}, {"type": "text", "text": "Theorem 12. Any one-layer Transformer with a width m and $H$ heads operating over $p$ -bits of precision that computes the $\\mathrm{INEQ}(x)$ for all $x\\in\\{0,1\\}^{N}$ must have $m p H=\\Omega(N)$ . ", "page_idx": 24}, {"type": "text", "text": "The statement immediately follows from Theorem 4 and Fact 2. ", "page_idx": 24}, {"type": "text", "text": "F.2 Transformer Construction for Equality ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "We now show how a log-sized 2-layer Transformer operating over log-precision numbers can compute the INEQ function over all Boolean inputs. ", "page_idx": 24}, {"type": "text", "text": "Theorem 6. For any $N\\in\\mathbb{N},$ , there exists a 2-layer Transformer $f\\,\\in\\,\\mathrm{TF}_{m,p,2}^{2}$ 2m,p,2 where width m = ${\\cal O}(\\log N)$ and precision $p=O(\\log N)$ such that $f(\\mathbf{x})=\\operatorname{EQ}(\\mathbf{x})$ for all $\\mathbf{x}\\in\\bar{\\{0,1\\}}^{N}$ . ", "page_idx": 24}, {"type": "text", "text": "We first describe the broad idea behind the construction. We will consider the input domain to be $\\{-1,1\\}^{N}$ and our goal is to compute $\\mathrm{INEQ}(x)$ for all $x\\in\\{-1,1\\}^{N}$ . This can also be formulated as, ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\mathrm{INEQ}(x)=(x_{1}\\oplus x_{\\frac{N}{2}+1})\\lor(x_{2}\\oplus x_{\\frac{N}{2}+2})\\lor.\\,.\\,.\\lor(x_{\\frac{N}{2}}\\oplus x_{N})\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "Let $f_{\\mathrm{ineq}}^{(1)}$ denote the first layer of our construction $f_{\\mathrm{ineq}}$ that computes INEQ and let $f_{\\mathrm{ineq}}^{(1)}(x)_{i}$ denote the ith output vector of the first layer. Our construction will be such that for , on the ith input the attention mechanism at the first layer will retrieve the $(i-N/2)\\mathfrak{t}$ h input using tools described in Section B.3. With the MLP, the first layer $f_{\\mathrm{ineq}}^{(1)}(x)_{i}$ will compute $x_{i}\\oplus x_{i-\\frac{N}{2}}$ for each $i>N/2$ where $x_{i}\\oplus x_{i-\\frac{N}{2}}=0$ if $x_{i}=x_{i-\\frac{N}{2}}$ and is 1 otherwise. The second layer will then take an OR over all those values which will result in computing $\\mathrm{INEQ}(x)$ . ", "page_idx": 24}, {"type": "text", "text": "Proof. Let $\\boldsymbol{x}\\,=\\,(x_{1},\\ldots,x_{N})$ denote our input vector. The input to the Transformer model will include the positions as well $\\tilde{\\boldsymbol{x}}=((x_{1},1),\\ldots,(x_{N},N))$ . Let $\\mathbf{x}_{i}\\in\\mathbb{R}^{d}$ denote the embedding of the ith input $\\tilde{x}_{i}$ where $d=2+2k$ . Here, $k=O(\\log N)$ is the dimension of vectors $\\mathcal{T}(1),\\ldots,\\mathcal{T}(N)$ described in Corollary 8.1. The input embeddings will contain four parts and will be of the following form ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\mathbf{x}_{i}=\\left\\{\\!\\!\\begin{array}{l l}{[x_{i},0,\\mathcal{T}(i),\\mathcal{T}(i),1]}&{\\mathrm{if}\\ i\\leq N/2,}\\\\ {[x_{i},0,\\mathcal{T}(i),\\mathcal{T}(i-\\frac{N}{2}),1]}&{\\mathrm{otherwise}.}\\end{array}\\!\\!\\right.\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "The query vectors $Q(\\mathbf{x}_{i})=\\mathbf{x}_{i}W_{Q}\\in$ will be the last part of the embeddings, i.e., $Q(\\mathbf{x}_{i})=[T(i),1]$ for $i\\stackrel{-}{\\leq}\\dot{N}/2$ and is $\\tau(i-N/2)$ for $i>N/2$ . Similarly, the key vectors $K(\\mathbf{x}_{i})=[\\mathcal{T}(i),-1/2]$ for all $i$ . The value vector will be a $d$ -dimensional vector $V(\\mathbf{x}_{i})=[0,x_{i},\\mathbf{0}_{k},\\mathbf{0}_{k}]$ . The query, key, and value transformations can be implemented with block matrices containing zero and identity matrices similar to the one described in Section C.2. ", "page_idx": 25}, {"type": "text", "text": "By construction, the dot products $A_{i,j}=\\langle Q(\\mathbf{x}_{i}),K(\\mathbf{x}_{j})\\rangle=\\langle T(i-N/2),T(j)\\rangle-1/2$ will be such that for $i>N/2$ , ", "page_idx": 25}, {"type": "equation", "text": "$$\nA_{i,j}=\\langle Q(\\mathbf{x}_{i}),K(\\mathbf{x}_{j})\\rangle\\left\\{\\stackrel{\\displaystyle>1/4}{\\displaystyle\\leq-1/4}\\right.\\!\\!\\!\\!\\mathrm{if}\\,\\,j=i-\\frac{N}{2},\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "For $i\\ <\\ N/2$ , the dot products $A_{i,j}$ will be greater than $1/4$ if $i~=~j$ and will be less than $-1/4$ for $i\\ne j$ . If this was a Transformer with the hard-attention mechanism, then, note that $\\mathrm{Att}(X)_{i}\\,=\\,[0,x_{i},\\mathbf{0}_{k},\\mathbf{0}_{k}]$ for $i\\,\\le\\,N/2$ and $\\mathrm{Att}(X)_{i}\\,=\\,[0,x_{i-N/2},\\mathbf{0}_{k},\\mathbf{0}_{k}]$ for $i\\,>\\,N/2$ . With residual connections or another attention-head, the output of the attention block will include the original input as well which will lead to ", "page_idx": 25}, {"type": "equation", "text": "$$\n\\mathrm{Att}(X)_{i}+\\mathbf{x}_{i}=\\left\\{\\!\\!\\!\\begin{array}{l l}{[x_{i},x_{i},\\mathcal{T}(i),\\mathcal{T}(i),1]\\quad\\mathrm{for}\\;i\\leq N/2,}\\\\ {[x_{i},x_{i-N/2},\\mathcal{T}(i),\\mathcal{T}(i),1]\\quad\\mathrm{for}\\;i>N/2.}\\end{array}\\!\\!\\right.\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "Then a simple ReLU FFN can compute the XOR of the first two values of the output vector from the attention block. Hence, by construction, the output vector from the first layer $f_{\\mathrm{ineq}}^{(1)}(x)_{i}\\;=\\;$ $[x_{i}\\oplus x_{i-N/2},...\\,]$ for $i>N/2$ and $[0,\\ldots]$ for $i\\leq N/2$ . ", "page_idx": 25}, {"type": "text", "text": "Second layer computing OR. The second layer of the Transformer will compute the OR over the first coordinate of the input vector which is quite straightforward. Let the query vector $Q(\\mathbf{x}_{i}^{(1)})=0$ . The value vectors will be of the form $V(\\mathbf{x}_{i}^{(1)})=[(x_{i}\\oplus x_{i-N/2}),0,\\dots,0]$ for $i>N/2$ and they will be zero vectors construction for $i\\leq N/2$ . Then, regardless of the keys, the dot products will be 0 for each position, and hence ", "page_idx": 25}, {"type": "equation", "text": "$$\n\\operatorname{Att}(X)_{N}^{(2)}={\\frac{1}{N}}\\sum_{i=N/2}^{N}(x_{i}\\oplus x_{i-N/2}).\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "If $\\begin{array}{r}{\\mathrm{Att}(X)_{N}^{(2)}\\geq\\frac{1}{N}}\\end{array}$ , then the FFN can output 1 and it can output 0 otherwise. ", "page_idx": 25}, {"type": "text", "text": "Softmax attention. We now describe how to retrieve the $x_{i-N/2}$ values with softmax attention in the first layer of the model. The approach is slightly different from the one used in Section C.2 and makes use of finite precision rounding. ", "page_idx": 25}, {"type": "text", "text": "Consider another construction that is identical to the construction described above with the exception that $\\tilde{Q}(\\mathbf{x}_{i})\\,=\\,\\eta Q(\\mathbf{x}_{i})\\,=\\,\\eta[T(i),1]$ . We show that for large enough $\\eta$ and $i>N/2$ , the weight softmax $({\\cal A})_{i,j}$ will be so close to 1 for $j=i-N/2$ that it will be rounded to 1. Similarly, it will be rounded to 0 for $j\\neq i-N/2$ . For $i\\leq N/2$ , the weight will be rounded to 1 for $i=j$ and will be rounded to 0 otherwise. ", "page_idx": 25}, {"type": "text", "text": "Recall that the finite precision implementation is parameterized by a large constant $\\mathrm{K}_{c}$ (cf. Appendix B.2). For $i>N/2$ and $j=\\bar{i}-N/2$ , there exists an $\\eta$ such that, ", "page_idx": 25}, {"type": "equation", "text": "$$\n\\left|1-\\frac{\\exp(\\eta\\langle Q(\\mathbf{x}_{i}),K(\\mathbf{x}_{j})\\rangle)}{\\sum_{k=1}^{N}\\exp(\\eta\\langle Q(\\mathbf{x}_{i}),K(\\mathbf{x}_{k})\\rangle)}\\right|\\leq\\frac{1}{2N^{\\mathrm{K}_{c}}}.\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "For such an $\\eta$ , the weight softmax $({\\cal A})_{i,j}$ will be rounded to 1. ", "page_idx": 25}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{1\\geq\\frac{\\exp(\\eta\\langle Q(\\mathbf{x}_{i}),K(\\mathbf{x}_{j})\\rangle)}{\\sum_{k=1}^{N}\\exp(\\eta\\langle Q(\\mathbf{x}_{i}),K(\\mathbf{x}_{k})\\rangle)}\\geq\\frac{\\exp(\\frac{1}{4}\\eta)}{\\exp(\\frac{1}{4}\\eta)+(N-1)\\exp(-\\frac{1}{4}\\eta)}\\geq1-\\frac{1}{2N^{\\mathrm{K}_{c}}}}\\\\ &{\\qquad\\implies2N^{\\mathrm{K}_{c}}\\exp(\\frac{1}{4}\\eta)\\geq(2N^{\\mathrm{K}_{c}}-1)(\\exp(\\frac{1}{4}\\eta)+(N-1)\\exp(-\\frac{1}{4}\\eta))}\\end{array}\n$$", "text_format": "latex", "page_idx": 25}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\implies\\exp(\\frac{\\eta}{4})\\geq(N-1)(2N^{\\mathrm{K}_{c}}-1)\\exp(-\\frac{\\eta}{4})}\\\\ &{\\implies\\eta\\geq2\\log\\Big((N-1)(2N^{\\mathrm{K}_{c}}-1)\\Big)}\\end{array}\n$$", "text_format": "latex", "page_idx": 26}, {"type": "text", "text": "Thus, for $\\eta=\\log N+\\mathrm{K}_{c}\\log2N,$ , the softmax attention weight at $j=i-N/2$ will be rounded to 1. Similarly, one may verify that if $\\eta\\geq\\mathrm{K}_{c}\\log2N$ , then the weight softmax $({\\cal A})_{i,j}$ for $j\\neq i-N/2$ will be less than $1/2N^{\\mathrm{K}_{c}}$ and hence will be rounded to 0. Hence, for $\\eta\\geq\\log N+\\mathrm{K}_{c}\\log2N$ , the softmax attention will behave like hard attention, and as described earlier the Transformer will compute the INEQ function. This completes the proof. ", "page_idx": 26}, {"type": "text", "text": "The scaling in the attention mechanism in the last part can also be implemented in almost exactly the same way as the construction for Theorem 1. Implementing it that way then requires the ReLU FFN to act as a threshold function. The scaling described above makes use of the finite precision setting to amplify the dot products to the point that it acts as hard attention. ", "page_idx": 26}, {"type": "text", "text": "F.3 Representing more general class of Boolean functions ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "We now describe how the construction for Equality in Section F.2 can be extended to a class of Boolean functions namely, thresholds of at most $N\\,k$ -SPARSE features. By threshold functions, we mean functions of the form ${\\mathsf{T h}}_{b}:\\{0,1\\}^{n}\\rightarrow\\{0,1\\}$ where for $x\\in\\{0,1\\}^{n}$ , the function is defined as $\\begin{array}{r}{{\\mathsf{T h}}_{b}(x)=\\mathbb{I}[\\sum_{i=1}^{n}x_{i}-b>0]}\\end{array}$ . The function is parameterized by a constant $b$ . For $b=n-1$ , the function effectively is the AND over all bits. Similarly, for $b=n/2$ , the function outputs 1 if the majority of the input bits are 1 and outputs 0 otherwise. ", "page_idx": 26}, {"type": "text", "text": "A $k$ -SPARSE function is simply a function whose output on any input $x\\in\\{0,1\\}^{n}$ depends on at most $k$ indices of the input. More formally, a function $f:\\{0,1\\}^{n}\\rightarrow\\{0,1\\}$ is $k$ -SPARSE if there exist indices $1\\leq i_{1}<i_{2}<...<i_{k}\\leq n$ and a function $g:\\{0,1\\}^{k}\\rightarrow\\{0,1\\}$ , such that for every $x\\in\\{0,1\\}^{n}$ , $f(x_{1},x_{2},\\ldots,x_{n})=g(x_{i_{1}},x_{i_{2}},\\ldots,x_{i_{k}})$ . A $k$ -SPARSE function can be any Boolean function (AND, OR, XOR, etc) with the constraint that it can depend on at most $k=O(1)$ bits of input. ", "page_idx": 26}, {"type": "text", "text": "We now define the class of threshold of at most $N\\,k$ -SPARSE features denoted as $\\mathrm{THRES}_{k,N}$ . Let $g_{I}$ be a $k$ -SPARSE function depending on $I\\subset[N]$ indices where $|I|\\leq k$ . A function $f:\\{0,1\\}^{N}\\rightarrow\\{0,1\\}$ is in the class $\\mathrm{THRES}_{k,N}$ if it is of the form $\\boldsymbol{f}(\\boldsymbol{x})=\\mathsf{T h}_{b}(g_{I_{1}}(\\boldsymbol{x}),g_{I_{2}}(\\boldsymbol{x}),\\ldots,g_{I_{N}}(\\boldsymbol{x}))$ where each $I_{j}\\subset[N]$ and $|I_{j}|\\leq k$ for all $j\\in[N]$ . Further $g_{I_{j}}(x)=0$ for all $x\\in\\{0,1\\}^{N}$ if the set $I_{j}=\\emptyset$ . ", "page_idx": 26}, {"type": "text", "text": "The following result states that for any function $h$ in the class of threshold of at most $\\textit{N k}$ -SPARSE features, there exists a two-layer Transformer with logarithmic width that can express the function $h$ . ", "page_idx": 26}, {"type": "text", "text": "Theorem 13. For any $N\\in\\mathbb{N}$ and any function $h\\in\\mathrm{THRES}_{k,N}$ , there exists a 2-layer Transformer $f_{\\mathrm{TF}}\\in\\mathrm{TF}_{m,p,k}^{2}$ fwoirt ha llw $m=O(\\log N)$ , $H=k$ heads, and precision $p=O(\\log N)$ such that $f_{\\mathrm{TF}}(x)=h(x)$ $x\\in\\{0,1\\}^{N}$ ", "page_idx": 26}, {"type": "text", "text": "Proof. The result follows from a straightforward extension of the construction in Theorem 6. We will again remap the domain to $\\{-1,1\\}^{N}$ . For this problem, we will also prepend the input $x\\in\\{-1,1\\}^{N}$ with an additional beginning of sequence token [BOS]. Hence, the Transformer will receive $N+1$ tokens $\\mathbf{x}_{0},\\mathbf{x}_{1},\\ldots,\\mathbf{x}_{N}$ . ", "page_idx": 26}, {"type": "text", "text": "For any function $h\\,\\in\\,\\mathrm{THRES}_{k,N}$ , the first layer of the Transformer will compute the $k$ -SPARSE features, $g_{I_{1}}(x),g_{I_{2}}(x),\\ldots,g_{I_{N}}(x)$ . The second layer will then compute the threshold function ${\\mathsf{T h}}_{b}$ over the $k$ -SPARSE features. ", "page_idx": 26}, {"type": "text", "text": "Computing Threshold. The second layer is quite trivial to construct. Let $\\mathbf{x}_{1}^{(1)},\\mathbf{x}_{1}^{(0)},\\ldots,\\mathbf{x}_{N}^{(1)}$ , . . . , xN be the output vectors of the first layer and inputs to the second layer. Suppose the $i$ th output vector contains the $i$ th $k$ -SPARSE feature, $\\mathbf{x}_{i}^{(1)}\\;=\\;[g_{I_{1}}(x),\\ldots]$ for $i\\,=\\,1,\\ldots,N$ and $\\mathbf{x}_{0}^{(1)}\\,=\\,\\mathbf{0}$ . If the query transformation is a null matrix, $Q(\\mathbf{x}_{N}^{(1)})\\;=\\;\\mathbf{0}$ , and the value transformation is such that $V(\\mathbf{x}_{i}^{(1)})=[g_{I_{1}}(x)]$ , it follows that the output of the attention block will be $\\begin{array}{r}{\\frac{1}{N+1}\\sum_{i=1}^{N}g_{I_{i}}(x)}\\end{array}$ . The ", "page_idx": 26}, {"type": "text", "text": "ReLU-based feedforward network can then be used to subtract with a constan tNb+1 and implement a threshold function to compute the desired output. ", "page_idx": 27}, {"type": "text", "text": "Computing $k$ -SPARSE features. In the first layer, we compute the $k$ -SPARSE features by making use of the almost orthogonal positional vectors $\\bar{\\mathcal{T}}(0),\\mathcal{T}(1),\\bar{\\ldots},\\mathcal{T}(N)$ of size $r=O(\\log N)$ . From the construction for equality, it should be clear that using one attention head, one can attend to any desired position and retrieve a single bit. Extending that, using $k$ heads, we can retrieve $k$ bits from $k$ different positions. To compute $g_{I_{i}}(x)$ , we will have input embeddings of size $1+(k+1)r$ . For the ith input $x_{i}$ , the first coordinate will contain the input $\\bar{x_{i}}\\in\\{-1,1\\}$ and will contain 0 for the [BOS] token $x_{0}$ . The next $r$ indices will contain the positional vector $\\tau(i)$ corresponding to the position $i$ . The remaining $k r$ indices can be divided into $k$ blocks each of which will contain a positional vector. If the set $I_{i}$ contains indices $I_{i}^{1},\\ldots,I_{i}^{k}$ , then the $k$ blocks will contain vectors $\\mathcal{T}(I_{i}^{1}),\\ldots,\\mathcal{T}(I_{i}^{k})$ . If the set $I_{i}$ has less than $k$ indices, then the last $k-|I_{i}|$ blocks will have the positional vectors $\\mathcal{T}(0)$ . ", "page_idx": 27}, {"type": "text", "text": "See that if the input embeddings are designed as described above then one can obtain input bits $x_{I_{i}}$ in the output of the attention block at the $i$ th token. The value vectors will be of $k$ dimension such that $V_{h}(\\bar{\\mathbf{x}_{i}})\\,=\\,x_{i}$ at the coordinate $h$ and is 0 everywhere else. The key transformation for each head can be $K(\\mathbf{x}_{i})=[\\mathcal{T}(i)]$ containing the vector corresponding to the token\u2019s position. The query transformation is distinct for each head, and for the $j$ th head, the query vector contains $j$ th block from the last $k$ blocks containing the positional vectors for each index in the set $I_{i}$ . If the query and key transformations are designed in such a way, then using the arguments described in Theorem 6, it can be seen that the output of the attention block at the $i$ th position will be a $k$ dimensional vector containing $[x_{I_{i}^{1}},\\ldots,x_{I_{i}^{k}}]$ . If the set $I_{i}$ has a size less than $k$ , then the output vector will be followed by zeros after $\\lvert I_{i}\\rvert$ coordinates and will be a zero vector if $I_{i}=\\emptyset$ . Finally, the feedforward network can then compute the function $g_{I_{i}}(x)$ at every position which can be done by a network of constant size because $k=O(1)$ does not depend on $N$ . The second layer can then compute the threshold over the $k$ -SPARSE features as described earlier which leads to the desired output. \u53e3 ", "page_idx": 27}, {"type": "text", "text": "Discussion. The class of thresholds of $k$ -SPARSE features contains certain functions of interest such as Disjointness and Equality as well as more general classes such as $k$ -DNFs and $k$ -CNFs with at most $N$ terms or clauses. As described earlier, the (In)Equality function can be also defined as $\\mathrm{INEQ}(x)\\,=\\,(x_{1}\\oplus x_{\\frac{N}{2}+1})\\lor\\,.\\,.\\,.\\lor\\,(x_{\\frac{N}{2}}\\oplus x_{N})$ . See that it contains $\\frac{N}{2}$ 2-SPARSE features where the set of indices $\\begin{array}{r}{I_{i}=\\{i,i+\\frac{N}{2}\\}}\\end{array}$ for $i=1,\\ldots,N/2$ and the feature function $g(a,b)=a\\oplus b$ for $a,b\\in\\{0,1\\}$ . Similarly, the Disjointness function can be represented as a 2-CNF. The complement of the Disjointness function can be described more simply as ", "page_idx": 27}, {"type": "equation", "text": "$$\n(x_{1}\\wedge x_{\\frac{N}{2}+1})\\vee(x_{2}\\wedge x_{\\frac{N}{2}+2})\\vee...\\vee(x_{\\frac{N}{2}}\\wedge x_{N})\n$$", "text_format": "latex", "page_idx": 27}, {"type": "text", "text": "which is a 2-DNF that outputs 0 if the first and second half of the input $x\\in\\{0,1\\}^{N}$ are disjoint and outputs 1 otherwise. Thus, it follows from Theorem 13 that two-layer Transformers with logarithmic width can represent functions such as Disjointness as well as $k$ -DNFs and $k$ -CNFs with at most $N$ terms or clauses. ", "page_idx": 27}, {"type": "text", "text": "F.4 Difficulty of Deriving Communication-based Lower Bounds for 2-layer Transformers ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Our lower bounds both for RNNs and for one-layer transformers are based on communication complexity arguments. Here, we provide evidence that other techniques may be needed to establish lower bounds for two-layer transformers by showing that, in a certain sense, no short communication protocol of the same kind as Theorem 4 can exist for Alice and Bob to obtain the output of any two-layer transformer. We start from the following lemma: ", "page_idx": 27}, {"type": "text", "text": "Lemma 5. Assume $N$ is even. For every partition $S_{A},\\,S_{B}$ of $\\{1,\\ldots,N\\}$ where $|S_{A}|=|S_{B}|,$ , there is a 2-layer transformer $f\\,\\in\\,\\mathrm{TF}_{d,p,2}^{2}$ with width $m\\,=\\,{\\cal O}(\\log N)$ with precision $p\\,=\\,O(\\log N)$ with $f(x)\\in\\{0,1\\}$ for each $x\\in\\{\\bar{0},1\\}^{N}$ , such that Alice and Bob, having access to $x_{A}$ and $x_{B}$ respectively, need to exchange $\\geq\\,\\frac{N}{2}$ bits to compute $f(x)$ . ", "page_idx": 27}, {"type": "text", "text": "Proof. For any partitioning $S_{A},S_{B}$ , consider the task of determining whether $x_{S_{A}}$ and $x_{S_{B}}$ are identical. That is, define (for $x\\in\\{0,1\\}^{N})$ : ", "page_idx": 27}, {"type": "equation", "text": "$$\nf_{S_{A},S_{B}}(x)=\\left\\{1\\begin{array}{l l}{{\\mathrm{\\if\\}}x_{S_{A}}\\neq x_{S_{B}}}\\\\ {{\\mathrm{\\olse}}}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 27}, {"type": "text", "text": "If Alice and Bob have access to $x_{S_{A}}$ and $x_{S_{B}}$ , respectively, they need to exchange $\\geq~\\frac{N}{2}$ bits to compute $f(x)$ . Now by Theorem 6, there is a transformer $f_{i n e q}\\;\\in\\;\\mathrm{TF}_{m,p,2}^{2}$ F2m,p,2 that computes $f_{[1,...,n/2],[n/2+1,...,n]}$ , where $m=O(\\log N)$ and $p=O(\\log N)$ . Now renumbering the positional encodings results in a transformer computing $f_{S_{A},S_{B}}$ . ", "page_idx": 28}, {"type": "text", "text": "Corollary 13.1. If there is any communication protocol by which Alice and Bob can compute the output for any two-layer Transformer, for any partition, with $O(m p H g(n))$ bits, then it must be the case that g(n) = \u2126 (logN N)2 . ", "page_idx": 28}, {"type": "text", "text": "Proof. Suppose there is a communication protocol such that for any two-layer Transformer and over any partition, the protocol can compute the output of the Transformer with ", "page_idx": 28}, {"type": "equation", "text": "$$\no\\left(m p H\\frac{N}{(\\log N)^{2}}\\right)\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "bits. But by Lemma 5, for each partition, there exists a two-layer Transformer with ", "page_idx": 28}, {"type": "equation", "text": "$$\nm p H=O((\\log N)^{2})\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "such that Alice and Bob need to exchange $\\ge N/2$ bits to compute its output. We obtain a contradiction. ", "page_idx": 28}, {"type": "text", "text": "G Nearest Neighbors and Associative Recall ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Recall from Section 5.2 that in the NSTNB task, a model is provided with a sequence of vectors and labels $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ where $N/2<k\\leq N$ and the goal of the model is to predict the label corresponding to the nearest neighbor of $\\mathbf{x}_{k}$ for each $\\begin{array}{r}{k=\\frac{\\bar{N}}{2}+1,\\dots,N}\\end{array}$ . We first show that any recurrent model that performs this task must have a width or hidden state of size $\\Omega({\\frac{N}{p}})$ . ", "page_idx": 28}, {"type": "text", "text": "Relation to Associative Recall. The nearest neighbor task is closely related to the single and multiquery associative recall (MQAR) task introduced in Ba et al. [3] and Arora et al. [2]. In the associative recall task, a model receives a sequence $s_{1},y_{1},\\ldots,s_{k-1},y_{k-1},s_{k}$ where the symbols $s_{i}$ belong to an alphabet $|\\Sigma|$ . Assume the symbols the $s_{1},\\ldots,s_{k-1}$ to be distinct and the labels $y_{i}\\in\\{0,1\\}$ for simplicity. The query input $s_{k}$ is a repetition of one of the preceding inputs. The goal of the model is to predict the label of the query input $s_{k}$ by finding the exact match from the context and producing the corresponding label. A model that can compute the nearest neighbor algorithm can perform these associative recall tasks by embedding the sequence of symbols $s_{1},y_{1},\\ldots,s_{k-1},y_{k-1},s_{k}$ as a sequence of vectors $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ . ", "page_idx": 28}, {"type": "text", "text": "If a model receives a sequence $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ where the vectors ${\\bf x}_{1},{\\bf x}_{2},\\ldots,{\\bf x}_{k-1}$ are distinct and the query vector $\\mathbf{x}_{k}$ is a repetition then the task of applying nearest neighbor to predict the label for the query vector reduces to the single query associative recall task. Implementing the nearest neighbor algorithm is equivalent to finding the exact match for the query vector $\\mathbf{x}_{k}$ and producing the label $y_{k}$ corresponding to that input. In the case, where the models are required to predict iteratively for all $\\mathbf{x}_{k}$ for $\\begin{array}{r}{\\dot{k}=\\frac{N}{2}\\,\\breve{+}\\,1,\\dots,\\dot{N}}\\end{array}$ , the task becomes equivalent to MQAR. ", "page_idx": 28}, {"type": "text", "text": "The MQAR task is a simplified version or a subset of the nearest neighbor task where the model is first provided with the prompt $\\left({\\bf x}_{1},y_{1},\\ldots,{\\bf x}_{N/2},y_{N/2}\\right)$ and the subsequent $N/2$ input vectors are a permutation of the first $N/2$ vectors. In other words, for $N/2\\,<\\,k\\,\\leq\\,N$ and a sequence $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ , the model has to find the exact match of $\\mathbf{x}_{k}$ in the first $N/2$ vectors and output the corresponding label. It is straightforward to see that any model that can perform the nearest neighbor task can also perform the MQAR task. Assume the size of the alphabet $|\\mathsf{\\bar{Sigma}}|=\\Theta(N)$ The embedding of each symbol si \u2208\u03a3 can be a distinct vector from the hypercube {\u2212\u221a1d,\u221a1d}d where $d=\\lceil\\log|\\Sigma|\\rceil=O(\\log N)$ . The embeddings can be thought of as the normalized binary encodings of each symbol. Thus, a model receives a sequence of vectors $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ corresponding to a sequence of symbols $s_{1},y_{1},\\ldots,s_{k-1},y_{k-1},s_{k}$ . Since the query vectors $\\mathbf{x}_{k}$ for $k>N/2$ are repetitions, there is an exact match for each of them in $\\mathbf{x}_{1},\\ldots,\\mathbf{x}_{N/2}$ . Suppose the exact match for a query $\\mathbf{x}_{k}=\\mathbf{x}_{j}*$ , then their dot products $\\langle\\mathbf{x}_{k},\\mathbf{x}_{j^{\\ast}}\\rangle=1$ and the dot product with every other vector $\\begin{array}{r}{\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle\\le1-\\frac{1}{\\log N}}\\end{array}$ . Since the margin between the dot product with the nearest neighbor and other vectors satisfy $\\begin{array}{r}{\\frac{1}{\\gamma}=O(\\log N)}\\end{array}$ and all the input embeddings have unit norms, the problem satisfies the assumptions of the nearest neighbor task. ", "page_idx": 28}, {"type": "text", "text": "", "page_idx": 29}, {"type": "text", "text": "G.1 Lower Bounds for Recurrent Models ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Theorem 8. Any recurrent model with a hidden state of width m with $p$ -bits of precision that can perform the nearest neighbor task for all inputs of length $N$ must have $m\\geq N/2p$ . ", "page_idx": 29}, {"type": "text", "text": "Proof. The proof is via a reduction from the disjointness problem. We show that the lower bound is true even for the restricted problem of multi-query associative recall (MQAR). Recall that in the MQAR task the sequence of query inputs $\\mathbf{x}_{\\frac{N}{2}+1},\\dots,\\mathbf{x}_{N}$ is a permutation of the sequence of labelled vectors x1, . . . , xN/2. ", "page_idx": 29}, {"type": "text", "text": "If there exists a recurrent model $\\mathcal{R}$ that can solve the MQAR task, then we show that Alice and Bob can use it to follow a communication protocol and compute the DISJ function. ", "page_idx": 29}, {"type": "text", "text": "The communication protocol is as follows. Alice and Bob have two Boolean vectors $a,b\\in\\{0,1\\}^{N/2}$ respectively. Both of them know the description of the recurrent model $\\mathcal{R}$ . Alice and Bob have decided on a set of $N/2$ vectors $\\mathbf{v}_{1},\\ldots,\\mathbf{v}_{N/2}$ in $\\mathbb{S}^{d-1}$ that they will use in the communication protocol. Choosing any $N/2$ distinct vectors from the hypercube $\\{-\\frac{1}{\\sqrt{d}},\\frac{1}{\\sqrt{d}}\\}^{d}$ will suffice and also satisfy the assumptions mentioned in Section 5.2. ", "page_idx": 29}, {"type": "text", "text": "To reiterate, both Alice and Bob have the model parameters/description and have decided on a set of $N/2$ unit vectors as a part of their communication protocol. Alice then uses the recurrent model $\\mathcal{R}$ and provides the sequence of pairs $\\left(\\mathbf{v}_{i},a_{i}\\right)$ in any arbitrary order. Alice then sends the hidden state vector $\\mathbf{h}_{N}$ to Bob. Bob then uses the model $\\mathcal{R}$ and iteratively provides $\\mathbf{v}_{i}$ vectors along with the generated output in any order. Bob knows that the output produced by the recurrent model for the vector $\\mathbf{v}_{i}$ corresponds to the value $a_{i}$ . Hence, Bob obtains the entire vector $a$ and computes DISJ $(a,b)$ . ", "page_idx": 29}, {"type": "text", "text": "Since Alice sent the hidden state vector, which requires $m p$ bits, and they could compute DISJ $(a,b)$ over $\\{0,1\\}^{N/2}$ by exchanging $m p$ bits, by Fact 1 we have that $m p\\geq N/2$ . \u53e3 ", "page_idx": 29}, {"type": "text", "text": "G.2 Transformer Construction for Nearest Neighbor ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "We now show how a log-sized 2-layer Transformer operating over log-precision numbers can compute the NSTNB function over all inputs that satisfy the constraints described in Section 5.2. Recall the assumptions that ", "page_idx": 29}, {"type": "text", "text": "\u2022 Norm. All vectors $\\mathbf{x}_{i}$ have unit norms.   \n\u2022 Margin. For any $N/2\\;<\\;k\\;\\leq\\;N$ , and let $j^{*}\\,=\\,\\arg\\operatorname*{max}_{i\\in[k-1]}\\mathbf{x}_{k}^{T}\\mathbf{x}_{i}$ , then $\\mathbf{x}_{k}^{T}\\mathbf{x}_{j^{\\ast}}\\;\\geq$ $\\mathbf{x}_{k}^{T}\\mathbf{x}_{i}+\\gamma$ for any $i\\neq j^{*}$ . ", "page_idx": 29}, {"type": "text", "text": "Theorem 7. For any $N\\ \\in\\ \\mathbb{N}$ , there exists a 2-layer Transformer $f_{N N}\\;\\in\\;\\mathrm{TF}_{m,p,2}^{2}$ with width $m\\,=\\,O(\\log N)$ and precision $p\\,=\\,O(\\log N)$ such that fNN computes the nearest-neighbor task all sequences of length at most $N$ satisfying the assumptions above. ", "page_idx": 29}, {"type": "text", "text": "For $N/2<k\\leq N$ , the model will be provided the sequence $(\\mathbf{x}_{1},y_{1},\\ldots,\\mathbf{x}_{k-1},y_{k-1},\\mathbf{x}_{k})$ where $\\mathbf{x}_{i}\\in\\mathbb{R}^{d^{\\prime}}$ vectors contain the input points and $y_{i}\\mathbf{s}$ contain the labels. For clarity, we will refer to the embedding of all inputs as $\\dot{\\mathbf{z}}_{i}\\in\\mathbb{R}^{d}$ where $\\mathbf{z}_{2i-1}\\,=\\,\\phi(\\mathbf{x}_{i},2i-1)$ is the embedding of input points for $i=1,\\dots,k$ . Similarly, the vectors $\\mathbf{z}_{2i}=\\phi(y_{i},2i)$ will contain the embedding for the corresponding labels. Hence, technically the sequence of input vectors to the Transformer model will be $(\\mathbf{z}_{1},\\mathbf{z}_{2},\\ldots,\\mathbf{z}_{2k-1})$ . ", "page_idx": 29}, {"type": "text", "text": "Overview of Idea. The explicit construction is a bit tedious but the key ideas are straightforward to understand. The construction itself does not rely on input sequences of fixed lengths, unlike the one for the Equality problem. ", "page_idx": 29}, {"type": "text", "text": "Recall that for an input sequence $(\\mathbf{z}_{1},\\mathbf{z}_{2},\\ldots,\\mathbf{z}_{2k-1})$ , the odd indices $(2i-1)$ correspond to the inputs $\\mathbf{x}_{i}$ and the even indices $(2i)$ contain the label information $y_{i}$ . The final input $\\mathbf{z}_{2k-1}$ contains the query input $\\mathbf{x}_{k}$ and the goal of the model is to find the nearest neighbor input $\\mathbf{x}_{j}*$ and output the label corresponding to that $y_{j^{*}}$ . ", "page_idx": 29}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "Intuitively, a two-layer Transformer can do that in the following way: the first layer can find the nearest neighbor $\\mathbf{x}_{j}*$ and retrieve the position of the label $y_{j}*$ . The second layer can then attend over that position and produce the desired label. ", "page_idx": 30}, {"type": "text", "text": "Challenges. There are a few challenges to executing this strategy which our construction will address. If the input embeddings were identical to the input vectors, then $\\mathbf{x}_{k}$ would have maximum dot product with itself and not with its nearest neighbor $\\mathbf{x}_{j}*$ . Second, if you remove that, even then the dot product with some label vector could be larger than the dot product with the nearest neighbor (which could be close to $-1$ ). Lastly, suppose by design you have the maximum dot product with the desired input, you still need to retrieve the required information in a useful way since we are working with softmax attention which will also put weight over other inputs. ", "page_idx": 30}, {"type": "text", "text": "Key ideas. One can think of the vectors $\\mathcal{T}(1),\\ldots,\\mathcal{T}(N)$ as some form of positional or address vectors of dimension ${\\cal O}(\\log N)$ . All vectors $\\mathbf{z}_{i-1}$ corresponding to inputs $\\mathbf{x}_{i}$ will have the address vectors of their next position $\\tau(2i)$ . Along with that, all the vectors $\\mathbf{z}_{i}$ will also have their own address/position vectors $\\tau(i)$ . If in the first layer, the model can attend over the vector $\\mathbf{z}_{2j}\\!*\\!-\\!1$ with a high attention weight, then it will be able to retrieve the required address vector $\\tau(2j^{\\ast})$ which it can then use in the second layer to retrieve the required label. ", "page_idx": 30}, {"type": "text", "text": "The input embeddings are designed in such a way that the maximum dot product will be with the desired input vector $\\mathbf{x}_{j^{\\ast}}$ or more specifically $\\mathbf{z}_{2j}\\!*\\!-\\!1$ . The embeddings are such that the dot products between the query vector of input $\\mathbf{z}_{2k-1}$ and the key vectors of all other input vectors $\\mathbf{z}_{i}$ will be of the following form, ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle=\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle-c_{1}\\langle T(2k-1),T(2i-1)\\rangle\\quad{\\mathrm{~for~}}i=1,\\ldots,k.\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "See that for $i\\neq k$ , $\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle\\approx\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle$ whereas for $i=k$ , $\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle<$ $-2$ or much smaller based on the constant $c_{1}$ . Hence, attention weight will be smaller on the query input itself compared to other inputs. ", "page_idx": 30}, {"type": "text", "text": "Secondly, for $i=1,\\ldots,k-1$ , the dot products with the label vectors will be of the following form, ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i})\\rangle=\\langle\\mathbf{x}_{k},\\mathbf{0}\\rangle-c_{1}\\langle T(2k-1),T(2i-1)\\rangle-c_{2}\\approx-c_{2}\\quad{\\mathrm{for~}}i=1,\\ldots,k.\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "which will be small depending on the constant $c_{2}$ . Hence, the dot product will be maximum with input with the nearest neighbor $\\mathbf{x}_{j^{\\ast}}$ with a margin $\\Omega(\\gamma)$ . ", "page_idx": 30}, {"type": "text", "text": "To retrieve and use $\\boldsymbol{\\mathcal{T}}(2\\boldsymbol{j}^{*})$ in the next layer, we do not need to hard-attend on $\\mathbf{z}_{2j}\\!*\\!-\\!1$ . Since the address v\u221aectors are of the form $\\begin{array}{r}{\\mathcal{T}(i)\\in\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}^{k}}\\end{array}$ , we only retrieve the corresponding sign vectors ${\\mathcal{T}}_{s}(i)={\\sqrt{k}}T(i)\\in\\{-1,1\\}^{k}$ . Since the attention weight will be maximum on $\\mathbf{z}_{2j}\\!*\\!-\\!1$ with a margin, we can scale the query vectors to increase the weight to a sufficient value and then use ReLU as a form of threshold to obtain $\\boldsymbol{\\mathcal{T}}_{s}(2\\boldsymbol{j}^{\\ast})$ . The second layer is then straightforward and will retrieve the desired label. ", "page_idx": 30}, {"type": "text", "text": "Proof. We will now describe the explicit construction for Transformers to compute nearest neighbors. Input Embeddings. The embedding vectors are defined in the following way, ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\phi(\\mathbf{x}_{i},2i-1)=\\mathbf{z}_{2i-1}=[\\mathbf{x}_{i},0,1,7(2i-1),7(2i),\\mathbf{0}_{k}]}\\\\ {\\phi(y_{i},2i)=\\mathbf{z}_{2i}=[\\mathbf{0}_{d^{\\prime}},y_{i},-2,7(2i),7(2i),\\mathbf{0}_{k}].\\quad\\quad}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "Here, the vectors $\\begin{array}{r}{\\mathcal{T}(i)\\in\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}^{k}}\\end{array}$ are $\\mathrm{JL}$ transformations as described in Section B.3 and hence $k=O(\\log N)$ . The dimension of the embedding vectors $d=3k+d^{\\prime}+2=O(\\log N)$ . The vectors $\\mathcal{T}(1),\\ldots,\\mathcal{T}(2N)$ are such that, ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\langle{\\mathcal T}(i),{\\mathcal T}(j)\\rangle=\\left\\{1\\pm\\gamma/100\\quad{\\mathrm{if~}}i=j,\\quad\\quad\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "Query, key and value vectors. The query and key transformations in the first layers are designed in the following way, ", "page_idx": 31}, {"type": "equation", "text": "$$\n\\begin{array}{r}{Q(\\mathbf{z}_{2k-1})=[\\mathbf{x}_{k},1,-10\\mathcal{T}(2k-1)]\\qquad\\qquad\\qquad}\\\\ {K(\\mathbf{z}_{2i-1})=[\\mathbf{x}_{i},3,\\mathcal{T}(2i-1)]\\quad\\mathrm{~for~}i=1,\\ldots,k,}\\\\ {K(\\mathbf{z}_{2i})=[\\mathbf{0}_{d},-2.3,\\mathcal{T}(2i)]\\quad\\mathrm{~for~}i=1,\\ldots,k.}\\end{array}\n$$", "text_format": "latex", "page_idx": 31}, {"type": "text", "text": "The value\u221a vectors will only have the 5th part $(\\mathcal{T}(2i))$ in the last slot and all other values will be 0. Let $T_{s}(i)=\\sqrt{k}T(i)\\in\\{-1,1\\}^{k}$ , that is, $\\tau_{s}(i)$ contains the signs of the vector $\\tau(i)$ . The value vector will be of the form $V(\\mathbf z_{2i-1})=[\\mathbf0_{d^{\\prime}},0,0,\\mathbf0_{k},\\mathbf0_{k},2\\mathcal T_{s}(2i)]$ and $V(\\mathbf{z}_{2i})=[\\mathbf{0}_{d^{\\prime}},0,0,\\mathbf{0}_{k},\\mathbf{0}_{k},2\\mathcal{T}_{s}(2i)]$ for all $i\\,=\\,1,\\ldots,N$ . The goal of the attention in the first layer is to retrieve the vector $\\mathcal{T}_{s}(2j^{\\ast})$ corresponding to the label of the nearest neighbour. ", "page_idx": 31}, {"type": "text", "text": "Inner products. The design of such query and key transformation ensures that for an input query $\\mathbf{x}_{k}$ , the dot product is maximum with its nearest neighbour $\\mathbf{x}_{j}*$ and not with itself or any of the embeddings of the labels $y_{i}\\mathbf{s}$ . ", "page_idx": 31}, {"type": "text", "text": "The inner products $A_{2k-1,2i-1}=\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle$ have the following form, ", "page_idx": 31}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 31}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{\\Sigma}_{k-1}),K(\\mathbf{z}_{2i-1})\\rangle=\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle+2-10\\langle T(2k-1),T(2i-1)\\rangle}\\\\ &{\\quad\\quad\\quad=\\left\\{\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle+3\\pm\\gamma/10\\quad\\quad\\quad\\mathrm{if~}i\\neq k,\\atop\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle+3-10\\pm\\gamma/10\\quad\\mathrm{if~}i=k.}\\end{array}\\right.}\\\\ &{\\quad\\quad\\quad=\\left\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\right\\rangle\\left\\{\\begin{array}{l l}{\\displaystyle\\geq1\\quad\\quad\\mathrm{if~}i\\neq k,}\\\\ {\\displaystyle\\leq-5\\quad\\mathrm{if~}i=k.}\\end{array}\\right.}\\end{array}\n$$", "text_format": "latex", "page_idx": 31}, {"type": "text", "text": "Similarly, the inner product with the label vectors ${\\bf z}_{2i}{\\bf s}$ is less than 0 for all $i$ as well, ", "page_idx": 31}, {"type": "equation", "text": "$$\n\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i})\\rangle=0-6\\pm\\gamma/10\\le-5\n$$", "text_format": "latex", "page_idx": 31}, {"type": "text", "text": "To summarize, the query and key vectors are such that for the query input $\\mathbf{z}_{2}k-1$ , the dot product with itself $\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2k-1})\\rangle\\,\\leq\\,-5$ and the dot product with all label vectors containing $y_{i}$ is $\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i})\\rangle\\leq-5$ . The remaining dot products are with the vectors of interest which include the nearest neighbour input point, ", "page_idx": 31}, {"type": "equation", "text": "$$\n\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle=\\langle\\mathbf{x}_{k},\\mathbf{x}_{i}\\rangle\\pm\\gamma/10\\quad{\\mathrm{for~}}i=1,\\ldots,k-1.\n$$", "text_format": "latex", "page_idx": 31}, {"type": "text", "text": "Suppose $j^{*}\\,=\\,\\arg\\operatorname*{max}_{i\\in[k-1]}\\mathbf{x}_{k}^{T}\\mathbf{x}_{i}$ is the index for the input point which has the minimum L2 distance or maximum inner product with the query vector $\\mathbf{x}_{k}$ . Then we have that, ", "page_idx": 31}, {"type": "equation", "text": "$$\n\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2j^{*}-1})\\rangle-\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle\\geq\\gamma-\\gamma/5\n$$", "text_format": "latex", "page_idx": 31}, {"type": "text", "text": "for all $i\\neq j^{*}$ . This indicates the maximum inner product will be with its nearest neighbor and all other inner products will have a margin of at least $\\begin{array}{r}{\\dot{\\tau}=\\frac{4}{5}\\gamma}\\end{array}$ . ", "page_idx": 31}, {"type": "text", "text": "If we have a Transformer with a hard-attention mechanism, then it will attend only to the input which is the nearest neighbor of the query vector $\\mathbf{x}_{k}$ . However, with softmax attention, it is non-trivial to only attend over a single input. ", "page_idx": 31}, {"type": "text", "text": "The embedding of all input vectors $\\mathbf{x}_{i}$ contains a vector $\\tau(2i)$ (see Eq. 9) which serves as a key vector to retrieve the label following that input vector. Note that, we only need to retrieve the signs of the vector $\\mathcal{T}(2i)$ since the vectors are of the form $\\{-\\frac{1}{\\sqrt{k}},\\frac{1}{\\sqrt{k}}\\}^{k}$ . We can then use it to retrieve the label of the corresponding input in the next layer. ", "page_idx": 31}, {"type": "text", "text": "Retrieving with softmax. We show using softmax attention \u221aand a ReLU FFN we can retrieve the required $\\tau(2j^{\\ast})$ . In particular, we will obtain $T_{s}(2j^{*})=\\sqrt{k}T(2j^{*})\\in\\{-1,1\\}^{k}$ . As shown earlier, if $j^{*}=\\mathop{\\mathrm{arg}}\\mathop{\\mathrm{max}}_{i\\in[k-1]}\\mathbf{x}_{k}^{T}\\mathbf{x}_{i}$ , then the maximum dot product $\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2j^{*}-1})\\rangle\\ \\geq$ $\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2i-1})\\rangle+\\tau$ is greater by a margin $\\begin{array}{r}{\\tau=\\frac{4}{5}\\gamma}\\end{array}$ 54\u03b3. The value vector corresponding to zj\u2217, i.e., $V(\\mathbf{z}_{j^{\\ast}})=[0,\\ldots,0,27_{s}(2j^{\\ast})]$ has the key vector which will allow the next layer to retrieve the required label. ", "page_idx": 31}, {"type": "text", "text": "The basic idea is that even if at least $9/10$ of the attention weight is on $V(\\mathbf{z}_{j}\\ast)$ and essentially $2\\tau_{s}(2j^{\\ast})$ then that suffices to preserve the signs using a ReLU FFN. ", "page_idx": 32}, {"type": "text", "text": "Let $\\sigma(a)$ be a function such that $\\sigma(a)\\,=\\,1$ for $a\\,>\\,1$ , $\\sigma(a)\\,=\\,-1$ for $a\\,<\\,-1$ , and $\\sigma(a)\\,=\\,a$ for $-1\\leq a\\leq1$ . See that $\\sigma(a)$ can easily be implemented by a ReLU FFN since it is essentially $\\mathrm{ReLU}(x+1)-\\mathrm{ReLU}(x-1)-1$ . ", "page_idx": 32}, {"type": "text", "text": "Without loss of generality, let\u2019s say $2\\mathcal{T}_{s}(2j^{*})_{1}=+2$ . If the attention weight on it is $9/10$ and the remaining $1/10$ weight is distributed among the rest of the inputs, then in the worst case that value will be $\\begin{array}{r}{\\frac{9}{10}2-\\frac{1}{10}2\\geq1}\\end{array}$ . Hence, applying $\\sigma(\\cdot)$ over the value will result in $+1$ . The same goes for the case when $\\bar{2}\\mathcal{T}_{s}(2j^{*})_{1}=-2$ and for other indices of $2\\tau_{s}(2j^{\\ast})$ . Thus, it suffices to show that the attention weight over $V(\\mathbf{z}_{2j^{*}-1})$ can be greater than $9/10$ since it implies that with the ReLU FFN, the output for $\\mathbf{z}_{2k-1}$ in the first layer will contain $\\mathcal{T}_{s}(2j^{\\ast})$ . ", "page_idx": 32}, {"type": "text", "text": "Consider another construction which is identical to the construction described above with the exception that $\\tilde{Q}(\\mathbf{z}_{i})=\\eta Q(\\mathbf{z}_{i})$ . We show that for large enough $\\eta$ , the weight softmax $\\cdot(A)_{2k-1,2j^{*}-1}$ will be greater than $9/10$ and the remaining weights combined will be less than $1/10$ . Let $\\beta\\;=\\;\\langle\\tilde{Q}({\\bf z}_{2k-1}),K({\\bf z}_{2j^{*}-1})\\rangle$ and $Z~\\in~\\mathbb{R}^{N\\times d}$ contain vectors $({\\bf z}_{1},\\ldots,{\\bf z}_{2k-1})$ . Then, for any $r\\in\\mathbb{N}$ , ", "page_idx": 32}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{softmax}(\\tilde{Q}(\\mathbf{z}_{2k-1})K(Z)^{T})_{2j^{*}-1}}\\\\ &{\\qquad\\qquad\\qquad\\exp(\\eta\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2j^{*}-1})\\rangle)}\\\\ &{\\qquad=\\frac{\\exp(\\eta\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{2j^{*}-1})\\rangle)+\\sum_{p\\neq j^{*}=1}\\exp(\\eta\\langle Q(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{p})\\rangle)}{\\exp(\\eta\\langle\\theta(\\mathbf{z}_{2k-1}),K(\\mathbf{z}_{p})\\rangle)}}\\\\ &{\\qquad\\qquad\\ge\\frac{\\exp(\\eta\\beta)}{\\exp(\\eta\\beta)+(2k-1)\\exp(\\eta\\langle\\beta-\\tau\\rangle)}\\ge\\frac{\\exp(\\eta\\beta)}{\\exp(\\eta\\beta)+2N\\exp(\\eta\\langle\\beta-\\tau\\rangle)}\\ge\\frac{r-1}{r}}\\\\ &{\\qquad\\qquad\\qquad\\implies\\exp(\\eta\\beta)\\ge(r-1)(2N)\\exp(\\eta(\\beta-\\tau))}\\\\ &{\\qquad\\qquad\\qquad\\implies\\eta\\ge\\frac{1}{\\tau}\\log(r-1)2N.}\\end{array}\n$$", "text_format": "latex", "page_idx": 32}, {"type": "text", "text": "Hence, for $r=10$ , if $\\begin{array}{r}{\\eta=\\frac{5}{4\\gamma}\\log{18N}}\\end{array}$ then the attention weight on the $2j^{*}-1$ th input vector will be greater than $9/10$ . Similarly, one can verify that for $\\begin{array}{r}{\\eta=\\frac{5}{4\\gamma}\\log{18N}}\\end{array}$ , the attention weight for the rest of the inputs combined is at most $1/10$ . ", "page_idx": 32}, {"type": "text", "text": "Output of the first layer. Let $\\mathbf{z}_{i}^{(1)}$ denote the output of the first layer on the ith input vector. By construction, with MLP and residual connection after the attention block, the output of the first layer is such that, ", "page_idx": 32}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{z}_{2k-1}^{(1)}=[\\mathbf{x}_{k},0,1,T(2k-1),T(2k),T_{s}(2j^{*})]\\qquad\\qquad\\qquad}\\\\ {\\mathbf{z}_{2i-1}^{(1)}=[\\mathbf{x}_{i},0,1,T(2i-1),T(2i),\\ldots]\\quad\\mathrm{for}\\;i=1,\\ldots,k-1}\\\\ {\\mathbf{z}_{2i}^{(1)}=[\\mathbf{0}_{d^{\\prime}},y_{i},-2,T(2i),T(2i),\\ldots]\\quad\\mathrm{for}\\;i=1,\\ldots,k-1.}\\end{array}\n$$", "text_format": "latex", "page_idx": 32}, {"type": "text", "text": "Second Layer. Since we have the address/key vector $\\boldsymbol{\\mathcal{T}}_{s}(2\\boldsymbol{j}^{\\ast})$ for the target label as the input in the first layer, it is straightforward to apply attention and $\\sigma(\\cdot)$ with ReLU FFN to produce the desired label. ", "page_idx": 32}, {"type": "text", "text": "See that if the query vector $\\begin{array}{r}{Q(\\mathbf{z}_{2k-1}^{(1)})=[\\frac{1}{k}\\mathcal{T}_{s}(2j^{*})]}\\end{array}$ , and the key vectors contain the 4th part of the input vector, that is, $K(\\mathbf{z}_{i}^{(1)})=[\\mathcal{T}(i)]$ , then the dot product will be greater than $1-\\gamma/100$ with the desired input at $2j^{*}$ and will be less than $\\gamma/100$ for the rest of the inputs. The value vectors will be faosrs iaglnl .d  Upasritn go ft hthe et eicnhpnuit $V(\\mathbf{z}_{2i}^{(1)})=[\\mathbf{0}_{d^{\\prime}},y_{i},0,\\dots,0]$ ta ins ds twraililg $V(\\mathbf{z}_{2i-1}^{(1)})=[0,\\ldots,0]$ $i=1,\\ldots,k$ scaling of the query vector and applying $\\sigma(\\cdot)$ to the output will produce the desired label $y_{j^{*}}$ . ", "page_idx": 32}, {"type": "image", "img_path": "6HUJoD3wTj/tmp/584dea018d51174d344c42db8dc475cf52796208132ae26540870330a1575be8.jpg", "img_caption": ["Figure 3: Performance of Mamba on the Index Lookup task across various lengths and widths. See Section H.1 for more details. "], "img_footnote": [], "page_idx": 33}, {"type": "text", "text": "H Empirical Analysis: Additional Details and Experiments ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "In this section, we discuss the details of implementation and data generation for experiments described in Section 6. Further, we discuss some additional experiments on the string equality task. ", "page_idx": 33}, {"type": "text", "text": "Implementation and hyperparameters. All of our implementations for experiments are based on PyTorch [44]. For our experiments with Transformers, we use the Huggingface Transformers library [63] with the GPT-2 backbone as well as our own custom implementation. We use PyTorch\u2019s standard or in-built implementation for experiments with LSTMs. For state-space models like Mamba [21] and Diagonal state-space models [22], we use the official implementation provided by the authors for our experiments. For RetNet [56] and Linear Transformers, we use our own custom implementation. ", "page_idx": 33}, {"type": "text", "text": "For each task, we tune the models across several hyperparameters and report the results based on the best-performing model. We use grid search to tune the models for each task. For each architecture excluding LSTMs, we tuned across depths $\\in\\{1,2,4,6\\}$ and widths $\\{64,128,256,512\\}$ . Since LSTMs with large depths are hard to train [43], we only consider LSTMs with depths up to 3. For Transformers and linear Transformer variants, we tune the heads across $\\{4,8\\}$ . For all models, we tune the learning rate across $\\{0.01,0.005,0.001,0.0005,0.0001,0.00005,0.000001\\}$ . We primarily use Transformers with absolute encodings for the result presented in the main paper. We train the models for up to 250k steps unless they achieve (almost) perfect validation accuracy earlier. After training, we evaluate the models on a fresh set of 5000 examples. ", "page_idx": 33}, {"type": "text", "text": "Note, however, that the focus of our paper is slightly different and for some problems, we are interested in the behavior of small-sized (width or depth) models of one architecture and a relatively larger model for another architecture. For instance, in the index lookup task, we are concerned with how well one-layer Transformers with small widths fare against relatively larger recurrent models. Additionally, our focus is on the comparison of different architectures of fixed sizes across lengths and not primarily on how well models of the scale used in practice perform these tasks on much larger lengths. Hence, we do not consider models with much larger depth or width. ", "page_idx": 33}, {"type": "text", "text": "Compute. All our experiments were conducted using 8 NVIDIA Tesla V100 GPUs each with 16GB memory and 16 NVIDIA GTX 1080 Ti GPUs each with 12GB memory. Each run for $500\\mathrm{k}$ steps could take between 1 hour and 16 hours depending on the length of the inputs and the size of the models. Some runs are much shorter if the model achieves high accuracy quite early (e.g. on lengths 20). While each individual run does not take a significant amount of time, tuning the models, particularly for the tasks where they fail to learn requires several runs and consequently a much longer duration. We estimate that all the runs across hyperparameters, architectures, and input lengths took $\\leq1200$ GPU hours in total on the GPUs mentioned above. ", "page_idx": 33}, {"type": "text", "text": "H.1 Additional Experiments and Data Generation ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Index Lookup Task. The input sequences are comprised of symbols in $\\Sigma$ and a positional token in $[N]$ . In our experiments, the size of the set of symbols is $|\\Sigma|=64$ and $N$ varies from 20 to 400. To create each example, we first sample a length $k$ uniformly between 10 and $N$ $(20-400)$ and then sample $N$ symbols independently from $\\Sigma$ uniformly at random. Lastly, we sample a position between ", "page_idx": 33}, {"type": "text", "text": "1 and $k$ uniformly at random and append it to the sequence to produce a labeled example for training or evaluation. During evaluation, the model is tested on sequences of length exactly $N$ . ", "page_idx": 34}, {"type": "text", "text": "Bounded Dycks. For the Dyck-(2, 2) task, we generate the examples in such a way that with 0.5 probability, the generated string is well-balanced with depth at most 2, and with 0.5 probability it does not belong to the language and has label 0. The generated strings are of length exactly $N$ in both cases. To generate positive examples we use the following strategy: we iterate over $N-2$ steps and for each step, we check whether the current depth of the stack is $<2$ . If the depth of the stack is 2, the sequence continues with the closing bracket corresponding to the open bracket in the stack. If the depth is $<2$ , the sequence is either continued by choosing one of the open brackets uniformly if the stack is empty or by choosing uniformly between open brackets and the closing bracket if the stack is non-empty. After $N-2$ steps, the generated string could be a well-balanced string of length $N-2$ in which case we add a depth 1 string of length 2 at the end which results in a well-balanced string of length $N$ . Otherwise, the stack could be nonempty we add the remaining closing brackets which also leads to a string of length $N$ . ", "page_idx": 34}, {"type": "text", "text": "To generate negative examples, we first sample a positive example and then corrupt some of the symbols in the string. For strings of length $N$ , we first sample a number $k=1,\\ldots,N/10$ uniformly at random and then pick $k$ different indices uniformly at random. For each of those positions, with probability $1/2$ , we swap the types of brackets, e.g. round \u2018(\u2019 to square $\\sqrt[6]{2}$ , and with probability $1/2$ we switch open brackets to closing brackets (or vice versa). There is a very small probability that after the corruption the resulting string will still be a valid well-balanced string of depth at most 2, in which case we redo the corruption again. The probability of the event is too low to affect the efficiency of the generation process. ", "page_idx": 34}, {"type": "text", "text": "Additional Experiment with Mamba. We explore how the size of the hidden state influences the performance of a Mamba model across various lengths on the Index Lookup task. We evaluate two-layer models of different widths $\\{32,64,256,512,1024\\}$ across various lengths ranging from 20 to 400. We find a clear trend where the performance of Mamba models increases monotonically with the increase in the width of the model (see Figure 3). While the performance does exactly scale linearly with width it is still somewhat interesting that the trend exists. We did a similar experiment with LSTM but did not observe such a trend and for lengths above 100 the performance remained at chance level even when the width was increased. Note, however, that even with a width of 1024, the performance of Mamba is still much worse than a one-layer Transformer with a width of 64. ", "page_idx": 34}, {"type": "text", "text": "H.2 String Equality Task ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "We explore a few different strategies to evaluate the performance of models on the string equality task. In these experiments, the goal of the models is to determine whether the first half of the input string and the second half of the string are equal. The first two experiments are in the standard classification setting but differ in the way the negative examples are created. The third experiment is in the next character prediction which is commonly used in prior works to test models on formal languages. For the equality task, we find that it is not straightforward to generate negative examples in a way that the problem cannot be solved using shortcuts. Hence, we include the next character prediction setting which does not require the generation of negative examples. ", "page_idx": 34}, {"type": "text", "text": "Summary of results. The results on the String Equality task are relatively more nuanced than the results for index lookup and Dyck-2. On a standard binary classification setup, one must make a design choice regarding the generation of negative examples that could influence the difficulty of the task. We first conduct experiments in the classification setup by generating negative examples using two different strategies. On one task, we find that while recurrent models like LSTMs struggle beyond a certain length, state-space models like DSS and Mamba are able to match Transformer\u2019s performance. In the second task, we find that all models are able to achieve near-perfect accuracy. We note that both classification tasks can be solved by using shortcuts based on the way the negative examples are created. Hence, we explore another strategy called the next character prediction setting inspired by prior works [57, 20] on empirical analysis on formal languages. We note that the task in that setting becomes almost identical to the copying task where a model observes a sequence and then has to produce the same sequence. In that setting, we observe that at a small width like 64, state-space models fail to perform the task accurately at certain lengths whereas Transformers with the same width succeed. For models with larger widths, we find that DSS and Transformers succeed at performing the tasks for the lengths considered in our experiments. ", "page_idx": 34}, {"type": "image", "img_path": "6HUJoD3wTj/tmp/1031daf62d8d8ae96b6ebe7714a35cd935c8223e718d7eaa18556b8fc71e47bc.jpg", "img_caption": ["Figure 4: Performance of architectures on the Equality task. See Section H.2 for more details. "], "img_footnote": [], "page_idx": 35}, {"type": "text", "text": "Setup. In all our experiments with string equality, we have a vocabulary $\\Sigma$ which contains one token that is reserved as a separator token \u2018[SEP]\u2019 and is placed between the first half and the second half of the input string. For each task, while creating an example we first pick the length $k$ uniformly $\\textstyle{\\frac{X}{10}},{\\frac{N}{10}}+2,{\\frac{N}{10}}+\\dot{4},\\dots N$   \nlength of the strings must be even. During evaluation, we test the models on strings of length exactly $N$ . ", "page_idx": 35}, {"type": "text", "text": "(i) Eq-random. The first experiment is pretty straightforward and contains binary strings, i.e., $\\Sigma=\\{0,1,\\lbrack\\mathrm{SEP}\\rbrack\\}$ . With probability $1/2$ , we create a positive example by first sampling a string of length $k/2$ uniformly followed by the separator token and then the same string again. By construction, the created example has a positive label. With probability $1/2$ , we create the second half of the string by sampling another string of the same length where each symbol is sampled uniformly at random. We assign the label based on whether or not it is equal to the first half but with high probability $\\begin{array}{r}{(1-\\frac{1}{2^{k/2}})}\\end{array}$ , the example has a negative label. ", "page_idx": 35}, {"type": "text", "text": "(ii) Eq-one In the second experiment, we have a vocabulary with 1024 and we create the positive example in the same way as earlier in the Eq-one setting by sampling strings uniformly at random. To generate a negative example, we set the second half to be equal to the first half and then change the symbol at only one of the positions. In other words, the second half matches the first half at all positions except one. ", "page_idx": 35}, {"type": "text", "text": "The training details and hyperparameters are almost identical to the experiments described earlier. ", "page_idx": 35}, {"type": "text", "text": "Results. On both the Eq-random task and Eq-one task we find that Transformers achieve near-perfect accuracy on lengths up to 400. Recurrent models like LSTMs and linear Transformers struggle at lengths beyond 100 on the Eq-random task. On the other hand, we find that recently proposed state-space models like DSS and Mamba are able to match Transformers\u2019 performance on both tasks (See Figure 4 left). On the Eq-one task, we find that for lengths up to 400, all models are able to achieve near-perfect accuracy. ", "page_idx": 35}, {"type": "text", "text": "Remark. One thing to note is that both of the experimental setups described above can be solved using some form of shortcuts. In the first case, it is straightforward to see that the first half and the second half will differ at about half the positions on average. A recurrent algorithm does not necessarily have to store the first $N/2$ elements to compute the output correctly with high probability. Even if it stores the first few elements, then with high probability it can determine the label of the string correctly. For the second case (Eq-one), even if it might seem difficult at first look, a recurrent model can solve it perfectly by just maintaining a dictionary of the counts of each symbol in the vocabulary. Since the first half and second half differ at exactly one position, the number of occurrences of at least one symbol will be different in the two halves. ", "page_idx": 35}, {"type": "text", "text": "To rule out such phenomena, we adopt the next character prediction setting [20, 50, 57, 17]. ", "page_idx": 35}, {"type": "text", "text": "(iii) Eq-ncp. In the next character setting (NCP), a model is required to predict the next set of valid continuations for every prefix of a given string. It can be seen as a multi-label classification problem for every prefix of a given string. The prediction for a particular input string is considered correct if the prediction for every prefix is correct. ", "page_idx": 35}, {"type": "text", "text": "In the context of the string equality task with length $N$ , for the first $N/2$ symbols, all symbols are valid continuations, and hence the predictions for the first half of the string are trivial. After observing the separator token [SEP], only one of the $|\\Sigma|$ symbols is allowed at every prefix until the end of the string. We note that the prediction problem becomes equivalent to copying [28] a sequence of symbols. For our experiments the vocabulary size $|\\Sigma|\\,=1024$ . We explore sequences of higher lengths up to 800. In this setting, we find that when the model sizes are restricted, i.e., the width of the models is 64, state-space models such as DSS and Mamba struggle to perform better than chance-level accuracy for lengths over 400. In contrast, Transformers are able to achieve near-perfect accuracy (See Figure 4). However, unlike the case of Index Lookup, we find that the DSS architecture in particular is able to solve the task for lengths up to 800 with larger widths in the NCP setting. ", "page_idx": 35}, {"type": "text", "text": "", "page_idx": 36}, {"type": "text", "text": "Discussion. We discuss a few takeaways from our experiments. For the Index Lookup task, our results indicate that even small-sized one-layer Transformers can learn a lot more efficiently than recurrent models of much larger sizes. The experiments with bounded Dycks are primarily for one-layer Transformers and indicate that they learn at a much slower rate than recurrent models like LSTMs and even two-layer Transformers. On the string equality task, the difference in performance between Transformers and recurrent models is not as stark as the Index Lookup task, particularly with state-space models such as DSS. However, unlike Transformers, they seem to struggle on long sequences in the NCP setting when the widths of models are small. ", "page_idx": 36}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 37}, {"type": "text", "text": "Justification: The main claims are mentioned in the introduction and abstract reflect the main contributions of the paper. ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 37}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Justification: The limitations of the work are discussed in Section 7 ", "page_idx": 37}, {"type": "text", "text": "Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 37}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 37}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 37}, {"type": "text", "text": "Justification: The assumptions for each result are mentioned in their respective Sections before the results are stated. ", "page_idx": 38}, {"type": "text", "text": "Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 38}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 38}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 38}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 38}, {"type": "text", "text": "Justification: Yes, all the information regarding experiments are provided in either Section 6 or H. ", "page_idx": 38}, {"type": "text", "text": "Guidelines: ", "page_idx": 38}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 38}, {"type": "text", "text": "5. Open access to data and code ", "page_idx": 38}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 39}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 39}, {"type": "text", "text": "Justification: Yes we have included the code in the supplementary material. Guidelines: ", "page_idx": 39}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 39}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 39}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 39}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 39}, {"type": "text", "text": "Justification: The details are provided in Sections H and 6. ", "page_idx": 39}, {"type": "text", "text": "Guidelines: ", "page_idx": 39}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 39}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 39}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 39}, {"type": "text", "text": "Answer: [No] ", "page_idx": 39}, {"type": "text", "text": "Justification: Our experiments are on synthetic tasks where models either achieve nearperfect accuracy if they succeed or near chance-level accuracy if they fail. This large quantitative difference in performance allows for clear comparison between models. As the test sets have 5,000 entries, Binomial confidence intervals for the accuracy would be very small and would not add further information to this comparison. Additionally, since our primary focus is on whether any single run of an architecture can successfully solve a task, we do not compute error bars across multiple runs and use our compute to tune the learning rates and other hyperparameters extensively to rule out the failure of models due to lack of sufficient tuning. ", "page_idx": 39}, {"type": "text", "text": "Guidelines: ", "page_idx": 39}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. ", "page_idx": 39}, {"type": "text", "text": "\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 40}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 40}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 40}, {"type": "text", "text": "Justification: The details are provided in Appendix H. Guidelines: ", "page_idx": 40}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 40}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 40}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "Justification: The research conforms with the NeurIPs Code of Ethics. ", "page_idx": 40}, {"type": "text", "text": "Guidelines: ", "page_idx": 40}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 40}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 40}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 40}, {"type": "text", "text": "Justification: The paper primarily studies the capabilities of neural sequence models theoretically. While the models themselves might have some societal impact, the results presented in the paper do not have any direct societal impact. ", "page_idx": 40}, {"type": "text", "text": "Guidelines: ", "page_idx": 41}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 41}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 41}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 41}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 41}, {"type": "text", "text": "Justification: We do not release any models or data. Guidelines: ", "page_idx": 41}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 41}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 41}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 41}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 41}, {"type": "text", "text": "Justification: We do not use any existing assets apart from standard Python libraries which are cited appropriately. ", "page_idx": 41}, {"type": "text", "text": "Guidelines: ", "page_idx": 41}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 41}, {"type": "text", "text": "", "page_idx": 42}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 42}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 42}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 42}, {"type": "text", "text": "Justification: We provide the code to reproduce our experiments with appropriate instructions and the relevant details regarding the experiments are mentioned in the paper. ", "page_idx": 42}, {"type": "text", "text": "Guidelines: ", "page_idx": 42}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 42}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 42}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 42}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 42}, {"type": "text", "text": "Justification: The work does not involve any crowdsourcing or research with human subjects. Guidelines: ", "page_idx": 42}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 42}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 42}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 42}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 42}, {"type": "text", "text": "Justification: The work does not involve any crowdsourcing or research with human subjects. Guidelines: ", "page_idx": 42}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 42}, {"type": "text", "text": "\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 43}]