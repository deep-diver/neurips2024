[{"figure_path": "XkvNQPDFqV/figures/figures_1_1.jpg", "caption": "Figure 1: High-level description of our method, Random Cycle Coding (RCC). RCC encodes the clustering (X, \u03a0) as cycles in the permutation \u03c3 induced by the relative ordering of objects. Left: Indices represent the rankings of objects in X according to the total ordering of X. Middle: One of two permutations will be randomly selected with bits-back coding to represent the clustering (\u03c3, shown in cycle-notation). Then, Foata's Bijection is applied to yield \u03c3', shown in line-notation, which is encoded into the ANS stack. Right: The final ANS stack containing \u03c3' in line-notation.", "description": "This figure illustrates the Random Cycle Coding (RCC) method.  It shows how cluster assignments are encoded as cycles within a permutation. The left side shows the initial data and cluster assignments. The middle shows how a permutation is created from the relative order of the elements and then transformed using Foata's Bijection. This permutation represents the cluster assignments. The right shows how the final permutation is encoded in an ANS (Asymmetric Numeral Systems) stack for efficient storage.", "section": "3 Method"}, {"figure_path": "XkvNQPDFqV/figures/figures_6_1.jpg", "caption": "Figure 2: Median encoding plus decoding times, across 100 runs, for Random Order Coding (ROC) [Severo et al., 2023] and our method Random Cycle Coding (RCC). The number of elements n increases from left-to-right across plots. Clusters are fixed to have roughly the same size, n/k, mirroring vector database applications discussed in Section 5.3. Reported times are representative of the amount of compute needed to sample the permutation in the bits-back step as data vectors are encoded with ANS using a uniform distribution.", "description": "The figure shows the median encoding and decoding times for three different methods: RCC, ROC-1, and ROC-2.  The x-axis represents the number of clusters (k), while the y-axis represents the time in microseconds. There are three separate graphs, one each for 10, 100, and 1000 elements (n). The dashed line represents the theoretical minimum time, where log|\u03a0| = 0. The figure demonstrates the computational efficiency of RCC, especially as the number of elements increases.", "section": "5 Experiments"}, {"figure_path": "XkvNQPDFqV/figures/figures_7_1.jpg", "caption": "Figure 3: Maximum (left) and minimum (right) byte savings per element as a function of the number of clusters and elements. Savings are maximized when one cluster contains most elements and all others are singletons. The minimum is achieved if clusters have roughly the same number of elements. Two variants of Random Order Coding (ROC) [Severo et al., 2023] are shown (see Section 4) with dashed lines. Random Cycle Coding (RCC) achieves higher savings than both variants of ROC while requiring less memory and computational resources.", "description": "This figure shows the maximum and minimum byte savings per element achieved by Random Cycle Coding (RCC) and two variants of Random Order Coding (ROC) as a function of the number of clusters and the number of elements.  The x-axis represents the number of clusters (in thousands), and the y-axis shows the bytes-per-element savings.  Different curves represent different numbers of total elements (10\u00b3, 10\u2075, and 10\u2077). The maximum savings occur when one cluster is significantly larger than the others, and the minimum savings occur when clusters are of similar size. The figure demonstrates that RCC consistently outperforms ROC in terms of savings.", "section": "5 Experiments"}, {"figure_path": "XkvNQPDFqV/figures/figures_11_1.jpg", "caption": "Figure 2: Median encoding plus decoding times, across 100 runs, for Random Order Coding (ROC) [Severo et al., 2023] and our method Random Cycle Coding (RCC). The number of elements n increases from left-to-right across plots. Clusters are fixed to have roughly the same size, n/k, mirroring vector database applications discussed in Section 5.3. Reported times are representative of the amount of compute needed to sample the permutation in the bits-back step as data vectors are encoded with ANS using a uniform distribution.", "description": "The figure displays the median time taken for encoding and decoding across 100 runs using two different methods: Random Cycle Coding (RCC) and Random Order Coding (ROC). The number of elements (n) and clusters (k) are varied across three subplots, showing the median time increases quasi-linearly with the number of clusters and scales with the number of elements. The graph highlights RCC's superior performance in terms of speed compared to ROC.", "section": "5 Experiments"}]