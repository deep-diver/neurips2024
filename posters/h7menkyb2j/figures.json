[{"figure_path": "H7mENkYB2J/figures/figures_4_1.jpg", "caption": "Figure 1: A schematic illustration of our FastCherries/SiteRM method. Rate matrix estimation from a set of MSAs classically proceeds in two steps: tree estimation, followed by rate matrix estimation. The recently proposed CherryML method [11] significantly speeds up the rate matrix estimation step. Since CherryML only requires the cherries in the trees, we propose FastCherries, a new near-linear method that estimates only the cherries in the tree (as well as the site rates) rather than the whole tree. FastCherries proceeds in two steps: a divide-and-conquer pairing step based on Hamming distance, followed by site rate and branch length estimation. Site rate and branch length estimation alternate until convergence. CherryML's speed allows estimating not only a single global rate matrix, but also one rate matrix per site, which we call the SiteRM model. In this schematic, computational complexities for each step of FastCherries is annotated at each step; n = number of sequences in the MSA, l = number of sites in the MSA, s = number of states (e.g., 20 for amino acids), r = number of site rate categories of the LG model (e.g., 4 or 20 is typical), b = number of quantization points used to quantize time by CherryML. Precomputation of the matrix exponentials which is shared across all MSAs is excluded from the schematic and costs O(rbs\u00b3). MSA illustrations adapted from [23].", "description": "This figure illustrates the FastCherries/SiteRM method, a two-step process for rate matrix estimation from multiple sequence alignments (MSAs).  It contrasts the traditional method, which involves computationally expensive tree reconstruction, with the proposed method, FastCherries, which avoids this step.  FastCherries uses a divide-and-conquer approach to find pairs of sequences, followed by iteratively estimating site rates and branch lengths. The figure also shows the SiteRM model which allows for site-specific rate matrices.", "section": "3 Method"}, {"figure_path": "H7mENkYB2J/figures/figures_7_1.jpg", "caption": "Figure 2: CherryML with FastCherries applied to the LG model. (a) End-to-end runtime and (b) median estimation error as a function of sample size for CherryML with FastCherries vs CherryML with FastTree (as well as an oracle with ground truth trees and site rates). Practically, the loss of statistical efficiency for CherryML with FastCherries relative to FastTree or ground truth trees (which perform similarly) is \u2248 50% with a small asymptotic bias of around 2%, yet CherryML with FastCherries is two orders of magnitude faster when applied to 1,024 families. The bulk of the end-to-end runtime is taken by rate matrix estimation. The simulation setup is the same as in the CherryML paper [11]. (c) On the benchmark from the LG paper [7], CherryML with FastCherries yields similar likelihood on held-out families compared to CherryML with FastTree, while (d) shows that CherryML with FastCherries is approximately 20 times faster end-to-end than CherryLM with FastTree, with the bottleneck now being rate matrix estimation.", "description": "This figure compares the performance of CherryML with two different tree estimation methods (FastCherries and FastTree) and an oracle using ground truth trees.  Panels (a) and (b) show the runtime and median relative error of rate matrix estimation, demonstrating the significant speed improvement of FastCherries while maintaining reasonable accuracy. Panels (c) and (d) present results on real data, showing that FastCherries achieves similar accuracy to FastTree but with a much faster runtime. The bottleneck shifts from tree estimation to rate matrix estimation in (d), highlighting the efficiency of FastCherries.", "section": "4 Results"}, {"figure_path": "H7mENkYB2J/figures/figures_14_1.jpg", "caption": "Figure 1: A schematic illustration of our FastCherries/SiteRM method. Rate matrix estimation from a set of MSAs classically proceeds in two steps: tree estimation, followed by rate matrix estimation. The recently proposed CherryML method [11] significantly speeds up the rate matrix estimation step. Since CherryML only requires the cherries in the trees, we propose FastCherries, a new near-linear method that estimates only the cherries in the tree (as well as the site rates) rather than the whole tree. FastCherries proceeds in two steps: a divide-and-conquer pairing step based on Hamming distance, followed by site rate and branch length estimation. Site rate and branch length estimation alternate until convergence. CherryML's speed allows estimating not only a single global rate matrix, but also one rate matrix per site, which we call the SiteRM model. In this schematic, computational complexities for each step of FastCherries is annotated at each step; n = number of sequences in the MSA, l = number of sites in the MSA, s = number of states (e.g., 20 for amino acids), r = number of site rate categories of the LG model (e.g., 4 or 20 is typical), b = number of quantization points used to quantize time by CherryML. Precomputation of the matrix exponentials which is shared across all MSAs is excluded from the schematic and costs O(rbs\u00b3). MSA illustrations adapted from [23].", "description": "This figure provides a detailed schematic of the FastCherries/SiteRM method for rate matrix estimation. It illustrates the two-step process: first, a near-linear time method called FastCherries estimates the cherries in the tree and site-specific rates; second, CherryML estimates the rate matrices, achieving a significant speedup compared to traditional methods. The figure also annotates the computational complexity of each step and shows how the SiteRM model, which estimates a rate matrix per site, can be achieved with this approach.", "section": "3 Method"}, {"figure_path": "H7mENkYB2J/figures/figures_16_1.jpg", "caption": "Figure 2: CherryML with FastCherries applied to the LG model. (a) End-to-end runtime and (b) median estimation error as a function of sample size for CherryML with FastCherries vs CherryML with FastTree (as well as an oracle with ground truth trees and site rates). Practically, the loss of statistical efficiency for CherryML with FastCherries relative to FastTree or ground truth trees (which perform similarly) is \u2248 50% with a small asymptotic bias of around 2%, yet CherryML with FastCherries is two orders of magnitude faster when applied to 1,024 families. The bulk of the end-to-end runtime is taken by rate matrix estimation. The simulation setup is the same as in the CherryML paper [11]. (c) On the benchmark from the LG paper [7], CherryML with FastCherries yields similar likelihood on held-out families compared to CherryML with FastTree, while (d) shows that CherryML with FastCherries is approximately 20 times faster end-to-end than CherryLM with FastTree, with the bottleneck now being rate matrix estimation.", "description": "This figure demonstrates the performance of CherryML with the newly developed FastCherries method compared to the original CherryML with FastTree, as well as an oracle using true trees and site rates, across various aspects. Panels (a) and (b) show the runtime and accuracy of rate matrix estimation, respectively, as functions of the number of protein families used in the simulation. Panel (c) compares the average per-site AIC improvement over the JTT model for the various methods. Finally, panel (d) compares the runtimes of the complete workflow for the different methods using a benchmark dataset from the LG paper, showcasing a significant speed improvement from using FastCherries.", "section": "4 Results"}]