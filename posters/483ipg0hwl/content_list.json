[{"type": "text", "text": "ReEvo: Large Language Models as Hyper-Heuristics with Reflective Evolution ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Haoran $\\mathbf{Y}\\mathbf{e}^{1}$ , Jiarui $\\mathbf{Wang}^{2}$ , Zhiguang $\\mathbf{Cao}^{3}$ , Federico Berto4, Chuanbo $\\mathbf{Hua}^{4}$ , Haeyeon ${\\bf K i m^{4}}$ , Jinkyoo Park4, Guojie Song1 5 ", "page_idx": 0}, {"type": "text", "text": "1National Key Laboratory of General Artificial Intelligence, School of Intelligence Science and Technology, Peking University 2Southeast University 3Singapore Management University 4KAIST 5PKU-Wuhan Institute for Artificial Intelligence AI4CO\u2020 ", "page_idx": 0}, {"type": "text", "text": "hrye@stu.pku.edu.cn, jiarui_wang@seu.edu.cn, zgcao@smu.edu.sg {fberto, cbhua, haeyeonkim, jinkyoo.park}@kaist.ac.kr, gjsong@pku.edu.cn ", "page_idx": 0}, {"type": "text", "text": "Project Website: https://ai4co.github.io/reevo ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "The omnipresence of NP-hard combinatorial optimization problems (COPs) compels domain experts to engage in trial-and-error heuristic design. The long-standing endeavor of design automation has gained new momentum with the rise of large language models (LLMs). This paper introduces Language Hyper-Heuristics (LHHs), an emerging variant of Hyper-Heuristics that leverages LLMs for heuristic generation, featuring minimal manual intervention and open-ended heuristic spaces. To empower LHHs, we present Reflective Evolution (ReEvo), a novel integration of evolutionary search for efficiently exploring the heuristic space, and LLM reflections to provide verbal gradients within the space. Across five heterogeneous algorithmic types, six different COPs, and both white-box and black-box views of COPs, ReEvo yields state-of-the-art and competitive meta-heuristics, evolutionary algorithms, heuristics, and neural solvers, while being more sample-efficient than prior LHHs. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "NP-hard combinatorial optimization problems (COPs) pervade numerous real-world systems, each characterized by distinct constraints and objectives. The intrinsic complexity and heterogeneity of these problems compel domain experts to laboriously develop heuristics for their approximate solutions [23]. Automation of heuristic designs represents a longstanding pursuit. ", "page_idx": 0}, {"type": "text", "text": "Classic Hyper-Heuristics (HHs) automate heuristic design by searching for the best heuristic (combination) from a set of heuristics or heuristic components [64]. Despite decades of development, HHs are limited by heuristic spaces predefined by human experts [64]. The rise of large language models (LLMs) opens up new possibilities for HHs. This paper introduces the general concept of Language Hyper-Heuristics (LHH) to advance beyond preliminary attempts in individual COP settings [68, 46]. LHH constitutes an emerging variant of HH that utilizes LLMs for heuristic generations. It features minimal human intervention and open-ended heuristic spaces, showing promise to comprehensively shift the HH research paradigm. ", "page_idx": 0}, {"type": "text", "text": "Pure LHH (e.g., LLM generations alone) is sample-inefficient and exhibits limited inference capability for black-box COPs. This work elicits the power of LHH with Reflective Evolution (ReEvo). ReEvo couples evolutionary search for efficiently exploring heuristic spaces, with self-reflections to boost the reasoning capabilities of LLMs. It emulates human experts by reflecting on the relative performance of two heuristics and gathering insights across iterations. This reflection approach is analogous to interpreting genetic cues and providing \"verbal gradient\" within search spaces. We introduce fitness landscape analysis and black-box prompting for reliable evaluation of LHHs. The dual-level reflections are shown to enhance heuristic search and induce verbal inference for black-box COPs, enabling ReEvo to outperform prior state-of-the-art (SOTA) LHH [47]. ", "page_idx": 1}, {"type": "text", "text": "We introduce novel applications of LHHs and yield SOTA solvers with ReEvo: (1) We evolve penalty heuristics for Guided Local Search (GLS), which outperforms SOTA learning-based [52, 24, 75] and knowledge-based [1] (G)LS solvers. (2) We enhance Ant Colony Optimization (ACO) by evolving its heuristic measures, surpassing both neural-enhanced heuristics [94] and expert-designed heuristics [71, 6, 72, 17, 39]. (3) We refine the genetic algorithm (GA) for Electronic Design Automation (EDA) by evolving genetic operators, outperforming expert-designed GA [63] and the SOTA neural solver [31] for the Decap Placement Problem (DPP). (4) Compared to a classic HH [15], ReEvo generates superior constructive heuristics for the Traveling Salesman Problem (TSP). (5) We enhance the generalization of SOTA neural combinatorial optimization (NCO) solvers [37, 51] by evolving heuristics for attention reshaping. For example, we improve the optimality gap of POMO [37] from $52\\%$ to $29\\%$ and LEHD [51] from $3.2\\%$ to $3.0\\%$ on TSP1000, with negligible additional time overhead and no need for tuning neural models. ", "page_idx": 1}, {"type": "text", "text": "We summarize our contributions as follows. (1) We propose the concept of Language HyperHeuristics (LHHs), which bridges emerging attempts using LLMs for heuristic generation with a methodological group that enjoys decades of development. (2) We present Reflective Evolution (ReEvo), coupling evolutionary computation with humanoid reflections to elicit the power of LHHs. We introduce ftiness landscape analysis and black-box prompting for reliable LHH evaluations, where ReEvo achieves SOTA sample efficiency. (3) We introduce novel applications of LHHs and present SOTA COP solvers with ReEvo, across five heterogeneous algorithmic types and six different COPs. ", "page_idx": 1}, {"type": "text", "text": "2 Related work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Traditional Hyper-Heuristics. Traditional HHs select the best performing heuristic from a predefined set [13] or generate new heuristics through the combination of simpler heuristic components [15, 104]. HHs offer a higher level of generality in solving various optimization problems [109, 96, 19, 44, 103, 58], but are limited by the heuristic space predefined by human experts. ", "page_idx": 1}, {"type": "text", "text": "Neural Combinatorial Optimization. Recent advances of NCO show promise in learning endto-end solutions for COPs [2, 93, 3]. NCO can be regarded as a variant of HH, wherein neural architectures and solution pipelines define a heuristic space, and training algorithms search within it. A well-trained neural network (NN), under certain solution pipelines, represents a distinct heuristic. From this perspective, recent advancements in NCO HHs have led to better-aligned neural architectures [28, 51, 34, 73] and advanced solution pipelines [32, 52, 42, 89, 95, 12, 5] to define effective heuristic spaces, and improved training algorithms to efficiently explore heuristic spaces [33, 27, 14, 76, 18, 90, 79, 35], while targeting increasingly broader applications [9, 107, 54, 77]. In this work, we show that ReEvo-generated heuristics can outperform or enhance NCO methods. ", "page_idx": 1}, {"type": "text", "text": "LLMs for code generation and optimization. The rise of LLMs introduces new prospects for diverse fields [88, 82, 105, 25, 50, 99]. Among others, code generation capabilities of LLMs are utilized for code debugging [10, 49], enhancing code performance [55], solving algorithmic competition challenges [41, 70], robotics [38, 43, 81], and general task solving [92, 102]. Interleaving LLM generations with evaluations [74] yields powerful methods for prompt optimization [108, 83, 20], reinforcement learning (RL) reward design [53], algorithmic (self-)improvement [98, 48, 45], neural architecture search [8], and general solution optimization [91, 4, 80], with many under evolutionary frameworks [57, 87, 21, 7, 40]. Most related to ReEvo, concurrent efforts by Liu et al. [47] and Romera-Paredes et al. [68] leverage LLMs to develop heuristics for COPs. We go beyond and propose generic LHH for COPs, along with better sample efficiency, broader applications, more reliable evaluations, and improved heuristics. In addition, ReEvo contributes to a smoother ftiness landscape, showing the potential to enhance other tasks involving LLMs for optimization. We present further discussions in Appendix A. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Self-reflections of LLMs. Shinn et al. [70] propose to reinforce language agents via linguistic feedback, which is subsequently harnessed for various tasks [56, 84]. While Shinn et al. [70] leverage binary rewards indicating passing or failing test cases in programming, ReEvo extends the scope of verbal RL feedback to comparative analysis of two heuristics, analogous to verbal gradient information [66] within heuristic spaces. Also, ReEvo incorporates reflection within an evolutionary framework, presenting a novel and powerful integration. ", "page_idx": 2}, {"type": "text", "text": "3 Language Hyper-Heuristics for Combinatorial Optimization ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "HHs explore a search space of heuristic configurations to select or generate effective heuristics, indirectly optimizing the underlying COP. This dual-level framework is formally defined as follows. ", "page_idx": 2}, {"type": "text", "text": "Definition 3.1 (Hyper-Heuristic). For COP with solution space $S$ and objective function $f:S\\to\\mathbb{R}$ , a Hyper-Heuristic (HH) searches for the optimal heuristic $h^{*}$ in a heuristic space $H$ such that a meta-objective function $F:H\\to\\mathbb{R}$ is minimized, i.e., $h^{*}=\\operatorname{argmin}_{h\\in H}F(h)$ . ", "page_idx": 2}, {"type": "text", "text": "Depending on how the heuristic space $H$ is defined, traditional HHs can be categorized into selection and generation HHs, both entailing manually defined heuristic primitives. Here, we introduce a novel variant of HHs, Language Hyper-Heuristics (LHH), wherein heuristics in $H$ are generated by LLMs. LHHs dispense with the need for predefined $H$ , and instead leverage LLMs to explore an open-ended heuristic space. We recursively define LHHs as follows. ", "page_idx": 2}, {"type": "text", "text": "Definition 3.2 (Language Hyper-Heuristic). A Language Hyper-Heuristic (LHH) is an HH variant where heuristics in $H$ are generated by LLMs. ", "page_idx": 2}, {"type": "text", "text": "In this work, we define the meta-objective function $F$ as the expected performance of a heuristic $h$ for certain COP. It is estimated by the average performance on a dataset of problem instances. ", "page_idx": 2}, {"type": "text", "text": "4 Language Hyper-Heuristic with ReEvo ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "LHH takes COP specifications as input and outputs the best inductive heuristic found for this COP. Vanilla LHH can be repeated LLM generations to randomly search the heuristic space, which is sample-inefficient and lacks reasoning capabilities for complex and black-box problems (see $\\S~6$ ). Therefore, we propose Reflective Evolution (ReEvo) to interpret genetic cues of evolutionary search and unleash the power of LHHs. ", "page_idx": 2}, {"type": "text", "text": "ReEvo is schematically illustrated in Fig. 1. Under an evolutionary framework, LLMs assume two roles: a generator LLM for generating individuals and a reflector LLM for guiding the generation with reflections. ReEvo, as an LHH, features a distinct individual encoding, where each individual is the code snippet of a heuristic. Its evolution begins with population initialization, followed by five iterative steps: selection, short-term reflection, crossover, long-term reflection, and elitist mutation. We evaluate the meta-objective of all heuristics, both after crossover and mutation. Our prompts are gathered in Appendix B. ", "page_idx": 2}, {"type": "text", "text": "Individual encoding. ReEvo optimizes toward best-performing heuristics via an evolutionary process, specifically a Genetic Programming (GP). It diverges from traditional GPs in that (1) individuals are code snippets generated by LLMs, and (2) individuals are not constrained by any predefined encoding format, except for adhering to a specified function signature. ", "page_idx": 2}, {"type": "text", "text": "Population initialization. ReEvo initializes a heuristic population by prompting the generator LLM with a task specification. A task specification contains COP descriptions (if available), heuristic designation, and heuristic functionality. Optionally, including seed heuristics, either trivial or expertly crafted to improve upon, can provide in-context examples that encourage valid heuristic generation and bias the search toward more promising directions. ", "page_idx": 2}, {"type": "text", "text": "A ReEvo iteration contains the following five sequential steps. ", "page_idx": 2}, {"type": "image", "img_path": "483IPG0HWL/tmp/8c5118eb5584131d54a2fb7db2533234f4c9708c02221af62402132b6767b27a.jpg", "img_caption": ["(a) ReEvo pipeline. Top: ReEvo evolves a population of heuristics. Insights and knowledge are verbalized as long-term reflections and accumulated throughout iterations. Bottom: A ReEvo iteration contains five sequential steps: selection, short-term reflection, crossover, long-term reflection, and elitist mutation. "], "img_footnote": [], "page_idx": 3}, {"type": "image", "img_path": "483IPG0HWL/tmp/9349acd17f9e25d468091f54f9db5be0bfdbe66463c4e70e96a7ae275392bb4a.jpg", "img_caption": ["(b) Examples of reflections for black-box TSP. Heuristics are designed for Ant Colony Optimization (see $\\S\\ S.2\\rangle$ ). Left: Given a pair parent heuristics, ReEvo correctly infers the TSP objective and generates a better offspring accordingly. Right: Given the elite heuristic and accumulated long-term reflections, ReEvo incorporates the suggested statistics and yields a better mutated heuristic. ", "Figure 1: An illustration of ReEvo. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Selection. ReEvo selects parent pairs from successfully executed heuristics at random, while avoiding pairing heuristics with an identical meta-objective value $F$ . ", "page_idx": 3}, {"type": "text", "text": "Short-term reflection. For each pair of heuristic parents, the reflector LLM reflects upon their relative performance and gives hints accordingly for improved design. Unlike prior work [70], ReEvo integrates the reflections into evolutionary search and reflects by performing comparative analyses. Our proposed approach is analogous to interpreting genetic cues and providing verbal gradients within search spaces, which leads to smoother ftiness landscapes and better search results (see $\\S\\ 6.1\\$ ). ", "page_idx": 3}, {"type": "text", "text": "Crossover. ReEvo prompts the generator LLM to generate an offspring heuristic, given task specifications, a pair of parent heuristics, explicit indications of their relative performance, short-term reflections over the pair, and generation instructions. ", "page_idx": 3}, {"type": "text", "text": "Long-term reflection. ReEvo accumulates expertise in improving heuristics via long-term reflections. The reflector LLM, given previous long-term reflections and newly gained short-term ones, summarizes them and gives hints for improved heuristic design. ", "page_idx": 4}, {"type": "text", "text": "Elitist mutation. ReEvo employs an elitist mutation approach. Based on long-term reflections, the generator LLM samples multiple heuristics to improve the current best one. A mutation prompt consists of task specifications, the elite heuristic, long-term reflections, and generation instructions. ", "page_idx": 4}, {"type": "text", "text": "Viewing ReEvo from the perspective of an LLM agentic architecture [88], short-term reflections interpret the environmental feedback from each round of interaction. Long-term reflections distill accumulated experiences and knowledge, enabling them to be loaded into the inference context without causing memory blowups. ", "page_idx": 4}, {"type": "text", "text": "5 Heuristic generation with ReEvo ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "This section presents novel applications of LHH across heterogeneous algorithmic types and diverse COPs. With ReEvo, we yield state-of-the-art and competitive meta-heuristics, evolutionary algorithms, heuristics, and neural solvers. ", "page_idx": 4}, {"type": "text", "text": "Hyperparameters of ReEvo and detailed experimental setup are given in Appendix C. We apply ReEvo to different algorithmic types across six diverse COPs representative of different areas: Traveling Salesman Problem (TSP), Capacitated Vehicle Routing Problem (CVRP), and Orienteering Problem (OP) for routing problems; Multiple Knapsack Problem (MKP) for subset problems; Bin Packing Problem (BPP) for grouping problems; and Decap Placement Problem (DPP) for electronic design automation (EDA) problems. Details of the benchmark COPs are given in Appendix D. The best ReEvo-generated heuristics are collected in Appendix E. ", "page_idx": 4}, {"type": "text", "text": "5.1 Penalty heuristics for Guided Local Search ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "We evolve penalty heuristics for Guided Local Search (GLS) [1]. GLS interleaves local search with solution perturbation. The perturbation is guided by the penalty heuristics to maximize its utility. ReEvo searches for the penalty heuristic that leads to the best GLS performance. ", "page_idx": 4}, {"type": "text", "text": "We implement the best heuristic generated by ReEvo within KGLS [1] and refer to such coupling as KGLS-ReEvo. In Table 1, we compare KGLS-ReEvo with the original KGLS, other GLS variants [24, 75, 47], and SOTA NCO method that learns to improve a solution [52]. The results show that ReEvo can improve KGLS and outperform SOTA baselines. In addition, we use a single heuristic for TSP20 to 200, while NCO baselines require training models specific to each problem size. ", "page_idx": 4}, {"type": "table", "img_path": "483IPG0HWL/tmp/17d5af44da0475877b7cec25d1cee50eedfc8f11a60fb913e25faebfccc7208b.jpg", "table_caption": ["Table 1: Evaluation results of different local search (LS) variants. We report optimality gaps and per-instance execution time. "], "table_footnote": ["\\*: All instances are solved in one batch. $\\overline{{\\mathrm{D2A}}}\\!\\!=\\!1$ ; T=500, 4000, 5000, and 5000 for 4 problem sizes, respectively. \u2020: The results are drawn from the original literature. $^{\\ddagger}$ : They are based on our own GLS implementation. "], "page_idx": 4}, {"type": "text", "text": "5.2 Heuristic measures for Ant Colony Optimization ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Solutions to COPs can be stochastically sampled, with heuristic measures indicating the promise of solution components and biasing the sampling. Ant Colony Optimization (ACO), which interleaves stochastic solution sampling with pheromone update, builds on this idea. We generate such heuristic measures for five different COPs: TSP, CVRP, OP, MKP, and BPP. ", "page_idx": 4}, {"type": "text", "text": "Under the ACO framework, we evaluate the best ReEvo-generated heuristics against the expertdesigned ones and neural heuristics specifically learned for ACO [94]. The evolution curves displayed ", "page_idx": 4}, {"type": "image", "img_path": "483IPG0HWL/tmp/a0c4010397bea847039b350158c2728b35023a86c483c5dc7765ef8e700c99a5.jpg", "img_caption": [], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "Figure 2: Comparative evaluations of ACO using expert-designed heuristics [71, 6, 72, 17, 39], neural heuristics [94], and ReEvo heuristics. For each COP, the same neural heuristic or the ReEvo heuristic is applied across all problem sizes; both heuristics are trained exclusively on the smallest problem size among the five. Left: Relative performance improvement of DeepACO and ReEvo over human baselines w.r.t. problem sizes. Right: ACO evolution curves, plotting the all-time best objective value w.r.t. the number of solution evaluations. The curves are averaged over three runs in which only small variances are observed (e.g., $\\sim0.01$ for TSP50). ", "page_idx": 5}, {"type": "text", "text": "in Fig. 2 verify the consistent superiority of ReEvo across COPs and problem sizes. Notably, on 3 out of 5 COPs, ReEvo outperforms DeepACO [94] even when the latter overfits the test problem size (TSP50, OP50, and MKP100). We observe that most ReEvo-generated heuristics show consistent performance across problem sizes and distributions. Hence, their advantages grow as the distributional shift increases for neural heuristics. ", "page_idx": 5}, {"type": "text", "text": "5.3 Genetic operators for Electronic Design Automation ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Expert-designed GAs are widely adopted in EDA [69, 97, 11, 26]. Besides directly solving EDA problems, GA-generated solutions can be used to train amortized neural solvers [31]. Here, we show that ReEvo can improve the expert-designed GAs and outperform DevFormer [31], the SOTA solver for the DPP problem. We sequentially evolve with ReEvo the crossover and mutation operators for the GA expert-designed by Park et al. [63]. Fig. 3 compares online and offline learned methods, DevFormer, the original expert-designed GA, and the GA with ReEvo-generated operators, showing that the ReEvo-designed GA outperforms previous methods and, importantly, both the expert-designed GA and DevFormer. ", "page_idx": 5}, {"type": "text", "text": "5.4 Constructive heuristics for the Traveling Salesman Problem ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Heuristics can be used for deterministic solution construction by sequentially assigning values to each decision variable. We evaluate the constructive heuristic for TSP generated by ReEvo on real-world benchmark instances from TSPLIB [67] in Table 2. ReEvo can generate better heuristics than GHPP [15], a classic HH based on GP. ", "page_idx": 5}, {"type": "text", "text": "5.5 Attention reshaping for Neural Combinatorial Optimization ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Autoregressive NCO solvers suffer from limited scaling-up generalization [29], partially due to the dispersion of attention scores [85]. Wang et al. [85] design a distance-aware heuristic to reshape the attention scores, which improves the generalization of NCO solvers without additional training. However, the expert-designed attention-reshaping can be suboptimal and does not generalize across neural models or problem distributions. ", "page_idx": 5}, {"type": "table", "img_path": "483IPG0HWL/tmp/516cb593af540372ca71bb9ce12f2ffc017d03923c56c0b8160535bbbd45094a.jpg", "table_caption": ["Table 2: Comparisons of constructive heuristics designed by human, GHPP [15], and ReEvo. We report the average optimality gap of each instance, where the baseline results are drawn from [15] and the results of ReEvo are averaged over 3 runs with different starting nodes. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "Here we show that ReEvo can automatically and efficiently tailor attention reshaping for specific neural models and problem distributions of interest. We apply attention reshaping designed by experts [85] and ReEvo to two distinct model architectures: POMO with heavy encoder and light decoder [37], and LEHD with light encoder and heavy decoder [51]. On TSP and CVRP, Table 3 compares the original NCO solvers [37, 51], those with expert-designed attention reshaping [85], and those with ReEvo-designed attention reshaping. The results reveal that the ReEvo-generated heuristics can improve the original models and outperform their expert-designed counterparts. Note that implementing ReEvo-generated attention reshaping takes negligible additional time; e.g., solving a CVRP1000 with LEHD takes 50.0 seconds with reshaping, compared to 49.8 seconds without. ", "page_idx": 6}, {"type": "text", "text": "6 Evaluating ReEvo ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "6.1 Fitness landscape analysis ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The fitness landscape of a searching algorithm depicts the structure and characteristics of its search space $F\\,:\\,H\\,\\rightarrow\\,\\mathbb{R}$ [59]. This understanding is essential for designing effective HHs. Here we introduce this technique to LHHs and evaluate the impact of reflections on the fitness landscape. ", "page_idx": 6}, {"type": "text", "text": "Traditionally, the neighborhood of a solution is defined as a set of solutions that can be reached after a single move of a certain heuristic. However, LHHs feature a probabilistic nature and open-ended search space, and we redefine its neighborhood as follows. ", "page_idx": 6}, {"type": "text", "text": "Definition 6.1 (Neighborhood). Let $L L M$ denote an LHH move, $x$ a specific prompt, and $h_{c}$ the current heuristic. Given $L L M$ and $x$ , the neighborhood of $h_{c}$ is defined as a set $\\mathcal{N}$ , where each ", "page_idx": 6}, {"type": "image", "img_path": "483IPG0HWL/tmp/62f880592c9040f1db1c24f8a9b131af6527d484d17a37e403eff6443d1000cf.jpg", "img_caption": ["Figure 3: Left: Comparison of DevFormer [31], the expert-designed GA [63] and our ReEvo-designed GA on DPP. The evolution curves plot the best objective value over generations; the horizontal line indicates the reward of end-to-end solutions generated by DevFormer. Right: Evaluation results of DPP solvers. We report the number of solution generations and the average objective value of 100 test problems. "], "img_footnote": [], "page_idx": 6}, {"type": "table", "img_path": "483IPG0HWL/tmp/ac8c80c80c6b31bcf1583b3b917bffc8edcb081aee7306cf6abb98ac4dc175b6.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "table", "img_path": "483IPG0HWL/tmp/1ab816547ab745d81aa9b3ac0363b5f37446a49f0f896717c88b8243985c3420.jpg", "table_caption": ["Table 3: Evaluation results for NCO solvers with and without different attention-reshaping heuristics. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "element $h\\in{\\mathcal{N}}$ represents a heuristic that $L L M$ can mutate $h_{c}$ into, in response to $x$ : ", "page_idx": 7}, {"type": "equation", "text": "$$\n\\mathcal{N}(h_{c})=\\{h\\mid L L M(h|h_{c},x)>\\xi\\}.\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "Here, $L L M(h|h_{c},x)$ denotes the probability of generating $h$ after prompting with $h_{c}$ and $x$ , and $\\xi$ is a small threshold value. In practice, the neighborhood can be approximated by sampling from the distribution $L L M(\\cdot|h_{c},x)$ for a large number of times. ", "page_idx": 7}, {"type": "text", "text": "We extend the concept of autocorrelation to LHHs under our definition of neighborhood. Autocorrelation reflects the ruggedness of a landscape, indicating the difficulty of a COP [59, 22]. ", "page_idx": 7}, {"type": "text", "text": "Definition 6.2 (Autocorrelation). Autocorrelation measures the correlation structure of a fitness landscape. It is derived from the autocorrelation function $r$ of a time series of fitness values, which are generated by a random walk on the landscape via neighboring points: ", "page_idx": 7}, {"type": "equation", "text": "$$\nr_{i}=\\frac{\\sum_{t=1}^{T-i}(f_{t}-\\bar{f})(f_{t+i}-\\bar{f})}{\\sum_{t=1}^{T}(f_{t}-\\bar{f})^{2}},\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "where $\\bar{f}$ is the mean fitness of the points visited, $T$ is the size of the random walk, and $i$ is the time lag between points in the walk. ", "page_idx": 7}, {"type": "text", "text": "Based on the autocorrelation function, correlation length is defined below [86]. ", "page_idx": 7}, {"type": "text", "text": "Definition 6.3 (Correlation Length). Given an autocorrelation function $r$ , the correlation length $l$ is formulated as $l=-1/\\ln(|r_{1}|)$ for $r_{1}\\neq0$ . It reflects the ruggedness of a landscape, and smaller values indicate a more rugged landscape. ", "page_idx": 7}, {"type": "text", "text": "To perform autocorrelation analysis for ReEvo, we conduct random walks based on the neighborhood established with our crossover prompt either with or without short-term reflections. In practice, we set the population size to 1 and skip invalid heuristics; the selection always picks the current and last heuristics for short-term reflection and crossover, and we do not implement mutation. ", "page_idx": 7}, {"type": "text", "text": "Table 4 presents the correlation length and the average objective value of the random walks, where we generate ACO heuristics for TSP50. The correlation length is averaged over 3 runs each with 40 random walk steps, while the objective value is averaged over all $3\\times40$ heuristics. The results verify that implementing reflection leads to a less rugged landscape and better search results. As discussed in $\\S\\ 4$ , reflections can function as verbal gradients that lead to better neighborhood structures. ", "page_idx": 7}, {"type": "table", "img_path": "483IPG0HWL/tmp/c4cd6560ab0a0dc74838116c88255a84b778829e9609e50fa3dfc6c51e454619.jpg", "table_caption": ["Table 4: Autocorrelation analysis of ReEvo. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "6.2 Ablation studies ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In this section, we investigate the effects of the proposed components of ReEvo with both white and black-box prompting. ", "page_idx": 7}, {"type": "text", "text": "Black-box prompting. We do not reveal any information related to the COPs and prompt LHHs in general forms (e.g., edge_attr in place of distance_matrix). Black-box settings allow reliable evaluations of LHHs in designing effective heuristics for novel and complex problems, rather than merely retrieving code tailored for prominent COPs from their parameterized knowledge. ", "page_idx": 8}, {"type": "text", "text": "We evaluate sampling LLM generations without evolution (LLM) and ReEvo without long-term reflections, short-term reflections, crossover, or mutation on generating ACO heuristics for TSP100. Table 5 shows that ReEvo enhances sample efficiency, and all its components positively contribute to its performance, both in white-box and black-box prompting. ", "page_idx": 8}, {"type": "table", "img_path": "483IPG0HWL/tmp/8c3242f3d442603cf2091eada659d687580d16aa8c5bed15b4295112ac0b5986.jpg", "table_caption": ["Table 5: Ablation study of ReEvo components with both white and black-box prompting. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "6.3 Comparative evaluations ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "This section compares ReEvo with EoH [47], a recent SOTA LHH that is more sample-efficient than FunSearch [68]. We adhere to the original code and (hyper)parameters of EoH. Our experiments apply both LHHs to generate ACO heuristics for TSP, CVRP, OP, MKP, and BPP, using black-box prompting and three LLMs: GPT-3.5 Turbo, GPT-4 Turbo, and Llama 3 (70B). ", "page_idx": 8}, {"type": "text", "text": "Fig. 4 compares EoH and ReEvo, and shows that ReEvo demonstrates superior sample efficiency. Besides the better neighborhood structure $(\\S\\ 6.1)$ , reflections facilitate explicit verbal inference of underlying black-box COP structures; we depict an example in Fig. 1 (b). The enhanced sample efficiency and inference capabilities of ReEvo are particularly useful for complex real-world problems, where the objective function is usually black-box and expensive to evaluate. ", "page_idx": 8}, {"type": "image", "img_path": "483IPG0HWL/tmp/f133a79f17190e6394f623a0f28b48ec6544984feab3c884f1009f2e2cd6d7a5.jpg", "img_caption": ["(b) LHH evolution curves using GPT-3.5 Turbo. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Figure 4: Comparisons between EoH [47] and ReEvo on five COPs with black-box prompting and using different LLMs. We perform three runs for each setting. ", "page_idx": 8}, {"type": "text", "text": "7 Discussions and limitations ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "When to use ReEvo as an LHH. Our experiments limit the number of heuristic evaluations to 100 shots and the results do not necessarily scale up. ReEvo is designed for scenarios where sample efficiency is crucial, such as real-world applications where heuristic evaluation can be costly. Allowing a large number of heuristic evaluations could obscure the impact of reflection or other prompting techniques, as reported by Zhang et al. [101]. ", "page_idx": 8}, {"type": "text", "text": "When to use ReEvo as an (alternative to) NCO/ML4CO method. LHH can be categorized as an NCO/ML4CO method. However, to facilitate our discussion, we differentiate LHHs from \"traditional\" NCO methods that usually train NN-parameterized heuristics via parameter adjustment. In $\\S~5$ , we demonstrate that ReEvo can either outperform or enhance NCO methods. Below, we explore the complementary nature of LHH and NCO methods. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "\u2022 Rule-based v.s. NN-parameterized policies. LHHs generate interpretable and rule-based heuristics (code snippets), while NCO generates black-box NN-parameterized policies. Interpretable heuristics offer insights for human designers and can be more reliable in practice when faced with dynamic environments, limited data, distributional shifts, or adversarial attacks. However, they may not be as expressive as neural networks and may underfit in complex environments. \u2022 Evolution and training. LHHs require only less than 100 heuristic evaluations and about 5 minutes to evolve a strong heuristic, while many NCO methods usually require millions of samples and days of training. LHHs are more practical when solution evaluation is expensive. \u2022 Inference. LHHs generate heuristics that are less demanding in terms of computational resources, as they do not require GPU during deployment. NCO methods require GPU for training and deployment, but they can also leverage the parallelism of GPU to potentially speed up inference. \u2022 Engineering efforts and inductive biases. LHHs only need some text-based (and even blackbox) explanations to guide the search. NCO requires the development of NN architectures, hyperparameters, and training strategies, where informed inductive biases and manual tuning are crucial to guarantee performance. ", "page_idx": 9}, {"type": "text", "text": "The choice of LLMs for ReEvo. Reflection is more effective when using capable LLMs, such as GPT-3.5 Turbo and its successors, as discussed by Shinn et al. [70]. Currently, many open-source LLMs are not capable enough to guarantee statistically significant improvement of reflections [101]. However, as LLM capabilities improve, we only expect this paradigm to get better over time [70]. One can refer to [101] for extended evaluations based on more LLMs and problem settings. ", "page_idx": 9}, {"type": "text", "text": "Benchmarking LHHs based on heuristic evaluations. We argue that benchmarking LHHs should prioritize the number of heuristic evaluations rather than LLM query budgets [101] due to the following reasons. ", "page_idx": 9}, {"type": "text", "text": "\u2022 Prioritizing scenarios where heuristic evaluations are costly leads to meaningful comparisons between LHHs. The performance of different LHH methods becomes nearly indistinguishable when a large number of heuristic evaluations are allowed [101].   \n\u2022 The overhead of LLM queries is negligible compared to real-world heuristic evaluations. LLM inference\u2014whether via local models or commercial APIs\u2014is highly cost-effective nowadays, with expenses averaging around $\\mathbb{S}0.0003$ per call in ReEvo using GPT-3.5-turbo, and response times of under one second on average for asynchronous API calls or batched inference. These costs are negligible compared to real-world heuristic evaluations, which, taking the toy EDA problem in this paper as an example, exceeds 20 minutes per evaluation.   \n\u2022 Benchmarking LHHs based on LLM inference costs presents additional challenges. Costs and processing time are driven by token usage rather than the number of queries, complicating the benchmarking process. For instance, EoH [47] requires heuristic descriptions before code generation, resulting in higher token usage. In contrast, although ReEvo involves more queries for reflections, it is more token-efficient when generating heuristics. ", "page_idx": 9}, {"type": "text", "text": "8 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This paper presents Language Hyper-Heuristics (LHHs), a rising variant of HHs, alongside Reflective Evolution (ReEvo), an evolutionary framework to elicit the power of LHHs. Applying ReEvo across five heterogeneous algorithmic types, six different COPs, and both white-box and black-box views of COPs, we yield state-of-the-art and competitive meta-heuristics, evolutionary algorithms, heuristics, and neural solvers. Comparing against SOTA LHH [47], ReEvo demonstrates superior sample efficiency. The development of LHHs is still at its emerging stage. It is promising to explore their broader applications, better dual-level optimization architectures, and theoretical foundations. We also expect ReEvo to enrich the landscape of evolutionary computation, by showing that genetic cues can be interpreted and verbalized using LLMs. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments and disclosure of funding ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "We are very grateful to Yuan Jiang, Yining Ma, Yifan Yang, AI4CO community, anonymous reviewers, and the area chair for valuable discussions and feedback. This work was supported by the National Natural Science Foundation of China (Grant No. 62276006); Wuhan East Lake High-Tech Development Zone National Comprehensive Experimental Base for Governance of Intelligent Society; the National Research Foundation, Singapore under its AI Singapore Programme (AISG Award No: AISG3-RP-2022-031); the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT) (No. RS-2024-00410082); the Institute of Information & Communications Technology Planning & Evaluation (IITP)-Innovative Human Resource Development for Local Intellectualization program grant funded by the Korea government (MSIT) (IITP-2024-RS-2024- 00436765). ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] F. Arnold and K. S\u00f6rensen. Knowledge-guided local search for the vehicle routing problem. Computers & Operations Research, 105:32\u201346, 2019.   \n[2] Y. Bengio, A. Lodi, and A. Prouvost. Machine learning for combinatorial optimization: a methodological tour d\u2019horizon. European Journal of Operational Research, 290(2):405\u2013421, 2021.   \n[3] F. Berto, C. Hua, J. Park, M. Kim, H. Kim, J. Son, H. Kim, J. Kim, and J. Park. RL4CO: a unified reinforcement learning for combinatorial optimization library. In NeurIPS 2023 Workshop: New Frontiers in Graph Learning, 2023.   \n[4] E. Brooks, L. A. Walls, R. Lewis, and S. Singh. Large language models can implement policy iteration. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[5] F. Bu, H. Jo, S. Y. Lee, S. Ahn, and K. Shin. Tackling prevalent conditions in unsupervised combinatorial optimization: Cardinality, minimum, covering, and more. arXiv preprint arXiv:2405.08424, 2024.   \n[6] J. Cai, P. Wang, S. Sun, and H. Dong. A dynamic space reduction ant colony optimization for capacitated vehicle routing problem. Soft Computing, 26(17):8745\u20138756, 2022.   \n[7] W. Chao, J. Zhao, L. Jiao, L. Li, F. Liu, and S. Yang. A match made in consistency heaven: when large language models meet evolutionary algorithms, 2024.   \n[8] A. Chen, D. M. Dohan, and D. R. So. Evoprompting: Language models for code-level neural architecture search. arXiv preprint arXiv:2302.14838, 2023.   \n[9] J. Chen, J. Wang, Z. Zhang, Z. Cao, T. Ye, and C. Siyuan. Efficient meta neural heuristic for multi-objective combinatorial optimization. In Advances in Neural Information Processing Systems, 2023.   \n[10] X. Chen, M. Lin, N. Sch\u00e4rli, and D. Zhou. Teaching large language models to self-debug. arXiv preprint arXiv:2304.05128, 2023.   \n[11] F. de Paulis, R. Cecchetti, C. Olivieri, and M. Buecker. Genetic algorithm pdn optimization based on minimum number of decoupling capacitors applied to arbitrary target impedance. In 2020 IEEE International Symposium on Electromagnetic Compatibility & Signal/Power Integrity (EMCSI), pages 428\u2013433. IEEE, 2020.   \n[12] T. Dernedde, D. Thyssens, S. Dittrich, M. Stubbemann, and L. Schmidt-Thieme. Moco: A learnable meta optimizer for combinatorial optimization. arXiv preprint arXiv:2402.04915, 2024.   \n[13] J. H. Drake, A. Kheiri, E. \u00d6zcan, and E. K. Burke. Recent advances in selection hyperheuristics. European Journal of Operational Research, 285(2):405\u2013428, 2020.   \n[14] D. Drakulic, S. Michel, F. Mai, A. Sors, and J.-M. Andreoli. Bq-nco: Bisimulation quotienting for efficient neural combinatorial optimization. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[15] G. Duflo, E. Kieffer, M. R. Brust, G. Danoy, and P. Bouvry. A gp hyper-heuristic approach for generating tsp heuristics. In 2019 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW), pages 521\u2013529. IEEE, 2019.   \n[16] I. Erdin and R. Achar. Multi-objective optimization of decoupling capacitors for placement and component value. IEEE Transactions on Components, Packaging and Manufacturing Technology, 9(10):1976\u20131983, 2019.   \n[17] S. Fidanova. Hybrid ant colony optimization algorithm for multiple knapsack problem. In 2020 5th IEEE International Conference on Recent Advances and Innovations in Engineering (ICRAIE), pages 1\u20135. IEEE, 2020.   \n[18] C. Gao, H. Shang, K. Xue, D. Li, and C. Qian. Towards generalizable neural solvers for vehicle routing problems via ensemble with transferrable local policy. arXiv preprint arXiv:2308.14104, 2023.   \n[19] F. Guerriero and F. P. Saccomanno. A hierarchical hyper-heuristic for the bin packing problem. Soft Computing, 27(18):12997\u201313010, 2023.   \n[20] Q. Guo, R. Wang, J. Guo, B. Li, K. Song, X. Tan, G. Liu, J. Bian, and Y. Yang. Connecting large language models with evolutionary algorithms yields powerful prompt optimizers. arXiv preprint arXiv:2309.08532, 2023.   \n[21] E. Hemberg, S. Moskal, and U.-M. O\u2019Reilly. Evolving code with a large language model, 2024.   \n[22] W. Hordijk. A measure of landscapes. Evolutionary computation, 4(4):335\u2013360, 1996.   \n[23] J. Hromkovi\u02c7c. Algorithmics for hard problems: introduction to combinatorial optimization, randomization, approximation, and heuristics. Springer Science & Business Media, 2013.   \n[24] B. Hudson, Q. Li, M. Malencia, and A. Prorok. Graph neural network guided local search for the traveling salesperson problem. In International Conference on Learning Representations, 2022.   \n[25] J. Ji, T. Qiu, B. Chen, B. Zhang, H. Lou, K. Wang, Y. Duan, Z. He, J. Zhou, Z. Zhang, et al. Ai alignment: A comprehensive survey. arXiv preprint arXiv:2310.19852, 2023.   \n[26] L. Jiang, L. Zhang, S. Tan, D. Li, C. Hwang, J. Fan, and E.-P. Li. A novel physics-assisted genetic algorithm for decoupling capacitor optimization. IEEE Transactions on Microwave Theory and Techniques, 2024.   \n[27] Y. Jiang, Z. Cao, Y. Wu, W. Song, and J. Zhang. Ensemble-based deep reinforcement learning for vehicle routing problems under distribution shift. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[28] Y. Jin, Y. Ding, X. Pan, K. He, L. Zhao, T. Qin, L. Song, and J. Bian. Pointerformer: Deep reinforced multi-pointer transformer for the traveling salesman problem. arXiv preprint arXiv:2304.09407, 2023.   \n[29] C. K. Joshi, Q. Cappart, L.-M. Rousseau, and T. Laurent. Learning the travelling salesperson problem requires rethinking generalization. arXiv preprint arXiv:2006.07054, 2020.   \n[30] H. Kim, H. Park, M. Kim, S. Choi, J. Kim, J. Park, S. Kim, S. Kim, and J. Kim. Deep reinforcement learning framework for optimal decoupling capacitor placement on general pdn with an arbitrary probing port. In 2021 IEEE 30th Conference on Electrical Performance of Electronic Packaging and Systems (EPEPS), pages 1\u20133. IEEE, 2021.   \n[31] H. Kim, M. Kim, F. Berto, J. Kim, and J. Park. Devformer: A symmetric transformer for context-aware device placement. In International Conference on Machine Learning, pages 16541\u201316566. PMLR, 2023.   \n[32] M. Kim, J. Park, et al. Learning collaborative policies to solve np-hard routing problems. Advances in Neural Information Processing Systems, 34:10418\u201310430, 2021.   \n[33] M. Kim, J. Park, and J. Park. Sym-nco: Leveraging symmetricity for neural combinatorial optimization. Advances in Neural Information Processing Systems, 35:1936\u20131949, 2022.   \n[34] M. Kim, T. Yun, E. Bengio, D. Zhang, Y. Bengio, S. Ahn, and J. Park. Local search gflownets. arXiv preprint arXiv:2310.02710, 2023.   \n[35] M. Kim, S. Choi, J. Son, H. Kim, J. Park, and Y. Bengio. Ant colony sampling with gflownets for combinatorial optimization. arXiv preprint arXiv:2403.07041, 2024.   \n[36] W. Kool, H. van Hoof, and M. Welling. Attention, learn to solve routing problems! In International Conference on Learning Representations, 2019.   \n[37] Y.-D. Kwon, J. Choo, B. Kim, I. Yoon, Y. Gwon, and S. Min. Pomo: Policy optimization with multiple optima for reinforcement learning. Advances in Neural Information Processing Systems, 33:21188\u201321198, 2020.   \n[38] J. Lehman, J. Gordon, S. Jain, K. Ndousse, C. Yeh, and K. O. Stanley. Evolution through large models. In Handbook of Evolutionary Machine Learning, pages 331\u2013366. Springer, 2023.   \n[39] J. Levine and F. Ducatelle. Ant colony optimization and local search for bin packing and cutting stock problems. Journal of the Operational Research society, 55(7):705\u2013716, 2004.   \n[40] P. Li, J. Hao, H. Tang, X. Fu, Y. Zheng, and K. Tang. Bridging evolutionary algorithms and reinforcement learning: A comprehensive survey, 2024.   \n[41] Y. Li, D. Choi, J. Chung, N. Kushman, J. Schrittwieser, R. Leblond, T. Eccles, J. Keeling, F. Gimeno, A. Dal Lago, et al. Competition-level code generation with alphacode. Science, 378(6624):1092\u20131097, 2022.   \n[42] Y. Li, J. Guo, R. Wang, and J. Yan. T2t: From distribution learning in training to gradient search in testing for combinatorial optimization. In Advances in Neural Information Processing Systems, 2023.   \n[43] J. Liang, W. Huang, F. Xia, P. Xu, K. Hausman, B. Ichter, P. Florence, and A. Zeng. Code as policies: Language model programs for embodied control. In 2023 IEEE International Conference on Robotics and Automation (ICRA), pages 9493\u20139500. IEEE, 2023.   \n[44] K. C. W. Lim, L.-P. Wong, and J. F. Chin. Simulated-annealing-based hyper-heuristic for flexible job-shop scheduling. Engineering Optimization, 55(10):1635\u20131651, 2023.   \n[45] F. Liu, X. Lin, Z. Wang, S. Yao, X. Tong, M. Yuan, and Q. Zhang. Large language model for multi-objective evolutionary optimization. arXiv preprint arXiv:2310.12541, 2023.   \n[46] F. Liu, X. Tong, M. Yuan, and Q. Zhang. Algorithm evolution using large language model. arXiv preprint arXiv:2311.15249, 2023.   \n[47] F. Liu, X. Tong, M. Yuan, X. Lin, F. Luo, Z. Wang, Z. Lu, and Q. Zhang. Evolution of heuristics: Towards efficient automatic algorithm design using large language mode. In ICML, 2024. URL https://arxiv.org/abs/2401.02051.   \n[48] S. Liu, C. Chen, X. Qu, K. Tang, and Y.-S. Ong. Large language models as evolutionary optimizers. arXiv preprint arXiv:2310.19046, 2023.   \n[49] V. Liventsev, A. Grishina, A. H\u00e4rm\u00e4, and L. Moonen. Fully autonomous programming with large language models. arXiv preprint arXiv:2304.10423, 2023.   \n[50] Y. Lu, X. Liu, Z. Du, Y. Gao, and G. Wang. Medkpl: a heterogeneous knowledge enhanced prompt learning framework for transferable diagnosis. Journal of Biomedical Informatics, page 104417, 2023.   \n[51] F. Luo, X. Lin, F. Liu, Q. Zhang, and Z. Wang. Neural combinatorial optimization with heavy decoder: Toward large scale generalization. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[52] Y. Ma, Z. Cao, and Y. M. Chee. Learning to search feasible and infeasible regions of routing problems with flexible neural k-opt. In Advances in Neural Information Processing Systems, 2023.   \n[53] Y. J. Ma, W. Liang, G. Wang, D.-A. Huang, O. Bastani, D. Jayaraman, Y. Zhu, L. Fan, and A. Anandkumar. Eureka: Human-level reward design via coding large language models. arXiv preprint arXiv:2310.12931, 2023.   \n[54] Z. Ma, H. Guo, J. Chen, Z. Li, G. Peng, Y.-J. Gong, Y. Ma, and Z. Cao. Metabox: A benchmark platform for meta-black-box optimization with reinforcement learning. In Advances in Neural Information Processing Systems, volume 36, 2023.   \n[55] A. Madaan, A. Shypula, U. Alon, M. Hashemi, P. Ranganathan, Y. Yang, G. Neubig, and A. Yazdanbakhsh. Learning performance-improving code edits. arXiv preprint arXiv:2302.07867, 2023.   \n[56] A. Madaan, N. Tandon, P. Gupta, S. Hallinan, L. Gao, S. Wiegreffe, U. Alon, N. Dziri, S. Prabhumoye, Y. Yang, et al. Self-refine: Iterative refinement with self-feedback. arXiv preprint arXiv:2303.17651, 2023.   \n[57] E. Meyerson, M. J. Nelson, H. Bradley, A. Gaier, A. Moradi, A. K. Hoover, and J. Lehman. Language model crossover: Variation through few-shot prompting. arXiv preprint arXiv:2302.12170, 2023.   \n[58] B. Mohammad Hasani Zade, N. Mansouri, and M. M. Javidi. A new hyper-heuristic based on ant lion optimizer and tabu search algorithm for replica management in cloud environment. Artificial Intelligence Review, 56(9):9837\u20139947, 2023.   \n[59] G. Ochoa, R. Qu, and E. K. Burke. Analyzing the landscape of a graph based hyper-heuristic for timetabling problems. In Proceedings of the 11th Annual conference on Genetic and evolutionary computation, pages 341\u2013348, 2009.   \n[60] H. Park, M. Kim, S. Kim, S. Jeong, S. Kim, H. Kang, K. Kim, K. Son, G. Park, K. Son, et al. Policy gradient reinforcement learning-based optimal decoupling capacitor design method for 2.5-d/3-d ics using transformer network. In 2020 IEEE Electrical Design of Advanced Packaging and Systems (EDAPS), pages 1\u20133. IEEE, 2020.   \n[61] H. Park, J. Park, S. Kim, K. Cho, D. Lho, S. Jeong, S. Park, G. Park, B. Sim, S. Kim, et al. Deep reinforcement learning-based optimal decoupling capacitor design method for silicon interposer-based 2.5-d/3-d ics. IEEE Transactions on Components, Packaging and Manufacturing Technology, 10(3):467\u2013478, 2020.   \n[62] H. Park, M. Kim, S. Kim, K. Kim, H. Kim, T. Shin, K. Son, B. Sim, S. Kim, S. Jeong, et al. Transformer network-based reinforcement learning method for power distribution network (pdn) optimization of high bandwidth memory (hbm). IEEE Transactions on Microwave Theory and Techniques, 70(11):4772\u20134786, 2022.   \n[63] H. Park, H. Kim, H. Kim, J. Park, S. Choi, J. Kim, K. Son, H. Suh, T. Kim, J. Ahn, et al. Versatile genetic algorithm-bayesian optimization (ga-bo) bi-level optimization for decoupling capacitor placement. In 2023 IEEE 32nd Conference on Electrical Performance of Electronic Packaging and Systems (EPEPS), pages 1\u20133. IEEE, 2023.   \n[64] N. Pillay and R. Qu. Hyper-heuristics: theory and applications. Springer, 2018.   \n[65] M. Popovich, A. Mezhiba, and E. G. Friedman. Power distribution networks with on-chip decoupling capacitors. Springer Science & Business Media, 2007.   \n[66] R. Pryzant, D. Iter, J. Li, Y. T. Lee, C. Zhu, and M. Zeng. Automatic prompt optimization with\" gradient descent\" and beam search. arXiv preprint arXiv:2305.03495, 2023.   \n[67] G. Reinelt. Tsplib\u2014a traveling salesman problem library. ORSA journal on computing, 3(4): 376\u2013384, 1991.   \n[68] B. Romera-Paredes, M. Barekatain, A. Novikov, M. Balog, M. P. Kumar, E. Dupont, F. J. Ruiz, J. S. Ellenberg, P. Wang, O. Fawzi, et al. Mathematical discoveries from program search with large language models. Nature, pages 1\u20133, 2023.   \n[69] K. Shibasaka, K. Kanazawa, and M. Yasunaga. Decoupling-capacitor allocation problem solved by genetic algorithm. In 2013 IEEE Electrical Design of Advanced Packaging Systems Symposium (EDAPS), pages 225\u2013228. IEEE, 2013.   \n[70] N. Shinn, F. Cassano, A. Gopinath, K. R. Narasimhan, and S. Yao. Reflexion: Language agents with verbal reinforcement learning. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[71] R. Skinderowicz. Improving ant colony optimization efficiency for solving large tsp instances. Applied Soft Computing, 120:108653, 2022.   \n[72] S. Sohrabi, K. Ziarati, and M. Keshtkaran. Acs-ophs: Ant colony system for the orienteering problem with hotel selection. EURO Journal on Transportation and Logistics, 10:100036, 2021.   \n[73] J. Son, M. Kim, S. Choi, and J. Park. Solving np-hard min-max routing problems as sequential generation with equity context. arXiv preprint arXiv:2306.02689, 2023.   \n[74] X. Song, Y. Tian, R. T. Lange, C. Lee, Y. Tang, and Y. Chen. Position paper: Leveraging foundational models for black-box optimization: Benefits, challenges, and future directions. arXiv preprint arXiv:2405.03547, 2024.   \n[75] J. Sui, S. Ding, B. Xia, R. Liu, and D. Bu. Neuralgls: learning to guide local search with graph convolutional network for the traveling salesman problem. Neural Computing and Applications, pages 1\u201320, 2023.   \n[76] Z. Sun and Y. Yang. Difusco: Graph-based diffusion solvers for combinatorial optimization. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[77] H. Tang, F. Berto, Z. Ma, C. Hua, K. Ahn, and J. Park. Himap: Learning heuristics-informed policies for large-scale multi-agent pathfinding. arXiv preprint arXiv:2402.15546, 2024.   \n[78] C. Voudouris and E. Tsang. Guided local search and its application to the traveling salesman problem. European Journal of Operational Research, 113(2):469\u2013499, Mar. 1999. ISSN 03772217. doi: 10.1016/S0377-2217(98)00099-X.   \n[79] C. Wang, Z. Yu, S. McAleer, T. Yu, and Y. Yang. Asp: Learn a universal neural solver! IEEE Transactions on Pattern Analysis and Machine Intelligence, 2024.   \n[80] H. Wang, S. Feng, T. He, Z. Tan, X. Han, and Y. Tsvetkov. Can language models solve graph problems in natural language? arXiv preprint arXiv:2305.10037, 2023.   \n[81] L. Wang, Y. Ling, Z. Yuan, M. Shridhar, C. Bao, Y. Qin, B. Wang, H. Xu, and X. Wang. Gensim: Generating robotic simulation tasks via large language models. arXiv preprint arXiv:2310.01361, 2023.   \n[82] L. Wang, C. Ma, X. Feng, Z. Zhang, H. Yang, J. Zhang, Z. Chen, J. Tang, X. Chen, Y. Lin, et al. A survey on large language model based autonomous agents. arXiv preprint arXiv:2308.11432, 2023.   \n[83] X. Wang, C. Li, Z. Wang, F. Bai, H. Luo, J. Zhang, N. Jojic, E. P. Xing, and Z. Hu. Promptagent: Strategic planning with language models enables expert-level prompt optimization. arXiv preprint arXiv:2310.16427, 2023.   \n[84] Y. Wang, Z. Liu, J. Zhang, W. Yao, S. Heinecke, and P. S. Yu. Drdt: Dynamic reflection with divergent thinking for llm-based sequential recommendation. arXiv preprint arXiv:2312.11336, 2023. [85] Y. Wang, Y.-H. Jia, W.-N. Chen, and Y. Mei. Distance-aware attention reshaping: Enhance generalization of neural solver for large-scale vehicle routing problems. arXiv preprint arXiv:2401.06979, 2024. [86] E. Weinberger. Correlated and uncorrelated fitness landscapes and how to tell the difference. Biological cybernetics, 63(5):325\u2013336, 1990. [87] X. Wu, S. hao Wu, J. Wu, L. Feng, and K. C. Tan. Evolutionary computation in the era of large language model: Survey and roadmap, 2024. [88] Z. Xi, W. Chen, X. Guo, W. He, Y. Ding, B. Hong, M. Zhang, J. Wang, S. Jin, E. Zhou, et al. The rise and potential of large language model based agents: A survey. arXiv preprint arXiv:2309.07864, 2023. [89] Y. Xiao, D. Wang, H. Chen, B. Li, W. Pang, X. Wu, H. Li, D. Xu, Y. Liang, and Y. Zhou. Reinforcement learning-based non-autoregressive solver for traveling salesman problems. arXiv preprint arXiv:2308.00560, 2023. [90] Y. Xiao, D. Wang, B. Li, M. Wang, X. Wu, C. Zhou, and Y. Zhou. Distilling autoregressive models to obtain high-performance non-autoregressive solvers for vehicle routing problems with faster inference speed. In Proceedings of the AAAI Conference on Artificial Intelligence, 2024. [91] C. Yang, X. Wang, Y. Lu, H. Liu, Q. V. Le, D. Zhou, and X. Chen. Large language models as optimizers. arXiv preprint arXiv:2309.03409, 2023. [92] J. Yang, A. Prabhakar, K. Narasimhan, and S. Yao. Intercode: Standardizing and benchmarking interactive coding with execution feedback. arXiv preprint arXiv:2306.14898, 2023. [93] Y. Yang and A. Whinston. A survey on reinforcement learning for combinatorial optimization. In 2023 IEEE World Conference on Applied Intelligence and Computing (AIC), pages 131\u2013136. IEEE, 2023. [94] H. Ye, J. Wang, Z. Cao, H. Liang, and Y. Li. Deepaco: Neural-enhanced ant systems for combinatorial optimization. In Advances in Neural Information Processing Systems, 2023. [95] H. Ye, J. Wang, H. Liang, Z. Cao, Y. Li, and F. Li. Glop: Learning global partition and local construction for solving large-scale routing problems in real-time. In Proceedings of the AAAI Conference on Artificial Intelligence, 2024. [96] D. Zambrano-Gutierrez, J. Cruz-Duarte, and H. Casta\u00f1eda. Automatic hyper-heuristic to generate heuristic-based adaptive sliding mode controller tuners for buck-boost converters. In Proceedings of the Genetic and Evolutionary Computation Conference, pages 1482\u20131489, 2023. [97] R. S. Zebulum, M. A. Pacheco, and M. M. B. Vellasco. Evolutionary electronics: automatic design of electronic circuits and systems by genetic algorithms. CRC press, 2018. [98] E. Zelikman, E. Lorch, L. Mackey, and A. T. Kalai. Self-taught optimizer (stop): Recursively self-improving code generation. arXiv preprint arXiv:2310.02304, 2023. [99] C. Zhang, K. Yang, S. Hu, Z. Wang, G. Li, Y. Sun, C. Zhang, Z. Zhang, A. Liu, S.-C. Zhu, et al. Proagent: Building proactive cooperative ai with la rge language models. arXiv preprint arXiv:2308.11339, 2023.   \n[100] L. Zhang, W. Huang, J. Juang, H. Lin, B.-C. Tseng, and C. Hwang. An enhanced deep reinforcement learning algorithm for decoupling capacitor selection in power distribution network design. In 2020 IEEE International Symposium on Electromagnetic Compatibility & Signal/Power Integrity (EMCSI), pages 245\u2013250. IEEE, 2020.   \n[101] R. Zhang, F. Liu, X. Lin, Z. Wang, Z. Lu, and Q. Zhang. Understanding the importance of evolutionary search in automated heuristic design with large language models. In International Conference on Parallel Problem Solving from Nature, pages 185\u2013202. Springer, 2024.   \n[102] S. Zhang, Z. Chen, Y. Shen, M. Ding, J. B. Tenenbaum, and C. Gan. Planning with large language models for code generation. In The Eleventh International Conference on Learning Representations, 2022.   \n[103] Z.-Q. Zhang, F.-C. Wu, B. Qian, R. Hu, L. Wang, and H.-P. Jin. A q-learning-based hyperheuristic evolutionary algorithm for the distributed flexible job-shop scheduling problem with crane transportation. Expert Systems with Applications, 234:121050, 2023.   \n[104] Q. Zhao, Q. Duan, B. Yan, S. Cheng, and Y. Shi. A survey on automated design of metaheuristic algorithms. arXiv preprint arXiv:2303.06532, 2023.   \n[105] W. X. Zhao, K. Zhou, J. Li, T. Tang, X. Wang, Y. Hou, Y. Min, B. Zhang, J. Zhang, Z. Dong, et al. A survey of large language models. arXiv preprint arXiv:2303.18223, 2023.   \n[106] T. Zhong, Z. Liu, Y. Pan, Y. Zhang, Y. Zhou, S. Liang, Z. Wu, Y. Lyu, P. Shu, X. Yu, et al. Evaluation of openai o1: Opportunities and challenges of agi. arXiv preprint arXiv:2409.18486, 2024.   \n[107] J. Zhou, Y. Wu, Z. Cao, W. Song, J. Zhang, and Z. Chen. Learning large neighborhood search for vehicle routing in airport ground handling. IEEE Transactions on Knowledge and Data Engineering, 2023.   \n[108] Y. Zhou, A. I. Muresanu, Z. Han, K. Paster, S. Pitis, H. Chan, and J. Ba. Large language models are human-level prompt engineers. arXiv preprint arXiv:2211.01910, 2022.   \n[109] L. Zhu, Y. Zhou, S. Sun, and Q. Su. Surgical cases assignment problem using an efficient genetic programming hyper-heuristic. Computers & Industrial Engineering, 178:109102, 2023. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "A Extended discussions", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "A.1 Comparisons with EoH ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Our work is developed concurrently with Evolution of Heuristics (EoH) [47], which establishes the groundwork for this emerging field. Nonetheless, our work extends the boundaries of LHH through three primary lenses: (1) the search algorithm, (2) the downstream CO applications, and (3) the evaluation methodologies. ", "page_idx": 17}, {"type": "text", "text": "\u2022 Search Algorithm: We introduce the Reflective Evolution, demonstrating its superior sample efficiency. \u2022 Applications: Our work broadens the scope by applying LHH to five heterogeneous algorithmic types and six different COPs, advancing the state-of-the-art in GLS, EDA, ACO, and NCO. \u2022 Evaluation Methodologies: We employ fitness landscape analysis to explore the underlying mechanisms of our proposed method; we establish black-box experimental settings to ensure reliable comparisons and practical relevance to real-world applications. ", "page_idx": 17}, {"type": "text", "text": "A.2 Extended applications ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "ReEvo is generally applicable to other string-based optimization scenarios [57] as long as reflecting the relative performance of strings is meaningful. Preliminary experiments on prompt tuning verify the advantage of ReEvo over random search and vanilla genetic programming. Furthermore, we identify in reasoning-capable LLM approaches released after ReEvo such as OpenAI o1 [106] an interesting avenue of future works and experimentation that could yield even better sample efficiency and performance. ", "page_idx": 17}, {"type": "text", "text": "B Prompts ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "We gather prompts used for ReEvo in this section. Our prompt structure is flexible and extensible. To adapt ReEvo to a new problem setting, one only needs to define its problem description, function description, and function signature. ", "page_idx": 17}, {"type": "text", "text": "B.1 Common prompts ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "The prompt formats are given below. They are used for all COP settings. ", "page_idx": 17}, {"type": "text", "text": "You are an expert in the domain of optimization heuristics . Your task is to design heuristics that can effectively solve optimization problems. Your response outputs Python code and nothing else . Format your code as a Python code string : \"\u2018\u2018\u2018 python ... \u2018\u2018\u2018\" ", "page_idx": 17}, {"type": "text", "text": "Prompt 1: System prompt for generator LLM. ", "page_idx": 17}, {"type": "image", "img_path": "483IPG0HWL/tmp/0247ba7c07c96e8faa98e85d78c558e8da9c5680b90014b6c3637038eeeb6d56.jpg", "img_caption": ["Prompt 4: User prompt for population initialization. ", "Prompt 5: User prompt for short-term reflection. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "The user prompt used for short-term reflection in black-box COPs is slightly different from the one used for white-box COPs. We explicitly ask the reflector LLM to infer the problem settings and to give hints about how the node and edge attributes correlate with the black-box objective value. ", "page_idx": 18}, {"type": "image", "img_path": "483IPG0HWL/tmp/5a46e5bb60f9558285463b4bb02b132b8ab7cd69d0cb0a4d0191d9b2e25043cf.jpg", "img_caption": ["Prompt 6: User prompt for short-term reflection on black-box COPs. "], "img_footnote": [], "page_idx": 18}, {"type": "image", "img_path": "483IPG0HWL/tmp/0566298103bb51cf3b42266e83e703591d70323202fa6f76fa8884ca5728df42.jpg", "img_caption": ["Prompt 7: User prompt for crossover. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "The function signature variables here are used to adjust function names with their versions, which is similar to the design in [68]. For example, when designing \u201cheuristics\u201d, the worse code is named \u201cheuristics_v0\u201d while the better code \u201cheuristics_v1\u201d. In Prompt 9, the elitist code is named \u201cheuristic_v1\u201d. ", "page_idx": 18}, {"type": "image", "img_path": "483IPG0HWL/tmp/e0d71c12d8433ec5c45625992ce69850bbca1f6418efc724bb9b8866c4810741.jpg", "img_caption": ["Prompt 8: User prompt for long-term reflection. "], "img_footnote": [], "page_idx": 18}, {"type": "image", "img_path": "483IPG0HWL/tmp/e03b21e36e59c0318f41fbafac725a582b885240cf4e9acdf61d97a7e738493f.jpg", "img_caption": ["Prompt 9: User prompt for elitist mutation. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "B.2 Problem-specific prompt components ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Problem-specific prompt components are given below. ", "page_idx": 19}, {"type": "text", "text": "\u2022 Problem descriptions of all COP settings are given in Table 6.   \n\u2022 The function descriptions of all COP settings are presented in Table 7. The descriptions crafted for black-box settings avoid disclosing any information that could link to the original COP.   \n\u2022 The function signatures are gathered in Prompt 10.   \n\u2022 The seed functions are shown in Prompt 11. The seed function used for TSP_constructive is drawn from [46]. The seed functions used for black-box ACO settings are expert-designed heuristics [71, 6, 72, 17, 39], while those used for while-box ACO settings are trivial all-ones matrices.   \n\u2022 The initial long-term reflections for some COP settings are presented in Prompt 12, while are left empty for the others. ", "page_idx": 19}, {"type": "image", "img_path": "483IPG0HWL/tmp/3e66fc3d8e4e0916465f6973d0ffca64d4484a71837301e94ddba7c68936b924.jpg", "img_caption": [], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Prompt 10: Function signatures used in ReEvo. ", "text_level": 1, "page_idx": 20}, {"type": "table", "img_path": "483IPG0HWL/tmp/25922b12932bbf90cbee97cb8ef9795c7f231e2271f500409f7a5580f5baac03.jpg", "table_caption": [], "table_footnote": [], "page_idx": 20}, {"type": "image", "img_path": "483IPG0HWL/tmp/8d2ac532de8ea08bfc63ccee1014f2cd36d29aea61526115e39ed269f5a931d5.jpg", "img_caption": ["Prompt 11: Seed heuristics used for ReEvo. ", "Prompt 12: Initial long-term reflections "], "img_footnote": [], "page_idx": 21}, {"type": "table", "img_path": "483IPG0HWL/tmp/e1378c12032b6a4a905797922754623732b51e89447099a377ed9fbbcf25011a.jpg", "table_caption": [], "table_footnote": [], "page_idx": 21}, {"type": "table", "img_path": "483IPG0HWL/tmp/d54b3180e1af426ccf35fe7e6cab878da6cff228b51c601064c69529397fb00b.jpg", "table_caption": ["Table 7: Function descriptions used in prompts. "], "table_footnote": [], "page_idx": 21}, {"type": "table", "img_path": "483IPG0HWL/tmp/0e9417b2352602fc741f4444c2dc2c514d8bb9a6659127a8520f7378e4927c45.jpg", "table_caption": [], "table_footnote": [], "page_idx": 22}, {"type": "table", "img_path": "483IPG0HWL/tmp/6e47dd61848d12960f4599e7f7a8a3f9f390eebaf697e72ce63b995d6df4f17e.jpg", "table_caption": ["Table 7 continued from previous page "], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "C Detailed experimental setup ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Hyperparameters for ReEvo. Unless otherwise stated, we adopt the parameters in Table 8 for ReEvo runs.   \nDuring initialization, the LLM temperature is added by 0.3 to diversify the initial population. ", "page_idx": 23}, {"type": "text", "text": "Heuristic generation pipeline. We perform 3 ReEvo runs for each COP setting. Unless otherwise stated, the heuristic with the best validation performance is selected for final testing on 64 held-out instances. ", "page_idx": 23}, {"type": "text", "text": "Cost and hardware. When the hardware permits, heuristics from the same generation are generated, reflected upon, and evaluated in parallel. The duration of a single ReEvo run can range from approximately two minutes to hours, depending on the evaluation runtime and the hardware used. Each run costs about $\\mathbb{S}0.06$ when using GPT3.5 Turbo. When conducting runtime comparisons, we employ a single core of an AMD EPYC 7742 CPU and an NVIDIA GeForce RTX 3090 GPU. ", "page_idx": 23}, {"type": "text", "text": "C.1 Penalty heuristics for Guided Local Search ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Guided Local Search (GLS) explores solution space through local search operations under the guidance of heuristics. We aim to use ReEvo to find the most effective heuristics to enhance GLS. In our experimental setup, we employed a variation of the classical GLS algorithm [78] that incorporated perturbation phases [1], wherein edges with higher heuristic values will be prioritized for penalization. In the training phase, we evaluate each heuristic with TSP200 using 1200 GLS iterations. For generating results in Table 1, we use the parameters in Table 9. The iterations stop when reaching the predefined threshold or when the optimality gap is reduced to zero. ", "page_idx": 23}, {"type": "text", "text": "C.2 Heuristic measures for Ant Colony Optimization ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Ant Colony Optimization is an evolutionary algorithm that interleaves solution samplings with the update of pheromone trails. Stochastic solution samplings are biased toward more promising solution space by heuristics, and ReEvo searches for the best of such heuristics. For more details, please refer to [94]. ", "page_idx": 23}, {"type": "text", "text": "Table 10 presents the ACO parameters used for heuristic evaluations during LHH evolution. They are adjusted to maximize ACO performance while ensuring efficient evaluations. Instance generations and ACO implementations follow Ye et al. [94]. To conduct tests in Fig. 2, we increase the number of iterations to ensure full convergence. ", "page_idx": 23}, {"type": "text", "text": "C.3 Genetic operators for Electronic Design Automation ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Here we briefly introduce the expert-design GA for DPP. Further details can be found in [31, Appendix B]. ", "page_idx": 23}, {"type": "text", "text": "The GA designed by Kim et al. [31] is utilized as an expert policy to collect expert guiding labels for imitation learning. The GA is a widely used search heuristic method for the Decoupling Capacitor Placement Problem (DPP), which aims to find the optimal placement of a given number of decoupling capacitors (decaps) on a Power Distribution Network (PDN) with a probing port and 0-15 keep-out regions to best suppress the impedance of the probing port. ", "page_idx": 23}, {"type": "text", "text": "Table 6: Problem descriptions used in prompts. ", "page_idx": 24}, {"type": "table", "img_path": "483IPG0HWL/tmp/1419c4e1893b653642f1bc0f4ea06f35e75607cd1964c7616c2917ba7d401d60.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "table", "img_path": "483IPG0HWL/tmp/5e1e8a7bb1f862bbe490a00ff230a57c0bc7ef68c30a4954f82b85e2460eb1d4.jpg", "table_caption": ["Table 8: Parameters of ReEvo. "], "table_footnote": [], "page_idx": 25}, {"type": "table", "img_path": "483IPG0HWL/tmp/e5fce0b84e22763485a8481ef034a64bef65609b4d110881f25c667b1f3ba9c3.jpg", "table_caption": ["Table 9: GLS parameters used for the evaluations in Table 1. "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "\u2022 Encoding and initialization. The GA generates an initial population randomly, and each solution consists of a set of numbers representing decap locations on the PDN. The population size is fixed to 20, and each solution is evaluated and sorted based on its objective value.   \n\u2022 Elitism. After the initial population is formulated, the top-performing solutions (elite population) are kept for the next generation. The size of the elite population is predefined as 4.   \n\u2022 Selection. The better half of the population is selected for crossover.   \n\u2022 Crossover. This process generates new population candidates by dividing each solution from the selected population in half and performing random crossover.   \n\u2022 Mutation. After crossover, solutions with overlapping numbers are replaced with random numbers while avoiding locations of the probing port and keep-out regions. ", "page_idx": 25}, {"type": "text", "text": "In this work, we sequentially optimize the crossover and mutation operators using ReEvo. When optimizing crossover, all other components of the GA pipeline remain identical to the expert-designed one. When optimizing mutation, we additionally set the crossover operator to the best one previously generated by ReEvo. ", "page_idx": 25}, {"type": "text", "text": "During training, we evaluate $F$ on three training instances randomly generated following [31, Appendix A.5]. The evaluation on each instance runs $10\\,\\mathrm{GA}$ iterations and returns the objective value of the best-performing solution. For the final test in Fig. 3, we utilize the same test dataset as in [31]. ", "page_idx": 25}, {"type": "text", "text": "C.4 Attention reshaping for Neural Combinatorial Optimization ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "For autoregressive NCO solvers, e.g. POMO [37] and LEHD [51], the last decoder layer outputs the logits of the next node to visit. Then, the attention-reshaping heuristic values are added to the logits before masking, logit clipping, and softmax operation. ", "page_idx": 25}, {"type": "text", "text": "For the autoregressive NCO models with a heavy encoder and a light decoder, the last decoder layer computes logits using [36] ", "page_idx": 25}, {"type": "equation", "text": "$$\nu_{(c)j}=\\left\\{C\\cdot\\operatorname{tanh}\\left(\\frac{\\mathbf{q}_{(c)}^{T}\\mathbf{k}_{j}}{\\sqrt{d_{k}}}\\right)\\quad\\mathrm{if~}j\\neq\\pi_{t^{\\prime}}\\quad\\forall t^{\\prime}<t\n$$", "text_format": "latex", "page_idx": 25}, {"type": "table", "img_path": "483IPG0HWL/tmp/5a84ba5314056d59822a1f23748e3fd6ff2d68e33ac17b9bef5a2987447ac9d5.jpg", "table_caption": ["Table 10: ACO parameters used for heuristic evaluations during training. "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "Here, $u_{(c)j}$ is the compatibility between current context and node $j,C$ a constant for logit clipping, $\\mathbf{q}_{(c)}$ the query embedding of the current context, $\\mathbf{k}_{j}$ the key embedding of node $j$ , and $d_{\\mathrm{k}}$ the query/key dimensionality. For each node $j$ already visited, i.e. $j=\\bar{\\pi_{t^{\\prime}}},\\bar{\\exists}t^{\\prime}<t,u_{(c}$ $u_{(c)j}$ is masked. ", "page_idx": 26}, {"type": "text", "text": "We reshape the attention scores by using ", "page_idx": 26}, {"type": "equation", "text": "$$\nu_{(c)j}=\\left\\{\\begin{array}{l l}{C\\cdot\\operatorname{tanh}\\left(\\frac{\\mathbf{q}_{(c)}^{T}\\mathbf{k}_{j}+h_{(c)j}}{\\sqrt{d_{k}}}\\right)}&{\\mathrm{if~}j\\neq\\pi_{t^{\\prime}}\\quad\\forall t^{\\prime}<t}\\\\ {-\\infty}&{\\mathrm{otherwise}.}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 26}, {"type": "text", "text": "$h_{(c)j}$ is computed via attention-reshaping heuristics. In practice, for TSP and CVRP, $h_{(c)j}=\\mathbf{H}_{c,j}$ , where $\\mathbf{H}$ is the heuristic matrix and $c$ is simplified to the current node. ", "page_idx": 26}, {"type": "text", "text": "For the autoregressive NCO models with a light encoder and a heavy decoder [51], or only a decoder [14], the last decoder layer computes logits using: ", "page_idx": 26}, {"type": "equation", "text": "$$\nu_{i}=W_{o}\\mathbf{h}_{i},\n$$", "text_format": "latex", "page_idx": 26}, {"type": "text", "text": "where $W_{o}$ is a learnable matrix at the output layer and node $i$ is among the available nodes. We reshape the logits with ", "page_idx": 26}, {"type": "equation", "text": "$$\nu_{i}=W_{o}\\mathbf{h}_{i}+\\mathbf{H}_{c,i},\n$$", "text_format": "latex", "page_idx": 26}, {"type": "text", "text": "where node $c$ is the current node. ", "page_idx": 26}, {"type": "text", "text": "For evaluations in Table 3, we generalize the models trained on TSP100 and CVRP100 to larger instances with 200, 500, and 1000 nodes. For TSP, we apply the same ReEvo-generated heuristic across all sizes, whereas for the CVRP, we use distinct heuristics for each size due to the observed variations in desirable heuristics. ", "page_idx": 26}, {"type": "text", "text": "D Benchmark problems ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "D.1 Traveling Salesman Problem ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Definition. The Traveling Salesman Problem (TSP) is a classic optimization challenge that seeks the shortest possible route for a salesman to visit each city in a list exactly once and return to the origin city. ", "page_idx": 26}, {"type": "text", "text": "Instance generation. Nodes are sampled uniformly from $[0,1]^{2}$ unit for the synthetic datasets. ", "page_idx": 26}, {"type": "text", "text": "D.2 Capacitated Vehicle Routing Problem ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Definition. The Capacitated Vehicle Routing Problem (CVRP) extends the TSP by adding constraints on vehicle capacity. Each vehicle can carry a limited load, and the objective is to minimize the total distance traveled while delivering goods to various locations. ", "page_idx": 26}, {"type": "text", "text": "Instance generation. For $\\S\\ 5.2$ , We follow DeepACO [94]. Customer locations are sampled uniformly in the unit square; customer demands are sampled from the discrete set $\\{1,2,\\ldots,9\\}$ ; the capacity of each vehicle is set to 50; the depot is located at the center of the unit square. For $\\S\\ 5.5$ , we use the test instances provided by LEHD [51]. ", "page_idx": 26}, {"type": "text", "text": "D.3 Orienteering Problem ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Definition. In the Orienteering Problem (OP), the goal is to maximize the total score collected by visiting nodes while subject to a maximum tour length constraint. ", "page_idx": 26}, {"type": "text", "text": "Instance generation. The generation of synthetic datasets aligns with DeepACO [94]. We uniformly sample the nodes, including the depot node, from the unit $[0,1]^{2}$ . We use a challenging prize distribution [36]: $\\begin{array}{r}{p_{i}=(1+\\left\\lfloor99\\cdot\\frac{d_{0i}}{\\operatorname*{max}_{j=1}^{n}d_{0j}}\\right\\rfloor)/100}\\end{array}$ , where $d_{0i}$ is the distance between the depot and node $i$ . The maximum length constraint is also designed to be challenging. As suggested by Kool et al. [36], we set it to 3, 4, 5, 8, and 12 for OP50, OP100, OP200, OP500, and OP1000, respectively. ", "page_idx": 26}, {"type": "text", "text": "D.4 Multiple Knapsack Problem ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Definition. The Multiple Knapsack Problem (MKP) involves distributing a set of items, each with a given weight and value, among multiple knapsacks to maximize the total value without exceeding the capacity of any knapsack. ", "page_idx": 26}, {"type": "text", "text": "Instance generation. Instance generation follows DeepACO [94]. The values and weights are uniformly sampled from [0, 1]. To make all instances well-stated, we uniformly sample $c_{i}$ from $\\bar{(\\operatorname*{max}_{j}\\bar{w}_{i j}},\\sum_{j}w_{i j})$ . ", "page_idx": 27}, {"type": "text", "text": "D.5 Bin Packing Problem ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Definition. The Bin Packing Problem requires packing objects of different volumes into a finite number of bins or containers of a fixed volume in a way that minimizes the number of bins used. It is widely applicable in manufacturing, shipping, and storage optimization. ", "page_idx": 27}, {"type": "text", "text": "Instance generation. Following Levine and Ducatelle [39], we set the bin capacity to 150, and item sizes are uniformly sampled between 20 and 100. ", "page_idx": 27}, {"type": "text", "text": "D.6 Decap Placement Problem ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Definition. The Decap Placement Problem (DPP) is a critical hardware design optimization issue that involves finding the optimal placement of decoupling capacitors (decap) within a power distribution network (PDN) to enhance power integrity (PI) [65, 69, 16, 63]. Decoupling capacitors are hardware components that help reduce power noise and ensure a stable supply of power to the operating integrated circuits within hardware devices such as CPUs, GPUs, and AI accelerators [65]. The DPP is formulated as a black-box contextual optimization problem, where the goal is to determine the best positions for a set of decaps to maximize the PI objective. This objective is contextualized by the target hardware\u2019s feature vectors, with the constraint of a limited number of decaps. Interested readers can refer to [31] for more details. ", "page_idx": 27}, {"type": "text", "text": "Instance generation. $10\\times10$ PDN instances are used. We generate training and validation instances following Kim et al. [31]. The test instances are directly drawn from [31]. ", "page_idx": 27}, {"type": "text", "text": "E Generated heuristics ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "This section presents the best heuristics generated by ReEvo for all problem settings. ", "page_idx": 27}, {"type": "image", "img_path": "483IPG0HWL/tmp/de212f148853babd3482975bed0ee4679a1837cc6d4664bd965bde464ade1fe1.jpg", "img_caption": [], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "Heuristic 1: The best ReEvo-generated heuristic for TSP_NCO_POMO. ", "page_idx": 27}, {"type": "image", "img_path": "483IPG0HWL/tmp/53359253911d161d1961749c23bdb5c8014d8d50157c56193229ec5078ee169b.jpg", "img_caption": ["Heuristic 2: The best ReEvo-generated heuristic for TSP_NCO_LEHD. "], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "Heuristic 3: The best ReEvo-generated heuristics for CVRP_NCO_POMO. ", "text_level": 1, "page_idx": 28}, {"type": "image", "img_path": "483IPG0HWL/tmp/ef929dd868ea90b3d28a72b911194b7234659a75b9d39c754fc41634b63a125c.jpg", "img_caption": [], "img_footnote": [], "page_idx": 28}, {"type": "text", "text": "Heuristic 4: The best ReEvo-generated heuristics for CVRP_NCO_LEHD. ", "text_level": 1, "page_idx": 28}, {"type": "image", "img_path": "483IPG0HWL/tmp/0094c006b510e98d002261fc7cbac84ec410c7d1ad0cd8f38e12c514cf0ca68d.jpg", "img_caption": ["Heuristic 5: The best ReEvo-generated heuristic for DPP_GA. "], "img_footnote": [], "page_idx": 28}, {"type": "image", "img_path": "483IPG0HWL/tmp/f831b228008e67c703df6473aabf2e7808d3f2a0395cea2fc7e6856a79c746b8.jpg", "img_caption": [], "img_footnote": [], "page_idx": 28}, {"type": "text", "text": "Heuristic 6: The best ReEvo-generated heuristic for TSP_GLS. ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Heuristic 7 presents the best heuristic found for TSP_ACO, which is generated when viewing TSP as a black-box COP. \u2018edge_attr\u2019 represents the distance matrix. ", "page_idx": 29}, {"type": "image", "img_path": "483IPG0HWL/tmp/052aeb4673964db868066c2379eba1c0ac3b072e56af073d06e6b6b98ba15296.jpg", "img_caption": ["Heuristic 7: The best ReEvo-generated heuristic for TSP_ACO. "], "img_footnote": [], "page_idx": 29}, {"type": "image", "img_path": "483IPG0HWL/tmp/612b5f660cbeddf6821affa8a06c66da62fa1888e2466e8187a338aefbde5082.jpg", "img_caption": [], "img_footnote": [], "page_idx": 29}, {"type": "text", "text": "Heuristic 8: The best ReEvo-generated heuristic for CVRP_ACO. ", "text_level": 1, "page_idx": 30}, {"type": "image", "img_path": "483IPG0HWL/tmp/1fe8259ba08af75a44eacb9042594f7c1d69c53cc1c17d4d6b09550d817bf3b6.jpg", "img_caption": ["Heuristic 9: The best ReEvo-generated heuristic for OP_ACO. "], "img_footnote": [], "page_idx": 30}, {"type": "text", "text": "Heuristic 10 presents the best heuristic found for MKP_ACO, which is generated when viewing MKP as a black-box COP. \u2018item_attr1\u2019 and \u2018item_attr2\u2019 represent the prizes and multi-dimensional weights of items, respectively. ", "page_idx": 30}, {"type": "image", "img_path": "483IPG0HWL/tmp/fdbf44ffc001940b3c18b3c42a4a910867eb747bab4f0d2a2eac7a9dbde0c15c.jpg", "img_caption": ["Heuristic 10: The best ReEvo-generated heuristic for MKP_ACO. "], "img_footnote": [], "page_idx": 30}, {"type": "image", "img_path": "483IPG0HWL/tmp/9f0406d6741d1b504966c22c3eabe5c27c7dce00facea058d9c46f37752fa5cb.jpg", "img_caption": ["Heuristic 11: The best ReEvo-generated heuristic for BPP_ACO. "], "img_footnote": [], "page_idx": 30}, {"type": "text", "text": "Heuristic 12 gives the best-ReEvo generated constructive heuristic for TSP. We used the best heuristic found in AEL [46] as the seed for ReEvo. As a result, our heuristic closely mirrors the one in AEL, scoring each node mostly using a weighted combination of the four factors. ", "page_idx": 30}, {"type": "image", "img_path": "483IPG0HWL/tmp/c8a33bf3c3256173d07a553ac30dcaaa5242c98eaea2aa1d77101c6259d8fbd3.jpg", "img_caption": ["Heuristic 12: The best ReEvo-generated heuristic for TSP_constructive. "], "img_footnote": [], "page_idx": 31}, {"type": "text", "text": "F Licenses for used assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Table 11 lists the used assets and their licenses. Our code is licensed under the MIT License. ", "page_idx": 31}, {"type": "table", "img_path": "483IPG0HWL/tmp/d3a50b41fc50346a819723c9b90299b5a1206b60b49c5db3cca696a472e2341a.jpg", "table_caption": ["Table 11: Used assets and their licenses. "], "table_footnote": [], "page_idx": 31}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "1. Claims ", "page_idx": 32}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: The main claims include SOTA heuristics generated by ReEvo and SOTA sample efficiency of ReEvo. They accurately reflect the paper\u2019s contributions and scope. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 32}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: See $\\S\\ 7$ . ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 32}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: This paper does not include theoretical results. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 32}, {"type": "text", "text": "", "page_idx": 33}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: Full experimental details and results are provided in $\\S\\ 5,\\,\\S\\ 6$ , Appendix B, Appendix C, and Appendix D. Our code is also available. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 33}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: Our code is available, with sufficient instructions to faithfully reproduce the main experimental results. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/public/ guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/ guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 33}, {"type": "text", "text": "", "page_idx": 34}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: See $\\S\\ F_{}\\mathinner{\\mathrm{5}},\\S\\ 6$ , Appendix B, Appendix C, and Appendix D. ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them.   \n\u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 34}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: See Fig. 3, Table 4, Fig. 4, Table 5, etc. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 34}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: See Appendix C. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute. ", "page_idx": 34}, {"type": "text", "text": "\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 35}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Justification: The research conducted in the paper conforms, in every respect, with the NeurIPS Code of Ethics. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 35}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Justification: Heuristic design automation is a long-standing pursuit. Our contributions towards it are discussed in $\\S\\ 1$ and $\\S\\ 8$ . ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 35}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 35}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 35}, {"type": "text", "text": "Justification: The paper poses no such risks. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. ", "page_idx": 35}, {"type": "text", "text": "\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 36}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: See Appendix F. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 36}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 36}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 36}, {"type": "text", "text": "Justification: The paper does not release new assets. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 36}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 36}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 36}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 36}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? Answer: [NA] ", "page_idx": 36}, {"type": "text", "text": "", "page_idx": 36}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 37}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 37}]