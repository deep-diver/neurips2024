[{"type": "text", "text": "Monte Carlo Tree Search based Space Transfer for Black-box Optimization ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Shukuan Wang1,2,\u2217 Ke Xue1,2,\u2217 Lei Song1,2, Xiaobin Huang1,2, Chao Qian1,2\u2020 ", "page_idx": 0}, {"type": "text", "text": "1National Key Laboratory for Novel Software Technology, Nanjing University 2School of Artificial Intelligence, Nanjing University {wangsk, xuek, huangxb, songl, qianc}@lamda.nju.edu.cn ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Bayesian optimization (BO) is a popular method for computationally expensive black-box optimization. However, traditional BO methods need to solve new problems from scratch, leading to slow convergence. Recent studies try to extend BO to a transfer learning setup to speed up the optimization, where search space transfer is one of the most promising approaches and has shown impressive performance on many tasks. However, existing search space transfer methods either lack an adaptive mechanism or are not flexible enough, making it difficult to efficiently identify promising search space during the optimization process. In this paper, we propose a search space transfer learning method based on Monte Carlo tree search (MCTS), called MCTS-transfer, to iteratively divide, select, and optimize in a learned subspace. MCTS-transfer can not only provide a well-performing search space for warm-start but also adaptively identify and leverage the information of similar source tasks to reconstruct the search space during the optimization process. Experiments on synthetic functions, real-world problems, Design-Bench and hyperparameter optimization show that MCTS-transfer can demonstrate superior performance compared to other search space transfer methods under different settings. Our code is available at https://github.com/lamda-bbo/mcts-transfer. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "In many real-world tasks such as neural architecture search [56, 41, 42], hyper-parameter optimization [55, 4], and integrated circuit design [19, 30], we often need to solve black-box optimization (BBO) problems, where the objective function has no analytical form and can only be evaluated by different inputs, regarded as a \u201cblack-box\u201d function. BBO problems are often accompanied by expensive computational costs of the evaluations, requiring a BBO algorithm to find a good solution with a small number of objective function evaluations. ", "page_idx": 0}, {"type": "text", "text": "Bayesian optimization (BO) [29, 8] is a widely used sample-efficient method for such problems. At each iteration, BO fits a surrogate model, typically Gaussian process (GP) [26], to approximate the objective function, and maximizes an acquisition function to determine the next query point. Under the limited evaluation budget, traditional BO methods only have a few observations, which are, however, insufficient for constructing a precise surrogate model, leading to slow convergence. Thus, traditional BO methods struggle to effectively solve expensive BBO problems, preventing their broader applications. ", "page_idx": 0}, {"type": "text", "text": "To tackle this issue, recent research tries to apply transfer learning methods for BO [2]. Transfer BO methods operate under the assumption that similar tasks may share common characteristics, and the knowledge acquired from similar source tasks can be helpful for optimizing the current target task. They typically gather offline datasets from the source tasks and utilize them to expedite the target task. These methods can be categorized based on the learned components of BO, such as the acquisition function [51, 40], initialization point [45, 47], or search space [49, 23, 17]. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Among these, learning the search space is a promising research area due to its effectiveness and orthogonal relationship with optimization methods. By learning and partitioning the search space, we can more effectively utilize potential subspaces and significantly accelerate the algorithm\u2019s search for optimal solutions. While the methods for partitioning the search space have demonstrated great potential [22, 14, 23, 17], they still have several limitations, particularly in terms of flexibly adjusting the search space for the current target task. In many scenarios, we are uncertain about which tasks are truly \u201csimilar\u201d to the target task before optimizing it. Our comprehension about this similarity can only deepen gradually as we progress in optimizing the target task. Therefore, we hope that a search space transfer algorithm can automatically identify the most relevant source tasks during the optimization process, and give them more consideration when constructing the subspaces. However, existing methods have limited flexibility in adjusting in this manner. ", "page_idx": 1}, {"type": "text", "text": "In this paper, we propose a search space transfer learning method based on Monte Carlo tree search (MCTS), called MCTS-transfer, to iteratively divide, select, and optimize in a learned subspace. Each node of MCTS-transfer represents a subspace, whose potential is calculated as a weighted sum of the source and target sample values, assessing the node\u2019s utilization value. To better identify and leverage the information from source tasks, we assign different weights to different source tasks based on their similarity to the target task, which are adjusted dynamically during the optimization process. These weights are then used to calculate the potential of the node. Our proposed MCTS-transfer offers several notable advantages. First, it can provide a better initial search space for a warm-start of the optimization of the target task. Second, it can provide multiple promising compact subspaces by MCTS, to improve optimization efficiency. The upper confidence bound (UCB)-based node selection of MCTS can also automatically balance the trade-off between exploration and exploitation. Third, it can automatically identify source tasks similar to the current target task based on new observations, and re-construct the search space to make it more consistent with the current target task. ", "page_idx": 1}, {"type": "text", "text": "To evaluate the effectiveness of the proposed method, we compare MCTS-transfer with various search space transfer methods and conduct experiments on multiple BBO tasks, including synthetic functions, real-world problems, Design-Bench and hyper-parameter optimization problems. In different scenarios, such as varying similarity between the source tasks and target task, MCTStransfer demonstrates superior performance. We also analyze the effectiveness of the adaptive weight adjustment, showing that MCTS-transfer can identify source tasks that are similar to the target task and assign them higher weights accordingly. Note that MCTS-transfer can be combined with any BBO algorithm. We only implemented it with the basic BO algorithm (i.e., using GP as the surrogate model and expected improvement (EI) as the acquisition function) in the experiments, and the performance can be further enhanced by advanced techniques. ", "page_idx": 1}, {"type": "text", "text": "2 Background ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "2.1 Bayesian Optimization ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "We consider the problem $\\operatorname*{max}_{\\pmb{x}\\in\\mathcal{X}}f(\\pmb{x})$ , where $f$ is a black-box function and $\\mathcal{X}\\subseteq\\mathbb{R}^{D}$ is the domain. The basic framework of BO contains two critical components: a surrogate model and an acquisition function. GP is the most popular surrogate model. Given the sampled data points $\\{(\\pmb{x}_{i},\\bar{y}_{i})\\}_{i=1}^{t-1}$ , where $y_{i}=f(\\pmb{x}_{i})+\\epsilon_{i}$ and $\\epsilon_{i}\\sim\\mathcal{N}(0,\\eta^{2})$ is the observation noise, GP at iteration $t$ seeks to infer $f\\sim\\mathcal{G P}(\\mu(\\cdot),k(\\cdot,\\cdot)+\\eta^{2}\\mathbf{I})$ , specified by the mean $\\mu(\\cdot)$ and covariance kernel $k(\\cdot,\\cdot)$ , where $\\mathbf{I}$ is the identity matrix of size $D$ . After that, an acquisition function, e.g., probability of improvement (PI) [15], EI [12] or UCB [36], is optimized to determine the next query point $\\pmb{x}_{t}$ , balancing exploration and exploitation. ", "page_idx": 1}, {"type": "text", "text": "2.2 Transfer Bayesian Optimization ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "When solving new BBO problems, traditional BO methods need to conduct optimization from scratch, leading to slow convergence. Transfer learning reuses knowledge from source tasks to boost the performance of current tasks, and thus can be naturally applied to address this issue, i.e., it can utilize source task data to accelerate the convergence of current target task [2]. The main assumption of transfer learning for BBO is that many real-world problems exhibit certain similarities, and similar tasks often share similar characteristics that can be exploited. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Various transfer learning approaches have been explored concerning the surrogate model, acquisition function, initialization, and search space of BO. Several methods learn all available information from both source and target tasks in a single GP surrogate, and make the data comparable through multi-task GP [37, 16, 38], noisy GP model [31, 25, 13], and deep kernel learning model [47, 11, 10]. Additionally, certain approaches involve training multiple base surrogates and then combining them into a single surrogate [50, 28]. ", "page_idx": 2}, {"type": "text", "text": "Transfer learning methods on surrogate models, however, may encounter difficulties when scaling to high-dimensional cases, because the influence of the source tasks is easy to diminish progressively with the increase of new observation points [2]. Alternatively, transferring knowledge via the acquisition function can circumvent these issues. Previous research has approached transfer learning for acquisition functions through multi-task BO [37, 20], ensemble GPs [51], and meta-learning strategies such as reinforcement learning-driven strategies [40]. ", "page_idx": 2}, {"type": "text", "text": "Several approaches consider selecting multiple valuable points for better initial evaluations for the warm-start of optimization. Feurer et al. [7] simply selected the best point from the $t$ most similar tasks as the initialization point. Other works [48, 45] achieved warm-start by constructing a meta-loss, organically combining the mean function of the GP model from source tasks, and using gradient descent to find a set of solutions that minimize the meta-loss. Wistuba and Grabocka [47] tried to find suitable initial points to warm-start BO by minimizing the loss on the source tasks using an evolutionary algorithm. ", "page_idx": 2}, {"type": "text", "text": "2.3 Search Space Transfer ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Compared to the aforementioned methods, search space transfer has many advantages, especially in not limiting the transfer to a specific algorithm component (e.g., acquisition function in BO), but considering the search space that can be used by all BBO algorithms as the transfer object. That is, the learned search space is orthogonal to the optimization process and can be integrated with any advanced optimizer. A well-learned search space can greatly improve optimization efficiency and guide the optimization process to a good result. ", "page_idx": 2}, {"type": "text", "text": "The concept of search space transfer was first proposed by Wistuba et al. [49], which defined a region by a center point and a diameter, and pruned away regions deemed less promising. Instead of pruning space, Perrone and Shen [23] considered designing a promising search space for the target task. This approach extracts an optimal solution $\\pmb{x}_{i}^{*}$ from each task, and employs a simple geometric form (e.g., a box or ellipsoid) to define the smallest subspace encompassing all optimal solutions $\\pmb{x}_{i}^{*}$ . However, it ignores the correlation between tasks, and the space constructed with regular geometry may be too loose for the target task. To address this issue, Li et al. [17] selected the most similar source tasks to the target task in a certain proportion, and used a binary classification method to learn good spaces and bad spaces among these tasks. A voting mechanism is then employed to aggregate information from all selected tasks to determine a newly generated search space for the target task. ", "page_idx": 2}, {"type": "text", "text": "These current space transfer methods, however, lack mechanisms to adjust the search space when it is not well-suited for the target task. Furthermore, when source tasks differ significantly from the target task, they tend to devolve into full-space search. The binary nature of evaluating the search space as simply \u201cgood\u201d or \u201cbad\u201d is another limitation. Our proposed method will overcome these drawbacks by adapting the search space dynamically according to the similarity between source tasks and the target task, applying MCTS to find a proper subspace, and using a more nuanced and precise numerical evaluation for the goodness of a search subspace. ", "page_idx": 2}, {"type": "text", "text": "2.4 Monte Carlo Tree Search ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "MCTS [5] is a search algorithm combining random sampling with a tree search structure, which has been widely applied in the filed of game-playing and decision-making [32, 34]. A tree node represents a particular state in the search space, e.g., stone positions on the board in a GO game. Each tree node has an UCB [1] value during the search procedure, to balance exploration and exploitation. ", "page_idx": 2}, {"type": "text", "text": "The UCB of each tree node is calculated by its value $v_{m}$ and its visit times $n_{m}$ , defined as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathrm{ucb}_{m}=\\frac{v_{m}}{n_{m}}+2C_{p}\\sqrt{2\\log\\left(n_{p}\\right)/n_{m}},\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $C_{p}$ is a hyper-parameter controlling the balance between exploration and exploitation, and $n_{p}$ is the visit times of the parent node. In the iterative process of MCTS, a leaf node is systematically selected for expansion, involving four key steps: selection, expansion, simulation, and back-propagation. Initially, the algorithm recursively navigates from the root node to child nodes, prioritizing those with higher UCB values to identify the leaf node $m$ . Subsequently, an action is executed based on the state of $m$ , leading to the expansion of a new child node (state), $k$ . In the simulation step, the node value $v_{k}$ is determined through random sampling. Finally, through back-propagation, the value and visitation count of the ancestors of $k$ are updated. ", "page_idx": 3}, {"type": "text", "text": "MCTS has been used to select important variables automatically for high dimensional BO [35]. LA-MCTS [43] is a scalable BBO algorithm based on learning space partition. Utilizing MCTS, it iteratively divides the search space into small subspaces for optimization. In this framework, the tree\u2019s root represents the entire search space denoted as $\\Omega$ , and each tree node $m$ represents a sub-region $\\Omega_{m}$ . The value $v_{m}$ is determined by the average objective value of the sampled points within the sub-region $\\Omega_{m}$ . During each iteration, after selecting a leaf node $m$ , LA-MCTS conducts optimization within $\\Omega_{m}$ . The sampled points are then employed for clustering and classification, leading to the bifurcation of $\\Omega_{m}$ into two distinct sub-regions: \u201cgood\u201d and \u201cbad\u201d. These sub-regions are expanded as two child nodes, with the left one denoted as \u201cgood\u201d and the right as \u201cbad\u201d. ", "page_idx": 3}, {"type": "text", "text": "3 MCTS-transfer ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we propose a search space transfer learning method based on MCTS, called MCTStransfer, which can be divided into two major stages: pre-learning stage and optimizing stage. The main idea is to apply MCTS to divide the entire space based on source task data in the pre-learning stage, and adaptively adjust the partition based on newly generated target task data during the optimition process. MCTS-transfer iteratively chooses one partitioned subspace for search and adjusts the partition after sampling each new data point. Assume that there are $K$ source tasks $\\{\\bar{f}_{i}\\}_{i=1}^{K}$ and a target task $T$ that we are going to optimize $\\operatorname*{max}_{\\pmb{x}\\in\\Omega}f_{T}(\\pmb{x})$ , where $\\Omega$ is the entire search space. For the $i$ -th source task, we have offline dataset $D_{i}=\\{(\\pmb{x}_{i,j},y_{i,j})\\}_{j=1}^{|D_{i}|}$ , where $y_{i,j}$ is the observed objective value of $\\pmb{x}_{i,j}$ , and $|D_{i}|$ is the number of data points. Let tree $\\tau$ denotes the search space division process by MCTS. ", "page_idx": 3}, {"type": "text", "text": "In the pre-learning stage, $\\tau$ initially has only one root node, representing the entire search space $\\Omega$ . The expansion of a tree node $m$ corresponds to the division of the search space $\\Omega_{m}$ that the node $m$ represents. The node expansion follows the rules below. With a set of source task samples $\\{(\\pmb{x}_{i},y_{i})\\}_{i=1}^{\\bar{n}}$ in the space $\\Omega_{m}$ , we use $k$ -means clustering to divide them into two groups. The cluster with a higher average objective value is regarded as the \u201cgood\u201d cluster, while the other is the \u201cbad\u201d one. A binary classifier then establishes a decision boundary between the two clusters. In our approach, the space associated with the good cluster becomes the left node, while the space of the bad cluster becomes the right node. We recursively apply this partition process within each node, as shown in Figure 1. The depth of the resulting Monte Carlo tree $\\tau$ is determined by a threshold hyperparameter $\\theta$ : a node is divided if it contains more than $\\theta$ samples and the contained samples can be clustered into two clusters. The tree $\\tau$ generated at this stage can give a suitable space partition in advance based on source task data, which serves as a warm-start for the following optimization process. Details of pre-learning will be introduced in Section 3.1. ", "page_idx": 3}, {"type": "text", "text": "In the optimization process, we follow the four key steps of MCTS: selection, expansion, simulation, and back-propagation. At each iteration, we select a target node $m$ by tracing the nodes\u2019 UCB values. That is, starting from the root, we recursively choose the child node with higher UCB value, until a leaf node $m$ is reached, as Figure 1 displayed. The space $\\Omega_{m}$ represented by $m$ is then considered as a promising search space, where a BO optimizer is used to optimize. The BO optimizer can build a surrogate model using samples in either $\\Omega_{m}$ or $\\Omega$ . The newly sampled point will be evaluated and used for expanding the node $m$ after updating the clustering in the node. It will further be utilized in back-propagation, where the number of visits and the potential value of each node will be updated. The potential value of a node is calculated by a weighted sum of objective values of the source and target task samples. Note that the tree structure will be reconstructed if there exists a node that the potential value of its right child exceeds that of the left one, violating the rule of our tree construction and implying that the current structure is not good. Please see Sections 3.2 and 3.3 for the details of node potential update and tree structure reconstruction. ", "page_idx": 3}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/f5851fce82f206208167900daafe70300f5d6ffd10baee27ae086a49adc81240.jpg", "img_caption": ["Figure 1: The workflow of MCTS-transfer. In pre-learning stage, MCTS-transfer builds the tree by clustering and classifying the samples apart recursively, until all nodes are not splitable. In optimization stage, the initial search space is based on the pre-learned tree. We will trace child node with greater UCB from ROOT and find the target leaf node to do optimization. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "Unlike LA-MCTS, MCTS-transfer not only considers the information of the target task when calculating node values but also takes into account the information from source tasks, enabling it to be used for search space transfer. Additionally, we propose adaptive weights for source tasks and validate their effectiveness through our experiments. ", "page_idx": 4}, {"type": "text", "text": "3.1 Search Space Pre-Learning ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Compared to standard BBO algorithms, which sample randomly across the entire space at the beginning, our method leverages information from source tasks to concentrate sampling within a generally \u201cgood\u201d space, providing a warm-start initialization. ", "page_idx": 4}, {"type": "text", "text": "In the pre-learning stage, tree $\\tau$ initially has only one node, i.e., ROOT node. All source task samples are collected in this node, recursively clustered and classified, leading to node expansion. When none of the leaf nodes can be further bifurcated, i.e., contains more than $\\theta$ samples and can be clustered into two clusters, $\\tau$ is finally formed. In this process, we keep the rule that the left node is \u201cbetter\u201d (i.e., has a larger potential value) than the right node, so that we can easily identify that the leftmost leaf is the best and the rightmost leaf is the worst. The potential value of a node $m$ in the pre-learning stage is estimated by the average $y_{i,j}$ of all source task points within it, i.e., ", "page_idx": 4}, {"type": "equation", "text": "$$\np_{m}=\\frac{\\sum_{i\\leq K}\\sum_{(\\pmb{x}_{i,j},y_{i,j})\\in D_{i}\\cap\\Omega_{m}}y_{i,j}}{\\sum_{i\\leq K}|D_{i}\\cap\\Omega_{m}|}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "This tree embed historically good regions into specific tree nodes. Intuitively, the spaces represented by left leaves have higher potential of being good spaces than right ones. ", "page_idx": 4}, {"type": "text", "text": "The first iteration of MCTS-transfer will utilize the resulting tree $\\tau$ generated in the pre-learning stage. Starting from the root node, it recursively selects nodes with higher UCB values until reaching a leaf node. The UCB value is calculated as Eq. (1), where $v_{m}$ is replaced by the potential value $p_{m}$ in Eq. (2). In MCTS-transfer, $n_{m}$ and $n_{p}$ represent the number of samples, including those from source and target tasks, in the subspace $\\Omega_{m}$ and the parent subspace of $\\Omega_{m}$ , respectively. Consequently, the algorithm preferentially samples from those regions that have shown to yield favorable outcomes in the source tasks. ", "page_idx": 4}, {"type": "text", "text": "3.2 Node Potential Update ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In each iteration of MCTS-transfer, after evaluating a new sample, we use it to update the similarity between the source tasks and the target task, and then update each node potential. Note that the potential value $p_{m}$ used in the pre-learning stage only contains information from source tasks. But in ", "page_idx": 4}, {"type": "text", "text": "the optimizing stage, the calculation of $p_{m}$ includes both information from the source tasks $\\{D_{i}\\}_{i=1}^{K}$ and the target task $D_{T}=\\{(x_{T,j},y_{T,j})\\}_{j=1}^{t}$ , and considers the similarity between them, i.e., ", "page_idx": 5}, {"type": "equation", "text": "$$\np_{m}=\\gamma^{t-1}\\frac{\\sum_{i\\leq K}w_{i}\\overline{{y}}_{i,m}}{\\sum_{i\\leq K}w_{i}}+\\overline{{y}}_{T,m},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\begin{array}{r}{\\overline{{y}}_{i,m}=\\sum_{(\\boldsymbol{x}_{i,j},y_{i,j})\\in D_{i}\\cap\\Omega_{m}}y_{i,j}/|D_{i}\\cap\\Omega_{m}|}\\end{array}$ , and $\\begin{array}{r}{\\overline{{y}}_{T,m}=\\sum_{(\\mathbf{x}_{T,j},y_{T,j})\\in D_{T}\\cap\\Omega_{m}}y_{T,j}/|D_{T}\\cap}\\end{array}$ $\\Omega_{m}|$ , which are the average objective values of the samples of $D_{i}$ and $D_{T}$ in $\\Omega_{m}$ , respectively. There are two important parameters in Eq. (3). ", "page_idx": 5}, {"type": "text", "text": "\u2022 $\\gamma$ : A decay factor, which is used to adjust the overall influence of source tasks throughout the optimization process. A smaller $\\gamma$ accelerates the forgetting of the source task data. \u2022 $w_{i}$ : A weighting factor, which reflects the influence of the $i$ -th source task, and is determined by the similarity between the $i$ -th source task and the target task. A larger weight represents higher similarity and implies a greater influence of the $i$ -th source task\u2019s samples on the potential calculation of a tree node. ", "page_idx": 5}, {"type": "text", "text": "To calculate $w_{i}$ , we measure the distance $D i s t a n c e(D_{i},D_{T})$ between the $i$ -th source task and the target task by $D i s t a n c e(\\pmb{x}_{i}^{*},\\pmb{x}_{T}^{*})$ , where $\\pmb{x}_{i}^{*}$ and $x_{T}^{*}$ denote the mean of the best $N$ sampled points of these two tasks, respectively. The source tasks are ranked according to their distances to the target task. A smaller rank implies a smaller distance, i.e., a higher similarity. The weight $w_{i}$ is then calculated as ", "page_idx": 5}, {"type": "equation", "text": "$$\nw_{i}=\\left\\{\\!\\!\\begin{array}{l l}{1.0-\\frac{r_{i}}{\\alpha N_{m}}}&{\\mathrm{if}\\;r_{i}<\\alpha N_{m}}\\\\ {0.1}&{\\mathrm{otherwise}}\\end{array}\\!\\!,\\right.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $r_{i}$ is the rank of the $i$ -th source task, $N_{m}$ is the number of source tasks that have solutions located in $\\Omega_{m}$ , and $\\alpha\\in[0,1]$ . After sampling a new data point in each iteration of MCTS-transfer, the ranks and weights are updated accordingly, which are then used to update the potential value of each node. We also consider other ways of calculating distances and weights, which are introduced and empirically compared in Appendix $\\mathbf{C}$ . ", "page_idx": 5}, {"type": "text", "text": "3.3 Tree Structure Reconstruction ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "When constructing the search tree, the left child of a node is always better than the right child, i.e., the potential of the left child always exceeds that of the right child. However, after sampling a new data point and updating the potential of each node in each iteration of MCTS-transfer, this property may be violated. If this happens, it indicates that the current space partition is not ideal and needs adjustment. Specifically, we backtrack from the problematic leaf nodes to the highest-level ancestor node that upholds the desired property, and then proceed to reconstruct the subtree from that ancestor node. The subtree reconstruction process is consistent with the process of node expansion. ", "page_idx": 5}, {"type": "text", "text": "The detailed process is presented in Algorithm 2. We apply breadth-first search to traverse all tree nodes and use a queue $\\mathcal{Q}$ to manage the sequence of nodes. In addition, we set a queue $\\mathcal{N}$ to store the nodes that need to be reconstructed. If the potential of the right child of a node is better than that of the left child (line 6), the subtree of this node is deleted (line 7), and it should be reconstructed and is added into the queue $\\mathcal{N}$ (line 8). Otherwise, the two child nodes will enter into the queue $\\mathcal{Q}$ (lines 10\u201311) and will be examined later. After traversing the tree $\\tau$ , we reconstruct the subtrees of nodes in $\\mathcal{N}$ (lines 15\u201319). If a node in $\\mathcal{N}$ is splitable, i.e., the contained samples in the node exceeds $\\theta$ and can be clustered and divided by a binary classifier, it will be further expanded. Thus, Treeify can fine-tune the tree structure and reserve some history information; meanwhile, it can adaptively be more suitable to the target task. ", "page_idx": 5}, {"type": "text", "text": "3.4 Details of MCTS-transfer ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "The detailed procedure of MCTS-transfer is presented in Algorithm 1. It begins with a pre-learnned MCTS model $\\tau$ based on source task data (line 1), and initializes an empty set $D_{T}$ to store samples of the target task (line 2). In each iteration, it selects a leaf node $m$ based on the UCB value (line 4). If the target task already has samples in the space $\\Omega_{m}$ represented by $m$ , the algorithm conducts BO within $\\Omega_{m}$ and gets a candidate point ${\\pmb x}_{T,t}$ (lines 8\u20139); otherwise, the candidate point is randomly selected in $\\Omega_{m}$ (line 6). The sampled point ${\\bf\\delta x}_{T,t}$ is then evaluated and added into $D_{T}$ (line 11). To ", "page_idx": 5}, {"type": "text", "text": "Input: Search space $\\Omega$ , objective function $f_{T}(\\cdot)$ , data $\\{D_{i}\\}_{i=1}^{K}$ of $K$ source tasks, and number $N$ of objective evaluations ", "page_idx": 6}, {"type": "text", "text": "1: Initialize a MCTS model $\\tau$ by search space pre-learning as introduced in Section 3.1;   \n2: $D_{T}=\\emptyset$ ;   \n3: for $t=1,2,\\ldots,N$ do   \n4: Select a leaf node $m$ by UCB-based selection;   \n5: if $|D_{T}|=0$ then   \n6: Select a candidate point ${\\pmb x}_{T,t}$ randomly in $\\Omega_{m}$   \n7: else   \n8: Train a GP model on $D_{T}$ ;   \n9: Select a candidate ${\\pmb x}_{T,t}$ in $\\Omega_{m}$ by optimizing an acquisition function   \n10: end if   \n11: Evaluate ${\\pmb x}_{T,t}$ to get $y_{T,t}$ , and let $D_{T}=D_{T}\\cup\\{(\\pmb{x}_{T,t},y_{T,t})\\}$ ;   \n12: Calculate $D i s t a n c e(D_{i},D_{T})$ , and sort them in ascending order to get the ranks $r_{i}$ ;   \n13: For each source task $f_{i}$ , update its weight $w_{i}$ by Eq. (4), where $i=1,\\cdots\\,,K$ ;   \n14: For each node $n$ , update its potential value $p_{n}$ by Eq. (3);   \n15: if $m$ .isSplitable then   \n16: Expand $m$   \n17: end if   \n18: Back-propagate and update the visit times and samples of nodes on the path to $m$ ;   \n19: $\\tau\\leftarrow$ Treeify $(\\tau)$   \n20: end for ", "page_idx": 6}, {"type": "text", "text": "make full use of the information from the source tasks, we take the similarity between a source task and the target task into account, and try to assign higher weights to more similar source tasks, as introduced in Section 3.2. With new samples added in $D_{T}$ , the distance between each source task $D_{i}$ and the target task $D_{T}$ may change. Thus, the distance, rank and weight of each source task are re-calculated in lines 12\u201313 according to Eq. (4), and the potential value of each node in the tree is re-evaluated in line 14 according to Eq. (3). After that, the node $m$ is expanded in lines 15\u201317 if it is splitale, i.e., contains more than $\\theta$ samples of the target task and can be clustered into two clusters. Note that for node expansion, only samples of the target task are considered. In line 18, the back-propagation step is performed to refresh the information of each node on the path to $m$ including the visit times and the contained samples. Finally, we will check whether the updated tree conforms to the property that the left child of a node has a larger potential value than its right node. For any node violating this property, its sub-tree will be reconstructed. This process is accomplished by employing the Treeify procedure in Algorithm 2 in Appendix A. ", "page_idx": 6}, {"type": "text", "text": "In MCTS-transfer, the tree structure exhibits several properties that align with the requirements of search space transfer learning. 1) Tree structure is natural to model the search space, where the root represents the entire search space, and the node expansion corresponds to the space partition with each child node representing a subspace. 2) The node potential evaluation allows for the extraction of multiple irregularly shaped promising search subspaces represented by multiple leaf nodes. 3) The tree can be adjusted by updating and expanding nodes on the basis of the original tree, so that new information can be absorbed while historical information can also be retained, i.e., the tree structure is inheritable. This enables the knowledge of space partition from source task data to be transferred to the target task. ", "page_idx": 6}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In this section, we introduce a simple case to highlight the features of existing search space transfer algorithms and assess the effectiveness of MCTS-transfer. We also conduct experiments across a variety of tasks, including the synthetic benchmark BBOB, real-world problems, Design-Bench and the hyper-parameter optimization benchmark HPOB. The details of the problems, data and experimental results can be seen in Appendix B.2, B.3 and E. ", "page_idx": 6}, {"type": "text", "text": "Compared methods. Our baselines consist of two non-transfer BO, i.e., basic GP, and LAMCTS [43], three search space transfer algorithms, i.e., Box-GP [23], Ellipsoid-GP [23], Supervised", "page_idx": 6}, {"type": "text", "text": "GP [17]), and one state-of-the-art surrogate model transfer BO algorithm PFN [21]. Detailed configurations and settings of the hyper-parameters for each algorithm are provided in Appendix B.1. ", "page_idx": 7}, {"type": "text", "text": "Basic Settings. In our experimental settings, we explore two types of transfer learning\u2014similar and mixed transfer\u2014to demonstrate the advantages of MCTS-transfer in handling complex source tasks. Similar transfer involves using data from similar source tasks, while mixed transfer uses a combination of similar and dissimilar source task data for pre-training. Given the challenges in real-world scenarios of determining task similarity and selecting appropriate tasks, our focus will be on evaluating MCTS-transfer\u2019s performance in the more complex scenario, i.e., mixed transfer. ", "page_idx": 7}, {"type": "text", "text": "4.1 Motivating Cases: Sphere2D ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We first conduct a simple but important experiment on Sphere2D to verify our motivation and evaluate the performance of existing search space transfer methods. The Sphere2D function is defined as $f(\\bar{\\mathbf{x})}\\;=\\;(\\mathbf{x}\\,-\\,\\mathbf{x}^{*})^{2}$ , with $x^{*}$ representing the optimal solution. We generate three source task datasets $D_{(5,5)}$ , $D_{(5,-5)}$ , and $D_{(-5,-5)}$ , each containing 100 samples, by assigning $(5,5)$ , $(5,-5)$ , and $(-5,-5)$ to $x^{*}$ and sampled by standard BO. The target task is defined as $f(x)$ with ${\\pmb x}^{*}=(4,4)$ . ", "page_idx": 7}, {"type": "text", "text": "Unlike the basic setting, we use the mixed setting and the dissimilar setting. Dissimilar setting uses only $D_{(5,-5)}$ and $D_{(-5,-5)}$ for pre-training, which are most dissimilar to the target task. This setting is to test MCTS-transfer\u2019s ability to handle extreme cases without similar source tasks. ", "page_idx": 7}, {"type": "text", "text": "MCTS-transfer-GP is compared against three search space transfer algorithms\u2014Box-GP, EllipsoidGP, and Supervised-GP\u2014in both mixed and dissimilar settings, as shown in Figure 2. Box-GP and Ellipsoid-GP ignore task similarity and limit the search space to geometric areas encompassing all source task optima. In the dissimilar transfer setting, these methods fail because the target task\u2019s optimal solution ${\\pmb x}^{*}=(4,4)$ lies outside the defined subspace of source task optima. Supervised-GP takes task similarity to guide the selection and combination of promising region with a voting system. Although it pays attention to the importance of task similarity and can be applicable in dissimilar transfer, it tends to be an entire-space optimization algorithm when source tasks exhibit high variance or are dissimilar to the target task. MCTS-transfer recursively divides the search space, dynamically ajusts task weights and evaluates the subspace potential based on the task similarity. In addition, the method tends to increasingly rely on target task data due to decay factor $\\gamma$ . Therefore, MCTS-transfer achieves successful convergence with low variance in mixed and dissimilar transfer. The right part of Figure 2 displays the weight change curves for the three source tasks, confirming the anticipated results. Higher weights are assigned to datasets $D_{(5,5)}$ and $D_{(-5,5)}$ , indicating that our method effectively recognizes and prioritizes tasks more similar to the target task. ", "page_idx": 7}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/1d82377d84ca6cdf3ea1e0467620553c28b9dbfe06d9088d6e28ac8501fd3812.jpg", "img_caption": ["Figure 2: Comparison of MCTS-transfer and other algorithms on Sphere2D "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "4.2 Synthetic Functions ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "BBOB [9] is a popular benchmark for BBO. It offers 24 synthetic functions tailored for the continuous domain. We randomly select one function from each of the five function classes of BBOB as our target task, i.e., GriewankRosenbrock, Lunacek, Rastrigin, Rosenbrock, and SharpRidge. ", "page_idx": 7}, {"type": "text", "text": "As shown in Figure 3a, compared with LA-MCTS, we find that the results can indeed be greatly improved after space transfer, proving the effectiveness of MCTS-transfer. In mixed transfer, MCTStransfer can still maintain warm-start, thanks to its ability to provide multiple compact promising ", "page_idx": 7}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/cf92c530529a2c14b3a2fbc4bcf2c99c392676281042fa94b9c4e4a80fbf8339.jpg", "img_caption": ["Figure 3: Comparison of MCTS-transfer and other algorithms on BBOB and real-world problems "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "subspaces by effective search space pre-learning. Throughout the optimization process, MCTStransfer, combined with a simple GP, is able to reach or even surpass SOTA\u2019s surrogate model transfer algorithm PFN, reflecting the superior performance. ", "page_idx": 8}, {"type": "text", "text": "4.3 Real-world Problems ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "To demonstrate the practical value of MCTS-transfer, we test MCTS-transfer with three real-world problems, including LunarLander, RobotPush, and Rover. ", "page_idx": 8}, {"type": "text", "text": "Figure 3b shows comparison on similar and mixed transfer. Based on the overall ranking, MCTStransfer-GP outperforms other search space transfer baselines.In mixed transfer, although it\u2019s surpassed by PFN initially, MCTS-transfer-GP is finally able to find better solutions even if there are dissimilar tasks misleading. The ability to adaptively correct the search space may come from the efficient utilization of source task data by reasonable node potential evaluation, node expansion, and tree reconstruction. ", "page_idx": 8}, {"type": "text", "text": "4.4 Design-Bench Problems ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We further verify the performance of MCTS-transfer in more complex and high-dimensional problems from Design-Bench [39], including three continuous problems, Superconductor, Ant morphology and D\u2019Kitty Morphology. ", "page_idx": 8}, {"type": "text", "text": "In similar and mixed transfer, MCTS-transfer-GP gets the best ranking after 40 iterations. The stable performance indicates that the algorithm can effectively transfer and utilize previous experience when facing different source tasks. This ability is particularly important for black-box problems because it allows the system to quickly adapt to unseen situations while maintaining high performance. ", "page_idx": 8}, {"type": "text", "text": "4.5 Hyper-parameter Optimization ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Hyper-parameter optimization(HPO) is a common application of BBO transfer learning. The HPO-B benchmark [24], sourced from OpenML, includes 176 search spaces/algorithms and 196 datasets, totaling 6.4 million HPO evaluations. Details of Source task data selection and curves of each problem are placed in Appendix B.3 and E, respectively. ", "page_idx": 8}, {"type": "text", "text": "The HPOB benchmark has several challenges. Firstly, for these problems, algorithms are easy to converge on a certain area, leading to rapid convergence. Secondly, the source tasks are complex, presenting significant variability in data distribution and scale. To tackle the difficulties, the search algorithm should be equipped with ability to handle complex source tasks and robust optimization capabilities. ", "page_idx": 8}, {"type": "text", "text": "Experimental results are shown in Figure 4b, which represent the mean ranks and the variance of all algorithms on 39 test problems. In both transfer settings, the baseline ranks are very close, because there are only tiny gaps among final convergence values, which can be seen in Appendix E. However, our method still have clear advantages. Although our method doesn\u2019t have enough warm-start strength when the source tasks are diverse and complex, but it can still adjust the search tree structure and locate the better search area, exceeding existing search space transfer algorithms. ", "page_idx": 8}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/c37f518fec090238ed8e98f8e1ba0b2ef477ac4aaefac2811a15e9b7c87191f5.jpg", "img_caption": ["Figure 4: Comparison of MCTS-transfer and other algorithms on Design-Bench and HPOB "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "4.6 Runtime Analysis ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "To verify whether MCTS-transfer incurs excessive time overhead, we analyze the runtime proportion of each component of MCTS-transfer on BBOB and three real-world tasks (i.e., LunarLander, RobotPush, and Rover). We divide MCTS-transfer into three main components: evaluation, backpropogation and reconstruction.The evaluation time includes the time required for surrogate model fitting, candidate solution selection and evaluation, which is the common component shared by all optimization algorithms. Backpropagation and reconstruction constitute the two principal modules specific to MCTS-transfer. ", "page_idx": 9}, {"type": "text", "text": "As shown in Figure 5, the additional computational burden introduced by MCTS-transfer (i.e., backpropagation and reconstruction) represents a relatively minor fraction of the total runtime, particularly in the three expensive real-world problems. In expensive evaluation problems, MCTStransfer can bring great improvement by introducing small additional computational overhead. Other details, such as the exact time cost of each component and the frequency MCTS subtree reconstruction, are provided in Appendix F. ", "page_idx": 9}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/8b25946fa588817274bb3346a33ff1bf8928d515f35165be652fe0529fe18af3.jpg", "img_caption": [], "img_footnote": ["Figure 5: Time cost proportion of evaluation, backpropogation and reconstruction of MCTS-transfer "], "page_idx": 9}, {"type": "text", "text": "5 Conclusions and Limitations ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we propose MCTS-transfer to solve the expensive BBO problem. MCTS-transfer uses MCTS to perform search space transfer, extracting similar tasks during the optimization process and giving more accurate space partition results. Compared with other space transfer algorithms, our algorithm is more generalizable. Specifically, it can extract the most similar source tasks and give them higher weights to accelerate optimization. Besides, it is reliable because it can dynamically adjust the tree structure, improving the probability that the optimal solution falls in search space of the chosen node. Comprehensive experiments on BBOB, real-world problems, Design-Bench and HPOB demonstrate the effectiveness of our algorithm. However, there are still limitations, such as the inability of MCTS-transfer to handle search space transfer tasks for problems with different domains or different dimensions. Future work will focus on solving the heterogeneous space transfer [6], exploring more accurate similarity measures and trying to give the theoretical analysis of the effectiveness of MCTS-transfer. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "We thank the reviewers for their insightful and valuable comments. This work was supported by the Science and Technology Project of the State Grid Corporation of China (5700-202440332A-2-1-ZX). ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Peter Auer, Nicol\u00f2 Cesa-Bianchi, and Paul Fischer. Finite-time analysis of the multiarmed bandit problem. Machine learning, 47(2):235\u2013256, 2002.   \n[2] Tianyi Bai, Yang Li, Yu Shen, Xinyi Zhang, Wentao Zhang, and Bin Cui. Transfer learning for Bayesian optimization: A survey. arXiv:2302.05927, 2023.   \n[3] James Bergstra and Yoshua Bengio. Random search for hyper-parameter optimization. Journal of Machine Learning Research, 13:281\u2013305, 2012.   \n[4] Bernd Bischl, Martin Binder, Michel Lang, Tobias Pielok, Jakob Richter, Stefan Coors, Janek Thomas, Theresa Ullmann, Marc Becker, Anne-Laure Boulesteix, Difan Deng, and Marius Lindauer. Hyperparameter optimization: Foundations, algorithms, best practices, and open challenges. WIREs Data. Mining. Knowl. Discov., 13(2), 2023.   \n[5] Cameron Browne, Edward Jack Powley, Daniel Whitehouse, Simon M. Lucas, Peter I. Cowling, Philipp Rohlfshagen, Stephen Tavener, Diego Perez Liebana, Spyridon Samothrakis, and Simon Colton. A survey of Monte Carlo tree search methods. IEEE Transactions on Computational Intelligence and AI in Games, 4(1):1\u201343, 2012.   \n[6] Zhou Fan, Xinran Han, and Zi Wang. Transfer learning for bayesian optimization on heterogeneous search spaces. arXiv preprint arXiv:2309.16597, 2023.   \n[7] Matthias Feurer, Jost Tobias Springenberg, and Frank Hutter. Initializing Bayesian hyperparameter optimization via meta-learning. In Proceedings of the 29th AAAI Conference on Artificial Intelligence (AAAI\u201915), pages 1128\u20131135, Austin, TX, 2015.   \n[8] Peter I. Frazier. A tutorial on Bayesian optimization. arXiv:1807.02811, 2018.   \n[9] Nikolaus Hansen, Steffen Finck, Raymond Ros, and Anne Auger. Real-parameter black-box optimization benchmarking 2009: Noiseless functions definitions. Technical Report RR-6829, INRIA, 2009.   \n[10] Tomoharu Iwata. End-to-end learning of deep kernel acquisition functions for Bayesian optimization. arXiv:2111.00639, 2021.   \n[11] Hadi Samer Jomaa, Sebastian Pineda Arango, Lars Schmidt-Thieme, and Josif Grabocka. Transfer learning for Bayesian HPO with end-to-end meta-features, 2022.   \n[12] Donald R. Jones, Matthias Schonlau, and William J. Welch. Efficient global optimization of expensive black-box functions. Journal of Global Optimization, 13(4):455\u2013492, 1998.   \n[13] Tinu Theckel Joy, Santu Rana, Sunil Gupta, and Svetha Venkatesh. A flexible transfer learning framework for Bayesian optimization with convergence guarantee. Expert Syst. Appl., 115: 656\u2013672, 2019.   \n[14] Beomjoon Kim, Kyungjae Lee, Sungbin Lim, Leslie Pack Kaelbling, and Tom\u00e1s Lozano-P\u00e9rez. Monte carlo tree search in continuous spaces using voronoi optimistic optimization with regret bounds. In The 34th AAAI Conference on Artificial Intelligence (AAAI\u201920), pages 9916\u20139924, New York, NY, 2020.   \n[15] Harold J. Kushner. A new method of locating the maximum point of an arbitrary multipeak curve in the presence of noise. Journal of Basic Engineering, 86(1):97\u2013106, 1964.   \n[16] Ho Chung Leon Law, Peilin Zhao, Leung Sing Chan, Junzhou Huang, and Dino Sejdinovic. Hyperparameter learning via distributional transfer. In Advances in Neural Information Processing Systems 32 (NeurIPS\u201918), pages 6801\u20136812, Vancouver, Canada, 2018.   \n[17] Yang Li, Yu Shen, Huaijun Jiang, Tianyi Bai, Wentao Zhang, Ce Zhang, and Bin Cui. Transfer learning based search space design for hyperparameter tuning. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining $^{\\prime}K D D^{\\prime}22,$ ), pages 967\u2013977, Washington, DC, 2022.   \n[18] Xingchen Ma and Matthew B. Blaschko. Additive tree-structured covariance function for conditional parameter spaces in bayesian optimization. In Proceedings of the 23rd International Conference on Artificial Intelligence and Statistics (AISTATS\u201920, pages 1015\u20131025, Palermo, Italy, 2020.   \n[19] Azalia Mirhoseini, Anna Goldie, Mustafa Yazgan, Joe W. J. Jiang, Ebrahim M. Songhori, Shen Wang, Young-Joon Lee, Eric Johnson, Omkar Pathak, Sungmin Bae, Azade Nazi, Jiwoo Pak, Andy Tong, Kavya Srinivasa, William Hang, Emre Tuncer, Anand Babu, Quoc V. Le, James Laudon, Richard Ho, Roger Carpenter, and Jeff Dean. Chip placement with deep reinforcement learning. arXiv:2004.10746, 2020.   \n[20] Henry B. Moss, David S. Leslie, and Paul Rayson. Mumbo: Multi-task max-value Bayesian optimization. In Proceedings of the 31th Machine Learning and Knowledge Discovery in Databases: European Conference (ECML/PKDD\u201920), pages 447\u2013462, Ghent, Belgium, 2020.   \n[21] Samuel M\u00fcller, Matthias Feurer, Noah Hollmann, and Frank Hutter. Pfns4bo: In-context learning for Bayesian optimization. In Proceedings of the 40th International Conference on Machine Learning (ICML\u201923), pages 25444\u201325470, Honolulu, HI, 2023.   \n[22] R\u00e9mi Munos. Optimistic optimization of a deterministic function without the knowledge of its smoothness. In Advances in Neural Information Processing Systems 24 (NeurIPS\u201911), pages 783\u2013791, Granada, Spain, 2011.   \n[23] Valerio Perrone and Huibin Shen. Learning search spaces for Bayesian optimization: Another view of hyperparameter transfer learning. In Advances in Neural Information Processing Systems 32 (NeurIPS\u201919), pages 12751\u201312761, Vancouver, Canada, 2019.   \n[24] Sebastian Pineda-Arango, Hadi S. Jomaa, Martin Wistuba, and Josif Grabocka. HPO-B: A large-scale reproducible benchmark for black-box HPO based on openml. In Advances in Neural Information Processing Systems 34 (NeurIPS\u201921), Virtual, 2021.   \n[25] Anil Ramachandran, Sunil Gupta, Santu Rana, and Svetha Venkatesh. Selecting optimal source for transfer learning in Bayesian optimisation. In Proceedings of the 15th Pacific Rim International Conference on Artificial Intelligence (PRICAI\u201918), pages 42\u201356, Nanjing, China, 2018.   \n[26] Carl Edward Rasmussen and Christopher K. I. Williams. Gaussian Processes for Machine Learning. The MIT Press, 2006.   \n[27] Esteban Real, Alok Aggarwal, Yanping Huang, and Quoc V. Le. Regularized evolution for image classifier architecture search. In Proceedings of the 33rd AAAI Conference on Artificial Intelligence (AAAI\u201919), pages 4780\u20134789, Honolulu, HI, 2019.   \n[28] Nicolas Schilling, Martin Wistuba, and Lars Schmidt-Thieme. Scalable hyperparameter optimization with products of Gaussian process experts. In Proceedings of the 27th Machine Learning and Knowledge Discovery in Databases: European Conference (ECML/PKDD\u201916), pages 199\u2013214, Riva del Garda, Italy, 2016.   \n[29] Bobak Shahriari, Kevin Swersky, Ziyu Wang, Ryan P. Adams, and Nando de Freitas. Taking the human out of the loop: A review of Bayesian optimization. Proceedings of the IEEE, 104 (1):148\u2013175, 2016.   \n[30] Yunqi Shi, Ke Xue, Lei Song, and Chao Qian. Macro placement by wire-mask-guided black-box optimization. In Advances in Neural Information Processing Systems 36, New Orleans, LA, 2023.   \n[31] Alistair Shilton, Sunil Gupta, Santu Rana, and Svetha Venkatesh. Regret bounds for transfer learning in Bayesian optimisation. In Proceedings of the 20th International Conference on Artificial Intelligence and Statistics (AISTATS\u201917), pages 307\u2013315, Fort Lauderdale, FL, 2017.   \n[32] David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Vedavyas Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy P. Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. Mastering the game of Go with deep neural networks and tree search. Nature, 529(7587):484\u2013489, 2016.   \n[33] David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy P. Lillicrap, Karen Simonyan, and Demis Hassabis. Mastering chess and shogi by self-play with a general reinforcement learning algorithm. arXiv:1712.01815, 2017.   \n[34] David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, Yutian Chen, Timothy P. Lillicrap, Fan Hui, Laurent Sifre, George van den Driessche, Thore Graepel, and Demis Hassabis. Mastering the game of Go without human knowledge. Nature, 550(7676):354\u2013359, 2017.   \n[35] Lei Song, Ke Xue, Xiaobin Huang, and Chao Qian. Monte carlo tree search based variable selection for high dimensional bayesian optimization. In Advances in Neural Information Processing Systems 35(NeurIPS\u201922), New Orleans, LA, 2022.   \n[36] Niranjan Srinivas, Andreas Krause, Sham M. Kakade, and Matthias W. Seeger. Informationtheoretic regret bounds for Gaussian process optimization in the bandit setting. IEEE Transactions on Information Theory, 58(5):3250\u20133265, 2012.   \n[37] Kevin Swersky, Jasper Snoek, and Ryan Prescott Adams. Multi-task Bayesian optimization. In Advances in Neural Information Processing Systems 26 (NeurIPS\u201913), pages 2004\u20132012, Lake Tahoe, NV, 2013.   \n[38] Petru Tighineanu, Kathrin Skubch, Paul Baireuther, Attila Reiss, Felix Berkenkamp, and Julia Vinogradska. Transfer learning with Gaussian processes for Bayesian optimization. In Proceedings of the 25th International Conference on Artificial Intelligence and Statistics (AISTATS\u201922), pages 6152\u20136181, Virtual, 2022.   \n[39] Brandon Trabucco, Xinyang Geng, Aviral Kumar, and Sergey Levine. Design-bench: Benchmarks for data-driven offilne model-based optimization. In Proceedings of the 39th International Conference on Machine Learning (ICML\u201922), pages 21658\u201321676, Baltimore, MD, 2022.   \n[40] Michael Volpp, Lukas P. Fr\u00f6hlich, Kirsten Fischer, Andreas Doerr, Stefan Falkner, Frank Hutter, and Christian Daniel. Meta-learning acquisition functions for transfer learning in Bayesian optimization. In Proceedings of the 8th International Conference on Learning Representations (ICLR\u201920), Addis Ababa, Ethiopia, 2019.   \n[41] Linnan Wang, Saining Xie, Teng Li, Rodrigo Fonseca, and Yuandong Tian. Sample-efficient neural architecture search by learning action space. arXiv:1906.06832, 2019.   \n[42] Linnan Wang, Yiyang Zhao, Yuu Jinnai, Yuandong Tian, and Rodrigo Fonseca. Alphax: exploring neural architectures with deep neural networks and monte carlo tree search. arXiv:1903.11059, 2019.   \n[43] Linnan Wang, Rodrigo Fonseca, and Yuandong Tian. Learning search space partition for black-box optimization using monte carlo tree search. In Advances in Neural Information Processing Systems 33 (NeurIPS\u201920), pages 19511\u201319522, Virtual, 2020.   \n[44] Zi Wang, Clement Gehring, Pushmeet Kohli, and Stefanie Jegelka. Batched large-scale Bayesian optimization in high-dimensional spaces. In Proceedings of 21st International Conference on Artificial Intelligence and Statistics (AISTATS\u201918), pages 745\u2013754, Playa Blanca, Spain, 2018.   \n[45] Ying Wei, Peilin Zhao, and Junzhou Huang. Meta-learning hyperparameter performance prediction with neural processes. In Proceedings of the 38th International Conference on Machine Learning (ICML\u201921), pages 11058\u201311067, Virtual, 2021.   \n[46] James T. Wilson, Riccardo Moriconi, Frank Hutter, and Marc Peter Deisenroth. The reparameterization trick for acquisition functions. arXiv:1712.00424, 2017.   \n[47] Martin Wistuba and Josif Grabocka. Few-shot Bayesian optimization with deep kernel surrogates. In Proceedings of the 9th International Conference on Learning Representations (ICLR\u201921), Virtual, 2021.   \n[48] Martin Wistuba, Nicolas Schilling, and Lars Schmidt-Thieme. Learning hyperparameter optimization initializations. In Proceedings of the 2nd IEEE International Conference on Data Science and Advanced Analytics (DSAA\u201915), pages 1\u201310, Paris, France, 2015.   \n[49] Martin Wistuba, Nicolas Schilling, and Lars Schmidt-Thieme. Hyperparameter search space pruning - A new component for sequential model-based hyperparameter optimization. In Proceedings of the 26th Machine Learning and Knowledge Discovery in Databases: European Conference (ECML/PKDD\u201915), pages 104\u2013119, Porto, Portugal, 2015.   \n[50] Martin Wistuba, Nicolas Schilling, and Lars Schmidt-Thieme. Two-stage transfer surrogate model for automatic hyperparameter optimization. In Proceedings of the 27th Machine Learning and Knowledge Discovery in Databases: European Conference (ECML/PKDD\u201916), pages 199\u2013 214, Riva del Garda, Italy, 2016.   \n[51] Martin Wistuba, Nicolas Schilling, and Lars Schmidt-Thieme. Scalable Gaussian process-based transfer surrogates for hyperparameter optimization. Machine Learning, 107:43\u201378, 2017.   \n[52] Jian Wu and Peter Frazier. Practical two-step lookahead bayesian optimization. In Advances in Neural Information Processing Systems 32 (NeurIPS\u201919), 2019.   \n[53] Shangda Yang, Vitaly Zankin, Maximilian Balandat, Stefan Scherer, Kevin T. Carlberg, Neil Walton, and Kody J. H. Law. Accelerating look-ahead in bayesian optimization: Multilevel monte carlo is all you need. In Proceedings of the 41st International Conference on Machine Learning (ICML\u201924), Vienna, Austria, 2024.   \n[54] Xin-She Yang and Suash Deb. Eagle strategy using l\u00e9vy walk and firefly algorithms for stochastic optimization. In Proceedings of the 4th Nature Inspired Cooperative Strategies for Optimization (NICSO\u201910), pages 101\u2013111, Granada, Spain, 2010.   \n[55] Quanming Yao, Mengshuo Wang, Hugo Jair Escalante, Isabelle Guyon, Yi-Qi Hu, Yu-Feng Li, Wei-Wei Tu, Qiang Yang, and Yang Yu. Taking human out of learning applications: A survey on automated machine learning. arXiv:1810.13306, 2018.   \n[56] Barret Zoph and Quoc V. Le. Neural architecture search with reinforcement learning. In Proceedings of the 5th International Conference on Learning Representations (ICLR\u201917), Toulon, France, 2017. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Treeify Pseudocode ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "To maintain the property that the potential of the left child should exceed the potential of the right child for each node, tree reconstruction should be implemented in each iteration. The process of adjusting the tree structure, i.e., deleting and reconstructing subtrees that violate the desired property, is called Treeify. The pseudocode is provided below, as shown in Algorithm 2. ", "page_idx": 14}, {"type": "table", "img_path": "T5UfIfmDbq/tmp/5074e8964b268f844101da68c50fcffe5e6bd98623d5298bee8230f6d64cda65.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "B Detailed settings ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "B.1 Algorithms ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We use the authors\u2019 reference implementations for LA-MCTS3, Box- $\\mathrm{GP^{4}}$ , Ellipsoid- $\\mathbf{\\deltaGP}^{5}$ , Supervised$\\mathrm{GP^{6}}$ and $\\mathrm{PFNs4BO^{7}}$ . The hyper-parameters of all compared algorithms are summarized as follows: ", "page_idx": 14}, {"type": "text", "text": "\u2022 GP-EI. We use the GP model in Scikit-learn8 and the ExpectedImprovement acquisition [46]. The kernel is set to be ConstantKernel(1.0)\\*Matern(length_scale $=\\!1.0$ , $\\scriptstyle\\mathrm{nu}=2.5$ ). To optimize the acquisition function, we generate 10000 points randomly and then select the one with the maximum expected improvement to be evaluated, which is similar to LA-MCTS [43]. \u2022 LA-MCTS [43]. We set $C_{p}=0.1,\\theta=10.$ . We adopt global GP as the modeling approach. SVM with rbf kernel is used for space division in Sphere2D, BBOB, and HPOB, while Logistic Regression is applied for real-world problems. In the sampling process, we sample the entire space 10,000 times, retaining qualifying candidate points, and repeat this process three times. The parameters of GP are consistent with GP-EI. All other parameters are set to their default values. \u2022 Supervised-GP. The sampling process is consistent with LA-MCTS. The parameters of GP are consistent with GP-EI. All other parameters are set to their default values. ", "page_idx": 14}, {"type": "text", "text": "\u2022 Box-GP. The sampling process is consistent with LA-MCTS. The parameters of GP are consistent with GP-EI. All other parameters are set to their default values. \u2022 Ellipsoid-GP. The sampling process is consistent with LA-MCTS. The parameters of GP are consistent with GP-EI. All other parameters are set to their default values. \u2022 MCTS-transfer-GP. We set $\\gamma=0.99,\\alpha=0.5.$ We adopt 5 best solutions distance as similarity measure and linear-change strategy as weight assignment. Other parameters and sampling method is consistent with LA-MCTS. The parameters of GP are consistent with GP-EI. \u2022 PFN. We set epochs $=5000$ , batch size $=256$ , learning rate $\\mathrel{\\mathop:}=\\!3\\mathrm{e}{-4}$ , warm up steps $=100$ , model dimension $=256$ , head $=4$ , layer number $=4$ , hidden layer size $=256$ , dropout $=\\!0.1$ . ", "page_idx": 15}, {"type": "text", "text": "B.2 Problems ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We consider the following three real-world problems in our experiments. ", "page_idx": 15}, {"type": "text", "text": "LunarLander.9 This problem is to learn the parameters of a controller for a lunar lander, which is implemented in OpenAI gym.10 It involves a 12-dimensional continuous input space depicting the lander\u2019s actions. Our goal is to enhance the control algorithm to maximize the mean terminal reward across a consistent batch of 50 randomly generated landscapes, incorporating varying initial positions and velocities. ", "page_idx": 15}, {"type": "text", "text": "RobotPush.11 This function computes the distance between a predefined target location and two objects that are manipulated by a pair of robotic appendages. The movement trajectory of these objects is governed by a set of 14 parameters, which encapsulate attributes such as position, orientation, speed, and direction of motion. We need to control the robot to push items to a designated location. This is implemented with a physics engine ${\\bf B o x}2{\\bf D}^{12}$ . ", "page_idx": 15}, {"type": "text", "text": "Rover.13 The task optimizes 2D trajectories for a rover by defining start and goal positions and a cost function over the state space [44]. The trajectory costs $c(x)$ is computed for solutions $x$ within a 60-dimensional unit hypercube. We need to design a reasonable trajectory to minimize the cost. ", "page_idx": 15}, {"type": "text", "text": "To verify the performance of MCTS-tranfer in more complex and high-dimensional cases, we consider the 3 continuous problems from Design-Bench14 [39]. ", "page_idx": 15}, {"type": "text", "text": "Superconductor. It\u2019s a critical temperature maximization for superconducting materials. This task is taken from the domain of materials science, where the goal is to design the chemical formula for a superconducting material that has a high critical temperature. The search space is a continuous space with 86 dimensions. ", "page_idx": 15}, {"type": "text", "text": "Ant morphology. It\u2019s a robot morphology optimization. The goal is to optimize the morphological structure of Ant from OpenAI Gym15 to make this quadruped robot to run as fast as possible. The search space is a continuous space with 60 dimensions. ", "page_idx": 15}, {"type": "text", "text": "D\u2019Kitty Morphology. It\u2019s robot morphology optimization. The goal is to optimize the morphology of D\u2019Kitty robot to navigate the robot to a fixed location. The search space is a continuous space with 56 dimensions. ", "page_idx": 15}, {"type": "text", "text": "B.3 Source Task Data Construction for Similar and Mixed Transfer ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Data collection The source task data for pre-training is generated by seven optimization algorithms: Random Search [3], Shuffled Grid Search, Hill Climbing, Regularized Evolution [27], Eagle Strategy [54], and GP-EI [12]. These methods span heuristic, evolutionary, and BO techniques, providing a diverse set of optimization behaviors for our analysis. ", "page_idx": 15}, {"type": "text", "text": "BBOB In order to obtain similar source task data of function $f$ , we perform some similar transformations on $f$ to obtain function family ${\\mathcal{F}}_{f}$ with seed from 0 to 499. Then we use the sampling algorithms mentioned above with randomly selected seed to collect 300 samples on each function in ${\\mathcal{F}}_{f}$ . In this section, we randomly select 20 datasets from datasets of ${\\mathcal{F}}_{f}$ for function $f$ . In the similar setting, We only use selected datasets of ${\\mathcal{F}}_{f}$ . In mixed setting, we use selected datasets of all 5 synthetic functions. ", "page_idx": 16}, {"type": "text", "text": "Real-world problems and Design-Bench problems Since it is difficult to find data with the same dimensions in real-world problems, we choose to use the artificial function Sphere of the same dimension to generate similar data and dissimilar data and mix it into the source task data set. Among them, to simulate similar functions, we set the optimal point $x^{*}$ of the sphere function to be the optimal point of all these algorithms found so far; the optimal point of the Sphere function that simulates dissimilar functions is set to $1-x^{*}$ . In the similar setting, we randomly select 20 trajectories from the problem with different seeds and function transformations, combined with data generated by similar sphere function, as the dataset. In the mixed setting, we further add 7 trajectories from dissimilar sphere function. In this section, it is a problem with significantly more similar source tasks than dissimilar tasks. ", "page_idx": 16}, {"type": "text", "text": "HPOB We choose search spaces from HPO-B-v3 and divide them into 4 groups based on dimensions. Specailly, we obtain group 5860 and 5970 with dimension 2, group 5859 and 5889 with dimension 5, group 7607 and 7609 with dimension 9, group 5806 and 5971 with dimension 16. In the similar setting, we only use the training data from the search space itself for pre-learning. In the mixed setting, we use all training data of search spaces in the same group. ", "page_idx": 16}, {"type": "text", "text": "C Discussions of methods ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "C.1 Task Similarity ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Measuring the similarity of two tasks based on the dataset of a source task $D_{i}$ and the dataset of the target task $D_{T}$ is a complex task. We define task distance as a measure of similarity. Smaller distances between tasks represent greater similarity. Here we mainly focus on two types of methods: point-based similarity measures and distribution-based similarity measures. The former includes optimal solutions distance, best $N$ solutions mean distance, best $N$ percent solutions mean distance; and the latter includes Kendall coefficient of datasets, Kullback-Leibler Divergence(KL Divergence) of distributions. Detailed description are as follows: ", "page_idx": 16}, {"type": "text", "text": "Optimal solutions distance Let $x_{T}^{*}$ be the best solution of target task, and $\\pmb{x}_{i}^{*}$ be the best solution of target task. The task distance is calculated as Distance $(x_{T}^{*},x_{i}^{*})$ . ", "page_idx": 16}, {"type": "text", "text": "Best N (or N percent) solutions mean distance Similar to optimal solutions distance, we replace $\\pmb{x}_{i}^{*}$ and $\\pmb{x}_{i}^{*}$ with the mean of best $_\\mathrm{N}$ (or $_\\mathrm{N}$ percent) of target task and source task $i$ , denoted as $\\bar{\\pmb{x}}_{T}^{*}$ and $\\bar{\\pmb{x}}_{i}^{*}$ . The task distance is $D i s t a n c e(\\bar{\\pmb{x}}_{T}^{*},\\bar{\\pmb{x}}_{i}^{*})$ . Intuitively, it\u2019s more robust than directly using the best solution. ", "page_idx": 16}, {"type": "text", "text": "Kendall coefficient Kendall coefficient is a measure of rank correlation, which can be used to evaluate the consistency of two datasets. We first build a surrogate model (usually GP) $M_{i}$ on $D_{i}$ , and then predict all sample values in $D_{T}$ . According the ranking results of all these data, we get the similarity of the two tasks by Eq (5), where $\\mathbb{I}$ is the indicator function and $\\bigoplus$ is the exclusive-nor operation, in which the statement value is true only if the two sub-statements return the same value. ", "page_idx": 16}, {"type": "equation", "text": "$$\nD i s t a n c e(D_{T},D_{i})=\\frac{2\\sum_{j=1}^{|D_{T}|}\\sum_{k=j+1}^{|D_{T}|}\\mathbb{I}\\left(\\left(M_{i}\\left(x_{T,j}\\right)<M_{i}\\left(x_{T,k}\\right)\\right)\\oplus\\left(y_{T,j}<y_{T,k}\\right)\\right)}{|D_{T}|*\\left(|D_{T}|-1\\right)}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "KL divergence of distribution KL divergence is a measure of the dissimilarity between two probability distributions, usually expressed as Eq. (6). For $D_{T}$ and $D_{i}$ , we first use Guassian KDE to estimate their density of distribition, denoted as $p$ and $q$ . Then we sample a set of $\\{{\\pmb x}_{i}\\}_{i=1}^{n}$ in $\\Omega$ and ", "page_idx": 16}, {"type": "text", "text": "evaluate them. KL divergence is calculated based on $\\{p(x)\\}_{i=1}^{n}$ and $\\{(q(x)\\}_{i=1}^{n}$ ", "page_idx": 17}, {"type": "equation", "text": "$$\nD i s t a n c e(D_{T},D_{i})=K L(p\\|q)=\\sum_{x}p(x)\\log{\\frac{p(x)}{q(x)}}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "C.2 Weight Assignment ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Based on the similarity between the source tasks and the target task, we can rank the source tasks, and the smaller rank $r_{i}$ means higher weight assigned. We can choose different weight change strategies, for example, Linear Change Strategy in Eq. (7) , Exponential Change Strategy in Eq. (8) or All One Strategy, i.e., all source task weights are set to be 1, to control the proportion of influencial source tasks. ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{w_{i}=\\left\\{\\!\\!\\begin{array}{l l}{\\!1.0-\\frac{r_{i}}{\\alpha N_{m}}}&{\\mathrm{if~}r_{i}<\\alpha N_{m}}\\\\ {\\!0.1}&{\\mathrm{otherwise}}\\end{array}\\!\\!\\right.,}\\\\ {w_{i}=\\beta^{r_{i}},0\\le r_{i}\\le N_{m}-1}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "In Eq. (7), $N_{m}$ is the number of source tasks that have solutions located in $\\Omega_{m}$ , and $\\alpha\\,\\in\\,[0,1]$ controls the proportion. In Eq. (8), $\\beta\\in[0,1]$ is a hyper-parameter of weight change speed. ", "page_idx": 17}, {"type": "text", "text": "C.3 Discussion on Conditional search space. ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "MCTS-transfer can also be applied in conditional search space, which is common in hyper-parameter optimization. For conditional optimization, we consider the problem $\\scriptstyle\\operatorname*{min}_{\\mathbf{x}\\in\\mathcal{X}\\subset\\mathbb{R}^{d}}{f(\\mathbf{x})}$ . Specifically, the search space is tree-structured, formulated as $\\mathcal{T}=\\{V,E\\}$ , where $v\\in V$ is a node representing subspace and $e\\in E$ is an edge representing condition. The objective function is also defined based on $\\tau$ , formulated as $f_{\\mathcal T}(\\pmb{x}):=f_{p_{j},\\mathcal T}^{\\mathcal-}(\\pmb{x}|l_{j})$ , where $p_{j}$ is a condition and $\\pmb{x}|l_{j}$ is the restriction of $\\textbf{\\em x}$ to $l_{j}$ [18]. In the pre-learning stage, it builds subtrees for each $v\\in V$ and generates the MCTS model ${\\dot{\\mathcal{T}}}^{\\prime}$ based on $\\tau$ . In each iteration, followed by UCB value, it finds the target node $m$ located in the subtree of $v$ with condition $p_{i}$ , optimizes in $\\Omega_{m}$ , selects and evaluates the candidate using $f_{p_{i},\\tau}(\\pmb{x}|l_{i})$ . After that, it updates the task weights and node potential in the whole tree $\\mathcal{T}^{\\prime}$ and tries to reconstruct the tree. Note that the tree reconstruction only happens in each subtree of $v\\in V$ . ", "page_idx": 17}, {"type": "text", "text": "C.4 Discussion between the state value in MCTS of AlphaZero and MCTS-Transfer. ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "MCTS measures state value differently in reinforcement learning and black box optimization. For example, AlphaZero [33] is designed to master complex games through self-play without relying on human knowledge or guidance. MCTS plays a crucial role in AlphaZero\u2019s decision-making process, whose state value is used to predict the expected future reward from the current state to the end, rather than the historical information. Different from that a state\u2019s future reward of AlphaZero can be obtained through multi-step simulations, i.e., alternating decisions through self-play, evaluation values in BBO can only be obtained through actual evaluations. Consequently, MCTS-transfer utilizes historical information. We have observed that some recent look-ahead BO works [52, 53] have been used to predict the expected value of future steps in BBO problems, which have the potential to be applied in MCTS-transfer as estimates for state values to further improve the performance. ", "page_idx": 17}, {"type": "text", "text": "C.5 Discussion of combining MCTS-transfer with other advanced algorithms ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "MCTS-transfer is a general search space transfer learning framework, which can be combined with other advanced algorithms. We equip MCTS-transfer with PFN and test MCTStransfer-PFN on mixed real-world problems. As shown in Figure 6, MCTS-transfer-PFN makes further improvements compared to MCTStransfer-GP and PFN after around 80 iterations, and its ranking is stable and excellent throughout the optimization. This result demonstrates the versatility of MCTS-transfer combining with advanced BO algorithms. ", "page_idx": 17}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/6d6c0c56cbfe405858682bc2ecc2531428910e6f5ea95e86a9f813c95f11275c.jpg", "img_caption": [], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "Figure 6: Experimental results on mixed real world problems (with MCTS-transfer-PFN) ", "page_idx": 17}, {"type": "text", "text": "D Sensitivity Analysis of Hyper-parameters of MCTS-transfer ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Main hyper-parameters of MCTS-transfer includes modeling approach, similarity measures, weight assignment strategies, decay factor $\\gamma$ , important source task ratio $\\alpha$ , exploration factor $C_{p}$ , spliting threshold $\\theta$ and the binary classifier. We conduct sensitivity analysis of these important parameters on real-world problems LunarLander, RobotPush, Rover under mixed setting. ", "page_idx": 18}, {"type": "text", "text": "Modeling approach In MCTS-transfer, we can choose to train GP on full $D_{T}$ dataset or on the selected points in $\\Omega_{m}$ . As shown in Figure 7, the global GP can utilize more global information, demonstrating enhanced search capabilities in these three problems. ", "page_idx": 18}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/4b38b32d97352e3e5a63764134d1f37ab0bb0cd4c4e7bb81a24239a9edff6cda.jpg", "img_caption": [""], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "Similarity measures We propose 5 similarity measures in this paper, including optimal solutions distance, best N or $_\\mathrm{N}$ percent solutions mean distance, Kendall coefficient and KL divergence, as C.1 displayed. The first three methods are point-based measures and the last three are distribution-based methods. Here we set $_{\\mathrm{N}=5}$ and $\\scriptstyle\\mathrm{N}=30\\%$ separately for best N solutions and best N percent solutions, and use Gaussian KDE to evaluate KL divergence of distributions. The results can be seen in Figure 8. The distribution-based methods give more precise measure of similarity, but the point-based methods are designed to focus on the optimal region. Each problem has its own suitable measure of similarity. In mixed transfer real-world problems, KL divergence is more appropriate to the problem. ", "page_idx": 18}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/ed5d79276bb57976ed9828fed88c0acef6fe30dbd4a4c346effbeabb5ee56a38.jpg", "img_caption": ["Weight assignment To assign weights to source tasks, we consider three strategies: linear-change strategy(i.e., Eq. (7)), the exponential-change strategy (i.e., Eq. (8)) and all-one strategy. We set $\\alpha=0.5$ for linear-change strategy, $\\beta=0.5$ for exponential-change strategy. As shown in Figure 10, ", ""], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "the exponential-change strategy, since the weight decaying rapidly with the rank, can only effectively leverages the 1-3 source datasets. So it tends to have faster convergence speed if the similar tasks are effectively identified at the initial stage, as demonstrated in Rover. The all-one strategy are easy to be disturbed by dissimilar data but can fully utilize information, so it may have a higher convergence value at later stage. The linear-change strategy is relatively more stable because it takes the advantages of the above two strategies into account. ", "page_idx": 19}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/bd20a27ccce56eff8d218afed7dbcdfea86f7d73b0b71cf6f5cb53cbbc43beea.jpg", "img_caption": ["Figure 9: Sensitivity Analysis of Weight Change Strategy "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Decay factor $\\gamma$ . The decay factor $\\gamma$ is used to control the influence of source tasks. A higher decay factor $\\gamma$ results in a quicker decay of source tasks\u2019 influence, thus making the node potential rely more on the target task\u2019s data. However, an excessively rapid decay of source task lead unstable evaluation outcomes and under-utilization of source task data. Specially, for the nodes preferred by source tasks, if they can\u2019t be selected as the sampling node at first, their potential will decrease rapidly and these nodes will be less likely to be selected. The analysis experiment of $\\gamma$ can be seen in figure 10, and the result is as expected. The curves of MCTS-transfer with $\\gamma=0.99$ and $\\gamma=1.0$ overlap, better than $\\gamma=0.1$ in most cases, due to data exploitation. And an appropriate decay factor will help to combine information from source and target tasks to accelerate optimization. ", "page_idx": 19}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/4ac03bc3217e7dbb718bea4a1a20fd221793b7a41bf3caf85f7511c8cbe0dcb1.jpg", "img_caption": ["Figure 10: Sensitivity Analysis of Decay Factor $\\gamma$ "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Important source task ratio $\\alpha$ In linear-change strategy, we can set $\\alpha$ to determine the ratio of important source tasks that have high weights. We choose $\\alpha=10\\%$ , $50\\%$ and $100\\%$ and he result is shown in Figure 11. A higher $\\alpha$ means that more source tasks are influencial on the evaluation of the tree node potential. However, this also increases the risk of the interference from dissimilar data. MCTS-transfer with a smaller $\\alpha$ only trusts the most similar tasks and under-utilizing information from the source task, leading to slower convergence in early stage. ", "page_idx": 19}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/719852c831e3b3416eb699c09b765099ee52c90ea372d386ace8335f0a00c0d9.jpg", "img_caption": ["Figure 11: Sensitivity Analysis of Important Source Task Ratio $\\alpha$ "], "img_footnote": [], "page_idx": 20}, {"type": "text", "text": "Exploration factor $C_{p}$ $C_{p}$ controls the degree of exploration. A large $C_{p}$ prompts the MCTStransfer to select less promising regions, enhancing exploration. As shown in the Figure 12, too big $C_{p}$ results in the reduction of exploit useful information, as the algorithm overexploits less promising areas, leading to slower convergence. ", "page_idx": 20}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/277740312c529fe8fbc167831edf635392eaf0905b2fb54e4cee92b7015f44fb.jpg", "img_caption": ["Figure 12: Sensitivity Analysis of Exploration Factor $C_{p}$ "], "img_footnote": [], "page_idx": 20}, {"type": "text", "text": "The splitting threshold $\\theta$ The threshold $\\theta$ controls the depth of the tree: a node is only allowed to be further divided when it contains more solutions than $\\theta$ . A smaller $\\theta$ leads to a deeper tree. In our experiment (Figure 13), $\\theta=100$ means the tree nodes won\u2019t be splitted in the optimization, so the suggesting search space will be bigger, which is less efficient. ", "page_idx": 20}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 20}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/a206da9fffe9d374e67c1cf0d4e1b751616234a412e9c78e39d60128a1ce317b.jpg", "img_caption": ["Figure 13: Sensitivity Analysis of The Splitting Threshold $\\theta$ "], "img_footnote": [], "page_idx": 20}, {"type": "text", "text": "Binary classifier The binary classifier decides the boundary of \u201dgood\u201d and \u201dbad\u201d clusters. We try the following classifiers: Logistic Regression and SVM (with rbf, linear, or poly kernel). According to the results in Figure 14, SVM with linear kernel and Logistic Regression give more effective search space partition. We can choose a binary classifier with higher partition efficiency according to specific scenarios. ", "page_idx": 21}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/6ed56505530a2d51c15c2bcd90c0b3f9a258b8a6410a7a950e41db3e625e6970.jpg", "img_caption": ["Figure 14: Sensitivity Analysis of Binary Classifier "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "E Detailed experimental results ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "The evaluation result curves on BBOB, real-world problems and Design-Bench are summarized in figures 15 and 16. The curves of HPOB in similar setting and mixed setting are shown in figure 18 and figure 19, and the format of subfigure titles is {search space id}-{dataset id}-{Simialr/Mixed}. ", "page_idx": 22}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/36c0eb5ab23b7ca3f823e337b2870e92ca6b4c1bc4242ec907a747db5098af8d.jpg", "img_caption": ["Figure 15: Evaluations of MCTS-transfer and other algorithms on BBOB "], "img_footnote": [], "page_idx": 22}, {"type": "text", "text": "GP LA-MCTS Box-GP Ellipsoid-GP Supervised-GP PFN MCTS-tranfer-GP ", "page_idx": 23}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/fcf649e4588e3848e6bb611823b20ca3383137fe046204b59bce72d242cb80c6.jpg", "img_caption": [], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "Figure 16: Evaluations of MCTS-transfer and other algorithms on Real-world Problems ", "page_idx": 23}, {"type": "text", "text": "GP LA-MCTS Box-GP Ellipsoid-GP Supervised-GP PFN MCTS-tranfer-GP ", "page_idx": 23}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/a9b2ae269705a13ac04082ad39d82ef8f8cacd5c6f773fd3cf5e5da566b7766f.jpg", "img_caption": ["Figure 17: Evaluations of MCTS-transfer and other algorithms on Design-Bench "], "img_footnote": [], "page_idx": 23}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/8bac1ef65bd4e7612d475a736ef34b49d0afd0b8e91d6b9a27ccbf8fa440e328.jpg", "img_caption": ["Figure 18: Evaluations of MCTS-transfer an2d5 other algorithms on HPOB in similar setting "], "img_footnote": [], "page_idx": 24}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/f0c9b13c3c1c78ba48d965622ab5350ffa49c3a6044a4b4b2ca12f6b4c001dcb.jpg", "img_caption": ["Figure 19: Evaluations of MCTS-transfer an2d6 other algorithms on HPOB in mixed setting "], "img_footnote": [], "page_idx": 25}, {"type": "text", "text": "F Details of runtime analysis ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "In order to analysis the additional computational overhead introduced by MCTS-transfer, we calculate the time cost and the corresponding proportion of each component, and record the frequency of subtree reconstruction in each iteration. ", "page_idx": 26}, {"type": "text", "text": "Specifically, we divide MCTS-transfer into three main components: evaluation, backpropagation and reconstruction. The evaluation component includes the time required for surrogate model ftiting, candidate solution selection and evaluation, which is a common component shared by all compared optimization algorithms. Backpropagation and reconstruction components are the two principal modules specific to MCTS-transfer. ", "page_idx": 26}, {"type": "text", "text": "We test MCTS-transfer on BBOB benchmark and three real-world tasks (i.e., LunarLander, RobotPush, and Rover). Among them, the evaluation process of the real-world tasks is more time-consuming and the evaluation cost of BBOB are relatively cheaper. ", "page_idx": 26}, {"type": "text", "text": "As illustrated in Figure 20, the additional computational burden introduced by MCTS-transfer (i.e., backpropagation and reconstruction) represents a relatively minor fraction of the total runtime, particularly in the three real-world scenarios. These scenarios precisely exemplify the computationally intensive cases that transfer BO is designed to address, wherein MCTS-transfer demonstrates small additional computational overhead.Furthermore, our result reveals that the average frequency of tree reconstructions is low, with the corresponding reconstruction time being almost negligible when compared to the evaluation time. ", "page_idx": 26}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/785a35630a72992683917d78bb894d286af71051bbb90d0bb2045e56abf3613c.jpg", "img_caption": ["Figure 20: Time cost of different components in MCTS-transfer. The top row: the time proportion of components in optimization. The middle row: the time cost of components in each iteration (avg\u00b1std). The bottom row: the number of subtree reconstructions/reconstruction times in each iteration (avg\u00b1std). "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "G Visualization of Weight Change Curve of Source Tasks ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Here we show the weight change curve of three mixed real-world problems. We set the weight assignment stategy to be the linear change strategy with $\\alpha=0.5$ and the decay factor to be $\\gamma=0.99$ . Figure 21 shows that the weights of real-world problem and similar sphere problem exceed those of dissimilar sphere problem in most cases, regardless of any inconsistencies in initialization. The results prove that the weight change strategy can prioritize similar source task data, which will lead to more accurate node potential evaluation and search space partition. ", "page_idx": 27}, {"type": "image", "img_path": "T5UfIfmDbq/tmp/bb67c8a7485147fbc4e0a4d18d6db59bc355a33a427e255654dc7b77182f52c3.jpg", "img_caption": ["Figure 21: Weight Changes: MCTS-transfer "], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: Both the abstract and introduction accurately reflect the paper\u2019s contributions and scope. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 28}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Justification: The limitations are proposed in the Conclusion section. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 28}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 28}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 28}, {"type": "text", "text": "Justification: The paper does not include theoretical results. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 29}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: The detailed information is provided in Appendix B and C. Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 29}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We will submit code, data and instructions, and we will release the code. Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 30}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: The detailed information is provided in Appendix B and C. Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 30}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Justification: The error bars are already shown in figures in paper. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 30}, {"type": "text", "text": "", "page_idx": 31}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 31}, {"type": "text", "text": "Answer: [No] ", "page_idx": 31}, {"type": "text", "text": "Justification: We didn\u2019t provide computing resource-related content in the article because that content is not relevant to the topic of the paper. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 31}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: Our research conform with the NeurIPS Code of Ethics. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 31}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We describe it in introduction part. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 32}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: The paper poses no such risks. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 32}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: We correctly cite the origin paper and sources. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 32}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 33}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not release new assets. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 33}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 33}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 33}]