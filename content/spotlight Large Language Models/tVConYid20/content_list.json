[{"type": "text", "text": "FlashAttention-3: Fast and Accurate Attention with Asynchrony and Low-precision ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Jay Shah\u22171, Ganesh Bikshandi\u22171, Ying Zhang 2, Vijay Thakkar 3,4, Pradeep Ramani 3, Tri Dao5,6 Colfax Research, 2 Meta, 3 NVIDIA, 4 Georgia Institute of Technology 5 Princeton University, 6 Together AI {jayhshah,ganesh}@colfax-intl.com, yingz@meta.com, {vithakkar,prraman}@nvidia.com, tri@tridao.me ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Attention, as a core layer of the ubiquitous Transformer architecture, is the bottleneck for large language models and long-context applications. FLASHATTENTION elaborated an approach to speed up attention on GPUs through minimizing memory reads/writes. However, it has yet to take advantage of new capabilities present in recent hardware, with FLASHATTENTION-2 achieving only $35\\%$ utilization on the H100 GPU. We develop three main techniques to speed up attention on Hopper GPUs: exploiting asynchrony of the Tensor Cores and TMA to (1) overlap overall computation and data movement via warp-specialization and (2) interleave block-wise matmul and softmax operations, and (3) block quantization and incoherent processing that leverages hardware support for FP8 low-precision. We demonstrate that our method, FLASHATTENTION-3, achieves speedup on H100 GPUs by $1.5{-}2.0\\times$ with BF16 reaching up to 840 TFLOPs/s $85\\%$ utilization), and with FP8 reaching $1.3~\\mathrm{PFLOPs/s}$ . We validate that FP8 FLASHATTENTION-3 achieves $2.6\\times$ lower numerical error than a baseline FP8 attention. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "For the Transformer architecture [58], the attention mechanism constitutes the primary computational bottleneck, since computing the self-attention scores of queries and keys has quadratic scaling in the sequence length. Scaling attention to longer context will unlock new capabilities (modeling and reasoning over multiple long documents [24, 43, 49] and files in large codebases [30, 47]), new modalities (high-resolution images [10], audio [23], video [25]), and new applications (user interaction with long history [52], agent workflow with long horizon [61]). This has generated significant interest in making attention faster in the long-context regime, including by approximation [13, 27, 55] and software optimization ([16, 29, 45]), or even alternative architectures [22, 42, 54]. ", "page_idx": 0}, {"type": "text", "text": "In this work, we build on the work of Dao et al. [16] on developing exact-attention algorithms that integrate knowledge of the GPU\u2019s execution model and hardware characteristics into their high-level design. In [16], Dao et al. introduced FLASHATTENTION, a novel tiling strategy for parallelizing attention that eliminates intermediate reads/writes to slow global memory through fusing all of the attention operations into a single GPU kernel. Dao [14] restructured the algorithm as FLASHATTENTION-2 to also parallelize over the sequence length dimension and perform the inner loop of the forward pass over blocks of the key and value matrices, thus improving the occupancy and distribution of work on the GPU. However, we observe that FLASHATTENTION-2 nonetheless achieves poor utilization on newer GPUs relative to optimized matrix-multiplication (GEMM) kernels, such as $35\\%$ vs. $80{-}85\\%$ on the Hopper H100 GPU. Partially, this may be attributed to implementation-level differences, such as not using Hopper-specific instructions in place of Ampere ones when targeting the Tensor Cores. Several work such as ThunkerKitten [51] and cuDNN 9 [39] has shown that with Hopper-specific instructions and tile-based abstractions, one can speedup attention computation and simplify the implementation. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "More fundamentally, FLASHATTENTION-2\u2019s algorithm adheres to a simplified synchronous model and makes no explicit use of asynchrony and low-precision in its design. Asynchrony is a result of hardware specialization to accelerate the most important operations in a ML workload: specific hardware units performing matrix multiplication (Tensor Cores) or memory loading (Tensor Memory Accelerator \u2013 TMA), separate from the rest of the CUDA cores performing logic, integer, and floating point computation. Low precision such as FP8 in Hopper and FP4 in Blackwell, continuing the trend of FP16 (Pascal in 2017) and BF16 (Ampere in 2020), is a proven technique to get double or quadruple throughput for the same power and chip area. We review the capabilities afforded by Hopper in these directions in $\\S2.2$ . The technical challenge is to redesign FLASHATTENTION-2 to make use of these hardware features: asynchrony requires overlapping computation between matmul and softmax even though one depends on the output of the other, and low-precision requires care to minimize quantization error, especially in the case of outlier features in LLMs [20, 53]. ", "page_idx": 1}, {"type": "text", "text": "To this end, we propose FLASHATTENTION-3, which contributes and synthesizes three new ideas to further improve performance on newer GPU architectures: ", "page_idx": 1}, {"type": "text", "text": "1. Producer-Consumer asynchrony: We define a warp-specialized software pipelining scheme that exploits the asynchronous execution of data movement and Tensor Cores by splitting producers and consumers of data into separate warps, thereby extending the algorithm\u2019s ability to hide memory and instruction issue latencies. ", "page_idx": 1}, {"type": "text", "text": "2. Hiding softmax under asynchronous block-wise GEMMs: We overlap the comparatively lowthroughput non-GEMM operations involved in softmax, such as floating point multiply-add and exponential, with the asynchronous WGMMA instructions for GEMM. As part of this, we rework the FLASHATTENTION-2 algorithm to circumvent certain sequential dependencies between softmax andtheGEMMs. Forexample, inthe2-stageversionofouralgorithm, whilesoftmaxexecutesonone block of the scores matrix, WGMMA executes in the asynchronous proxy to compute the next block. ", "page_idx": 1}, {"type": "text", "text": "3. Hardware-accelerated low-precision GEMM: We adapt the forward pass algorithm to allow for targeting the FP8 Tensor Cores for GEMM, nearly doubling the measured TFLOPs/s. This requires bridging the different layout conformance requirements of WGMMA in terms of how blocks of FP32 accumulator and FP8 operand matrices are assumed to be laid out in memory. We use the techniques of block quantization and incoherent processing to mitigate the loss of accuracy that results from moving to FP8 precision. ", "page_idx": 1}, {"type": "text", "text": "To validate our method empirically, we benchmark FLASHATTENTION-3 on the H100 SXM5 GPU over a range of parameters and show that (1) BF16 achieves $1.5{-}2.0\\times$ speedup over FLASHATTENTION2 in the forward pass (reaching up to 840 TFLOPs/s) and $1.5\u20131.75\\times$ in the backward pass, (2) FP8 achieves 1.3 PFLOPs/s, and (3) for large sequence length, BF16 outperforms and FP8 is on par compared to the state-of-the-art implementation of attention from NVIDIA\u2019s cuDNN library. We also validate that FP16 FLASHATTENTION-3 yields the same numerical error as FLASHATTENTION-2 and is better than the standard attention implementation as intermediate results (e.g., softmax rescaling) are kept in FP32. Moreover, FP8 FLASHATTENTION-3 with block quantization and incoherent processing is $2.6\\times$ more accurate than standard attention with per-tensor quantization in cases with outlier features. ", "page_idx": 1}, {"type": "text", "text": "We open-source FLASHATTENTION-3 with a permissive license3and plan to integrate it with PyTorch to benefit the largest number of researchers and developers. ", "page_idx": 1}, {"type": "text", "text": "2 Background: Multi-Head Attention and GPU Characteristics ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "2.1 Multi-Head Attention ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Let $\\mathbf{Q},\\mathbf{K},\\mathbf{V}\\in\\mathbb{R}^{N\\times d}$ be the query, key and value input sequences associated to a single head, where $N$ is the sequence length and $d$ is the head dimension. Then the attention output $\\mathbf{o}$ is computed as: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{S}\\!=\\!\\alpha\\mathbf{Q}\\mathbf{K}^{\\top}\\!\\in\\!\\mathbb{R}^{N\\times N},\\quad\\mathbf{P}\\!=\\!\\operatorname{softmax}(\\mathbf{S})\\!\\in\\!\\mathbb{R}^{N\\times N},\\quad\\mathbf{O}\\!=\\!\\mathbf{P}\\mathbf{V}\\!\\in\\!\\mathbb{R}^{N\\times d},}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "where softmax is applied row-wise and one typically sets $\\alpha\\!=\\!1/{\\sqrt{d}}$ as the scaling factor. In practice, we subtract rowmax(S) from S to prevent numerical instability with the exponential function. For ", "page_idx": 1}, {"type": "text", "text": "multi-head attention (MHA), each head has its own set of query, key and value projections, and this computation parallelizes across multiple heads and batches to produce the full output tensor. ", "page_idx": 2}, {"type": "text", "text": "Now let $\\phi$ be a scalar loss function and let $\\mathbf{d}(-)=\\partial\\phi/\\partial(-)$ be notation for the gradient. Given the output gradient $\\mathbf{dO}\\!\\in\\!\\mathbb{R}^{N\\times d}$ , we compute dQ, dK, and dV according to the chain rule as follows: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l r l r l}&{\\mathbf{dV}\\!=\\!\\mathbf{P}^{\\top}\\mathbf{d}\\mathbf{0}\\!\\in\\!\\mathbb{R}^{N\\times d},}&&{\\quad\\mathbf{dP}\\!=\\!\\mathbf{d}\\mathbf{O}\\mathbf{V}^{\\top}\\!\\in\\!\\mathbb{R}^{N\\times N},}&&{}\\\\ &{\\mathbf{dS}\\!=\\!\\mathrm{dsoftmax}(\\mathbf{dP})\\!\\in\\!\\mathbb{R}^{N\\times N},}&&{\\quad\\mathbf{dQ}\\!=\\!\\alpha\\mathbf{dS}\\mathbf{K}\\!\\in\\!\\mathbb{R}^{N\\times d},}&&{\\mathbf{dK}\\!=\\!\\alpha\\mathbf{dS}^{\\top}\\mathbf{Q}\\!\\in\\!\\mathbb{R}^{N\\times d}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Here, we have that $\\mathbf{d}s\\!=\\!(\\mathrm{diag}(p)\\!-\\!p p^{\\top})\\mathbf{d}p$ for $p\\!=\\!\\operatorname{softmax}(s)$ as a function of a vector $s$ , and we write dsoftmax $(\\mathbf{dP})$ for this formula applied row-wise. Finally, this computation again parallelizes across the number of heads and batches for the backward pass of MHA. ", "page_idx": 2}, {"type": "text", "text": "2.2 GPU hardware characteristics and execution model ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We describe the aspects of the GPU\u2019s execution model relevant for FLASHATTENTION-3, with a focus on the NVIDIA Hopper architecture as a concrete instantiation of this model. ", "page_idx": 2}, {"type": "text", "text": "Memory hierarchy: The GPU\u2019s memories are organized as a hierarchy of data locales, with capacity inversely related to bandwidth (Table 1)4. Global memory (GMEM), also known as HBM, is the offchip DRAM accessible to all streaming multiprocessors (SMs). Data from GMEM gets transparently cached into an on-chip L2 cache. Next, each SM contains a small on-chip, programmer-managed highly banked cache called shared memory (SMEM). Lastly, there is the register file within each SM. ", "page_idx": 2}, {"type": "text", "text": "Thread hierarchy: The GPU\u2019s programming model is organized around logical groupings of execution units called threads. From the finest to coarsest level, the thread hierarchy is comprised of threads, warps (32 threads), warpgroups (4 contiguous warps), threadblocks (i.e., cooperative thread arrays or CTAs), threadblock clusters (in Hopper), and grids. ", "page_idx": 2}, {"type": "text", "text": "These two hierarchies are closely interlinked. Threads in the same CTA are co-scheduled on the same SM, and CTAs in the same cluster are co-scheduled on the same GPC. SMEM is directly addressable by all threads within a CTA, whereas each thread has at most 256 registers (RMEM) private to itself. ", "page_idx": 2}, {"type": "table", "img_path": "tVConYid20/tmp/9ce3bb9b6b3b75109807aaebea1c279091ab431f8c031df7e1f1fb146bcc7188.jpg", "table_caption": ["Table 1: Thread-Memory hierarchy for the NVIDIA Hopper H100 SXM5 GPU. "], "table_footnote": [], "page_idx": 2}, {"type": "text", "text": "Asynchrony and warp-specialization: GPUs are throughput processors that rely on concurrency and asynchrony to hide memory and execution latencies. For async memory copy between GMEM and SMEM, Hopper has the Tensor Memory Accelerator (TMA) as a dedicated hardware unit [38, $\\S7.29]$ . Furthermore, unlike prior architectures such as Ampere, the Tensor Core of Hopper, exposed via the warpgroup-wide WGMMA instruction [40, $\\S9.7.14]$ , is also asynchronous and can source its inputs directly from shared memory. ", "page_idx": 2}, {"type": "text", "text": "Hardware support for asynchrony allows for warp-specialized kernels, where the warps of a CTA are divided into producer or consumer roles that only ever issue either data movement or computation. Generically, this improves the compiler\u2019s ability to generate optimal instruction schedules [4]. In addition, Hopper supports the dynamic reallocation of registers between warpgroups via setmaxnreg [40, $\\S9.7.17.1]$ , so those warps doing MMAs can obtain a larger share of RMEM than those just issuing TMA (for which only a single thread is needed). ", "page_idx": 2}, {"type": "text", "text": "Low-precision number formats: Modern GPUs have specialized hardware units for accelerating low-precision computation. For example, the WGMMA instruction can target the FP8 Tensor Cores on Hopper to deliver $2\\mathbf{x}$ the throughput per SM when compared to FP16 or BF16. ", "page_idx": 2}, {"type": "text", "text": "However, correctly invoking FP8 WGMMA entails understanding the layout constraints on its operands. Given a GEMM call to multiply $A\\!\\times\\!B^{\\top}$ for an $M{\\times}K$ -matrix $A$ and an $N{\\times}K$ -matrix $B$ , we say that the $A$ or $B$ operand is mn-major if it is contiguous in the outer $M$ or $N$ dimension, and $k$ -major if is instead contiguous in the inner $K$ -dimension. Then for FP16 WGMMA, both mn-major and $\\boldsymbol{\\mathrm{k}}$ -major input operands are accepted for operands in SMEM, but for FP8 WGMMA, only the $\\boldsymbol{\\mathrm{k}}$ -major format is supported. Moreover, in situations such as attention where one wants to fuse back-to-back GEMMs in a single kernel, clashing FP32 accumulator and FP8 operand layouts pose an obstacle to invoking dependent FP8 WGMMAs. ", "page_idx": 3}, {"type": "text", "text": "In the context of attention, these layout restrictions entail certain modifications to the design of an FP8 algorithm, which we describe in $\\S3.3$ . ", "page_idx": 3}, {"type": "text", "text": "2.3 Standard Attention and Flash Attention ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Following Dao et al. [16], we let standard attention denote an implementation of attention on the GPU that materializes the intermediate matrices S and $\\mathbf{P}$ to HBM. The main idea of FLASHATTENTION was to leverage a local version of the softmax reduction to avoid these expensive intermediate reads/writes and fuse attention into a single kernel. Local softmax corresponds to lines 18-19 of the consumer mainloop in Algorithm 1 together with the rescalings of blocks of O. The simple derivation that this procedure indeed computes O can be found in [14, $\\S2.3.1]$ . ", "page_idx": 3}, {"type": "text", "text": "3 FlashAttention-3: Algorithm ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we describe the FLASHATTENTION-3 algorithm. For simplicity, we focus on the forward pass, with the backward pass algorithm described in Appendix B.1. We first indicate how to integrate warp-specialization with a circular SMEM buffer into the base algorithm of FLASHATTENTION-2. We then explain how to exploit asynchrony of WGMMA to define an overlapped GEMM-softmax 2-stage pipeline. Finally, we describe the modifications needed for FP8, both in terms of layout conformance and accuracy via block quantization and incoherent processing. ", "page_idx": 3}, {"type": "text", "text": "3.1 Producer-Consumer asynchrony through warp-specialization and pingpong scheduling ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Warp-specialization As with FLASHATTENTION-2, the forward pass of FLASHATTENTION-3 is embarrassingly parallel in the batch size, number of heads, and query sequence length. Thus, it will suffice to give a CTA-level view of the algorithm, which operates on a tile $\\mathbf{Q}_{i}$ of the query matrix to compute the corresponding tile $\\mathbf{o}_{i}$ of the output. To simplify the description, we first give the warp-specialization scheme with a circular SMEM buffer that does not have in addition the GEMM-softmax overlapping. Let $d$ be the head dimension, $N$ the sequence length, and fix a query block size $B_{r}$ to divide $\\mathbf{Q}$ into $\\begin{array}{r}{T_{r}\\!=\\!\\lceil\\frac{N}{B_{r}}\\rceil}\\end{array}$ blocks $\\mathbf{Q}_{1},...,\\mathbf{Q}_{T_{r}}$ . ", "page_idx": 3}, {"type": "text", "text": "For our implementation of Algorithm 1 on Hopper, we use setmaxnreg for (de)allocations, TMA for loads of $\\mathbf{Q}_{i}$ and $\\{\\mathbf{K}_{j},\\mathbf{V}_{j}\\}_{0\\le j<T_{c}}$ , and WGMMA to execute the GEMMs in the consumer mainloop, with the SS or RS prefix indicating whether the first operand is sourced from shared memory or register file. For interpreting the execution flow of Algorithm 1, note that issuing TMA loads does not stall on the completion of other loads due to asynchrony. Moreover, in the producer mainloop, no waits will be issued for the first $s$ iterations as the buffer gets filled. ", "page_idx": 3}, {"type": "text", "text": "Pingpong scheduling The asynchronous nature of WGMMA and TMA, along with warpspecialization, opens up the opportunity to overlap the softmax computation of one warpgroup with the GEMM of another warpgroup. To motivate this, notice that non-matmul operations have much lower throughput than matmul operations on modern hardware accelerators. As an example, the H100 SXM5 GPU has 989 TFLOPS of FP16 matmul but only 3.9 TFLOPS of special functions such as exponential5 (necessary for softmax). For the attention forward pass in FP16 with head dimension 128, there are $512\\mathrm{x}$ more matmul FLOPS compared to exponential operations, but the exponential has 256x lower throughput, so exponential can take $50\\%$ of the cycle compared to matmul. The situation is even worse with FP8, where the matmul throughput doubles but the exponential throughput stays the same. ", "page_idx": 3}, {"type": "text", "text": "Require: Matrices $\\mathbf{Q}_{i}\\!\\in\\!\\mathbb{R}^{B_{r}\\times d}$ and ${\\bf K},{\\bf V}\\!\\in\\!\\mathbb{R}^{N\\times d}$ in HBM, key block size $B_{c}$ with $\\begin{array}{r}{T_{c}\\!=\\!\\lceil\\frac{N}{B_{c}}\\rceil}\\end{array}$ .   \n1: Initialize pipeline object to manage barrier synchronization with $s$ -stage circular SMEM buffer.   \n2: if in producer warpgroup then   \n3: Deallocate predetermined number of registers.   \n4: Issue load $\\mathbf{Q}_{i}$ from HBM to shared memory.   \n5: Upon completion, commit to notify consumer of the load of $\\mathbf{Q}_{i}$ .   \n6: for $0\\!\\le\\!j\\!<\\!T_{c}$ do   \n7: Wait for the $(j^{\\mathrm{v}}\\!\\!\\slash_{\\mathrm{o}S})$ th stage of the buffer to be consumed.   \n8: Issue loads of $\\mathbf{K}_{j},\\mathbf{V}_{j}$ from HBM to shared memory at the $(j^{\\%}s)$ th stage of the buffer.   \n9: Upon completion, commit to notify consumers of the loads of $\\mathbf{K}_{j},\\mathbf{V}_{j}$ .   \n10: end for   \n11: else   \n12: Reallocate predetermined number of registers as function of number of consumer warps.   \n13: On-chip, initialize $\\mathbf{O}_{i}\\!=\\!(0)\\!\\in\\!\\mathbb{R}^{B_{r}\\times d}$ and $\\ell_{i},m_{i}\\!=\\!(0),(-\\infty)\\in\\mathbb{R}^{B_{r}}$ .   \n14: Wait for $\\mathbf{Q}_{i}$ to be loaded in shared memory.   \n15: for $0\\!\\le\\!j\\!<\\!T_{c}$ do   \n16: Wait for $\\mathbf{K}_{j}$ to be loaded in shared memory.   \n17: Compute $\\mathbf{S}_{i}^{(j)}\\!=\\!\\mathbf{Q}_{i}\\mathbf{K}_{j}^{T}$ (SS-GEMM). Commit and wait.   \n18: Store $m_{i}^{\\mathrm{old}}\\!=\\!m_{i}$ and compute $m_{i}\\!=\\!\\operatorname*{max}(m_{i}^{\\mathrm{old}}$ ,rowmax $(\\mathbf{S}_{i}^{(j)})_{,}^{\\cdot}$ ).   \n19: ComputeP\ud835\udc56( \ud835\udc57)= $\\widetilde{\\mathbf{P}}_{i}^{(j)}\\!=\\!\\exp(\\mathbf{S}_{i}^{(j)}\\!-\\!m_{i})$ and $\\ell_{i}\\!=\\!\\exp(m_{i}^{\\mathrm{old}}\\!-\\!m_{i})\\ell_{i}\\!+\\!\\mathrm{rowsum}(\\widetilde{\\mathbf{P}}_{i}^{(j)}).$   \n20: Wait for $\\mathbf{V}_{j}$ to be loaded in shared memory.   \n21: Compute $\\mathbf{\\dot{O}}_{i}\\!=\\!\\mathrm{diag}(\\exp(m_{i}^{\\mathrm{old}}\\!-\\!m_{i}))\\mathbf{O}_{i}\\!+\\!\\widetilde{\\mathbf{P}}_{i}^{(j)}\\mathbf{V}_{j}$ (RS-GEMM). Commit and wait.   \n22: Release the $(j^{\\mathrm{v}}\\!/\\!_{0S})$ th stage of the buffer for the producer.   \n23: end for   \n24: Compute $\\mathbf{O}_{i}\\!=\\!\\mathrm{diag}(\\ell_{i})^{-1}\\mathbf{O}_{i}$ and $L_{i}\\!=\\!m_{i}\\!+\\!\\log(\\ell_{i})$ .   \n25: Write $\\mathbf{o}_{i}$ and $L_{i}$ to HBM as the \ud835\udc56th block of $\\mathbf{o}$ and $L$ .   \n26: end if ", "page_idx": 4}, {"type": "text", "text": "Since the exponential is performed by a separate hardware unit (the multi-function unit), ideally we\u2019d want the exponential calculation to be scheduled when the Tensor Cores are performing the matmul. To do so, we use synchronization barriers (bar.sync instructions) to force the GEMMs (GEMM1 \u2013 PV of one iteration, and $\\mathrm{GEMM0-QK^{\\top}}$ of the next iteration) of warpgroup 1 to be scheduled before the GEMMs of warpgroup 2. As a result, the softmax of warpgroup 1 will be scheduled while warpgroup 2 is performing its GEMMs. Then the roles swap, with warpgroup 2 doing softmax while warpgroup 1 doing GEMMs (hence, \u201cpingpong\u201d scheduling). This is illustrated in Fig. 1. Though in practice the pingpong scheduling is not as clean as depicted in the figure, we generally find this to improve performance (e.g., from 570 TFLOPS to 620-640 TFLOPS for FP16 forward with head dimension 128 and sequence length 8192). ", "page_idx": 4}, {"type": "image", "img_path": "tVConYid20/tmp/ff248384ef46e8463840b65b45e22e3467e1009888640c09d95a829c84929108.jpg", "img_caption": ["Figure 1: Pingpong scheduling for 2 warpgroups to overlap softmax and GEMMs: the softmax of one warpgroup should be scheduled when the GEMMs of another warpgroup are running. The same color denotes the same iteration. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "Attention variants For multi-query attention [50] and grouped query attention [3], we follow the approach in FLASHATTENTION-2 and adjust the tensor indexing to avoid duplicating $\\mathbf{K}$ and V in HBM. ", "page_idx": 4}, {"type": "text", "text": "3.2 Intra-warpgroup overlapping GEMMs and softmax ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Even within one warpgroup, we can overlap some instructions in the softmax with some instructions in the GEMMs. We describe one technique to do so. ", "page_idx": 5}, {"type": "text", "text": "In the attention algorithm, operations within the inner loop (main loop) have sequential dependencies that impede parallelization within a single iteration. For example, (local) softmax (lines 18 to 19) relies on the output $\\mathbf{S}_{i}^{(j)}$ of the first GEMM, while the second GEMM takes its result $\\widetilde{\\mathbf{P}}_{i}^{(j)}$ as an operand. Indeed, the wait statements in lines 17 and 21 of Algorithm 1 serialize the execution of softmax and GEMMs. However, we can break these dependencies by pipelining across iterations through additional buffers in registers. Pursuing this idea, we propose the following two-stage6 GEMM-softmax pipelining algorithm: ", "page_idx": 5}, {"type": "image", "img_path": "tVConYid20/tmp/4e6a75d1d7a3ecdeb8d11253479992048c0f98275f7941f7f0429446523db657.jpg", "img_caption": ["Figure 2: 2-stage WGMMA-softmax pipelining "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "Algorithm 2 FLASHATTENTION-3 consumer warpgroup forward pass ", "page_idx": 5}, {"type": "text", "text": "Require: Matrices $\\mathbf{Q}_{i}\\!\\in\\!\\mathbb{R}^{B_{r}\\times d}$ and ${\\bf K},{\\bf V}\\!\\in\\!\\mathbb{R}^{N\\times d}$ in HBM, key block size $B_{c}$ with $\\begin{array}{r}{T_{c}\\!=\\!\\lceil\\frac{N}{B_{c}}\\rceil}\\end{array}$ .   \n1: Reallocate predetermined number of registers as function of number of consumer warps.   \n2: On-chip, initialize $\\mathbf{O}_{i}\\!=\\!(0)\\!\\in\\!\\mathbb{R}^{B_{r}\\times d}$ and $\\ell_{i},\\!m_{i}\\!=\\!(0),(-\\infty)\\!\\in\\!\\mathbb{R}^{B_{r}}$ .   \n3: Wait for $\\mathbf{Q}_{i}$ and $\\mathbf{K}_{0}$ to be loaded in shared memory.   \n4: Compute $\\mathbf{\\bar{S}}_{\\mathrm{cur}}\\!=\\!\\mathbf{Q}_{i}\\mathbf{K}_{0}^{T}$ using WGMMA. Commit and wait.   \n5: Release the 0th stage of the buffer for $\\mathbf{K}$ .   \n6: Compute $m_{i}$ , $\\tilde{\\mathbf{P}}_{\\mathrm{cur}}$ and $\\ell_{i}$ based on $\\mathbf{S}_{\\mathrm{cur}}$ , and rescale $\\mathbf{o}_{i}$ .   \n7: for $1\\le j<T_{c}\\!-\\!1$ do   \n8: Wait for $\\mathbf{K}_{j}$ to be loaded in shared memory.   \n9: Compute $\\bar{\\mathbf{S}}_{\\mathrm{next}}\\!=\\!\\mathbf{Q}_{i}\\mathbf{K}_{j}^{T}$ using WGMMA. Commit but do not wait.   \n10: Wait for $\\mathbf{V}_{j-1}$ to be loaded in shared memory.   \n11: Compute $\\mathbf{\\bar{O}}_{i}\\!=\\!\\mathbf{O}_{i}\\!+\\!\\tilde{\\mathbf{P}}_{\\mathrm{cur}}\\mathbf{V}_{j-1}$ using WGMMA. Commit but do not wait.   \n12: Wait for the WGMMA $\\mathbf{Q}_{i}\\mathbf{K}_{j}^{T}$ .   \n13: Compute $m_{i}$ , $\\tilde{\\mathbf{P}}_{\\mathrm{next}}$ and $\\ell_{i}$ based on $\\mathbf{S}_{\\mathrm{next}}$ .   \n14: Wait for the WGMMA $\\widetilde{\\mathbf{P}}_{\\mathrm{cur}}\\mathbf{V}_{j-1}$ and then rescale $\\mathbf{o}_{i}$   \n15: Release the $(j^{\\mathrm{v}}\\!\\!\\slash_{\\mathrm{o}S})$ th, resp. $(j\\!-\\!1\\%s)$ th stage of the buffer for $\\mathbf{K}$ , resp. V.   \n16: Copy $\\mathbf{S}_{\\mathrm{next}}$ to $\\mathbf{S}_{\\mathrm{cur}}$ .   \n17: end for   \n18: Wait for $\\mathbf{V}_{T_{c}-1}$ to be loaded in shared memory.   \n19: Compute $\\mathbf{O}_{i}\\!=\\!\\mathbf{O}_{i}\\!+\\!\\tilde{\\mathbf{P}}_{\\mathrm{last}}\\mathbf{V}_{T_{c}-1}$ using WGMMA. Commit and wait.   \n20: Epilogue: Rescale $\\mathbf{o}_{i}$ based on $m_{i}$ . Compute $L_{i}$ based on $m_{i}$ and $\\ell_{i}$ . Write $\\mathbf{o}_{i}$ and $L_{i}$ to HBM as   \nthe $i$ -th block of O and $L$ . ", "page_idx": 5}, {"type": "text", "text": "Algorithm 2 functions as a replacement for the consumer path of Algorithm 1 to comprise the complete FLASHATTENTION-3 algorithm for FP16 precision. At a high-level, we use WGMMA as a metonym for asynchronous GEMM. Within the mainloop (lines 8 to 16), the second WGMMA operation of iteration $j$ (line 11) is overlapped with softmax operations from iteration $j\\!+\\!1$ (line 13). ", "page_idx": 5}, {"type": "text", "text": "While the pipelined structure illustrated above offers theoretical performance gains, there are several practical aspects to consider: ", "page_idx": 5}, {"type": "text", "text": "Compiler reordering The pseudocode represents an idealized execution order but the compiler (NVCC) often rearranges instructions for optimization. This can disrupt the carefully crafted WGMMA and non-WGMMA operation pipelining sequence, potentially leading to unexpected behavior or diminished performance gains. An analysis of the SASS code shows that the compiler generates overlapped code as expected (Section B.2). ", "page_idx": 6}, {"type": "text", "text": "Register pressure To maintain optimal performance, register spilling should be minimized. However, the 2-stage pipeline requires additional registers to store intermediate results and maintain context between stages. Specifically, an extra $\\mathbf{S}_{\\mathrm{next}}$ must be kept in registers, leading to extra register usage of size $B_{r}\\!\\times\\!B_{c}\\!\\times$ sizeof(float) per threadblock. This increased register demand may confilct with using larger block sizes (another common optimization), which is also register-hungry. In practice, trade-offs should be made based on profiling results. ", "page_idx": 6}, {"type": "text", "text": "3-stage pipelining Extending the 2-stage algorithm described above, we propose a 3-stage variant that would further overlap the second WGMMA with softmax. While this approach offers the potential for even higher Tensor Core utilization, it requires even more registers due to an additional stage in the pipeline, making the trade-off between tile size and pipeline depth more difficult to balance. A detailed description of the 3-stage algorithm and its evaluation results can be found in Appendix B.3. ", "page_idx": 6}, {"type": "text", "text": "3.3 Low-precision with FP8 ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Efficiency: FP8 layout for accumulator and operand. Computing the forward pass of FLASHATTENTION-3 in FP8 precision poses two additional challenges not encountered for FP16 in terms of layout conformance. The first relates to the datatype conversion of the first WGMMA\u2019s FP32 accumulator to the second WGMMA\u2019s lower-precision (FP16 or FP8) operand, which was left implicit in Algorithm 1. Specifically, after downcasting to FP8, we need to transform the register ownership pattern from that depicted in Fig. 3 into Fig. 4, repeated per every four threads of the consumer warpgroups. ", "page_idx": 6}, {"type": "text", "text": "In Appendix B.7, we give a solution for this in code using shuffle instructions. ", "page_idx": 6}, {"type": "text", "text": "Secondly, the $\\mathbf{k}$ -major constraint on FP8 WGMMA explained in $\\S2.2$ entails clashing assumptions on how Q, K, and V are laid out in global memory, since the TMA load cannot change the contiguous dimension. Namely, Q and $\\mathbf{K}$ should be contiguous in the head dimension, whereas $\\mathbf{V}$ should be contiguous in the sequence length dimension. We perform in-kernel transposition of the $\\mathbf{V}_{j}$ tiles in SMEM prior to invoking the second FP8 WGMMA, since in practice, V is typically assumed to be contiguous in the head dimension. In Appendix B.8, we describe in details how to perform the V transpose as part of the attention kernel itself. ", "page_idx": 6}, {"type": "text", "text": "Accuracy: block quantization and incoherent processing. With FP8 $(\\mathrm{e}4\\mathrm{m}3)$ format, one only uses 3 bits to store the mantissa and 4 bits for the exponent. This results in higher numerical error than FP16/BF16. Moreover, large models typically have outlier values [20, 53] that are much larger in magnitude than most other values, making quantization difficult. One typically use per-tensor scaling [37] by keeping one scalar per tensor (e.g., one for Q, for $\\mathbf{K}$ , and for $\\mathbf{V}$ ). To reduce the numerical error of attention in FP8, we employ two techniques: ", "page_idx": 6}, {"type": "text", "text": "1. Block quantization: we keep one scalar per block, so that for each of Q, K, V we split the tensor into blocks of size $B_{r}\\!\\times\\!d$ or $\\boldsymbol{B}_{c}\\!\\times\\!d$ and quantize them separately. This quantization can be fused with an operation right before attention (e.g., rotary embedding) with no additional slow down (since rotary embedding is memory-bandwidth bound). As the FLASHATTENTION-3 algorithm naturally operates on blocks, we can scale each block of S to account for this block quantization at no computation cost. ", "page_idx": 6}, {"type": "text", "text": "2. Incoherent processing: to even out outliers, we multiply Q and $\\mathbf{K}$ with a random orthogonal matrix M before quantizing to FP8. Since M is orthogonal, $\\mathbf{M}\\mathbf{M}^{\\top}\\!=\\!I$ and so $(\\mathbf{Q}\\mathbf{M})(\\mathbf{K}\\mathbf{M})^{\\top}\\mathbf{=}\\mathbf{Q}\\mathbf{K}^{\\top}$ , i.e., multiplying both $\\mathbf{Q}$ and $\\mathbf{K}$ with $\\mathbf{M}$ does not change the attention output. This serves to \u201cspread out\u201d the outliers since each entry of QM or KM is a random sum of entries of Q or $\\mathbf{K}$ , thus reducing quantization error. In practice, we follow Chee et al.[8] and Tseng et al.[57] and chooseM to be the product of random diagonal matrices of $\\pm1$ and a Hadamard matrix, which can be multiplied in $O(d\\log d)$ instead of $O(\\check{d}^{2})$ , and can also be fused with the rotary embedding at no extra computation cost. ", "page_idx": 7}, {"type": "text", "text": "We validate that these two techniques reduces numerical error by up to $2.6\\times$ in $\\S4.3$ . ", "page_idx": 7}, {"type": "text", "text": "4 Empirical Validation ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We use the primitives from CUTLASS [56] such as WGMMA and TMA abstractions to implement FLASHATTENTION-3 and evaluate its efficiency and accuracy. ", "page_idx": 7}, {"type": "text", "text": "\u2022 Benchmarking attention. We measure the runtime of FLASHATTENTION-3 across different sequence lengths and compare it to a standard implementation in PyTorch, FLASHATTENTION-2, FLASHATTENTION-2 in Triton (which uses $H100.$ -specific instructions), as well as a vendor\u2019s implementation of FLASHATTENTION-2 optimized for H100 GPUs from cuDNN. We confirm that FLASHATTENTION-3 is up to $2.0\\times$ faster than FLASHATTENTION-2 and $1.5\\times$ faster than FLASHATTENTION-2 in Triton. FLASHATTENTION-3 reaches up to 840 TFLOPs/s, $85\\%$ of the theoretical maximum TFLOPs/s on H100 GPUs. ", "page_idx": 7}, {"type": "text", "text": "\u2022 Ablation study. We confirm that our algorithmic improvements with warp-specialization and GEMM-softmax pipelining contribute to the speedup of FLASHATTENTION-3. ", "page_idx": 7}, {"type": "text", "text": "\u2022 Accuracy of FP8 attention. We validate that block quantization and incoherent processing reduces the numerical error of FP8 FLASHATTENTION-3 by $2.6\\times$ . ", "page_idx": 7}, {"type": "text", "text": "4.1 Benchmarking Attention ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We measure the runtime of different attention methods on an H100 80GB SXM5 GPU for different settings (without / with causal mask, head dimension 64 or 128) for BF16 inputs. We report the results in Fig. 5 and Fig. 6, showing that FLASHATTENTION-3 is around $1.5{-}2.0\\times$ faster than FLASHATTENTION-2 in the forward pass and $1.5\u20131.75\\times$ faster in the backward pass. Compared to a standard attention implementation, FLASHATTENTION-3 can be up to $3-16\\times$ faster. For medium and long sequences (1k and above), FLASHATTENTION-3 even surpasses the speed of a vendor\u2019s library (cuDNN \u2013 closed source) that has been optimized for H100 GPUs. ", "page_idx": 7}, {"type": "text", "text": "Benchmark settings: We vary the sequence length as 512, 1k, ..., 16k, and set batch size so that the total number of tokens is 16k. We set the hidden dimension to 2048, and head dimension to be either 64, 128, or 256 (i.e., 32 heads, 16 heads, or 8 heads). To calculate the FLOPs of the forward pass, we use: ", "page_idx": 7}, {"type": "text", "text": "4\u00b7seqlen2\u00b7head dimension $\\cdot$ number of heads. ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "With causal masking, we divide this number by 2 to account for the fact that approximately only half of the entries are calculated. To get the FLOPs of the backward pass, we multiply the forward pass FLOPs by 2.5 (since there are 2 matmuls in the forward pass and 5 matmuls in the backward pass, due to recomputation). ", "page_idx": 7}, {"type": "text", "text": "We also measure the runtime for FP8 for the forward pass under similar settings. We report the results for headdim 256 in Fig. 7 and give the full results in Appendix C.2. ", "page_idx": 7}, {"type": "text", "text": "4.2 Ablation Study: 2-Stage Pipelining Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We ablate both the 2-stage WGMMA-softmax pipelining and warp-specialization for non-causal FP16 FLASHATTENTION-3 with fixed parameters {batch,seqlen,nheads, $\\mathrm{1dim}\\}=\\{4,8448,16,128\\}$ . The result in Table 2 confirms that our algorithmic improvements (asynchrony with warp-specialization and overlapping between GEMM and softmax) lead to significant speedup, from 570 to 661 TFLOPs. ", "page_idx": 7}, {"type": "text", "text": "4.3 Numerical Error Validation ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "As there has been interest in the numerical error [21] of FLASHATTENTION, we compare FLASHATTENTION-2, FLASHATTENTION-3, and a standard implementation of attention against ", "page_idx": 7}, {"type": "image", "img_path": "tVConYid20/tmp/d4280294ba2e6bbc5ee570dc251db4ebf71c83183ec57dabf6e8564f57c02c44.jpg", "img_caption": ["(a) Forward, without causal mask, head dim 64 Attention forward speed, head dim 128 (H100 80GB SXM5) "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "tVConYid20/tmp/31fc899919c5a989adc1db12b82181ea7129e9c0024ad32875e8b53a518fd847.jpg", "img_caption": ["(c) Forward, without causal mask, head dim 128 "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "tVConYid20/tmp/46ee29c950c94f1ba11303ceaef0a75185b6c7ee3a4509151e2cce4c3a4a1f4d.jpg", "img_caption": ["(e) Forward, without causal mask, head dim 256 "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "tVConYid20/tmp/ccb0f8532c2ccca1c74da3c67b0345737aec89f8133540c5de48959066a47dd7.jpg", "img_caption": ["(b) Forward, with causal mask, head dim 64 Attention forward speed, head dim 128 (H100 80GB SXM5 "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "tVConYid20/tmp/cc409802ba2abede5ff4008383db1dbf8bc22ed97d17edc2e6f169f420e06134.jpg", "img_caption": ["(d) Forward, with causal mask, head dim 128 "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "tVConYid20/tmp/2b09a8fbe69704fde17c31f91a29059ee45d5a1e52366d2b60c4068a17d06e75.jpg", "img_caption": ["(f) Forward, with causal mask, head dim 256 "], "img_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "tVConYid20/tmp/e8b8cffdfa1e12659ebfc5ed67fc55dbf036f0c85f0908628471388518d0d2ae.jpg", "table_caption": ["Figure 5: Attention forward speed (BF16) on H100 GPU ", "Table 2: Pipelining ablation measurements "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "a reference implementation in FP64. To simulate outlier features and activations in LLMs [20, 53], we generate the entries of $\\mathbf{Q}{,}\\mathbf{K}{,}\\mathbf{V}$ with the following distribution: ", "page_idx": 8}, {"type": "equation", "text": "$$\nN(0,1)\\!+\\!N(0,100)\\!\\cdot\\!\\mathrm{Bernoulli}(0.001).\n$$", "text_format": "latex", "page_idx": 8}, {"type": "text", "text": "That is, each entry is normally distributed with zero mean and standard deviation 1, but for $0.1\\%$ of entries we add an independent term that\u2019s normally distributed with standard deviation 10. We then measure the root mean squared error (RMSE) in Table 3. In FP16, both FLASHATTENTION-2 and FLASHATTENTION-3 achieves $1.7\\times$ lower RMSE compared to the standard implementation since intermediate results (softmax) are kept in FP32. The baseline attention in FP8 uses per-tensor scaling, with matmul accumulator in FP32 and intermediate softmax results kept in FP16. Thanks to block quantization and incoherent processing, FLASHATTENTION-3 in FP8 is $2.6\\times$ more accurate than this baseline. ", "page_idx": 8}, {"type": "image", "img_path": "tVConYid20/tmp/1b2839fbc450b552a9152d3a2ca762c8a897cd305ea00513481f1d2287e6b8f7.jpg", "img_caption": ["(a) Backward, without causal mask, head dim 64 "], "img_footnote": [], "page_idx": 9}, {"type": "image", "img_path": "tVConYid20/tmp/3504c2ee000d18b1baa5c5effa3a6d33a459d2d2014c2cfea26e48fcd6a8a70a.jpg", "img_caption": ["Figure 6: Attention backward speed (BF16) on H100 GPU ", "(b) Backward, without causal mask, head dim 128 "], "img_footnote": [], "page_idx": 9}, {"type": "image", "img_path": "tVConYid20/tmp/ba9a2a2430817ef156139550b5e3f01727822fb93a7fa2601fed9f417fb86608.jpg", "img_caption": [], "img_footnote": [], "page_idx": 9}, {"type": "image", "img_path": "tVConYid20/tmp/27bd79b955f2efac2f1fee8c432744993fd5798393ce5fd9b22b773e6875548c.jpg", "img_caption": ["Figure 7: Attention forward speed (FP8) on H100 GPU "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "table", "img_path": "tVConYid20/tmp/6f28aefc5c513452cbdfe2dd3819383be9a51c43d6ec062d36564049f0e5a70c.jpg", "table_caption": ["$(\\mathrm{e}4\\mathrm{m}3)$ "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "5 Dicussion, Limitations, Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "With FLASHATTENTION-3, we have demonstrated that new programming techniques and hardware features such as asynchrony and low-precision can have a dramatic impact on the efficiency and accuracy of attention. We are able to speed up attention by $1.5{-}2.0\\times$ times compared to FLASHATTENTION-2, and reduce FP8 numerical error by $2.6\\times$ compared to standard per-tensor quantization. Some limitations of our work that we hope to address in the future include: optimizing for LLM inference, and understanding the effects of low-precision attention in large-scale training. Though we have focused on Hopper GPUs in this work, we expect that the techniques developed here will apply to other hardware accelerators. We hope that a faster and more accurate primitive such as attention will unlock new applications in long-context tasks. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Ahmad Abdelfattah, Azzam Haidar, Stanimire Tomov, and Jack Dongarra. Performance, design, and autotuning of batched gemm for gpus. pages 21\u201338, 06 2016. ISBN 978-3-319-41320-4. doi: 10.1007/978-3-319-41321-1_2.   \n[2] AI21. Introducing jamba: Ai21\u2019s groundbreaking ssm-transformer model. AI21 blog, 2024.   \n[3] Joshua Ainslie, James Lee-Thorp, Michiel de Jong, Yury Zemlyanskiy, Federico Lebr\u00f3n, and Sumit Sanghai. Gqa: Training generalized multi-query transformer models from multi-head checkpoints. arXiv preprint arXiv:2305.13245, 2023.   \n[4] Michael Bauer, Henry Cook, and Brucek Khailany. CudaDMA: Optimizing GPU Memory Bandwidth via Warp Specialization. In Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis, SC \u201911, New York, NY, USA, 2011. Association for Computing Machinery. ISBN 9781450307710. doi: 10.1145/2063384.2063400. URL https://doi.org/10.1145/2063384.2063400.   \n[5] Maximilian Beck, Korbinian P\u00f6ppel, Markus Spanring, Andreas Auer, Oleksandra Prudnikova, Michael Kopp, G\u00fcnter Klambauer, Johannes Brandstetter, and Sepp Hochreiter. xlstm: Extended long short-term memory. arXiv preprint arXiv:2405.04517, 2024.   \n[6] Iz Beltagy, Matthew E Peters, and Arman Cohan. Longformer: The long-document transformer. arXiv preprint arXiv:2004.05150, 2020.   \n[7] William Brandon, Aniruddha Nrusimha, Kevin Qian, Zachary Ankner, Tian Jin, Zhiye Song, and Jonathan Ragan-Kelley. Striped attention: Faster ring attention for causal transformers. arXiv preprint arXiv:2311.09431, 2023.   \n[8] Jerry Chee, Yaohui Cai, Volodymyr Kuleshov, and Christopher M De Sa. Quip: 2-bit quantization of large language models with guarantees. Advances in Neural Information Processing Systems, 36, 2024.   \n[9] Beidi Chen, Tri Dao, Eric Winsor, Zhao Song, Atri Rudra, and Christopher R\u00e9. Scatterbrain: Unifying sparse and low-rank attention. In Advances in Neural Information Processing Systems (NeurIPS), 2021.   \n[10] Richard J Chen, Chengkuan Chen, Yicong Li, Tiffany Y Chen, Andrew D Trister, Rahul G Krishnan, and Faisal Mahmood. Scaling vision transformers to gigapixel images via hierarchical self-supervised learning. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 16144\u201316155, 2022.   \n[11] Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse transformers. arXiv preprint arXiv:1904.10509, 2019.   \n[12] Krzysztof Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos, Peter Hawkins, Jared Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. Rethinking attention with performers. In The International Conference on Learning Representations (ICLR), 2021.   \n[13] Krzysztof Marcin Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos, Peter Hawkins, Jared Quincy Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. Rethinking attention with performers. In International Conference on Learning Representations (ICLR), 2020.   \n[14] Tri Dao. FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning, 2023. URL https://arxiv.org/abs/2307.08691.   \n[15] Tri Dao and Albert Gu. Transformers are SSMs: Generalized models and efficient algorithms with structured state space duality. In International Conference on Machine Learning (ICML), 2024.   \n[16] Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, and Christopher R\u00e9. FlashAttention: Fast and memory-efficient exact attention with IO-awareness. In Advances in Neural Information Processing Systems, 2022.   \n[17] Tri Dao, Daniel Y Fu, Khaled K Saab, Armin W Thomas, Atri Rudra, and Christopher R\u00e9. Hungry hungry hippos: Towards language modeling with state space models. In The International Conference on Learning Representations (ICLR), 2023.   \n[18] Tri Dao, Daniel Haziza, Francisco Massa, and Grigory Sizov. Flash-Decoding for long-context inference, 2023. URL https://pytorch.org/blog/flash-decoding/.   \n[19] DeepSeek-AI. Deepseek-v2: A strong, economical, and efficient mixture-of-experts language model. arXiv preprint arXiv:2405.04434, 2024.   \n[20] Tim Dettmers, Mike Lewis, Younes Belkada, and Luke Zettlemoyer. Llm. int8 (): 8-bit matrix multiplication for transformers at scale. CoRR abs/2208.07339, 2022.   \n[21] Alicia Golden, Samuel Hsia, Fei Sun, Bilge Acun, Basil Hosmer, Yejin Lee, Zachary DeVito, Jeff Johnson, Gu-Yeon Wei, David Brooks, et al. Is flash attention stable? arXiv preprint arXiv:2405.02803, 2024.   \n[22] Albert Gu and Tri Dao. Mamba: Linear-time sequence modeling with selective state spaces. 2023.   \n[23] Anmol Gulati, James Qin, Chung-Cheng Chiu, Niki Parmar, Yu Zhang, Jiahui Yu, Wei Han, Shibo Wang, Zhengdong Zhang, Yonghui Wu, et al. Conformer: Convolution-augmented transformer for speech recognition. arXiv preprint arXiv:2005.08100, 2020.   \n[24] Mandy Guo, Joshua Ainslie, David Uthus, Santiago Ontanon, Jianmo Ni, Yun-Hsuan Sung, and Yinfei Yang. Longt5: Efficient text-to-text transformer for long sequences. arXiv preprint arXiv:2112.07916, 2021.   \n[25] Jonathan Ho, Tim Salimans, Alexey Gritsenko, William Chan, Mohammad Norouzi, and David J Fleet. Video diffusion models. Advances in Neural Information Processing Systems, 35:8633\u20138646, 2022.   \n[26] Coleman Hooper, Sehoon Kim, Hiva Mohammadzadeh, Michael W Mahoney, Yakun Sophia Shao, Kurt Keutzer, and Amir Gholami. Kvquant: Towards 10 million context length llm inference with kv cache quantization. arXiv preprint arXiv:2401.18079, 2024.   \n[27] Angelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and Fran\u00e7ois Fleuret. Transformers are RNNs: Fast autoregressive transformers with linear attention. In International Conference on Machine Learning, pages 5156\u20135165. PMLR, 2020.   \n[28] Nikita Kitaev, \u0141ukasz Kaiser, and Anselm Levskaya. Reformer: The efficient transformer. In The International Conference on Machine Learning (ICML), 2020.   \n[29] Woosuk Kwon, Zhuohan Li, Siyuan Zhuang, Ying Sheng, Lianmin Zheng, Cody Hao Yu, Joseph Gonzalez, Hao Zhang, and Ion Stoica. Efficient memory management for large language model serving with PagedAttention. In Proceedings of the 29th Symposium on Operating Systems Principles, pages 611\u2013626, 2023.   \n[30] Raymond Li, Loubna Ben Allal, Yangtian Zi, Niklas Muennighoff, Denis Kocetkov, Chenghao Mou, Marc Marone, Christopher Akiki, Jia Li, Jenny Chim, et al. Starcoder: may the source be with you! arXiv preprint arXiv:2305.06161, 2023.   \n[31] Hao Liu, Matei Zaharia, and Pieter Abbeel. Ring attention with blockwise transformers for near-infinite context. arXiv preprint arXiv:2310.01889, 2023.   \n[32] Hao Liu, Wilson Yan, Matei Zaharia, and Pieter Abbeel. World model on million-length video and language with ringattention. arXiv preprint arXiv:2402.08268, 2024.   \n[33] Zirui Liu, Jiayi Yuan, Hongye Jin, Shaochen Zhong, Zhaozhuo Xu, Vladimir Braverman, Beidi Chen, and Xia Hu. Kivi: A tuning-free asymmetric 2bit quantization for kv cache. arXiv preprint arXiv:2402.02750, 2024.   \n[34] Weile Luo, Ruibo Fan, Zeyu Li, Dayou Du, Qiang Wang, and Xiaowen Chu. Benchmarking and Dissecting the Nvidia Hopper GPU Architecture, 2024. URL https://arxiv.org/abs/2402.13499.   \n[35] Xuezhe Ma, Chunting Zhou, Xiang Kong, Junxian He, Liangke Gui, Graham Neubig, Jonathan May, and Luke Zettlemoyer. Mega: Moving average equipped gated attention. In The International Conference on Learning Representations (ICLR), 2023.   \n[36] Xuezhe Ma, Xiaomeng Yang, Wenhan Xiong, Beidi Chen, Lili Yu, Hao Zhang, Jonathan May, Luke Zettlemoyer, Omer Levy, and Chunting Zhou. Megalodon: Efficient llm pretraining and inference with unlimited context length. arXiv preprint arXiv:2404.08801, 2024.   \n[37] Paulius Micikevicius, Dusan Stosic, Neil Burgess, Marius Cornea, Pradeep Dubey, Richard Grisenthwaite, Sangwon Ha, Alexander Heinecke, Patrick Judd, John Kamalu, et al. Fp8 formats for deep learning. arXiv preprint arXiv:2209.05433, 2022.   \n[38] NVIDIA. CUDA Programming Guide Version 12.4, 2024. URL https://docs.nvidia.com/ cuda/cuda-c-programming-guide/index.html.   \n[39] Nvidia. Accelerating transformers with nvidia cudnn 9. Nvidia blog, 2024. URL https://developer.nvidia.com/blog/ accelerating-transformers-with-nvidia-cudnn-9/.   \n[40] NVIDIA. Parallel Thread Execution ISA Version 8.4, 2024. URL https: //docs.nvidia.com/cuda/pdf/ptx_isa_8.4.pdf.   \n[41] Muhammad Osama, Duane Merrill, Cris Cecka, Michael Garland, and John D. Owens. Stream-k: Work-centric parallel decomposition for dense matrix-matrix multiplication on the gpu. In Proceedings of the 28th ACM SIGPLAN Annual Symposium on Principles and Practice of Parallel Programming, PPoPP \u201923, pages 429\u2013431, New York, NY, USA, 2023. Association for Computing Machinery. ISBN 9798400700156. doi: 10.1145/3572848.3577479. URL https://doi.org/10.1145/3572848.3577479.   \n[42] Bo Peng, Eric Alcaide, Quentin Anthony, Alon Albalak, Samuel Arcadinho, Huanqi Cao, Xin Cheng, Michael Chung, Matteo Grella, Kranthi Kiran GV, et al. RWKV: Reinventing RNNs for the Transformer era. arXiv preprint arXiv:2305.13048, 2023.   \n[43] Bowen Peng, Jeffrey Quesnelle, Honglu Fan, and Enrico Shippole. Yarn: Efficient context window extension of large language models. arXiv preprint arXiv:2309.00071, 2023.   \n[44] Hao Peng, Nikolaos Pappas, Dani Yogatama, Roy Schwartz, Noah A Smith, and Lingpeng Kong. Random feature attention. In The International Conference on Learning Representations (ICLR), 2021.   \n[45] Markus N Rabe and Charles Staats. Self-attention does not need $O(n^{2})$ memory. arXiv preprint arXiv:2112.05682, 2021.   \n[46] Aurko Roy, Mohammad Saffar, Ashish Vaswani, and David Grangier. Efficient content-based sparse attention with routing Transformers. arXiv preprint arXiv:2003.05997, 2020.   \n[47] Baptiste Roziere, Jonas Gehring, Fabian Gloeckle, Sten Sootla, Itai Gat, Xiaoqing Ellen Tan, Yossi Adi, Jingyu Liu, Tal Remez, J\u00e9r\u00e9my Rapin, et al. Code llama: Open foundation models for code. arXiv preprint arXiv:2308.12950, 2023.   \n[48] Rya Sanovar, Srikant Bharadwaj, Renee St. Amant, Victor R\u00fchle, and Saravan Rajmohan. Lean attention: Hardware-aware scalable attention mechanism for the decode-phase of transformers. 2024.   \n[49] Uri Shaham, Elad Segal, Maor Ivgi, Avia Efrat, Ori Yoran, Adi Haviv, Ankit Gupta, Wenhan Xiong, Mor Geva, Jonathan Berant, et al. Scrolls: Standardized comparison over long language sequences. arXiv preprint arXiv:2201.03533, 2022.   \n[50] Noam Shazeer. Fast transformer decoding: One write-head is all you need. arXiv preprint arXiv:1911.02150, 2019.   \n[51] Benjamin Spector, Aaryan Singhal, Simran Arora, and Christopher R\u00e9, 2024. URL https://github.com/HazyResearch/ThunderKittens.   \n[52] Fei Sun, Jun Liu, Jian Wu, Changhua Pei, Xiao Lin, Wenwu Ou, and Peng Jiang. Bert4rec: Sequential recommendation with bidirectional encoder representations from transformer. In Proceedings of the 28th ACM international conference on information and knowledge management, pages 1441\u20131450, 2019.   \n[53] Mingjie Sun, Xinlei Chen, J Zico Kolter, and Zhuang Liu. Massive activations in large language models. arXiv preprint arXiv:2402.17762, 2024.   \n[54] Yutao Sun, Li Dong, Shaohan Huang, Shuming Ma, Yuqing Xia, Jilong Xue, Jianyong Wang, and Furu Wei. Retentive network: A successor to transformer for large language models. arXiv preprint arXiv:2307.08621, 2023.   \n[55] Yi Tay, Mostafa Dehghani, Dara Bahri, and Donald Metzler. Efficient transformers: A survey. arXiv preprint arXiv:2009.06732, 2020.   \n[56] Vijay Thakkar, Pradeep Ramani, Cris Cecka, Aniket Shivam, Honghao Lu, Ethan Yan, Jack Kosaian, Mark Hoemmen, Haicheng Wu, Andrew Kerr, Matt Nicely, Duane Merrill, Dustyn Blasig, Fengqi Qiao, Piotr Majcher, Paul Springer, Markus Hohnerbach, Jin Wang, and Manish Gupta. CUTLASS, January 2023. URL https://github.com/NVIDIA/cutlass.   \n[57] Albert Tseng, Jerry Chee, Qingyao Sun, Volodymyr Kuleshov, and Christopher De Sa. Quip#: Even better llm quantization with hadamard incoherence and lattice codebooks. arXiv preprint arXiv:2402.04396, 2024.   \n[58] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. Advances in neural information processing systems, 30, 2017.   \n[59] Roger Waleffe, Wonmin Byeon, Duncan Riach, Brandon Norick, Vijay Korthikanti, Tri Dao, Albert Gu, Ali Hatamizadeh, Sudhakar Singh, Deepak Narayanan, et al. An empirical study of mamba-based language models. arXiv preprint arXiv:2406.07887, 2024.   \n[60] Yunyang Xiong, Zhanpeng Zeng, Rudrasis Chakraborty, Mingxing Tan, Glenn Fung, Yin Li, and Vikas Singh. Nystr\u00f6mformer: A nyst\u00f6m-based algorithm for approximating self-attention. In Proceedings of the AAAI Conference on Artificial Intelligence. AAAI Conference on Artificial Intelligence, volume 35, page 14138, 2021.   \n[61] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. arXiv preprint arXiv:2210.03629, 2022.   \n[62] Manzil Zaheer, Guru Guruganesh, Kumar Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, et al. Big bird: Transformers for longer sequences. Advances in Neural Information Processing Systems, 33, 2020.   \n[63] Zyphra. Zyphra unveils zamba: A compact 7b ssm hybrid model. Zyphra blog, 2024. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Related Work ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Attention variants and distributed attention Ever since attention became popular with the Transformer architecture [58], there has been a large body of work on approximating attention to scale it to longer sequences. These approximation methods can generally be categorized into two classes: sparse and low-rank. Sparse attention only computes some entries of the attention matrix (softmax $(\\bar{\\bf Q}\\dot{\\bf K}^{T})\\mathrm{~,~}$ ) and assumes that other entries are zero. Different methods have different ways of choosing which entries should be zero, either with a fixed pattern [11], with a sliding window [6], or with a dynamic pattern through hashing [28] or routing [46]. The low-rank approach instead assumes that the attention matrix has a low-rank structure, and apply a pointwise nonlinearity to the query and key [27] with random projection [12, 44, 60]. One can also combine the sparse and low-rank approximation for better quality [9, 62]. However, these approximation methods typically do not offer the same model quality as standard attention [55], and so most large-scale models do not employ these techniques. ", "page_idx": 14}, {"type": "text", "text": "There are other variants of attention aimed at reducing the size of the KV cache to improve inference efficiency. Multi-query attention [50] and grouped query attention [3] tie different heads of $\\mathbf{K}$ and $\\mathbf{V}$ , and multiple query heads interact with the same key and value head. Multi-head latent attention [19] parameterizes the K and $\\mathbf{V}$ as low-rank projections of a shared matrix to further reduce the KV cache size. However, all of these approaches do not change the core computation softmax $(\\mathbf{Q}\\mathbf{K}^{T})\\mathbf{V}$ during training and simply change how Q,K,V are obtained. As a result, any efficiency or accuracy improvement to the standard attention computation benefits these methods. ", "page_idx": 14}, {"type": "text", "text": "To extend to even longer context, attention computation can be distributed across multiple GPUs. Methods such as Ring attention [31, 32] and variants [7] can reach a context length of up to 1 million. They use FLASHATTENTION (or FLASHATTENTION-2) as a primitive, and so the improvement from FLASHATTENTION-3 would benefit these distributed attention methods as well. ", "page_idx": 14}, {"type": "text", "text": "Alternative architectures Motivated by the limitations of attention, a variety of alternative architectures have been proposed. They build on the connection between linear attention [27] and recurrent neural networks (RNNs). RWKV [42], H3 [17], MEGA [35], Retnet [54] enhance the expressivity of the simple cumulative sum in linear attention with more sophisticated recurrences. Mamba [22] and xLSTM [5] use learnable weighting for the recurrence and can match the quality of Transformers in language modeling at small or medium scale. These approaches can be connected to generalizations of linear attention through the lens of the structure of the token-mixing matrix [15]. These models have started to see some traction, seeing usage in some medium to large-scale models such as Jamba [2], Zamba [63], Megalodon [36], and Mamba2-hybrid [59]. For the highest quality, these SSM- and RNN-based models still employ many layers of attention. We expect that techniques to speed up attention presented in this work will be useful to speedup these alternative architectures. ", "page_idx": 14}, {"type": "text", "text": "Low-precision attention Quantization is a promising approach to speed up attention, but they have mostly focused on reducing the space for KV cache for inference efficiency. QuIP [8] and QuIP#[57] use incoherent processing to reduce the quantization, and we adapted this technique for FP8 FLASHATTENTION-3. Recent work suggests that for inference the KV cache is highly compressible down to 4-, 3-, or even 2-bits [26, 33]. However, quantization during training is still challenging as higher precision is typically required for stable training. ", "page_idx": 14}, {"type": "text", "text": "Hardware-aware Algorithms Our work presented in this paper focuses on the micro-architecture specific tuning to leverage new instruction sets and adopt a natively asynchronous programming model. There are other orthogonal axes for hardware-aware algorithm co-design being explored. A recent example of this is LeanAttention [48], which recognizes the poor GPU occupancy and high memory bandwidth requirements of the sequential token generation phase as primary bottlenecks for inference and optimizes it via a smarter load balancing strategy similar to Stream-K load balancing [41] to achieve nearly peak occupancy. There is a large literature on optimizing GEMM for specific hardware that employs many of the same techniques. As an example, Abdelfattah et al. [1] presents a high performance batched GEMM kernel on K40c Graphics Processing Units (GPU) for both fixed and variable sizes, proposing specialized GEMM designs and a comprehensive autotuning process to deliver state-of-the-art performance. ", "page_idx": 14}, {"type": "text", "text": "B Addition Details on Algorithms ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "B.1 Asynchrony Through Warp Specialization for the Backward Pass ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Similar to the forward pass $\\S3.1$ , we use warp specialization to handle asynchrony. Instead of just a simple producer-consumer pattern in the forward pass, we add one extra role of a dQ writer, since we need to accumulate the value of dQ produced by each thread block to the global value of dQ. This dQ accumulation introduces memory contention (many thread blocks writing to the same location) so having a separate warp to handle this (along with asynchrony) will avoid blocking the rest of the warps in the thread block to perform the next computation (matmul). ", "page_idx": 15}, {"type": "text", "text": "We include the backward pass with warp specialization in Algorithm 3. ", "page_idx": 15}, {"type": "text", "text": "Algorithm 3 FLASHATTENTION-3 backward pass with warp specialization   \nRequire: Matrices $\\mathbf{Q}{,}\\mathbf{K}{,}\\mathbf{V}{,}\\mathbf{O}{,}\\mathbf{d}\\mathbf{O}\\in\\mathbb{R}^{N\\times d}$ in HBM, logsumexp vector $L\\in\\mathbb{R}^{N}$ in HBM, block sizes   \n$B_{c},B_{r}$ .   \n1: In a preprocessing kernel, compute $D\\,{=}\\,\\mathrm{rowsum}(\\mathbf{dO}\\,\\circ\\mathbf{O})\\,{\\in}\\,\\mathbb{R}^{d}$ (pointwise multiply), write $D$ to   \nHBM and divide it into $T_{r}$ blocks $D_{1},...,D_{T_{r}}$ of size $B_{r}$ each.   \n2: Divide $\\mathbf{Q}$ into $\\begin{array}{r}{T_{r}=\\left\\lceil\\frac{N}{B_{r}}\\right\\rceil}\\end{array}$ blocks $\\mathbf{Q}_{1},...,\\mathbf{Q}_{T_{r}}$ of size $B_{r}\\times d$ each, and divide $\\mathbf{K},\\mathbf{V}$ in to $\\begin{array}{r}{T_{c}=\\left\\lceil\\frac{N}{B_{c}}\\right\\rceil}\\end{array}$   \nblocks $\\mathbf{K}_{1},...,\\mathbf{K}_{T_{c}}$ and $\\dot{\\mathbf{V}_{1}},...,\\mathbf{V}_{T_{c}}$ , of size $\\boldsymbol{B}_{c}\\!\\times\\!d$ each.   \n3: Divide dO into $T_{r}$ blocks $\\mathbf{dO}_{i},...,\\mathbf{dO}_{T_{r}}$ of size $B_{r}\\!\\times\\!d$ each, and divide $L$ into $T_{r}$ blocks $L_{i},...,L_{T_{r}}$   \nof size $B_{r}$ each.   \n4: Initialize pipeline object to manage barrier synchronization with $s$ -stage circular SMEM buffer.   \n5: if in producer warpgroup then   \n6: Deallocate predetermined number of registers.   \n7: Issue load $\\mathbf{K}_{j}$ and $\\mathbf{V}_{j}$ from HBM to shared memory.   \n8: Upon completion, commit to notify consumer of the load of $\\mathbf{K}_{j}$ and $\\mathbf{V}_{j}$ .   \n9: for $1\\!\\le\\!i\\!\\le\\!T_{r}$ do   \n10: Wait for the $(i^{\\mathrm{{e}}}/\\!\\!\\log_{\\!\\!\\boldsymbol{S}})$ th stage of the buffer to be consumed.   \n11: Issue loads of $\\mathbf{Q}_{i},\\mathbf{d}\\mathbf{O}_{i}$ from HBM to shared memory at the $(i^{\\mathrm{{o}}}\\!/\\!\\!_{0S})$ th stage of the buffer.   \n12: Upon completion, commit to notify consumers of the loads of $\\mathbf{Q}_{i}\\mathbf{,dO}_{i}$ .   \n13: end for   \n14: else if in consumer warpgroups then   \n15: Reallocate predetermined number of registers as function of number of consumer warps.   \n16: On-chip, Initialize $\\mathbf{dK}_{j}\\!=\\!(0)_{B_{c}\\times d}\\mathbf{,}\\mathbf{dV}_{j}\\!=\\!(0)_{B_{c}\\times d}$ .   \n17: Wait for $\\mathbf{K}_{j}$ and $\\mathbf{V}_{j}$ to be loaded in shared memory.   \n18: for $1\\!\\le\\!i\\!\\le\\!\\dot{T}_{r}$ do   \n19: Wait for $\\mathbf{Q}_{i}$ to be loaded in shared memory.   \n20: Load $L_{i},D_{i}$ from HBM to on-chip SRAM.   \n21: On chip, compute $\\mathbf{S}_{i}^{(j)}\\!=\\!\\mathbf{Q}_{i}\\mathbf{K}_{j}^{T}\\in\\mathbb{R}^{B_{r}\\times B_{c}}$ (SS-GEMM). Commit.   \n22: Wait for $\\mathbf{dO}_{i}$ to be loaded in shared memory.   \n23: On chip, compute $\\mathbf{dP}_{i}^{(j)}\\!=\\!\\mathbf{dO}_{i}\\mathbf{V}_{j}^{\\top}\\!\\in\\!\\mathbb{R}^{B_{r}\\times B_{c}}$ (SS-GEMM). Commit.   \n24: On chip, wait for $\\mathbf{S}_{i}^{(j)}$ , then compute $\\mathbf{P}_{i}^{(j)}\\!=\\!\\exp(\\mathbf{S}_{i j}\\!-\\!L_{i})\\!\\in\\!\\mathbb{R}^{B_{r}\\times B_{c}}$ .   \n25: On chip, wait for $\\mathbf{dP}_{i}^{(j)}$ , then compute $\\mathbf{dS}_{i}^{(j)}\\!=\\!\\mathbf{P}_{i}^{(j)}\\!\\circ\\!\\big(\\mathbf{dP}_{i}^{(j)}\\!-\\!D_{i}\\big)\\!\\in\\!\\mathbb{R}^{B_{r}\\times B_{c}}.$ .   \n26: On chip, compute $\\mathbf{dV}_{j}\\!\\gets\\!\\mathbf{dV}_{j}\\!+\\!(\\mathbf{P}_{i}^{(j)})^{\\top}\\mathbf{dO}_{i}\\!\\in\\!\\mathbb{R}^{B_{c}\\times d}$ (RS-GEMM). Commit.   \n27: On chip, compute $\\mathbf{dK}_{j}\\!\\gets\\!\\mathbf{dK}_{j}\\!+\\!\\mathbf{dS}_{i}^{(j)}^{\\top}\\mathbf{Q}_{i}\\!\\in\\!\\mathbb{R}^{B_{c}\\times d}$ (RS-GEMM). Commit and wait for both   \n$\\mathbf{dV}_{j}$ and ${\\bf d K}_{j}$ .   \n28: On chip, compute $\\mathbf{dQ}_{i}^{\\left(\\mathrm{local}\\right)}=\\mathbf{dS}_{i}^{\\left(j\\right)}\\mathbf{K}_{j}\\in\\mathbb{R}^{B_{r}\\times d}$ (SS-GEMM), and write $\\mathbf{dQ}_{i}^{(\\mathrm{local})}$ to smem.   \nNotify the dQ-writer.   \n29: end for   \n30: else if in dQ-writer warp then   \n31: for $1\\!\\le\\!i\\!\\le\\!T_{r}$ do   \n32: Wait for dQ\ud835\udc56(local)t o be ready in smem.   \n33: Using a semaphore, atomically add ${\\bf d}{\\bf Q}_{i}^{(\\mathrm{local})}$ to ${\\bf d Q}_{i}$ in global memory.   \n34: end for   \n35: end if ", "page_idx": 15}, {"type": "text", "text": "B.2 2-Stage Pipelining SASS Analysis ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We give simplified SASS code for the inside of the consumer warpgroup mainloop. ", "page_idx": 16}, {"type": "text", "text": "// Compute row_max FMNMX.FTZ R0, R24, R6, !PT ; SHFL.BFLY PT, R185, R2, 0x2, 0x1f ; ... FMNMX and SHFL.BFLY ... ", "page_idx": 16}, {"type": "text", "text": "// Apply exp2 and row_sum. Rescale O.   \nFMUL.FTZ R2, R4, UR9 ;   \nMUFU.EX2 R185, R184 ;   \nFFMA.FTZ R24, R24, UR9, -R6.reuse ;   \nFADD.FTZ R24, R211, R24 ;   \n... FMUL, FFMA, FMUL, MUFU.EX2, FADD ... // FP32 -> FP16 conversion are interleaved with exp2, row_sum and O rescaling.   \nF2FP.F16.F32.PACK_AB R231, R25, R231 ;   \n... F2FP, FMUL, MUFU, FFMA, FADD ... // Start the first WGMMA. Broken down into 8 HGMMAs.   \n// The first 7 HGMMAs are packed together.   \nWARPGROUP.ARRIVE ;   \nHGMMA.64x192x16.F32 R24, gdesc[UR44], RZ, !UPT ;   \n... HGMMA x 6 ... // FP32- $\\cdot>$ FP16, exp2, row_sum, O rescaling are interleaved with HGMMA.   \nF2FP.F16.F32.PACK_AB R214, R214, R187 ;   \nMUFU.EX2 R234, R5 ;   \nFADD.FTZ R237, R187, R2 ;   \n... F2FP, MUFU, FADD ... // The last HGMMA is issued here. No need to wait.   \nHGMMA.64x192x16.F32 R24, gdesc[UR44], R24, gsb0 ; // Start the second WGMMA. Broken down into 12 HGMMAs.   \n// All 12 HGMMAs are packed together. Not interleaved with other instructions.   \nWARPGROUP.ARRIVE ;   \nHGMMA.64x128x16.F32 R120, R228, gdesc[UR8].tnspB, R120 ;   \n... HGMMA x 10 ...   \nHGMMA.64x128x16.F32 R120, R184, gdesc[UR8].tnspB, R120, gsb0 ; // wgmma.wait_group at the end.   \nWARPGROUP.DEPBAR.LE gsb0, $\\mathtt{O x O}$ ; ", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "We make the following observations: ", "page_idx": 16}, {"type": "text", "text": "1. Softmax is reordered to the very beginning, even before the first WGMMA.   \n2. The first WGMMA is interleaved with softmax and $\\mathrm{FP}32\\rightarrow\\mathrm{FP}16$ datatype conversion of   \nS. This indicates that WGMMA and non-WGMMAs are executed in parallel.   \n3. exp2, row\\_sum, O rescaling and $\\mathrm{FP}32\\rightarrow\\mathrm{FP}16$ conversions are interleaved together.   \n4. The second WGMMA is not overlapped with other instructions, as expected. ", "page_idx": 16}, {"type": "text", "text": "Overall, SASS shows that the 2-stage pipelining idea works as expected. ", "page_idx": 16}, {"type": "text", "text": "B.3 3-Stage Pipelining Algorithm ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We experiment with a 3-stage pipelining algorithm to parallelize the first WGMMA from iteration $j\\!+\\!2$ , softmax from iteration $j\\!+\\!1$ , and the second WGMMAfrom iteration $j$ . We describe this algorithmin Algorithm 4. This algorithm behaves worse than the 2-stage pipelining algorithm due to the reasons below: ", "page_idx": 16}, {"type": "image", "img_path": "tVConYid20/tmp/d4556a67a435cf309d8f2a58bf71086ca7e3e66a6231e423aa8e1d1110c6d0d9.jpg", "img_caption": ["Figure 8: 3-Stage Pipelining "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "Algorithm 4 FLASHATTENTION 3-stage pipelining consumer warpgroup forward pass ", "page_idx": 17}, {"type": "text", "text": "Require: Matrices $\\mathbf{Q}{,}\\mathbf{K}{,}\\mathbf{V}\\!\\in\\!\\mathbb{R}^{N\\times d}$ in HBM, block sizes $B_{c},B_{r}$ . Each warpgroup reads 1 block Qi of   \nsize \ud835\udc35\ud835\udc5f\u00d7\ud835\udc51, \ud835\udc47\ud835\udc50= \ud835\udc35\ud835\udc41\ud835\udc50 blocks $\\mathbf{K}_{1},...,\\mathbf{K}_{T_{c}}$ and $\\mathbf{V}_{1},...,\\mathbf{V}_{T_{c}}$ of size $\\boldsymbol{B}_{c}\\!\\times\\!d$ . Each warpgroup writes 1   \noutput block $\\mathbf{o}_{i}$ of size $B_{r}\\!\\times\\!d$ , and 1 logsumexp block $L_{i}$ of size $B_{r}$ .   \n1: Initialization. Load $\\mathbf{Q}_{i}$ from HBM to on-chip SRAM. Initialize $\\mathbf{O}_{i},\\!\\ell_{i},\\!m_{i},\\!s c a l e\\_o$ .   \n2: Wait for the producer warpgroup loading $\\mathbf{K}_{0}$ from HBM to on-chip SRAM.   \n3: Compute $\\mathbf{S}\\!=\\!\\mathbf{Q}_{i}\\mathbf{K}_{0}^{T}$ using WGMMA. Commit and wait.   \n4: Compute $m_{i}$ , $\\tilde{\\mathbf{P}}_{i}$ , $\\ell_{i}$ , \ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52_\ud835\udc5cbased on S.   \n5: Wait for the producer warpgroup loading $\\mathbf{K}_{1}$ from HBM to on-chip SRAM.   \n6: Compute $\\mathbf{S}{=}\\mathbf{Q}_{i}\\mathbf{K}_{1}^{T}$ using WGMMA. Commit and wait.   \n7: for $2\\le j<T_{c}\\!-\\!2\\,\\epsilon$ do   \n8: Wait for the producer warpgroup loading $\\mathbf{K}_{j}$ from HBM to on-chip SRAM.   \n9: Compute $\\mathbf{S}\\_n e x t\\mathop{=}\\mathbf{Q}_{i}\\mathbf{K}_{j}^{T}$ using WGMMA. Commit but do not wait.   \n10: Wait for the producer warpgroup loading $\\mathbf{V}_{j-2}$ from HBM to on-chip SRAM.   \n11: Rescale $\\mathbf{o}_{i}$ based on $s c a l e\\_o$ .   \n12: Compute $\\mathbf{O}_{i}\\!=\\!\\mathbf{O}_{i}\\!+\\!\\tilde{\\mathbf{P}}_{i}\\mathbf{V}_{j-2}$ using WGMMA. Commit but do not wait.   \n13: Compute $m_{i}$ , $\\tilde{{\\bf P}}_{i\\_n e x t}$ , $\\ell_{i}$ , \ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52_\ud835\udc5cbased on S.   \n14: Wait for all previous WGMMAs.   \n15: Copy S_\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61to $\\mathbf{S}$ .   \n16: Copy $\\tilde{{\\bf P}}_{i\\_n e x t}$ to $\\tilde{\\mathbf{P}}_{i}$ .   \n17: end for   \n18: Wait for the producer warpgroup loading ${\\bf V}_{T_{c}-2}$ from HBM to on-chip SRAM.   \n19: Rescale $\\mathbf{o}_{i}$ based on \ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52_\ud835\udc5c.   \n20: Compute $\\mathbf{O}_{i}\\!=\\!\\mathbf{O}_{i}\\!+\\!\\tilde{\\mathbf{P}}_{i}\\mathbf{V}_{T_{c}-2}$ using WGMMA. Commit and wait.   \n21: Compute $m_{i}$ , $\\tilde{\\mathbf{P}}_{i}$ , $\\ell_{i}$ , \ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52_\ud835\udc5cbased on S.   \n22: Wait for the producer warpgroup loading $\\mathbf{V}_{T_{c}-1}$ from HBM to on-chip SRAM.   \n23: Rescale $\\mathbf{o}_{i}$ based on $s c a l e\\_o$ .   \n24: Compute $\\mathbf{O}_{i}\\!=\\!\\mathbf{O}_{i}\\!+\\!\\tilde{\\mathbf{P}}_{i}\\mathbf{V}_{T_{c}-1}$ using WGMMA. Commit and wait.   \n25: Epilogue. Rescale $\\mathbf{o}_{i}$ based on $\\ell_{i}$ . Compute $L_{i}$ based on $\\ell_{i}$ and $m_{i}$ . Write $\\mathbf{o}_{i}$ and $L_{i}$ to HBM as the   \n$i$ -th block of $\\mathbf{o}$ and $L$ . ", "page_idx": 17}, {"type": "text", "text": "Overlapping. We expected that softmax can be overlapped with (the first WGMMA $^+$ the second WGMMA). However, the compiler doesn\u2019t cooperate in this way. SASS code shows that only the first WGMMA is overlapped with softmax, while the second WGMMA is not. It\u2019s not clear why the compiler chooses to reorder instructions in this way. ", "page_idx": 17}, {"type": "text", "text": "Register pressure. This algorithm requires more registers compared to the 2-stage pipelining algorithm. In theory, it needs to store an extra $\\tilde{\\mathbf{P}}_{i}$ and \ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52_\ud835\udc5c, which is of size $B_{r}\\,\\times\\,B_{c}\\,\\times$ sizeof(input_data_type) $+B_{r}\\times$ sizeof(float). As a result, a smaller block size needs to be chosen. ", "page_idx": 17}, {"type": "text", "text": "B.4 Variable Sequence Length ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Some optimizations mentioned above cannot be directly used for variable sequence lengths and require special handling. ", "page_idx": 17}, {"type": "text", "text": "TMA To enable TMA to handle variable sequence lengths directly, additional steps are required. These include modifying a tensormap using the PTX instruction \u2019tensormap.replace\u2019 and store the tensormap in global memory, which adds overhead and complexity. To address this, during the forward pass when loading Q, we make TMA consistently loads tile_size rows of data. For out-of-bound access, TMA sets zeros for rows beyond the original tensor, while S tensor masking masks out unused rows in a tile. When writing O, we leverage memory-coalesced writes directly, as this is the final step and does not require asynchrony. In the backward pass, a preprocess kernel pads each sequence in dQ, dPSum, and LSE tensors with an additional 128 (tile_size) elements, allowing us to utilize TMA store for efficient data transfer. ", "page_idx": 17}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "Threadblock cluster and TMA multi-cast We utilize TMA multi-cast with a cluster size of 2 for fixed sequence length data loads, allowing every 2 threadblocks processing the same sequence to collaboratively read KV tensors. However, this approach is not well-suited for variable sequence lengths or cases like causal masking and window attention, where some threadblocks may exit earlier and cannot collaborate with other threadblocks in the same cluster. Not utilizing clustering for variable sequence lengths results in a performance drop of around $2\\%$ compared to fixed sequence lengths. ", "page_idx": 18}, {"type": "text", "text": "B.5 Masks: causal, local attention, variable sequence length ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "We apply masks to the S tensor to handle causal and local attention, as well as out-of-bound access for variable sequence lengths. Since masking is expensive, we apply it only when necessary. For instance, in the forward pass, the minimum and maximum KV block indices are calculated and iterated over in the main loop. For causal or variable sequence lengths, masking is applied only to the maximum K block index. For local attention, masking is applied only to the first and last few K block indices based on local attention configurations. Masking is skipped for other K block indices. ", "page_idx": 18}, {"type": "text", "text": "B.6 Persistent Kernel ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "During the execution of the attention kernel, there is a prologue (loading $Q$ ) and epilogue (writing output) where the Tensor Cores are not running. To maximize efficiency, we implement a persistent kernel that can overlap the epilogue of one iteration with the prologue of the next iteration to reduce this overhead and keep the Tensor Cores busy. In particular, we launch as many thread blocks as there are streaming multiprocessors (e.g., 132 on the H100 SXM5) and implement a scheduler that assigns tiles to each of the thread block. Each thread block might perform attention for more than one tile. ", "page_idx": 18}, {"type": "text", "text": "B.7 Register data exchange required for second WGMMA in FP8 FLASHATTENTION-3 ", "text_level": 1, "page_idx": 18}, {"type": "image", "img_path": "tVConYid20/tmp/8b62e807a8fb57f7dd45ebe514bda670027f008a587d8bdd1eea076c8bdcbff4.jpg", "img_caption": ["Figure 9: Register data movement to satisfy layout conformance requirements of FP8 WGMMA. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "In code, we can effect the register-to-register data exchange that transforms the register ownership pattern of Fig. 3 into Fig. 4 through invoking a combination of the following two CUDA intrinsics: ", "page_idx": 18}, {"type": "text", "text": "\u2022 byte_perm: Given two 32-bit unsigned integers x and y and selector s, the byte permute instruction returns 4 bytes from the 8 input bytes as specified by s.   \n\u2022 shfl_sync: The shuffle instruction exchanges register data from a source lane index $\\dot{\\b{\\jmath}}$ into its own destination register. ", "page_idx": 18}, {"type": "text", "text": "Our method is illustrated in Fig. 9. First, we can swap the order of data held within a thread\u2019s registers by usingbytepermuteasfollows. ReferringtothetoprowofFig.9, foragiventhreadletupperbethefirst4 bytes(thoseinlightanddarkblue)andletlowerbethelast4bytes(thoseinlightanddarkyellow). Then for the data held by threads 1 and 2, we do the swap by calling byte_perm with the indicated selectors: ", "page_idx": 18}, {"type": "text", "text": "Now between the second and third rows, we exchange data among threads by using shuffle instructions. Observe that the upper and lower blocks of 4 bytes should be each exchanged among themselves. Moreover, the shuffling of the upper blocks differs from that of the lower blocks, and both shuffles depend on the thread index (mod 4). We account for this using two pre-defined arrays to call __shfl_sync with the correct srcLane parameter as follows: ", "page_idx": 19}, {"type": "text", "text": "int upper_map[4] $\\mathbf{\\alpha}=\\{0\\,,3\\,,1\\,,2\\}$ ;   \nint lower_map[4] $=$ {1,2,0,3};   \nupper_mid $=$ __shfl_sync(uint32_t(-1), upper_mid, upper_map[threadIdx.x%4], 4);   \nlower_mid $=$ __shfl_sync(uint32_t(-1), lower_mid, lower_map[threadIdx.x%4], 4); ", "page_idx": 19}, {"type": "text", "text": "Finally, between the third and fourth rows, we repeat the technique with byte_perm, but now for all four threads and with the selector depending on the thread index (mod 4). For threads 0 and 3, we have: ", "page_idx": 19}, {"type": "text", "text": "upper_last $=$ __byte_perm(upper_mid, lower_mid, 0x5410);   \nlower_last $=$ __byte_perm(upper_mid, lower_mid, 0x7632); ", "page_idx": 19}, {"type": "text", "text": "whereas for threads 1 and 2, we have: ", "page_idx": 19}, {"type": "text", "text": "upper_last $=$ __byte_perm(upper_mid, lower_mid, 0x1054);   \nlower_last $=$ __byte_perm(upper_mid, lower_mid, 0x3276); ", "page_idx": 19}, {"type": "text", "text": "B.8 In-kernel transposition of V for FP8 FLASHATTENTION-3 ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "We describe how to fuse the memory transpose of V needed for the second FP8 WGMMA into FLASHATTENTION-3. This is handled as an out-of-place SMEM to RMEM to SMEM transfer that is executed in the producer warpgroup. ", "page_idx": 19}, {"type": "text", "text": "Specifically, within the producer mainloop, after issuing the TMA load of a tile of V, the producer warpgroup waits for the load to complete. Then, producer warps effect the transpose by issuing LDSM (ldmatrix) and STSM (stmatrix) instructions, which involve a warp of threads collectively loading SMEM to RMEM and storing RMEM to SMEM at a granularity of 128 bytes. Finally, we have an additional pipeline object to manage synchronization between the producer warpgroup and consumers, since the producer pipeline for the TMA load of V now instead has the producer warpgroup as its consumer. ", "page_idx": 19}, {"type": "text", "text": "We choose LDSM/STSM instructions as they are both register efficient, allowing us to execute them in the producer warpgroup even after register deallocation, and capable of transposing layouts when doing memory copy. Note that as SMEM requirements are first reduced by the smaller memory footprint of the FP8 datatype, we find that we have enough SMEM for the separate buffer used to store the transpose. ", "page_idx": 19}, {"type": "text", "text": "There is a technical obstacle to using LDSM and STSM in the context of FP8 datatype that is worth mentioning. Note that in the PTX documentation, LDSM/STSM are described as copying $8\\times8$ matrices with 16-bit entries [40, \u00a79.7.13.4.15-16], but we can pack 8-bit entries two at a time to use LDSM/STSM in the context of FP8 precision. However, the transpose versions of LDSM/STSM cannot split packed 8-bit entries, which necessitates certain register movements in between LDSM and STSM to actually perform a tile-wise transpose. The use of byte permute to split and reorder packed 8-bit entries in between LDSM and STSM is depicted in the following code snippet: ", "page_idx": 19}, {"type": "text", "text": "cute::copy(tiled_copy_ldsm, tXsX, tXrX);   \nauto data $=\\tt t X r X$ .data();   \n#pragma unroll   \nfor (int $\\mathtt{n}=\\,0$ ; n < size(tXrX); $\\mathtt{n}\\mathrel{+}=8!$ ) { uint32_t $^*$ data_32bit $=$ reinterpret_cast<uint32_t \\*>(&data[n]); auto upper $=$ data_32bit[0]; auto lower $=$ data_32bit[1]; data_32bit[0] $=$ __byte_perm(upper, lower, 0x6420); data_32bit[1] $=$ __byte_perm(upper, lower, 0x7531);   \n} ", "page_idx": 19}, {"type": "text", "text": "Since this permutes the eventual rows of the transposed V tile, we also need to modify the register movements on the consumer side that transform accumulator to operand P. We exploit the mathematical fact that ", "page_idx": 19}, {"type": "text", "text": "for $\\sigma$ a permutation of the common inner dimension of $\\mathbf{P}$ and V. Moreover, for the modified register exchange, we can eliminate the use of warp shuffles, but not byte permute, as each thread will already own all the entries it needs for WGMMA. ", "page_idx": 20}, {"type": "text", "text": "B.9 FLASHATTENTION-3 for inference ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "For decoding inference, the query sequence length is much shorter than the key/value sequence length, typically on the order of one or a few tokens compared to the thousands stored in the KV cache. In this situation, attention becomes a memory-bound workload, and the relevant metric is not tensor core utilization as measured by FLOPs/s, but loading the KV cache as fast as possible as measured by memory bandwidth. Furthermore, since the FLASHATTENTION-3 algorithm described in $\\S3.1$ parallelizes over the query sequence length, it can suffer from a lack of parallelism for decoding. ", "page_idx": 20}, {"type": "text", "text": "We make two modifications to FLASHATTENTION-3 to introduce more parallelism for decoding: ", "page_idx": 20}, {"type": "text", "text": "1. Split KV (or Flash-Decoding): We split the attention kernel along the key/value sequence length, with the number of splits determined by a heuristic at launch, and combine the resulting outputs using a separate post-processing reduction kernel. \u201cSplitting\u201d according to a parameter $n$ means that $n$ threadblocks load the same tile of Q and $n$ different segments of the KV cache, computing $n$ different output tiles $\\mathbf{O}_{1},...,\\mathbf{O}_{n}$ and lse vectors $\\mathbf{lse}_{1},...,\\mathbf{lse}_{n}$ , which we then use to compute O in the reduction kernel. We also allow for early exit of threadblocks whose given segment of the KV cache doesn\u2019t contribute to the final output, in which case the threadblock writes out $-\\infty$ as its lse. This amounts to essentially the same implementation as described in [18]. ", "page_idx": 20}, {"type": "text", "text": "2. GQA packing: For multi-query attention or grouped-query attention, we can restructure the attention mainloop in order to pack multiple query heads per KV head, where each threadblock now loads its Q tile across different query heads. When query length is short, this achieves additional parallelism \u201cfor free\u201d thanks to the large width of the first operand WGMMA tile, given as 64 per warpgroup. For example, we could have a model architecture with 16 query heads per KV head and a query sequence length of 8, in which case a threadblock can pack all 16 query heads into its Q tile without any change to Algorithm 2. In practice, this yields up to $N\\mathbf{x}$ speedup over an implementation that doesn\u2019t do GQA packing, where $N$ is the GQA ratio. ", "page_idx": 20}, {"type": "text", "text": "FLASHATTENTION-3 for inference also features an implementation of PagedAttention [29] that was contributed by Kai Londenberg. Recall that PagedAttention is a memory optimization technique for efficiently storing the KV cache in terms of fixed-size pages. This entails separating the logical position of KV blocks from their physical addresses, with a block table defining the address translation [29, $\\S4.2]$ . ", "page_idx": 20}, {"type": "text", "text": "Now, prior implementations of TMA load in CUTLASS construct the tensor map object such that TMA tensor coordinates are determined using the physical GMEM tensor. To use a block table with TMA, Londenberg defines a new SM90_TMA_LOAD_PAGED_OP class and a tensor map constructor that instead determines TMA tensor coordinates in terms of the virtual shape. The block table is then passed into the TMA copy method as an additional argument. ", "page_idx": 20}, {"type": "text", "text": "C Addition Details on Experiments and Benchmarking ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "C.1 System and libraries ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "We benchmark the speed on an H100 80GB SXM5 (700W). We generally use the latest versions of the libraries, at the time of writing (October 2024). Specifically, we use: ", "page_idx": 20}, {"type": "text", "text": "\u2022 CUDA 12.3   \n\u2022 cuDNN 9.5.0.50   \n\u2022 CUTLASS 3.6   \n\u2022 FLASHATTENTION 2.6.3   \n\u2022 Triton 3.1   \n\u2022 PyTorch 2.5.0 ", "page_idx": 20}, {"type": "text", "text": "To reduce variability, we fix the GPU clock speed to 1830MHz (clock speed used to calculate the 989 TFLOPS FP16 theoretical max throughput). We repeat the benchmarks 10 times and take the average timing. ", "page_idx": 21}, {"type": "text", "text": "C.2 FP8 Attention Full Results ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "We use following sequence lengths: 512, 1024, 2048, 4096, 8192, 16384. ", "page_idx": 21}, {"type": "image", "img_path": "tVConYid20/tmp/635a4b38302299d119ec22054e9c8809a5c444f77cdd29662563b88e65515bcc.jpg", "img_caption": ["(a) Forward, without causal mask, head dim 64 "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "tVConYid20/tmp/4bf05e3aa8eaf1dbdd52d22f6ba13dcc4117ff2b4341a1dc773ee01aef17327a.jpg", "img_caption": ["(c) Forward, without causal mask, head dim 128 "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "tVConYid20/tmp/97b69ab7141f7359a7db0b63494313a01da24971176ada63345381251de8e1b3.jpg", "img_caption": ["(e) Forward, without causal mask, head dim 256 "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "tVConYid20/tmp/d38835a638c5523e16a6de366de7fd6d9734184e0eef9e38efdce9d04d296f5d.jpg", "img_caption": ["(b) Forward, with causal mask, head dim 64 "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "tVConYid20/tmp/092454aeb24d6750d6ab05ecff1a80c1decda3a8ded360c8b1a532f18a63aaa1.jpg", "img_caption": ["(d) Forward, with causal mask, head dim 128 "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "tVConYid20/tmp/05490484b2f92ba696c8a341f39a8a3f084e5a2f4ccda97896eb3ed4de5d93cd.jpg", "img_caption": ["Figure 10: Attention forward speed (FP8) on H100 GPU ", "(f) Forward, with causal mask, head dim 256 "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: Abstract and intro reflects the paper\u2019s contribution. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 22}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: Discussed in \u00a75 ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 22}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: The paper does not include theoretical results. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and cross-referenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 23}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: Detailed information in Appendix C.1. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 23}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [No] ", "page_idx": 23}, {"type": "text", "text": "Justification: The code will be released with a permissive license in the near future. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage therelease of code and data, we understand that thismight not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https://nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 24}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 24}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 24}, {"type": "text", "text": "Justification: The paper does not include training models. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 24}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 24}, {"type": "text", "text": "Answer: [No] ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Justification: Not necessary for speed benchmarks since we already take average of a large number (30) of trials. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified. ", "page_idx": 24}, {"type": "text", "text": "\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates). \u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 25}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: In Appendix C.1 Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 25}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: Yes Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 25}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 25}, {"type": "text", "text": "Answer: [No] ", "page_idx": 25}, {"type": "text", "text": "Justification: The paper focuses on foundational research and not tied to a particular application. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. ", "page_idx": 25}, {"type": "text", "text": "\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. \u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 26}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 26}, {"type": "text", "text": "Justification: No release of high-risk data or models. Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 26}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 26}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA]   \nJustification: No new assets. Guidelines:   \n\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 26}, {"type": "text", "text": "", "page_idx": 27}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: No crowdsourcing or human subjects. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 27}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: No crowdsourcing or human subjects. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 27}]