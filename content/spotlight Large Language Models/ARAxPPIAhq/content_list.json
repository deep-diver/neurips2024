[{"type": "text", "text": "xLSTM: Extended Long Short-Term Memory ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Maximilian Beck\u22171,2,3 Korbinian P\u00f6ppel\u22171,2,3 Markus Spanring 1 Andreas Auer 1,2 Oleksandra Prudnikova 1 Michael Kopp   \nG\u00fcnter Klambauer 1,2,3 Johannes Brandstetter 1,2,3 Sepp Hochreiter 1,2,3 \u2217Equal contribution ", "page_idx": 0}, {"type": "text", "text": "1ELLIS Unit, LIT AI Lab, Institute for Machine Learning, JKU Linz, Austria 2NXAI Lab, Linz, Austria, 3NXAI GmbH, Linz, Austria ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "In the 1990s, the constant error carousel and gating were introduced as the central ideas of the Long Short-Term Memory (LSTM). Since then, LSTMs have stood the test of time and contributed to numerous deep learning success stories, in particular they constituted the first Large Language Models (LLMs). However, the advent of the Transformer technology with parallelizable self-attention at its core marked the dawn of a new era, outpacing LSTMs at scale. We now raise a simple question: How far do we get in language modeling when scaling LSTMs to billions of parameters, leveraging the latest techniques from modern LLMs, but mitigating known limitations of LSTMs? Firstly, we introduce exponential gating with appropriate normalization and stabilization techniques. Secondly, we modify the LSTM memory structure, obtaining: (i) sLSTM with a scalar memory, a scalar update, and new memory mixing, (ii) mLSTM that is fully parallelizable with a matrix memory and a covariance update rule. Integrating these LSTM extensions into residual block backbones yields xLSTM blocks that are then residually stacked into xLSTM architectures. Exponential gating and modified memory structures boost xLSTM capabilities to perform favorably when compared to state-of-the-art Transformers and State Space Models, both in performance and scaling. ", "page_idx": 0}, {"type": "text", "text": "Code available at: https://github.com/NX-AI/xlstm ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "The Long Short-Term Memory (LSTM) ideas (Hochreiter, 1991; Hochreiter & Schmidhuber, 1997b,a), i.e., the constant error carousel and gating, were introduced to overcome the vanishing gradient problem of recurrent neural networks (Hochreiter, 1991; Hochreiter et al., 2000): ", "page_idx": 0}, {"type": "equation", "text": "$$\nc_{t}\\;\\;=\\;\\;\\mathrm{f}_{t}\\;\\;\\;c_{t-1}\\;\\;+\\;\\;\\mathrm{i}_{t}\\;\\;\\;z_{t}\\;\\;,\\;\\;\\;\\;h_{t}\\;=\\;\\;\\mathrm{o}_{t}\\;\\;\\psi\\big(\\;c_{t}\\;\\big)\\;.\n$$", "text_format": "latex", "page_idx": 0}, {"type": "text", "text": "The constant error carousel is the additive update of the cell state $c_{t-1}$ (green) by cell inputs $z_{t}$ and moderated by sigmoid gates (blue). The input gate $\\mathrm{i}_{t}$ and the forget gate $\\mathrm{f}_{t}$ control this update, while the output gate $\\mathrm{O}_{t}$ controls the output of the memory cell, i.e. the hidden state $h_{t}$ . The cell state is normalized or squashed by $\\psi$ and then output gating gives the hidden state. ", "page_idx": 0}, {"type": "text", "text": "LSTMs have been successfully applied to various domains (Hochreiter et al., 2001, 2007; Schmidhuber, 2015), and prevailed over text generation until the dawn of Transformers in 2017 (Vaswani et al., 2017). The effectiveness of LSTMs has been demonstrated at numerous sequence-related tasks such as generating text (Graves, 2013; Karpathy, 2015), generating handwritings (Graves, 2013), sequence-to-sequence translation (Sutskever et al., 2014), evaluating computer programs (Zaremba & Sutskever, 2014), generating image captions (Karpathy & Fei-Fei, 2015; Hossain et al., 2019), generating source code (Karpathy, 2015), rainfall-runoff modeling (Kratzert et al., 2018, 2019), or hydrological models for flooding warnings (Nearing et al., 2024). In reinforcement learning, LSTMs are the best performing sequence models, e.g., the AlphaStar model for StarCraft II (Vinyals et al., 2017), the OpenAI Five model for Dota 2 (Karpathy, 2019), and models of the magnetic controller for nuclear fusion (Degrave et al., 2022). LSTMs excel at learning abstractions, i.e., adeptly extracting semantic information and storing it in their memory cells (Karpathy, 2015), which for example became evident by number and syntax neurons (Lakretz et al., 2019), linguistic neurons (Bau et al., 2019), and sentiment neurons (Radford et al., 2017). LSTMs are still used in highly relevant applications (Degrave et al., 2022; Nearing et al., 2024) and have stood the test of time. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Despite their tremendous successes, LSTMs have three main limitations: (i) Inability to revise storage decisions. We exemplify this limitation via the Nearest Neighbor Search problem (see also Appendix D): With a reference vector given, a sequence must be scanned sequentially for the most similar vector in order to provide its attached value at sequence end. The left panel of Figure 1 shows the mean squared error at this task. LSTM struggles to revise a stored value when a more similar vector is found, while our new xLSTM remediates this limitation by exponential gating. (ii) Limited storage capacities, i.e., information must be compressed into scalar cell states. We exemplify this limitation via Rare Token Prediction. In the right panel of Figure 1, the perplexity of token prediction on Wikitext103 (Merity et al., 2017) is given for ", "page_idx": 1}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/2cba3b003d6f43b41f33564059a7151a575ba0eb29c285e7b304c4be683c57c5.jpg", "img_caption": [], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "Figure 1: LSTM limitations. Left: Nearest Neighbor Search problem in terms of mean squared error (MSE). Given a reference vector, a sequence is scanned sequentially for the most similar vector with the objective to return its attached value at sequence end. LSTM struggles to revise a stored value when a more similar vector is found. Our new xLSTM overcomes this limitation by exponential gating. Right: Rare Token Prediction. The perplexity (PPL) of token prediction on Wikitext-103, in partitions of token frequency. LSTM performs worse on predicting rare tokens because of its limited storage capacities, whereas our new xLSTM solves this problem via a matrix memory. ", "page_idx": 1}, {"type": "text", "text": "partitions of different token frequency. LSTM performs worse on rare tokens because of its limited storage capacities. Our new xLSTM solves this problem by a matrix memory. (iii) Lack of parallelizability due to memory mixing, i.e., the hidden-hidden connections between hidden states from one time step to the next, which enforce sequential processing. ", "page_idx": 1}, {"type": "text", "text": "These limitations of LSTM have paved the way for the emergence of Transformers (Vaswani et al., 2017) in language modeling. What performances can we achieve in language modeling when overcoming these limitations and scaling LSTMs to the size of current Large Language Models? ", "page_idx": 1}, {"type": "text", "text": "2 Extended Long Short-Term Memory ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "To overcome the LSTM limitations, Extended Long Short-Term Memory (xLSTM) introduces two main modifications to the LSTM idea of Equation (1). Those modifications \u2014 exponential gating and novel memory structures \u2014 enrich the LSTM family by two members: (i) the new sLSTM (see Section 2.2) with a scalar memory, a scalar update, and memory mixing, and (ii) the new mLSTM (see Section 2.3) with a matrix memory and a covariance (outer product) update rule, which is fully parallelizable. Both sLSTM and mLSTM enhance the LSTM through exponential gating. To enable parallelization, the mLSTM abandons memory mixing, i.e., the hidden-hidden recurrent connections. Both mLSTM and sLSTM can be extended to multiple memory cells, where sLSTM features memory mixing across cells. Further, the sLSTM can have multiple heads without memory mixing across the heads, but only memory mixing across cells within each head. This introduction of heads for sLSTM together with exponential gating establishes a new way of memory mixing. For mLSTM multiple heads and multiple cells are equivalent. ", "page_idx": 1}, {"type": "text", "text": "Integrating these new LSTM variants into residual block modules results in xLSTM blocks (see Section 2.4). Residually stacking those xLSTM blocks in architectures provides xLSTM architectures (see Section 2.4). See Appendix Figure 6 for the xLSTM architecture with its components. ", "page_idx": 1}, {"type": "text", "text": "2.1 Review of the Long Short-Term Memory ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "The original LSTM idea (Hochreiter, 1991; Hochreiter & Schmidhuber, 1997b,a) introduced the scalar memory cell as a central processing and storage unit that avoids vanishing gradients (Hochreiter, 1991; Hochreiter et al., 2000) through the constant error carousel (cell state update). The memory cell contains three gates: input, output, and forget gate. The latter was introduced by Gers et al. (2000). The LSTM memory cell update rules at time step $t$ are: ", "page_idx": 2}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/776e843676e354f030059f8abbac2a01f9c9f98e4197f56ef139839a147b26f7.jpg", "img_caption": [], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "The weight vectors $\\pmb{w}_{z}$ $\\mathbf{\\Pi}_{z},\\,w_{\\mathrm{i}},\\,w_{\\mathrm{f}}$ , and $\\pmb{w}_{\\mathrm{{o}}}$ correspond to the input weight vectors between inputs $\\pmb{x}_{t}$ and cell input, input gate, forget gate, and output gate, respectively. The weights $r_{z}$ , $r_{\\mathrm{i}},\\,r_{\\mathrm{f}}$ , and $r_{\\mathrm{{o}}}$ correspond to the recurrent weights between hidden state $h_{t-1}$ and cell input, input gate, forget gate, and output gate, respectively. $b_{z},\\,b_{\\mathrm{i}},\\,b_{\\mathrm{f}}$ , and $b_{\\mathrm{o}}$ are the corresponding bias terms. $\\varphi$ and $\\psi$ are the cell input and hidden state activation functions (typically tanh). $\\psi$ is used to normalize or squash the cell state, which would be unbounded otherwise. All gate activation functions are sigmoid, i.e., $\\sigma\\left(x\\right)=1/(1+\\exp(-x))$ . In later formulations, multiple scalar memory cells $c_{t}\\in\\mathbb{R}$ were combined in a vector $\\boldsymbol{c}_{t}\\in\\mathbb{R}^{d}$ , which allows the usage of recurrent weight matrices $R\\in\\mathbb{R}^{d\\times d}$ for each gate to mix the cell outputs of memory cells (Greff et al., 2015), for more details see Appendix B.1. Ablation studies showed that all components of the memory cell are crucial (Greff et al., 2015). ", "page_idx": 2}, {"type": "text", "text": "2.2 sLSTM ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "To empower LSTMs with the ability to revise storage decisions, we introduce exponential gates (red) together with normalization and stabilization. In particular, input and forget gates can have exponential activation functions. For normalization, we introduce a normalizer state that sums up the product of the input gate times all future forget gates. The scalar sLSTM forward pass is: ", "page_idx": 2}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/b30aa91a04f0b6014cd760a0d4ce78046a44390b8a2890f04f5085c102389637.jpg", "img_caption": [], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "We transfer the original LSTM gating techniques, i.e., input- and/or hidden-dependent gating plus bias term, to the new architectures. Exponential activation functions can lead to large values that cause overflows. Therefore, we stabilize gates with an additional state $m_{t}$ (Milakov & Gimelshein, 2018), see Equations (49) \u2013 (51) in the appendix. ", "page_idx": 2}, {"type": "text", "text": "New Memory Mixing. sLSTM can have multiple memory cells like the original LSTM (see Appendix B.2). Multiple memory cells enable memory mixing via recurrent connections $R_{z},R_{\\mathrm{i}}$ , $R_{\\mathbf{f}}$ , $R_{\\mathrm{o}}$ from hidden state vector $^h$ to memory cell input $_{\\textit{z}}$ and the gates i, f, o, respectively. A new aspect in memory mixing is the effect of exponential gating. The new sLSTM can have multiple heads with memory mixing within each head but not across heads. The introduction of heads for sLSTM together with exponential gating establishes a new way of memory mixing. ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "2.3 mLSTM ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "To enhance storage capacities of LSTMs, we increase the LSTM memory cell from a scalar $c\\in\\mathbb{R}$ to a matrix $C\\in\\mathbb{R}^{d\\times d}$ . Hence, retrieval is performed via a matrix multiplication. At time $t_{\\cdot}$ , we want to store a pair of vectors, the key $\\pmb{k}_{t}\\in\\mathbb{R}^{d}$ and the value $\\pmb{v}_{t}\\in\\mathbb{R}^{d}$ (we use the Transformer terminology). Later at time $t+\\tau$ , the value $\\pmb{v}_{t}$ should be retrieved by a query vector $\\mathbf{\\boldsymbol{q}}_{t+\\tau}\\in\\mathbb{R}^{d}$ . This is the setting of Bidirectional Associative Memories (BAMs) (Kohonen, 1972; Anderson, 1972; Nakano, 1972; Anderson et al., 1977). The covariance update rule (Sejnowski, 1977; Dayan & Willshaw, 1991) for storing a key-value pair is ", "page_idx": 3}, {"type": "equation", "text": "$$\nC_{t}\\;=\\;C_{t-1}\\;+\\;v_{t}\\;k_{t}^{\\top}\\;.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "We assume a layer-norm before projecting inputs to keys and values, therefore they have zero mean. The covariance update rule is optimal (Dayan & Willshaw, 1991) for a maximal separability of retrieved binary vectors, which is equivalent to a maximal signal/noise ratio. Higher separability is possible when limiting retrieval to pairwise interactions and conceding quadratic complexity like attention (Krotov & Hopfield, 2016, 2017; Ramsauer et al., 2021). The covariance update rule is equivalent to Fast Weight Programmers (Schmidhuber, 1992; Schlag et al., 2021), which have later been equipped with a constant decay rate multiplied to $C_{t-1}$ and a constant learning rate multiplied to $\\pmb{v}_{t}\\pmb{k}_{t}^{\\top}$ (Ba et al., 2016a). In this spirit, we integrate the covariance update rule into the LSTM framework, where the forget gate corresponds to decay rate and the input gate to the learning rate, while the output gate scales the retrieved vector. ", "page_idx": 3}, {"type": "text", "text": "For this matrix memory, the normalizer state is the weighted sum of key vectors, where each key vector is weighted by the input gate and all future forget gates. Again, the normalizer state keeps record of the strength of the gates. Since the dot product between query and normalizer state can be close to zero, we use the absolute value of this dot product and lower bound it by a threshold (typically 1.0) as done previously (Sun et al., 2023). The mLSTM forward pass is: ", "page_idx": 3}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/04846851e720e3589478dba9b5799d39717c714d49f02cb055788111bba256b2.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "mLSTM can have multiple memory cells like the original LSTM. For mLSTM, multiple heads and multiple cells are equivalent as there is no memory mixing. In order to stabilize the exponential gates of mLSTM, we use the same stabilization techniques as for sLSTM (see Equation 49). Since the mLSTM has no memory mixing, this recurrence can be reformulated in a parallel version. For more details we refer to Appendix B.3. ", "page_idx": 3}, {"type": "text", "text": "2.4 xLSTM Architecture ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "xLSTM Blocks. An xLSTM block should non-linearly summarize the past in a high-dimensional space to better separate different histories or contexts. Separating histories is the prerequisite to correctly predict the next sequence element such as the next token. We resort to Cover\u2019s Theorem (Cover, ", "page_idx": 3}, {"type": "text", "text": "1965), which states that in a higher dimensional space non-linearly embedded patterns can more likely be linearly separated than in the original space. We consider two residual block architectures: (i) A residual block with post up-projection (like Transformers), which non-linearly summarizes the past in the original space, then linearly maps into a high-dimensional space, applies a non-linear activation function, and linearly maps back to the original space; see Appendix Figure 7 for details. (ii) A residual block with pre up-projection (like State Space Models), which linearly maps to a high-dimensional space, non-linearly summarizes the past in the high-dimensional space and then linearly maps back to the original space. See Appendix Figure 8 for more details. For an xLSTM block containing an sLSTM, we mostly use the post up-projection block. For an xLSTM block containing an mLSTM, we use the pre up-projection block since the memory capacity becomes larger in the high-dimensional space. ", "page_idx": 4}, {"type": "text", "text": "xLSTM Architecture. An xLSTM architecture is constructed by residually stacking building blocks (Srivastava et al., 2015; He et al., 2016). We rely on the most commonly used preLayerNorm (Ba et al., 2016b) residual backbones as used in contemporary Large Language Models. See last two columns (from the left) in Figure 6. ", "page_idx": 4}, {"type": "text", "text": "2.5 Memory and Speed Considerations ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Contrary to Transformers, xLSTM networks have a linear computation and a constant memory complexity with respect to the sequence length. Since the xLSTM memory is compressive, it is well suited for industrial applications and implementations on the edge. The memory of mLSTM does not require parameters, but is computationally expensive through its $d\\times d$ matrix memory and $d\\times d$ update. We trade off memory capacity against computational complexity. Nevertheless, the computations can be done in parallel on GPUs, therefore these computations have only a minor effect on the wall clock time. ", "page_idx": 4}, {"type": "text", "text": "While mLSTM is parallelizable analog to FlashAttention (Dao et al., 2022; Dao, 2024) or GLA (Yang et al., 2023), sLSTM is not parallelizable due to the memory mixing (hidden-hidden connections). However, we developed a fast CUDA implementation with GPU memory optimizations to the register level which is typically less than two times slower than mLSTM. ", "page_idx": 4}, {"type": "text", "text": "3 Related Work ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Conceptually, the closest models to xLSTM are Retention (Sun et al., 2023), RWKV (Peng et al., 2023, 2024), GLA (Yang et al., 2023), HGRN2 (Qin et al., 2024) and Mamba (Gu & Dao, 2024). These models share the concepts matrix memory and/or gating. However, in contrast to the new sLSTM, they do not allow memory mixing. Memory mixing enables to solve state tracking problems, and therefore LSTMs are more expressive than State Space Models (SSMs) and Transformers (Merrill et al., 2024; Del\u00e9tang et al., 2023). Other closely related work is discussed further in Appendix C. ", "page_idx": 4}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "We experimentally evaluate xLSTM and compare it to existing methods with a focus on language modeling. We investigate xLSTM\u2019s specific capabilities on synthetic tasks in Section 4.1. In Section 4.2, we compare the validation set perplexity of various current language modeling methods that have been trained on 15B tokens from SlimPajama (Soboleva et al., 2023). On the same dataset, we perform ablation studies for xLSTM. Then, we compare xLSTM and the best performing methods from Section 4.2 after being trained on 300B tokens from SlimPajama (Soboleva et al., 2023) on downstream tasks, assess their scaling behavior analogous to Kaplan et al. (2020) and Brown et al. (2020), and compare the text generation times and the maximal throughput of the xLSTM in Section 4.3. For all experiments, we use the notation xLSTM[a:b] for the ratio $a/b$ of mLSTM-based versus sLSTM-based xLSTM blocks. For example, xLSTM[7:1] means that out of eight blocks, seven are mLSTM-based blocks and one is an sLSTM-based block. For a common total block number of 48, this translates to 6 sLSTM-based blocks and 42 mLSTM-based blocks. ", "page_idx": 4}, {"type": "text", "text": "4.1 Synthetic Tasks and Long Range Arena ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Firstly, we test the effectiveness of xLSTM\u2019s new exponential gating with memory mixing on formal languages (Del\u00e9tang et al., 2023). Then, we assess the effectiveness of xLSTM\u2019s new matrix memory on the Multi-Query Associative Recall task (Arora et al., 2023). Finally, xLSTM\u2019s performance at processing long sequences in the Long Range Arena is evaluated (Tay et al., 2021). ", "page_idx": 5}, {"type": "text", "text": "Test of xLSTM\u2019s Exponential Gating with Memory Mixing. We test xLSTM\u2019s new exponential gating with memory mixing, which should enable it to solve state tracking problems (Merrill et al., 2024; Merrill & Sabharwal, 2023). We implement and extend the formal language tasks from Del\u00e9tang et al. (2023) to enable multi-length training for length extrapolation. For a detailed description of all tasks and extended results see Appendix D.1.1. We compare xLSTM to other methods including Transformers, State Space Models, and Recurrent Neural Networks. The accuracy of the tested methods is evaluated on those tokens relevant to the task. The accuracy is scaled between 0 (random) and 1 (perfect). We compare 2-block architectures of the following methods on these tasks: xLSTM[0:1] (i.e., only sLSTM), xLSTM[1:0] (i.e., only mLSTM), xLSTM[1:1], Llama, Mamba, RWKV, Retention, Hyena, LSTM, and LSTM in Transformer blocks (LSTM (Block)). The results of this experiment are shown in Figure 9. Models such as Transformers or State Space Models without memory mixing (no state tracking) cannot solve, e.g. regular grammars like the parity task. This result is in agreement with findings that Transformers and State Space models are fundamentally less powerful than RNNs (Merrill et al., 2024; Merrill & Sabharwal, 2023; Del\u00e9tang et al., 2023). ", "page_idx": 5}, {"type": "text", "text": "Test of xLSTM\u2019s Memory Capacities on Associative Recall Tasks. In this experiment, we test xLSTM\u2019s new matrix memory in terms of the memory capacity on the Multi-Query Associative Recall task (Arora et al., 2023): For each sequence, key\u2013value pairs are randomly chosen from a large vocabulary, which must be memorized for later retrieval. To enhance the difficulty of the original task, we increase the number of key-value pairs up to 256 and enlarge the context length up to 2048, obtaining extended tests for the memory capacities of different models. We compare 2-block architectures of Llama, Mamba, RWKV-5, RWKV-6, xLSTM[1:1] and xLSTM[1:0]. The models are evaluated by the accuracy at recalling the pairs. Since Transformers (e.g. Llama) have a memory that is exponential in the coding dimension (Ramsauer et al., 2021), they constitute the gold standard at this task. Results are shown in Figure 2. xLSTM[1:1] performs best among all non-Transformer models, also for small models. Interestingly, the sLSTM block does not diminish the memory capacity but rather leverages it, which becomes evident at the most difficult task with 256 key-value pairs. Additional results of Appendix D.1.2, indicate that xLSTM\u2019s enhanced memory capacities also allow for extrapolating to contexts that are longer than those seen during training. ", "page_idx": 5}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/b30850924c2c860de5fa2095bb751c42250520ba721635b610b867712b306e38.jpg", "img_caption": ["Figure 2: Test of memory capacities of different models at the Multi-Query Associative Recall task with context length 2048. Each panel is dedicated to a different number of key-value pairs. The $x$ -axis displays the model size and the $y$ -axis the validation accuracy. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "Test of xLSTM\u2019s Long Context Capabilities on Long Range Arena. To assess xLSTM\u2019s performance on long sequences and large contexts, we compare different methods on the Long Range Arena (Tay et al., 2021). xLSTM demonstrates consistent strong performance on all of the tasks, suggesting that the xLSTM architecture is remarkably efficient in handling different aspects of long context problems. For more details, see Appendix D.1.3. ", "page_idx": 5}, {"type": "text", "text": "4.2 Method Comparison and Ablation Study ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "To address the main question of our paper, i.e. what can our new LSTM variants achieve when scaled up in language modelling, we train xLSTMs, Transformers, State Space Models, and other methods on 15B tokens from SlimPajama in the same auto-regressive setting. We compare the trained models on the validation set and perform ablation studies for the xLSTMs. ", "page_idx": 5}, {"type": "text", "text": "Comparing xLSTM to Other Methods. We train models on 15B tokens from SlimPajama (Soboleva et al., 2023), and evaluate their perplexity on the validation set. We compare the following methods: xLSTM, GPT-3 (Transformer) (Brown et al., 2020), Llama (Transformer) (Touvron et al., 2023), H3 (SSM) (Fu et al., 2023), Mamba (SSM) (Gu & Dao, 2023), RWKV-4 (RNN) (Peng et al., 2023), RWKV-5 (RNN) (Peng et al., 2024), RWKV-6 (RNN) (Peng et al., 2024), GLA (linear Transformer) (Yang et al., 2023), HGRN2 (RNN) (Qin et al., 2024). RetNet (linear Transformer) (Sun et al., 2023), Hyena (linear Transformer) (Poli et al., 2023), xLSTM[1:0], and xLSTM[7:1]. The models were trained with mixed precision, for RWKV-5, RWKV-6, GLA, HGRN2, the mixedprecision training did not utilize the PyTorch automated mixed precision (see Appendix Section D.2). We categorize the methods into (a) Transformers, (b) State Space Models (SSMs), and (c) Recurrent Neural Networks (RNNs) together with linear Transformers, i.e., linear methods that substitute the Transformer\u2019s attention mechanism. The models match a GPT-3 model with 350M parameters in size, i.e. embedding dim 1024 and 24 residual blocks. Only GPT-3 uses shared weights for token and output embeddings, therefore has fewer parameters. ", "page_idx": 6}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/7f70cfc487f4b0095ba6be3e357472511432c0db4f7718be6aec3620cd1deb00.jpg", "table_caption": ["Table 1: Method comparison on next token prediction when trained on 15B tokens from SlimPajama. Best validation perplexities within model classes, i.e., linear Transformers, RNNs, Transformers, SSMs, and xLSTMs are underlined and overall best is in bold. For each model class, the best performing methods are used in Section 4.3 for LLM training. xLSTMs with new memory (xLSTM[1:0] and xLSTM[7:1]) perform best. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "The results in Table 1 show that xLSTM outperforms all existing methods in validation perplexity. For details see Appendix D.2. Figure 15 in the appendix shows the scaling behaviour for this experiment, indicating that xLSTM will also perform favorably for larger models. ", "page_idx": 6}, {"type": "text", "text": "Ablation Studies. Table 1 and Figure 15 demonstrate that xLSTM achieves excellent results at language modeling when being trained on 15B tokens from SlimPajama. To ablate the changes from LSTM to xLSTM, we morph a vanilla LSTM architecture step-by-step into an xLSTM architecture. Firstly, we integrate LSTM layers into pre-LayerNorm residual backbones. Secondly, we extend this to a post up-projection block. Finally, we add exponential gating and matrix memory. The results are shown in Appendix Table 6 (top). The ablation studies attribute the strong performance improvement to both the exponential gating and the matrix memory. Additionally, due to the importance of gating in RNNs and State Space Models, we ablate different gating mechanisms. In Appendix Table 6 (bottom), we conclude that having each gate learnable and influenced by the input has an incrementally positive effect. Additional studies on the individual backbone components are discussed in Appendix D.2. ", "page_idx": 6}, {"type": "text", "text": "4.3 xLSTM as Large Language Model ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Next, we increase the amount of training data to 300B tokens from SlimPajama, the same number of tokens as used in e.g., Mamba (Gu & Dao, 2023) and Griffin (De et al., 2024). We compare xLSTM to RWKV-4, Llama, and Mamba \u2013 one method from each respective method class in Section 4.2. We select RWKV-4 as RNN representative since for RWKV-5, RWKV-6 and HGRN2 a reasonable training precision setting (Appendix Section D.2) has been found only after the training start of the 300B token experiments (Peng et al., 2024). We train different model sizes (125M, 350M, 760M, 1.3B), test all models for length extrapolation capabilities and evaluate their performance on the validation set, on downstream tasks, on 471 text domains of the PALOMA benchmark, and, finally, investigate their scaling law behavior. ", "page_idx": 6}, {"type": "text", "text": "Sequence Length Extrapolation. Firstly, we test the sequence length extrapolation for 1.3B-sized, large models of xLSTM, RWKV-4, Llama, and Mamba. All models are trained on context length 2048, and then tested for context lengths up to 16384. See Figure 3 for the results. In contrast to other methods, xLSTM models maintain low perplexities for longer contexts. ", "page_idx": 7}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/21f3b97f8912cb52b3b2ae47c4c1dd74b569a38d53c4de21d86fe8b4546ca955.jpg", "img_caption": ["Figure 3: Sequence extrapolation in language modeling. This is a comparison of 1.3B-sized, large models of xLSTM, RWKV-4, Llama, and Mamba at next token prediction on the SlimPajama validation set after training on 300B tokens from SlimPajama. Models are trained with context length 2048 (gray) and then tested for context lengths up to 16384. Left: Token perplexities evaluated at different context lengths. In contrast to other methods, xLSTM models remain at low perplexities for longer contexts. Right: Prediction quality when extrapolating to long context sizes in terms of validation perplexity (PPL). xLSTM yields the best PPL values (best in bold, second best underlined). "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Table 2: Validation set perplexity and downstream tasks. Comparison of xLSTM, RWKV-4, Llama, and Mamba on the validation set at next token prediction and on downstream tasks after training on 300B tokens from SlimPajama. Model sizes are 125M, 350M, 760M, and 1.3B. The first column shows the methods and the second the actual number of parameters. The third column lists the validation set perplexities, while the remaining columns show the performance on downstream tasks. Best model per model size is depicted bold and the second best is underlined. In the vast majority of tasks and across all model sizes xLSTM is the best method \u2014 only on the ARC task Mamba is in some cases the best method. xLSTM[1:0] and xLSTM[7:1] are the two best models with respect to validation set perplexity. ", "page_idx": 7}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/366ffa8e22b4b28fee0babaf812ee9ead9d00fbc88f64c166ed0239623565fc0.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Validation Perplexity and Downstream Tasks. Secondly, for all model sizes, we evaluate the performance of xLSTM, RWKV-4, Llama, and Mamba models on the SlimPajama validation set for next token prediction and on downstream tasks that measure common sense reasoning. The third column of Table 2 lists the validation set perplexities of different methods. Both xLSTM[1:0] and xLSTM[7:1] are the best models for all model sizes with respect to the validation set perplexity. The other columns of Table 2 provide the performance on downstream tasks. In the vast majority of tasks and across all model sizes xLSTM is the best method \u2014 only on the ARC task Mamba is in some cases the best method. For details see Appendix D.3. ", "page_idx": 8}, {"type": "text", "text": "Performance on PALOMA Language Tasks. Thirdly, for all model sizes, we test the next token prediction performance of xLSTM, RWKV-4, Llama, and Mamba models on PALOMA language tasks (Magnusson et al., 2023). We measure the performance by the perplexity for next token prediction on 571 text domains, which range from nytimes.com to r/depression on Reddit. Appendix Table 8 shows token prediction perplexity grouped into language modeling (first seven columns) and fine-grained domain benchmarks (last 5 columns). xLSTM[1:0] has in 568 out of 571 $(99.5\\%)$ text domains a lower perplexity than Mamba, in 486 out of 571 $(85.1\\%)$ a lower perplexity than Llama, in 570 out of 571 $(99.8\\%)$ a lower perplexity than RWKV-4, see Appendix D.3. ", "page_idx": 8}, {"type": "text", "text": "Scaling Laws. Fourthly, we assess the power-law scaling behavior, which allows to extrapolate the performance to larger model sizes (Kaplan et al., 2020; Brown et al., 2020). Figure 4 presents the scaling behavior over the number of model parameters. All models share a similar scaling behavior but with different offsets. RWKV-4 performs worst, followed by Llama and Mamba. xLSTM is better than Mamba with a similar margin to Mamba as Mamba has to Llama. In Figure 16 in Appendix D.3 we plot the scaling behavior over the number of training FLOPs for the Llama baseline and both xLSTM variants. For the xLSTM variants we calculate the FLOPs for the recurrent (see Section 2 and parallel (see Appendix B.3) formulation. The scaling behavior indicates that for larger models xLSTM will continue to perform favourable compared to Transformers and State-Space models. ", "page_idx": 8}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/de6afc92d9fea7efd6e83b3b5dca0aac7087ba8100722ad2af9ac87b462580c7.jpg", "img_caption": ["Figure 4: Scaling laws. Next token prediction perplexity of xLSTM, RWKV-4, Llama, and Mamba. The models \u2013 with sizes 125M, 350M, 760M, and 1.3B parameters \u2013 are trained on 300B tokens from SlimPajama. The scaling laws indicate that for larger models xLSTM will perform well too. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Generation Times and Maximal Throughput. Finally, we measure the text generation time in Figure 5 (left) and the maximal throughput in Figure 5 (right) for our xLSTM variants at 1.3B scale. We compare against similar sized Mamba, Llama and RWKV implementions from HuggingFace, including a static key-value cache for the Llama model. At the time of the experiments, both full cache compilation of the Transformer model and compilation of the Mamba model with torch.compile did not work. For the text generation experiments all of the models are tested at batch size 1 and pre-fill 16. This pre-fill should be maximally favorable for the Transformer. Figure 5 shows the linear scaling of the xLSTM and the other recurrent models Mamba and RWKV-4 compared to the quadratic scaling of Llama. For the decoding throughput we measure different batch sizes and preflil for the Llama model. Figure 5 (right) shows that xLSTM can use much higher batch sizes than Llama due to its constant memory and thus achieves the highest throughput. ", "page_idx": 8}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/ad9bbbd068c4cf300a761f3394d501248a8d41036b647988c3fa7b00561039e1.jpg", "img_caption": ["Figure 5: Generation Times and Maximal Throughput. Left: Generation times of different 1.3B models for a pre-fill context of 16 tokens (to mitigate cache initialization). The recurrent models (xLSTM[1:0], xLSTM[7:1], Mamba and RWKV-4) show linear behavior, whereas the Transformer (Llama) inference/decoding time is quadratic in sequence length. Right: Token throughput for different batch sizes on a A100-80GB GPU for 1.3B sized models. Note that the Transformer / Llama model goes out of memory (OOM) already for small batch sizes, whereas xLSTM and Mamba can sustain very large batch sizes. xLSTM[1:0] consistently outperforms Mamba in throughput. Beyond batch size 2048, all models go OOM. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "5 Limitations ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "(i) In contrast to mLSTM, memory mixing of the sLSTM prohibits parallelizable operations, and thus prevents a fast parallel implementation. However, we developed a fast CUDA kernel for sLSTM, which is currently less than two times slower than the parallel mLSTM implementation. (ii) The mLSTM CUDA kernels are not optimized, and therefore the current implementation is about four times slower than FlashAttention or the scan used in Mamba. Faster CUDA kernels could be obtained in the vein of FlashAttention. (iii) The matrix memory of mLSTM has high computation complexity since $d\\times d$ matrices must be processed. Still, the memory update and retrieval is parameter-free, i.e., parallelizable when using standard matrix operations. Thus, the wall clock time overhead due to the complex memory is minor. (iv) The forget gate initialization must be chosen carefully. (v) Since the matrix memory is sequence length independent, increasing the sequence length might overload the memory for longer context sizes. Still, this does not appear to be a limitation for contexts up to 16k, see Section 4.3. (vi) Due to the expensive computational load for LLM experiments, we did neither fully optimize the architecture nor the hyperparameters, especially for larger xLSTM architectures. We anticipate that an extensive optimization process is needed for xLSTM to reach its full potential. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We have partly answered our simple question: How far do we get in language modeling when scaling LSTM to billions of parameters? So far, we can answer: \u201cAt least as far as current technologies like Transformers or State Space Models\u201d. We have enhanced LSTM to xLSTM by exponential gating with memory mixing and a new memory structure. xLSTM models perform favorably on language modeling when compared to state-of-the-art methods like Transformers and State Space Models. The scaling laws indicate that larger xLSTM models will be serious competitors to current LLMs that are built with the Transformer technology. xLSTM has the potential to considerably impact other fields like Reinforcement Learning, Time Series Prediction, or the modeling of physical systems. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "J. Achiam, S. Adler, S. Agarwal, et al. GPT-4 technical report. ArXiv, 2303.08774, 2023. ", "page_idx": 9}, {"type": "text", "text": "J. Anderson, J. Silverstein, S. Ritz, and R. Jones. Distinctive features, categorical perception, and probability learning: Some applications of a neural model. Psychological Review, 84:413\u2013451, 1977. doi: 10.1037/0033-295X.84.5.413. ", "page_idx": 9}, {"type": "text", "text": "J. A. Anderson. A simple neural network generating an interactive memory. Mathematical Biosciences, 14, 1972. doi: 10.1016/0025-5564(72)90075-2.   \nS. Arora, S. Eyuboglu, A. Timalsina, I. Johnson, M. Poli, J. Zou, A. Rudra, and C. R\u00e9. Zoology: Measuring and improving recall in efficient language models. ArXiv, 2312.04927, 2023.   \nJ. Ba, G. E. Hinton, V. Mnih, J. Z. Leibo, and C. Ionescu. Using fast weights to attend to the recent past. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp. 4331\u20134339. Curran Associates, Inc., 2016a.   \nJ. Ba, J. R. Kiros, and G. Hinton. Layer normalization. ArXiv, 1607.06450, 2016b.   \nA. Bau, Y. Belinkov, H. Sajjad, N. Durrani, F. Dalvi, and J. Glass. Identifying and controlling important neurons in neural machine translation. In International Conference on Learning Representations (ICLR), 2019. URL https://openreview.net/forum?id=H1z-PsR5KX.   \nY. Bisk, R. Zellers, R. LeBras, J. Gao, and Y. Choi. Piqa: Reasoning about physical commonsense in natural language. In AAAI Conference on Artificial Intelligence, volume 34, pp. 7432\u20137439, 2020.   \nS. L. Blodgett, L. Green, and B. O\u2019Connor. Demographic dialectal variation in social media: A case study of African-American English. In Conference on Empirical Methods in Natural Language Processing, pp. 1119\u20131130, 2016. doi: 10.18653/v1/D16-1120.   \nT. Brown, B. Mann, N. Ryder, et al. Language models are few-shot learners. In H. Larochelle, M. Ranzato, R. Hadsell, M.F. Balcan, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp. 1877\u20131901. Curran Associates, Inc., 2020.   \nK. M. Choromanski, V. Likhosherstov, D. Dohan, X. Song, A. Gane, T. Sarl\u00f3s, P. Hawkins, J. Q. Davis, A. Mohiuddin, L. Kaiser, D. B. Belanger, L. J. Colwell, and A. Weller. Rethinking attention with performers. In 9th International Conference on Learning Representations (ICLR). OpenReview.net, 2021. URL https://openreview.net/forum?id=Ua6zuk0WRH.   \nA. Chowdhery, S. Narang, J. Devlin, et al. PaLM: scaling language modeling with pathways. ArXiv, 2204.02311, 2022.   \nA. Chronopoulou, M. Peters, and J. Dodge. Efficient hierarchical domain adaptation for pretrained language models. In Conference of the North American Chapter of the Association for Computational Linguistics, pp. 1336\u20131351, 2022. doi: 10.18653/v1/2022.naacl-main.96.   \nP. Clark, I. Cowhey, O. Etzioni, T. Khot, A. Sabharwal, C. Schoenick, and O. Tafjord. Think you have solved question answering? Try ARC, the AI2 reasoning challenge. ArXiv, 1803.05457, 2018.   \nT. M. Cover. Geometrical and statistical properties of systems of linear inequalities with applications in pattern recognition. Electronic Computers, IEEE Transactions on, EC-14(3):326\u2013334, 1965.   \nT. Dao. Flashattention-2: Faster attention with better parallelism and work partitioning. In International Conference on Learning Representations (ICLR), volume 12, 2024. URL https: //openreview.net/forum?id $\\equiv$ mZn2Xyh9Ec.   \nT. Dao, D. Y. Fu, S. Ermon, A. Rudra, and C. R\u00e9. Flashattention: Fast and memory-efficient exact attention with IO-awareness. In A. H. Oh, A. Agarwal, D. Belgrave, and K. Cho (eds.), Advances in Neural Information Processing Systems (NeurIPS), 2022. URL https://openreview.net/ forum?id $\\equiv$ H4DqfPSibmx.   \nP. Dayan and D. J. Willshaw. Optimising synaptic learning rules in linear associative memories. Biological Cybernetics, 65, 1991. doi: 10.1007/bf00206223.   \nS. De, S. L. Smith, A. Fernando, A. Botev, G. Cristian-Muraru, A. Gu, R. Haroun, L. Berrada, Y. Chen, S. Srinivasan, G. Desjardins, A. Doucet, D. Budden, Y. W. Teh, R. Pascanu, N. DeFreitas, and C. Gulcehre. Griffin: Mixing gated linear recurrences with local attention for efficient language models. ArXiv, 2402.19427, 2024.   \nJ. Degrave, F. Felici, J. Buchli, et al. Magnetic control of tokamak plasmas through deep reinforcement learning. Nature, 602:414\u2013419, 2022. doi: 10.1038/s41586-021-04301-9.   \nG. Del\u00e9tang, A. Ruoss, J. Grau-Moya, T. Genewein, L. K. Wenliang, E. Catt, C. Cundy, M. Hutter, S. Legg, J. Veness, and P. A. Ortega. Neural networks and the Chomsky hierarchy. In International Conference on Learning Representations (ICLR), volume 11, 2023. URL https://openreview. net/forum?id=WbxHAzkeQcn.   \nN. Du, Y. Huang, A. M. Dai, et al. GLaM: efficient scaling of language models with mixture-ofexperts. ArXiv, 2112.06905, 2021.   \nD. Y. Fu, T. Dao, K. K. Saab, A. W. Thomas, A. Rudra, and C. Re. Hungry hungry hippos: Towards language modeling with state space models. In The Eleventh International Conference on Learning Representations, 2023. URL https://openreview.net/forum?id $\\equiv$ COZDy0WYGg.   \nL. Gao, S. Biderman, S. Black, L. Golding, T. Hoppe, C. Foster, J. Phang, H. He, A. Thite, N. Nabeshima, S. Presser, and C. Leahy. The Pile: An 800gb dataset of diverse text for language modeling. ArXiv, 2101.00027, 2021.   \nF. A. Gers, J. Schmidhuber, and F. Cummins. Learning to forget: Continual prediction with LSTM. Neural Compututation, 12(10):2451\u20132471, 2000.   \nGemini Team Google. Gemini: A family of highly capable multimodal models. ArXiv, 2312.11805, 2023.   \nA. Graves. Generating sequences with recurrent neural networks. ArXiv, 1308.0850, 2013.   \nS. Greenbaum and G. Nelson. The international corpus of English (ICE) project. World Englishes, 15(1):3\u201315, 1996.   \nK. Greff, R. K. Srivastava, J. Koutn\u00edk, B. R. Steunebrink, and J. Schmidhuber. LSTM: A search space odyssey. ArXiv, 1503.04069, 2015.   \nA. Gu and T. Dao. Mamba: Linear-time sequence modeling with selective state spaces. ArXiv, 2312.00752, 2023.   \nA. Gu and T. Dao. Mamba: Linear-time sequence modeling with selective state spaces. In International Conference on Learning Representations (ICLR), 2024. URL https://openreview.net/ forum?id $\\equiv$ AL1fq05o7H.   \nA. Gu, K. Goel, and C. R\u00e9. Efficiently modeling long sequences with structured state spaces. ArXiv, 2111.00396, 2021.   \nA. Gupta, A. Gu, and J. Berant. Diagonal state spaces are as effective as structured state spaces. ArXiv, 2203.14343, 2022.   \nK. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 770\u2013778, 2016.   \nS. Hochreiter. Untersuchungen zu dynamischen neuronalen Netzen. Master\u2019s thesis, Technische Universit\u00e4t M\u00fcnchen, 1991.   \nS. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Computation, 9(8):1735\u20131780, 1997a.   \nS. Hochreiter and J. Schmidhuber. LSTM can solve hard long time lag problems. In M. C. Mozer, M. I. Jordan, and T. Petsche (eds.), Advances in Neural Information Processing Systems (NeurIPS), volume 9, pp. 473\u2013479. MIT Press, Cambridge MA, 1997b.   \nS. Hochreiter, Y. Bengio, P. Frasconi, and J. Schmidhuber. Gradient flow in recurrent nets: the difficulty of learning long-term dependencies. In J. Kolen and S. Kremer (eds.), A Field Guide to Dynamical Recurrent Networks. IEEE, 2000.   \nS. Hochreiter, A. Steven Younger, and Peter R. Conwell. Learning to learn using gradient descent. In G. Dorffner, H. Bischof, and K. Hornik (eds.), Proc. Int. Conf. on Artificial Neural Networks (ICANN 2001), pp. 87\u201394. Springer, 2001.   \nS. Hochreiter, M. Heusel, and K. Obermayer. Fast model-based protein homology detection without alignment. Bioinformatics, 23(14):1728\u20131736, 2007.   \nJ. Hoffmann, S. Borgeaud, A. Mensch, et al. Training compute-optimal large language models. ArXiv, 2203.15556, 2022.   \nM. D. Hossain, F. Sohel, M. F. Shiratuddin, and H. Laga. A comprehensive survey of deep learning for image captioning. ACM Computing Surveys (CSUR), 51(6):118, 2019.   \nJ. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu, and D. Amodei. Scaling laws for neural language models. ArXiv, 2001.08361, 2020.   \nA. Karpathy. The unreasonable effectiveness of recurrent neural networks. http://karpathy.github.io/2015/05/21/rnn-effectiveness/, 2015.   \nA. Karpathy. OpenAI Five defeats Dota 2 world champions. https://openai.com/research/openai-fivedefeats-dota-2-world-champions, 2019.   \nA. Karpathy and L. Fei-Fei. Deep visual-semantic alignments for generating image descriptions. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 3128\u20133137, 2015.   \nA. Katharopoulos, A. Vyas, N. Pappas, and F. Fleuret. Transformers are RNNs: Fast autoregressive transformers with linear attention. In E. H. Daum\u00e9 III and A. Singh (eds.), International Conference on Machine Learning (ICML), volume 119 of Proceedings of Machine Learning Research, pp. 5156\u20135165. PMLR, 2020.   \nT. Katsch. GateLoop: Fully data-controlled linear recurrence for sequence modeling. ArXiv, 2311.01927, 2023.   \nD. Kocetkov, R. Li, L. BenAllal, J. Li, C. Mou, C. Mu nozFerrandis, Y. Jernite, M. Mitchell, S. Hughes, T. Wolf, D. Bahdanau, L. vonWerra, and H. deVries. The Stack: 3 TB of permissively licensed source code. ArXiv, 2211.15533, 2022.   \nT. Kohonen. Correlation matrix memories. IEEE Transactions on Computers, C-21(4), 1972. doi: 10.1109/tc.1972.5008975.   \nF. Kratzert, D. Klotz, C. Brenner, K. Schulz, and M. Herrnegger. Rainfall-runoff modelling using long short-term memory (LSTM) networks. Hydrology and Earth System Sciences, 22(11):6005\u20136022, 2018.   \nF. Kratzert, D. Klotz, G. Shalev, G. Klambauer, S. Hochreiter, and G. Nearing. Benchmarking a catchment-aware long short-term memory network (LSTM) for large-scale hydrological modeling. ArXiv, 1907.08456, 2019.   \nA. Krizhevsky. Learning multiple layers of features from tiny images. Master\u2019s thesis, Deptartment of Computer Science, University of Toronto, 2009.   \nD. Krotov and J. J. Hopfield. Dense associative memory for pattern recognition. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems, pp. 1172\u20131180. Curran Associates, Inc., 2016.   \nD. Krotov and J. J. Hopfield. Dense associative memory is robust to adversarial inputs. ArXiv, 1701.00939, 2017.   \nY. Lakretz, G. Kruszewski, T. Desbordes, D. Hupkes, S. Dehaene, and M. Baroni. The emergence of number and syntax units in LSTM language models. In J. Burstein, C. Doran, and T. Solorio (eds.), Conference of the North American Chapter of the Association for Computational Linguistics, pp. 11\u201320. Association for Computational Linguistics, 2019. doi: 10.18653/v1/N19-1002.   \nY. Li, T. Cai, Y. Zhang, D. Chen, and D. Dey. What makes convolutional models great on long sequence modeling? ArXiv, 2210.09298, 2022.   \nP. Liang, R. Bommasani, T. Lee, et al. Holistic evaluation of language models. Annals of the New York Academy of Sciences, 1525:140\u2013146, 2023.   \nJ. Lin, R. Men, A. Yang, C. Zhou, M. Ding, Y. Zhang, P. Wang, A. Wang, L. Jiang, X. Jia, J. Zhang, J. Zhang, X. Zou, Z. Li, X. Deng, J. Liu, J. Xue, H. Zhou, J. Ma, j. Yu, Y. Li, W. Lin, J. Zhou, J. Tang, and H. Yang. M6: A Chinese multimodal pretrainer. ArXiv, 2103.00823, 2021.   \nD. Linsley, J. Kim, V. Veerabadran, C. Windolf, and T. Serre. Learning long-range spatial dependencies with horizontal gated recurrent units. Advances in Neural Information Processing Systems (NeurIPS), 31, 2018.   \nI. Loshchilov and F. Hutter. Decoupled weight decay regularization. In International Conference on Learning Representations (ICLR), 2019. URL https://openreview.net/forum?id $=$ Bkg6RiCqY7.   \nX. Ma, C. Zhou, X. Kong, J. He, L. Gui, G. Neubig, J. May, and L. Zettlemoyer. Mega: Moving average equipped gated attention. ArXiv, 2209.10655, 2022.   \nA. L. Maas, R. E. Daly, P. T. Pham, D. Huang, A. Y. Ng, and C. Potts. Learning word vectors for sentiment analysis. In Annual Meeting of the Association for Computational Linguistics, volume 49, pp. 142\u2013150, 2011.   \nI. Magnusson, A. Bhagia, V. Hofmann, et al. Paloma: A benchmark for evaluating language model fit. ArXiv, 2312.10523, 2023.   \nH. Mehta, A. Gupta, A. Cutkosky, and B. Neyshabur. Long range language modeling via gated state spaces. ArXiv, 2206.13947, 2022.   \nS. Merity, C. Xiong, J. Bradbury, and R. Socher. Pointer sentinel mixture models. In International Conference on Learning Representations (ICRL), 2017. URL https://openreview.net/ forum?id=Byj72udxe.   \nW. Merrill and A. Sabharwal. The parallelism tradeoff: Limitations of log-precision transformers. Transactions of the Association for Computational Linguistics, 11:531\u2013545, 2023. doi: 10.1162/ tacl_a_00562.   \nW. Merrill, J. Petty, and A. Sabharwal. The illusion of state in state-space models. ArXiv, 2404.08819, 2024.   \nM. Milakov and N. Gimelshein. Online normalizer calculation for softmax. ArXiv, 1805.02867, 2018.   \nK. Nakano. Associatron \u2013 a model of associative memory. IEEE Transactions on Systems, Man, and Cybernetics, SMC-2(3):380\u2013388, 1972. doi: 10.1109/TSMC.1972.4309133.   \nG. Nearing, D. Cohen, V. Dube, M. Gauch, O. Gilon, S. Harrigan, A. Hassidim, D. Klotz, F. Kratzert, A. Metzger, S. Nevo, F. Pappenberger, C. Prudhomme, G. Shalev, S. Shenzis, T. Y. Tekalign, D. Weitzner, and Y. M. B. Kosko. Global prediction of extreme floods in ungauged watersheds. Nature, 627:559\u2013563, 2024. doi: 10.1038/s41586-024-07145-1.   \nC. Olsson, N. Elhage, N. Nanda, et al. In-context learning and induction heads. ArXiv, 2209.11895, 2022.   \nA. Orvieto, S. L. Smith, A. Gu, A. Fernando, C. Gulcehre, R. Pascanu, and S. De. Resurrecting recurrent neural networks for long sequences. In Proceedings of the 40th International Conference on Machine Learning (ICML). JMLR.org, 2023. doi: 10.5555/3618408.3619518.   \nA. Papasavva, S. Zannettou, E. DeCristofaro, G. Stringhini, and J. Blackburn. Raiders of the lost KeK: 3.5 years of augmented 4chan posts from the politically incorrect board. In International AAAI Conference on Web and Social Media (ICWSM), volume 14, pp. 885\u2013894, 2020.   \nD. Paperno, G. Kruszewski, A. Lazaridou, N.-Q. Pham, R. Bernardi, S. Pezzelle, M. Baroni, Gemma G. Boleda, and R. Fern\u00e1ndez. The LAMBADA dataset: Word prediction requiring a broad discourse context. In Annual Meeting of the Association for Computational Linguistics, volume 1, pp. 1525\u20131534, 2016.   \nG. Penedo, Q. Malartic, D. Hesslow, R. Cojocaru, A. Cappelli, H. Alobeidli, B. Pannier, E. Almazrouei, and J. Launay. The RefinedWeb dataset for Falcon LLM: Outperforming curated corpora with web data, and web data only. ArXiv, 2306.01116, 2023.   \nB. Peng, E. Alcaide, Q. Anthony, et al. RWKV: Reinventing RNNs for the transformer era. ArXiv, 2305.13048, 2023.   \nB. Peng, D. Goldstein, Q. Anthony, et al. Eagle and Finch: RWKV with matrix-valued states and dynamic recurrence. ArXiv, 2404.05892, 2024.   \nM. Poli, S. Massaroli, E. Nguyen, D. Y. Fu, T. Dao, S. Baccus, Y. Bengio, S. Ermon, and C. R\u00e9. Hyena hierarchy: Towards larger convolutional language models. In Proceedings of the 40th International Conference on Machine Learning (ICML). JMLR.org, 2023. doi: 10.5555/3618408.3619572.   \nM. Poli, A. W. Thomas, E. Nguyen, P. Ponnusamy, B. Deiseroth, K. Kersting, T. Suzuki, B. Hie, S. Ermon, C. R\u00e9, C. Zhang, and S. Massaroli. Mechanistic design and scaling of hybrid architectures. ArXiv, 2403.17844, 2024.   \nZ. Qin, S. Yang, and Y. Zhong. Hierarchically gated recurrent neural network for sequence modeling. In Advances in Neural Information Processing Systems (NeurIPS), volume 37, 2023. URL https://openreview.net/forum?id $\\equiv$ P1TCHxJwLB.   \nZ. Qin, S. Yang, W. Sun, X. Shen, D. Li, W. Sun, and Y. Zhong. HGRN2: Gated linear RNNs with state expansion. ArXiv, 2404.07904, 2024.   \nD. R. Radev, P. Muthukrishnan, and V. Qazvinian. The ACL anthology network corpus. In Workshop on Text and Citation Analysis for Scholarly Digital Libraries (NLPIR4DL), pp. 54\u201361. Association for Computational Linguistics, 2009.   \nA. Radford, R. Jozefowicz, and I. Sutskever. Learning to generate reviews and discovering sentiment. ArXiv, 1704.01444, 2017.   \nA. Radford, J. Wu, R. Child, D. Luan, D. Amodei, and I. Sutskever. Language models are unsupervised multitask learners. https://openai.com/index/better-language-models, 2019.   \nJ. W. Rae, S. Borgeaud, T. Cai, et al. Scaling language models: Methods, analysis & insights from training Gopher. ArXiv, 2112.11446, 2021.   \nC. Raffel, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. ArXiv, 1910.10683, 2019.   \nH. Ramsauer, B. Sch\u00e4f,l J. Lehner, P. Seidl, M. Widrich, L. Gruber, M. Holzleitner, M. Pavlovi\u00b4c, G. K. Sandve, V. Greiff, D. Kreil, M. Kopp, G. Klambauer, J. Brandstetter, and S. Hochreiter. Hopfield networks is all you need. In International Conference on Learning Representations (ICLR). OpenReview, 2021.   \nM. Reid, V. Zhong, S. Gururangan, and L. Zettlemoyer. M2D2: A massively multi-domain language modeling dataset. In Conference on Empirical Methods in Natural Language Processing, pp. 964\u2013975, 2022.   \nM. Reid, N. Savinov, D. Teplyashin, et al. Gemini 1.5: Unlocking multimodal understanding across millions of tokens of context. ArXiv, 2403.05530, 2024.   \nM. H. Ribeiro, J. Blackburn, B. Bradlyn, E. DeCristofaro, G. Stringhini, S. Long, S. Greenberg, and S. Zannettou. The evolution of the manosphere across the web. In Proceedings of the international AAAI conference on web and social media, volume 15, pp. 196\u2013207, 2021.   \nK. Sakaguchi, R. L. Bras, C. Bhagavatula, and Y. Choi. Winogrande: An adversarial winograd schema challenge at scale. Communications of the ACM, 64(9):99\u2013106, 2021.   \nT. L. Scao, A. Fan, C. Akiki, et al. BLOOM: A 176B-parameter open-access multilingual language model. ArXiv, 2211.05100, 2022.   \nI. Schlag, K. Irie, and J. Schmidhuber. Linear transformers are secretly fast weight programmers. In M. Meila and T. Zhang (eds.), Proceedings of the 38th International Conference on Machine Learning (ICML), volume 139 of Proceedings of Machine Learning Research, pp. 9355\u20139366. PMLR, 2021.   \nJ. Schmidhuber. Learning to control fast-weight memories: An alternative to recurrent nets. Neural Computation, 4(1):131\u2013139, 1992.   \nJ. Schmidhuber. Deep learning in neural networks: An overview. Neural Networks, 61:85\u2013117, 2015. doi: 10.1016/j.neunet.2014.09.003.   \nJ. Schulman, B. Zoph, C. Kim, J. Hilton, et al. ChatGPT: Optimizing language models for dialogue. https://openai.com/blog/chatgpt/, 2022. OpenAI Research.   \nT. J. Sejnowski. Storing covariance with nonlinearly interacting neurons. Journal of Mathematical Biology, 4, 1977. doi: 10.1007/BF00275079.   \nM. Shoeybi, M. Patwary, R. Puri, P. LeGresley, J. Casper, and B. Catanzaro. Megatron-LM: Training multi-billion parameter language models using model parallelism. ArXiv, 1909.08053, 2019.   \nJ. T. H. Smith, A. Warrington, and S. W. Linderman. Simplified state space layers for sequence modeling. ArXiv, 2208.04933, 2022.   \nD. Soboleva, F. Al-Khateeb, R. Myers, J. R. Steeves, J. Hestness, and N. Dey. SlimPajama: A 627B token cleaned and deduplicated version of RedPajama. https://www.cerebras.net/blog/ slimpajama-a-627b-token-cleaned-and-deduplicated-version-of-redpajama, 2023. URL https://huggingface.co/datasets/cerebras/SlimPajama-627B.   \nL. Soldaini, R. Kinney, A. Bhagia, et al. Dolma: an open corpus of three trillion tokens for language model pretraining research. ArXiv, 2306.01116, 2023.   \nS. Soltan, S. Ananthakrishnan, J. FitzGerald, R. Gupta, W. Hamza, H. Khan, C. Peris, S. Rawls, A. Rosenbaum, A. Rumshisky, C. S. Prakash, M. Sridhar, F. Triefenbach, A. Verma, G. Tur, and P. Natarajan. AlexaTM 20B: Few-shot learning using a large-scale multilingual Seq2Seq model. ArXiv, 2208.01448, 2022.   \nR. K. Srivastava, K. Greff, and J. Schmidhuber. Training very deep networks. In C. Cortes, N. Lawrence, D. Lee, M. Sugiyama, and R. Garnett (eds.), Advances in Neural Information Processing Systems (NeurIPS), volume 28. Curran Associates, Inc., 2015.   \nY. Sun, L. Dong, S. Huang, S. Ma, Y. Xia, J. Xue, J. Wang, and F. Wei. Retentive network: A successor to transformer for large language models. ArXiv, 2307.08621, 2023.   \nL. Sutawika, L. Gao, H. Schoelkopf, et al. EleutherAI/lm-evaluation-harness: Major refactor, 2023.   \nI. Sutskever, O. Vinyals, and Q. V. V. Le. Sequence to sequence learning with neural networks. In Z. Ghahramani, M. Welling, C. Cortes, N. D. Lawrence, and K. Q. Weinberger (eds.), Advances in Neural Information Processing Systems 27 (NIPS\u201913), pp. 3104\u20133112. Curran Associates, Inc., 2014.   \nY. Tay, D. Bahri, D. Metzler, D.-C. Juan, Z. Zhao, and C. Zheng. Synthesizer: Rethinking selfattention in transformer models. ArXiv, 2005.00743, 2020.   \nY. Tay, M. Dehghani, S. Abnar, Y. Shen, D. Bahri, P. Pham, J. Rao, L. Yang, S. Ruder, and D. Metzler. Long range arena: A benchmark for efficient transformers. In International Conference on Learning Representations (ICRL), 2021. URL https://openreview.net/forum?id $\\equiv$ qVyeW-grC2k.   \nR. Thoppilan, D. deFreitas, J. Hall, et al. LaMDA: Language models for dialog applications. ArXiv, 2201.08239, 2022.   \nTogetherComputer. Redpajama: an open dataset for training large language models, 2023. URL https://github.com/togethercomputer/RedPajama-Data.   \nH. Touvron, T. Lavril, G. Izacard, X. Martinet, M.-A. Lachaux, T. Lacroix, B. Rozi\u00e8re, N. Goyal, E. Hambro, F. Azhar, A. Rodriguez, A. Joulin, E. Grave, and G. Lample. Llama: Open and efficient foundation language models. ArXiv, 2302.1397, 2023.   \nD. Vadas and J. R. Curran. Parsing noun phrases in the Penn Treebank. Computational Linguistics, 37(4):753\u2013809, 2011.   \nA. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems (NeurIPS), volume 30, pp. 5998\u20136008. Curran Associates, Inc., 2017.   \nO. Vinyals, T. Ewalds, S. Bartunov, et al. Starcraft II: A new challenge for reinforcement learning. ArXiv, 1708.04782, 2017.   \nJ. Wang, J. N. Yan, A. Gu, and A. M. Rush. Pretraining without attention. ArXiv, 2212.10544, 2022.   \nS. Wang, B. Z. Li, M. Khabsa, H. Fang, and H. Ma. Linformer: Self-attention with linear complexity. ArXiv, 2006.04768, 2020.   \nS. Wang, Y. Sun, Y. Xiang, et al. ERNIE 3.0 Titan: Exploring larger-scale knowledge enhanced pre-training for language understanding and generation. ArXiv, 2112.12731, 2021.   \nY. Wu and K. He. Group normalization. In Proceedings of the European conference on computer vision (ECCV), pp. 3\u201319, 2018.   \nL. Xue, N. Constant, A. Roberts, M. Kale, R. Al-Rfou, A. Siddhant, A. Barua, and C. Raffel. mT5: A massively multilingual pre-trained text-to-text transformer. In Conference of the North American Chapter of the Association for Computational Linguistics, pp. 483\u2013498, 2021. doi: 10.18653/v1/2021.naacl-main.41.   \nS. Yang and Y. Zhang. FLA: A Triton-based library for hardware-efficient implementations of linear attention mechanism, 2024. URL https://github.com/sustcsonglin/ flash-linear-attention.   \nS. Yang, B. Wang, Y. Shen, R. Panda, and Y. Kim. Gated linear attention transformers with hardwareefficient training. ArXiv, 2312.06635, 2023.   \nS. Zannettou, B. Bradlyn, E. DeCristofaro, H. Kwak, M. Sirivianos, G. Stringini, and J. Blackburn. What is Gab: A bastion of free speech or an alt-right echo chamber. In The Web Conference, pp. 1007\u20131014, 2018. doi: 10.1145/3184558.3191531.   \nW. Zaremba and I. Sutskever. Learning to execute. ArXiv, 1410.4615, 2014.   \nR. Zellers, A. Holtzman, Y. Bisk, A. Farhadi, and Y. Choi. HellaSwag: Can a machine really finish your sentence? In Annual Meeting of the Association for Computational Linguistics, pp. 4791\u20134800, 2019.   \nA. Zeng, X. Liu, Z. Du, et al. GLM-130B: An open bilingual pre-trained model. ArXiv, 2210.02414, 2022.   \nS. Zhang, S. Roller, N. Goyal, M. Artetxe, M. Chen, S. Chen, C. Dewan, M. Diab, X. Li, X. V. Lin, T. Mihaylov, M. Ott, S. Shleifer, K. Shuster, D. Simig, P. S. Koura, A. Sridhar, T. Wang, and L. Zettlemoyer. OPT: Open pre-trained transformer language models. ArXiv, 2205.01068, 2022. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "Contents ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "A Broader Impacts 19 ", "page_idx": 17}, {"type": "text", "text": "Extended Long Short-Term Memory 19   \nB.1 Vanilla Long Short-Term Memory Formulation: Vector Notation 20   \nB.2 sLSTM 20   \nB.3 mLSTM 22   \nB.4 Detailed Block Structure 26 ", "page_idx": 17}, {"type": "text", "text": "C Extended Related Work 28 ", "page_idx": 17}, {"type": "text", "text": "D Experiments 29 ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "D.1 Synthetic Tasks and Long Range Arena 29   \nD.1.1 Test of xLSTM\u2019s Exponential Gating with Memory Mixing. 29   \nD.1.2 Test of xLSTM\u2019s Memory Capacities on Associative Recall Tasks. . 32   \nD.1.3 Test of xLSTM\u2019s Long Range Capabilities on the Long Range Arena. 34   \nD.2 Method Comparison and Ablation Study on SlimPajama (15B) 38   \nD.3 xLSTM Large Language Models \u2013 SlimPajama300B 41 ", "page_idx": 17}, {"type": "text", "text": "E Detailed Results on PALOMA Language Model Evaluation 44 ", "page_idx": 17}, {"type": "text", "text": "A Broader Impacts ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Our work introduces novel LSTM architectures that perform favorably compared to Transformers or State Space Models on language modeling. As our novel LSTM models are inherently recurrent and demonstrably extrapolate well to large contexts, they have the potential for near constant scaling at inference. This compares to linear scaling in the context length for Transformer architectures, representing a vast potential in energy and emission savings when deploying such models to real world applications. Thus, in an ever more connected, data-rich world with ubiquitous compute, our work has the potential to increase general accessibility of state-of-the-art machine learning models whilst making them more environmentally sustainable. ", "page_idx": 18}, {"type": "text", "text": "However, any novel machine learning technique that has the potential to impact real world applications can be used for harm, not just for good. Our models with their beneficial inference economics and their ability to extrapolate to large contexts at no overhead could be used, for example, to generate and spread disinformation on a grander scale. Moreover, savings in energy and emissions afforded by deploying our novel xLSTM models might be outweighed by an increase in demand for such models, leading to an overall increase in energy consumption and environmentally harmful emissions. Whilst our work focuses on new, more efficient Language Model architectures, it does not directly address the issues of fairness and bias of such models. ", "page_idx": 18}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/d8f0c1d418b2514b5287005b0943fdddc6a6fc5326da7364cf8a75f0814972ab.jpg", "img_caption": [], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "Figure 6: The extended LSTM (xLSTM) family. From left to right: 1. The original LSTM memory cell with constant error carousel and gating. 2. New sLSTM and mLSTM memory cells that introduce exponential gating. sLSTM offers a new memory mixing technique. mLSTM is fully parallelizable with a novel matrix memory cell state and new covariance update rule. 3. mLSTM and sLSTM in residual blocks yield xLSTM blocks. 4. Stacked xLSTM blocks give an xLSTM architecture. ", "page_idx": 18}, {"type": "text", "text": "B.1 Vanilla Long Short-Term Memory Formulation: Vector Notation ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "The vanilla LSTM memory cell update rules (Greff et al., 2015) at time step $t$ extend the scalar cell state formulation to a vector of cell states: ", "page_idx": 19}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/539e8eebf974c170d1a67ec9718b8683e5024aa580758c5473981d79b0b494ec.jpg", "img_caption": [], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "The matrices $W_{z}$ $\\mathbf{\\tilde{\\mu}}_{z},\\,W_{\\mathrm{i}},\\,W_{\\mathrm{f}}$ , and $W_{\\mathbf{o}}$ correspond to the input weights between inputs $\\pmb{x}_{t}$ and cell input, input gate, forget gate, and output gate, respectively. The matrices $R_{z},\\,R_{\\mathrm{i}},\\,R_{\\mathrm{f}}$ , and $R_{\\mathrm{o}}$ correspond to the recurrent weights between hidden state $h_{t-1}$ and cell input, input gate, forget gate, and output gate, respectively. $b_{z},b_{\\mathrm{i}},b_{\\mathrm{f}}$ , and $b_{\\mathbf{o}}$ are the corresponding bias vectors. $\\varphi$ and $\\psi$ are the cell input and hidden state activation functions (typically tanh). $\\psi$ is used to normalize or squash the cell state, which would be unbounded otherwise. ", "page_idx": 19}, {"type": "text", "text": "B.2 sLSTM ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Similar to the LSTM in Section B.1, also the sLSTM can be vectorized to multiple cells: ", "page_idx": 19}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/4d265c434cb06a7122fc03378222c45db083d82805ab25a207b9ef957c160486.jpg", "img_caption": [], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Here, the cell input activation function $\\varphi$ is tanh, the hidden state activation function is the identity.   \n$\\varphi$ helps stabilizing the recurrence. ", "page_idx": 19}, {"type": "text", "text": "Considering external gradient contribution $\\delta_{h_{t}}^{\\mathrm{ext}}$ from subsequent layers and recurrent gradient contribution $\\delta_{h_{t}}^{R}$ from gradients from future states flowing over the cell interaction matrix $\\boldsymbol{R}$ , we obtain the recursive backward pass of sLSTM, where $\\delta_{a}$ indicates gradients with respect to parameter / internal variable $a$ : ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\delta_{h_{n}}}&{=\\delta_{h_{n}^{n+1}}^{n+1}+\\delta_{h_{n}^{n}}^{h}}\\\\ {\\delta_{\\epsilon_{n-1}}}&{=\\epsilon_{1}(\\delta_{\\epsilon_{n}})\\epsilon_{n}+\\epsilon_{0-1}\\odot n_{-1}-0\\;\\delta_{h_{n-1}^{n}}}\\\\ {{\\delta}_{h_{n-1}}}&{=\\epsilon_{1}\\delta_{n_{1}}-\\epsilon_{0-1}\\odot\\epsilon_{1-1}\\odot n_{-1}^{-1}\\delta_{h_{n-1}^{n}}}\\\\ {\\delta_{\\epsilon_{n}}}&{=\\epsilon_{1}(\\epsilon_{n-1}\\delta_{\\epsilon_{n}}+\\epsilon_{1}(\\epsilon_{n-1}\\delta_{\\epsilon_{n-1}})\\delta_{h_{n}}}\\\\ {\\delta_{h_{n}}}&{=\\epsilon_{1}(\\delta_{\\epsilon_{n}})\\epsilon_{n}+\\epsilon_{0-1}\\delta_{\\epsilon_{n}}+}\\\\ {\\delta}&{=\\epsilon_{1}\\delta_{\\epsilon_{n}}\\epsilon_{0}(\\delta_{\\epsilon_{n}})\\delta_{h_{n}}}\\\\ {\\delta_{h_{n}}}&{=\\epsilon_{1}(\\delta_{\\epsilon_{n}})\\epsilon_{0-1}\\odot n_{-1}^{-1}\\delta_{h_{n}}}\\\\ {\\delta_{h_{n}}}&{=\\epsilon_{1}\\sum_{k=0}^{n}W_{k}^{-1}\\delta_{k}}\\\\ {\\delta_{h_{n-1}^{n}}}&{=\\epsilon_{1}(\\epsilon_{n-1}\\delta_{\\epsilon_{n}})\\epsilon_{n}}\\\\ {\\delta_{h_{n}}}&{=\\sum_{k=0}^{n}B_{k}^{\\epsilon}\\delta_{k}}\\\\ {\\delta_{h_{n}^{n}}}&{=\\epsilon_{1}(\\epsilon_{n-1}\\delta_{\\epsilon_{n}})\\epsilon_{n}}\\\\ {\\delta_{h_{n}}}&{=\\sum_{k=1}^{n}B_{k}^{\\epsilon}\\delta_{k}}\\\\ {\\delta_{h_{n}^{n}}}&{=\\sum_{k=1}^{n}x_{k}\\delta_{k}^{n}\\,,}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{g}\\in\\{\\mathbf{i},\\mathbf{f},\\mathbf{z},\\mathbf{o}\\}}\\\\ {\\ }\\\\ {\\mathbf{g}\\in\\{\\mathbf{i},\\mathbf{f},\\mathbf{z},\\mathbf{o}\\}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "with the derivatives of the respective gate activation function $\\mathbf{i}_{t}^{\\prime}=\\exp^{\\prime}(\\tilde{\\mathbf{i}}_{t})=\\exp(\\tilde{\\mathbf{i}}_{t})=\\mathbf{i}_{t}$ , $\\mathbf{o}_{t}^{\\prime}=$ $\\sigma^{\\prime}(\\tilde{\\mathbf{o}}_{t})$ , and $\\mathbf{f}_{t}^{\\prime}=\\sigma^{\\prime}(\\tilde{\\mathbf{f}}_{t})$ or $\\mathbf{f}_{t}^{\\prime}=\\mathbf{f}_{t}$ depending on the forget gate activation. $\\varphi^{\\prime}(z)$ is the derivative of the cell input activation function $\\varphi(z)$ . ", "page_idx": 20}, {"type": "text", "text": "The matrices $R_{z},\\,R_{\\mathrm{i}},\\,R_{\\mathrm{f}},\\,R_{\\mathrm{o}}$ are block-diagonal which is analogous to multiple heads in the mLSTM. This way, the parameters reduce to $d^{2}{\\bar{/}}(N_{h})$ , where $N_{h}$ is the number of heads, limiting the cell interactions to individual heads. This parameter efficient formulation of cell interactions together with the exponential gating is called the new memory mixing. Finally, to stabilize the backward pass, we clip the magnitude of $\\delta_{h_{t}}^{R}$ to 10, as a means to prohibit exploding gradients for long context lengths. ", "page_idx": 20}, {"type": "text", "text": "sLSTM Stabilized Version. The stabilized version of sLSTM introduces a new stabilizer state $m$ , applied as: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{m_{t}}&{=\\mathrm{\\max\\left(\\log(\\f_{t}\\ )+\\ m_{t-1}\\ ,\\log(\\ i_{t}\\ )\\right)}}&{\\quad\\mathrm{stabilizer~stat}}\\\\ {\\mathrm{i}_{t}^{\\prime}}&{=}&{\\mathrm{exp\\\\left(\\log\\left(\\frac{\\i_{t}}{\\ i_{t}}\\ \\right)-\\ m_{t}\\ \\right)\\ =\\ \\ e x p\\ \\left(\\tilde{i}_{t}-\\ m_{t}\\ \\right)}}&{\\quad\\mathrm{stabil.\\input\\gat}}\\\\ {\\mathrm{f}_{t}^{\\prime}}&{=}&{\\mathrm{exp\\\\left(\\log\\left(\\f_{t}\\ \\right)+\\ m_{t-1}\\ -\\ m_{t}\\ \\right)}}&{\\quad\\mathrm{stabil.\\forget\\gat}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "We show that replacing $\\mathrm{f}_{t}$ by $\\mathrm{f}_{t}^{\\prime}$ and $\\mathrm{i}_{t}$ by $\\mathrm{i}_{t}^{\\prime}$ in the forward pass does neither change the output of the whole network nor the derivatives of the loss with respect to the parameters. ", "page_idx": 20}, {"type": "text", "text": "The stabilization state $m$ has no gradient, and hence does not influence the other gradients. We re-define $c_{t}^{(s)}$ and $n_{t}^{(s)}$ as stabilized cell and normalizer states: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{c_{t}\\,=\\,c_{t}^{(s)}\\exp\\left(\\,m_{t}\\,\\right)}\\\\ {n_{t}\\,=\\,n_{t}^{(s)}\\exp\\left(\\,m_{t}\\,\\right)}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Inserting Equation 49 into Equation 8 yields: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\bar{h}_{t}^{(s)}=}&{c_{t}^{(s)}/n_{t}^{(s)}=}\\\\ {=}&{\\frac{\\exp\\big(\\log\\left(t_{t}\\right)+\\ m_{t-1}\\big)\\big<\\sigma_{t-1}^{(s)}+\\exp\\big(\\log\\left(\\mathrm{i}_{t}\\right)-m_{t}\\big)z_{t}}{\\exp\\big(\\log\\left(t_{t}\\right)+\\ m_{t-1}\\big)-m_{t}\\big)\\,n_{t-1}^{(s)}+\\exp\\big(\\log\\left(\\mathrm{i}_{t}\\right)-m_{t}\\big)}}\\\\ {=}&{\\frac{\\exp\\big(\\log\\left(t_{t}\\right)+\\ m_{t-1}\\big)\\big<\\sigma_{t-1}^{(s)}+\\exp\\left(\\log\\left(\\mathrm{i}_{t}\\right)\\right)z_{t}}{\\exp\\big(\\log\\left(t_{t}\\right)+\\ m_{t-1}\\big)}}\\\\ {=}&{\\frac{\\exp\\big(\\log\\left(t_{t}\\right)\\big)c_{t-1}+\\exp\\left(\\log\\left(\\mathrm{i}_{t}\\right)\\right)z_{t}}{\\exp\\left(\\log\\left(t_{t}\\right)\\right)n_{t-1}+\\exp\\left(\\log\\left(\\mathrm{i}_{t}\\right)\\right)}}\\\\ {=}&{\\frac{\\exp\\left(\\log\\left(t_{t}\\right)\\right)c_{t-1}+\\exp\\left(\\log\\left(\\mathrm{i}_{t}\\right)\\right)z_{t}}{\\exp\\left(\\log\\left(t_{t}\\right)\\right)n_{t-1}+\\exp\\left(\\log\\left(\\mathrm{i}_{t}\\right)\\right)}}\\\\ {=}&{\\frac{\\int_{t}\\varrho_{t-1}+\\mathrm{i}_{t}z_{t}}{\\int_{t}n_{t-1}+\\mathrm{i}_{t}}\\,=\\,c_{t}/n_{t}=\\bar{h}_{t}}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Therefore, since the loss solely depends on $h_{t}$ , there\u2019s no dependency on $m_{t}$ , and consequently, no gradient exists for this stabilization state. Note that $m_{t}$ can be chosen arbitrarily. We choose $\\overbar{m_{t}}\\overbar{=}\\operatorname*{max}\\left(\\log\\left(\\mathbf{f}_{t}\\right)+m_{t-1},\\log\\left(\\mathbf{i}_{t}\\right)\\right)$ , which stabilizes the exponential function. One can even find $m_{t}$ , such that the normalizer state $n_{t}$ can be eliminated, but this version was experimentally found to be numerically unstable in the backward pass. ", "page_idx": 21}, {"type": "text", "text": "B.3 mLSTM ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Throughout this section, $\\mathbf{1}\\in\\mathbb{R}^{T}$ denotes a column vector of ones and $\\mathbf{1}^{\\top}\\in\\mathbb{R}^{1\\times T}$ a row vector of ones, where $T$ is the dimension of this vector space. ", "page_idx": 21}, {"type": "text", "text": "Recurrent mLSTM Backward Pass. The recurrent formulation of the mLSTM cell in Equation 16 yields the following backward pass recurrence, where $\\delta_{a}$ indicates gradients with respect to parameter or internal variable $a$ and $\\delta_{h_{t}}^{\\mathrm{ext}}$ denotes gradients from subsequent layers: ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\hat{u}_{x_{1}}^{t}=\\alpha_{0}s_{0}^{\\prime},}\\\\ &{\\hat{v}_{0}=\\alpha_{0}t,}\\\\ &{\\hat{w}_{x_{1}}\\hdotsm\\hat{u}_{\\phi_{1}}+\\frac{\\alpha_{0}}{16\\pi}\\mathrm{i}\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}-1\\right)}\\\\ &{\\hat{v}_{1},}\\\\ &{\\hat{w}_{x_{1}}=\\hat{w}_{x_{2}},\\ \\ \\frac{\\hat{w}_{y_{2}}^{t}-\\hat{v}_{1}\\hat{w}_{x_{3}}}{\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}+1\\right)}\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}-1\\right)}\\\\ &{\\hat{v}_{0}^{t}=-\\mathrm{i}k\\tilde{u}_{x_{1}}^{t}/\\xi_{0},}\\\\ &{\\hat{v}_{1}^{t}=-\\mathrm{i}k\\left(\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}-\\frac{\\alpha_{0}^{1}}{16\\pi}\\right)}\\\\ &{\\hat{v}_{0}^{t}=\\frac{-C_{g}^{t}\\hat{v}_{x_{1}}}{\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}+1\\right)}-\\frac{\\alpha_{0}^{1}C_{g}^{t}\\hat{v}_{x_{2}}}{\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}+1\\right)^{2/3}}\\alpha_{0}^{1}\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}\\right)n}\\\\ &{\\hat{w}_{x_{1}}=\\frac{C_{g}^{t}\\hat{w}_{x_{2}}^{t}}{\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}+1\\right)},}\\\\ &{\\hat{w}_{y_{2}}=\\frac{\\displaystyle\\hat{w}_{y_{2}}^{t}\\hat{w}_{y_{1}}^{t}}{\\displaystyle\\left(\\ln\\frac{1}{\\alpha_{0}(\\alpha_{1}-1)}+1\\right)},}\\\\ &{\\hat{w}_{z_{1}}=\\frac{\\displaystyle\\hat{w}_{z_{2}}^{t}\\hat\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\ng\\in\\{q,k,v\\}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "equation", "text": "$$\ng\\in\\{q,k,v\\}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "and $\\Omega\\left(z\\right)=\\Theta\\left(z-1\\right)-\\Theta\\left(-z-1\\right),\\Theta\\left($ $\\Theta\\left(z\\right)$ being the Heaviside step function. $\\gamma\\left(z\\right)$ is either $\\sigma^{\\prime}\\left(z\\right)$ or $\\exp\\left(z\\right)$ , depending on the forget gate activation. ", "page_idx": 22}, {"type": "text", "text": "Parallel mLSTM Forward Pass. The mLSTM recurrence in Equations (16-24) can be reformulated in a parallel form, which is used to speed up training. After training we can still use the recurrent formulation for fast text generation. ", "page_idx": 22}, {"type": "text", "text": "Instead of processing each input $\\pmb{x}_{t}\\in\\mathbb{R}^{d}$ at time step $t$ sequentially, the parallel version processes all timesteps of a full sequence $\\pmb{X}\\in\\mathbb{R}^{T\\times d}$ at once, where $T$ is the sequence length and $d$ is the head dimension. We present the forward pass of the mLSTM for a single head and drop the head dimension for simplicity. ", "page_idx": 22}, {"type": "text", "text": "Let $\\tilde{\\mathbf{f}}\\in\\mathbb{R}^{T}$ be the forget gate pre-activations and $\\tilde{\\mathbf{i}}\\in\\mathbb{R}^{T}$ be the input gate pre-activations for a full sequence. We construct the forget gate activation matrix $\\mathbf{F}\\in\\mathbb{R}^{T\\times\\mathbf{\\dot{T}}}$ by ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathbf{F}_{i j}=\\left\\{\\stackrel{0}{1}\\begin{array}{l l}{\\mathrm{For}\\;i<j}\\\\ {\\mathrm{}}&{\\mathrm{for}\\;i=j}\\\\ {\\prod_{k=j+1}^{i}\\sigma\\left(\\tilde{\\mathrm{f}}_{k}\\right)}&{\\mathrm{for}\\;i>j}\\end{array}\\right.,\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "and the input gate pre-activation matrix $\\tilde{\\mathbf{I}}\\in\\mathbb{R}^{T\\times T}$ by ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\tilde{\\mathbf{I}}_{i j}=\\left\\{\\!\\!\\begin{array}{l l}{0}&{\\mathrm{for}\\;i<j}\\\\ {\\mathrm{i}_{j}}&{\\mathrm{for}\\;i\\geqslant j}\\end{array}\\right..\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "By applying the elementwise exponential input gate activation function naively, we obtain the unstabilized gate activation matrix $\\mathbf{D}\\in\\mathbb{R}^{T\\times T^{\\prime}}$ as ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathbf{D}=\\mathbf{F}\\odot\\exp(\\tilde{\\mathbf{I}})~.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "In order to avoid overflow due to the exponential function we apply the same stabilization as in the recurrent sLSTM, see Equation 49. In the parallel formulation of the mLSTM we get a numerically stable gate activation matrix $\\mathbf{D}^{\\prime}\\in\\mathbb{R}^{T\\times T}$ by taking the logarithm of $\\mathbf{D}$ element-wise and subtracting the row-wise maximum value of $\\mathbf{D}$ from each element: ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\widetilde{\\mathbf{D}}=\\log\\mathbf{D}=\\log\\Big(\\mathbf{F}\\odot\\exp(\\widetilde{\\mathbf{I}})\\Big)=\\log\\mathbf{F}+\\widetilde{\\mathbf{I}}}\\\\ &{\\mathbf{D}^{\\prime}=\\exp(\\widetilde{\\mathbf{D}}-\\operatorname*{max}\\widetilde{\\mathbf{D}})}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Given the queries, keys and values $Q,K,V\\in\\mathbb{R}^{T\\times d}$ , for a full sequence we can compute all hidden pre-activation states $\\widetilde{\\mathbf{H}}\\in\\mathbb{R}^{T\\times d}$ in parallel for the un-stabilized version by ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\widetilde{\\mathbf{H}}=C\\,V\\ ,\\quad\\mathrm{with\\}C=\\frac{\\widetilde{C}}{\\operatorname*{max}\\{|\\sum_{j=1}^{T}\\widetilde{C}_{i j}|,1\\}}\\ ,\\quad\\mathrm{and}\\ \\widetilde{C}=\\frac{Q K^{\\top}}{\\sqrt{d}}\\odot\\mathbf{D}\\,.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Note that we extract the $\\textstyle{\\frac{1}{\\sqrt{d}}}$ factor for $\\kappa$ explicitly here and further on. For the stabilized version this yields ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\widetilde{\\mathbf{H}}=C\\,V\\,\\,,\\quad\\mathrm{with}\\,\\,\\,C=\\frac{\\widetilde{C}^{\\prime}}{\\operatorname*{max}\\{|\\sum_{j=1}^{T}\\widetilde{C}_{i j}^{\\prime}|,\\exp(-\\operatorname*{max}\\widetilde{\\mathbf{D}})\\}}\\,\\,,\\quad\\mathrm{and}\\,\\,\\,\\widetilde{C}^{\\prime}=\\frac{Q K^{\\intercal}}{\\sqrt{d}}\\odot\\mathbf{D}^{\\prime}\\,,\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where for both versions the hidden pre-activation states $\\widetilde{\\mathbf{H}}$ are identical. ", "page_idx": 22}, {"type": "text", "text": "With the output gate pre-activations $\\widetilde{\\mathbf{O}}\\in\\mathbb{R}^{T\\times d}$ we can compute the hidden states $H\\in\\mathbb{R}^{T\\times d}$ for all timesteps by applying the output ga te in parallel for each timestep element-wise: ", "page_idx": 22}, {"type": "equation", "text": "$$\n{\\bf H}=\\sigma(\\tilde{\\bf{O}})\\odot\\tilde{\\bf{H}}\\,.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "This gives the parallel forward pass of the mLSTM for a full input sequence $X\\in\\mathbb{R}^{T\\times d}$ . ", "page_idx": 22}, {"type": "text", "text": "Parallel mLSTM Backward Pass. We present the backward pass of the mLSTM for the stabilized version only. For completeness we summarize the forward pass in the stabilized version before we present the backward pass. ", "page_idx": 23}, {"type": "text", "text": "Given the forget gate matrix $\\mathbf{F}\\in\\mathbb{R}^{T\\times T}$ , the logarithm of the forget gate matrix $\\overline{{\\mathbf{F}}}=\\log\\mathbf{F}\\in\\mathbb{R}^{T\\times T}$ , and the input gate matrix $\\mathbf{I}\\in\\mathbb{R}^{T\\times T}$ as introduced above, together with the queries, keys and values $Q,K,V\\stackrel{*}{\\in}\\mathbb{R}^{T\\times d}$ , we can write the forward pass of the mLSTM in the stabilized version as: ", "page_idx": 23}, {"type": "text", "text": "se maximum ", "page_idx": 23}, {"type": "text", "text": "ow-wise sum ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{\\tilde{\\mathbf{D}}=\\tilde{\\mathbf{F}}+\\tilde{\\mathbf{I}}}\\\\ &{m=\\operatorname*{max}\\tilde{\\mathbf{D}}_{i j}\\ ,\\ }&{\\mathrm{row-wise}}\\\\ &{\\mathbf{D}^{\\prime}=\\exp(\\tilde{\\mathbf{D}}-m\\mathbf{1}^{\\top})}\\\\ &{\\tilde{C}^{\\prime}=\\frac{Q K^{\\top}}{\\sqrt{d}}\\odot\\mathbf{D}^{\\prime}}\\\\ &{\\tilde{b}=\\displaystyle\\sum_{j=1}^{T}\\tilde{C}_{j j}^{\\prime}=\\tilde{C}^{\\prime}\\mathbf{1}\\ ,\\ }&{\\mathrm{row}}\\\\ &{n=\\operatorname*{max}\\{|b|,\\exp(-m)\\}}\\\\ &{C=\\tilde{C}^{\\prime}\\odot(n^{-1}\\mathbf{1}^{\\top})}\\\\ &{\\tilde{\\mathbf{H}}=C V}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "With this forward pass we can compute the gradients $\\delta_{a}$ for all intermediate and input variables to the mLSTM forward pass in the backward pass. We denote the gradient with respect to variable $a$ as $\\delta_{a}$ . ", "page_idx": 23}, {"type": "text", "text": "Given the output gradient $\\delta_{\\widetilde{\\mathbf{H}}}\\,\\in\\,\\mathbb{R}^{T\\times d}$ we can compute the backward pass for the intermediate gradients as: ", "page_idx": 23}, {"type": "text", "text": "column-wise broadcast ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\delta_{\\tau}^{*}=V_{\\mathrm{f}_{\\tau}}^{\\tau}}\\\\ &{\\delta_{n}=-\\left(\\tilde{C}^{\\prime}\\circ\\left(\\tau^{-2}\\,1^{\\tau}\\right)\\odot\\delta_{C}\\right)\\,1}\\\\ &{\\quad=-\\left(\\left(\\tilde{C}^{\\prime}\\circ\\delta_{C}\\right)\\,1\\right)\\odot n^{-2}}\\\\ &{\\delta_{n}=\\mathrm{sign}\\,(n)\\odot\\delta_{n}\\odot\\left\\{\\begin{array}{l l}{1}&{\\mathrm{if}\\,|b|>\\mathrm{cyo}(-\\mathbf{m})}\\\\ {0}&{\\mathrm{otherwise}}\\end{array}\\right.}\\\\ &{\\delta_{\\tilde{C}_{\\tau},C}=\\left(n^{-1}\\,1^{\\tau}\\right)\\odot\\delta_{C}\\,,}\\\\ &{\\delta_{\\tilde{C}_{\\tau}^{\\prime},\\tilde{C}}=\\delta_{\\tilde{C}_{\\tau},C}+\\delta_{\\tilde{C}_{\\tau},B}}\\\\ &{\\delta_{\\tilde{C}_{\\tau}}=\\frac{\\mathrm{ot}}{\\sqrt{c}\\,d}\\odot\\delta_{\\tilde{C}_{\\tau}},}\\\\ &{\\delta_{\\tilde{D}}=\\mathrm{exp}(\\tilde{\\mathbf{D}}-m)\\odot\\delta_{\\mathbf{D}}=\\mathbf{D}^{\\prime}\\odot\\delta_{\\mathbf{D}^{\\prime}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "We do not compute the gradients for $\\mathbf{\\nabla}m$ as they cancel out (see the proof in the recurrent sLSTM). ", "page_idx": 23}, {"type": "text", "text": "With these intermediate gradients the gradients for the logarithmic forget gate matrix $\\delta_{\\mathbf{\\overline{{F}}}}\\in\\mathbb{R}^{T\\times T}$ , the input gate matrix $\\delta_{\\mathbf{I}}\\in\\mathbb{R}^{T\\times T}$ , and the queries, keys and values $\\delta_{Q},\\delta_{K},\\delta_{V}\\in\\mathbb{R}^{T\\times d}$ are given by ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\delta_{\\mathbf{\\overline{{F}}}}=\\delta_{\\widetilde{\\mathbf{D}}}}\\\\ &{\\displaystyle\\delta_{\\mathbf{I}}=\\delta_{\\widetilde{\\mathbf{D}}}}\\\\ &{\\displaystyle\\delta_{Q}=\\left(\\mathbf{D}^{\\prime}\\odot\\delta_{\\widetilde{C}^{\\prime}}\\right)\\frac{K}{\\sqrt{d}}}\\\\ &{\\displaystyle\\delta_{K}=\\left(\\mathbf{D}^{\\prime}\\odot\\delta_{\\widetilde{C}^{\\prime}}\\right)^{\\top}\\frac{Q}{\\sqrt{d}}}\\\\ &{\\displaystyle\\delta_{V}=C^{\\top}\\delta_{\\widetilde{\\mathbf{H}}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "Having computed the gradients for the logarithmic forget gate matrix $\\delta_{\\overline{{\\mathbf{F}}}}$ , we can compute the gradients for the forget gate pre-activations $\\delta_{\\tilde{\\mathbf{f}}}=\\left[\\delta_{\\tilde{\\mathbf{f}}_{1}},\\delta_{\\tilde{\\mathbf{f}}_{2}},...,\\delta_{\\tilde{\\mathbf{f}}_{T}}\\right]^{\\intercal}\\in\\mathbb{R}^{T}$ . ", "page_idx": 24}, {"type": "text", "text": "Recall the logarithmic forget gate matrix ${\\overline{{\\mathbf{F}}}}=\\log\\mathbf{F}$ is computed by ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\overline{{\\mathbf{F}}}_{i j}=\\log\\mathbf{F}_{i j}=\\left\\{\\overset{-\\infty}{0}\\right.\\overset{\\array}{=}\\underbrace{\\mathrm{~for~}i<j}_{=:\\hat{\\mathbf{f}}_{k}}\\;}\\\\ {\\overline{{\\mathbf{F}}}_{i j}=\\log\\mathbf{F}_{i j}=\\left\\{\\overset{\\cdot}{\\sum}_{k=j+1}^{i}\\underbrace{\\log\\sigma\\left(\\tilde{\\mathbf{f}}_{k}\\right)}_{=:\\bar{\\mathbf{f}}_{k}}=\\sum_{k=j+1}^{i}\\bar{\\mathbf{f}}_{k}\\;\\;\\;\\mathrm{~for~}i>j}\\end{array}\\right..}\\end{array}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "With the substitution $\\overline{{\\mathbf{f}}}=\\log\\sigma(\\widetilde{\\mathbf{f}})$ we compute the gradients for the logarithmic forget gate activations $\\delta_{\\mathbf{\\overline{{f}}}}=\\left[\\delta_{\\overline{{\\mathbf{f}}}_{1}},\\delta_{\\overline{{\\mathbf{f}}}_{2}},...,\\delta_{\\overline{{\\mathbf{f}}}_{T}}\\right]^{\\top}\\in\\mathbb{R}^{T}$ as ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\delta_{\\overline{{{\\mathfrak{f}}}}_{k}}=\\sum_{j=1}^{k-1}\\sum_{i=k}^{T}\\left(\\delta_{\\overline{{{\\mathbf{F}}}}}\\right)_{i j}\\ ,\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "where the last equation makes use of the following: ", "page_idx": 24}, {"type": "equation", "text": "$$\n{\\begin{array}{r l}&{{\\frac{\\mathrm{d}}{\\mathrm{d}x}}\\left(\\log\\sigma(x)\\right)=-\\left(1+\\exp(-x)\\right)^{-1}\\cdot\\exp(-x)\\cdot(-1)}\\\\ &{\\qquad\\qquad\\qquad={\\frac{\\exp(-x)}{1+\\exp(-x)}}={\\frac{1}{1+\\exp(x)}}}\\\\ &{\\qquad\\qquad=\\sigma(-x)}\\end{array}}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "Finally, we compute the input gate pre-activations\u2019 gradients $\\delta_{\\tilde{\\mathbf{i}}}=\\left[\\delta_{\\tilde{\\mathbf{i}}_{1}},\\delta_{\\tilde{\\mathbf{i}}_{2}},...,\\delta_{\\tilde{\\mathbf{i}}_{S}}\\right]^{\\top}\\in\\mathbb{R}^{T}$ as the column-wise sum over the rows of the input gate matrix $\\delta_{\\mathbf{I}}$ : ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\delta_{\\tilde{\\mathbf{i}}_{k}}=\\sum_{i=k}^{T}\\left(\\delta_{\\mathbf{I}}\\right)_{i k}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "This completes the backward pass of the parallel mLSTM for a full input sequence $X\\in\\mathbb{R}^{T\\times d}$ . ", "page_idx": 24}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/a69f2defb5660ed20a106b1aa5e64dd1d32a6132f1b24abc38869105a1f7256f.jpg", "img_caption": ["Figure 7: Schematic representation of an sLSTM Block \u2013 post up-projection: Embedded in a preLayerNorm residual structure, the input is optionally passed through a causal convolution of window size 4 that includes a Swish activation for input and forget gates. Then, for all input, forget and output gates i, f, o, and the cell update z the input is fed through a block-diagonal linear layer with four diagonal blocks or \u201cheads\u201d. These diagonal blocks coincide with the recurrent gate pre-activations from the last hidden state, which corresponds to an sLSTM with four heads depicted with the circular arrows. The resulting hidden state goes through a GroupNorm layer (Wu & He, 2018) \u2013 a head-wise LayerNorm for each of the four heads. Finally, the output is up- and down-projected using a gated MLP, with GeLU activation function and projection factor $4/3$ to match parameters. "], "img_footnote": [], "page_idx": 25}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/c454670f5f83c2fecc894947d2153e1c02a873f349d5212025fb55beb27f26f7.jpg", "img_caption": ["Figure 8: Schematic representation of an mLSTM block \u2013 pre up-projection: Embedded in a preLayerNorm residual structure, the input is up-projected first with projection factor 2, once for an externalized output gate and once as input for the mLSTM cells. The mLSTM cell input is dimensionwise causally convoluted (kernel size 4), before entering a learnable skip connection. We obtain input $q$ and $k$ via block-diagonal projection matrices of block size 4. The values $v$ are fed directly, skipping the convolution part. After the mLSTM sequence mixing, outputs are normalized via GroupNorm (Wu & He, 2018) \u2013 a head-wise layer norm for each of the four heads. Finally, the learnable skip input is added and the result is gated component-wise with the external output gate. The output is down-projected. "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "C Extended Related Work ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Linear Attention. Several methods have been suggested to overcome the quadratic complexity in terms of context length of the Transformer and make attention linear in the context length. The Synthesizer learns synthetic attention weights without token\u2013token interactions (Tay et al., 2020). Linformer realizes self-attention by a low-rank matrix and even linearly approximates it (Wang et al., 2020). Linear Transformer linearizes the attention mechanism (Katharopoulos et al., 2020). Performer linearly approximates the attention softmax by positive orthogonal random features approach (Choromanski et al., 2021). Attention has been replaced by fast long convolutions in the Structured Global Convolution (SGConv) (Li et al., 2022) and the Hyena Hierarchy (Poli et al., 2023). ", "page_idx": 27}, {"type": "text", "text": "State Space Models. Recently, State Space Models (SSMs) became very popular since they are linear in the context length and show promising performance compared to Transformers. One of the first proposed models was Structured State Space sequence model (S4) (Gu et al., 2021), followed by Diagonal State Space (DSS) model (Gupta et al., 2022), Gated State Space (GSS) models (Mehta et al., 2022), S5 model (Smith et al., 2022), Bidirectional Gated SSM (BiGS) (Wang et al., 2022), H3 model (Fu et al., 2023), and Mamba (Gu & Dao, 2023). ", "page_idx": 27}, {"type": "text", "text": "Recurrent Neural Networks. Recurrent Neural Networks (RNNs) have been suggested to replace Transformer and attention due to their linearity in the context length. RNNs with Deep Linear Recurrent Units (LRUs) showed promising results for language modeling (Orvieto et al., 2023; De et al., 2024), as did Hierarchically Gated Linear RNN (HGRN) (Qin et al., 2023) and HGRN2 (Qin et al., 2024). A well-known RNN approach to large language modeling is RWKV (Peng et al., 2023, 2024), showcasing competitive performance to Transformers. ", "page_idx": 27}, {"type": "text", "text": "Gating. One of the key ideas of LSTM is gating, which was rediscovered and reinterpreted in many recent approaches. Gating was used in HGRN (Qin et al., 2023), HGRN2 (Qin et al., 2024), Gated Linear Attention (GLA) (Yang et al., 2023), Gated State Space (GSS) models (Mehta et al., 2022), Bidirectional Gated SSM (BiGS) (Wang et al., 2022), Moving Average Equipped Gated Attention (MEGA) (Ma et al., 2022), RWKV (Peng et al., 2023), and Mamba (Gu & Dao, 2023). ", "page_idx": 27}, {"type": "text", "text": "Covariance Update Rule. To enhance storage capacities, we equipped the mLSTM cell with a matrix memory with a covariance update rule. Other methods which build on such an update mechanism are Fast Weight Programmers (Schmidhuber, 1992; Schlag et al., 2021), RWKV-5 and RWKV-6 (Peng et al., 2024), Retention (Sun et al., 2023), Linear Transformer (Katharopoulos et al., 2020), and HGRN2 (Qin et al., 2024). ", "page_idx": 27}, {"type": "text", "text": "Most Related. Conceptually the closest models to xLSTM are Retention (Sun et al., 2023), RWKV (Peng et al., 2023, 2024), and HGRN2 (Qin et al., 2024). These models share the concepts matrix memory and/or gating. However, in contrast to the new sLSTM, these approaches do not allow memory mixing. Memory mixing enables to solve state tracking problems, and therefore LSTMs are more expressive than State Space Models (SSMs) and Transformers (Merrill et al., 2024; Del\u00e9tang et al., 2023). State tracking is required to evaluate code or to track entities in a long narrative. ", "page_idx": 27}, {"type": "text", "text": "Residually Stacking Architectures. Like almost all contemporary large deep learning models, xLSTM architectures are constructed by residually stacking building blocks (Srivastava et al., 2015; He et al., 2016). This construction enabled deep convolutional networks (He et al., 2016) and Transformers (Vaswani et al., 2017). Transformers are the ultimate force behind Large Language Models (LLMs) like GPT-3 (Brown et al., 2020), ChatGPT (Schulman et al., 2022), GPT-4 (Achiam et al., 2023), Megatron-LM (Shoeybi et al., 2019), Gopher (Rae et al., 2021), ERNIE 3.0 Titan (Wang et al., 2021), GLaM (Du et al., 2021), Chinese M6 (Lin et al., 2021), mutilingual AlexaTM 20B (Soltan et al., 2022), OPT (Zhang et al., 2022), Chinchilla (Hoffmann et al., 2022), BLOOM (Scao et al., 2022), GLM-130B (Zeng et al., 2022), LaMDA (Thoppilan et al., 2022), PaLM (Chowdhery et al., 2022), Llama (Touvron et al., 2023), Gemini (Google, 2023; Reid et al., 2024). ", "page_idx": 27}, {"type": "text", "text": "D Experiments ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Training Setup. For all experiments, we use Python1 3.11 with PyTorch $2.2.0^{2}$ , and CUDA $12.1^{3}$ . We developed and trained all our models and baselines over the course of three months on a cluster with 128 nodes of eight NVIDIA A100 GPUs each. More than $95\\%$ of this compute were used for the Language Modeling experiments in sections 4.2 and 4.3. ", "page_idx": 28}, {"type": "text", "text": "Nearest Neighbor Search Task. For this auxiliary task, we use randomly sampled feature vectors of dimension 2 and unit norm. The attached value is a uniformly distributed random number from $[0,1]$ , leading to inputs vectors of dimension 3. The first feature vector serves as search key, with the first value being ignored. Then the model has to predict the value of the nearest neighbor so far in the sequence. We train on 8192 sequences of context length up to 64 (uniformly sampled) and validate on 8192 different samples. All models have two blocks and embedding dimension 128. We use a dropout of 0.1, $10\\%$ linear warm-up steps and cosine decay to 1e-7 for $100\\mathrm{k}$ total training steps. We sweep over learning rates 1e-4, 1e-3, 1e-2, 1e-1 and 5 seeds each. The reported values in Figure 1 are mean values for the best learning rate and $99\\%$ confidence intervals. Note that LSTM requires very high learning rates, whereas Transformers (Llama) perform best at the smallest learning rate. The xLSTM[0:1] reaches similar performance across all learning rates. ", "page_idx": 28}, {"type": "text", "text": "Wikitext-103 Rare Token Prediction. For this exemplary experiment on rare token prediction, we trained 125M-sized models on Wikitext-103 (Merity et al., 2017). All models have an embedding dimension of 768 in a post up-projection structure of 12 residual blocks. The Transformer model (Llama) uses Multi-Head Attention, for what is called LSTM the Multi-Head Attention is replaced by an LSTM and the xLSTM[1:0] contains mLSTM layers with matrix memory. Models were trained with maximum learning rate 1e-3, 4k steps linear warm-up and cosine decay for in total 50k steps, using a batch size of 256 and context length of 512. We use the validation perplexity as a stopping criterion and evaluate on the test set. ", "page_idx": 28}, {"type": "text", "text": "D.1 Synthetic Tasks and Long Range Arena ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "D.1.1 Test of xLSTM\u2019s Exponential Gating with Memory Mixing. ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "We evaluate xLSTM on a suite of formal language tasks to test its exponential gating and memory mixing mechanism. Formal languages provide a framework to probe the generalization capabilities of models. They allow to specifically test different expressivity levels, e.g. along the Chomsky hierarchy. Typical language model architectures do not necessarily fit perfectly in these hierarchies (Del\u00e9- tang et al., 2023) \u2014 nevertheless these languages allow to illustrate differences in generalization expressivity between different architectures. Our evaluation tasks are based on Del\u00e9tang et al. (2023). ", "page_idx": 28}, {"type": "text", "text": "Experiment Setup. The different formal language tasks in the experiment (see individual tasks description below) encompass different levels of the Chomsky hierarchy as well as additional counting and memory-focused tasks. We use different lengths per sample, which allows us to validate in a length extrapolation setting. We train on a varying task length up to 40. The evaluation is done for task lengths between 40 and 256 as we are only interested in the \u201ctask generalization capabilities\u201c of the models. ", "page_idx": 28}, {"type": "text", "text": "In all experiments, we use two blocks (or layers for the pure LSTM) for all models. We compare Llama, Mamba, Retention, Hyena, RWKV-4, RWKV-5, RWKV-6, LSTM, xLSTM[0:1], xLSTM[1:0] and xLSTM[1:1]. The sLSTM block is used without a convolution and with normal weight initialization. LSTM (Block) refers to an architecture where a vanilla LSTM is used instead of self-attention inside a Transformer block. ", "page_idx": 28}, {"type": "text", "text": "All models are trained with 3 different learning rates (1e-2, 1e-3, 1e-4), each with two seeds. Batch size is 256 \u2014 cosine annealing (min lr: 1e-5) with $10\\%$ warm-up steps is applied. We use AdamW (Loshchilov & Hutter, 2019) $\\beta_{1}=0.9$ , $\\beta_{2}=0.99)$ ) and a weight decay of 0.1 for training. In each experiment we train for $100\\mathbf{k}$ steps \u2014 the samples are generated randomly, however, all experiments are trained and evaluated on the same samples. ", "page_idx": 28}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/3524df9c0ec5bda987d6c8e1a6982a47828195d50d1728ec36cf1c934e43a799.jpg", "table_caption": [], "table_footnote": [], "page_idx": 29}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/241b488636d14b96afb45c9775be8edb7f28f328967ee34edd508902d0286984.jpg", "table_caption": [], "table_footnote": [], "page_idx": 29}, {"type": "text", "text": "Figure 10: Supplementary results given by scaled accuracy of different models at solving formal language tasks. Tasks are grouped by the Chomsky hierarchy. ", "page_idx": 29}, {"type": "text", "text": "Additional Formal Language Results. Figure 9 and Figure 10 showcase supplementary results of the formal language tasks. The former extends the results with additional models. The latter details tasks where no model attained a minimum scaled accuracy of 0.3. Although no model achieves proper extrapolation of the task to a larger context length, xLSTM performs best among the evaluated models. ", "page_idx": 29}, {"type": "text", "text": "Individual Task Description. The majority of tasks are based on Del\u00e9tang et al. (2023). We provide the vocabulary size $\\vert V\\vert$ and the random accuracy $s_{r a n d}$ (for accuracy scaling), used in the evaluation. As we evaluate different task lengths each task has a padding token which is used to pad the sequence to the given context length. In Listing 1 there is an example for each task. ", "page_idx": 29}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "\u2022 Bucket Sort Given a string of tokens of a sorted alphabet, compute the sorted string. $\\begin{array}{r}{|V|=11\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-1}}\\end{array}$ ", "page_idx": 30}, {"type": "text", "text": "\u2022 Cycle Nav Given a string of \u201cmovement tokens\u201d $(+1,-1$ , STAY) compute the end position of the agent with start position 0. The position must be computed modulo the maximum position.   \n$\\begin{array}{r}{|V|=9\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-4}}\\end{array}$ ", "page_idx": 30}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Even Pairs Given a binary string of $a$ and $b$ tokens, compute whether the number of $a b$ and ba is even. This task can be solved by checking if the first and last token of the string are equal. ", "page_idx": 30}, {"type": "equation", "text": "$$\n|\\dot{V}|=3\\quad s_{\\mathrm{rand}}=0.5\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Majority Given a string of tokens, compute the token that occurred most often in the sequence. $\\begin{array}{r}{{\\|V\\|}=64\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-1}}\\end{array}$ ", "page_idx": 30}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Majority Count Given a string of tokens of an ordered alphabet. Compute the count of the token that occurred most often in the sequence. If the count exceeds the vocab size, the highest vocab token should be outputted. ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{|\\check{V}|=64\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-1}}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Missing Duplicate Given a string of tokens. The string is repeated but one of the tokens is masked in the repetition. Output the token that is masked. ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{|V|=11\\quad s_{\\mathrm{rand}}\\dot{=}\\frac{1}{|V|-2}}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Mod Arithmetic (w/o Brackets) Calculate the result \u2014 modulo the max number \u2014 of the arithmetic operations in the context. The maximum number is the vocabulary size minus the number of special tokens $(+,-,^{*},=,\\,[\\mathrm{PAD}])$ . ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{|V|=10\\quad\\stackrel{\\bullet}{s_{\\mathrm{rand}}}=\\frac{1}{|V|-5}}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Mod Arithmetic (w Brackets) Calculate the result \u2014 modulo the maximum number \u2014 of the arithmetic operations in the context. The maximum number is vocabulary size minus the number of special tokens $(+,-,^{*},=,(,)$ , [PAD]). ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{|V|=12\\quad\\stackrel{\\cdot}{s_{\\mathrm{rand}}}=\\frac{1}{|V|-7}}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Odds First An string of tokens $t_{1},t_{2},t_{3},...t_{n}$ is given. Output all tokens with and odd index $(t_{1},t_{3},...)$ then the token with an even index $(t_{2},t_{4},...)$ . Apart from that keep the ordering of the initial string. ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{|V|=12\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-2}}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Parity Given a binary string of $a$ and $^b$ tokens, compute if the number of $^b$ \u2018s is even. If the number is even output $a$ otherwise $^b$ . This is equivalent to sequentially calculating the half-adder sum. ", "page_idx": 30}, {"type": "equation", "text": "$$\n|V|=3\\quad s_{\\mathrm{rand}}=0.5\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Repetition Given a string of tokens \u2014 repeat it. $\\begin{array}{r}{|V\\big|=12\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-2}}\\end{array}$ ", "page_idx": 30}, {"type": "text", "text": "\u2022 Reverse String Given a string of tokens \u2014 repeat it in reverse order. $\\begin{array}{r}{|V|=12\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-2}}\\end{array}$ ", "page_idx": 30}, {"type": "text", "text": "\u2022 Stack Manipulation An initial stack content is given, followed by a sequence of push and pop operations. Compute the stack content after the operations ", "page_idx": 30}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\dot{|V|}=11\\quad s_{\\mathrm{rand}}=\\frac{1}{\\lfloor\\frac{|V|-3}{2}\\rfloor}}\\end{array}\n$$", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Set Given a string of tokens, compute the ordered set of the tokens. Keep the ordering so that tokens that occurred first are also outputted first. ", "page_idx": 30}, {"type": "equation", "text": "$\\begin{array}{r}{|V|=128\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-2}}\\end{array}$ ", "text_format": "latex", "page_idx": 30}, {"type": "text", "text": "\u2022 Solve Equation Given is an equation with the operators $\\{+,-,^{*},=,(,)\\}$ , number, and an unknown variable x. Compute the value of the variable modulo the max number. The maximum number is vocabulary size minus the number of special tokens $(+,-,^{*},=,(,)$ , [PAD], [ACT]). $\\begin{array}{r}{|V|=14\\quad s_{\\mathrm{rand}}=\\frac{1}{|V|-9}}\\end{array}$ ", "page_idx": 31}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/f8ec246a2108c532a6e71d2a5718fc27507e6093f3f298f3df6b8bd671c2bc57.jpg", "table_caption": [], "table_footnote": [], "page_idx": 31}, {"type": "text", "text": "Listing 1: Examples of the formal language tasks. Red tokens are evaluated for loss and accuracy metrics, but are padded for the input. The tokens are illustrated in a way that allows easy semantic interpretation for the given task \u2014 hence, some tokens are represented by multiple characters. ", "page_idx": 31}, {"type": "text", "text": "D.1.2 Test of xLSTM\u2019s Memory Capacities on Associative Recall Tasks. ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "We test the memory capacity of xLSTM with the Multi-Query Associative Recall task proposed by Arora et al. (2023). Figure 11 illustrates the basic task setup. ", "page_idx": 31}, {"type": "text", "text": "Why Multi-Query Associative Recall for Memory Tests of LLM Architectures. Associative Recall (AR), the ability to retrieve a specific value (information) associated with a given key (information), constitutes a key capability for LLM to perform well (Poli et al., 2024; Arora et al., 2023; Olsson et al., 2022). Especially its quality of in-context learning seems to be strongly connected to this capability (Olsson et al., 2022). Arora et al. (2023) attribute performance gaps between early non-Transformer and Transformer language models specifically to performance gaps in associative recall. They argue that prior AR evaluations fall short of capturing these differences and propose MQAR, which can show the AR performance differences that translate to performance differences in language modeling performance. Hence, MQAR is especially suitable to analyze the memory capacity of LLM. Transformer (e.g. Llama) models can be seen as the gold standard for this task as their memory is exponential in the coding dimension (Ramsauer et al., 2021). ", "page_idx": 31}, {"type": "text", "text": "Experiment Setup. There are two relevant variables that determine different experimental setups. (1) Context Length (CL): Length of the sequence of one sample \u2014 this influences the distances between the key-value definition and the recall. (2) Number Key-Value Pairs (KV): Influences how many key-value pairs the model needs to keep track of. The vocabulary size is always 8192. ", "page_idx": 32}, {"type": "text", "text": "In all experiments, we use two blocks (or layers for the pure LSTM) for all models. LSTM (Block) model refers to an architecture where a vanilla LSTM is used instead of self-attention inside a Transformer block. ", "page_idx": 32}, {"type": "text", "text": "For each task setup, we train each model with 4 different learning rates (batch size $>24$ : {1e-2, 2.15e-3, 4.6e-4, 1e-4}, batch size 24: {1e-3, 2.2e-4, 5e-5, 1e-5}). The batch size (BS) changes depending on the context length (CL) ( $_{\\mathrm{CL=64/128}}$ : $B S{=}512$ ; ${\\mathrm{CL}}{=}256$ : ${\\mathrm{BS}}{=}256$ ; ${\\mathrm{CL}}{=}756$ : ${\\bf B}{\\bf S}{=}128$ ; $_\\mathrm{CL=1024}$ : ${\\bf B S}{=}96$ ; $\\mathrm{CL}{=}2048$ : $\\mathrm{BS}{=}24$ ). We vary the embedding dimension (Model Dim) between different experiments \u2013 different numbers of heads are used accordingly. For each experiment, we generate 100,000 training samples (validation: 3,000 samples) and train for 64 epochs. We apply cosine annealing (min lr: 1e-4 and 1e-5) with $10\\%$ warm-up steps. We use AdamW (Loshchilov & Hutter, 2019) and a weight decay of 0.1 for training. ", "page_idx": 32}, {"type": "text", "text": "We conduct three different experiments: ", "page_idx": 32}, {"type": "text", "text": "\u2022 MQAR-Experiment 1 evaluates, in the same fashion as Arora et al. (2023), a variety of models (Llama, Mamba, Mamba (noWT) - i.e. without weight tying, Retention, Hyena, H3, RWKV-4, RWKV-5, RWKV-6, LSTM, LSTM (Block), xLSTM[0:1], xLSTM[1:0] and xLSTM[1:1]) on increasing task difficulty by increasing the context length and number of key-value pairs simultaneously. We benchmark three parameter settings: $\\mathrm{CL,KV=\\{(64,4),(128,8),(256,16)\\}}$ . ", "page_idx": 32}, {"type": "text", "text": "\u2022 MQAR-Experiment 2 increases the task difficulty notably and goes beyond previous evaluations on this task. We individually scale the context length $\\scriptstyle(\\mathrm{CL}=\\{756,\\,1024,\\,2048\\})$ ) and the key-value pairs $(\\mathrm{KV}{=}\\{48,96,256\\})$ and evaluate all combinations. This experiment especially probes the memory capacity because the number of key-value pairs is high. To reduce the computational burden we only evaluate models that perform flawlessly in Experiment 1 \u2014 additionally we evaluate Transformer only in the hardest setting $(\\mathbf{CL}{=}2048)$ ) as sanity check, because no performance decrease is expected. ", "page_idx": 32}, {"type": "text", "text": "\u2022 MQAR-Experiment 3 analyzes whether the AR capability learned on a certain context length extrapolates to bigger context lengths. For each KV setting of Experiment 2, we use the models (we select the 3 biggest model dimensions) trained on $\\mathrm{CL}{=}2048$ and evaluate bigger context lengths (CL={4096, 6144, 8192}). ", "page_idx": 32}, {"type": "text", "text": "Extended Results. The result of Experiment 1 can be found in Figure 12. In accordance to the results of Arora et al. (2023). H3, Hyena, RWKV-4 fail to solve the task with a smaller model dimension. In contrast, xLSTM[1:1], xLSTM[1:0], Mamba, RWKV-5 and RWKV-6 are able to solve these settings for all model dimensions. The comparison of xLSTM[0:1] with both original LSTM variants indicates that the exponential gating mechanism improves the AR capabilities of the model. However, both fall short because of the reduced memory capacity compared to xLSTM[1:1] and xLSTM[1:0]. ", "page_idx": 32}, {"type": "text", "text": "The results of Experiment 2 are presented in Figure 13. Scaling the context length has a low impact on the performance of the models. However, while xLSTM[1:1] and xLSTM[1:0] show no clear decay, both RWKV variants slightly, but consistently lose performance with increasing context lengths. The varying number of key-value pairs, which mainly probes the memory capacity of the non-Transformer models, has a more notable impact across all models. RWKV-5 seems to outperform RWKV-6. The latter fails to learn the task at all in some ${\\mathrm{KV}}{=}256$ settings. Overall xLSTM[1:1] is the best-performing non-Transformer model \u2014 suggesting that it provides enhanced memory capacity, also in long contexts. ", "page_idx": 32}, {"type": "text", "text": "Figure 14 shows the extrapolation results from Experiment 3. For xLSTM[1:1], xLSTM[1:0], and Mamba the model performance does not change in the extrapolation setting. The RWKV models (especially RWKV5) degrade slightly with increasing context length. xLSTM[1:1] performs best, as it maintains its superior performance of Experiment 2. ", "page_idx": 32}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/ffe88f6f04f0871034ce21097a5ed5c69ac3eb4dbf219c98f67e54a7700167c0.jpg", "img_caption": [], "img_footnote": [], "page_idx": 33}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 33}, {"type": "text", "text": "Figure 11: Illustration of the MQAR task. Color pairs represent key-value pairs (keys have darker shade). The first part of the sequence defines the key-value pairs for the respective sample. After that, the keys appear randomly according to a power law distribution 4. Grey tokens in the input sequence represent a zero token. The \u201ctarget\u201d sequence contains the value after the respective key appearance \u2014 the rest of the tokens are ignored for the accuracy and loss calculation. The model must predict the value tokens given the respective key. ", "page_idx": 33}, {"type": "text", "text": "D.1.3 Test of xLSTM\u2019s Long Range Capabilities on the Long Range Arena. ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "We assess the performance of xLSTM across tasks in the Long Range Arena benchmark (Tay et al., 2021), examining its ability to effectively handle longer context lengths and diverse data types. ", "page_idx": 33}, {"type": "text", "text": "Our experiments on Long Range Arena benchmark are composed of five tasks: ", "page_idx": 33}, {"type": "text", "text": "\u2022 Retrieval: The task is to predict if two documents have a citation link. The dataset of text documents is derived from the ACL Anthology Network (Radev et al., 2009).   \n\u2022 ListOps: This is a set of modular arithmetic tasks including brackets and lists of numbers, using the operations MIN, MAX, MEDIAN and SUMMOD (modular sum). A particular example is: [MAX 4 3 [MIN 2 3 ] 1 0 [MEDIAN 1 5 8 9, 2]] \u2212\u21925   \n\u2022 Image: This task is based on a version of the CIFAR dataset (Krizhevsky, 2009), where images are transformed to a sequence of pixels and this sequence has to be classified into the usual CIFAR classes. We test both a gray-scale (G-Image) and RGB (RGB-Image) version of this dataset, as Orvieto et al. (2023) uses colored images contrary to the standard setup.   \n\u2022 Pathfinder: The input for this task is a $32\\mathtt{x}32$ gray-scale image, given as pixel sequence, with two dots and several curved lines on it. The task is to predict if the two dots are connected by any of the lines (Linsley et al., 2018). ", "page_idx": 33}, {"type": "text", "text": "We omit the Text classification task (Maas et al., 2011), as the language modeling experiments already test this kind of data, and the Pathfinder-X version of Pathfinder. ", "page_idx": 33}, {"type": "text", "text": "Experiment Setup. The architectures that are tested in this experiment comprise LLama, Mamba, LSTM, RWKV-4, and xLSTM. LSTM (Block) refers to an architecture where a vanilla LSTM is used inside a post up-projection block (like Transformer with attention replaced by LSTM). For xLSTM we choose the best performing of xLSTM[0:1] or xLSTM[1:0] on the validation set, specifically the former for the Image tasks and the latter for all other ones. ", "page_idx": 33}, {"type": "text", "text": "We use the hyperparameter settings of the S5 model (Smith et al., 2022) and Linear Recurrent Unit model (Orvieto et al., 2023), with additional hyperparamter search on learning rates and schedulers for all models. We use two different schedulers: Linear Warm-up Cosine Annealing and Linear Warm-up Cosine Annealing with Restarts. Both learning rate schedulers were evaluated with learning rates of 1e-3, 6e-4 and 1e-4. For the second scheduler, the number of restarts $(R)$ is set to 3. The model hyperparameters for each dataset are displayed in Table 3. ", "page_idx": 33}, {"type": "text", "text": "Results. Table 4 shows the result of experiments on the Long Range Arena benchmark. xLSTM demonstrates consistent strong performance on all of the tasks, suggesting that the proposed architecture is remarkably efficient in handling different aspects of long context problems. ", "page_idx": 33}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/7e95aeba0c5712274e56fffbbc1b1916cfb4e0e27641969882f39a0e65b36e38.jpg", "img_caption": ["Figure 12: Result of MQAR-Experiment 1. The columns show different task settings (context length and key-value pairs). The rows group related models for better clarity. The $x$ -axis gives the model size and the $y$ -axis the validation accuracy. "], "img_footnote": [], "page_idx": 34}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/0591d42038b1a35f8a6c4ba894c03509b297745c189fe9ae1ffcfd8b36bf69cc.jpg", "img_caption": ["Figure 13: Result of MQAR-Experiment 2. The columns and rows correspond to different numbers of key-value pairs and the context length respectivly. The $x$ -axis gives the model size and the $y$ -axis the validation accuracy. "], "img_footnote": [], "page_idx": 35}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/0b0455794fc3c9b672d471000255c032aca9bdbebbfa3cdab47257b0cc2dc189.jpg", "table_caption": ["Table 3: Long Range Arena model hyperparameters. These are the model hyperparameters used in each of the Long Range Arena tasks. For each model we used the best learning rate and the better of the two learning rate schedulers. "], "table_footnote": [], "page_idx": 35}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/55ad55eeddc1f3af9d3267b87de6454d7df3357e90e894f9b6099c773770b898.jpg", "img_caption": ["Figure 14: Result of MQAR-Experiment 3 (Extrapolation). All evaluated models were trained on context length 2048 and the number of key-value pairs given by the columns of the plot. The rows show the different context lengths used in the evaluation. The $x$ -axis gives the model size and the $y$ -axis the validation accuracy. "], "img_footnote": [], "page_idx": 36}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/49e03afb6a5602d1a4447aae5ce17888ca769daf972be61fc61f6e829a96ab2b.jpg", "table_caption": ["Table 4: Long Range Arena test accuracy. Bold highlights the best performing model, underlined the second best. X denotes models that fail to outperform random baselines. xLSTM is the best of xLSTM[1:0], xLSTM[0:1] based on validation dataset accuracy. "], "table_footnote": [], "page_idx": 36}, {"type": "text", "text": "D.2 Method Comparison and Ablation Study on SlimPajama (15B) ", "text_level": 1, "page_idx": 37}, {"type": "text", "text": "General Training Procedure. We tokenize our datasets using the HuggingFace GPT-2 tokenizer (Radford et al., 2019; Brown et al., $2020)^{5}$ and use this tokenizer for all models in this paper. In general, we try to follow Brown et al. (2020) for the general training setup, i.e. we choose context length 2048 and batch sizes 256 or 512 for our models. We use the AdamW (Loshchilov & Hutter, 2019) optimizer with beta parameters $(\\beta_{1},\\,\\beta_{2}){=}(0.9,\\,0.95)$ and an epsilon parameter of 1e-5, and gradient clipping at gradient norm 1. As learning rate scheduler we use a linear warm-up with 750 steps and cosine decay to $10\\%$ of the peak learning rate. We apply a weight decay of 0.1 to all our models and always exclude the token embedding matrix from weight decay. If not specified otherwise, we do not tie the weights of the token embedding and the language model head. Except for gates we do not use biases in our models, e.g. in other linear layers. We do not apply weight decay to biases and LayerNorm weights. For parallelization, we use PyTorch FSDP in SHARD_GRAD_OP mode with mixed precision in bfloat16, where applicable. For small models we use NO_SHARD. We keep the weights in float32 and reduce the gradients across GPUs in float32. We use torch.compile to speed up models where applicable, except for Transformer models as their training curves did not match the non-compiled versions. For xLSTM[7:1], we use positions [3, 5, 7, 40, 42, 44] for sLSTM-based blocks, except for the 125M size, where we use [3, 20] (this is actually a [11:1] ratio). We do not use any positional encoding for our xLSTM models. ", "page_idx": 37}, {"type": "text", "text": "Details on Comparison to Other Methods. For the model comparison on 15B training tokens of SlimPajama we train all models with context length 2048 and batch size 256. We use a peak learning rate of 1e-3 for all models for comparability. The learning rate decays over 30k training steps. The models are compared after one epoch at training step 28170. As model implementations we use the original repositories\u2019 code for Mamba (Gu & Dao, 2023) 6, RWKV-5, RWKV-6 (Peng et al., 2024)7. For RWKV-4 we use a cleaned and validated re-implementation based on the original repo and kernels (Peng et al., 2023). In our RWKV-4 implementation we enable weight decay on all parameters except biases, the token embedding weight and all LayerNorm weights. For HGRN (Qin et al., 2023), GLA (Yang et al., 2023), HGRN2 (Qin et al., 2024) we use the a re-implementation by the authors of GLA (Yang et al., 2023; Yang & Zhang, 2024)8. For GPT-3 and Llama-like Transformers, we use our own implementations based on PyTorch. Note that for all xLSTMs, Transformers, Mamba and RWKV-4, we use Mixed Precision training with bfloat16 and weights in float32 precision. Following the general training procedure we use torch.compile for all models, except for models using the flash-linear-attention (Yang & Zhang, 2024) library because of compilation problems and Transformers as for those training curves deviated. ", "page_idx": 37}, {"type": "text", "text": "As RWKV-6 performs worse than RWKV-5, we also train a model with peak learning rate 4e-4, as reported in the original repository for 350M parameter models 9. This model reaches a perplexity of 16.38, worse than the 15.03 for the standard peak learning rate 1e-3 as reported in Table 1. ", "page_idx": 37}, {"type": "text", "text": "Details on Training Precision for Baselines. For models from flash-linear-attention and RWKV-5/6 models we found that PyTorch automatic mixed precision training did not work, but casting the model weights to float32 initially with FSDP parameter precision bfloat16 led to a working configuration. In this setting models perform better than in full bfloat16 training, where the weights are casted to bfloat16 initially as well. Full float32 did not work because of the custom kernels. ", "page_idx": 37}, {"type": "text", "text": "General Details on Ablation Studies. We follow our general training procedure and train all models with context length 2048, batch size 256 and peak learning rate 1e-3. We report perplexity values on the validation set. ", "page_idx": 37}, {"type": "text", "text": "Additional Ablation Study on Matrix Memory. As default block configuration we use the mLSTM in the pre up-projection block (see Figure 8) and the sLSTM in the post up-projection block ", "page_idx": 37}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/00ed4a86a5cb097250c02b8b2f1beaaac486d945ad924f845447e332a1b2efdc.jpg", "table_caption": ["Table 5: Peak learning rates and model dimensions for scaling law plots. "], "table_footnote": [], "page_idx": 38}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/86a19ea28ec33d031ae13c54523ca4dc460c04b2200bccc11b125366e9cb3cc4.jpg", "img_caption": [], "img_footnote": [], "page_idx": 38}, {"type": "text", "text": "Figure 15: Method comparison on next token prediction when trained on 15B tokens from SlimPajama. Performance measure in validation perplexity for the best methods of each model class (see Table 1) are reported. The performance degradation of xLSTM[7:1] at 2.7B is due to initially slower training convergence that leads to an especially undertrained model. xLSTM is the best method at all sizes. ", "page_idx": 38}, {"type": "text", "text": "Table 6: Ablation studies. Top: Ablation studies on the new xLSTM components, contributing the strong performance improvement of xLSTM over vanilla LSTM to both the exponential gating and the matrix memory. Bottom: Ablation studies on different gating techniques. We consider an xLSTM[1:0] with sigmoid forget gate and exponential input gate. Bias initialization $\\infty$ means that the forget gate is set to one, [3, 6] indicates that values are taken equidistant in the respective interval, and $\\bar{\\mathcal{N}}(0,0.1)$ that values are randomly chosen from a Gaussian with mean 0 and std 0.1. PPL denotes validation perplexity. The first two lines correspond to models similar to linearized attention, line four to Retention, line five to RWKV-5, and line six to RWKV-6. Dependencies of the gates on the input lead to better performance. ", "page_idx": 39}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/13a8fd819e1e574be4d3e18abcba55ad5262bd8dd73d14df50489b94a596c51e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 39}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/14936f026ff0990d354073cc3b3a034b13fd6e9b9ead09c93585c927cc9844dd.jpg", "table_caption": ["Ablation studies on different gating techniques. "], "table_footnote": [], "page_idx": 39}, {"type": "text", "text": "(see Figure 7). In this experiment we study the combination of mLSTM with different block variants using the xLSTM[1:0] architecture. We compare the mLSTM in a post up-projection block (see Figure 7) with $\\mathrm{{ReLU^{2}}}$ activation function and non-gated feed-forward network to mLSTM in a pre up-projection block with and without a dimension-wise causal convolution. Table 7 shows that the matrix memory benefits from the pre up-projection block structure, and that the convolution within this block is important. ", "page_idx": 39}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/cf20e818e073e70bc5ef6142427dd4b9506ffda416acd563122a30a19fc86d7c.jpg", "table_caption": ["Table 7: Matrix Memory variants. We study different configurations for the matrix memory. Matrix memory in the pre up-projection block performs best and gives xLSTM[1:0]. Notably, it seems that the dimension-wise causal convolution within the pre up-projection block is important. "], "table_footnote": [], "page_idx": 39}, {"type": "text", "text": "Details on new xLSTM Components Ablation Study. In Table 6 (top), we show our modifications to the vanilla LSTM that transform the vanilla LSTM into the xLSTM. We start with a large default PyTorch LSTM with 24 layers and 1536 hidden size. Due to a lack of skip-connections and LayerNorms, vanilla LSTMs of this size are not trainable. We then add skip-connections and pre-LayerNorms before each LSTM layer corresponding to a residual architecture. This enables training for LSTMs at this scale. Replacing every second LSTM layer by a non-gated feed-forward network with GeLU activation function (similar to Vaswani et al.), which corresponds to the post up-projection backbone (see Figure 7), further boosts performance. Adding Exponential Gating to this architecture yields the sLSTM as depicted in Figure 7, with another large performance improvement. Finally, adding the best Matrix Memory variant found in Table 7 by replacing some sLSTM blocks with the mLSTM (see Figure 8) gives xLSTM[7:1] with the best performance. ", "page_idx": 39}, {"type": "text", "text": "", "page_idx": 40}, {"type": "text", "text": "Details on Gating Technique Ablation Study. In Table 6 (bottom), we investigate the effect of trainable and input-dependent gates for mLSTM. The results show that, in contrast to other methods (Katharopoulos et al., 2020; Sun et al., 2023; Qin et al., 2023; Katsch, 2023; Yang et al., 2023; Qin et al., 2024; Peng et al., 2024), having the gates both learnable and input dependent gives the best results. ", "page_idx": 40}, {"type": "text", "text": "Details on Scaling Experiments. We follow our general training procedure (see paragraph above) and train all models, including the 1.3B and 2.7B model sizes, with context length 2048 and batch size 256. We use the peak learning rates from Table 5. For Llama and Mamba we use the learning rates reported by Gu & Dao (2023). ", "page_idx": 40}, {"type": "text", "text": "D.3 xLSTM Large Language Models \u2013 SlimPajama300B ", "text_level": 1, "page_idx": 40}, {"type": "text", "text": "General Training Procedure. We use the same general training procedure as in Section D.2 with peak learning rates from Table 5. For Llama and Mamba we use the learning rates reported by Gu & Dao (2023). All models are trained with context length 2048. The 125M, 350M and 760M models are trained with batch size 256 for $600\\mathrm{k}$ training steps, whereas the 1.3B models are trained with batch size 512 for 300k training steps. We keep the same learning rate scheduler across all models. ", "page_idx": 40}, {"type": "text", "text": "Additional Scaling Law Plots with Number of FLOPs. In Figure 16 we plot the scaling behavior of our xLSTM variants over the number of training flops and compare to the Llama baseline. We compute the FLOPs for the recurrent (see Section 2) and the parallel (see Section B.3) formulation of the mLSTM. We can see that for the larger models (760M and 1.3B) the recurrent xLSTM FLOP counts are larger than the Llama FLOP counts. The reason for this is that we kept the number of heads constant when increasing the model size (see Table 5) while increasing the head dimension. In contrast Llama increases the number of heads while keeping the head dimension constant. ", "page_idx": 40}, {"type": "image", "img_path": "ARAxPPIAhq/tmp/02bfa45cc7ceb6af62796e0fc7302a073fa5bdee58803d300cc5907e2cbf78c8.jpg", "img_caption": ["Figure 16: Scaling laws over number of training FLOPs. We compare the Llama baseline with our xLSTM variants and compute the number of training FLOPs for the recurrent and parallel mode for 300B tokens with context length 2048. "], "img_footnote": [], "page_idx": 40}, {"type": "text", "text": "Details on FLOP computation. For computing the number of FLOPs we follow the procedure from Hoffmann et al. (2022). We include all training FLOPs, including those contributed by the embedding matrices. We assume that the backward pass has twice the number of FLOPs of the forward pass. For the forward pass, the number of FLOPs of the mLSTM and sLSTM for a single sequence can be approximated by: ", "page_idx": 41}, {"type": "text", "text": "$\\bullet\\ \\mathrm{mLSTM}\\ (\\mathrm{recurrent}):\\ \\mathrm{num\\_heads}\\times\\mathrm{seq\\_len}\\times(6\\times\\mathrm{head\\_dim}\\times\\mathrm{head\\_dim}+8\\times\\mathrm{head\\_dim})$ \u2022 mLSTM (parallel): num_head ${\\mathrm{5\\times\\seq\\_len\\times\\seq\\_len\\times(4\\times\\mathrm{head\\_dim+8)}}}$ \u2022 sLST $\\mathrm{M\\colonnum\\_heads\\timesseq\\_len\\timeshead\\_dim\\times(8\\timeshead\\_dim+12)}$ ", "page_idx": 41}, {"type": "text", "text": "Details on Downstream Evaluation. We use the LM Evaluation Harness from EleutherAI (Sutawika et al., 2023) for evaluating the following tasks that measure common sense reasoning: LAMBADA (OpenAI version in LM Evaluation Harness) (Paperno et al., 2016), HellaSwag (Zellers et al., 2019), PIQA (Bisk et al., 2020), ARC-challenge, ARC-easy (Clark et al., 2018), WinoGrande (Sakaguchi et al., 2021). This selection of downstream tasks is also used in previous work by Gu & Dao (2023). ", "page_idx": 41}, {"type": "text", "text": "Following Gu & Dao (2023), we report accuracy for LAMADA, WinoGrande, PIQA, and ARC-easy, and accuracy normalized by sequence length for HellaSwag and ARC-challenge. ", "page_idx": 41}, {"type": "text", "text": "We evaluate all models in full float32, full bfloat16 and bfloat16 Mixed Precision with weights in float32. For each model we select the best value respectively. ", "page_idx": 41}, {"type": "text", "text": "Details on PALOMA. We use 16 out of the 18 data sources of the PALOMA dataset (Magnusson et al., 2023). We use C4 (Raffel et al., 2019), MC4-EN (Xue et al., 2021), Wikitext-103 (Merity et al., 2017), PennTreebank (Vadas & Curran, 2011), RedPajama (TogetherComputer, 2023), Falcon Refinedweb (Refined Web) (Penedo et al., 2023), Dolma v1.5 (Soldaini et al., 2023), M2D2 S2ORC, M2D2 Wikipedia (Reid et al., 2022), C4-100-Domains (C4 Domains) (Chronopoulou et al., 2022), Dolma-100-Subreddits (Dolma Subreddits) (Soldaini et al., 2023), Dolma-100-Programming Languages (Dolma Coding) (Soldaini et al., 2023; Kocetkov et al., 2022), TwitterAAE (Blodgett et al., 2016; Liang et al., 2023), Manosphere Corpus (Ribeiro et al., 2021), GAB Corpus (Zannettou et al., 2018), 4CHAN Corpus (Papasavva et al., 2020). We leave out ThePile (Gao et al., 2021) and ICE (Greenbaum & Nelson, 1996) as they are not part of Paloma\u2019s Huggingface dataset repository10. A detailed description of these datasets can be found in Magnusson et al. (2023, Table 2). All models are evaluated in bfloat16 Mixed Precision. Results are shown in Table 8. ", "page_idx": 41}, {"type": "text", "text": "Results on the data sources TwitterAAE, Manosphere, GAB and 4CHAN are reported in Table 9 and for each individual dataset the results are given in Section E. ", "page_idx": 41}, {"type": "text", "text": "In order to evaluate the perplexity values on each data source, we split the text documents into sequences of length 2048, which corresponds to the pre-training context length of all models. For documents longer than 2048 tokens we split each document into non-overlapping input sequences. In this case for the last input sequence, we follow the LM Evaluation Harness and fill up the full 2048 token context window with previous tokens, but compute the perplexity only on the remaining tokens. ", "page_idx": 41}, {"type": "text", "text": "We compute the token perplexities per data source in Table 8 as the exponential of the negative log-likelihoods per domain weighted by the number of tokens per domain in that data source as it is defined in Magnusson et al. (2023, Equation 1) ", "page_idx": 41}, {"type": "text", "text": "Table 8: Performance on PALOMA Language Modeling Tasks. Comparison of xLSTM, RWKV-4, Llama, and Mamba by the perplexity of next token prediction on the PALOMA language benchmark after training on 300B tokens from SlimPajama. Model sizes are 125M, 250M, 760M, and 1.3B. The second column shows the actual number of parameters. The 571 text domains are grouped into language modeling (next seven columns) and fine-grained domain benchmarks (further 5 columns). The last column shows the average perplexity across all of these tasks. Best model per model size is given in bold and the second best is underlined. xLSTM yields the best performance. ", "page_idx": 42}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/95c6cfa85c8cb851dc5e0e43d7f0346d6d0aa3ecb7e1acb83ec312498c988cef.jpg", "table_caption": [], "table_footnote": [], "page_idx": 42}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/97fc8256b073240d8a1896c44b56a2fa3afc85eab64335bfa681050d101f3b8a.jpg", "table_caption": ["Table 9: Perplexity values per domain. "], "table_footnote": [], "page_idx": 42}, {"type": "text", "text": "E Detailed Results on PALOMA Language Model Evaluation ", "text_level": 1, "page_idx": 43}, {"type": "text", "text": "We report the perplexity values on each of the 571 subdomains of PALOMA in Table 10. Note that the aggregated perplexity values in Table 8 are not macro averages of the values shown in Table 10. ", "page_idx": 43}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/89ece05500643d8dafc6d376bbc999f0b5f4dce6ebe23df7d78778dd06a7c133.jpg", "table_caption": ["Table 10: PPL Evaluations: For the 1.3B sized models trained on 300B SlimPajama tokens, these are the detailed evaluation results on the respective validation datasets. "], "table_footnote": [], "page_idx": 43}, {"type": "text", "text": "Dataset c4_100dom_val_47_www.tripadvisor.com c4_100dom_val_48_www.bbc.co.uk c4_100dom_val_49_lists.w3.org c4_100dom_val_4_www.latimes.com c4_100dom_val_50_mashable.com c4_100dom_val_51_disneyparksmomspanel.disn c4_100dom_val_52_www.cnbc.com c4_100dom_val_53_answers.sap.com c4_100dom_val_54_homestars.com c4_100dom_val_55_www.hindustantimes.com c4_100dom_val_56_www.reference.com c4_100dom_val_57_www.city-data.com c4_100dom_val_58_medium.com c4_100dom_val_59_app-wiringdiagram... c4_100dom_val_5_www.theguardian.com c4_100dom_val_60_www.csmonitor.com c4_100dom_val_61_www.adweek.com c4_100dom_val_62_docs.microsoft.com c4_100dom_val_63_www.yahoo.com c4_100dom_val_64_www.thesun.co.uk c4_100dom_val_65_www.nydailynews.com c4_100dom_val_66_www.dailystar.co.uk c4_100dom_val_67_fineartamerica.com c4_100dom_val_68_www.kickstarter.com c4_100dom_val_69_uk.reuters.com c4_100dom_val_6_www.huffpost.com c4_100dom_val_70_www.insiderpages.com c4_100dom_val_71_www.inquisitr.com c4_100dom_val_72_lists.debian.org c4_100dom_val_73_www.straitstimes.com c4_100dom_val_74_www.cbsnews.com c4_100dom_val_75_simple.wikipedia.org c4_100dom_val_76_deadline.com c4_100dom_val_77_www.androidheadlines.com c4_100dom_val_78_www.wired.com c4_100dom_val_79_www.bustle.com c4_100dom_val_7_patents.google.com c4_100dom_val_80_premium.wpmudev.org c4_100dom_val_81_www.librarything.com c4_100dom_val_82_mail-archives.apache.org c4_100dom_val_83_scholars.duke.edu c4_100dom_val_84_www.glassdoor.com c4_100dom_val_85_www.pcworld.com c4_100dom_val_86_www.shutterstock.com c4_100dom_val_87_myemail.constantcontact.co c4_100dom_val_88_www.eventbrite.co.uk c4_100dom_val_89_www.fastcompany.com c4_100dom_val_8_www.businessinsider.com c4_100dom_val_90_www.firstpost.com c4_100dom_val_91_www.entrepreneur.com c4_100dom_val_92_www.breitbart.com c4_100dom_val_93_techcrunch.com ", "page_idx": 44}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/be1eda94137832942a37883bc5323c388cafadb12a2638f64c4f92c4771d6b5b.jpg", "table_caption": [], "table_footnote": [], "page_idx": 44}, {"type": "text", "text": "Dataset   \nc4_100dom_val_94_www.nme.com   \nc4_100dom_val_95_www.ndtv.com   \nc4_100dom_val_96_finance.yahoo.com   \nc4_100dom_val_97_archives.lib.state.ma.us   \nc4_100dom_val_98_www.gsmarena.com   \nc4_100dom_val_99_www.lonelyplanet.com   \nc4_100dom_val_9_www.forbes.com   \nc4_en_val-00000000   \nc4_en_val-00000001   \nc4_en_val-00000002   \nc4_en_val-00000003   \nc4_en_val-00000004   \nc4_en_val-00000005   \ndolma-v1_5_val_books   \ndolma-v1_5_val_common-crawl   \ndolma-v1_5_val_pes2o   \ndolma-v1_5_val_reddit_uniform   \ndolma-v1_5_val_stack_uniform   \ndolma-v1_5_val_wiki   \ndolma_100_proglang_val_00_text   \ndolma_100_proglang_val_01_markdown   \ndolma_100_proglang_val_02_c   \ndolma_100_proglang_val_03_php   \ndolma_100_proglang_val_04_java   \ndolma_100_proglang_val_05_c++   \ndolma_100_proglang_val_06_python   \ndolma_100_proglang_val_07_javascript   \ndolma_100_proglang_val_08_html   \ndolma_100_proglang_val_09_c#   \ndolma_100_proglang_val_10_yaml   \ndolma_100_proglang_val_11_go   \ndolma_100_proglang_val_12_typescript   \ndolma_100_proglang_val_13_xml   \ndolma_100_proglang_val_14_css   \ndolma_100_proglang_val_15_jupyter-nb   \ndolma_100_proglang_val_16_rust   \ndolma_100_proglang_val_17_unity3d-asset   \ndolma_100_proglang_val_18_gettext-catalog   \ndolma_100_proglang_val_19_ruby   \ndolma_100_proglang_val_20_vue   \ndolma_100_proglang_val_21_sql   \ndolma_100_proglang_val_22_swift   \ndolma_100_proglang_val_23_kotlin   \ndolma_100_proglang_val_24_scala   \ndolma_100_proglang_val_25_scss   \ndolma_100_proglang_val_26_tex   \ndolma_100_proglang_val_27_dart   \ndolma_100_proglang_val_28_kicad   \ndolma_100_proglang_val_29_shell   \ndolma_100_proglang_val_30_smali   \ndolma_100_proglang_val_31_lua   \ndolma_100_proglang_val_32_restructuredtext ", "page_idx": 45}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/a01b8fd8f0e8b4f150363aa14887b9936a719e0ee339b5d0a715ce0237dd58cc.jpg", "table_caption": [], "table_footnote": [], "page_idx": 45}, {"type": "text", "text": "Dataset dolma_100_proglang_val_33_perl dolma_100_proglang_val_34_diff dolma_100_proglang_val_35_ini dolma_100_proglang_val_36_jsx dolma_100_proglang_val_37_haskell dolma_100_proglang_val_38_gnuplot dolma_100_proglang_val_39_postscript dolma_100_proglang_val_40_groff dolma_100_proglang_val_41_turtle dolma_100_proglang_val_42_fortran dolma_100_proglang_val_43_makefile dolma_100_proglang_val_44_mathematica dolma_100_proglang_val_45_pascal dolma_100_proglang_val_46_common-lisp dolma_100_proglang_val_47_gas dolma_100_proglang_val_48_vhdl dolma_100_proglang_val_49_julia dolma_100_proglang_val_50_edn dolma_100_proglang_val_51_visual-basic dolma_100_proglang_val_52_powershell dolma_100_proglang_val_53_g-code dolma_100_proglang_val_54_ocaml dolma_100_proglang_val_55_java-server-p dolma_100_proglang_val_56_solidity dolma_100_proglang_val_57_graphviz-dot dolma_100_proglang_val_58_less dolma_100_proglang_val_59_twig dolma_100_proglang_val_60_asciidoc dolma_100_proglang_val_61_groovy dolma_100_proglang_val_62_llvm dolma_100_proglang_val_63_hcl dolma_100_proglang_val_64_html+erb dolma_100_proglang_val_65_erlang dolma_100_proglang_val_66_elixir dolma_100_proglang_val_67_eagle dolma_100_proglang_val_68_arduino dolma_100_proglang_val_69_coffeescript dolma_100_proglang_val_70_toml dolma_100_proglang_val_71_cuda dolma_100_proglang_val_72_nix dolma_100_proglang_val_73_smalltalk dolma_100_proglang_val_74_cmake dolma_100_proglang_val_75_actionscript dolma_100_proglang_val_76_glsl dolma_100_proglang_val_77_systemverilog dolma_100_proglang_val_78_haxe dolma_100_proglang_val_79_f# dolma_100_proglang_val_80_max dolma_100_proglang_val_81_objective- $^{\\mathrm{c}++}$ dolma_100_proglang_val_82_standard-ml dolma_100_proglang_val_83_dockerfile dolma_100_proglang_val_84_emacs-lisp ", "page_idx": 46}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/b1379ebb77d05428695394c38d705f934d5e6ff8983576a162c389cc5f9049e4.jpg", "table_caption": [], "table_footnote": [], "page_idx": 46}, {"type": "text", "text": "Dataset dolma_100_proglang_val_85_scheme dolma_100_proglang_val_86_clojure dolma_100_proglang_val_87_handlebars dolma_100_proglang_val_88_smarty dolma_100_proglang_val_89_logos dolma_100_proglang_val_90_stata dolma_100_proglang_val_91_yacc dolma_100_proglang_val_92_nimrod dolma_100_proglang_val_93_tcl dolma_100_proglang_val_94_viml dolma_100_proglang_val_95_asp dolma_100_proglang_val_96_protocol-buffer dolma_100_proglang_val_97_r dolma_100_proglang_val_98_cython dolma_100_proglang_val_99_mediawiki dolma_100_subreddits_val_00_AskReddit dolma_100_subreddits_val_01_politics dolma_100_subreddits_val_02_AmItheAsshole dolma_100_subreddits_val_03_worldnews dolma_100_subreddits_val_04_relationships dolma_100_subreddits_val_05_relationship_advi dolma_100_subreddits_val_06_news dolma_100_subreddits_val_07_leagueoflegends dolma_100_subreddits_val_08_todayilearned dolma_100_subreddits_val_09_TwoXChromoso dolma_100_subreddits_val_10_personalfinance dolma_100_subreddits_val_11_changemyview dolma_100_subreddits_val_12_unpopularopinion dolma_100_subreddits_val_13_movies dolma_100_subreddits_val_14_Games dolma_100_subreddits_val_15_nba dolma_100_subreddits_val_16_pics dolma_100_subreddits_val_17_gaming dolma_100_subreddits_val_18_soccer dolma_100_subreddits_val_19_nfl dolma_100_subreddits_val_20_explainlikeimfive dolma_100_subreddits_val_21_conspiracy dolma_100_subreddits_val_22_atheism dolma_100_subreddits_val_23_AskMen dolma_100_subreddits_val_24_videos dolma_100_subreddits_val_25_sex dolma_100_subreddits_val_26_raisedbynarcissis dolma_100_subreddits_val_27_NoStupidQuestio dolma_100_subreddits_val_28_DestinyTheGam dolma_100_subreddits_val_29_anime dolma_100_subreddits_val_30_DnD dolma_100_subreddits_val_31_ukpolitics dolma_100_subreddits_val_32_funny dolma_100_subreddits_val_33_europe dolma_100_subreddits_val_34_canada dolma_100_subreddits_val_35_Christianity dolma_100_subreddits_val_36_SquaredCircle ", "page_idx": 47}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/6649531565e8e1aafb4e243fed3607fea7b905d44152bf665178f97aab90bd7e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 47}, {"type": "text", "text": "Dataset dolma_100_subreddits_val_37_AskWomen dolma_100_subreddits_val_38_legaladvice dolma_100_subreddits_val_39_JUSTNOMIL dolma_100_subreddits_val_40_technology dolma_100_subreddits_val_41_IAmA dolma_100_subreddits_val_42_wow dolma_100_subreddits_val_43_Parenting dolma_100_subreddits_val_44_exmormon dolma_100_subreddits_val_45_AdviceAnimals dolma_100_subreddits_val_46_childfree dolma_100_subreddits_val_47_unitedkingdom dolma_100_subreddits_val_48_ffxiv dolma_100_subreddits_val_49_dndnext dolma_100_subreddits_val_50_ADHD dolma_100_subreddits_val_51_loseit dolma_100_subreddits_val_52_asoiaf dolma_100_subreddits_val_53_BabyBumps dolma_100_subreddits_val_54_Advice dolma_100_subreddits_val_55_australia dolma_100_subreddits_val_56_CFB dolma_100_subreddits_val_57_offmychest dolma_100_subreddits_val_58_PublicFreakout dolma_100_subreddits_val_59_TrueOffMyChest dolma_100_subreddits_val_60_science dolma_100_subreddits_val_61_magicTCG dolma_100_subreddits_val_62_asktransgender dolma_100_subreddits_val_63_DotA2 dolma_100_subreddits_val_64_neoliberal dolma_100_subreddits_val_65_whowouldwin dolma_100_subreddits_val_66_depression dolma_100_subreddits_val_67_WTF dolma_100_subreddits_val_68_pathofexile dolma_100_subreddits_val_69_PoliticalDiscussi dolma_100_subreddits_val_70_Libertarian dolma_100_subreddits_val_71_PurplePillDebate dolma_100_subreddits_val_72_Fitness dolma_100_subreddits_val_73_books dolma_100_subreddits_val_74_dogs dolma_100_subreddits_val_75_pcmasterrace dolma_100_subreddits_val_76_teenagers dolma_100_subreddits_val_77_stopdrinking dolma_100_subreddits_val_78_Overwatch dolma_100_subreddits_val_79_television dolma_100_subreddits_val_80_buildapc dolma_100_subreddits_val_81_askscience dolma_100_subreddits_val_82_programming dolma_100_subreddits_val_83_Guildwars2 dolma_100_subreddits_val_84_cars dolma_100_subreddits_val_85_formula1 dolma_100_subreddits_val_86_sysadmin dolma_100_subreddits_val_87_hockey dolma_100_subreddits_val_88_india ", "page_idx": 48}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/5dc0bcf6eaac504dfbdb72198522a8047387b628a50cf317b222f509ac0bf10b.jpg", "table_caption": [], "table_footnote": [], "page_idx": 48}, {"type": "text", "text": "Dataset   \ndolma_100_subreddits_val_89_SubredditDrama   \ndolma_100_subreddits_val_90_DMAcademy   \ndolma_100_subreddits_val_91_dating_advice   \ndolma_100_subreddits_val_92_Catholicism   \ndolma_100_subreddits_val_93_Drugs   \ndolma_100_subreddits_val_94_trees   \ndolma_100_subreddits_val_95_boardgames   \ndolma_100_subreddits_val_96_Conservative   \ndolma_100_subreddits_val_97_Futurology   \ndolma_100_subreddits_val_98_beyondthebump   \ndolma_100_subreddits_val_99_weddingplanning   \nfalcon-refinedweb_val-00000000   \nfalcon-refinedweb_val-00000001   \nfalcon-refinedweb_val-00000002   \nfalcon-refinedweb_val-00000003   \nfalcon-refinedweb_val-00000004   \nfalcon-refinedweb_val-00000005   \ngab_val-00000000   \ngab_val-00000001   \ngab_val-00000002   \ngab_val-00000003   \ngab_val-00000004   \ngab_val-00000005   \ngab_val-00000006   \ngab_val-00000007   \ngab_val-00000008   \ngab_val-00000009   \nm2d2_s2orc_unsplit_val_Art   \nm2d2_s2orc_unsplit_val_Philosophy   \nm2d2_s2orc_unsplit_val_astro-ph   \nm2d2_s2orc_unsplit_val_astro-ph.CO   \nm2d2_s2orc_unsplit_val_astro-ph.EP   \nm2d2_s2orc_unsplit_val_astro-ph.GA   \nm2d2_s2orc_unsplit_val_astro-ph.HE   \nm2d2_s2orc_unsplit_val_astro-ph.IM   \nm2d2_s2orc_unsplit_val_astro-ph.SR   \nm2d2_s2orc_unsplit_val_astro-ph_l1   \nm2d2_s2orc_unsplit_val_atom-ph   \nm2d2_s2orc_unsplit_val_chem-ph   \nm2d2_s2orc_unsplit_val_cond-mat   \nm2d2_s2orc_unsplit_val_cond-mat.dis-nn   \nm2d2_s2orc_unsplit_val_cond-mat.mes-hall   \nm2d2_s2orc_unsplit_val_cond-mat.mtrl-sci   \nm2d2_s2orc_unsplit_val_cond-mat.other   \nm2d2_s2orc_unsplit_val_cond-mat.quant-gas   \nm2d2_s2orc_unsplit_val_cond-mat.soft   \nm2d2_s2orc_unsplit_val_cond-mat.stat-mech   \nm2d2_s2orc_unsplit_val_cond-mat.str-el   \nm2d2_s2orc_unsplit_val_cond-mat.supr-con   \nm2d2_s2orc_unsplit_val_cond-mat_l1   \nm2d2_s2orc_unsplit_val_cs.AI   \nm2d2_s2orc_unsplit_val_cs.AR ", "page_idx": 49}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/2cbf1ab6ef64ee459221fdb718df255688488602e1eade6c0eda4b517327cf90.jpg", "table_caption": [], "table_footnote": [], "page_idx": 49}, {"type": "text", "text": "Dataset m2d2_s2orc_unsplit_val_cs.CC m2d2_s2orc_unsplit_val_cs.CE m2d2_s2orc_unsplit_val_cs.CG m2d2_s2orc_unsplit_val_cs.CL m2d2_s2orc_unsplit_val_cs.CR m2d2_s2orc_unsplit_val_cs.CV m2d2_s2orc_unsplit_val_cs.CY m2d2_s2orc_unsplit_val_cs.DB m2d2_s2orc_unsplit_val_cs.DC m2d2_s2orc_unsplit_val_cs.DL m2d2_s2orc_unsplit_val_cs.DM m2d2_s2orc_unsplit_val_cs.DS m2d2_s2orc_unsplit_val_cs.ET m2d2_s2orc_unsplit_val_cs.FL m2d2_s2orc_unsplit_val_cs.GL m2d2_s2orc_unsplit_val_cs.GR m2d2_s2orc_unsplit_val_cs.GT m2d2_s2orc_unsplit_val_cs.HC m2d2_s2orc_unsplit_val_cs.IR m2d2_s2orc_unsplit_val_cs.LG m2d2_s2orc_unsplit_val_cs.LO m2d2_s2orc_unsplit_val_cs.MA m2d2_s2orc_unsplit_val_cs.MM m2d2_s2orc_unsplit_val_cs.MS m2d2_s2orc_unsplit_val_cs.NA m2d2_s2orc_unsplit_val_cs.NE m2d2_s2orc_unsplit_val_cs.NI m2d2_s2orc_unsplit_val_cs.OH m2d2_s2orc_unsplit_val_cs.OS m2d2_s2orc_unsplit_val_cs.PF m2d2_s2orc_unsplit_val_cs.PL m2d2_s2orc_unsplit_val_cs.RO m2d2_s2orc_unsplit_val_cs.SC m2d2_s2orc_unsplit_val_cs.SD m2d2_s2orc_unsplit_val_cs.SE m2d2_s2orc_unsplit_val_cs.SI m2d2_s2orc_unsplit_val_cs.SY m2d2_s2orc_unsplit_val_cs_l1 m2d2_s2orc_unsplit_val_econ.EM m2d2_s2orc_unsplit_val_econ.TH m2d2_s2orc_unsplit_val_econ_l1 m2d2_s2orc_unsplit_val_eess.AS m2d2_s2orc_unsplit_val_eess.IV m2d2_s2orc_unsplit_val_eess.SP m2d2_s2orc_unsplit_val_eess_l1 m2d2_s2orc_unsplit_val_gr-qc m2d2_s2orc_unsplit_val_hep-ex m2d2_s2orc_unsplit_val_hep-lat m2d2_s2orc_unsplit_val_hep-ph m2d2_s2orc_unsplit_val_hep-th m2d2_s2orc_unsplit_val_math.AC m2d2_s2orc_unsplit_val_math.AG ", "page_idx": 50}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/718b6f1ecbf3806102f0f147b9e630b5f3eca523ec358f7313f3ef5525bdb360.jpg", "table_caption": [], "table_footnote": [], "page_idx": 50}, {"type": "text", "text": "Dataset m2d2_s2orc_unsplit_val_math.AP m2d2_s2orc_unsplit_val_math.AT m2d2_s2orc_unsplit_val_math.CA m2d2_s2orc_unsplit_val_math.CO m2d2_s2orc_unsplit_val_math.CT m2d2_s2orc_unsplit_val_math.CV m2d2_s2orc_unsplit_val_math.DG m2d2_s2orc_unsplit_val_math.DS m2d2_s2orc_unsplit_val_math.FA m2d2_s2orc_unsplit_val_math.GM m2d2_s2orc_unsplit_val_math.GN m2d2_s2orc_unsplit_val_math.GR m2d2_s2orc_unsplit_val_math.GT m2d2_s2orc_unsplit_val_math.HO m2d2_s2orc_unsplit_val_math.KT m2d2_s2orc_unsplit_val_math.LO m2d2_s2orc_unsplit_val_math.MG m2d2_s2orc_unsplit_val_math.NA m2d2_s2orc_unsplit_val_math.NT m2d2_s2orc_unsplit_val_math.OA m2d2_s2orc_unsplit_val_math.OC m2d2_s2orc_unsplit_val_math.PR m2d2_s2orc_unsplit_val_math.QA m2d2_s2orc_unsplit_val_math.RA m2d2_s2orc_unsplit_val_math.RT m2d2_s2orc_unsplit_val_math.SG m2d2_s2orc_unsplit_val_math.SP m2d2_s2orc_unsplit_val_math_l1 m2d2_s2orc_unsplit_val_nlin.AO m2d2_s2orc_unsplit_val_nlin.CD m2d2_s2orc_unsplit_val_nlin.CG m2d2_s2orc_unsplit_val_nlin.PS m2d2_s2orc_unsplit_val_nlin.SI m2d2_s2orc_unsplit_val_nlin_l1 m2d2_s2orc_unsplit_val_nucl-ex m2d2_s2orc_unsplit_val_nucl-th m2d2_s2orc_unsplit_val_physics.acc-ph m2d2_s2orc_unsplit_val_physics.ao-ph m2d2_s2orc_unsplit_val_physics.app-ph m2d2_s2orc_unsplit_val_physics.atm-clus m2d2_s2orc_unsplit_val_physics.atom-ph m2d2_s2orc_unsplit_val_physics.bio-ph m2d2_s2orc_unsplit_val_physics.chem-ph m2d2_s2orc_unsplit_val_physics.class-ph m2d2_s2orc_unsplit_val_physics.comp-ph m2d2_s2orc_unsplit_val_physics.data-an m2d2_s2orc_unsplit_val_physics.ed-ph m2d2_s2orc_unsplit_val_physics.flu-dyn m2d2_s2orc_unsplit_val_physics.gen-ph m2d2_s2orc_unsplit_val_physics.geo-ph m2d2_s2orc_unsplit_val_physics.hist-ph m2d2_s2orc_unsplit_val_physics.ins-det ", "page_idx": 51}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/aec861c7184476c83fc4babcf750d2249b595f2bc883bb7bc82f16951733c843.jpg", "table_caption": [], "table_footnote": [], "page_idx": 51}, {"type": "text", "text": "Dataset m2d2_s2orc_unsplit_val_physics.med-ph m2d2_s2orc_unsplit_val_physics.optics m2d2_s2orc_unsplit_val_physics.plasm-ph m2d2_s2orc_unsplit_val_physics.pop-ph m2d2_s2orc_unsplit_val_physics.soc-ph m2d2_s2orc_unsplit_val_physics.space-ph m2d2_s2orc_unsplit_val_physics_l1 m2d2_s2orc_unsplit_val_plasm-ph m2d2_s2orc_unsplit_val_q-bio m2d2_s2orc_unsplit_val_q-bio.BM m2d2_s2orc_unsplit_val_q-bio.CB m2d2_s2orc_unsplit_val_q-bio.GN m2d2_s2orc_unsplit_val_q-bio.MN m2d2_s2orc_unsplit_val_q-bio.NC m2d2_s2orc_unsplit_val_q-bio.OT m2d2_s2orc_unsplit_val_q-bio.PE m2d2_s2orc_unsplit_val_q-bio.QM m2d2_s2orc_unsplit_val_q-bio.SC m2d2_s2orc_unsplit_val_q-bio.TO m2d2_s2orc_unsplit_val_q-bio_l1 m2d2_s2orc_unsplit_val_q-fin.CP m2d2_s2orc_unsplit_val_q-fin.EC m2d2_s2orc_unsplit_val_q-fin.GN m2d2_s2orc_unsplit_val_q-fin.MF m2d2_s2orc_unsplit_val_q-fin.PM m2d2_s2orc_unsplit_val_q-fin.PR m2d2_s2orc_unsplit_val_q-fin.RM m2d2_s2orc_unsplit_val_q-fin.ST m2d2_s2orc_unsplit_val_q-fin.TR m2d2_s2orc_unsplit_val_q-fin_l1 m2d2_s2orc_unsplit_val_quant-ph m2d2_s2orc_unsplit_val_stat.AP m2d2_s2orc_unsplit_val_stat.CO m2d2_s2orc_unsplit_val_stat.ME m2d2_s2orc_unsplit_val_stat.ML m2d2_s2orc_unsplit_val_stat.OT m2d2_s2orc_unsplit_val_stat_l1 m2d2_s2orc_unsplit_val_supr-con m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_Culture_and_the_a m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_Culture_and_the_ m2d2_wikipedia_unsplit_val_General_referece m2d2_wikipedia_unsplit_val_General_referece_ m2d2_wikipedia_unsplit_val_General_referece_ m2d2_wikipedia_unsplit_val_Health_and_ftiness m2d2_wikipedia_unsplit_val_Health_and_ftiness m2d2_wikipedia_unsplit_val_Health_and_ftiness ", "page_idx": 52}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/e9e6067609b4528fcb361d42560b6fb156e97c414caabd9d6df816749ceae62c.jpg", "table_caption": [], "table_footnote": [], "page_idx": 52}, {"type": "text", "text": "Dataset Llama Mamba RWKV-4 xLSTM[7:1] xLSTM[1:0]   \nm2d2_wikipedia_unsplit_val_Health_and_ftines H9u.1m4a ci8n.e83 9.59 8.63 8.54   \nm2d2_wikipedia_unsplit_val_Health_and_ftines N8u.t9r1it 8.68 9.40 8.61 8.47   \nm2d2_wikipedia_unsplit_val_Health_and_ftiness P1u0.b7li5c 10.47 11.14 10.37 10.30   \nm2d2_wikipedia_unsplit_val_Health_and_ftines S1e2l.f9_1c 12.49 13.61 12.42 12.28   \nm2d2_wikipedia_unsplit_val_History_and_event 13.65 13.29 14.48 13.20 13.00   \nm2d2_wikipedia_unsplit_val_History_and_event _1B1y.7_c7o t11.44 12.36 11.36 11.26   \nm2d2_wikipedia_unsplit_val_History_and_event _1B2y.7_8pe 12.41 13.46 12.37 12.12   \nm2d2_wikipedia_unsplit_val_History_and_event _1B2y.3_r6e 11.88 12.87 11.79 11.64   \nm2d2_wikipedia_unsplit_val_Human_activites 12.43 12.03 12.98 11.95 11.81   \nm2d2_wikipedia_unsplit_val_Human_activites_ u1m2.a4n3_ e1s2.03 12.98 11.95 11.81   \nm2d2_wikipedia_unsplit_val_Human_activites_ 1p2a.c4t_7o a1n2_.a0c5t 13.12 12.00 11.82   \nm2d2_wikipedia_unsplit_val_Mathematics_and_ gi1c2.90 12.51 13.79 12.48 12.29   \nm2d2_wikipedia_unsplit_val_Mathematics_and_ i8c._2_4F f_8.m2a6th s9.37 8.28 8.06   \nm2d2_wikipedia_unsplit_val_Mathematics_and_ gi1c3_.2_1L 12.87 13.90 12.85 12.67   \nm2d2_wikipedia_unsplit_val_Mathematics_and_ i1c2_.9_0M at1i2c.s51 13.79 12.48 12.29   \nm2d2_wikipedia_unsplit_val_Natural_and_physi _9s.c1i9en 8.22 8.81 7.97 7.96   \nm2d2_wikipedia_unsplit_val_Natural_and_physi l_1s0c.i9e7n i1o0l.o7g0y 11.53 10.64 10.51   \nm2d2_wikipedia_unsplit_val_Natural_and_physi l_1s1c.i6e9n a1r1t.h3_6s 12.28 11.22 11.05   \nm2d2_wikipedia_unsplit_val_Natural_and_physi l_1s0c.i4e3n a1t0u.r1e1 10.95 10.00 9.82   \nm2d2_wikipedia_unsplit_val_Natural_and_physi l_1s1c.i4e8n h1y1s.i0c9al c1e1s.93 10.98 10.90   \nm2d2_wikipedia_unsplit_val_Philosophy_and_th k1in1.g83 11.72 13.04 11.60 11.45   \nm2d2_wikipedia_unsplit_val_Philosophy_and_th k1in2.g0_0_ p1h1.y61 12.66 11.57 11.43   \nm2d2_wikipedia_unsplit_val_Philosophy_and_t k1in0.g9_4_ n1g0.61 11.34 10.56 10.42   \nm2d2_wikipedia_unsplit_val_Religion_and_beli s1y2s.t8e1m 12.45 13.44 12.38 12.19   \nm2d2_wikipedia_unsplit_val_Religion_and_beli s1y1s.t1e1m a1h0.80 11.66 10.71 10.58   \nm2d2_wikipedia_unsplit_val_Religion_and_beli s1y1s.t4e6m li1e1f._0s6ys 11.86 10.95 10.85   \nm2d2_wikipedia_unsplit_val_Religion_and_beli s1y2s.t3e8m j1o2r._0b3el _1t2h.e9_4 11.91 11.79   \nm2d2_wikipedia_unsplit_val_Society_and_social c1i0e.n5c3es 10.24 11.03 10.16 10.05   \nm2d2_wikipedia_unsplit_val_Society_and_social c1i0e.n4c7es i1al0_.s1c6i 10.95 10.14 10.04   \nm2d2_wikipedia_unsplit_val_Society_and_social c1i2e.n4c8es i1et2y.13 13.02 12.07 11.93   \nm2d2_wikipedia_unsplit_val_Technology_and_a li8e.d5_1s 8.18 8.66 7.93 7.88   \nm2d2_wikipedia_unsplit_val_Technology_and_a li1e2d.4_s5c _1_2A.0gr7i 13.00 12.03 11.88   \nm2d2_wikipedia_unsplit_val_Technology_and_a li1e3d.6_s2c _1_3C.2o3m 14.56 13.18 12.97   \nm2d2_wikipedia_unsplit_val_Technology_and_a li1e3d.0_s0c _1_2E.n7g2i 13.87 12.64 12.43   \nm2d2_wikipedia_unsplit_val_Technology_and_a li1e4d.3_s4c _1_3T.r9a0n 15.20 13.94 13.73   \nmanosphere_meta_sep_val_avfm 19.42 19.27 21.88 19.64 19.18   \nmanosphere_meta_sep_val_incels 11.26 12.18 21.40 11.51 11.29   \nmanosphere_meta_sep_val_mgtow 24.83 24.27 27.50 24.12 23.80   \nmanosphere_meta_sep_val_pua_forum 24.22 23.85 26.52 23.86 23.52   \nmanosphere_meta_sep_val_red_pill_talk 34.59 33.90 37.26 33.90 33.27   \nmanosphere_meta_sep_val_reddit 20.63 19.78 21.10 19.94 19.58   \nmanosphere_meta_sep_val_rooshv 22.46 22.17 24.78 22.01 21.69   \nmanosphere_meta_sep_val_the_attraction 20.85 20.57 23.17 20.57 20.20   \nmc4_val-00000000 8.35 8.41 10.02 8.23 8.15   \nmc4_val-00000001 12.17 11.97 13.58 11.74 11.64   \nmc4_val-00000002 9.96 10.06 11.96 9.86 9.67   \nmc4_val-00000003 11.38 11.29 12.77 11.12 11.00   \nmc4_val-00000004 11.96 11.64 13.03 11.50 11.35   \nptb_val 15.92 16.65 19.37 16.00 15.92   \nredpajama_val_arxiv 5.15 5.28 5.78 5.12 5.09   \nredpajama_val_books 12.91 12.71 13.60 12.61 12.50   \nredpajama_val_c4 13.01 12.51 13.55 12.49 12.27 ", "page_idx": 53}, {"type": "text", "text": "Dataset   \nredpajama_val_commoncrawl   \nredpajama_val_github   \nredpajama_val_stackexchange   \nredpajama_val_wikipedia   \ntwitterAAE_HELM_fixed_val_AA   \ntwitterAAE_HELM_fixed_val_white   \nwikitext_103_val ", "page_idx": 54}, {"type": "table", "img_path": "ARAxPPIAhq/tmp/b6d093c995165dbf29c16936743a88e766315eeaff09496fdd15afc0e71ceae3.jpg", "table_caption": [], "table_footnote": [], "page_idx": 54}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: See sections 2 and 4. ", "page_idx": 55}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: See Section 5. ", "page_idx": 55}, {"type": "text", "text": "Guidelines: ", "page_idx": 55}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: We provide one proof in the Appendix, which is clearly linked to the main paper. All assumptions are stated. We enumerate and cross-reference all equations. ", "page_idx": 55}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: We state all experimental details in Appendix D. We state which datasets we used and provide references. We provide the model code. ", "page_idx": 55}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: The data is publicly available. The code is contained in the submission and will be also released publicly. ", "page_idx": 55}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: See Appendix D and attached code. ", "page_idx": 55}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 55}, {"type": "text", "text": "Justification: We provide error bars only for small scale experiments. For large scale experiments, providing error bars is computationally too expensive. ", "page_idx": 55}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 55}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 55}, {"type": "text", "text": "Answer: [Yes] Justification: In Section D we state the compute resources used for this project. ", "page_idx": 56}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 56}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the   \nNeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines?   \nAnswer: [Yes]   \nJustification: ", "page_idx": 56}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 56}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 56}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 56}, {"type": "text", "text": "Justification: We refer to Section A ", "page_idx": 56}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 56}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 56}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 56}, {"type": "text", "text": "Justification: As of now we do release the weights of our pretrained models. ", "page_idx": 56}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 56}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 56}, {"type": "text", "text": "Answer: [Yes] Justification: ", "page_idx": 56}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 56}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 56}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 56}, {"type": "text", "text": "Justification: We provide the model code with this submission. ", "page_idx": 56}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "page_idx": 56}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 56}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 56}, {"type": "text", "text": "Justification: We rely on openly available datasets and reference them properly. ", "page_idx": 56}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 56}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 56}, {"type": "text", "text": "Answer: [NA] Justification: ", "page_idx": 56}]