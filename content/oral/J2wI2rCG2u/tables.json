[{"figure_path": "J2wI2rCG2u/tables/tables_8_1.jpg", "caption": "Table 1: Speed ablation for the two-body Allen-Cahn equation.", "description": "This table presents a speed comparison of different methods for solving the two-body Allen-Cahn equation across varying dimensions (100D to 1M D).  The methods compared include backward mode SDGD (using PyTorch and JAX), parallelized backward mode SDGD, forward-over-backward SDGD, forward Laplacian, and the proposed STDE.  The table shows the iterations per second (it/s) achieved by each method for each dimension, highlighting the significant speedup achieved by STDE, particularly in higher dimensions.", "section": "5.2 Ablation study on the performance gain"}, {"figure_path": "J2wI2rCG2u/tables/tables_8_2.jpg", "caption": "Table 2: Memory ablation for the two-body Allen-Cahn equation.", "description": "This table shows the memory usage (in MB) of different methods for solving the two-body Allen-Cahn equation with varying dimensionality (100D, 1K D, 10K D, 100K D, 1M D).  The methods compared include Backward mode SDGD using PyTorch and JAX, Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE.  The table highlights the significant memory reduction achieved by STDE, especially as the dimensionality increases.", "section": "5.2 Ablation study on the performance gain"}, {"figure_path": "J2wI2rCG2u/tables/tables_13_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation with a two-body exact solution.  It compares the speed (iterations per second), memory usage (in MB), and error (L2 relative error) for several methods: Backward mode SDGD (using PyTorch and JAX), Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE (with and without a batch size of 16).  The results are shown for different input dimensions (100D, 1K D, 10K D, 100K D, and 1M D), illustrating the performance and scalability of each method.  The table highlights the significant speedup and memory reduction achieved by the STDE method, especially at higher dimensions.", "section": "Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_13_2.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation using PINNs. The methods compared include backward mode SDGD (both PyTorch and JAX implementations), parallelized backward mode SDGD, forward-over-backward SDGD, forward Laplacian, and STDE (with and without a smaller batch size).  The table shows the speed (iterations per second), memory usage (in MB), and L2 relative error for each method across different dimensions (100D, 1K D, 10K D, 100K D, and 1M D).  The results highlight the significant speed and memory improvements achieved by STDE, particularly at higher dimensions, compared to the other methods. Note that OOM indicates that the memory requirement exceeded 40GB. The results demonstrate the effectiveness and scalability of STDE for solving high-dimensional PDEs.", "section": "Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_19_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents the computational results for the Inseparable Allen-Cahn equation using different methods.  It compares the speed (iterations per second), memory usage (in MB), and error (L2 relative error) for various dimensionalities (100D, 1K D, 10K D, 100K D, 1M D) using Backward mode SDGD (PyTorch and JAX), Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE (with and without batch size = 16). The results show STDE's superior performance in terms of both speed and memory efficiency compared to other methods, especially at higher dimensions.", "section": "I.1 Inseparable and effectively high-dimensional PDEs"}, {"figure_path": "J2wI2rCG2u/tables/tables_22_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents the computational results for the Inseparable Allen-Cahn equation using different methods.  It compares the speed (iterations per second), memory usage (in MB), and error (L2 relative error with standard deviation) across various dimensionalities (100D, 1K D, 10K D, 100K D, 1M D). The methods compared include backward mode SDGD (using PyTorch and JAX), parallelized backward mode SDGD, forward-over-backward SDGD, forward Laplacian, and STDE (with and without a smaller batch size). The table highlights the efficiency gains of STDE, especially at higher dimensions.", "section": "Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_22_2.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation with a two-body exact solution.  It shows the speed (iterations per second), memory usage (MB), and error (L2 relative error) for various dimensionalities (100D, 1K D, 10K D, 100K D, 1M D). The methods compared include Backward mode SDGD (using PyTorch and JAX), Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE (with and without a batch size of 16).  The results highlight the efficiency gains of STDE, particularly in higher dimensions.", "section": "Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_23_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation with a two-body exact solution. The methods compared include Backward mode SDGD (using PyTorch and JAX), Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE (with and without a smaller batch size). For each method, the table shows the speed (iterations per second), memory usage (in MB), and the L2 relative error. The results are shown for different input dimensions (100D, 1K D, 10K D, 100K D, and 1M D).", "section": "I.1 Inseparable and effectively high-dimensional PDEs"}, {"figure_path": "J2wI2rCG2u/tables/tables_23_2.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation with a two-body exact solution.  The methods compared include Backward mode SDGD (using PyTorch and JAX), Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE (with and without a batch size of 16). The table shows the speed (iterations per second), memory usage (in MB), and the relative L2 error for each method across different input dimensions (100D, 1K D, 10K D, 100K D, and 1M D).  The results highlight the performance improvements achieved by STDE, particularly in terms of speed and memory efficiency, especially as the dimensionality of the problem increases.", "section": "I Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_23_3.jpg", "caption": "Table 7: Computational results for the Time-dependent Semilinear Heat equation, where the number of SDGD sampled dimensions is set to 10.", "description": "This table presents the results of the Time-dependent Semilinear Heat equation experiments.  It compares the performance of three methods: Backward mode SDGD (PyTorch), Backward mode SDGD (JAX), and STDE.  The metrics shown are speed, memory usage, and error.  The number of sampled dimensions for SDGD is consistently set to 10, allowing for a comparison across different dimensionalities (10D, 100D, 1KD, 10KD).", "section": "I Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_24_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation with a two-body exact solution.  The methods compared include Backward mode SDGD (using both PyTorch and JAX), Parallelized backward mode SDGD, Forward-over-Backward SDGD, Forward Laplacian, and STDE (with and without a smaller batch size). The table shows the speed (iterations per second), memory usage (in MB), and L2 relative error for each method across different input dimensions (100D, 1K D, 10K D, 100K D, and 1M D).  The results highlight the superior performance of STDE in terms of both speed and memory efficiency, especially as the dimensionality of the problem increases.", "section": "Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_24_2.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation using PINNs.  The methods compared include various versions of SDGD (with and without parallelization and using PyTorch or JAX) and the proposed STDE method. The table shows the speed (iterations per second), memory usage, and error (L2 relative error) for each method at different input dimensions (100D, 1K D, 10K D, 100K D, 1M D). The results demonstrate that STDE significantly outperforms the baseline SDGD methods in terms of both speed and memory efficiency, while maintaining comparable accuracy.  The effect of using a smaller batch size for STDE is also shown.", "section": "Experiments Results"}, {"figure_path": "J2wI2rCG2u/tables/tables_25_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation, focusing on computational speed, memory usage, and error rate.  The methods compared include backward mode SDGD (using both PyTorch and JAX), parallelized backward mode SDGD, forward-over-backward SDGD, forward Laplacian, and STDE (with and without a smaller batch size). The results are shown for various input dimensions (100D, 1K D, 10K D, 100K D, and 1M D), demonstrating the performance scaling of each method with increasing dimensionality.  The table highlights STDE's superior performance in terms of speed and memory efficiency, especially in higher dimensions, while maintaining accuracy comparable to other methods.", "section": "I Experiments Results\nI.1 Inseparable and effectively high-dimensional PDEs"}, {"figure_path": "J2wI2rCG2u/tables/tables_26_1.jpg", "caption": "Table 11: Speed scaling for training low-dimensional high-order PDEs with different network sizes. The base network has depth L = 4 and width h = 128. STDE* is the alternative scheme using lower-order pushforwards.", "description": "This table presents the speed (iterations per second) achieved by different methods (backward mode AD, STDE, and STDE*) for training three different PDEs (2D KdV, 2D KP, and 1D g-KdV) with varying network sizes.  The \"Base\" column shows the speed for the base network (L=4, h=128).  The other columns show speedups when increasing network depth (L) and width (h). STDE* represents an alternative approach to STDE using lower-order pushforwards. The table demonstrates the speed advantage of STDE and STDE* over standard backward mode AD, particularly as network complexity increases.", "section": "I.4 High-order PDEs"}, {"figure_path": "J2wI2rCG2u/tables/tables_28_1.jpg", "caption": "Table 3: Computational results for the Inseparable Allen-Cahn equation with the two-body exact solution, where the randomization batch size is set to 100 unless stated otherwise.", "description": "This table presents a comparison of different methods for solving the Inseparable Allen-Cahn equation using PINNs.  The methods compared include backward mode SDGD (both in PyTorch and JAX implementations), parallelized backward mode SDGD, forward-over-backward SDGD, forward Laplacian, and STDE (with and without a reduced batch size).  For each method, the table shows the speed (iterations per second), memory usage, and the L2 relative error for various input dimensions (100D, 1K D, 10K D, 100K D, and 1M D).  The results highlight the performance improvements achieved by STDE, particularly in terms of speed and memory efficiency as the dimensionality of the problem increases. The error bars represent standard deviation.", "section": "I Experiments Results\nI.1 Inseparable and effectively high-dimensional PDEs"}]