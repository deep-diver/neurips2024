[{"type": "text", "text": "Abrupt Learning in Transformers: A Case Study on Matrix Completion ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Pulkit Gopalani Ekdeep Singh Lubana Wei Hu University of Michigan Harvard University University of Michigan gopalani@umich.edu ekdeeplubana@fas.harvard.edu vvh@umich.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Recent analysis on the training dynamics of Transformers has unveiled an interesting characteristic: the training loss plateaus for a significant number of training steps, and then suddenly (and sharply) drops to near\u2013optimal values. To understand this phenomenon in depth, we formulate the low-rank matrix completion problem as a masked language modeling (MLM) task, and show that it is possible to train a BERT model to solve this task to low error. Furthermore, the loss curve shows a plateau early in training followed by a sudden drop to near-optimal values, despite no changes in the training procedure or hyper-parameters. To gain interpretability insights into this sudden drop, we examine the model\u2019s predictions, attention heads, and hidden states before and after this transition. Concretely, we observe that (a) the model transitions from simply copying the masked input to accurately predicting the masked entries; (b) the attention heads transition to interpretable patterns relevant to the task; and (c) the embeddings and hidden states encode information relevant to the problem. We also analyze the training dynamics of individual model components to understand the sudden drop in loss. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large Language Models (LLMs) have revolutionized the field of natural language processing (NLP). However, there are still gaps in our understanding of these models, leading to challenges in controlling their behavior. As a pertinent example, the training of these models appears to demonstrate sudden improvements in metrics correlated with various capabilities [8], prompting questions about whether learning of a given capability can be predicted by tracking predefined progress measures and why such sudden changes occur. If undesirable capabilities can suddenly \u2018emerge\u2019 (despite any explicit supervision for them) [16], such sudden changes can be a challenge for AI regulation [21]. ", "page_idx": 0}, {"type": "text", "text": "To better understand such sudden changes during model training, this work investigates training BERT [12] on the classical mathematical task of low-rank matrix completion (LRMC) [6]. Making an analogy with masked language modeling (MLM), where sudden learning of syntactical structures was recently demonstrated [8], we argue matrix completion captures the core aspect of this learning problem (Fig. 1): given some relevant context (observed tokens), fill the missing elements (masked tokens). Specifically, we assume access to a matrix with some fraction of its entries missing, and would like to complete the missing entries of this matrix assuming the ground truth matrix is low-rank. We find that despite being a simplified abstraction of MLM, this setting already demonstrates a sharp decrease in loss as the model undergoes training (Fig. 1 (B)), preceded by a loss plateau for a significant number of training steps (akin to Chen et al. [8]). The simplicity of our setting further affords us interpretability, as we find that the point of sudden drop coincides with a precise change in how the model solves the task\u2014we call this change an algorithmic transition. Specifically, we show that the pre\u2013transition model simply copies the input (predicting 0 at masked positions), while the post\u2013transition model accurately predicts missing values at masked positions. To perform the latter, distinctive changes occur in the model\u2019s attention heads during the period of sudden drop, wherein the model learns to identify relevant positional information to combine various elements in the input matrix and compute missing entries for matrix completion. We perform a range of interventions on the input, model (before and after the transition), and training process to further understand this phenomenon, leading to the following observations. ", "page_idx": 0}, {"type": "image", "img_path": "O9RZAEp34l/tmp/443223b348b3456049841150e6abf783f76a8acac5fb3258a7d62713297332ec.jpg", "img_caption": ["Figure 1: (A) Matrix completion using BERT. Similar to completing missing words in an English sentence in MLM, we complete missing entries in a masked low\u2013rank matrix. $({\\bf{B}})$ Sudden drop in loss. During training, the model undergoes an algorithmic shift marked by a sharp decrease in mean\u2013squared\u2013error (MSE) loss. Here, the model shifts from simply copying the input (copying phase) to computing missing entries accurately (completion phase). "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "\u2022 Pre\u2013transition: Copying the Input Matrix Before the transition, the model is simply copying the input matrix both at observed entries as well as missing entries, predicted value for missing entries being nearly 0. The attention maps at this stage do not correspond to a particularly interpretable structure, and contribute little to the model output. \u2022 Post\u2013Transition: Computing Missing Entries After the transition, the model accurately completes the missing entries, while still copying observed entries. The attention maps at this stage clearly demonstrate that the model \u2018attends\u2019 to relevant tokens in the input, and the attention layers are crucial for accurate matrix completion. Interestingly, the post\u2013 transition model can outperform the classical nuclear norm minimization algorithm for matrix completion, suggesting that it does not simply recover this algorithm. \u2022 Model Components and Sudden Drop We analyze the training dynamics of individual components, keeping other components fixed to their final values. We find that different components converge to their optimal values at quite different points during this training. ", "page_idx": 1}, {"type": "text", "text": "2 Preliminaries ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "2.1 Problem Setup ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "MLM and LRMC In masked language modeling (MLM), a fraction of tokens in the input sequence are masked out and the model is required to predict the correct token for those masked entries. In this setup, the model has access to both the tokens before and after the current token for computing the prediction. Low-rank matrix completion has a similar structure: given a matrix (assumed low\u2013rank) with a fraction of its elements available, the goal is to predict missing entries. For a matrix $X\\in\\mathbb{R}^{n\\times n}$ , denote its observed entries by the set $\\Omega\\subset[\\bar{n}]\\times[n]$ , and the set of missing entries $\\Omega^{\\mathtt{c}}=[n]\\times[n]\\setminus\\Omega$ . Formally, the problem is ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{U}~\\operatorname{rank}(U)\\qquad\\mathrm{s.t.}~U_{i j}=X_{i j}~~\\forall(i,j)\\in\\Omega.\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "Importantly, both problems (MLM and LRMC) have the same goal\u2014predict the missing entries in the input, i.e., either the language tokens (MLM) or matrix elements (LRMC). ", "page_idx": 1}, {"type": "text", "text": "Matrix Completion using BERT BERT [12] is an encoder-only Transformer architecture used widely for MLM. For an input sequence of tokens $[t_{1},t_{2},\\ldots,t_{L}]$ , the output is a sequence of ", "page_idx": 1}, {"type": "text", "text": "$D-$ dimensional \u2018hidden states\u2019 $[e_{1},\\ldots,e_{L}]^{\\top}\\,\\in\\,\\mathbb{R}^{L\\times D}$ , that is used for prediction. We train a BERT model ${\\mathsf{T F}}_{\\theta}$ to predict missing entries in a low\u2013rank masked matrix $\\tilde{X}$ . For model output $\\hat{X}:=\\mathsf{T F}_{\\theta}(\\tilde{X})\\in\\mathbb{R}^{n\\times n}$ , the training objective $L:=L(\\theta)$ is the mean-squared-error (MSE) loss over all entries, ", "page_idx": 2}, {"type": "equation", "text": "$$\nL(\\theta)=\\frac{1}{n^{2}}\\sum_{i,j=1}^{n}(X_{i j}-\\hat{X}_{i j})^{2}.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "In our experiments, data for matrix completion is generated as ", "page_idx": 2}, {"type": "equation", "text": "$$\nX=U V^{\\top};\\quad U,V\\in\\mathbb{R}^{n\\times r},\\;\\;U_{i j},V_{i j}\\stackrel{\\mathrm{iid}}{\\sim}\\mathrm{Unif}[-1,1]\\;\\;\\forall i,j\\in[n]\\times[r]\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "so that $X$ has rank at most $r$ . To mask entries at random, we sample binary matrices $M\\in\\{0,1\\}^{n\\times n}$ such that $M_{i j}=0$ with probability $p_{\\mathrm{mask}}$ , and 1 otherwise; that is, $\\Omega=\\bar{\\{}(i,j)\\mid M_{i j}=1\\}$ . ", "page_idx": 2}, {"type": "text", "text": "Nuclear norm minimization Nuclear norm minimization [6] is a widely used convex optimization approach to LRMC; for completeness, we compare our trained models to this approach. Since rank is not a convex function of the matrix, one modifies the low rank completion problem by defining the nuclear norm $\\|U\\|_{*}$ , i.e., sum of singular values of a matrix $U$ . The overall optimization problem is as follows. ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{U}\\|U\\|_{*}\\qquad\\mathrm{s.t.}\\;\\,U_{i j}=X_{i j}\\;\\;\\forall(i,j)\\in\\Omega.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "2.2 Experiments ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Training We use a 4\u2013layer, 8\u2013head BERT model [40] for $7\\times7\\left(\\mathrm{rank-2}\\right)$ matrices, with \u2018absolute\u2019 positional embeddings, no token\u2013type embeddings, and no dropout. We fix $p_{\\mathrm{mask}}=0.3$ for training, and 256 matrices are sampled as training data at each step (in an \u2018online\u2019 training setup). We use Adam optimizer with constant step size 1e\u22124 for 50000 steps, without weight decay or warmup. In addition to $L$ , we track MSE over observed and masked entries, ", "page_idx": 2}, {"type": "equation", "text": "$$\nL_{o b s}=\\frac{1}{|\\Omega|}\\sum_{(i,j)\\in\\Omega}(X_{i j}-\\hat{X}_{i j})^{2},\\quad\\mathrm{and}\\quad L_{m a s k}=\\frac{1}{|\\Omega^{c}|}\\sum_{(i,j)\\in\\Omega^{c}}(X_{i j}-\\hat{X}_{i j})^{2}.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Please see Appendix $\\mathrm{D}$ for details on tokenizing matrices and other experimental details. Code is available at this https://github.com/pulkitgopalani/tf-matcomp. ", "page_idx": 2}, {"type": "text", "text": "Compute Resources For $7\\times7$ matrices (training and testing), we used a single $\\{{\\mathrm{V}}100\\,/\\,{\\mathrm{A}}100\\,/\\,$ L40S} GPU. A single {A40 / A100 / L40S} GPU was used for matrices of order 10, 12, 15. ", "page_idx": 2}, {"type": "text", "text": "3 Sudden Drop in Loss ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In our training setup, the model converges to a final MSE of approximately 4e\u22123 \u2013 that is, it can solve matrix completion well (as in Fig. 3, this MSE is lower than nuclear norm minimization). Fig. 2 demonstrates the loss dynamics over the course of training the model on this task. ", "page_idx": 2}, {"type": "text", "text": "Interestingly, we observe a sudden drop in training loss at approximately step 15000. This sudden drop in loss is reminiscent of phase transitions in physical systems, that are characterized by sudden observable changes in the system on continuous variation of some parameter (here equivalent to the number of training steps). Motivated by this similarity, we analyse the \u2018pre\u2013 shift\u2019 model at step 4000, and \u2018post\u2013shift\u2019 model at the end of training, i.e., step 50000 to understand model properties and sudden drop in loss. ", "page_idx": 2}, {"type": "image", "img_path": "O9RZAEp34l/tmp/1e8772338fda66c6ec19d44d13f307358d2bfa0cb854927f2b3c2b09e37ab3a6.jpg", "img_caption": ["Figure 2: Sharp reduction in training loss. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "3.1 Before the Algorithmic Shift \u2013 Copying Phase ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Since the value of $L_{o b s}$ remains quite low in the first phase of model training (Fig. 2), we ask: what algorithm does the model use for predicting matrix entries in this phase? ", "page_idx": 3}, {"type": "text", "text": "We find that the model learns to copy the input verbatim in the first phase (with output 0 for missing entries), verified through token interventions (Sec. 3.1.1) and by investigating the contribution of attention heads (Sec. 3.1.2) towards the output. ", "page_idx": 3}, {"type": "text", "text": "3.1.1 Verifying Copying via Token Intervention ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "To rigorously verify that the pre-shift model indeed copies the input, we replace the masked elements in the $7\\times7$ , rank-2 input by the token corresponding to some $m\\in\\mathbb{R}$ . For such input, we would like to see whether the model implements copying and outputs $m$ at the masked positions. In this setup for model output $\\hat{X}$ , MSE at observed positions is $L_{o b s}$ , and for masked positions the MSE is defined as ", "page_idx": 3}, {"type": "equation", "text": "$$\nL_{m a s k}^{\\prime}=\\frac{1}{\\left|\\Omega^{\\mathsf{c}}\\right|}\\sum_{(i,j)\\in\\Omega^{\\mathsf{c}}}(\\hat{X}_{i j}-m)^{2}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "$L_{o b s}$ and $L_{m a s k}^{\\prime}$ for this experiment averaged over 512 samples are compiled in Table 1 (Appendix A). The small loss values confirm that model output matches the ground truth at observed positions, while at masked positions it outputs a value nearly equal to $m$ . When the mask token is MASK (i.e., no replacement), we set $m=0$ , indicating that the model outputs 0 at the masked locations. ", "page_idx": 3}, {"type": "text", "text": "To generalize this observation to OOD matrices, we sample uniform random $7\\times7$ matrices for input; i.e., all entries in the matrix are i.i.d. uniformly in $[-1,1]$ . Importantly, these matrices do not necessarily have a low\u2013rank structure. With these matrices as input to the same pre\u2013shift model as before, we find that model still copies the input (Table 1). This confirms that the model is indeed not \u2018computing\u2019 any entries in the sense of low\u2013rank matrix completion, and simply copies all entries, masked or observed. ", "page_idx": 3}, {"type": "text", "text": "3.1.2 Attention Heads \u2013 Mostly Inconsequential ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Attention heads at this stage (Fig. 22a) do not appear to attend to tokens in an interpretable manner. Since the model is copying the input, and does not need to combine different tokens, Attention heads should not affect the model output at this stage. To confirm that this is indeed the case, we do the following tests. ", "page_idx": 3}, {"type": "text", "text": "Uniform Ablation Uniform ablation entails replacing the softmax probabilities in an $n\\times n$ attention head by $1/n^{2}$ for all elements i.e. \u2018force\u2019 the model to equally attend to all tokens (Sec. 4.6, [22]). On such an intervention in our case, there is negligible change in MSE at both observed and masked positions. Averaged over 256 samples, $L_{o b s}=3.4\\mathrm{e}{-4}$ and $L_{m a s k}=0.2236$ when using all attention heads; whereas, on ablating all heads, these values are $3.2\\mathrm{e}{-4}$ and 0.2236 respectively. The negligible change in MSE supports the hypothesis that attention does not contribute to the model output at this stage. ", "page_idx": 3}, {"type": "text", "text": "Model Switching In the extreme case, what if we replace the model weights for some component to check for changes to the output? In model switching, we \u2018transplant\u2019 the attention key, query and value weights in the pre\u2013shift model to those from the post-shift model. Averaged over 256 samples, $L_{o b s}$ is 5e\u20133, that is similar to the optimal total MSE $(L)$ obtained at the end of training, while $L_{m a s k}=0.2246$ , similar to the values obtained without such replacement. This shows that replacing the pre\u2013shift attention weights by the optimal ones does not significantly affect $L_{o b s}$ , $L_{m a s k}$ \u2013 highlighting that attention layers have little effect on the model output at this stage. ", "page_idx": 3}, {"type": "text", "text": "3.2 After the Algorithmic Shift \u2013 Matrix Completion Phase ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we focus on the model properties in the post\u2013shift phase (specifically, at the end of training at 50000 steps). Since $L$ are near\u2013optimal in this setting, we ask : What algorithm is the model using for completing missing entries? For example, is it implementing the classical nuclear-norm minimization algorithm? For the second question, we show below that the BERT model is not implicitly implementing nuclear norm minimization for completing missing entries in the input. ", "page_idx": 3}, {"type": "text", "text": "Nuclear Norm Minimization We use CVXPY [13] to solve low\u2013rank matrix completion using nuclear\u2013norm minimization at various levels of $p_{\\mathrm{mask}}$ , comparing it to the output of a BERT model trained on $p_{\\mathrm{mask}}=0.3$ . We find that BERT performs better than nuclear norm minimization with respect to MSE; at the same time, the nuclear norm of BERT solution is larger (Fig. 3). ", "page_idx": 4}, {"type": "text", "text": "To verify if the model implicitly optimizes a different objective for nuclear norm minimization, we also compare to the regularized version of the above problem $(\\lambda>0)$ ), ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{U}\\left[\\frac{1}{|\\Omega|}\\sum_{(i,j)\\in\\Omega}(U_{i j}-X_{i j})^{2}+\\lambda\\|U\\|_{*}\\right]\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We find that this is not the case, as for various values of $\\lambda$ , BERT still outperforms regularized MSE minimization w.r.t. MSE (Appendix B). This confirms that the model is not implementing nuclear norm minimization as its algorithm for computing missing entries. ", "page_idx": 4}, {"type": "image", "img_path": "O9RZAEp34l/tmp/8fc3c88e67a303776f038beb005d8a7a86ad3d294c9b9c2046c3a072ca3356ba.jpg", "img_caption": ["Figure 3: BERT v. Nuclear Norm Minimization. Comparing our model (trained with $p_{\\mathrm{mask}}=0.3)$ and nuclear norm minimization on the matrix completion task at various levels of $p_{\\mathrm{mask}}$ . The difference in MSE and nuclear norm of solutions obtained using these two approaches indicates that BERT is not implicitly doing nuclear norm minimization to complete missing entries. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "We now move to an interpretability based analysis of the model behavior, to attempt to extract useful signal about the implemented algorithm, analysing model behavior for observed and missing entries separately in the following sections. ", "page_idx": 4}, {"type": "text", "text": "3.2.1 Observed Entries ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Uniform Ablation As in Sec. 3.1.2, to quantify the effect of attention heads at this stage, we uniformly ablate all attention heads in the post-shift model. Averaged over 256 samples, this leads to $L_{o b s}=9.2\\mathrm{e}{-5}$ without ablation, and $3.7\\mathrm{e-3}$ with ablation (close to the value of $L$ at the end of training). However, $L_{m a s k}$ increases from 0.0128 to 0.2183, approximately the value of $L_{m a s k}$ in the loss plateau before sudden drop. This difference in effect of ablating attention heads confirms that they are much more important for predicting missing entries than for observed entries. ", "page_idx": 4}, {"type": "text", "text": "Model Switching We repeat the model switching experiments from Sec. 3.1.2 in the reverse direction i.e. \u2018transplant\u2019 attention key, query, value weights from pre\u2013shift model to the post\u2013shift model. Note that this direction of weight switching is stronger, in the sense that the learnt information in attention layers is removed. We find that on this modification, $L_{o b s}=9.5\\mathrm{e}{-4}$ averaged over 256 samples; that is, the observed loss is still not too large. This test confirms that the prediction at observed entries is not substantially affected by the attention layers. ", "page_idx": 4}, {"type": "text", "text": "Position Sensitivity Finally, since the attention mechanism crucially depends on token positions, we intervene on this component of the model by randomly permuting its positional embeddings. Formally, the embedding originally for position $i$ in the input now represents position $\\pi(i)$ for some random permutation $\\pi:[n^{2}]\\,{\\dot{\\to}}\\,[n^{\\dot{2}}]$ . Averaged over 256 samples, $L_{o b s}=2.4\\mathrm{e}{-4}$ , whereas $L_{m a s k}=0.5687$ , indicating that the observed positions are negligibly affected compared to masked positions due to this intervention. ", "page_idx": 4}, {"type": "text", "text": "These results support our \u2018sub\u2013algorithm\u2019 hypothesis; (a) since positional information is intuitively not required for the copying sub-algorithm, $L_{o b s}$ remains low; and (b) $L_{m a s k}$ increases significantly, demonstrating that removing positional information is detrimental to accurately computing missing entries. ", "page_idx": 4}, {"type": "text", "text": "3.2.2 Missing Entries ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "To confirm that attention heads causally affect the model output for missing entries, in addition to uniform ablations, we perform causal interventions (activation patching) [42] on the hidden states just after the attention heads. This involves replacing the hidden state after an attention head for input ", "page_idx": 4}, {"type": "image", "img_path": "O9RZAEp34l/tmp/6579da4bff4d5fb5eeae65b43286456d562647b7640db28fde3516104844fe10.jpg", "img_caption": ["Figure 4: Attention heads in post\u2013shift model attend to specific positions. For example, (Layer 2, Head 1) attends to elements in the same row as the query element, and (Layer 2, Head 2) attends to elements in the same column as the query element. (These attention matrices are an average over multiple independent matrix and mask samples.) "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "$A$ with the hidden state obtained at the same attention head, but for a different input $A^{\\prime}$ . Ideally, if that head is causally relevant to the output, then such an intervention should steer the model towards the output for $A^{\\prime}$ , instead of $A$ . We find in our case that for $A=X$ and $A^{\\prime}=-X$ , such an intervention on all attention heads clearly steers the model output at missing entries towards $-X$ (more details in Appendix F). ", "page_idx": 5}, {"type": "text", "text": "Structure in Attention Heads Denote attention head $H$ in layer $L$ by the tuple $(L,H)$ . We can group the attention heads depending on the specific regions of the input matrix they attend to, ", "page_idx": 5}, {"type": "text", "text": "1. [Row Head] same row as the query element \u2013 \u2018block\u2013diagonal\u2019 patterns, e.g. (2, 1);   \n2. [Column Head] same column as query element \u2013 \u2018off\u2013diagonal\u2019 patterns e.g. (2, 2); and   \n3. [Identity Head] query element itself \u2013 \u2018diagonal\u2019 patterns in the last layer, e.g. (4, 3). ", "page_idx": 5}, {"type": "text", "text": "There are also some other attention heads that do not neatly fti into either of these 3 categories\u2014for example, all heads in layer 1 except (1,3), (1,4); (3,3); (4,2), (4,5\u20137). In this context, we note that uniformly ablating heads (3,3), (4,2), (4,5\u20137) gives $L_{o b s}=9.36\\mathrm{e}{-5}$ , $L_{m a s k}=0.01575$ compared to $L_{o b s}\\,=\\,9.44\\mathrm{e}{-5}$ , $L_{m a s k}\\,=\\,0.01428$ without ablation, i.e. these uninterpretable heads do not significantly affect the output. ", "page_idx": 5}, {"type": "text", "text": "Attention Heads with \u2018Structured Masking\u2019 Since the maps in Fig. 4 are averages over multiple random masks and input matrices, it is difficult to derive more fine\u2013grained insights into the model computation. To address this, we generate inputs with specific mask structure, see for example Fig. 5. This implies that while averaging the attention probabilities over different input matrices, the mask i.e. $\\Omega^{\\mathsf{c}}$ remains the same. This step helps us highlight how an attention head attends to input elements based on the element being masked or observed. From the results in Fig. 5, we find clear evidence that different attention heads focus on specific parts of the input. For instance, ", "page_idx": 5}, {"type": "text", "text": "[Masked\u2013Row Head] (2, 1), (3,4) and (4,8) are mainly active only at the masked rows, and therein attends to the only observed position in those rows. ", "page_idx": 5}, {"type": "image", "img_path": "O9RZAEp34l/tmp/0dc87a80207117988af7645adeb820ffbcdd21926ce6eba31bc614a257294ff1.jpg", "img_caption": ["Figure 5: Attention heads with specific mask structure in inputs. We can derive fine-grained insights about the functions of individual heads in this setup by using a specific mask structure for all input matrices. (Mask appended below each plot, blue denotes missing entries). For example, multiple attention heads like (Layer 2, Head 2) have negligible attention weight at missing positions in the input matrix, implying that these heads attend only to observed entries in the column of the query element. Further, (Layer 2 Head 1) and similar heads have larger attention weights for the rows with missing entries, and in those rows they attend to the sole observed element. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "2. [Observed\u2013Copy Head] (4,3) and (4,4) correspond roughly to an identity map, slightly deviating in the masked rows. In these cases, again the maximal attention score corresponds to the only observed position in these rows.   \n3. [Mask\u2013Ignore Heads] Further, there are multiple \u2018parallel off-diagonal\u2019 heads that completely ignore the masked rows for their computation. These heads include (2,2\u20134), (2,6); (3,2), (3,3), (3,5). Additionally, there are also attention heads like (3,1), (3,6) that attend to only the observed element of each masked row. Collectively these heads act as \u2018mask-ignore heads, attending to only observed entries, and using this information to compute missing entries.   \n4. [Longest\u2013Contiguous\u2013Column Heads] There also exist attention heads that respond systematically to changes in the mask. For example, consider attention heads (2, 5), (2, 7), (2, 8) in Fig. 23. For each row, these heads attend to the element in the 6th and 2nd column respectively for part (a) and (b). On a closer look, the connecting link between these two mask patterns is that, the longest contiguous unmasked column is exactly the column that these heads attend to. We hypothesize that this information is somehow used by the model in its inner computation for masked entries.   \n5. [Input\u2013Processing Heads] Finally, Heads (1,1\u20132), (1, 5\u20138) do not fall in any of the categories above . These heads are mostly static across different mask / input variations (for example, comparing Fig 4 and 5), and the patterns suggest that these heads almost exclusively focus on the middle row of the input matrix and some other elements. A possible function of these heads is to process positional and token embeddings (input to the first layer) so that this information can be used appropriately in the subsequent layers. ", "page_idx": 6}, {"type": "text", "text": "To quantitatively assess the effect of these attention heads on the model output, we also perform uniform ablations on each sub\u2013group separately (Appendix L), and find that the groups significantly affect the output, to varying degrees depending on the specific group. ", "page_idx": 6}, {"type": "text", "text": "Probing We probe for properties of the input matrix in the hidden states of the model, to concretely determine how the model computes the output. We use our 12\u2013layer model in this case, to enhance contrast between probing results in different layers. ", "page_idx": 7}, {"type": "text", "text": "Specifically, for every element in the input, we fit a linear probe [3] on its hidden state after a given layer, mapping the hidden state to the $n-$ dimensional masked row that this element belongs to (missing entries are replaced by 0). That is, element at position $(i,j)$ maps to the 7\u2212dimensional vector $\\tilde{X}_{i}$ . The results for this experiment in Fig. 6 demonstrate that the hidden states at layer 3 and 4 in the model correlate quite ", "page_idx": 7}, {"type": "image", "img_path": "O9RZAEp34l/tmp/22c4381541b4625d08c90132ce41cbfc7de651fe2425424c74a9bcb0a211cd35.jpg", "img_caption": ["Figure 6: Hidden states encode input information. We probe for the row of each element in the masked matrix input, replacing missing entries by 0. We find that layers 3 and 4 have a much lower MSE and a much larger cosine similarity compared to other layers in the model. Hence, these layers somehow \u2018store information\u2019 about the masked input matrix. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "strongly with the probe target, compared to other layers. This result suggests that the model tracks input information in its intermediate layers and possibly uses it for computing missing entries. ", "page_idx": 7}, {"type": "text", "text": "We also probe for the true matrix element at missing entries, and find that the hidden states at these positions get gradually more correlated with depth (through linear probing). Further, we also attempt to extract information about singular vectors of the ground truth matrix from the hidden states through linear probing, though are unable to conclusively do so. We discuss these results in Appendix K. ", "page_idx": 7}, {"type": "text", "text": "3.3 Role of Embeddings ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Token Embeddings The $\\ell_{2}$ norm of token embeddings corresponding to values from $-1.5$ to 1.5 is symmetric w.r.t. 0 as seen in Fig. 7a. Further, the PCA of token embeddings in Fig. 7b shows that the embeddings have a separable structure based on the sign of the real\u2013valued input (y\u2013axis), and continuous variation w.r.t. magnitude of input (x\u2013axis). Importantly, unlike other metrics, token embeddings do not seem to abruptly change only at step 15000; rather, the final structure appears before the sudden drop in loss. Similar to [27], we compute the top\u20132 principal components of the token embeddings at the final step (50000), and project the token embeddings at intermediate training steps on these components. The results (Fig. 9, Appendix C) show that the embeddings align very closely to the final arrangement before the actual drop. This is as expected, since the model needs to learn what the tokens actually represent on the real line, before it can use those values for completing missing entries. This also explains to some extent why the model implements copying before the sudden drop, since accurately learning token embedding-unembedding is sufficient for that task. ", "page_idx": 7}, {"type": "image", "img_path": "O9RZAEp34l/tmp/8fe94689b54a202da72168384843f524e55385027f00c18a79b08fa2cdd92397.jpg", "img_caption": ["Figure 7: Embeddings demonstrate relevant structure. In the post\u2013shift model, positional and token embeddings exhibit properties demonstrating that the model has learnt relevant information about the matrix completion problem. (a) $\\ell_{2}$ norm of token embeddings is symmetric around 0. This aligns with the intuition that the norm of token embeddings should depend only on the magnitude of the input, and not on its sign. (b) Top\u20132 principal components of token embeddings correspond to the magnitude and sign of the real valued input. In our case, the \u2018y-axis\u2019 denotes sign of input, and the $\\mathbf{\\epsilon}_{\\mathbf{X}}$ -axis\u2019 denotes the magnitude of the input value. (c) Positional embeddings of elements in the same column cluster together in the t\u2013SNE projection, showing that the model uses positional information relevant to the matrix completion problem. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Positional Embeddings In the t-SNE projection of positional embeddings, positions in the same column tend to cluster together as seen in Fig. 7c. This is non\u2013trivial because we have not used any marker tokens to mark the end of a row or column. Further, note that in contrast to token embeddings, positional embeddings do not have a continual evolution in structure \u2013 Fig. 10 (Appendix C) shows that the clustering appears only after the sudden drop (step 20000 and after). This along with the evolution of attention heads (Sec. 3.1, 3.2) aligns with how the pre\u2013shift model copies observed entries with little effect from ablating attention heads or positional embeddings (Sec. 3.2.1). ", "page_idx": 8}, {"type": "text", "text": "4 Sudden Drop in Loss \u2013 Role of Model Components ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Is it possible to analyse training dynamics of individual model components to derive insights about the full model training? This is motivated by the findings in the previous section on embeddings, and in Section 3.1; the pre\u2013shift model does not use Attention layers for its computation in that stage, and relies on other components to copy input entries. Hence, in our case, the sudden drop corresponds in large part to learning the right Attention patterns (see Appendix M.1). To analyse training dynamics of different model components, we choose (a set of) components \u2013 Attention layers, MLP layers, Positional Embeddings and Token Embeddings, randomly initialize them and freeze the weights of other components to their values at the final step of training (Fig. 8). ", "page_idx": 8}, {"type": "text", "text": "We find that (a) MLPs and Token Embeddings converge without any observable plateau or sudden drop in loss; (b) for other components, the dynamics resemble those for the full model training (i.e. plateau and then sudden drop), and (c) Positional embeddings show the longest plateau in loss. ", "page_idx": 8}, {"type": "image", "img_path": "O9RZAEp34l/tmp/c54d97109fbd41fe64abea789fdc1380df9af925a14951ba2419db87f4c50125.jpg", "img_caption": ["Figure 8: Individual model components have distinct training dynamics. Training individual model components, initializing others to their final value (\u2018All components\u2019 indicates normal training). There is no loss plateau for token embeddings and MLP layers, in contrast to positional embeddings, where the sudden drop occurs just before step 40000. In all other cases the sudden drop occurs before the sudden drop in usual training. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Additional Results To further understand the effect of data and model properties on the sudden drop in loss, we train ", "page_idx": 8}, {"type": "text", "text": "\u2022 a 2\u2013layer, 2\u2013head GPT model on the matrix completion task (Appendix G);   \n\u2022 models of different depth (number of layers) and width (hidden state dimension) (App. H);   \n\u2022 our model on (mixture of) matrices of different sizes keeping the rank fixed at 1 (App. I);   \n\u2022 a 12-layer, 12-head model on $10\\times10$ matrices of multiple ranks (separately) (App. I);   \n\u2022 our model on input matrix entries $(U_{i j},V_{i j})$ i.i.d. $\\sim\\mathcal{N}(0,1)$ instead of $\\mathrm{Unif}[-1,1]$ (App. J.1); we also analyze test\u2013time OOD performance of our model in App. J.2. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "5 Related Work ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[27, 28, 32, 41, 38] analyse \u2018grokking\u2019, the sudden emergence of generalization during model training. In the context of training dynamics of MLM, [8] analyses \u2018breakthroughs\u2019 (sudden drop in loss and associated improvement in generalization capabilities of the model), specifically for BERT. They show that the breakthrough marks the transition of the model to a generalizing one. Their work however is focused on language tasks, distinct from our setting which is mathematical (and hence more controllable) in nature. We also note that their work is not in the online training setting; our setup is online in the sense of sampling new data at every step of training. ", "page_idx": 9}, {"type": "text", "text": "Mathematical problem solving capabilities of Transformers have been a topic of interest lately [24, 7, 4]. In fact, [24] show that learning addition from samples is equivalent to low\u2013rank matrix completion. Further, [7] show that it is possible to train a transformer based model to solve various linear algebraic tasks e.g. eigendecomposition, matrix inversion, etc.; however, to the best of our knowledge, interpretability studies for such tasks have not been conducted before. For interpretability in simpler math tasks, [18] mechanistically analyse GPT-2 small on predicting whether a number is \u2018greater-than\u2019 a given number, by formulating the problem as a natural language task. [35, 36, 10] analyse BERT from an interpretability perspective. More recently, there has been a line of research works analysing decoder based models to reverse\u2013engineer the mechanisms employed by these models, termed as \u2018mechanistic interpretability\u2019 [14, 31, 32, 39, 11, 33, 25, 26, 23, 34, 20]. We note that our setting is distinct from the recent work on solving mathematical tasks like linear regression through \u2018in\u2013context\u2019 learning in transformers [4, 1, 9, 15, 17, 2, 30, 37]. Whether our model learns to implicitly \u2018implement\u2019 an optimization procedure as shown in some of these is an open question. We discuss related work in more detail in Appendix E. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We trained a BERT model on matrix completion, and analyzed it before and after the sudden drop in training loss (algorithmic shift) to interpret the algorithm being learnt by the model, and gain insight on why such a sharp drop in loss occurs. ", "page_idx": 9}, {"type": "text", "text": "It is evident in our analysis that both before and after the shift, the model does not really compute anything at observed positions, and simply copies these entries. For missing entries, we have shown that the model learns useful abstractions rapidly through the algorithmic shift. Mathematically formulating what algorithm the model employs to implement matrix completion for missing entries is a direction for future work. ", "page_idx": 9}, {"type": "text", "text": "Since our work is primarily interpreting model training and mechanism, all experiments are with small scale matrices (largest being $15\\times15)$ ), and the current method would likely need modifications to scale to larger matrices. Finally, we only intended to study Transformers on matrix completion as a toy task from an interpretability viewpoint, and do not advocate replacing existing efficient solvers for matrix completion with our approach. ", "page_idx": 9}, {"type": "text", "text": "Societal Impact We study Transformer based models on their ability to solve a mathematical task (matrix completion) and the associated training dynamics. The work focuses on Transformer interpretability, aiding in improving our understanding of these models and their training and thus we do not foresee any negative societal impact of our work. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements We thank Yu Bai, Andrew Lee, Naomi Saphra and anonymous reviewers for their helpful comments. WH acknowledges support from the Google Research Scholar Program. ESL\u2019s time at University of Michigan was supported by NSF under award CNS-2211509 and at CBS, Harvard by the CBS-NTT Physics of Intelligence program. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Kwangjun Ahn, Xiang Cheng, Hadi Daneshmand, and Suvrit Sra. Transformers learn to implement preconditioned gradient descent for in-context learning. In Alice Oh, Tristan Naumann, Amir Globerson, Kate Saenko, Moritz Hardt, and Sergey Levine, editors, Advances in Neural Information Processing Systems 36: Annual Conference on Neural Information Processing Systems 2023, NeurIPS 2023, New Orleans, LA, USA, December 10 - 16, 2023, 2023.   \n[2] Ekin Aky\u00fcrek, Dale Schuurmans, Jacob Andreas, Tengyu Ma, and Denny Zhou. What learning algorithm is in-context learning? investigations with linear models. In The Eleventh International Conference on Learning Representations, 2023.   \n[3] Guillaume Alain and Yoshua Bengio. Understanding intermediate layers using linear classifier probes, 2017.   \n[4] Yu Bai, Fan Chen, Huan Wang, Caiming Xiong, and Song Mei. Transformers as statisticians: Provable in-context learning with in-context algorithm selection. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[5] Boaz Barak, Benjamin Edelman, Surbhi Goel, Sham Kakade, Eran Malach, and Cyril Zhang. Hidden progress in deep learning: Sgd learns parities near the computational limit. In S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, editors, Advances in Neural Information Processing Systems, volume 35, pages 21750\u201321764. Curran Associates, Inc., 2022.   \n[6] Emmanuel J. Cand\u00e8s and Benjamin Recht. Exact matrix completion via convex optimization. Found. Comput. Math., 9(6):717\u2013772, 2009.   \n[7] Francois Charton. Linear algebra with transformers. Transactions on Machine Learning Research, 2022.   \n[8] Angelica Chen, Ravid Shwartz-Ziv, Kyunghyun Cho, Matthew L Leavitt, and Naomi Saphra. Sudden drops in the loss: Syntax acquisition, phase transitions, and simplicity bias in MLMs. In The Twelfth International Conference on Learning Representations, 2024.   \n[9] Xiang Cheng, Yuxin Chen, and Suvrit Sra. Transformers implement functional gradient descent to learn non-linear functions in context, 2024.   \n[10] Kevin Clark, Urvashi Khandelwal, Omer Levy, and Christopher D. Manning. What does BERT look at? an analysis of BERT\u2019s attention. In Tal Linzen, Grzegorz Chrupa\u0142a, Yonatan Belinkov, and Dieuwke Hupkes, editors, Proceedings of the 2019 ACL Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP, Florence, Italy, August 2019. Association for Computational Linguistics.   \n[11] Arthur Conmy, Augustine N. Mavor-Parker, Aengus Lynch, Stefan Heimersheim, and Adri\u00e0 Garriga-Alonso. Towards automated circuit discovery for mechanistic interpretability. In Alice Oh, Tristan Naumann, Amir Globerson, Kate Saenko, Moritz Hardt, and Sergey Levine, editors, Advances in Neural Information Processing Systems 36: Annual Conference on Neural Information Processing Systems 2023, NeurIPS 2023, New Orleans, LA, USA, December 10 - 16, 2023, 2023.   \n[12] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Jill Burstein, Christy Doran, and Thamar Solorio, editors, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171\u20134186, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics.   \n[13] Steven Diamond and Stephen Boyd. CVXPY: A Python-embedded modeling language for convex optimization. Journal of Machine Learning Research, 17(83):1\u20135, 2016.   \n[14] Nelson Elhage, Neel Nanda, Catherine Olsson, Tom Henighan, Nicholas Joseph, Ben Mann, Amanda Askell, Yuntao Bai, Anna Chen, Tom Conerly, Nova DasSarma, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds, Danny Hernandez, Andy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario Amodei, Tom Brown, Jack Clark, Jared Kaplan, Sam McCandlish, and Chris Olah. A mathematical framework for transformer circuits. Transformer Circuits Thread, 2021. https://transformer-circuits.pub/2021/framework/index.html.   \n[15] Deqing Fu, Tian-Qi Chen, Robin Jia, and Vatsal Sharan. Transformers learn higher-order optimization methods for in-context learning: A study with linear models, 2023.   \n[16] Deep Ganguli, Danny Hernandez, Liane Lovitt, Amanda Askell, Yuntao Bai, Anna Chen, Tom Conerly, Nova Dassarma, Dawn Drain, Nelson Elhage, et al. Predictability and surprise in large generative models. In Proceedings of the 2022 ACM Conference on Fairness, Accountability, and Transparency, pages 1747\u20131764, 2022.   \n[17] Shivam Garg, Dimitris Tsipras, Percy Liang, and Gregory Valiant. What can transformers learn in-context? a case study of simple function classes. In Alice H. Oh, Alekh Agarwal, Danielle Belgrave, and Kyunghyun Cho, editors, Advances in Neural Information Processing Systems, 2022.   \n[18] Michael Hanna, Ollie Liu, and Alexandre Variengien. How does GPT-2 compute greaterthan?: Interpreting mathematical abilities in a pre-trained language model. In Thirty-seventh Conference on Neural Information Processing Systems, 2023.   \n[19] David T. Hoffmann, Simon Schrodi, Jelena Bratuli\u00b4c, Nadine Behrmann, Volker Fischer, and Thomas Brox. Eureka-moments in transformers: Multi-step tasks reveal softmax induced optimization problems. In International Conference on Machine Learning, July 2024.   \n[20] Yifan Hou, Jiaoda Li, Yu Fei, Alessandro Stolfo, Wangchunshu Zhou, Guangtao Zeng, Antoine Bosselut, and Mrinmaya Sachan. Towards a mechanistic interpretation of multi-step reasoning capabilities of language models. In Houda Bouamor, Juan Pino, and Kalika Bali, editors, Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, Singapore, December 2023. Association for Computational Linguistics.   \n[21] Margot E Kaminski. Regulating the risks of ai. Forthcoming, Boston University Law Review, 103:22\u201321, 2023.   \n[22] Olga Kovaleva, Alexey Romanov, Anna Rogers, and Anna Rumshisky. Revealing the dark secrets of BERT. In Kentaro Inui, Jing Jiang, Vincent $\\mathrm{Ng}.$ , and Xiaojun Wan, editors, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 4365\u20134374, Hong Kong, China, November 2019. Association for Computational Linguistics.   \n[23] J\u00e1nos Kram\u00e1r, Tom Lieberum, Rohin Shah, and Neel Nanda. Atp\\*: An efficient and scalable method for localizing llm behaviour to components, 2024.   \n[24] Nayoung Lee, Kartik Sreenivasan, Jason D. Lee, Kangwook Lee, and Dimitris Papailiopoulos. Teaching arithmetic to small transformers, 2023.   \n[25] Michael A. Lepori, Thomas Serre, and Ellie Pavlick. Uncovering intermediate variables in transformers using circuit probing, 2023.   \n[26] Tom Lieberum, Matthew Rahtz, J\u00e1nos Kram\u00e1r, Neel Nanda, Geoffrey Irving, Rohin Shah, and Vladimir Mikulik. Does circuit analysis interpretability scale? evidence from multiple choice capabilities in chinchilla, 2023.   \n[27] Ziming Liu, Ouail Kitouni, Niklas S Nolte, Eric Michaud, Max Tegmark, and Mike Williams. Towards understanding grokking: An effective theory of representation learning. In S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, editors, Advances in Neural Information Processing Systems, volume 35, pages 34651\u201334663. Curran Associates, Inc., 2022.   \n[28] Ziming Liu, Eric J Michaud, and Max Tegmark. Omnigrok: Grokking beyond algorithmic data. In The Eleventh International Conference on Learning Representations, 2023.   \n[29] Ekdeep Singh Lubana, Kyogo Kawaguchi, Robert P. Dick, and Hidenori Tanaka. A percolation model of emergence: Analyzing transformers trained on a formal language, 2024.   \n[30] Arvind V. Mahankali, Tatsunori Hashimoto, and Tengyu Ma. One step of gradient descent is provably the optimal in-context learner with one layer of linear self-attention. In The Twelfth International Conference on Learning Representations, 2024.   \n[31] Jack Merullo, Carsten Eickhoff, and Ellie Pavlick. Circuit component reuse across tasks in transformer language models, 2024.   \n[32] Neel Nanda, Lawrence Chan, Tom Lieberum, Jess Smith, and Jacob Steinhardt. Progress measures for grokking via mechanistic interpretability. In The Eleventh International Conference on Learning Representations, 2023.   \n[33] Neel Nanda, Andrew Lee, and Martin Wattenberg. Emergent linear representations in world models of self-supervised sequence models. In Yonatan Belinkov, Sophie Hao, Jaap Jumelet, Najoung Kim, Arya McCarthy, and Hosein Mohebbi, editors, Proceedings of the 6th BlackboxNLP Workshop: Analyzing and Interpreting Neural Networks for NLP, Singapore, December 2023. Association for Computational Linguistics.   \n[34] Catherine Olsson, Nelson Elhage, Neel Nanda, Nicholas Joseph, Nova DasSarma, Tom Henighan, Ben Mann, Amanda Askell, Yuntao Bai, Anna Chen, Tom Conerly, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds, Danny Hernandez, Scott Johnston, Andy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario Amodei, Tom Brown, Jack Clark, Jared Kaplan, Sam McCandlish, and Chris Olah. In-context learning and induction heads. Transformer Circuits Thread, 2022. https://transformer-circuits.pub/2022/in-context-learning-and-inductionheads/index.html.   \n[35] Anna Rogers, Olga Kovaleva, and Anna Rumshisky. A primer in BERTology: What we know about how BERT works. Transactions of the Association for Computational Linguistics, 8, 2020.   \n[36] Elena Voita, David Talbot, Fedor Moiseev, Rico Sennrich, and Ivan Titov. Analyzing multihead self-attention: Specialized heads do the heavy lifting, the rest can be pruned. In Anna Korhonen, David Traum, and Llu\u00eds M\u00e0rquez, editors, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Florence, Italy, July 2019. Association for Computational Linguistics.   \n[37] Johannes Von Oswald, Eyvind Niklasson, Ettore Randazzo, Joao Sacramento, Alexander Mordvintsev, Andrey Zhmoginov, and Max Vladymyrov. Transformers learn in-context by gradient descent. In Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett, editors, Proceedings of the 40th International Conference on Machine Learning, volume 202 of Proceedings of Machine Learning Research, pages 35151\u201335174. PMLR, 23\u201329 Jul 2023.   \n[38] Boshi Wang, Xiang Yue, Yu Su, and Huan Sun. Grokked transformers are implicit reasoners: A mechanistic journey to the edge of generalization, 2024.   \n[39] Kevin Ro Wang, Alexandre Variengien, Arthur Conmy, Buck Shlegeris, and Jacob Steinhardt. Interpretability in the wild: a circuit for indirect object identification in GPT-2 small. In The Eleventh International Conference on Learning Representations, 2023.   \n[40] Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, R\u00e9mi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. Huggingface\u2019s transformers: State-of-the-art natural language processing, 2020.   \n[41] Zhiwei Xu, Yutong Wang, Spencer Frei, Gal Vardi, and Wei Hu. Benign overftiting and grokking in reLU networks for XOR cluster data. In The Twelfth International Conference on Learning Representations, 2024. [42] Fred Zhang and Neel Nanda. Towards best practices of activation patching in language models: Metrics and methods. In The Twelfth International Conference on Learning Representations,   \n2024. [43] Zhongwang Zhang, Pengxiao Lin, Zhiwei Wang, Yaoyu Zhang, and Zhi-Qin John Xu. Initialization is critical to whether transformers fit composite functions by inference or memorizing,   \n2024. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "table", "img_path": "O9RZAEp34l/tmp/fa589dc7fa26b8b81c2b55e87f19498e7898287aaa7a5f3b05642df8b4df799a.jpg", "table_caption": ["A Copying in Pre\u2013Shift Model "], "table_footnote": ["Table 1: Models at different steps before sudden drop implement copying, predicting the value for mask token at missing entries. "], "page_idx": 14}, {"type": "text", "text": "B Nuclear Norm Minimization ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We use the regularized version of the nuclear norm minimization problem as detailed in Sec. 3.2, and obtain the following $L,L_{o b s},L_{m a s k}$ for various values of $\\lambda$ . We average our results over 256 samples generated in the same way as the training data for BERT (including rounding off to 2 decimal places) for the sake of comparison. ", "page_idx": 14}, {"type": "table", "img_path": "O9RZAEp34l/tmp/1830dcc571fa65b91d90e9da0b3c15c8221973c2a7c60ec3890cecf7ee7f3d82.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "C Embeddings Progress during Training ", "text_level": 1, "page_idx": 14}, {"type": "image", "img_path": "O9RZAEp34l/tmp/1dc14c4eb67b648defea413a1dc302b16033239029e0635704b737d56f289028.jpg", "img_caption": [], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Figure 9: Token embedding structure appears before sudden drop. Projection of token embeddings along principal components of embeddings at step 50000. (Labels same as Fig. 7). Embeddings align with the principal components early on in training before the sudden drop in loss. ", "page_idx": 14}, {"type": "image", "img_path": "O9RZAEp34l/tmp/1e4c7bade5f19c9dabe6ca0b72066d48b30ebbf980032bce4a04cef2bca598a5.jpg", "img_caption": [], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Figure 10: Positional embedding structure appears after sudden drop. Evolution of t-SNE projection of positional embeddings with training. (Labels follow the same color coding as Fig. 7). In this case, the positional embeddings show clustering some time after the sudden drop in loss has occurred at step 15000. ", "page_idx": 14}, {"type": "text", "text": "D Experimental Details ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Online Training In online training, the data is sampled afresh from the distribution at every step.   \nSince data is not partitioned into fixed train and test sets, we only analyze the training loss in all cases. ", "page_idx": 15}, {"type": "text", "text": "Tokenizing Matrices For tokenizing real values, we discretize the range $[-10,10]$ in steps of size $\\epsilon=0.01$ , and assign token IDs starting from 1; the mask token (MASK) is assigned $\\mathbf{ID}\\parallel$ . Input to the model is the tokenized masked sequence $X_{m a s k}=\\mathrm{TOK}\\left(\\mathrm{Vec}(X\\odot\\overset{.}{M})\\right)$ , where $\\odot$ denotes the element-wise product, Vec denotes vectorizing the $n\\times n$ matrix to a $n^{2}$ -dimensional vector, and TOK denotes tokenization. Due to this preprocessing, in all cases $X_{i j}$ is rounded to 2 decimals for computing $L$ . ", "page_idx": 15}, {"type": "text", "text": "E Related Work ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In the online training setup, [5] study the parity learning problem using a variety of model architectures, and show that \u2018hidden progress measures\u2019 can be used to track abrupt changes in model performance during training. [29] study abrupt learning in an autoregressive (GPT), language data setup, connecting learning the grammar to percolation on graphs. [19] discuss abrupt learning dynamics in the context of transformers and claim that the softmax function in Attention leads to longer training loss plateaus \u2013 however, reducing the length of plateau does not explain why the drop in loss is sudden and sharp when it occurs. [43] show that initialization of the model affects whether it learns to infer the compositional structure of the task, or simply memorizes the solution. ", "page_idx": 15}, {"type": "text", "text": "[4] show that in an in\u2013context learning framework, a transformer based model can learn to select the most optimal statistical method for solving the task in the prompt, without explicitly being provided any information about the optimal method (called \u2018in\u2013context algorithm selection\u2019 in their work). We emphasize that our setup is not in\u2013context learning, and is quite distinct from [4] as far as the task being solved is concerned. However, whether the framework of layer-wise in-context gradient descent can also be used in our setup is a plausible and open direction for future work. ", "page_idx": 15}, {"type": "text", "text": "In [7], the author shows empirically that an encoder-decoder transformer can be trained to solve various linear algebraic tasks, such as eigendecomposition, SVD, matrix inverse etc. They support their findings by showing that the model generalizes to matrix distributions outside the training distribution to some extent, and that OOD performance can be improved by training on non-Wigner matrices. While many experiments in [7] also show a sudden jump in accuracy (Fig 1,2), they do not analyze why such a sudden jump occurs during optimization. In our work, we analyze the sudden drop and the model before and after it to derive insights into the sudden drop in loss in our setup. ", "page_idx": 15}, {"type": "text", "text": "[24] show that even a small transformer model can be trained to perform arithmetic operations like add, subtract, multiply accurately through appropriate data selection and formatting, and using Chain-of-Thought prompting. They further show that learning addition is connected to rank-2 matrix completion, and that the sudden jump in accuracy with increasing number of observed entries of the matrix is recovered when their model is trained on datasets of different sizes. This is because the size of the dataset for addition can be seen as the number of observed entries of the rank-2 matrix representing the addition table. We point out that while the task in this case is related to matrix completion, ours is a completely different setup, where the sudden drop happens with the number of training steps with each step consisting of 256 low-rank matrices, each with a fixed fraction $\\left(p_{\\mathrm{mask}}\\right)$ of observed entries. ", "page_idx": 15}, {"type": "text", "text": "F Causal Intervention on Attention heads ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In the uniform ablation setup, it is possible that setting the softmax probabilities to a given value might change the distribution of resultant hidden states, and consequently degrade model performance. A more principled technique to analyze the effect of a specific component is to replace the hidden state just after that component by hidden states on a different input, and analyze how this affects the final output [42]. In our case, we intervene on attention heads by replacing the hidden state after an attention head for input matrix $X$ by the hidden state for input $(-X)$ . Importantly, this change does not affect properties like rank of the input, and hence the hidden states obtained are from the same distribution as those for input $X$ . ", "page_idx": 15}, {"type": "text", "text": "Step 1 Extract the hidden states for all attention layers from the model on some input matrix $X$ ; call these $h_{+}$ . Concretely, these hidden states are obtained just after the matrix product of the softmax attention probabilties and the value matrix and hence before the output matrix product.   \nStep 2 Change the input to the model to $-X$ , however, also replace the hidden states just after the attention layers with $h_{+}$ obtained in Step 1. Call the output of the model in this setup as $f_{p}(-X,X)$ . ", "page_idx": 16}, {"type": "text", "text": "We observe that, the MSE between $f_{p}(-X,X)$ and $X$ , averaged over 256 samples at masked positions is approximately 0.014 (this is comparable to optimal $L_{m a s k}$ ), compared to the MSE between $f_{p}(-\\bar{X},X)$ and $-X$ being 0.8066. This demonstrates that the attention heads are causally relevant to the model output for missing entries. ", "page_idx": 16}, {"type": "text", "text": "G Autoregressive Setup ", "text_level": 1, "page_idx": 16}, {"type": "image", "img_path": "O9RZAEp34l/tmp/d28290e7c2b02cad8a902dc92d6d3cab9704f9cdf92dd2fd2830b0a3898cd407.jpg", "img_caption": ["Figure 11: GPT also shows abrupt learning for matrix completion. Training a 2\u2013layer, 2\u2013head GPT model on $7\\times7$ , rank\u22122 matrices in the autoregressive training setup. Here, the model is trained using cross\u2013entropy loss in a next\u2013token prediction setup over full input sequences of the form $\\tilde{X}_{11},\\tilde{\\tilde{X}}_{12},\\dots,\\tilde{X}_{77}$ , [SEP], $X_{11},X_{12},\\ldots,X_{77}$ where $\\tilde{X},\\bar{X}$ are partially observed and fully observed matrices, flattened and tokenized as in the BERT experiments. We find that the sudden drop corresponds to the model learning to copy the observed entries in the input matrix. While we could not achieve performance comparable to BERT for missing entries, we believe it should be possible with some modifications to the training setup. "], "img_footnote": [], "page_idx": 16}, {"type": "image", "img_path": "O9RZAEp34l/tmp/34fb4b2d891f09ce88fb2aceb05faa4ea9890572e4637715a2f247b95b30bd5a.jpg", "img_caption": ["Figure 12: Attention heads demonstrate sudden change in matrix completion using GPT. We find that even in the GPT case, the attention heads change from trivial (Layer 2, attending to the [SEP] token for all positions in the output) to those in Layer 1 attending to the corresponding positions in the input (\u223cidentity maps). This corroborates with our finding about the model learning to copy observed entries after the sudden drop, in Fig. 11. "], "img_footnote": [], "page_idx": 16}, {"type": "image", "img_path": "O9RZAEp34l/tmp/8f35e87dd5b375098d7ab1f31fc5b3726bbc2ba91f5e049977f78ab95c34c1c1.jpg", "img_caption": ["Figure 13: Effect of model width. Training with different model widths (hidden state dimensionality) on $7\\times7$ rank\u22122 inputs. The plot demonstrate that $d=64$ is too small to obtain accurate matrix completion, and that the performance is sub\u2013optimal for $d=128$ . We scale the hidden layer width of the 2\u2212layer MLPs as $4d$ , as is done in practice. "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "O9RZAEp34l/tmp/4986a49d0ab0de30c7bd2ba2cf3dd3bed6ebf3411769b06ff46cf648003099ab.jpg", "img_caption": ["Figure 14: Effect of model depth. Training with different model depths (number of layers) on $7\\times7$ rank\u22122 inputs. The plot demonstrate that as depth increases from 4 to 6, the sudden drop occurs earlier, but increasing depth beyond this (8, 12) has little effect. The final MSE obtained also follows the intuitive ordering (largest for $L=4$ decreasing with $L$ upto $L=12$ ; though the variation is not significant. "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "O9RZAEp34l/tmp/61fc25cc4c5eecd81db049b477cca2e365adb7c9f7d70b8b04727df9fb3ed904.jpg", "img_caption": [], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "Figure 15: Using 1 attention head per layer. We find that training a 12\u2212layer, 1\u2212head BERT model on matrix completion leads to similar loss (4e\u22123) and attention heads as the 4\u2212layer, 8\u2212head model. ", "page_idx": 17}, {"type": "text", "text": "I Effect of Matrix Size and Rank on Training ", "text_level": 1, "page_idx": 18}, {"type": "image", "img_path": "O9RZAEp34l/tmp/d95fb10e147b65bd99f93e54a076ea725acb25ad22d50abba5243ef3e31c9c89.jpg", "img_caption": ["Figure 16: Learning order when trained on mixture of matrices. Training on uniform mixture of $5\\times5,7\\times7$ and $9\\times9$ rank\u22121 matrices i.e., at each step, 256 samples of size $n\\times n$ , with $n$ chosen randomly from $\\lbrace5,7,9\\rbrace$ . The plots show the test set MSE on separate 256 samples of the 3 different matrix sizes. "], "img_footnote": [], "page_idx": 18}, {"type": "image", "img_path": "O9RZAEp34l/tmp/fbd3504c124902fa8f9f369b234cea9871bdf0d0ae6f50cf5f8c3c7fcbf1c4bf.jpg", "img_caption": ["Figure 17: Effect of problem complexity. Training a 12\u2212layer, 12\u2212head model on $10\\times10$ matrices of rank $r\\,=\\,1,2,3$ . There is a clear progression in terms of the training step where sudden drop occurs, and the final loss values scale roughly as $L\\sim c\\cdot10^{r}$ , $c\\approx2\\times10^{-6}$ . This also predicts that $L\\sim0.02$ for $r=4$ , i.e. the model does not solve matrix completion to low MSE, which is what we also observe in practice. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "J Effect of Input Distribution ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "J.1 Training ", "page_idx": 19}, {"type": "image", "img_path": "O9RZAEp34l/tmp/6e463a7f6bf16dab3ff556c170a24babf8d4785e4f3cd4fc32079f75d7041c7d.jpg", "img_caption": ["Figure 18: Sudden drop is not limited to uniform distribution. Training on i.i.d. ${\\mathcal{N}}(0,1)$ entries. We find that the sudden drop also occurs in this case, and the final loss value $\\sim5.6\\times10^{-3}$ , similar to the value obtained for i.i.d. Uniform $[-1,1]$ entries. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "J.2 Inference ", "text_level": 1, "page_idx": 19}, {"type": "image", "img_path": "O9RZAEp34l/tmp/09beea43ad683f7fdf484df617e07a525b48c7207694f5fe4f16af4bcfb2bcb0.jpg", "img_caption": ["Figure 19: Model performs similar to nuclear norm minimization on OOD samples. OOD performance at inference for various values of rank, number of rows and columns of the input matrix. Except (c), the OOD performance of the model is close to the nuclear norm minimization solution for the same inputs. For (c), since we observed that positional embeddings depend on the column of the element, changing the number of columns adversely affects performance. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Matrix Distribution We also change the input distribution of the matrix entries to Gaussian and Laplace, and measure average MSE over 1024 samples of size $7\\times7$ and rank $-2$ , to evaluate the OOD performance of the trained model. We find that ", "page_idx": 19}, {"type": "text", "text": "\u2022 for entries i.i.d. $\\sim\\mathcal{N}(0,0.25)$ , $L\\approx4\\times10^{-3}$ , and \u2022 for entries i.i.d. $\\sim\\mathrm{Laplace}(0,0.25)$ , (parameterized by mean and scale), $L\\approx2\\times10^{-3}$ . ", "page_idx": 19}, {"type": "text", "text": "That is, the OOD performance on these distributions is similar to the MSE obtained for the in\u2013training distribution $(\\mathrm{Uniform}[-1,1])$ . ", "page_idx": 19}, {"type": "text", "text": "K Probing: Additional Results ", "text_level": 1, "page_idx": 20}, {"type": "image", "img_path": "O9RZAEp34l/tmp/6e15662f6f9cf368dc4c0dbdb500003d08634e4eccd6ade282a0fa43ae8a36d2.jpg", "img_caption": ["Figure 20: Hidden states encode the true value at missing entries. Probing for the corresponding element in the fully observed matrix $X$ . (Left) comparing the train and test MSE of the linear probe, to confirm that the probe does not overfit. (Right) Test MSE evaluated on the masked elements, that shows an interesting variation: the MSE goes down at a nonlinear rate, hinting that implicit layer\u2013wise optimization could be taking place. "], "img_footnote": [], "page_idx": 20}, {"type": "image", "img_path": "O9RZAEp34l/tmp/4c56aba560d24a2cef6b5d0e53b2db0303fdba08ecd16a2c95cbe8d6c03a3142.jpg", "img_caption": ["Figure 21: Model does not encode singular vectors in hidden states. Probing for the first left singular vector at all positions; that is, for fully observed input matrix $X\\ \\in\\ {\\mathrm{\\bar{R}}}^{n\\times n}$ with SVD $\\Breve{\\boldsymbol{X}}\\Breve{=}\\boldsymbol{U}\\Breve{\\boldsymbol{\\Sigma}}\\boldsymbol{V}^{\\top}$ , we probe for $u\\,=\\,[U_{11},U_{21},\\ldots,\\mathbf{\\dot{\\boldsymbol{U}}}_{n1}]^{\\top}\\,\\in\\,\\mathbb{R}^{n}$ . (Left) Train and Test MSE across different layers of the model; (Right) Average Absolute Cosine similarity of the predicted $u$ with the actual $u$ . Both evaluations are inconclusive, since the MSE is too large, and the cosine similarity is not much larger than the average absolute cosine similarity $(\\approx0.3)$ between 2 i.i.d. vectors $\\sim\\mathcal{N}(0,I_{7\\times7})\\in\\tilde{\\mathbb{R}}^{7}$ "], "img_footnote": [], "page_idx": 20}, {"type": "table", "img_path": "O9RZAEp34l/tmp/8abc66c142c54a11e836d2f1f41116d9188bbd2bba9d787cd855c100668fe2e6.jpg", "table_caption": ["L Ablating Groups of Structured Attention Heads "], "table_footnote": [], "page_idx": 20}, {"type": "text", "text": "M Attention Heads ", "text_level": 1, "page_idx": 21}, {"type": "image", "img_path": "O9RZAEp34l/tmp/7e78dc66449b1d581a31200606c0e628d45c57d23775790af17642d94a5e90e6.jpg", "img_caption": ["M.1 Variation along training "], "img_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "O9RZAEp34l/tmp/35b0f7de08a4f2ca1c0568a49079c75a3a5712a3ce19c40e81b03ed2e8a7828b.jpg", "img_caption": ["Figure 22: Attention heads across various training steps. "], "img_footnote": [], "page_idx": 22}, {"type": "image", "img_path": "O9RZAEp34l/tmp/14f61f9d71f5603c229d3a4e83a5bc6f2909cd69c6c71690f61de09c091acd1a.jpg", "img_caption": ["M.2 Effect of changing mask structure ", "Figure 23: Attention heads and corresponding masks; blue denotes masked position in the input matrix. "], "img_footnote": [], "page_idx": 23}, {"type": "image", "img_path": "O9RZAEp34l/tmp/af3535c630592d1a7344a27fd3a7e005fdd100822660b0f9c472d4a7db1be7db.jpg", "img_caption": ["N Attention Heads for larger inputs ", "Figure 24: Attention heads in 12 layers, 12\u2013heads model on $7\\times7$ rank\u20132 input "], "img_footnote": [], "page_idx": 24}, {"type": "image", "img_path": "O9RZAEp34l/tmp/21534abb87bab7cdafa12222457372b8691ad7e258f9479d54a3394648dfc425.jpg", "img_caption": ["Figure 25: Attention heads in 12 layers, 12\u2013heads model on $12\\times12$ rank\u20133 input "], "img_footnote": [], "page_idx": 25}, {"type": "image", "img_path": "O9RZAEp34l/tmp/4b6f00df200a69e1c315edd154c3a1eff0bf35d90192f274defe093e701f24cb.jpg", "img_caption": ["Figure 26: Attention heads in 12 layers, 12\u2013heads model on $15\\times15$ rank\u20134 input "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: We have accurately listed our main claims in line with the actual contribution of this work. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 27}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Justification: We have discussed limitations of our work in Section 6. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 27}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: There are no theoretical results in this work. Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 28}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Justification: We describe our training experiment details in Section 2.2, and other experiment details are provided wherever relevant. Link to the code is available in Sec. 2.2. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 28}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: Link to the code is available in Sec. 2.2, and a README file is included to help run experiments. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 29}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: We provide all such experimental details in Sec. 2.2. Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 29}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [No] ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Justification: Due to computational issues, we do not report error bars for our training experiments at this time. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 29}, {"type": "text", "text": "", "page_idx": 30}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We discuss compute resource usage in Sec. 2.2. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 30}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: Our work conforms to the NeurIPS Code of Ethics. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 30}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We discuss societal impact of our work in the conclusion (Sec. 6). ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 30}, {"type": "text", "text": "", "page_idx": 31}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: Risk of misuse in our case does not apply, since our work involves interpretability analyses of a BERT model on a mathematical problem. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 31}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We have mainly used the BERT model implementation from Huggingface (cited in Sec. 2.2) and CVXPY (cited in Sec. 3.2). We have not used other existing code (except libraries or frameworks available publicly), data or models. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 32}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: Code released for this paper (Sec. 2.2) is accompanied by a README flie that details how to reproduce empirical observations. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 32}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: This work does not involve crowdsourcing or research with human subjects. Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 32}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: This work does not involve crowdsourcing or research with human subjects. Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 32}]