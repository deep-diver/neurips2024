[{"type": "text", "text": "NeuralFuse: Learning to Recover the Accuracy of Access-Limited Neural Network Inference in Low-Voltage Regimes ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Hao-Lun Sun1, Lei Hsiung2, Nandhini Chandramoorthy3, Pin-Yu Chen3, Tsung-Yi Ho4 ", "page_idx": 0}, {"type": "text", "text": "1 National Tsing Hua University 2 Dartmouth College 3 IBM Research 4 The Chinese University of Hong Kong s109062594@m109.nthu.edu.tw lei.hsiung.gr@dartmouth.edu {pin-yu.chen, nandhini.chandramoorthy}@ibm.com tyho@cse.cuhk.edu.hk ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Deep neural networks (DNNs) have become ubiquitous in machine learning, but their energy consumption remains problematically high. An effective strategy for reducing such consumption is supply-voltage reduction, but if done too aggressively, it can lead to accuracy degradation. This is due to random bit-filps in static random access memory (SRAM), where model parameters are stored. To address this challenge, we have developed NeuralFuse, a novel add-on module that handles the energy-accuracy tradeoff in low-voltage regimes by learning input transformations and using them to generate error-resistant data representations, thereby protecting DNN accuracy in both nominal and low-voltage scenarios. As well as being easy to implement, NeuralFuse can be readily applied to DNNs with limited access, such cloud-based APIs that are accessed remotely or non-configurable hardware. Our experimental results demonstrate that, at a $1\\%$ bit-error rate, NeuralFuse can reduce SRAM access energy by up to $24\\%$ while recovering accuracy by up to $57\\%$ . To the best of our knowledge, this is the first approach to addressing low-voltage-induced bit errors that requires no model retraining. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Energy-efficient computing is of primary importance to the effective deployment of deep neural networks (DNNs), particularly in edge devices and in on-chip AI systems. Increasing DNN computation\u2019s energy efficiency and lowering its carbon footprint require iterative efforts from both chip designers and algorithm developers. Processors with specialized hardware accelerators for AI computing, capable of providing orders of magnitude better performance and energy efficiency for AI computation, are now ubiquitous. However, alongside reduced precision/quantization and architectural optimizations, endowing such systems with the capacity for low-voltage operation is a powerful lever for reducing their power consumption. ", "page_idx": 0}, {"type": "text", "text": "The computer engineering literature contains ample evidence of the effects of undervolting and low-voltage operation on accelerator memories that store weights and activations during computation. Aggressive scaling-down of static random access memory\u2019s (SRAM\u2019s) supply voltage to below the rated value saves power, thanks to the quadratic dependence of dynamic power on voltage. Crucially, ", "page_idx": 0}, {"type": "image", "img_path": "npoHt6WV1F/tmp/bba5075eb4aee43ed0e4860f65f772aa9ea730c748c54a42c78df36a7e364397.jpg", "img_caption": ["(a) The pipeline of the NeuralFuse framework at inference. (b) Energy/accuracy tradeoff example. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "Figure 1: (a) At inference, NeuralFuse transforms input samples $\\mathbf{x}$ into robust data representations. The nominal voltage allows models to work as expected, whereas at low voltage, one would encounter bit errors (e.g., $1\\bar{\\%}$ ) that cause incorrect inferences. The percentages reflect the accuracy of a CIFAR10 pre-trained ResNet18 with and without NeuralFuse in both those voltage cases. (b) On the same base model (ResNet18), we illustrate the energy/accuracy tradeoff of six NeuralFuse implementations. The $\\mathbf{X}$ -axis represents the percentage reduction in dynamic-memory access energy at low-voltage settings (base model protected by NeuralFuse), as compared to the bit-error-free (nominal) voltage. The y-axis represents the perturbed accuracy (evaluated at low voltage) with a $1\\%$ bit-error rate. ", "page_idx": 1}, {"type": "text", "text": "however, it also leads to an exponential increase in bit failures. Memory bit flips cause errors in the stored weight and activation values [Chandramoorthy et al., 2019, Ganapathy et al., 2017], leading to catastrophic accuracy loss. ", "page_idx": 1}, {"type": "text", "text": "A recent wave of research has proposed numerous techniques for allowing low-voltage operation of DNN accelerators while preserving their accuracy. Most of these have been either hardware-based error-mitigation techniques or error-aware robust training of DNN models. On-chip error mitigation methods have significant performance and power overheads [Chandramoorthy et al., 2019, Reagen et al., 2016]. On the other hand, some have proposed to generate models that are robust to bit errors via a specific learning algorithm [Kim et al., 2018, Koppula et al., 2019, Stutz et al., 2021], thereby eliminating the need for on-chip error mitigation. However, error-aware robust training to find the optimal set of robust parameters for each model is time- and energy-intensive and may not be possible in all access-limited settings. ", "page_idx": 1}, {"type": "text", "text": "In this paper, therefore, we propose a novel model-agnostic approach: NeuralFuse. This proof-ofconcept machine-learning module offers trainable input transformation parameterized by a relatively small DNN; and, by enhancing input\u2019s robustness, it mitigates bit errors caused by very low-voltage operation, thus serving the wider goal of more accurate inferencing. The pipeline of NeuralFuse is illustrated in Figure 1. To protect the deployed models from making wrong predictions under low-power conditions, NeuralFuse accepts scenarios under access-limited neural networks (e.g., non-configurable hardware or cloud-based APIs). Specifically, we consider two access-limited scenarios that are common in the real world: 1) relaxed access, in which \u2018black box\u2019 model details are unknown, but backpropagation through those models is possible; and 2) restricted access, in which the model details are unknown and backpropagation is disallowed. To enable it to deal with relaxed access, we trained NeuralFuse via backpropagation, and for restricted-access cases, we trained it on a white-box surrogate model. To the best of our knowledge, this is the first study that leverages a learning-based method to address random bit errors as a means of recovering accuracy in low-voltage and access-limited settings. ", "page_idx": 1}, {"type": "text", "text": "We summarize our main contributions as follows: ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "\u2022 We propose NeuralFuse, a novel learning-based input-transformation module aimed at enhancing the accuracy of DNNs that are subject to random bit errors caused by very low voltage operation. NeuralFuse is model-agnostic, i.e., operates on a plug-and-play basis at the data-input stage and does not require any re-training of deployed DNN models.   \n\u2022 We explore two practical limited-access scenarios for neural-network inference: relaxed access and restricted access. In the former setting, we use gradient-based methods for module training. In the latter one, we use a white-box surrogate model for training, which is highly transferable to other types of DNN architecture.   \n\u2022 We report the results of an extensive program of experiments with various combinations of DNN models (ResNet18, ResNet50, VGG11, VGG16, and VGG19), datasets (CIFAR-10, CIFAR-100, ", "page_idx": 1}, {"type": "text", "text": "GTSRB, and ImageNet-10), and NeuralFuse implementations of different architectures and sizes. These show that NeuralFuse can consistently increase the perturbed accuracy (accuracy evaluated under random bit errors in weights) by up to $57\\%$ , while simultaneously saving up to $24\\%$ of the energy normally required for SRAM access, based on our realistic characterization of bit-cell failures for a given memory array in a low-voltage regime inducing a $0.5\\%/1\\%$ bit-error rate. ", "page_idx": 2}, {"type": "text", "text": "\u2022 We demonstrate NeuralFuse\u2019s transferability (i.e., adaptability to unseen base models), versatility (i.e., ability to recover low-precision quantization loss), and competitiveness (i.e., state-of-the-art performance) in various scenarios, establishing it as a promising proof-of-concept for energyefficient, resilient DNN inference. ", "page_idx": 2}, {"type": "text", "text": "2 Related Work and Background ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Software-based Energy-saving Strategies. Various recent studies have proposed software-based methods of reducing computing\u2019s energy consumption. For instance, quantization techniques have been reported to reduce the precision required for storing model weights, and thus to decrease total memory storage [Gong et al., 2014, Rastegari et al., 2016, Wu et al., 2016]. On the other hand, Yang et al. [2017] - who proposed energy-aware pruning on each layer and fine-tuning of weights to maximize final accuracy - suggested several ways to reduce DNNs\u2019 energy consumption. For example, they devised the ECC framework, which compresses DNN models to meet a given energy constraint [Yang et al., 2019a], and a method of compressing such models via joint pruning and quantization [Yang et al., 2020]. It is also feasible, during DNN training, to treat energy constraints as an optimization problem and thereby reduce energy consumption while maximizing training accuracy [Yang et al., 2019b]. However, unlike ours, all these methods imply changing either model architectures or model weights. ", "page_idx": 2}, {"type": "text", "text": "Hardware-based Energy-saving Strategies. Prior studies have also explored ways of improving energy efficiency via specially designed hardware. Several of them have focused on the undervolting of DNN accelerators and proposed methods to maintain accuracy in the presence of bit errors. For instance, Reagen et al. [2016] proposed an SRAM fault-mitigation technique that rounds faulty weights to zero to avoid degradation of prediction accuracy. Srinivasan et al. [2016] recommended storing sensitive MSBs (most significant bits) in robust SRAM cells to preserve accuracy. Chandramoorthy et al. [2019] proposed dynamic supply-voltage boosting to improve the resilience of memory-access operations; and the learning-based approach proposed by Stutz et al. [2021] aims to find models that are robust to bit errors. The latter paper discusses several techniques for improving such robustness, notably quantization, weight-clipping, random bit-error training, and adversarial bit-error training. Its authors concluded from their experiments that a combination of quantization, weight-clipping, and adversarial bit-error training will yield excellent performance. However, they also admitted that the relevant training process was sensitive to hyperparameter settings, and hence, it might come with a challenging training procedure. ", "page_idx": 2}, {"type": "text", "text": "However, we suggest that all the methods mentioned above are difficult to implement and/or unsuitable for use in real-world access-limited settings. For example, the weights of DNN models packed on embedded systems may not be configurable or updatable, making model retraining (e.g., Stutz et al. [2021]) non-viable in that scenario. Moreover, DNN training is already a tedious and time-consuming task, so adding error-aware training to it may further increase its complexity and, in particular, make hyperparameter searches more challenging. \u00d6zdenizci and Legenstein [2022] also reported that error-aware training was ineffective for large DNNs with millions of bits. NeuralFuse obviates the need for model retraining via an add-on trainable input-transformation function parameterized by a relatively small secondary DNN. ", "page_idx": 2}, {"type": "text", "text": "SRAM Bit Errors in DNNs. Low voltage-induced memory bit-cell failures can cause bit-flips from 0 to 1 and vice versa. In practice, SRAM bit errors increase exponentially when the supply voltage is scaled below $V_{m i n}$ , i.e., the minimum voltage required to avoid them. This phenomenon has been studied extensively in the prior literature, including work by Chandramoorthy et al. [2019] and Ganapathy et al. [2017]. The specific increases in bit errors as voltage scales down, in the case of an SRAM array of $512\\times64$ bits with a $14\\mathrm{nm}$ technology node, is illustrated in Figure 2. The corresponding dynamic energy per SRAM read access, measured at each voltage at a constant frequency, is shown on the right-hand side of the figure. In this example, accessing the SRAM at ", "page_idx": 2}, {"type": "image", "img_path": "npoHt6WV1F/tmp/72b833f3229f52d4923c516eeab8d64380f48f9d89457b36c6654eff2babf742.jpg", "img_caption": ["Figure 2: The bit-error rates (left) and dynamic energy per memory access versus voltage for static random access memory arrays (right) as reported by Chandramoorthy et al. [2019]. The $\\mathbf{X}$ -axis shows voltages normalized with respect to the minimum bit error-free voltage $(V_{m i n})$ . "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "$0.83V_{m i n}$ leads to a $1\\%$ bit-error rate, and at the same time, dynamic energy per access is reduced by approximately $30\\%$ . This can lead to DNNs making inaccurate inferences, particularly when bit-filps occur at the MSBs. However, improving robustness to bit errors can allow us to lower $V_{m i n}$ and exploit the resulting energy savings. ", "page_idx": 3}, {"type": "text", "text": "It has been observed that bit-cell failures for a given memory array are randomly distributed and independent of each other. That is, the spatial distribution of bit-flips can be assumed to be random, as it generally differs from one array to another, within as well as between chips. Below, following Chandramoorthy et al. [2019], we model bit errors in a memory array of a given size by generating a random distribution of such errors with equal likelihood of 0-to-1 and 1-to-0 bit-filpping. More specifically, we assume that the model weights are quantized to 8-bit precision (i.e., from 32-bit floats to 8-bit integers), and generate perturbed models by injecting our randomly distributed bit errors into the two\u2019s complement representation of weights. For more implementation details, please refer to Section 4.1. ", "page_idx": 3}, {"type": "text", "text": "3 NeuralFuse: Framework and Algorithms ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "3.1 Error-Resistant Input Transformation ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "As illustrated in Figure 1, we propose a novel trainable input-transformation module, NeuralFuse, parametrized by a relatively small DNN, to mitigate the accuracy-energy tradeoff for model inference and thus overcome the drawback of performance degradation in low-voltage regimes. A specially designed loss function and training scheme are used to derive NeuralFuse and apply it to the input data such that the transformed inputs will become robust to low voltage-induced bit errors. ", "page_idx": 3}, {"type": "text", "text": "Consider the input $\\mathbf{x}$ sampled from the data distribution $\\mathcal{X}$ and a set of models $\\mathcal{M}_{p}$ with $p\\%$ random bit errors on weights (i.e., perturbed models). When it is not manifesting any bit errors (i.e., at normal-voltage settings), the perturbed model operates as a nominal deterministic one, denoted by $M_{0}$ . NeuralFuse aims to ensure that a model $M_{p}\\,\\in\\,\\mathcal{M}_{p}$ can make correct inferences on the transformed inputs while also delivering consistent results in its $M_{0}$ state. To adapt to various data characteristics, NeuralFuse \u2013 designated as $\\mathcal{F}$ in Eq. (1), below \u2013 is designed to be input-aware. This characteristic can be formally defined as ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{F}(\\mathbf{x})=\\mathrm{clip}_{[-1,1]}\\big(\\mathbf{x}+\\mathcal{G}(\\mathbf{x})\\big),}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathcal G(\\ensuremath{\\mathbf{x}})$ is a \u201cgenerator\u201d (i.e., an input-transformation function) that can generate a perturbation based on input $\\mathbf{x}$ . As transformed by NeuralFuse, i.e., as ${\\mathcal{F}}(\\mathbf{x})$ , that input is passed to the deployed model $M_{0}$ or $M_{p}$ ) for final inference. Without loss of generality, we assume the transformed input lies within a scaled input range $\\mathcal{F}(\\cdot)\\in[-1,1]^{d}$ , where $d$ is the (flattened) dimension of $\\mathbf{x}$ . ", "page_idx": 3}, {"type": "text", "text": "3.2 Training Objective and Optimizer ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "To train our generator $\\mathcal{G}(\\cdot)$ , which ought to be able to ensure the correctness of both the perturbed model $M_{p}$ and the clean model $M_{0}$ , we parameterized it with a neural network and apply our training objective function ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\arg\\operatorname*{max}_{\\mathcal{W}_{\\mathcal{G}}}\\log\\mathcal{P}_{M_{0}}(y|\\mathcal{F}(\\mathbf{x};\\mathcal{W}_{\\mathcal{G}}))+\\lambda\\cdot\\mathbf{E}_{M_{p}\\sim\\mathcal{M}_{p}}[\\log\\mathcal{P}_{M_{p}}(y|\\mathcal{F}(\\mathbf{x};\\mathcal{W}_{\\mathcal{G}}))],\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathcal{W}_{\\mathcal{G}}$ is the set of trainable parameters for $\\mathcal{G};\\boldsymbol{y}$ is the ground-truth label of x; $\\mathcal{P}_{M}$ denotes the likelihood of $y$ as computed by a model $M$ being given a transformed input $\\mathcal{F}(\\mathbf{x};\\mathcal{W}_{\\mathcal{G}})$ ; $\\mathcal{M}_{p}$ is the distribution of the perturbed models inherited from the clean model $M_{0}$ , under a $p\\%$ random bit-error rate; and $\\lambda$ is a hyperparameter that balances the importance of the nominal and perturbed models. ", "page_idx": 4}, {"type": "text", "text": "The training objective function can be readily converted to a loss function $(\\mathcal{L})$ that evaluates crossentropy between the ground-truth label $y$ and the prediction $\\mathcal{P}_{M}(y|\\mathcal{F}(\\mathbf{x};\\mathcal{W}_{\\mathcal{G}})$ . That is, the total loss function can be calculated as ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{Total}}=\\mathcal{L}_{M_{0}}+\\lambda\\cdot\\mathcal{L}_{\\mathcal{M}_{p}}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In particular, optimizing the loss function requires evaluation of the impact of the loss term $\\mathcal{L}_{\\mathcal{M}_{p}}$ on randomly perturbed models. Our training process is inspired by expectation over transformation (EOT) attacks [Athalye et al., 2018], which aim to produce robust adversarial examples that are simultaneously adversarial over the entire transformation distribution. Based on that idea, we propose a new optimizer for solving Eq. (3), which we call expectation over perturbed models (EOPM). EOPM-trained generators can generate error-resistant input transformations and mitigate inherent bit errors. However, it would be computationally impossible to enumerate all possible perturbed models with random bit errors, and the number of realizations for perturbed models is constrained by the memory size of the GPUs used for training. In practice, therefore, we only use $N$ perturbed models per iteration to calculate empirical average loss, i.e., ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathcal{M}_{p}}\\approx\\frac{\\mathcal{L}_{M_{p_{1}}}+\\cdot\\cdot\\cdot+\\mathcal{L}_{M_{p_{N}}}}{N},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $N$ is the number of perturbed models $\\{M_{p_{1}},\\cdot\\cdot\\cdot,M_{p_{N}}\\}$ that are simulated to calculate the loss caused by random bit errors. Therefore, the gradient used to update the generator can be calculated as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\frac{\\partial\\mathcal{L}_{\\mathrm{Total}}}{\\partial\\mathcal{W}_{\\mathcal{G}}}=\\frac{\\partial\\mathcal{L}_{M_{0}}}{\\partial\\mathcal{W}_{\\mathcal{G}}}+\\frac{\\lambda}{N}\\left(\\frac{\\partial\\mathcal{L}_{M_{p_{1}}}}{\\partial\\mathcal{W}_{\\mathcal{G}}}+\\cdot\\cdot\\cdot+\\frac{\\partial\\mathcal{L}_{M_{p_{N}}}}{\\partial\\mathcal{W}_{\\mathcal{G}}}\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Through our implementation, we found that stable performance could be delivered when $N=10$ , and that there was little to be gained by using a larger value. The results of our ablation study for different values of $N$ can be found in Appendix E. ", "page_idx": 4}, {"type": "text", "text": "3.3 Training Algorithm ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Algorithm 1 in Appendix A summarizes NeuralFuse\u2019s training steps. Briefly, this involves splitting the training data $\\mathcal{X}$ into $B$ mini-batches for training the generator in each epoch. For each mini-batch, we first feed these data into $\\mathcal F(\\cdot)$ to obtain the transformed inputs. Also, we simulate $N$ perturbed models using a $p\\%$ random bit-error rate, denoted by $M_{p_{1}},\\cdots\\,,M_{p_{N}}$ , from $\\mathcal{M}_{p}$ . Then, the transformed inputs are fed into those $N$ perturbed models as well as into the clean model $\\mathcal{M}_{\\mathrm{0}}$ , and their respective losses and gradients are calculated. Finally, NeuralFuse parameters $\\mathcal{W}_{\\mathcal{G}}$ are updated based on the gradient obtained by EOPM. ", "page_idx": 4}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "4.1 Experiment Setups ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Datasets. We evaluate NeuralFuse on four different datasets: CIFAR-10 [Krizhevsky and Hinton, 2009], CIFAR-100 [Krizhevsky and Hinton, 2009], the German Traffic Sign Recognition Benchmark (GTSRB) [Stallkamp et al., 2012], and ImageNet-10 [Deng et al., 2009]. CIFAR-10 consists of 10 classes, with 50,000 training images and 10,000 testing images in total. Similarly, CIFAR-100 consists of 100 classes, with 500 training images and 100 testing images in each. The GTSRB contains 43 classes with a total of 39,209 training images and 12,630 testing images. Similar to CIFAR-10 and CIFAR-100, we resize GTSRB into $32\\!\\times\\!32\\!\\times\\!3$ in our experiment. For ImageNet-10, we chose the same ten categories as Huang et al. [2022], in which there are 13,000 training images and 500 test images cropped into $224\\!\\times\\!224\\!\\times\\!3$ . Due to space limitations, our CIFAR-100 results are presented in Appendices F and G. ", "page_idx": 4}, {"type": "text", "text": "Base Models. We selected several common architectures for our base models: ResNet18, ResNet50 [He et al., 2016], VGG11, VGG16, and VGG19 [Simonyan and Zisserman, 2015]. To replicate the deployment of models on chips, all our based models were given quantization-aware training that followed Stutz et al. [2021]. ", "page_idx": 4}, {"type": "text", "text": "NeuralFuse Generators. The architecture of the NeuralFuse generator $(\\mathcal G)$ ) is based on an encoderdecoder structure. We designed and compared three types of generators, namely convolution-based, deconvolution-based, and UNet-based. We also considered large(L)/small(S) network sizes for each type. Further details can be found below and in Appendix B. ", "page_idx": 5}, {"type": "text", "text": "\u2022 Convolution-based (Conv). Conv uses convolution with MaxPool layers for its encoder and convolution with UpSample layers for its decoder. This architecture has previously been shown to be efficient and effective at generating input-aware backdoor triggers [Nguyen and Tran, 2020].   \n\u2022 Deconvolution-based (DeConv). DeConv uses convolution with MaxPool layers for its encoder and deconvolution layers for its decoder. We expected this modification both to enhance its performance and to reduce its energy consumption.   \n\u2022 UNet-based (UNet). UNet uses convolution with MaxPool layers for its encoder, and deconvolution layers for its decoder. UNet is known for its robust performance in image segmentation [Ronneberger et al., 2015]. ", "page_idx": 5}, {"type": "text", "text": "Energy-consumption Calculation. The energy consumption reported in Figure 1 is based on the product of the total number of SRAM memory accesses in a systolic array-based convolution neural network (CNN) accelerator and the dynamic energy per read access at a given voltage. Research by Chen et al. [2016] previously showed that energy consumption by SRAM buffers and arrays accounts for a high proportion of total system energy consumption. We assume that there are no bit errors on NeuralFuse, given its status as an add-on data preprocessing module whose functions could also be performed by a general-purpose core. In this work we assume it is implemented on the accelerator equipped with dynamic voltage scaling and therefore NeuralFuse computation is performed at nominal error-free voltage. We report a reduction in overall weight-memory energy consumption (i.e., NeuralFuse $^+$ Base Model under a $p\\%$ bit-error rate) with respect to the unprotected base model in the regular-voltage mode (i.e., $0\\%$ bit-error rate and without NeuralFuse). ", "page_idx": 5}, {"type": "text", "text": "To quantify memory accesses, we used the SCALE-SIM simulator [Samajdar et al., 2020], and our chosen configuration simulated an output-stationary dataflow and a $32\\!\\times\\!32$ systolic array with 256KB of weight memory. We collected data on the dynamic energy per read access of the SRAM both at $V_{m i n}$ and at the voltage corresponding to a $1\\%$ bit-error rate $\\sqrt{V_{b e r}\\approx0.83V_{m i n}})$ from Cadence ADE Spectre simulations, both at the same clock frequency. ", "page_idx": 5}, {"type": "text", "text": "Relaxed and Restricted Access Settings. In the first of our experiments\u2019 two scenarios, relaxed access, the base-model information was not entirely transparent, but allowed us to obtain gradients from the black-box model through backpropagation. Therefore, this scenario allowed direct training of NeuralFuse with the base model using EOPM. In the restricted-access scenario, on the other hand, only the inference function was allowed for the base model, and we therefore trained NeuralFuse using a white-box surrogate base model and then transfering the generator to the access-restricted model. ", "page_idx": 5}, {"type": "text", "text": "Computing Resources. Our experiments were performed using eight Nvidia Tesla V100 GPUs and implemented with PyTorch. NeuralFuse was found to generally take 150 epochs to converge, and its training time was similar to that of the base model it incorporated. On both the CIFAR-10 and CIFAR-100 datasets, average training times were 17 hours (ResNet18), 50 hours (ResNet50), 9 hours (VGG11), 13 hours (VGG16), and 15 hours (VGG19). For GTSRB, the average training times were 9 hours (ResNet18), 27 hours (ResNet50), 5 hours (VGG11), 7 hours (VGG16), and 8 hours (VGG19); and for ImageNet-10, the average training times were 32 hours (ResNet18), 54 hours (ResNet50), 50 hours (VGG11), 90 hours (VGG16), and 102 hours (VGG19). ", "page_idx": 5}, {"type": "text", "text": "4.2 Performance Evaluation, Relaxed-access Scenario ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Our experimental results pertaining to the relaxed-access scenario are shown in Figure 3. The biterror rate (BER) due to low voltage was $1\\%$ in the cases of CIFAR-10 and GTSRB, and $0.5\\%$ for ImageNet-10. The BER of ImageNet-10 was lower than that of the other two because, being pretrained, it has more parameters than either of them. For each experiment, we sampled and evaluated $N=10$ perturbed models (independent from training), and below, we report the means and standard deviations of their respective accuracies. Below, clean accuracy (CA) refers to a model\u2019s accuracy measured at nominal voltage, and perturbed accuracy (PA) to its accuracy measured at low voltage. ", "page_idx": 5}, {"type": "text", "text": "In the cases of CIFAR-10 and the GTSRB, we observed that large generators like ConvL and UNetL recovered PA considerably, i.e., in the range of $41\\%$ to $63\\%$ on ResNet18, VGG11, VGG16, and VGG19. ResNet50\u2019s recovery percentage was slightly worse than those of the other base models, but it nevertheless attained up to $51\\bar{\\%}$ recovery on the GTSRB. On the other hand, the recovery percentages achieved when we used small generators like DeConvS were worse than those of their larger counterparts. This could be explained by larger-sized networks\u2019 better ability to learn error-resistant generators (though perhaps at the cost of higher energy consumption). In the case of ImageNet-10, using larger generators also yielded better PA performance recovery, further demonstrating NeuralFuse\u2019s ability to work well with large input sizes and varied datasets. ", "page_idx": 5}, {"type": "image", "img_path": "npoHt6WV1F/tmp/a396af72a5bfaec623c7f43095493a88c162e86d24ed8388b4be02f9461e3ca7.jpg", "img_caption": ["Figure 3: Relaxed-access scenario test accuracies $(\\%)$ of various pre-trained models with and without NeuralFuse, compared at nominal voltage $\\mathrm{[0\\%}$ bit-error rate) or low voltage (with specified bit-error rates). The results demonstrate that NeuralFuse consistently recovered perturbation accuracy. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "4.3 Performance Evaluation, Restricted-access Scenario (Transferability) ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The experimental results of our restricted-access scenario are shown in Table 1. We adopted ResNet18 and VGG19 as our white-box surrogate source models for training the generators under a $1.5\\%$ biterror rate. We chose ConvL and UNetL as our generators because they performed best out of the six we tested (see Figure 3). ", "page_idx": 6}, {"type": "text", "text": "From Table 1, we can see that transferring from a larger BER such as $1.5\\%$ can endow a smaller one (e.g., $1\\%$ ) with strong resilience. The table also makes it clear that using VGG19 as a surrogate model with UNet-based generators like UNetL can yield better recovery performance than other model/generator combinations. On the other hand, we observed in some cases that if we transferred between source and target models of the same type (but with different BERs for training and testing), performance results could exceed those we had obtained during the original relaxed-access scenario. For instance, when we transferred VGG19 with UNetL under a $1.5\\%$ BER to VGG19 or VGG11 under a $0.5\\%$ BER, the resulting accuracies were $85.86\\%$ (as against $84.99\\%$ for original VGG19) and $84.81\\%$ (as against $82.42\\bar{7}\\bar{0}$ for original VGG11). We conjecture that generators trained on relatively large BERs can cover the error patterns of smaller BERs, and even help improve the latter\u2019s generalization. These findings indicate the considerable promise of access-limited base models in low-voltage settings to recover accuracy. ", "page_idx": 6}, {"type": "text", "text": "4.4 Energy/Accuracy Tradeoff ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We report total dynamic energy consumption as the total number of SRAM-access events multiplied by the dynamic energy of a single such event. Specifically, we used SCALE-SIM to calculate total ", "page_idx": 6}, {"type": "table", "img_path": "npoHt6WV1F/tmp/7bbceda773b86f3bbdb22950509b102589b9f667a15c6a5ac2c4b80d086d4229.jpg", "table_caption": ["Table 1: Restricted-access scenario: Transfer results on CIFAR-10 with $1.5\\%$ bit-error rate "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 7}, {"type": "table", "img_path": "npoHt6WV1F/tmp/652239e6d078dfc13161993d77354f6be5744ecc7d172f7628b8c3a31f74485f.jpg", "table_caption": ["Table 2: Energy saving $(\\%)$ by NeuralFuse for 30 combinations of base models and generators. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "weight-memory access (TWMA), specifics of which can be found in Appendix C\u2019s Table 6. In Table 2, below, we report the percentages of energy saved (ES) at voltages that yield a $1\\%$ bit-error rate for various base-model and generator combinations. The formula for computing ES is ", "page_idx": 7}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathrm{ES}=\\frac{\\mathrm{Energy}_{N V}-\\big(\\mathrm{Energy}_{L V}+\\mathrm{Energy}_{\\mathrm{NeuralFuse}\\:\\mathrm{at}}_{N V}\\big)}{\\mathrm{Energy}_{N V}}\\times100\\%,}\\end{array}\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "where $N V$ denotes nominal voltage regime, and $L V,$ a low-voltage one. ", "page_idx": 7}, {"type": "text", "text": "Our results indicate that when ResNet18 is utilized as a base model, NeuralFuse can recover model accuracy by $20\\mathrm{~-~}49\\%$ while reducing energy use by $19\\mathrm{~-~}29\\%$ . In Appendix C, we provide more results on the tradeoff between energy and accuracy of different NeuralFuse and base-model combinations. Overall, it would appear that using NeuralFuse can effectively restore model accuracy when SRAM encounters low-voltage-induced random bit errors. ", "page_idx": 7}, {"type": "text", "text": "Runtime and Latency. On the other hand, runtime and its corresponding energy consumption may also affect overall energy savings. For instance, previous research has shown that multiply-andaccumulate (MAC) operations account for more than $99\\%$ of all operations in state-of-the-art CNNs, dominating processing runtime and energy consumption alike Yang et al. [2017]. Therefore, we also report the results of our MAC-based energy-consumption estimation in Appendix C, and of our latency analysis in Appendix D. Here, it should also be noted that an additional latency overhead is an inevitable tradeoff for reducing energy consumption in our scenarios. Although neither runtime nor latency is a major focus of this paper, future researchers could usefully design a lighter-weight version of the NeuralFuse module, or apply model-compression techniques to it, to reduce these two factors. ", "page_idx": 7}, {"type": "text", "text": "4.5 Model Size and NeuralFuse Efficiency ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "To arrive at a full performance characterization of NeuralFuse, we analyzed the relationship between the final recovery achieved by each base model in combination with generators of varying parameter counts. For this purpose, we defined efficiency ratio as the recovery percentage in PA divided by NeuralFuse\u2019s parameter count. Table 3 compares the efficiency ratios of all NeuralFuse generators trained on CIFAR-10. Those results show that UNet-based generators had better efficiency per million parameters than either convolution-based or deconvolution-based ones. ", "page_idx": 7}, {"type": "table", "img_path": "npoHt6WV1F/tmp/66d0d753398a995699ecc24fffd39234a6230dc9ecd4be7b273c76122fec66d3.jpg", "table_caption": ["Table 3: The efficiency ratio for all NeuralFuse generators. "], "table_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "npoHt6WV1F/tmp/a6cd2210271d2f9a34bd4f68559d4f52f5aac73014bbc5d53960af8c82c2491f.jpg", "img_caption": ["Figure 4: Reduced-precision accuracy "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "4.6 NeuralFuse\u2019s Robustness to Reduced-precision Quantization ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Lastly, we also explored NeuralFuse\u2019s robustness to low-precision quantization on model weights. Uniform quantization is the usual method for quantizing model weights [Gholami et al., 2022]. However, it is possible for it to cause an accuracy drop due to lack of precision. Given our aim of offering protection from bit errors, we hoped to understand whether NeuralFuse could also recover model-accuracy drops caused by this phenomenon. We therefore uniformly quantized the model weights to a lower bit precision and measured the resulting accuracy. Specifically, we applied symmetric uniform quantization to our base models with various numbers of bits to induce precision loss, and defined the quantized weight $\\mathbf{W_{q}}$ (integer) as $\\mathbf{W_{q}}=\\lfloor\\frac{\\mathbf{W}}{\\mathbf{s}}\\rceil$ , where W denotes the original model weight (full precision), s = m2ba\u2212x 1|\u2212W1| is the quantization scale parameter, and $b$ is the precision (number of bits) used to quantize the models. Bit errors induced by low voltage operation as previously described, are also applied to low precision weights. ", "page_idx": 8}, {"type": "text", "text": "We used the GTSRB pre-trained ResNet18 as our example in an evaluation of two NeuralFuse generators, i.e., ConvL and UNetL trained with $0.5\\%$ BER, and varied precision $b$ from 8 bits to 2 bits (integer). The results, shown in Figure 4, indicated that when $b>3$ bits, NeuralFuse could effectively recover accuracy in both the low-voltage and low-precision scenarios. When $b=3$ , while NeuralFuse could still handle the bit-error-free model (Fig. 4 top), it exhibited a limited ability to recover the random bit-error case (Fig. 4 bottom). We find these results encouraging, insofar as NeuralFuse was only trained on random bit errors, yet demonstrated high accuracy in dealing with unseen bit-quantization errors. Further experimental results derived from other base models and datasets can be found in Appendix H. ", "page_idx": 8}, {"type": "text", "text": "4.7 Extended Analysis ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Here, we would like to highlight some key findings from the additional results in the Appendices. In Appendix E, we compare NeuralFuse against a simple baseline of learning a universal input perturbation. We found that such baseline performed much worse than NeuralFuse at that task, validating the necessity of adopting input-aware transformation if the goal is to learn error-resistant data representations in low-voltage scenarios. In Appendix G, we report that ensemble training of white-box surrogate base models could further improve the transferability of NeuralFuse in restrictedaccess scenarios. Appendices K and L present visualization results of NeuralFuse\u2019s data embeddings and transformed inputs. In Appendix J, we show that NeuralFuse can further recover the accuracy of a base model trained with adversarial weight perturbation in a low-voltage setting. ", "page_idx": 8}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In this paper, we have proposed NeuralFuse, the first non-intrusive post hoc module that protects model inference against bit errors induced by low voltage. NeuralFuse is particularly well suited to practical machine-deployment cases in which access to the base model is limited or relaxed. The design of NeuralFuse includes a novel loss function and a new optimizer, EOPM, that enable it to handle simulated randomness in perturbed models. Our comprehensive experimental results and analysis show that NeuralFuse can recover test accuracy by up to $57\\%$ while simultaneously enjoying an up to $24\\%$ reduction in memory-access energy requirements. Moreover, NeuralFuse demonstrates high transferability to access-constrained models and high versatility, e.g., robustness to low-precision quantization. In short, NeuralFuse is a notable advancement in mitigating neural-network inference\u2019s energy/accuracy tradeoff in low-voltage regimes, and points the way to greener future AI technology. Our future work will include extending this study to other neural-network architectures and modalities, such as transformer-based language models. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Limitations. We acknowledge the challenge of achieving significant power savings without accuracy loss and view NeuralFuse as a foundational, proof-of-concept step toward this goal. Future research could enhance this approach by optimizing the pre-processing module to adapt to specific error characteristics of low-voltage SRAM or by integrating lightweight hardware modifications to further improve the energy-accuracy trade-off. ", "page_idx": 9}, {"type": "text", "text": "Broader Impacts. We see no ethical or immediate negative societal consequence of our work, and it holds the potential for positive social impacts, from environmental benefits to improved access to technology and enhanced safety in critical applications. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We thank the anonymous reviewers for their insightful comments and valuable suggestions. The research described in this paper was conducted in the JC STEM Lab of Intelligent Design Automation, which is funded by The Hong Kong Jockey Club Charities Trust in support of Tsung-Yi Ho. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Anish Athalye, Logan Engstrom, Andrew Ilyas, and Kevin Kwok. Synthesizing robust adversarial examples. In Jennifer Dy and Andreas Krause, editors, Proceedings of the 35th International Conference on Machine Learning, volume 80 of Proceedings of Machine Learning Research, pages 284\u2013293, Stockholm, Sweden, 10\u201315 Jul 2018. PMLR.   \nBabak Ehteshami Bejnordi, Tijmen Blankevoort, and Max Welling. Batch-shaping for learning conditional channel gated networks. In International Conference on Learning Representations, 2020.   \nNandhini Chandramoorthy, Karthik Swaminathan, Martin Cochet, Arun Paidimarri, Schuyler Eldridge, Rajiv V. Joshi, Matthew M. Ziegler, Alper Buyuktosunoglu, and Pradip Bose. Resilient low voltage accelerators for high energy efficiency. In 2019 IEEE International Symposium on High Performance Computer Architecture (HPCA), pages 147\u2013158, 2019. doi: 10.1109/HPCA.2019.00034.   \nYu-Hsin Chen, Joel Emer, and Vivienne Sze. Eyeriss: A spatial architecture for energy-efficient dataflow for convolutional neural networks. ACM SIGARCH computer architecture news, 44(3):367\u2013379, 2016.   \nJia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In 2009 IEEE Conference on Computer Vision and Pattern Recognition, pages 248\u2013255, 2009. doi: 10.1109/CVPR.2009.5206848.   \nShrikanth Ganapathy, John Kalamatianos, Keith Kasprak, and Steven Raasch. On characterizing near-threshold sram failures in finfet technology. In Proceedings of the 54th Annual Design Automation Conference 2017, pages 1\u20136, 2017.   \nAmir Gholami, Sehoon Kim, Zhen Dong, Zhewei Yao, Michael W Mahoney, and Kurt Keutzer. A survey of quantization methods for efficient neural network inference. In Low-Power Computer Vision, pages 291\u2013326. Chapman and Hall/CRC, 2022.   \nYunchao Gong, Liu Liu, Ming Yang, and Lubomir Bourdev. Compressing deep convolutional networks using vector quantization. arXiv preprint arXiv:1412.6115, 2014.   \nKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 770\u2013778, 2016. doi: 10.1109/CVPR.2016.90.   \nZhizhong Huang, Jie Chen, Junping Zhang, and Hongming Shan. Learning representation for clustering via prototype scattering and positive sampling. IEEE Transactions on Pattern Analysis and Machine Intelligence, pages 1\u201316, 2022. doi: 10.1109/TPAMI.2022.3216454.   \nSung Kim, Patrick Howe, Thierry Moreau, Armin Alaghi, Luis Ceze, and Visvesh Sathe. Matic: Learning around errors for efficient low-voltage neural network accelerators. In 2018 Design, Automation & Test in Europe Conference & Exhibition (DATE), pages 1\u20136. IEEE, 2018.   \nSkanda Koppula, Lois Orosa, A Giray Ya\u02d8gl\u0131k\u00e7\u0131, Roknoddin Azizi, Taha Shahroodi, Konstantinos Kanellopoulos, and Onur Mutlu. Eden: Enabling energy-efficient, high-performance deep neural network inference using approximate dram. In Proceedings of the 52nd Annual IEEE/ACM International Symposium on Microarchitecture, pages 166\u2013181, 2019.   \nAlex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. Technical report, University of Toronto, Toronto, Ontario, 2009.   \nSeyed-Mohsen Moosavi-Dezfooli, Alhussein Fawzi, Omar Fawzi, and Pascal Frossard. Universal adversarial perturbations. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 1765\u20131773, 2017.   \nTuan Anh Nguyen and Anh Tran. Input-aware dynamic backdoor attack. Advances in Neural Information Processing Systems (NeurIPS), 33:3454\u20133464, 2020.   \nOzan \u00d6zdenizci and Robert Legenstein. Improving robustness against stealthy weight bit-filp attacks by output code matching. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 13388\u201313397, 2022.   \nMohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. Xnor-net: Imagenet classification using binary convolutional neural networks. In European Conference on Computer Vision (ECCV), pages 525\u2013542. Springer, 2016.   \nBrandon Reagen, Paul Whatmough, Robert Adolf, Saketh Rama, Hyunkwang Lee, Sae Kyu Lee, Jos\u00e9 Miguel Hern\u00e1ndez-Lobato, Gu-Yeon Wei, and David Brooks. Minerva: Enabling low-power, highly-accurate deep neural network accelerators. In 2016 ACM/IEEE 43rd Annual International Symposium on Computer Architecture (ISCA), pages 267\u2013278, 2016. doi: 10.1109/ISCA.2016.32.   \nOlaf Ronneberger, Philipp Fischer, and Thomas Brox. U-net: Convolutional networks for biomedical image segmentation. In International Conference on Medical Image Computing and Computer-Assisted Intervention, pages 234\u2013241. Springer, 2015.   \nAnanda Samajdar, Jan Moritz Joseph, Yuhao Zhu, Paul Whatmough, Matthew Mattina, and Tushar Krishna. A systematic methodology for characterizing scalability of dnn accelerators using scale-sim. In 2020 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS), pages 58\u201368, 2020.   \nK. Simonyan and A. Zisserman. Very deep convolutional networks for large-scale image recognition. In International Conference on Learning Representations (ICLR), 2015.   \nVladislav Sovrasov. ptflops: a flops counting tool for neural networks in pytorch framework, 2018-2023. URL https://github.com/sovrasov/flops-counter.pytorch. Github Repository.   \nGopalakrishnan Srinivasan, Parami Wijesinghe, Syed Shakib Sarwar, Akhilesh Jaiswal, and Kaushik Roy. Significance driven hybrid 8t-6t sram for energy-efficient synaptic storage in artificial neural networks. In 2016 Design, Automation & Test in Europe Conference & Exhibition (DATE), pages 151\u2013156. IEEE, 2016.   \nJohannes Stallkamp, Marc Schlipsing, Jan Salmen, and Christian Igel. Man vs. computer: Benchmarking machine learning algorithms for traffic sign recognition. Neural Networks, 32:323\u2013332, 2012.   \nDavid Stutz, Nandhini Chandramoorthy, Matthias Hein, and Bernt Schiele. Bit error robustness for energyefficient dnn accelerators. In A. Smola, A. Dimakis, and I. Stoica, editors, Proceedings of Machine Learning and Systems, volume 3, pages 569\u2013598, 2021.   \nLaurens van der Maaten and Geoffrey Hinton. Visualizing data using t-sne. Journal of Machine Learning Research, 9(86):2579\u20132605, 2008.   \nDongxian Wu, Shu-Tao Xia, and Yisen Wang. Adversarial weight perturbation helps robust generalization. In H. Larochelle, M. Ranzato, R. Hadsell, M.F. Balcan, and H. Lin, editors, Advances in Neural Information Processing Systems, volume 33, pages 2958\u20132969. Curran Associates, Inc., 2020.   \nJiaxiang Wu, Cong Leng, Yuhang Wang, Qinghao Hu, and Jian Cheng. Quantized convolutional neural networks for mobile devices. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 4820\u20134828, 2016.   \nHaichuan Yang, Yuhao Zhu, and Ji Liu. Ecc: Platform-independent energy-constrained deep neural network compression via a bilinear regression model. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), pages 11206\u201311215, 2019a.   \nHaichuan Yang, Yuhao Zhu, and Ji Liu. Energy-constrained compression for deep neural networks via weighted sparse projection and layer input masking. In International Conference on Learning Representations (ICLR), 2019b.   \nHaichuan Yang, Shupeng Gui, Yuhao Zhu, and Ji Liu. Automatic neural network compression by sparsityquantization joint learning: A constrained optimization-based approach. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2020.   \nTien-Ju Yang, Yu-Hsin Chen, and Vivienne Sze. Designing energy-efficient convolutional neural networks using energy-aware pruning. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 5687\u20135695, 2017.   \nHongyang Zhang, Yaodong Yu, Jiantao Jiao, Eric Xing, Laurent El Ghaoui, and Michael Jordan. Theoretically principled trade-off between robustness and accuracy. In International Conference on Machine Learning (ICML), pages 7472\u20137482. PMLR, 2019. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "Appendix ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "The appendix provides more implementation details for our method, experimental results on more datasets and settings, ablation studies, and qualitative analysis. The appendices cover the following: ", "page_idx": 12}, {"type": "text", "text": "\u2022 Implementation Details: NeuralFuse Training Algorithm (Sec. A), NeuralFuse Generator (Sec. B), Energy/Accuracy Tradeoff (Sec. C), Latency Reports (Sec. D) ", "page_idx": 12}, {"type": "text", "text": "\u2022 Experimental Results: Ablation Studies (Sec. E), Relaxed Access (Sec. F), Restricted Access (Sec. G), Reduced-precision Quantization (Sec. H), Adversarial Training (Sec. I), Adversarial Weight Perturbation (Sec. J) ", "page_idx": 12}, {"type": "text", "text": "\u2022 Qualitative Studies: Data Embeddings Visualization (Sec. K), Transformed Inputs Visualization (Sec. L) ", "page_idx": 12}, {"type": "text", "text": "A Training Algorithm of NeuralFuse ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "Algorithm 1 Training steps for NeuralFuse ", "page_idx": 12}, {"type": "text", "text": "Input: Base model $M_{0}$ ; Generator $\\mathcal{G}$ ; Training data samples $\\mathcal{X}$ ; Distribution of the perturbed models $\\mathcal{M}_{p}$ ; Number of perturbed models $N$ ; Total training iterations $T$   \nOutput: Optimized parameters $\\mathcal{W}_{\\mathcal{G}}$ for the Generator $\\mathcal{G}$   \n12:: forf $t=0,...,T-1$ h edso $\\{\\mathbf{x},y\\}_{b=1}^{B}\\sim\\mathcal{X}$ do   \n3: Create transformed inputs $\\begin{array}{r}{\\bar{\\mathbf{x}}_{t}=\\mathcal{F}(\\mathbf{x})=\\mathrm{clip}_{[-1,1]}\\big(\\mathbf{x}+\\mathcal{G}(\\mathbf{x})\\big)}\\end{array}$ .   \n4: Sample $N$ perturbed models $\\{M_{p_{1}},...,M_{p_{N}}\\}$ from $\\mathcal{M}_{p}$ under $p\\%$ random bit errors. 5: for all $\\overline{{M_{p_{i}}}}^{\\circ}\\sim\\{M_{p_{1}},...,M_{p_{N}}\\}$ do   \n6: Calculate the loss $\\mathcal{L}_{p_{i}}$ based on the output of the perturbed model $M_{p_{i}}$ . Then calculate the gradients $g_{p_{i}}$ for $\\mathcal{W}_{\\mathcal{G}}$ based on $\\mathcal{L}_{p_{i}}$ .   \n7: end for   \n8: Calculate the loss ${\\mathcal{L}}_{0}$ based on the output of the clean model $M_{0}$ . Then calculate the gradients $g_{0}$ for $\\mathcal{W}_{\\mathcal{G}}$ based on ${\\mathcal{L}}_{0}$ .   \n9: Calculate the final gradient $g_{f i n a l}$ using (5) based on $g_{0}$ and $g_{p_{1}},...,g_{p_{N}}$ .   \n10: Update WG using gfinal.   \n11: end for   \n12: end for ", "page_idx": 12}, {"type": "text", "text": "B Implementation Details of NeuralFuse Generator ", "text_level": 1, "page_idx": 12}, {"type": "text", "text": "We consider two main goals in designing the NeuralFuse Generator: 1) efficiency (so the overall energy overhead is decreased) and 2) robustness (so that it can generate robust patterns on the input image and overcome the random bit filpping in subsequent models). Accordingly, we choose to utilize an encode-decoder architecture in implementing the generator. The design of ConvL is inspired by Nguyen and Tran [2020], in which the authors utilize a similar architecture to design an inputaware trigger generator, and have demonstrated its efficiency and effectiveness. Furthermore, we attempted to enhance it by replacing the Upsampling layer with a Deconvolution layer, leading to the creation of DeConvL. The UNetL-based NeuralFuse draws inspiration from Ronneberger et al. [2015], known for its robust performance in image segmentation, and thus, we incorporated it as one of our architectures. Lastly, ConvS, DeConvS, and UNetS are scaled-down versions of the model designed to reduce computational costs and total parameters. The architectures of Convolutional-based and Deconvolutional-based are shown in Table 4, and the architecture of UNet-based generators is in Table 5. For the abbreviation used in the table, ConvBlock means the Convolution block, Conv means a single Convolution layer, DeConvBlock means the Deconvolution block, DeConv means a single Deconvolution layer, and BN means a Batch Normalization layer. We use learning rate $=0.001$ , $\\lambda=5$ , and Adam optimizer. For CIFAR-10, GTSRB, and CIFAR-100, we set batch size $b=25$ for each base model. For ImageNet-10, we set $b=64$ for ResNet18, ResNet50 and VGG11, and $b=32$ for both VGG16 and VGG19. ", "page_idx": 12}, {"type": "table", "img_path": "npoHt6WV1F/tmp/ce5ce9f37102d71282630d25d735ab5f820a7e3f7d90059be0b5a726535cebad.jpg", "table_caption": ["Table 4: Model architecture for both Convolution-based and Deconvolution-based generators. Each ConvBlock consists of a Convolution $(\\mathrm{kernel}\\,=\\,3\\,\\times\\,3$ , padding $\\c=1$ , stride $\\c=1$ ), a Batch Normalization, and a ReLU layer. Each DeConvBlock consists of a Deconvolution (kernel $=4\\times4$ , padding $=1$ , stride $=2$ ), a Batch Normalization, and a ReLU layer. "], "table_footnote": ["[Note] #CHs: number of channels. "], "page_idx": 13}, {"type": "text", "text": "Table 5: Model architecture for UNet-based generators. Each ConvBlock consists of a Convolution (kernel $=3\\times3$ , padding $=1$ , stride $=1$ ), a Batch Normalization, and a ReLU layer. Other layers, such as the Deconvolutional layer (kern ${\\mathfrak{I}}=2\\times2$ , padding $=1$ , stride $=2$ ), are used in UNet-based models. For the final Convolution layer, the kernel size is set to 1. ", "page_idx": 13}, {"type": "table", "img_path": "npoHt6WV1F/tmp/d07f1efb12066593bfad77dee3c76d8a85ca455e04471feae04f3a04754f3eb1.jpg", "table_caption": [], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "C NeuralFuse\u2019s Energy/Accuracy Tradeoff ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "SCALE-SIM. SCALE-SIM [Samajdar et al., 2020] is a systolic array-based CNN simulator that can calculate the number of memory accesses and the total time in execution cycles by giving the specific model architecture and accelerator architectural configuration as inputs. In this paper, we use SCALESIM to calculate the weights memory access of 5 based models (ResNet18, ResNet50, VGG11, VGG16, VGG19), and 6 generators (ConvL, ConvS, DeConvL, DeConvS, UNetL, UNetS). While SCALE-SIM supports both Convolutional and Linear layers, it does not yet support Deconvolution layers. Instead, we try to approximate the memory costs of Deconvolution layers by Convolution layers. We change the input and output from Deconvolution into the output and input of the Convolution layers. Besides, we also change the stride into 1 when we approximate it. We also add padding for the convolution layers while generating input files for SCALE-SIM. In this paper, we only consider the energy saving on weights accesses, so we only take the value \u201cSRAM Filter Reads\u201d from the output of SCALE-SIM as the total weights memory accesses (T.W.M.A.) for further energy calculation. ", "page_idx": 13}, {"type": "text", "text": "In Table 6, we report the total weight memory access (T.W.M.A.) using SCALE-SIM. We then showed the energy/accuracy tradeoff between all of the combinations of NeuralFuse and base models under a $1\\%$ of bit error rate in Figure 5. ", "page_idx": 13}, {"type": "text", "text": "Parameters and MACs Calculation. In addition to T.W.M.A., the number of parameters and MACs (multiply\u2013accumulate operations) are also common metrics in measuring the energy consumption of machine learning models. Yang et al. [2017] have shown that the energy consumption of computation ", "page_idx": 13}, {"type": "text", "text": "Table 6: The total weights memory access calculated by SCALE-SIM. ", "page_idx": 14}, {"type": "table", "img_path": "npoHt6WV1F/tmp/645b618087004c62bab5329d98a51756b72d3547c9972e6477740fb10147b3f1.jpg", "table_caption": [], "table_footnote": ["[Note] T.W.M.A.: total weight memory access. "], "page_idx": 14}, {"type": "image", "img_path": "npoHt6WV1F/tmp/528e38365bd38a3349681ec2def129beeacd797a94f9f08983696cfc4ae9b6fa.jpg", "img_caption": [], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Figure 5: The energy/accuracy tradeoff of different NeuralFuse implementations with all CIFAR-10 pre-trained based models. The X-axis represents the percentage reduction in dynamic memory access energy at low-voltage settings (base model protected by NeuralFuse) compared to the bit-error-free (nominal) voltage; the Y-axis represents the perturbed accuracy (evaluated at low voltage) with a $1\\%$ bit error rate. ", "page_idx": 14}, {"type": "text", "text": "and memory accesses are both proportional to MACs, allowing us to take computation energy consumption into account. ", "page_idx": 14}, {"type": "text", "text": "Here, we use the open-source package ptflops [Sovrasov, 2018-2023] to calculate the parameters and MAC values of all the base models and the NeuralFuse generators, in the same units as Bejnordi et al. [2020] used. The results are shown in Table 7. Note that we modified the base model architectures for ImageNet-10, as it has larger input sizes. For example, we use a larger kernel size $=$ 7 instead of 3 in the first Convolution layer in ResNet-based models to enhance the learning abilities. Therefore, the parameters of base models are different between different datasets. For NeuralFuse generators, we utilize the same architectures for implementation (including ImageNet-10). As a result, our proposed NeuralFuse generators are generally smaller than base models, either on total model parameters or MAC values. ", "page_idx": 14}, {"type": "table", "img_path": "npoHt6WV1F/tmp/5c13e603afd4bb1737e60cc9f8f14f87b58ca5f6d9ec1b93915021ed50773fa3.jpg", "table_caption": ["Table 7: Parameter counts and MACs for all base models and generators in this paper. "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "MACs-based Energy Consumption. We can then use the MAC values to further approximate the end-to-end energy consumption of the whole model. Assume that all values are stored on SRAM and that a MAC represents single memory access. The corresponding MACs-based energy saving percentage (MAC-ES, $\\%$ ) can be derived from Eq. 7 (c.f. Sec. 4.4), and results can be found in Table 8. We can observe that most combinations can save a large amount of energy, except that VGG11 with two larger NeuralFuse (ConvL and DeConvL) may increase the total energy. These results are consistent with the results reported in Table 2. In addition, we also showed the MACs-based energy/accuracy tradeoff between all of the combinations of NeuralFuse and base models under a $1\\%$ of bit error rate in Figure 6. ", "page_idx": 15}, {"type": "text", "text": "Table 8: The MACs-Based energy saving percentage $(\\%)$ for different combinations of base models and NeuralFuse. ", "page_idx": 15}, {"type": "table", "img_path": "npoHt6WV1F/tmp/e01ea25392ca85e50406a02afb0bad4cb3ddbcd844a8d853e3c9edbfaf856164.jpg", "table_caption": [], "table_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "npoHt6WV1F/tmp/3132be659d443fa01c19b7d3f220cf7523b289c5bddd19c666b250be7a115841.jpg", "img_caption": [], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Figure 6: The Mac-based energy/accuracy tradeoff of different NeuralFuse implementations with all CIFAR-10 pre-trained based models. The X-axis represents the percentage reduction in dynamic memory access energy at low-voltage settings (base model protected by NeuralFuse), compared to the bit-error-free (nominal) voltage; the Y-axis represents the perturbed accuracy (evaluated at low voltage) with a $1\\%$ bit error rate. ", "page_idx": 15}, {"type": "text", "text": "Although using ConvL or DeConvL along with base model VGG11 for CIFAR-10 implies an increase in energy consumption, using other smaller-scale generators, we can still save the overall energy and recover the base model\u2019s accuracy. That said, developers can always choose smaller generators (with orders of magnitude fewer MAC operations than the original network) to restore model accuracy, further demonstrating the flexibility of choosing NeuralFuse generators of different sizes. ", "page_idx": 15}, {"type": "text", "text": "D Inference Latency of NeuralFuse ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In Table 9, we report the latency (batch_size=1, CIFAR-10/ImageNet-10 testing dataset) of utilizing the different NeuralFuse generators with two different base models, ResNet18 and VGG19. While ", "page_idx": 15}, {"type": "text", "text": "NeuralFuse contributes some additional latency, we consider this an unavoidable tradeoff necessary to achieve reduced energy consumption within our framework. Although the primary focus of this paper is not on latency, we acknowledge its importance. Future research could explore designing a more lightweight version of the NeuralFuse module or applying model compression techniques to minimize latency. Additionally, we recognize that running NeuralFuse on a general-purpose CPU could lead to different latency and energy consumption figures due to various influencing factors like CPU architecture and manufacturing processes. ", "page_idx": 16}, {"type": "table", "img_path": "npoHt6WV1F/tmp/d358b3ad440f32b28fe7d2b42eb480b5b6e647b43c4b7d9e802bb4663d447dab.jpg", "table_caption": ["Table 9: The Inference Latency of base model and base model with NeuralFuse. "], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "E Ablation Studies ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Study for $N$ in EOPM. Here, we study the effect of $N$ used in EOPM (Eq. 5). In Figure 7, we report the results for ConvL and ConvS on CIFAR-10 pre-trained ResNet18, under a $1\\%$ bit error rate (BER). The results demonstrate that if we apply larger $N$ , the performance increases until convergence. Specifically, for ConvL (Figure 7a), larger $N$ empirically has a smaller standard deviation; this means larger $N$ gives better stability but at the cost of time-consuming training. In contrast, for the small generator ConvS (Figure 7b), we can find that the standard deviation is still large even trained by larger $N$ ; the reason might be that small generators are not as capable of learning representations as larger ones. Therefore, there exists a tradeoff between the stability of the generator performance and the total training time. In our implementation, choosing $N=5$ or 10 is a good balance. ", "page_idx": 16}, {"type": "image", "img_path": "npoHt6WV1F/tmp/3634786b20a2b43bffecdacf93f758648a742f399178aee9031715d6be89e480.jpg", "img_caption": ["Figure 7: The experimental results on using different sizes of $N$ for EOPM. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "Tradeoff Between Clean Accuracy (CA) and Perturbed Accuracy (PA). We conducted an experiment to study the effect of different $\\lambda$ values, which balance the ratio of clean accuracy and perturbed accuracy. In Table 10, the experimental results showed that a smaller $\\lambda$ can preserve clean accuracy, but result in poor perturbed accuracy. On the contrary, larger $\\lambda$ can deliver higher perturbed accuracy, but with more clean accuracy drop. This phenomenon has also been observed in adversarial training [Zhang et al., 2019]. ", "page_idx": 16}, {"type": "text", "text": "Comparison to Universal Input Perturbation (UIP). Moosavi-Dezfooli et al. [2017] has shown that there exists a universal adversarial perturbation to the input data such that the model will make wrong predictions on a majority of the perturbed images. In our NeuralFuse framework, the universal perturbation is a special case when we set $\\mathcal{G}(\\mathbf{x})\\,=\\,\\operatorname{tanh}\\left(\\mathbf{U}\\mathbf{I}\\mathbf{P}\\right)$ for any data sample $\\mathbf{x}$ . The transformed data sample then becomes $\\begin{array}{r}{{\\bf x}_{t}=\\mathrm{clip}_{[-1,1]}\\big({\\bf x}+\\mathrm{tanh}\\left({\\bf U}{\\bf I}{\\bf P}\\right)\\big)}\\end{array}$ , where $\\mathbf{x}_{t}\\in[-1,1]^{d}$ and UIP is a trainable universal input perturbation that has the same size as the input data. The experimental results with the universal input perturbation are shown in Table 11. We observe that its performance is much worse than our proposed NeuralFuse. This result validates the necessity of adopting input-aware transformation for learning error-resistant data representations in low-voltage scenarios. ", "page_idx": 16}, {"type": "table", "img_path": "npoHt6WV1F/tmp/d36d94e65d444717b32c5cd7d8eaf4e4b95f3696f2db332f0447b9473571a5c1.jpg", "table_caption": ["Table 10: Experimental results based on $\\lambda$ value choosing. The results show that $\\lambda=5$ can balance the tradeoff between clean accuracy and perturbed accuracy. ", "Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ ): perturbed accuracy; NF: NeuralFuse; and RP: total recover percentage of PA (NF) vs. PA "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "", "page_idx": 17}, {"type": "table", "img_path": "npoHt6WV1F/tmp/525db6446bcc0313a39cd4a93c3a7cbfd24e3ec171c6ebfd3a9c35747fe49563.jpg", "table_caption": ["Table 11: Performance of the universal input perturbation (UIP) trained by EOPM on CIFAR-10 pre-trained ResNet18. "], "table_footnote": ["Note. BER: the bit-error rate of the base model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; UIP: universal input transformation parameter; and RP: total recovery percentage of PA (UIP) vs. PA "], "page_idx": 17}, {"type": "text", "text": "F Additional Experimental Results on Relaxed Access Settings ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "We conducted more experiments on Relaxed Access settings to show that our NeuralFuse can protect the models under different BER The results can be found in Sec. F.1 (CIFAR-10), Sec. F.2 (GTSRB), Sec. F.3 (ImageNet-10), and Sec. F.4 (CIFAR-100). For comparison, we also visualize the experimental results in the figures below each table. ", "page_idx": 18}, {"type": "text", "text": "F.1 CIFAR-10 ", "text_level": 1, "page_idx": 18}, {"type": "table", "img_path": "npoHt6WV1F/tmp/a98d7351f3b71c8374d68788ef14756b83c9b133591c65242fc6b6436cd83949.jpg", "table_caption": ["Table 12: Testing accuracy $(\\%)$ under $1\\%$ and $0.5\\%$ of random bit error rate on CIFAR-10. "], "table_footnote": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 18}, {"type": "image", "img_path": "npoHt6WV1F/tmp/0c8e4477cfd7990f7c32a6582d21e1f435a147b9fae78e9700ff6a777fbcc45b.jpg", "img_caption": ["Figure 8: Experimental results on CIFAR-10 "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "F.2 GTSRB ", "text_level": 1, "page_idx": 19}, {"type": "table", "img_path": "npoHt6WV1F/tmp/732aa0b10527e5583f6ec3c54d09699e4b4df4566f7ab050a1bebfc158f8eec1.jpg", "table_caption": ["Table 13: Testing accuracy $(\\%)$ under $1\\%$ and $0.5\\%$ of random bit error rate on GTSRB. "], "table_footnote": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 19}, {"type": "image", "img_path": "npoHt6WV1F/tmp/208446b2808fa02de543a176faf8171e9185845326d9e0cd5291fb685d5db25a.jpg", "img_caption": ["Figure 9: Experimental results on GTSRB. ", "(b) GTSRB, $0.5\\%$ Bit Error Rate "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "F.3 ImageNet-10 ", "text_level": 1, "page_idx": 20}, {"type": "table", "img_path": "npoHt6WV1F/tmp/919488251d0df7be2196b5d864b53d8c7dfbd687662bddca043f3c434c1634a1.jpg", "table_caption": ["Table 14: Testing accuracy under $0.5\\%$ of random bit error rate on ImageNet-10. "], "table_footnote": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 20}, {"type": "image", "img_path": "npoHt6WV1F/tmp/c33546219b29df41d683c0b0cde43256fa97d16d4bf9ee213a998f4335bf80e7.jpg", "img_caption": ["Figure 10: Experimental results on ImageNet-10, $0.5\\%$ Bit Error Rate. "], "img_footnote": [], "page_idx": 20}, {"type": "text", "text": "F.4 CIFAR-100 ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "As mentioned in the previous section, larger generators like ConvL, DeConvL, and UNetL have better performance than small generators. For CIFAR-100, we find that the gains of utilizing NeuralFuse are less compared to the other datasets. We believe this is because CIFAR-100 is a more challenging dataset (more classes) for the generators to learn to protect the base models. Nevertheless, NeuralFuse can still function to restore some degraded accuracy; these results also demonstrate that our NeuralFuse is applicable to different datasets. In addition, although the recover percentage is less obvious on CIFAR-100 (the more difficult dataset), we can still conclude that our NeuralFuse is applicable to different datasets. ", "page_idx": 21}, {"type": "table", "img_path": "npoHt6WV1F/tmp/c3056c2e2a0d9a8256f2845f9a53fc5773391e0fa6a044b5819e521e84cfd61f.jpg", "table_caption": ["Table 15: Testing accuracy $(\\%)$ under $1\\%$ , $0.5\\%$ and $0.35\\%$ of random bit error rate on CIFAR-100. "], "table_footnote": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 21}, {"type": "image", "img_path": "npoHt6WV1F/tmp/646899368b659e650a63e67c65cf1d1c40f065c292a56e14f96ce953eb7e52d1.jpg", "img_caption": ["Figure 11: Experimental results on CIFAR-100. ", "(c) CIFAR-100, $0.35\\%$ Bit Error Rate "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "G Additional Experimental Results on Restricted Access Settings (Transferability) ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "We conduct more experiments with Restricted Access settings to show that our NeuralFuse can be transferred to protect various black-box models. The experimental results are shown in Sec. G.1 (CIFAR-10), Sec. G.2 (GTSRB), and Sec. G.3 (CIFAR-100). ", "page_idx": 22}, {"type": "text", "text": "We find that using VGG19 as a white-box surrogate model has better transferability than ResNet18 for all datasets. In addition, we can observe that some NeuralFuse generators have downward applicability if base models have a similar architecture. In other words, if we try to transfer a generator trained on a large BER (e.g., $1\\%$ ) to a model with a small BER (e.g., $0.5\\%$ , the performance will be better than that of a generator trained with the original BER (e.g., $0.5\\%$ ). For example, in Table 16, we could find that if we use VGG19 as a source model to train the generator ConvL $(1\\%)$ , the generator could deliver better performance (in terms of PA (NF)) when applied to similar base models (e.g., VGG11, VGG16, or VGG19) under a $0.5\\%$ BER, compared to using itself as a source model (shown in Table 12). We conjecture that this is because the generators trained on a larger BER can also cover the error patterns of a smaller BER, and thus they have better generalizability across smaller B.E.Rs. ", "page_idx": 22}, {"type": "text", "text": "To further improve the transferability to cross-architecture target models, we also conduct an experiment in Sec. G.4 to show that using ensemble-based training can help the generator to achieve this feature. ", "page_idx": 22}, {"type": "text", "text": "G.1 CIFAR-10 ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "The results of CIFAR-10 in which NeuralFuse is trained at $1\\%$ BER are shown in Table 16. ", "page_idx": 22}, {"type": "table", "img_path": "npoHt6WV1F/tmp/d9594d96c1dcd8999fc210c2946f29f2a06d28edb4ebc941fb22655c9dab7f14.jpg", "table_caption": ["Table 16: Transfer results on CIFAR-10: NeuralFuse trained on SM with $1\\%$ BER "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 22}, {"type": "text", "text": "G.2 GTSRB ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "In Tables 17 and 18, we show the results on GTSRB in which NeuralFuse is trained at $1.5\\%$ and $1\\%$ BER, respectively. ", "page_idx": 23}, {"type": "table", "img_path": "npoHt6WV1F/tmp/3cb70463c266986f2bbb92be6ce201f2b27508f099f8afaf3a9b1130f53c3dad.jpg", "table_caption": ["Table 17: Transfer results on GTSRB: NeuralFuse trained on SM with $1.5\\%$ BER "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 23}, {"type": "table", "img_path": "npoHt6WV1F/tmp/b692739a0d6d832495151eaffcab1d9eff6030d812468db78b8f0b302cb243c1.jpg", "table_caption": ["Table 18: Transfer results on GTSRB: NeuralFuse trained on SM with $1\\%$ BER "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 23}, {"type": "text", "text": "G.3 CIFAR-100 ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "In Tables 19 and 20, we show results on CIFAR-100 with NeuralFuse trained at $1\\%$ and $0.5\\%$ BER, respectively. ", "page_idx": 24}, {"type": "table", "img_path": "npoHt6WV1F/tmp/cb6647aae90e5b1204ca9fdc8ce833a87c78ea456ff4a5cfc38811620cdf74b0.jpg", "table_caption": ["Table 19: Transfer results on CIFAR-100: NeuralFuse trained on SM with $1\\%$ BER "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 24}, {"type": "table", "img_path": "npoHt6WV1F/tmp/5be4bed596cff1a101d496370773d0a6d90b793dfda8ad9d7a5ba0d7df91675d.jpg", "table_caption": ["Table 20: Transfer results on CIFAR-100: NeuralFuse trained on SM with $0.5\\%$ BER "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 24}, {"type": "text", "text": "G.4 Generator Ensembling ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "To improve the transferability performance on cross-architecture cases (e.g., using ResNet-based models as surrogate models to train NeuralFuse and then transfer NeuralFuse to VGG-based target models), we try to adopt ensemble surrogate models to train our NeuralFuse. The experimental results are shown in Table 21. We use the same experimental settings mentioned in Table 1 but change one source model (e.g., ResNet18 or VGG19) into two (ResNet18 with VGG19) for training. The results show that the overall performance is better than the results shown in Table 1, which means ensemble-based training can easily solve the performance degradation on cross-architecture target models. ", "page_idx": 25}, {"type": "table", "img_path": "npoHt6WV1F/tmp/a3f683fd231b828697e60c1237a2210f255bb76371e818fb05e20c5821007ac7.jpg", "table_caption": ["Table 21: Transfer results on CIFAR-10: NeuralFuse trained on two SM with $1.5\\%$ BER "], "table_footnote": ["Note. SM: source model, used for training generators; TM: target model, used for testing generators; BER: the bit-error rate of the target model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 25}, {"type": "text", "text": "H NeuralFuse on Reduced-precision Quantization and Random Bit Errors ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "As mentioned in Sec. 4.6, we explore the robustness of NeuralFuse to low-precision quantization of model weights and consider the case of random bit errors. Here, we demonstrate that NeuralFuse can recover not only the accuracy drop due to reduced precision, but also the drop caused by low-voltageinduced bit errors ( $0.5\\%$ BER) under low precision. We selected two NeuralFuse generators (ConvL and UNetL) for our experiments, and these generators were trained with the corresponding base models (ResNet18 and VGG19) at $1\\%$ BER (CIFAR-10, GTSRB) and $0.5\\%$ BER (ImageNet-10). The experimental results are shown as follows: CIFAR-10 (Sec. H.1), GTSRB (Sec. H.2), and ImageNet-10 (Sec. H.3). Similarly, for ease of comparison, we visualize the experimental results in the figures below each table. Our results show that NeuralFuse can consistently perform well in low-precision regimes as well as recover the low-voltage-induced accuracy drop. ", "page_idx": 25}, {"type": "text", "text": "H.1 CIFAR-10 ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Table 22: Reduced-precision Quantization and with $0.5\\%$ BER on CIFAR-10 pre-trained models. ", "page_idx": 25}, {"type": "table", "img_path": "npoHt6WV1F/tmp/447b460281a2f94e3215566adf1bfc8c8726b222cc168802db5d33bf9267f502.jpg", "table_caption": [], "table_footnote": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 25}, {"type": "image", "img_path": "npoHt6WV1F/tmp/b7217ff667564fec5182b2cc547d7435852969f0781e05ed1a21ad13121ae74c.jpg", "img_caption": ["(c) Base Model: VGG19, no bit error. ", "(d) Base Model: VGG19, $0.5\\%$ B.E.R. "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "Figure 12: Results of Reduced-precision and bit errors $(0.5\\%)$ on CIFAR-10 pre-trained base models. ", "page_idx": 26}, {"type": "text", "text": "H.2 GTSRB ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Table 23: Reduced-precision Quantization and with $0.5\\%$ BER on GTSRB pre-trained models. ", "page_idx": 26}, {"type": "table", "img_path": "npoHt6WV1F/tmp/b0a5b4c06a1f07182117e9f37d7bc46823abe5ac14701ab3347b313a5d85de73.jpg", "table_caption": [], "table_footnote": [], "page_idx": 26}, {"type": "image", "img_path": "npoHt6WV1F/tmp/b3b3285d614845891946d91f4ca60f901934ba5e0bcd35bd66c4dd434146da81.jpg", "img_caption": ["(a) Base Model: ResNet18, no bit error. "], "img_footnote": [], "page_idx": 26}, {"type": "image", "img_path": "npoHt6WV1F/tmp/bdad0724356ed5fe00ff57b4866e821df6bf331f864cd50c70191621bebda06c.jpg", "img_caption": ["(c) Base Model: VGG19, no bit error. "], "img_footnote": [], "page_idx": 26}, {"type": "image", "img_path": "npoHt6WV1F/tmp/5eecd481637251a5109a63404547db7ba2c82f1f1207b5d0c6fef91b5e8f62d9.jpg", "img_caption": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA ", "(b) Base Model: ResNet18, 0.5% B.E.R. "], "img_footnote": [], "page_idx": 26}, {"type": "image", "img_path": "npoHt6WV1F/tmp/77da93d4406edb176d717e4cd149ee5c5f95c482fb59de3c5eb8de437d6a386b.jpg", "img_caption": ["(d) Base Model: VGG19, $0.5\\%$ B.E.R. "], "img_footnote": [], "page_idx": 26}, {"type": "text", "text": "Figure 13: Results of Reduced-precision and bit errors $(0.5\\%)$ on GTSRB pre-trained base models. ", "page_idx": 26}, {"type": "text", "text": "H.3 ImageNet-10 ", "text_level": 1, "page_idx": 27}, {"type": "table", "img_path": "npoHt6WV1F/tmp/c62161ab89f3705b95975b7c1bcc931c60049807498316ef84720b5d43e71eab.jpg", "table_caption": ["Table 24: Reduced-precision Quantization and with $0.5\\%$ BER on ImageNet-10 pre-trained models. "], "table_footnote": [], "page_idx": 27}, {"type": "image", "img_path": "npoHt6WV1F/tmp/555da7df617544053d2506dfe7013042cc60c685211567ecefca4e7fd3afc38f.jpg", "img_caption": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA ", "Figure 14: Results of Reduced-precision and bit errors $(0.5\\%)$ on ImageNet-10 pre-trained base models. "], "img_footnote": [], "page_idx": 27}, {"type": "text", "text": "I Additional Experiments on Adversarial Training ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Adversarial training is a common strategy to derive a robust neural network against certain perturbations. By training the generator using adversarial training proposed in Stutz et al. [2021], we report its performance against low voltage-induced bit errors. We use ConvL as the generator and ResNet18 as the base model, trained on CIFAR-10. Furthermore, we explore different $K$ filp bits as the perturbation on weights of the base model during adversarial training, and then for evaluation, the trained-generator will be applied against $1\\%$ of bit errors rate on the base model. The results are shown in Table 25. After careful tuning of hyperparameters, we find that we are not able to obtain satisfactory recovery when adopting adversarial training. Empirically, we argue that adversarial training may not be suitable for training generator-based methods. ", "page_idx": 27}, {"type": "text", "text": "J Additional Experiments on Robust Model Trained with Adversarial Weight Perturbation with NeuralFuse ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Previously, Wu et al. [2020] proposed that one could obtain a more robust model via adversarial weight perturbation. To seek whether such models could also be robust to random bit errors, we ", "page_idx": 27}, {"type": "text", "text": "Table 25: Performance of the generator trained by adversarial training under K filp bits on ResNet18 with CIFAR-10. The results show that the generator trained by adversarial training cannot achieve high accuracy against bit errors under a $1\\%$ bit error rate. ", "page_idx": 28}, {"type": "table", "img_path": "npoHt6WV1F/tmp/ca9c7197570a0b92942bbfe5462cc490c4361a03a75130aec8ec9c7f44c0a8e4.jpg", "table_caption": [], "table_footnote": ["Note. CA $(\\%)$ : clean accuracy; PA $(\\%)$ : perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 28}, {"type": "text", "text": "conducted an experiment on CIFAR-10 with the proposed adversarially trained PreAct ResNet18. The experimental results are shown in Table 26. We find that the average perturbed accuracy is $23\\%$ and $63.2\\%$ for PreAct ResNet18 under $1\\%$ and $0.5\\%$ BER, respectively. This result is lower than $38.9\\%$ and $70.1\\%$ from ResNet18 in Table 12, indicating their poor generalization ability against random bit errors. Nevertheless, when equipped NeuralFuse on the perturbed model, we could still witness a significant recover percentage under both $1\\%$ and $0.5\\%$ BER This result further demonstrates that NeuralFuse could be adapted to various models (i.e., trained in different learning algorithms). ", "page_idx": 28}, {"type": "table", "img_path": "npoHt6WV1F/tmp/565f0cd925f5325e88af0e2c6c942cf94bd867a54184f696dcf22c7d9eb4e9c4.jpg", "table_caption": ["Table 26: Performance of NeuralFuse trained with rubust CIFAR-10 pre-trained PreAct ResNet18. The results show that NeuralFuse can be used together with a robust model and further improve perturbed accuracy under both $1\\%$ and $0.5\\%$ BER "], "table_footnote": ["Note. BER: the bit-error rate of the base model; CA $(\\%)$ : clean accuracy; PA $(\\%)$ ): perturbed accuracy; NF: NeuralFuse; and RP: total recovery percentage of PA (NF) vs. PA "], "page_idx": 28}, {"type": "text", "text": "K Data Embeddings Visualization ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "To further understand how our proposed NeuralFuse works, we visualize the output distribution from the final linear layer of the base models and project the results onto the 2D space using t-SNE [van der Maaten and Hinton, 2008]. Figure 15 shows the output distribution from ResNet18 (trained on CIFAR-10) under a $1\\%$ bit error rate. We chose two generators that have similar architecture: ConvL and ConvS, for this experiment. We can observe that: (a) The output distribution of the clean model without NeuralFuse can be grouped into 10 classes denoted by different colors. (b) The output distribution of the perturbed model under a $1\\%$ bit error rate without NeuralFuse shows mixed representations and therefore degraded accuracy. (c) The output distribution of the clean model with ConvL shows that applying NeuralFuse will not hurt the prediction of the clean model too much (i.e., it retains high accuracy in the regular voltage setting). (d) The output distribution of the perturbed model with ConvL shows high separability (and therefore high perturbed accuracy) as opposed to (b). (e)/(f) shows the output distribution of the clean/perturbed model with ConvS. For both (e) and (f), we can see nosier clustering when compared to (c) and (d), which means the degraded performance of ConvS compared to ConvL. The visualization validates that NeuralFuse can help retain good data representations under random bit errors and that larger generators in NeuralFuse have better performance than smaller ones. ", "page_idx": 28}, {"type": "text", "text": "", "page_idx": 29}, {"type": "image", "img_path": "npoHt6WV1F/tmp/673223be748c97b846d3eff01171ee1e02eabd66863af99f1fba5fc3a6dd164e.jpg", "img_caption": ["Figure 15: t-SNE results for ResNet18 trained by CIFAR-10 under $1\\%$ of bit error rate. (a) Clean model. (b) Perturbed model. (c) Clean model with ConvL. (d) Perturbed model with ConvL. (e) Clean model with ConvS. (f) Perturbed model with ConvS. "], "img_footnote": [], "page_idx": 29}, {"type": "text", "text": "L Qualitative Analysis of Transformed Inputs ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "In this section, we conduct a qualitative study to visualize the images transformed by NeuralFuse and present some properties and observations of these images. We utilize six different architectures of NeuralFuse generators trained with ResNet18 under a $\\bar{1\\%}$ bit error rate. ", "page_idx": 29}, {"type": "text", "text": "Figure 16 (a) showcases several images from the truck class in CIFAR-10. Notably, images of the same class, when transformed by the same NeuralFuse, exhibit similar patterns, such as circles symbolizing the wheels of the trucks. ", "page_idx": 29}, {"type": "text", "text": "In Figures 16 (b) and 16 (c), we observe analogous phenomena in the GTSRB and CIFAR-100 datasets. Transformed images of the same class using the same generator consistently display patterns. On GTSRB, NeuralFuse-generated patterns highlight the sign\u2019s shape with a green background, even if the original images have a dark background and are under different lighting conditions. These results further underscore the efficacy and efficiency of NeuralFuse. ", "page_idx": 29}, {"type": "text", "text": "Figure 17 presents more images from different classes in (a) CIFAR-10, (b) GTSRB, and (c) CIFAR100. The transformed images exhibit distinct patterns for each class, suggesting that NeuralFuse effectively transforms images into class-specific patterns, making associated features robust to random bit errors and easily recognizable by the base model in low-voltage settings. ", "page_idx": 29}, {"type": "image", "img_path": "npoHt6WV1F/tmp/27d38bcbacf10a04c8029888427b2ca8871ba9a2763152e8ee28889ad3eefc25.jpg", "img_caption": ["Figure 16: Visualization of transformed images from different NeuralFuse generators trained with ResNet18 at $1\\%$ bit error rate. "], "img_footnote": [], "page_idx": 30}, {"type": "image", "img_path": "npoHt6WV1F/tmp/deca4811c16567d25c417aea0262f0d15209b071ac41ad9666ed47199f8fb27b.jpg", "img_caption": ["Figure 17: Visualization of transformed images from different NeuralFuse generators trained by ResNet18 with $1\\%$ bit error rate. ", "(c) 20 classes sampled from CIFAR-100 "], "img_footnote": [], "page_idx": 30}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We list our main contributions in the Abstract and Introduction. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 31}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Justification: We discussed the limitation of our work on runtime/latency in Section 4.4. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 31}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: This paper does not include theoretical results. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 32}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: The implementation details are presented in Appendices A and B. Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 32}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: Our code can be found at https://github.com/IBM/NeuralFuse. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 33}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: The experimental details are presented in Section 4.1, Appendix and our code. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 33}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: For each experimental result, we report the mean and standard deviation and plot the error bars. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 33}, {"type": "text", "text": "", "page_idx": 34}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: The computing resources are presented in Section 4.1. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 34}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: The work stated in this paper conform with the NeurIPS Code of Ethics. Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 34}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: We discussed broader impacts in Section 5. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 34}, {"type": "text", "text": "", "page_idx": 35}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 35}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 35}, {"type": "text", "text": "Justification: This paper poses no such risks. ", "page_idx": 35}, {"type": "text", "text": "Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 35}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 35}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 35}, {"type": "text", "text": "Justification: We have cited the original paper that produced the code package or dataset. Guidelines: ", "page_idx": 35}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 35}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 36}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 36}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 36}, {"type": "text", "text": "Justification: We described how to run our code in the README.md. ", "page_idx": 36}, {"type": "text", "text": "Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 36}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 36}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 36}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 36}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 36}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 36}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 36}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 36}]