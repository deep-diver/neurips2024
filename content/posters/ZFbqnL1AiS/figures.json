[{"figure_path": "ZFbqnL1AiS/figures/figures_1_1.jpg", "caption": "Figure 1: Local feature configurations are insufficient to determine whether features belong to the same object: highlighted horizontal and vertical configurations sometimes belong to the same object (green) and at others to different objects (red).", "description": "This figure illustrates the ambiguity of local image features regarding perceptual grouping.  The example shows simple shapes (T, H, and overlapping squares) composed of horizontal and vertical bars. The green-highlighted bar pairs belong to the same object, while the red-highlighted bar pairs belong to different objects. This demonstrates the difficulty a feedforward convolutional network might face in discerning object boundaries based solely on local features, necessitating a more global or iterative approach.", "section": "Introduction"}, {"figure_path": "ZFbqnL1AiS/figures/figures_2_1.jpg", "caption": "Figure 2: SynCx is a fully convolutional autoencoder that iteratively processes an input image. It starts with a randomly initialized phase \u03a6\u00b9 and the input image \u03bc\u02e3 in the magnitude-component updates the phases in a stateful manner, i.e., output phase at iteration 1 fed as input at iteration 2 (\u03a6\u00b2) and so on. The magnitude-component at the input is always clamped to the input image \u03bc\u02e3. SynCx is trained to reconstruct \u03bc\u02e3 using the output magnitude-component \u03bc\u1dbb at every step.", "description": "This figure illustrates the SynCx model, a fully convolutional autoencoder that iteratively processes input images.  It uses complex-valued weights and activations. The model begins with random phase initialization (\u03a6\u00b9) and iteratively refines these phases through multiple iterations. The input image's magnitude (\u03bc\u02e3) remains constant across iterations, acting as a constraint. The output phase from one iteration becomes the input phase for the next (e.g., \u03a6\u00b9 to \u03a6\u00b2), and the goal is to reconstruct the input image's magnitude (\u03bc\u02e3) using the output magnitude (\u03bc\u1dbb) at each step. This iterative process allows for constraint propagation and the refinement of object groupings via phase relationships.", "section": "Method"}, {"figure_path": "ZFbqnL1AiS/figures/figures_5_1.jpg", "caption": "Figure 3: Evolution of phase maps in radial and heatmap form (colors matched) across iterations in SynCx for two inputs from Tetrominoes (row 1) and dSprites (row 2).", "description": "This figure visualizes the evolution of phase maps across iterations for two example inputs, one from the Tetrominoes dataset and one from the dSprites dataset.  Each row represents a different dataset. For each input, the figure shows the input image, followed by the phase maps at iterations 1, 2, and 3.  The phase maps are presented in two formats: a radial plot which shows the phase distribution spatially, and a heatmap which color-codes the phases. The evolution of the phase maps across iterations demonstrates how SynCx iteratively refines its object binding hypotheses. The color matching between the radial plots and heatmaps allows easy comparison.", "section": "Results"}, {"figure_path": "ZFbqnL1AiS/figures/figures_6_1.jpg", "caption": "Figure 4: Comparison between RF and SynCx grouping on Tetrominoes, dSprites and CLEVR. RF tends to systematically group similarly colored objects together while SynCx is more adept at separating them such as blue tetris blocks (left), green square and heart (middle) and yellow cylinders (right).", "description": "This figure compares the performance of RF and SynCx models on three different datasets: Tetrominoes, dSprites, and CLEVR.  It visually demonstrates that RF tends to group objects based primarily on color, even when that leads to incorrect groupings. In contrast, SynCx demonstrates a superior ability to separate objects based on their shapes and spatial relationships, even those with similar colors. This highlights SynCx's improved ability to perform unsupervised object discovery.", "section": "Results"}, {"figure_path": "ZFbqnL1AiS/figures/figures_6_2.jpg", "caption": "Figure 5: Reconstruction, object masks, radial phase plot, and phase heatmaps (colors matched between columns 5 & 6) for SynCx without the bottleneck (row 1) and the full SynCx model (row 2).", "description": "This figure shows the results of two versions of the SynCx model on the Tetrominoes dataset. The top row shows a version without a bottleneck, while the bottom row shows the full model with a bottleneck.  The images compare the model's reconstruction of the input image, the ground truth object masks, the model's predicted object masks, a radial phase plot showing the phase distribution, and a heatmap visualization of the phases. The comparison demonstrates how the bottleneck affects the model's ability to separate and group the objects based on phase synchronization, highlighting the importance of the bottleneck for successful object discovery.", "section": "Effect of Bottlenecks"}, {"figure_path": "ZFbqnL1AiS/figures/figures_8_1.jpg", "caption": "Figure 6: Comparison between RF and SynCx grouping on Tetrominoes, dSprites and CLEVR. RF tends to systematically group similarly colored objects together while SynCx is more adept at separating them such as blue tetris blocks (left), green square and heart (middle) and yellow cylinders (right).", "description": "This figure compares the performance of RF and SynCx models on three datasets: Tetrominoes, dSprites, and CLEVR.  It highlights a key difference in how the models handle object grouping, specifically when objects share similar colors. RF shows a tendency to group objects based on color, even when they are distinct objects. SynCx, on the other hand, demonstrates a more refined ability to separate objects based on other features besides color, resulting in more accurate groupings.", "section": "Results"}, {"figure_path": "ZFbqnL1AiS/figures/figures_18_1.jpg", "caption": "Figure 7: Collection of images grouped by SynCx from the Tetrominoes dataset. Rows 1\u20133 show cases where SynCx perfectly groups the 3 tetris blocks even with multiple objects of the same color. Row 4 shows a failure mode where it imperfectly partitions the two red blocks into one straight parts and two L-shaped parts. It is plausible decomposition since the dataset contains many tetris blocks with such L-shaped bends. Rows 5 and 6 show another failure mode where it fails to decompose the two similarly colored tetris blocks at all. Rather SynCx learns specialized phases for the edges and interior portions of each of the similarly colored tetris blocks. This could be a caused by a particularly poor initialization of phase maps by random sampling.", "description": "This figure shows several examples of how the SynCx model groups Tetrominoes.  Most examples show successful grouping of the blocks, even when colors overlap. However, some examples illustrate cases where the model fails to correctly separate similarly colored objects. This is attributed to limitations in the model's phase initialization.", "section": "Additional Visualizations"}, {"figure_path": "ZFbqnL1AiS/figures/figures_19_1.jpg", "caption": "Figure 7: Collection of images grouped by SynCx from the Tetrominoes dataset. Rows 1\u20133 show cases where SynCx perfectly groups the 3 tetris blocks even with multiple objects of the same color. Row 4 shows a failure mode where it imperfectly partitions the two red blocks into one straight parts and two L-shaped parts. It is plausible decomposition since the dataset contains many tetris blocks with such L-shaped bends. Rows 5 and 6 show another failure mode where it fails to decompose the two similarly colored tetris blocks at all. Rather SynCx learns specialized phases for the edges and interior portions of each of the similarly colored tetris blocks. This could be a caused by a particularly poor initialization of phase maps by random sampling.", "description": "This figure shows examples of how SynCx groups Tetrominoes. In most cases, it correctly groups the blocks, even when blocks share a color.  However, there are some failure modes shown, where SynCx either incompletely separates blocks of the same color or fails to separate them at all.  These failures may be due to the random initialization of phases.", "section": "Additional Visualizations"}, {"figure_path": "ZFbqnL1AiS/figures/figures_20_1.jpg", "caption": "Figure 3: Evolution of phase maps in radial and heatmap form (colors matched) across iterations in SynCx for two inputs from Tetrominoes (row 1) and dSprites (row 2).", "description": "This figure visualizes how the phase maps evolve across iterations during the SynCx model's grouping process. It shows two examples, one from the Tetrominoes dataset and one from the dSprites dataset.  The visualizations use heatmaps and radial plots of the phase components of the model's complex-valued output to illustrate the progressive separation of phases corresponding to different objects.  The color scheme is consistent between the heatmaps and radial plots, showing how the phases of features related to each object become more synchronized over iterations.", "section": "Results"}, {"figure_path": "ZFbqnL1AiS/figures/figures_21_1.jpg", "caption": "Figure 10: Collection of samples comparing the use of t-SNE versus UMAP for the dimensionality reduction computation in the visualization process. Panels 1 and 5 show cases where the clusters of projected phase maps of both t-SNE and UMAP correlate with the number of objects in the image. Panels 2, 3 and 4 show cases where the clusters of phases projected using t-SNE correlate with the number of objects in the image whereas the clusters of phases projected using UMAP do not. Overall, we find that t-SNE produces qualitatively better projections than UMAP, i.e., phase clusters correlate better to the number of objects in the image.", "description": "This figure compares t-SNE and UMAP for dimensionality reduction in visualizing phase maps.  It shows examples where t-SNE effectively groups phases according to the number of objects, while UMAP does not. This highlights t-SNE's superiority for this specific visualization task in the paper.", "section": "Phase Map Visualization"}]