[{"type": "text", "text": "$\\mathbf{P^{2}C^{2}N e t\\colon}$ : PDE-Preserved Coarse Correction Network for Efficient Prediction of Spatiotemporal Dynamics ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Qi Wang1, Pu Ren2, Hao Zhou1, Xin-Yang Liu3, Zhiwen Deng4, Yi Zhang4, Ruizhi Chengze4, Hongsheng Liu4, Zidong Wang4, Jian-Xun Wang3, Ji-Rong Wen1, Hao $\\mathbf{Sun}^{1,*}$ , Yang Liu5,\u2217 ", "page_idx": 0}, {"type": "text", "text": "1Gaoling School of Artificial Intelligence, Renmin University of China, Beijing, China 2Department of Civil and Environmental Engineering, Northeastern University, Boston, MA, USA   \n3Department of Aerospace and Mechanical Engineering, University of Notre Dame, Notre Dame, IN, USA 4Huawei Technologies, Shenzhen, China 5School of Engineering Science, University of Chinese Academy of Sciences, Beijing, China   \nEmails: qi_wang@ruc.edu.cn (Q.W.); haosun@ruc.edu.cn (H.S.); liuyang22@ucas.ac.cn (Y.L.) ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "When solving partial differential equations (PDEs), classical numerical methods often require fine mesh grids and small time stepping to meet stability, consistency, and convergence conditions, leading to high computational cost. Recently, machine learning has been increasingly utilized to solve PDE problems, but they often encounter challenges related to interpretability, generalizability, and strong dependency on rich labeled data. Hence, we introduce a new PDE-Preserved Coarse Correction Network $\\mathrm{(P^{2}C^{2}N e t)}$ to efficiently solve spatiotemporal PDE problems on coarse mesh grids in small data regimes. The model consists of two synergistic modules: (1) a trainable PDE block that learns to update the coarse solution (i.e., the system state), based on a high-order numerical scheme with boundary condition encoding, and (2) a neural network block that consistently corrects the solution on the fly. In particular, we propose a learnable symmetric Conv filter, with weights shared over the entire model, to accurately estimate the spatial derivatives of PDE based on the neural-corrected system state. The resulting physics-encoded model is capable of handling limited training data (e.g., 3\u20135 trajectories) and accelerates the prediction of PDE solutions on coarse spatiotemporal grids while maintaining a high accuracy. $\\mathrm{P^{2}C^{2}N e t}$ achieves consistent state-of-the-art performance with over $50\\%$ gain (e.g., in terms of relative prediction error) across four datasets covering complex reaction-diffusion processes and turbulent flows. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Complex spatiotemporal dynamical systems are pivotal and commonly seen in numerous fields such biology, meteorology, fluid mechanics, etc. The behaviors of these systems are primarily governed by partial differential equations (PDEs), conventionally solved by numerical methods [1\u20134]. However, direct numerical simulation (DNS) demands in-depth knowledge of the underlying physics, and the efficacy of numerical solutions is intricately linked to the resolution of mesh grids and time steps. High-resolution spatiotemporal grids are essential for accurate and convergent calculations, yet leading to substantial computational costs. For instance, simulating the flow field around a large aircraft [5, 6] involves creating over millions of mesh nodes and may consume vast simulation time even on high performance computing. Additionally, any changes in initial and boundary conditions (I/BCs) or design parameters necessitate recalculations, further compounding the complexity. ", "page_idx": 0}, {"type": "text", "text": "Recently, tremendous efforts have been placed on machine learning for data-driven simulation of these systems [7\u20139], demonstrating promising potential. These methods do not require the a priori knowledge of physics and, meanwhile, help bypass some traditional constraints, e.g., the smallest size of mesh grid and time step to guarantee solution accuracy, stability and convergence [10]. However, they typically face issues of poor interpretability, weak generalizability and strong dependency of rich labeled data. Their performance deteriorate significantly particularly in small data regimes. ", "page_idx": 1}, {"type": "text", "text": "Embedding prior physics knowledge into the learning process has demonstrated effective to overcome the aforementioned issues. A brute-force way lies in creating regularizers (e.g., the residual form of PDEs and I/BCs) as \u201csoft\u201d penalty in the loss function, e.g., the family of physics-informed neural works (PINNs) [11\u201317]. However, such a strategy has limited scalability and generalizability, and the solution accuracy relies largely on a proper selection of loss weight hyperparameters. Embedding physics explicitly into the network architecture, which imposes \u201chard\u201d constraints such as physicsencoded recurrent convolutional neural network (PeRCNN) [18, 19], possesses better generalizability as well as offers better convergence and flexibility for model training without the need of fine-tuning hyperparameters. Nevertheless, existing methods fail to handle coarse mesh grids and suffer from instability issues especially for long-range prediction of dynamics. Hybridizing classical numerical schemes and neural networks, e.g., the learned interpolation (LI) model [20], can enable accelerated simulation on coarse mesh grids with satisfied accuracy. Yet, since the numerical part is non-trainable, such models still require rich labeled data to retain accuracy. ", "page_idx": 1}, {"type": "text", "text": "To tackle these critical challenges, we introduce the $\\mathrm{P^{2}C^{2}N e t}$ model for efficient prediction of spatiotemporal dynamics on coarse mesh grids in small training data regimes. Specifically, a trainable PDE block (a white box) is designed to learn the coarse solution at low resolution, where the temporal marching of system states is handled by a fourth-order Runge-Kutta (RK4) scheme. We also propose a learnable symmetric Conv fliter for more accurate estimation of spatial derivatives on coarse grids, as required in PDE block. A neural network (NN) block, which serves as a correction module, is further introduced to correct the coarse solution, restoring information lost due to reduced resolution. We also encode BC into the solution via a padding strategy. Our primary contributions are threefold: ", "page_idx": 1}, {"type": "text", "text": "\u2022 We propose a new physics-encoded correction learning model $\\mathrm{(P^{2}C^{2}N e t)}$ to efficiently predict complex spatiotemporal dynamics on coarse mesh grids. The model requires only a small set of training data and possesses plausible generalizability.   \n\u2022 We introduce a structured Conv filter that preserves symmetry to improve the estimation accuracy of coarse spatial derivatives required in the solution updating process, which makes the PDE block trainable with flexibility of handling coarse grids.   \n\u2022 $\\mathrm{P^{2}C^{2}N e t}$ achieves consistent state-of-the-art performance with at least $50\\%$ gain (e.g., in terms of relative prediction error) across four datasets covering complex reaction-diffusion (RD) processes and turbulent flows, simultaneously retaining accuracy and efficiency. ", "page_idx": 1}, {"type": "text", "text": "2 Related work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Numerical methods. Conventionally, PDE systems are solved by classical numerical methods such as finite difference [1], finite volume [2], finite element [3], and spectral methods [4]. These methods often require fine mesh grids and reasonable time stepping to meet stability, consistency and convergence conditions. When dealing with large scale simulations or inverse analyses, the computational costs remain remarkably high. ", "page_idx": 1}, {"type": "text", "text": "Deep learning methods. Given sufficient labeled training data, deep learning has been recently applied to solve PDE problems. Representative approaches include Conv-based NN models [9, 21], U-Net [22], ResNet [23], graph neural networks [24, 25], and Transformer-based models [26\u201328]. In addition, neural operators such as DeepONet [7], multiwavelet-based model (MWT) [29], Fourier neural operator (FNO) [8], and their variants [30\u201332] have been designed to directly learn mappings between function spaces, making them particularly well-suited for modeling PDE systems. Diffusion models have also been employed for prediction of spatiotemporal dynamics [33]. ", "page_idx": 1}, {"type": "text", "text": "Physics-aware learning methods. Recently, physics-aware deep learning has demonstrated great potential in modeling spatiotemporal dynamics under conditions of small training data. This paradigm can be divided into two categories based on the way of embedding PDE information: (1) physicsinformed, and (2) physics-encoded. The former formalizes PDE soft constraints including equations and I/BCs via loss regularization on point-wise or mesh-based NNs (e.g., PINN [11\u201313, 17], PhyGeoNet [34], PhyCRNet [35], PhySR [36], etc.), while the latter imposes hard constraints via encoding PDE structures (e.g., equations, I/BCs, law of thermodynamics, symmetry) into NN architectures such as PeRCNN [18, 19], TiGNN [37], and EquNN [38]. Other related works include the PDE-Net models [39, 40] with designed convolution kernels approximating differential operators, thereby modeling the dynamics of the system. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Hybrid learning methods. The hybrid learning scheme represents a novel research direction that has emerged in recent years, which integrates numerical methods with NNs. The resulting solver can leverage a variety of classical numerical methods such as finite difference (e.g., PPNN [41], numerical discretization learning [42]), finite volume (e.g., LI [20] and TSM [43], and spectral methods (e.g., machine-learning-augmented spectral solver [44]). These approaches can operate on coarse grids, enabling faster simulations compared with traditional numerical solvers while retaining accuracy. However, since the numerical part is non-trainable, such models generally require rich labeled data. ", "page_idx": 2}, {"type": "text", "text": "3 Methodology ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 Problem formulation ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Let us consider a spatiotemporal dynamical system governed by the general form of PDEs: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathbf{u}}{\\partial t}-\\mathcal{F}(\\mathbf{u},\\mathbf{u}^{2},\\mathbf{\\boldsymbol{\\cdot}}\\cdot\\mathbf{\\nabla},\\mathbf{V}\\mathbf{u},\\mathbf{V}^{2}\\mathbf{u},\\cdot\\mathbf{\\nabla}\\cdot\\mathbf{\\nabla};\\mu)=\\mathbf{f},\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $\\mathbf{u}(\\mathbf{x},t)\\in\\mathbb{R}^{n}$ denotes the $n$ -dimensional physical state within spatiotemporal domain $\\Omega\\!\\times\\![0,T]$ ; ${{\\partial}{\\bf{u}}}/{{\\partial}t}$ the first-order time derivative; $\\mathcal{F}$ a linear/nonlinear function; $\\mathbf{V}\\in\\mathbb{R}^{n}$ the Nabla operator; $\\pmb{\\mu}$ the PDE parameters (e.g., the Reynolds number $R e$ ); f the external force (e.g., $\\mathbf{f}=\\mathbf{0}$ for source-free cases). Besides that, we define the initial condition (IC) as $\\mathcal{T}(\\mathbf{u},\\mathbf{u}_{t};\\mathbf{x}\\in\\Omega,t=0)=\\mathbf{0}$ and the boundary condition (BC) as $\\mathcal{B}(\\mathbf{u},\\nabla\\mathbf{u},\\cdot\\cdot\\cdot;\\mathbf{x}\\in\\partial\\Omega)=\\mathbf{0}$ , where $\\partial\\Omega$ denotes the boundary of $\\Omega$ . ", "page_idx": 2}, {"type": "text", "text": "Our aim is to develop a learnable coarse model that accelerates the simulation and prediction of spatiotemporal dynamics based on a minimal set of sparse data (e.g., low-resolution data downsampled across space and time). The learned model is expected to achieve high solution accuracy and superior generalizability over various PDE scenarios, including ICs, force terms, and PDE parameters. ", "page_idx": 2}, {"type": "text", "text": "3.2 Network architecture ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Herein, we introduce the $\\mathrm{P^{2}C^{2}N e t}$ architecture, as shown in Figure 1, taking the simulation of Navier-Stokes (NS) flows as an example. The model is composed of four blocks, namely, the state variable correction block, the learnable PDE block, the Poisson block, and the NN block. Note that the network architecture is flexible and features a Poisson block that solves for the pressure term $p$ , which is absent in other cases. ", "page_idx": 2}, {"type": "text", "text": "3.2.1 The flow of data ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In Figure 1 (a), the network architecture includes two paths: the upper path computes the coarse solution using a learnable PDE block, while the lower path is incorporated into the network to correct the solution on a coarse grid with a Poisson block and a NN block. The data flow operates as follows: (1) the network accepts $\\mathbf{u}_{k}$ as input and processes it by the PDE block on the upper path, where the PDE block computes the residual of the governing equation. A fliter bank, defined as a learnable fliter with symmetry constraints, calculates the derivative terms based on the corrected solution (produced by the correction block). These terms are combined into an algebraic equation (a learnable form of $\\mathcal{F}$ ). This process is incorporated into the RK4 integrator for solution update. (2) In the lower path, $\\mathbf{u}_{k}$ is first corrected by the correction block, and $p_{k}$ is computed by the Poisson block. Inputs, including solution states $\\{\\mathbf{u}_{k},p_{k}\\}$ and their derivative terms, forcing term, and Reynolds number, are fed into the NN block. The output from this block serves as a correction for the upper path. (3) The final result $\\mathbf{u}_{k+1}$ is obtained by combining the outputs from both the upper and lower paths. During the gradient back-propagation process, the NN block learns to correct the coarse solution output of the PDE block on the fly, and ensures that their combined results more closely approximate the ground truth solution. ", "page_idx": 2}, {"type": "image", "img_path": "motImXq3B1/tmp/5387093158d4bc4c4c0b531f5582093c7f03b5c21300328900fab171789c4672.jpg", "img_caption": ["Figure 1: Schematic of $\\mathrm{P^{2}C^{2}}$ Net for learning Navier-Stokes flows. (a), Overall model architecture. (b), Poisson block. (c), learnable PDE block. (d), NN block. (e), Poisson solver. (f), Symbol notations. (g), Conv fliter with symmetric constraint. "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "3.2.2 RK4 integration scheme ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Similar to standard numerical solvers, the goal is to predict the solution at every time step satisfying the underlying PDEs given specific I/BCs. Here, we aim to address the challenge of spatiotemporal dynamics evolution on coarse grids (e.g., low resolution). Given the coarse solution at timestep $t_{k}$ , denoted by $\\mathbf{u}_{k}$ , we expect the model yielding an accurate prediction of $\\mathbf{u}_{k+1}$ , v.i.z., ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{u}_{k+1}=\\mathbf{u}_{k}+\\int_{t_{k}}^{t_{k+1}}\\left[\\mathcal{H}\\left(\\mathbf{u}(\\tilde{\\mathbf{x}},\\tau),\\mathbf{u}^{2}(\\tilde{\\mathbf{x}},\\tau),\\cdots,\\nabla\\mathbf{u}(\\tilde{\\mathbf{x}},\\tau),\\nabla^{2}\\mathbf{u}(\\tilde{\\mathbf{x}},\\tau),\\cdots;\\mu\\right)+\\mathbf{f}(\\tau)\\right]d\\tau\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathcal{H}$ (the PDE block) denotes a learnable form of $\\mathcal{F}$ , which is discussed in Section 3.2.3; \u02dcx represents the coarse grid coordinates. We herein employ the RK4 scheme as the integrator for time marching of the dynamics, offering the fourth-order accuracy $(\\mathcal{O}(\\delta t^{4}))$ , where $\\delta t=t_{k+1}-t_{k}$ is the coarse time step. More details on RK4 can be found in Appendix Section B.3. ", "page_idx": 3}, {"type": "text", "text": "3.2.3 Learnable PDE Block ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We assume that the PDE formulation in Eq. (1) is given, e.g., the explicit expression of $\\mathcal{F}$ is known. With coarse mesh grids and large time stepping, numerical methods such as finite difference (FD) tend to diverge. This issue becomes more pronounced with greater grid coarsening. Hence, we propose a learnable PDE block (depicted in Figure 1(c)), denoted by $\\mathcal{H}$ , to approximate $\\mathcal{F}$ on coarse grids, so as to enable the coarse simulation simultaneously retaining efficiency and accuracy, expressed as ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{H}\\left(\\mathbf{u}_{k},\\mathbf{u}_{k}^{2},\\cdot\\cdot\\cdot,\\nabla\\mathbf{u}_{k},\\nabla^{2}\\mathbf{u}_{k},\\cdot\\cdot\\cdot;\\boldsymbol{\\mu}\\right)\\gets\\mathcal{F}\\left(\\mathbf{u}_{k},\\mathbf{u}_{k}^{2},\\cdot\\cdot\\cdot,\\hat{\\nabla}\\hat{\\mathbf{u}}_{k},\\hat{\\nabla}^{2}\\hat{\\mathbf{u}}_{k},\\cdot\\cdot\\cdot;\\boldsymbol{\\mu}\\right)}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathbf{u}_{k}$ denotes the coarse solution at time $t_{k}$ ; $\\hat{\\mathbf{u}}_{k}$ the corresponding neural-corrected coarse solution state, obtained by the correction block shown in Figure 1(a) and (c), used for estimation of spatial derivatives, e.g., $\\hat{\\mathbf{u}}_{k}=\\mathbb{N}\\mathbf{N}(\\mathbf{u}_{k})$ . Here, $\\hat{\\mathbf{V}}$ represents a learnable Nabla operator composed of a Conv filter with symmetric constraint (e.g., an enhanced FD kernel for numerical approximation of spatial derivatives). Through the RK4 integration, we are then able to predict the coarse solution for the next time step. Note that the PDE parameters $\\pmb{\\mu}$ can be set as trainable if unknown. Despite information loss at the low resolution, such a learnable PDE block allows for more accurate derivative estimation on coarse grids and ensures better adherence of the updated coarse solution to underlying PDEs. Clearly, such a block adds a fully interpretable \u201cwhite box\u201d to the overall network architecture. ", "page_idx": 3}, {"type": "text", "text": "Correction block: The correction block takes a NN to correct the coarse solution. In particular, we choose FNO [8] as the neural correction operator performed on the coarse solution field in such a block. In the Fourier space, FNO decomposes the input data into components with specific frequencies, processes each component separately, and then applies Fourier transform to restore the updated spectral features back to the physical domain. The layer-wise update can be expressed as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{v}^{l+1}(\\widetilde{\\mathbf{x}})=\\sigma\\left(\\mathbf{W}^{l}\\mathbf{v}^{l}(\\widetilde{\\mathbf{x}})+\\left(K(\\phi)\\mathbf{v}^{l}\\right)(\\widetilde{\\mathbf{x}})\\right)\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where, $\\mathbf{v}^{l}(\\widetilde{\\mathbf{x}})$ denotes the $l$ -th layer latent feature map on the coarse grids $\\tilde{\\bf x}$ . Note that $\\mathbf{v}^{0}(\\widetilde{\\mathbf{x}})=\\mathcal{P}(\\mathbf{u}_{k})$ , in which $\\mathcal{P}$ is a local transformation function that lifts $\\mathbf{u}_{k}$ to a higher dimensional representation. Here, $\\mathcal{K}(\\phi)(\\mathbf{z})=\\mathrm{iFFT}\\big(\\mathbf{R}_{\\phi}\\cdot\\mathrm{FFT}(\\mathbf{z})\\big)$ denotes a kernel integral transformation of the latent feature map $\\mathbf{z}$ , which encompasses Fourier transform, spectral flitering and convolution in the frequency domain $\\mathbf{R}_{\\phi}$ , and inverse Fourier transform; $\\phi$ the network parameters; $\\sigma(\\cdot)$ the GELU activation function; $\\mathbf{W}^{l}$ the weights of a linear transformation. Given an $L$ -layer FNO, the corrected coarse solution reads $\\hat{\\mathbf{u}}_{k}=\\breve{\\mathscr{Q}}\\left(\\mathbf{v}^{L}(\\tilde{\\mathbf{x}})\\right)$ , where $\\mathcal{Q}$ is a local projection function. Details of the FNO correction block are found in Appendix Section B.1. ", "page_idx": 4}, {"type": "text", "text": "Conv filter with symmetric constraint: Based on FD schemes, spatial derivatives can be approximated by central difference stencils represented by convolution kernels [35, 39\u201341]. Such an approach often requires fine mesh grids to ensure accuracy; otherwise on coarse grids, there exists solution divergence issue. To this end, we leverage our understanding of FD stencils and propose a Conv fliter with symmetric constraints to improve the accuracy of spatial derivative approximation on coarse mesh grids. As shown in Figure $1(\\mathbf{g})$ , the filter weights are transformed into a $5\\times5$ matrix $\\mathbf{g}$ with 7 learnable parameters (Table S1 demonstrates the significant differences in results across various kernel sizes when applied to the Burgers dataset.), which satisfies symmetry, to estimate the first-order derivative along the horizontal direction (e.g., the vertical direction takes $\\mathbf{g}^{T}$ ), v.i.z., ", "page_idx": 4}, {"type": "equation", "text": "$$\n{\\bf g}=\\left(\\begin{array}{c c c c c}{{a_{1}}}&{{a_{4}}}&{{a_{7}}}&{{-a_{4}}}&{{-a_{1}}}\\\\ {{a_{2}}}&{{a_{5}}}&{{-2a_{7}}}&{{-a_{5}}}&{{-a_{2}}}\\\\ {{a_{3}}}&{{a_{6}}}&{{0}}&{{-a_{6}}}&{{-a_{3}}}\\\\ {{-a_{2}}}&{{-a_{5}}}&{{2a_{7}}}&{{a_{5}}}&{{a_{2}}}\\\\ {{-a_{1}}}&{{-a_{4}}}&{{-a_{7}}}&{{a_{4}}}&{{a_{1}}}\\end{array}\\right)\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Although the number of learnable parameters in the Conv kernel is limited, the coarse derivatives can still be accurately approximated after the model is trained (see the ablation study in Section 4.2). The structured fliter is designed for Conv operation which satisfies the Order of Sum Rules stated in Lemma 1 [39] (see Appendix Section A for more details). ", "page_idx": 4}, {"type": "text", "text": "Lemma 1: A 2D filter $\\mathbf{g}_{m\\times m}$ has sum rules of order $\\iota=\\left(\\iota_{1},\\iota_{2}\\right)$ , where $u\\in\\mathbb{Z}_{+}^{2}$ , provided that ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}k_{1}^{\\alpha_{1}}k_{2}^{\\alpha_{2}}g[k_{1},k_{2}]=0\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "for all $\\alpha=(\\alpha_{1},\\alpha_{2})\\in\\mathbb{Z}_{+}^{2}$ with $|\\alpha|:=\\alpha_{1}+\\alpha_{2}<|\\iota|$ and for all $\\alpha\\in\\mathbb{Z}_{+}^{2}$ with $|\\alpha|=|\\iota|$ but $\\alpha\\neq\\iota$ . If this holds for all $\\alpha\\in\\mathbb{Z}_{+}^{2}$ with $|\\alpha|<A$ except for $\\alpha\\neq\\check{\\alpha}$ with certain $\\check{\\alpha}\\in\\mathbb{Z}_{+}^{2}$ and $|\\alpha|=B<A$ , then we say $g$ to have total sum rules of order $A\\,\\backslash\\,\\{B+1\\}$ . ", "page_idx": 4}, {"type": "text", "text": "Corollary 1: The filter g we designed in Eq. (5) has the sum rules of order $(l,\\,O)$ . By adjusting the parameters in g, e.g., $a_{7}\\to0$ , $a_{6}+8a_{5}\\rightarrow0$ , it satisfies the total sum rules of order $5\\setminus\\{2\\}$ , and achieves an approximation to the first-order derivative with the fourth-order accuracy. For example, for a smooth function $\\omega(x,y)$ and small perturbation $\\varepsilon>0$ , we have $I39J$ : ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\frac{1}{\\varepsilon}\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}g[k_{1},k_{2}]\\omega(x+\\varepsilon k_{1},y+\\varepsilon k_{2})=C\\frac{\\partial\\omega(x,y)}{\\partial x}+\\mathcal{O}(\\varepsilon^{4}),\\mathrm{~as~}\\varepsilon\\to0.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The proof of Corollary 1 can be found in Appendix Section A. Given that the order of sum rules is closely related to the order of vanishing moments in the wavelet theory, Lemma 1 ensures that the filter not only maintains high sensitivity to local changes in the feature but also effectively suppresses irrelevant low-frequency components, thereby enhancing the estimation accuracy of the first derivative [39]. Furthermore, Corollary 1 further guarantees that the designed filter can approximate the first-order derivative with up to the fourth-order accuracy by properly adjusting the trainable parameters. ", "page_idx": 4}, {"type": "text", "text": "BC encoding: To ensure that the predicted solution complies with the given BCs, while also retaining the shape of the feature map after Conv operations, we employ a BC hard encoding method [19]. In particular, we consider periodic BCs in this work and apply padding padding, as shown in Figure 2, on the predicted solutions. Such an encoding technique not only ensures the compliance of the predicted solution with the BCs, but also enhances the solution\u2019s accuracy. ", "page_idx": 5}, {"type": "text", "text": "3.2.4 Poisson block ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "When solving NS equations, there exists the pressure term $p$ in the governing PDEs. However, for incompressible flows, the pressure can be inferred by solving a Poisson equation. We designed this block to achieve this aim, the poisson equation namely, $\\Delta p=\\psi(\\mathbf{u},\\mathbf{f})$ , where $\\psi(\\mathbf{u},\\mathbf{f})=$ $-2\\left(u_{y}v_{x}-u_{x}v_{y}\\right)+\\nabla\\!\\cdot\\!\\mathbf{f}$ for 2D problems and the subscripts denote spatial differentiation. Hence, we leverage the spectral method to estimate the pressure quantity (see Appendix Section B.2), as depicted in Figure 1(e), which updates $p_{k}$ based on $\\bar{\\psi}({\\bf u}_{k},\\bar{\\bf f}_{k})$ . The resulting Poisson block (Figure 1(b)) efficiently derives the pressure field from the velocity field and external force on the fly, streamlining computations without the need for labeled training data of pressure. ", "page_idx": 5}, {"type": "table", "img_path": "motImXq3B1/tmp/b564f9c414d00ac66adccf4c9eb8b46b7ea198f09981bab62cb396c639445db9.jpg", "table_caption": [], "table_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "3.2.5 NN block ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "It is noted that the predictions by the learnable PDE block on coarse grids may encounter instability issue due to error accumulation over time, especially in scenarios involving long-range rollout prediction. Hence, we propose an additional NN block to consistently correct the coarse solution predicted by the PDE block on the fly, restoring information lost due to reduced resolution. This module can be any trainable NN model, such as FNO [8], DenseCNN [41], or UNet [13, 45]. In particular, we consider FNO as the NN block, with more details found in Appendix Section B.1. However, the NN block is not always necessary. For cases of simpler systems, such as the Burgers equation, the learnable PDE block alone can perform well where the NN block can be omitted. ", "page_idx": 5}, {"type": "text", "text": "3.2.6 Model generalization ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We herein introduce the setup of the model\u2019s generalizability over various PDE scenarios, including ICs, force terms, and PDE parameters (e.g., the Reynolds number $R e$ ). The time marching in our network design inherently integrates ICs, automatically ensuring generalization over ICs given a well trained model. We embed the force term in the learnable PDE Block (naturally in the PDE formulation) shown in Figure 1(c), and meanwhile incorporate it as a feature map into the NN Block as part of the input (see Figure 1(c)). This enables the joint learning of force feature variations for generalization. In addition, the Reynolds number $(R e)$ is incorporated by creating a 2D feature map embedding (e.g., for the 2D case) by introducing two trainable vectors a and b, namely, $\\bar{R e_{\\mathrm{embb}}}={1}/{R\\bar{e}}\\cdot(\\bar{\\mathbf{a}}\\otimes\\mathbf{b})$ , in both the PDE Block and the the NN Block. Such an approach can correct the error propagation of the diffusion term in the PDE Block caused by coarse grids, and enhance the model\u2019s ability of generalization across different $R e$ \u2019s. ", "page_idx": 5}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We evaluate the performance of $\\mathrm{P^{2}C^{2}N e t}$ against several baseline models across diverse PDE systems, including fluid flows and RD processes. The results have demonstrated the superiority of our model in terms of solution accuracy and generalizability thanks to the unique design of embedding PDEs into the network. The source codes and data are found at https://github.com/intell-sci-comput/P2C2Net (PyTorch) and https://gitee.com/ intell-sci-comput/P2C2Net.git (MindSpore). ", "page_idx": 5}, {"type": "table", "img_path": "motImXq3B1/tmp/2a47ed308d4f395c3bdf67592a7372142622fca505d76c5a3c78ad8d92b2bf2c.jpg", "table_caption": ["Table 1: Summary of datasets and training implementations. Note that \u201c $\\rightarrow$ \u201d denotes the downsampling process from the original resolution (simulation) to the low resolution (training). "], "table_footnote": [], "page_idx": 6}, {"type": "image", "img_path": "motImXq3B1/tmp/8252ae85bc20860f08f127d2f288013ef4147eff4fd3ac6e373b43b021ed5672.jpg", "img_caption": ["Figure 3: An overview of the comparison between our $\\mathrm{P^{2}C^{2}}$ Net and baseline models, including error distributions (left), error propagation curves (middle), and predicted solutions (right). (a)-(d) show the qualitative results on Burgers, GS, FN, and NS equations, respectively. These PDE systems are trained with grid sizes of $25\\!\\times\\!25$ , $32\\!\\times\\!32$ , $64\\!\\times\\!64$ , and $64\\!\\times\\!64$ accordingly. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "4.1 Setup", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Datasets. We consider four PDE datasets, including 2D Burgers, FitzHugh-Nagumo (FN), GrayScott (GS), and NS equations. Each dataset exhibits intricate spatiotemporal patterns, presenting significant challenges for prediction on coarse grids. High-order FD and finite volume (FV) methods are utilized to generate these datasets. We segment the training samples based on different rollout lengths. Additionally, the simulated high-resolution data $\\mathbf{u}\\in\\mathbb{R}^{\\overline{{n}}_{t}\\times n\\times H\\times W}$ is down-sampled across space and time to low-resolution counterparts $\\tilde{\\textbf{u}}\\in\\mathbb{R}^{n_{t}^{\\prime}\\times n\\times H^{\\prime}\\times W^{\\prime}}$ where $n_{t}^{\\prime}\\,<\\,n_{t}$ , $H^{\\prime}\\ <\\ H$ , ${\\bar{W}}^{\\prime}<W$ . The low-resolution data serves as labels for training. Moreover, for each PDE case, only $3{\\sim}5$ sets of data trajectories are used for training while 10 trajectories are applied to test the model performance. The summary of datasets and training configuration is shown in Table 1. More details regarding datasets and their simulations can be found in the Appendix (see Table S2 and Section E). ", "page_idx": 6}, {"type": "text", "text": "Evaluation metrics. Four metrics are used to assess the model\u2019 performance: Root Mean Square Error (RMSE), Mean Absolute Error (MAE), Mean Normalized Absolute Difference (MNAD), and High Correction Time (HCT). The definition of each metric is listed in Appendix Section D. ", "page_idx": 7}, {"type": "text", "text": "Model training. Given the low-resolution training data, we aim to learn the evolution of spatiotemporal dynamics on coarse grids with bigger time stepping. This learning task is formulated as an auto-regressive rollout problem, where the models are only constrained by a low-resolution data loss. The loss function is defined as $\\begin{array}{r}{\\mathcal{I}(\\pmb{\\theta})=\\frac{1}{B N}\\sum_{i=1}^{B}\\sum_{j=1}^{N}M S E\\left(\\check{S}_{i j},S_{i j}\\right)}\\end{array}$ , where ${\\check{S}}_{i j}$ denotes the rollout-predicted coarse solution for the $j$ -th sample in the $i$ -th batch, ${\\mathcal{S}}_{i j}$ the corresponding label, $B$ and $N$ the number of batches and the batch size, and $\\pmb{\\theta}$ the trainable parameters. The detailed network parameters and training configurations are provided in Appendix Section B. ", "page_idx": 7}, {"type": "text", "text": "Baseline models. To validate the superiority of the proposed $\\mathrm{P^{2}C^{2}}$ Net model, we conducted comparisons with various baseline models, including FNO [8], UNet [45], PeRCNN [19], DeepONet [7], and Learned Interpolation (LI) [20]. The descriptions and training setup of the baseline models are provided in Appendix Section C. ", "page_idx": 7}, {"type": "text", "text": "4.2 Main results ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Figure 3 presents the results of comparison between $\\mathrm{P^{2}C^{2}N e t}$ and baselines, including error distribution, error propagation, and predicted trajectories. Moreover, Table 2 provides the quantitative model performance results. ", "page_idx": 7}, {"type": "text", "text": "Burgers Equation. Generally, our $\\mathrm{P^{2}C^{\\tilde{2}}}$ Net and baseline models (PeRCNN and FNO) all capture the evolving dynamics and provide acceptable results as shown in the right part of Figure 3(a). However, our method shows a notably lower error level compared with baselines, as emphasized in the error distribution and error propagation presented in the left and middle parts of Figure 3(a). Moreover, Table 2 substantiates this observation, revealing a significant improvement in our model\u2019s performance compared with the baseline models from a minimum of $93.4\\%$ to a maximum of $211.7\\%$ . We further conducted boundary condition generalization tests, as detailed in Appendix Section G.1. ", "page_idx": 7}, {"type": "table", "img_path": "motImXq3B1/tmp/066c1ee45b11a261fc2e0407a66e6351523e29fda5268814f74148dc65823bf1.jpg", "table_caption": ["Table 2: Quantitative results of our model and baselines. For the case of Burgers, GS, and FN, our model inferred the test set\u2019s upper time limits of 1.4 s, $2000\\;\\mathrm{s}.$ , and $10\\;\\mathrm{s}$ , respectively, as the trajectories of dynamics get stabilized. We take these limits in HCT to facilitate evaluation metrics calculation. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "GS Equation. The primary challenge of this dataset lies in its sparsity and the intricate patterns it presents, as depicted in Figure 3(b) (right). Each baseline model struggles to accurately predict the trajectories, especially the UNet model demonstrating significant divergence. Nevertheless, our method exhibits superior stability and is capable of learning the underlying dynamics. This is further validated by the error analysis presented in Figure 3(b), where our $\\mathrm{\\dot{P}^{2}\\check{C}^{2}\\check{N}e t}$ model outperforms the baselines by one to two orders of magnitude. Table 2 shows a comprehensive summary of the performance metrics, with our model achieving an improvement of over $91\\%$ across all evaluations for the GS equation. ", "page_idx": 7}, {"type": "text", "text": "FN Equation. This RD system is another classic but challenging case due to its two-scale fast-slow evolving patterns. As illustrated in the predicted snapshots of Figure 3(c), the baseline models can capture the global patterns but struggle with the local details. Our method shows superiority in learning the multi-scale features. Moreover, the error analysis demonstrates that our $\\mathrm{\\dot{P}^{2}C^{2}N e t}$ achieves errors one to two orders of magnitude lower than those of the baseline models, with an improvement ranging from $53.8\\%$ to $77.5\\%$ compared to the best baseline (see Table 2). ", "page_idx": 7}, {"type": "text", "text": "NS Equation. We evaluate our method on an NS dataset with a Reynolds number of 1000, a benchmark dataset known for its significant challenges. As shown in Figure 3(d), the snapshots produced by the baseline models at $t=7$ s exhibit incorrect dynamical patterns, especially the LI model showing divergence. The average test error of our model is at least an order of magnitude lower than those of the baselines. Furthermore, $\\mathrm{P^{2}C^{2}N e t}$ consistently outperforms the baselines throughout the error propagation process. Table 2 further validates the superior performance of our model, with improvements across all metrics of at least $57\\%$ . Additionally, we examine the physical properties of the learned fluid dynamics, such as energy spectra. As illustrated in Figure 4, the energy spectra curve of $\\mathrm{P^{2}C^{2}N e t}$ closely aligns with that of the ground truth, demonstrating its effectiveness in capturing high-frequency features. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Generalization test. Taking the NS equation as an example, $\\mathrm{P^{2}C^{2}N e t}$ is able to generalize to different external forces f and Reynolds numbers $R e$ . Our model is trained with $\\mathbf{f}\\ =\\ \\sin(4y)\\mathbf{n}_{x}\\,-\\,0.1\\mathbf{u}$ and $R e\\;=\\;1000$ , where $\\mathbf{n}_{x}=[1,0]^{T}$ . We conduct the generalization test under six external force scenarios and four distinct Reynolds numbers $R e=\\{200,500,800,2000\\}$ . As depicted in Figure 5(a), the error distribution presents a stable performance with errors generally below 0.1 across six distinct external forces. Figure $5({\\bf b})$ shows the acceptable error propagation with a gradual upward trend, which aligns with the longterm rollout outcomes of our model. For the generalization test on Reynolds numbers, Figure 5(c) demonstrates satisfactory and robust error levels for all Reynolds numbers, and smaller errors are observed when the Reynolds numbers are closer to those in the training set, as validated by the error propagation curves shown in Figure 5(d). Overall, our $\\mathrm{P^{2}C^{2}N e t}$ model exhibits robust generalization capabilities and stable performance across test samples for external forces, and Reynolds numbers. Further details on the snapshots are provided in Appendix Figure S3. ", "page_idx": 8}, {"type": "image", "img_path": "motImXq3B1/tmp/a33f3fc53fda37ff15b5ff24bff3f2c22c7fc1420e8f45e5572a579de4d71c0d.jpg", "img_caption": ["Figure 4: Energy spectra. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Robustness to noisy/incomplete data. Using the Burgers equation as an example, we introduced Gaussian noise of varying scales during the training process and observed its minimal impact on the results. The results are presented in Table S3, which indicate that our model is robust to the training data noise and maintains the HCT (high correlation time) metric without reduction. ", "page_idx": 8}, {"type": "text", "text": "Moreover, for the Burgers case, the time steps of the training data consist of only $28\\%$ of the inference steps in the test data. Namely, our training data itself is incomplete, and the missing data accounts for $72\\%$ of the test set. Based on this sparse dataset, we further randomly reduced the training data by $20\\%$ to simulate data incompleteness (e.g., randomly deleting data according to the rollout step size to make the trajectory incomplete, where the specific size can be found in Table 1 in the paper). The results of this experiment are shown in Table S4, where values are averaged over 10 test sets ", "page_idx": 8}, {"type": "image", "img_path": "motImXq3B1/tmp/733f057a55df4d8ed46178782afecaec95b826e1c0d12429ca9708eacafd0f13.jpg", "img_caption": ["Figure 5: The error distribution and propagation of $\\mathrm{P^{2}C^{2}N e t}$ for generalization over different external forces (a, b) and Reynolds numbers $(\\mathbf{c},\\mathbf{d})$ . "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "We can observe that, after making the data sparser, our model performance slightly decreases, which means that our model is capable of handling scenarios with incomplete data. ", "page_idx": 8}, {"type": "text", "text": "Ablation study. To assess the impact of different components on model performance, we design and conduct a series of ablation experiments based on the Burgers equation. The experimental setups include: (1) Model 1, replacing symmetric convolutions with regular convolutions; (2) Model 2, using convolution kernels with finite difference stencils instead of symmetric convolutions; (3) Model 3, removing the Correction Block; (4) Model 4, substituting RK4 integration with first-order Euler methods; and (5) the full $\\mathrm{P^{2}C^{2}N e t}$ architecture. All experiments are performed using the same training data and model hyperparameters as previously defined. ", "page_idx": 9}, {"type": "text", "text": "As shown in Table 3, the network performs poorly when the Fourier block is removed, with error levels two orders of magnitude higher compared to using the complete $\\mathrm{P^{2}C^{2}N e t}$ architecture. This emphasizes the critical role of the physics-encoded variable correction learning method. Configurations using traditional finite difference stencils as kernels also exhibit simi", "page_idx": 9}, {"type": "table", "img_path": "motImXq3B1/tmp/a5ab37b9b6611848166ad1ea72ceb1c1732de5c358e61319d5521d32c4d3e057.jpg", "table_caption": ["Table 3: Results for the ablation study of $\\mathrm{P^{2}C^{2}}$ Net. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "larly poor performance due to the large numerical errors when approximating derivatives caused by coarse grids. Moreover, removing symmetry constraints leads to a significant increase in errors, emphasizing the importance of symmetric features for model convergence, especially in scenarios with limited data. Using the Euler scheme for time stepping instead of RK4 results in reduced stability and increased error accumulation, leading to a decrease in performance compared to the complete $\\mathrm{P^{2}C^{2}N e t.}$ . Overall, the results confirm that the physics-encoded variable correction learning method and convolution fliters satisfying symmetry are indispensable components of the network framework. ", "page_idx": 9}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This paper presents a physics-encoded variable correction learning method designed to embed prior knowledge on coarse grids for solving nonlinear dynamic systems. This approach enables the model to focus on ftiting equations, ensuring excellent generalization capability and interpretability. It introduces a convolutional fliter that follows symmetry constraints, requiring only seven learnable parameters to adaptively compute the derivatives of system state variables corresponding to the flow field on a coarse grid. This allows the model to learn spatiotemporal dynamics with limited data. Our model has been trained and tested on four different nonlinear dynamic systems, achieving the SOTA results. Even with minimal data, it can generalize to different initial conditions, external force terms, and PDE parameters. In summary, our model effectively adapts to various nonlinear dynamic systems. Moreover, the trained model shows remarkable speedup for simulation under the same condition of accuracy, shown in Figure 6. ", "page_idx": 9}, {"type": "image", "img_path": "motImXq3B1/tmp/9926a4668714a8b52627d42e482ce0743f0f983ffb46b19a79f1218100e62151.jpg", "img_caption": ["Figure 6: Computational time for comparison. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Despite demonstrating excellent generalization ability, the model faces two challenges. Firstly, the model is based on regular grids with periodic boundaries, limiting its ability to solve problems on irregular grids. We will explore graph structures or coordinate transformations to handle irregular grids and incorporate special boundary treatment methods to adapt to various boundary conditions. Secondly, we expect to expand our research from 2D problems to 3D dynamical systems. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgement ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "The work is supported by the National Natural Science Foundation of China (No. 62276269 and No. 92270118), the Beijing Natural Science Foundation (No. 1232009), and the Strategic Priority Research Program of the Chinese Academy of Sciences (No. XDB0620103). In addition, H.S and Y.L. would like to acknowledge the support from the Fundamental Research Funds for the Central Universities (No. 202230265 and No. E2EG2202X2). Q.W. acknowledges the support by the Interdisciplinary-Innovative Research Program of the Institute of Interdisciplinary Sciences, Renmin University of China. P.R. would like to disclose that he was involved in this work when he was at Northeastern University, who has not been supported by Huawei Technologies. ", "page_idx": 9}, {"type": "text", "text": "Impact statement ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "The aim of this work is to develop a novel physics-encoded learning scheme to accelerate predictions and simulations of spatiotemporal dynamical systems. This method can be applied to various fields, including weather forecasting, turbulent flow prediction, and other simulation tasks. Our research is solely intended for scientific purposes and poses no potential ethical risks. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] John David Anderson and John Wendt. Computational fluid dynamics, volume 206. Springer, 1995.   \n[2] Fadl Moukalled, Luca Mangani, Marwan Darwish, F Moukalled, L Mangani, and M Darwish. The finite volume method. Springer, 2016.   \n[3] Olek C Zienkiewicz, Robert L Taylor, and Jian Z Zhu. The finite element method: its basis and fundamentals. Elsevier, 2005.   \n[4] George Karniadakis and Spencer J Sherwin. Spectral/hp element methods for computational fluid dynamics. Oxford University Press, USA, 2005.   \n[5] Nashat N Ahmad. Numerical simulation of the aircraft wake vortex flowfield. In 5th AIAA Atmospheric and Space Environments Conference, page 2552, 2013.   \n[6] Konrad A Goc, Oriol Lehmkuhl, George Ilhwan Park, Sanjeeb T Bose, and Parviz Moin. Large eddy simulation of aircraft at affordable cost: a milestone in computational fluid dynamics. Flow, 1:E14, 2021.   \n[7] Lu Lu, Pengzhan Jin, Guofei Pang, Zhongqiang Zhang, and George Em Karniadakis. Learning nonlinear operators via DeepONet based on the universal approximation theorem of operators. Nature Machine Intelligence, 3(3):218\u2013229, 2021.   \n[8] Zongyi Li, Nikola Borislavov Kovachki, Kamyar Azizzadenesheli, Burigede Liu, Kaushik Bhattacharya, Andrew Stuart, and Anima Anandkumar. Fourier neural operator for parametric partial differential equations. In International Conference on Learning Representations, 2021.   \n[9] Kimberly Stachenfeld, Drummond B Fielding, Dmitrii Kochkov, Miles Cranmer, Tobias Pfaff, Jonathan Godwin, Can Cui, Shirley Ho, Peter Battaglia, and Alvaro Sanchez-Gonzalez. Learned coarse models for efficient turbulence simulation. In International Conference on Learning Representations, 2022.   \n[10] Joe D Hoffman and Steven Frankel. Numerical methods for engineers and scientists. CRC press, 2018.   \n[11] Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal of Computational Physics, 378:686\u2013707, 2019.   \n[12] Maziar Raissi, Alireza Yazdani, and George Em Karniadakis. Hidden fluid mechanics: Learning velocity and pressure fields from flow visualizations. Science, 367(6481):1026\u20131030, 2020.   \n[13] Rui Wang, Karthik Kashinath, Mustafa Mustafa, Adrian Albert, and Rose Yu. Towards physicsinformed deep learning for turbulent flow prediction. In Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining, pages 1457\u20131466, 2020.   \n[14] Ruiyang Zhang, Yang Liu, and Hao Sun. Physics-informed multi-lstm networks for metamodeling of nonlinear structures. Computer Methods in Applied Mechanics and Engineering, 369:113226, 2020.   \n[15] Zhao Chen, Yang Liu, and Hao Sun. Physics-informed learning of governing equations from scarce data. Nature Communications, 12(1):6136, 2021.   \n[16] Chengping Rao, Hao Sun, and Yang Liu. Physics-informed deep learning for computational elastodynamics without labeled data. Journal of Engineering Mechanics, 147(8):04021043, 2021.   \n[17] Kejun Tang, Jiayu Zhai, Xiaoliang Wan, and Chao Yang. Adversarial adaptive sampling: Unify pinn and optimal transport for the approximation of pdes. In International Conference on Learning Representations, 2024.   \n[18] Chengping Rao, Pu Ren, Yang Liu, and Hao Sun. Discovering nonlinear pdes from scarce data with physics-encoded learning. In International Conference on Learning Representations, 2022.   \n[19] Chengping Rao, Pu Ren, Qi Wang, Oral Buyukozturk, Hao Sun, and Yang Liu. Encoding physics to learn reaction\u2013diffusion processes. Nature Machine Intelligence, 5(7):765\u2013779, 2023.   \n[20] Dmitrii Kochkov, Jamie A Smith, Ayya Alieva, Qing Wang, Michael P Brenner, and Stephan Hoyer. Machine learning\u2013accelerated computational fluid dynamics. Proceedings of the National Academy of Sciences, 118(21):e2101784118, 2021.   \n[21] Yohai Bar-Sinai, Stephan Hoyer, Jason Hickey, and Michael P. Brenner. Learning data-driven discretizations for partial differential equations. Proceedings of the National Academy of Sciences, 116(31):201814058, 2019.   \n[22] Jayesh K Gupta and Johannes Brandstetter. Towards multi-spatiotemporal-scale generalized PDE modeling. Transactions on Machine Learning Research, 2023.   \n[23] Yiping Lu, Aoxiao Zhong, Quanzheng Li, and Bin Dong. Beyond finite layer neural networks: Bridging deep architectures and numerical differential equations. In International Conference on Machine Learning, pages 3276\u20133285, 2018.   \n[24] Alvaro Sanchez-Gonzalez, Jonathan Godwin, Tobias Pfaff, Rex Ying, Jure Leskovec, and Peter Battaglia. Learning to simulate complex physics with graph networks. In International Conference on Machine Learning, pages 8459\u20138468, 2020.   \n[25] Tobias Pfaff, Meire Fortunato, Alvaro Sanchez-Gonzalez, and Peter Battaglia. Learning meshbased simulation with graph networks. In International Conference on Learning Representations, 2021.   \n[26] Steeven Janny, Aur\u00e9lien Beneteau, Madiha Nadri, Julie Digne, Nicolas Thome, and Christian Wolf. Eagle: Large-scale learning of turbulent fluid dynamics with mesh Transformers. In International Conference on Learning Representations, 2023.   \n[27] Zijie Li, Dule Shu, and Amir Barati Farimani. Scalable transformer for pde surrogate modeling. Advances in Neural Information Processing Systems, 36, 2024.   \n[28] Haixu Wu, Huakun Luo, Haowen Wang, Jianmin Wang, and Mingsheng Long. Transolver: A fast transformer solver for pdes on general geometries. arXiv preprint arXiv:2402.02366, 2024.   \n[29] Gaurav Gupta, Xiongye Xiao, and Paul Bogdan. Multiwavelet-based operator learning for differential equations. Advances in Neural Information Processing Systems, 34:24048\u201324062, 2021.   \n[30] Alasdair Tran, Alexander Mathews, Lexing Xie, and Cheng Soon Ong. Factorized fourier neural operators. In The Eleventh International Conference on Learning Representations, 2022.   \n[31] Zongyi Li, Nikola Kovachki, Chris Choy, Boyi Li, Jean Kossaif,i Shourya Otta, Mohammad Amin Nabian, Maximilian Stadler, Christian Hundt, Kamyar Azizzadenesheli, et al. Geometry-informed neural operator for large-scale 3D PDEs. Advances in Neural Information Processing Systems, 36, 2024.   \n[32] Somdatta Goswami, Katiana Kontolati, Michael D Shields, and George Em Karniadakis. Deep transfer operator learning for partial differential equations under conditional shift. Nature Machine Intelligence, 4(12):1155\u20131164, 2022.   \n[33] Phillip Lippe, Bas Veeling, Paris Perdikaris, Richard Turner, and Johannes Brandstetter. Pderefiner: Achieving accurate long rollouts with neural pde solvers. Advances in Neural Information Processing Systems, 36, 2024.   \n[34] Han Gao, Luning Sun, and Jian-Xun Wang. PhyGeoNet: Physics-informed geometry-adaptive convolutional neural networks for solving parameterized steady-state pdes on irregular domain. Journal of Computational Physics, 428:110079, 2021.   \n[35] Pu Ren, Chengping Rao, Yang Liu, Jian-Xun Wang, and Hao Sun. PhyCRNet: Physics-informed convolutional-recurrent network for solving spatiotemporal pdes. Computer Methods in Applied Mechanics and Engineering, 389:114399, 2022.   \n[36] Pu Ren, Chengping Rao, Yang Liu, Zihan Ma, Qi Wang, Jian-Xun Wang, and Hao Sun. Physr: Physics-informed deep super-resolution for spatiotemporal data. Journal of Computational Physics, 492:112438, 2023.   \n[37] Quercus Hern\u00e1ndez, Alberto Bad\u00edas, Francisco Chinesta, and El\u00edas Cueto. Thermodynamicsinformed neural networks for physically realistic mixed reality. Computer Methods in Applied Mechanics and Engineering, 407:115912, 2023.   \n[38] Rui Wang, Robin Walters, and Rose Yu. Incorporating symmetry into deep dynamics models for improved generalization. In International Conference on Learning Representations, 2021.   \n[39] Zichao Long, Yiping Lu, Xianzhong Ma, and Bin Dong. Pde-net: Learning pdes from data. In International conference on machine learning, pages 3208\u20133216, 2018.   \n[40] Zichao Long, Yiping Lu, and Bin Dong. Pde-net 2.0: Learning pdes from data with a numericsymbolic hybrid deep network. Journal of Computational Physics, 399:108925, 2019.   \n[41] Xin-Yang Liu, Min Zhu, Lu Lu, Hao Sun, and Jian-Xun Wang. Multi-resolution partial differential equations preserved learning framework for spatiotemporal dynamics. Communications Physics, 7(1):31, 2024.   \n[42] Jiawei Zhuang, Dmitrii Kochkov, Yohai Bar-Sinai, Michael P Brenner, and Stephan Hoyer. Learned discretizations for passive scalar advection in a two-dimensional turbulent flow. Physical Review Fluids, 6(6):064605, 2021.   \n[43] Zhiqing Sun, Yiming Yang, and Shinjae Yoo. A neural PDE solver with temporal stencil modeling. In International Conference on Machine Learning, pages 33135\u201333155, 2023.   \n[44] Gideon Dresdner, Dmitrii Kochkov, Peter Christian Norgaard, Leonardo Zepeda-Nunez, Jamie Smith, Michael Brenner, and Stephan Hoyer. Learning to correct spectral methods for simulating turbulent flows. Transactions on Machine Learning Research, 2023.   \n[45] Jayesh K Gupta and Johannes Brandstetter. Towards multi-spatiotemporal-scale generalized pde modeling. arXiv preprint arXiv:2209.15616, 2022.   \n[46] Johannes Brandstetter, Rianne van den Berg, Max Welling, and Jayesh K Gupta. Clifford Neural Layers for PDE Modeling. In The Eleventh International Conference on Learning Representations, 2022.   \n[47] Olaf Ronneberger, Philipp Fischer, and Thomas Brox. U-net: Convolutional networks for biomedical image segmentation. In Medical image computing and computer-assisted intervention\u2013MICCAI 2015: 18th international conference, Munich, Germany, October 5-9, 2015, proceedings, part III 18, pages 234\u2013241. Springer, 2015. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "APPENDIX ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "A Design of the filter with symmetric constraint ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "f Firstly, inspired by the central finite difference method, we design a fliter $\\mathbf{g}$ with the size of $m\\times m$ , which meets the symmetric constraint. For example, when $m=5$ , $\\mathbf{g}$ is given by ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\mathbf{g}=\\left(\\begin{array}{c c c c c}{a_{1}}&{a_{4}}&{a_{7}}&{-a_{4}}&{-a_{1}}\\\\ {a_{2}}&{a_{5}}&{a_{8}}&{-a_{5}}&{-a_{2}}\\\\ {a_{3}}&{a_{6}}&{0}&{-a_{6}}&{-a_{3}}\\\\ {-a_{2}}&{-a_{5}}&{-a_{8}}&{a_{5}}&{a_{2}}\\\\ {-a_{1}}&{-a_{4}}&{-a_{7}}&{a_{4}}&{a_{1}}\\end{array}\\right)\\,.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Taking $\\alpha=(1,0)$ , we have: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}k_{1}^{\\alpha_{1}}k_{2}^{\\alpha_{2}}g[k_{1},k_{2}]=-4a_{7}+2a_{8}.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "In order to satisfy the sum rules of order $\\alpha=(1,0)$ , we can get $a_{8}=-2a_{7}$ .Then, the fliter $\\mathbf{g}$ can be re-written as ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\mathbf{g}=\\left(\\begin{array}{c c c c c}{a_{1}}&{a_{4}}&{a_{7}}&{-a_{4}}&{-a_{1}}\\\\ {a_{2}}&{a_{5}}&{-2a_{7}}&{-a_{5}}&{-a_{2}}\\\\ {a_{3}}&{a_{6}}&{0}&{-a_{6}}&{-a_{3}}\\\\ {-a_{2}}&{-a_{5}}&{2a_{7}}&{a_{5}}&{a_{2}}\\\\ {-a_{1}}&{-a_{4}}&{-a_{7}}&{a_{4}}&{a_{1}}\\end{array}\\right).\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Corollary 1 Proof: Consider the filter we designed above with $\\alpha\\,=\\,(0,1)$ , $\\alpha\\;=\\;(0,3)$ and $\\alpha=(3,0)$ , we have: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}k_{1}^{0}k_{2}^{1}g[k_{1},k_{2}]=-4a_{5}-2a_{6}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "equation", "text": "$$\n\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}k_{1}^{0}k_{2}^{3}g[k_{1},k_{2}]=-16a_{5}-2a_{6}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "equation", "text": "$$\n\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}k_{1}^{3}k_{2}^{0}g[k_{1},k_{2}]=-12a_{7}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Satisfying the sum rules of order $\\alpha\\,=\\,(0,3)$ and $\\alpha\\,=\\,(3,0)$ leads to strictly $-16a_{5}\\textrm{--}2a_{6}\\;=$ 0, $-12a_{7}\\,=\\,0$ . By adjusting the trainable parameters, we have $a_{6}+8a_{5}\\,\\rightarrow\\,0$ , $a_{7}~\\to~0$ , and $-4a_{5}-2a_{6}\\neq0$ . According to Lemma1, the resulting filter $\\mathbf{g}$ satisfies the total sum rules of order $5\\setminus\\{2\\}$ . ", "page_idx": 13}, {"type": "text", "text": "For any smooth function $\\omega$ , we perform a convolution operation on it with the filter g. Applying a Taylor expansion to this process, we obtain: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\sum_{k_{1},k_{2}=-2}^{2}g[k_{1},k_{2}]\\omega(x+k_{1}\\delta x,y+k_{2}\\delta y)}\\\\ &{=\\displaystyle\\sum_{k_{1},k_{2}=-2}^{2}g[k_{1},k_{2}]\\sum_{i,j=0}^{4}\\frac{\\delta x^{i}\\delta y^{j}}{i!j!}\\frac{\\partial^{i+j}\\omega}{\\partial x^{i}\\partial y^{j}}(x,y)+o(|\\delta x|^{4}+|\\delta y|^{4})}\\\\ &{=\\displaystyle\\sum_{i,j=0}^{4}r_{i,j}\\delta x^{i}\\delta y^{j}\\frac{\\partial^{i+j}\\omega}{\\partial x^{i}\\partial y^{j}}(x,y)+o(|\\delta x|^{4}+|\\delta y|^{4}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "image", "img_path": "motImXq3B1/tmp/75c0c2658bb6f663be10e75fb06a0f00ae6300fb9867675bc8d3d3d9d19c6221.jpg", "img_caption": ["Figure S1: The architecture of FNO Model "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Then, if the filter $\\mathbf{g}$ has total sum rules of order $5\\setminus\\{2\\}$ , for a smooth function $\\omega(x,y)$ and small perturbation $\\varepsilon>0$ , we have: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\frac{1}{\\varepsilon}\\sum_{k_{1}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}\\sum_{k_{2}=-\\frac{m-1}{2}}^{\\frac{m-1}{2}}g[k_{1},k_{2}]\\omega(x+\\varepsilon k_{1},y+\\varepsilon k_{2})=C\\frac{\\partial\\omega(x,y)}{\\partial x}+\\mathcal{O}(\\varepsilon^{4}),\\mathrm{~as~}\\varepsilon\\to0.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "If there is no such setting, for $a_{6}+8a_{5}\\rightarrow0$ , $a_{7}\\to0$ , through continuous training, we iteratively optimize the network and adjust the values of parameter $a_{1}$ to $a_{7}$ , such that: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\sum_{i,j=0}^{4}r_{i,j}\\delta x^{i}\\delta y^{j}\\frac{\\partial^{i+j}\\omega}{\\partial x^{i}\\partial y^{j}}(x,y)=0\\;\\;\\forall i,j\\setminus\\{i=1,j=0\\}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "In this case, Eq. (S8) still holds. Hence, by employing a fliter $\\mathbf{g}$ with enhanced symmetry constraints and through the learning process of the network, we ensure that fourth-order accuracy is preserved. ", "page_idx": 14}, {"type": "text", "text": "B Implementation Details ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "B.1 FNO Model ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "As illustrated in Figure S1, the network structure primarily consists of three key components: $\\mathcal{P}$ (lift operation), $\\mathcal{Q}$ (projection operation), and Fourier layers. Both $\\mathcal{P}$ and $\\mathcal{Q}$ are convolutional operations designed for channel transformation. Every Fourier layer employs the Fast Fourier Transform (FFT) and the inverse Fast Fourier Transform (iFFT) for frequency domain transformations. Additionally, $\\mathbf{R}_{\\phi}$ represents spectral flitering and convolution in the frequency domain, and $\\mathbf{W}^{l}$ denotes the local linear transformation specific to the $l$ -th layer. $\\sigma$ the activation function GeLU. ", "page_idx": 14}, {"type": "text", "text": "Our FNO model omits normalization schemes due to their detrimental impact on performance [46]. When used in the Correction Block, we set $L=2$ . For the Burgers equation, we configure modes $=$ 12, width $=12$ , nd the projection operation from channel 12 to channel 50. Both the FHN and GS equations share the same configuration: modes $=12$ , width $=20$ , with the projection operation from channel 20 to channel 50. The NS equation requires a distinct configuration: modes $=25$ width $=$ 20, and the projection operation from channel 20 to channel 128. In particular, when it appears as a module of Neural Network, the hyperparameters are set differently: $L=5$ , modes $\\bar{}=\\bar{g}r i d/2-2$ , and width to be the same as modes. ", "page_idx": 14}, {"type": "text", "text": "B.2 Poisson Solver ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "The objective of the Poisson solver is to determine the state quantities of a system within a twodimensional spatial domain using the spectral method for a specified Laplacian term. The Laplace equation in two dimensions is represented as: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\Delta p=\\psi(\\mathbf{u},\\mathbf{f}).\n$$", "text_format": "latex", "page_idx": 14}, {"type": "image", "img_path": "motImXq3B1/tmp/5edd4d65d32eb4e8b92edc009e6eb4795476cc0b13bdf631c02ec748b0e50164.jpg", "img_caption": ["Figure S2: RK4 integration scheme "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "where $\\psi(\\mathbf{u},\\mathbf{f})=-2\\left(u_{y}v_{x}-u_{x}v_{y}\\right)+\\nabla\\cdot\\mathbf{f}$ for 2D problems. Applying Fast Fourier Transform (FFT) on Eq. (S10), we have ", "page_idx": 15}, {"type": "equation", "text": "$$\n-(\\eta_{x}^{2}+\\eta_{y}^{2})p^{\\ast}=\\psi^{\\ast}(\\mathbf{u,f}),\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $\\eta_{x}$ and $\\eta_{y}$ are the wavenumbers along the $x$ and $y$ axes, respectively, assuming $\\eta_{x}^{2}+\\eta_{y}^{2}\\neq0$ to avoid division by zero. In the frequency domain, we can get ", "page_idx": 15}, {"type": "equation", "text": "$$\np^{*}=\\frac{\\psi^{*}(\\mathbf{u},\\mathbf{f})}{-(\\eta_{x}^{2}+\\eta_{y}^{2})}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Next, we transform the field from the frequency domain to the spatial using inverse Fast Fourier Transform (iFFT): ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{iFFT}\\left[p^{*}\\right]=\\mathrm{iFFT}\\left[\\frac{\\psi^{*}(\\mathbf{u},\\mathbf{f})}{-(\\eta_{x}^{2}+\\eta_{y}^{2})}\\right].\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "By applying the above process to $\\psi(\\mathbf{u},\\mathbf{f})$ , we can efficiently decouple the pressure field without any labeled data or training process. ", "page_idx": 15}, {"type": "text", "text": "B.3 RK4 integration scheme ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "The general numerical integration method for time marching from ${\\bf u}_{t_{k}}$ to $\\mathbf{u}_{t_{k+1}}$ can be written as: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathbf{u}_{k+1}=\\mathbf{u}_{k}+\\int_{t_{k}}^{t_{k+1}}\\mathcal{H}[\\mathbf{u}_{k}(\\mathbf{x},\\tau)]\\mathrm{d}\\tau.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Among them, $\\mathbf{u}_{k+1}$ and $\\mathbf{u}_{k}$ are solutions at time $k+1$ and $k$ . As shown in Figure S2, RK4 is a high-order integration scheme, which divides the time interval into multiple equally spaced small time steps to approximate the integral. The final updating of the above state change can be written as: ", "page_idx": 15}, {"type": "equation", "text": "$$\n{\\begin{array}{r l}&{\\mathbf{s}_{1}=\\mathcal{H}\\left[\\mathbf{u}_{k},t_{k}\\right],}\\\\ &{\\mathbf{s}_{2}=\\mathcal{H}\\left[\\mathbf{u}_{k}+{\\frac{\\delta t}{2}}\\times\\mathbf{s}_{1},t_{k}+{\\frac{\\delta t}{2}}\\right],}\\\\ &{\\mathbf{s}_{3}=\\mathcal{H}\\left[\\mathbf{u}_{k}+{\\frac{\\delta t}{2}}\\times\\mathbf{s}_{2},t_{k}+{\\frac{\\delta t}{2}}\\right],}\\\\ &{\\mathbf{s}_{4}=\\mathcal{H}\\left[\\mathbf{u}_{k}+\\delta t\\times\\mathbf{s}_{3},t_{k}+\\delta t\\right],}\\\\ &{\\mathbf{u}_{k+1}=\\mathbf{u}_{k}+{\\frac{1}{6}}\\delta t(\\mathbf{s}_{1}+2\\mathbf{s}_{2}+2\\mathbf{s}_{3}+\\mathbf{s}_{4}).}\\end{array}}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where $\\delta t$ denotes the step size and ${\\bf s}_{1},{\\bf s}_{2},{\\bf s}_{3},{\\bf s}_{4}$ represent four intermediate variables (slopes). The global error is proportional to the step size to the fourth power, i.e., $\\mathcal{O}(\\delta t^{4})$ . ", "page_idx": 15}, {"type": "text", "text": "C Baseline models ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "To evaluate the performance of our proposed method, we compare it against multiple state-of-the-art (SOTA) baseline models. The detailed descriptions of each model are presented below, and the training configurations are listed in Section F. ", "page_idx": 15}, {"type": "text", "text": "Fourier Neural Operator (FNO). The FNO [8] combines neural networks with Fourier transforms and consists of two major parts. The first part primarily involves performing Fourier transforms on system state quantities, convolving in the frequency domain, and then inversely transforming to extract global features. The second part includes linear transformations through convolutions on the system state quantities to extract local features. Finally, activation functions are applied, and the outputs from both parts are combined to produce the final result. ", "page_idx": 16}, {"type": "text", "text": "UNet. UNet [47] employs an encoder-decoder structure, where the encoder extracts multi-scale features through multiple downsampling operations and the decoder recovers the original image size through multiple upsampling steps. Skip connections are utilized during the decoding process to fuse feature maps from corresponding layers, preserving both local details and capturing global features. ", "page_idx": 16}, {"type": "text", "text": "PeRCNN. PeRCNN [19] is a physics-encoded learning approach with physical laws embedded into the neural networks. It comprises multiple parallel CNNs, leveraging the simulation of polynomial equations through feature map multiplication. This approach enhances the model\u2019s capacity for extrapolation and generalization. ", "page_idx": 16}, {"type": "text", "text": "DeepONet. The aim of DeepONet [7] is to use neural networks to learn end-to-end mapping from input data to target output by approximating operators. It includes a trunk net and a branch net, which enables effectively capturing intricate functional relationships. ", "page_idx": 16}, {"type": "text", "text": "Learned Interpolation (LI). LI [20] is based on a finite volume method scheme. It leverages neural networks to replace the traditional numerical approach that uses polynomial interpolation for the velocity tensor product. This network learns how to dynamically adjust the interpolation function based on the characteristics of the local flow field. Therefore, the LI method facilitates the predictions of dynamics on coarser grids. ", "page_idx": 16}, {"type": "text", "text": "D Evaluation Metrics ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In this paper, we use several metrics to evaluate our model, including RMSE, Mean Absolute Error (MAE), Mean Normalized Absolute Difference (MNAD), and High Correction Time (HCT). RMSE measures the average magnitude of the error between predicted and observed values, reflecting the model\u2019s accuracy. MAE evaluates the average absolute difference between predicted and observed values, indicating the actual magnitude of the errors. MNAD is a crucial metric for assessing the accuracy of model outputs over time. MNAD calculates the average discrepancy across a series of temporal data points, offering a normalized measure of prediction error relative to the range of the actual data. HCT quantifies the model\u2019s ability to make accurate long-term predictions. These metrics are defined as follows: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{RMSE}=\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}{\\Vert\\mathbf{S}_{i}-\\breve{\\mathbf{S}}_{i}\\Vert^{2}}},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{MAE}=\\frac{1}{n}\\sum_{i=1}^{n}\\left|\\mathbf{S}_{i}-\\breve{\\mathbf{S}}_{i}\\right|\n$$", "text_format": "latex", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{MNAD}=\\frac{1}{n}\\sum_{i=1}^{n}\\frac{\\lVert\\mathbf{S}_{i}-\\breve{\\mathbf{S}}_{i}\\rVert}{\\lVert\\mathbf{S}_{i}\\rVert_{\\operatorname*{max}}-\\lVert\\mathbf{S}_{i}\\rVert_{\\operatorname*{min}}},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{HCT}=\\sum_{i=1}^{N}\\Delta t\\cdot\\mathbf{1}(P C C(\\mathbf{S}_{i},\\breve{\\mathbf{S}}_{i})>0.8),\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where ", "page_idx": 16}, {"type": "equation", "text": "$$\nP C C(\\mathbf{S}_{i},\\breve{\\mathbf{S}}_{i})=\\frac{\\mathrm{cov}(\\mathbf{S}_{i},\\breve{\\mathbf{S}}_{i})}{\\sigma_{\\mathbf{S}_{i}}\\sigma_{\\breve{\\mathbf{S}}_{i}}},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Here $n$ denotes the number of trajectories; $\\mathbf{S}_{i}$ the ground truth of trajectories; $\\hat{\\bf S}_{i}$ the spatiotemporal sequence predicted by the model. \u201ccov\u201d is the covariance function and \u201c $\\scriptstyle{\\dot{\\boldsymbol{\\sigma}}}$ \u201d is the standard deviation of the given sequence. $\\mathbf{1}(\\cdot)$ is the indicator function that takes a value of 1 when the condition $(P C C(\\mathbf{S}_{i},\\breve{\\mathbf{S}}_{i})>0.8)$ is true, and 0 otherwise. $N$ is the total number of time steps. ", "page_idx": 16}, {"type": "text", "text": "E Dataset Informations ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "To facilitate a comprehensive evaluation of our proposed method, we employ datasets generated from various well-known equations that model complex systems. These datasets cover a wide range of applications from fluid dynamics to reaction-diffusion systems, ensuring a robust assessment of model performance. ", "page_idx": 17}, {"type": "text", "text": "For fairness of testing datasets, we randomly select 10 seeds from the range of [1, 10,000], which are used to generate different Gaussian noise disturbances, which are then applied to the initial velocity field to create varying ICs. We also perform a warm-up phase during data generation to ensure that the variance and mean of the trajectories are closely aligned, thereby maintaining fairness. More details about dataset generation can be found in Table S2. ", "page_idx": 17}, {"type": "text", "text": "Burgers. This equation describes the velocity flow in a viscous fluid, which combines compressibility and nonlinear effects. It has wide applications in many scientific fields, including weather and climate simulation, the petroleum industry, acoustics, and quantum field theory. The equation is given by: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathbf{u}}{\\partial t}=\\nu\\nabla^{2}\\mathbf{u}-\\mathbf{u}\\cdot\\nabla\\mathbf{u},\\quad t\\in[0,T]\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\mathbf{u}=\\{u,v\\}\\in\\mathbb{R}^{2}$ represents the fluid velocities, $\\nu$ is the viscosity coefficient set to 0.002, and \u22072is the Laplacian operator. ", "page_idx": 17}, {"type": "text", "text": "To generate the dataset, we use the FD method with periodic boundary conditions on the spatial domain $\\mathbf{x}\\in[0,1]$ . The data is initially simulated on a $\\mathrm{100^{2}}$ grid and then downsampled to $2\\bar{5}^{2}$ for numerical experiments. The simulation timestep is set to $1\\times10^{-3}$ seconds and the time duration is $T=1.4\\:\\mathrm{s}$ . We use five trajectories for training, each of which contains 400 snapshots. For testing, we utilize ten groups of trajectories, each with 1400 snapshots. ", "page_idx": 17}, {"type": "text", "text": "GS. The GS equation models the interaction between two chemical species and has been widely used to simulate various chemical reactions under different conditions. It helps to explore dynamic phenomena such as self-organized patterns, chemical waves, reaction-diffusion patterns, collective behavior, natural pattern formation, cell growth, and other areas in physics. The GS equation is described as: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\frac{\\partial\\boldsymbol{u}}{\\partial t}=D_{u}\\boldsymbol{\\nabla}^{2}\\boldsymbol{u}-u v^{2}+{F(1-u)},}\\\\ {\\frac{\\partial\\boldsymbol{v}}{\\partial t}=D_{v}\\boldsymbol{\\nabla}^{2}\\boldsymbol{v}+u v^{2}-({F}+{\\kappa})\\boldsymbol{v},}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $u$ and $v$ represent the concentrations of two different chemical substances, $D_{u}$ and $D_{v}$ are the diffusion coefficients, and $F$ and $\\kappa$ denote the growth and death rates of the substances, respectively. In our case, we set $D_{u}=2.0\\times10^{-5}$ , $D_{v}=\\bar{5}.0\\times10^{-6}$ , $F=0.04$ , and $\\kappa=0.06$ . We create the dataset using the FD method on a $128^{2}$ grid under periodic boundary conditions, with the spatial domain $\\mathbf{x}\\in[0,1]^{2}$ . The simulation timestep is $0.5~\\mathrm{s}$ , and the total simulation duration is $1900\\;\\mathrm{s}$ . The data is then downsampled to a $32^{2}$ grid and the timestep is coarsened to $2\\;\\mathrm{{s}}$ to establish the ground truth. We leverage three training trajectories, each containing 1000 snapshots. Additionally, we employ ten separate testing sets with diffenent ICs. ", "page_idx": 17}, {"type": "text", "text": "FN. This case is a widely recognized reaction-diffusion system and is used to simulate the propagation of neural impulses. The governing equations are given by: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathbf{u}}{\\partial t}=\\gamma\\nabla^{2}\\mathbf{u}+\\mathbf{M}(\\mathbf{u}),\\quad t\\in[0,T]\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $\\mathbf{u}=\\{u,v\\}\\in\\mathbb{R}^{2}$ are the two interactive components, and $\\gamma$ is the diffusion coefficient. The reaction source terms $\\mathbf{M}(\\mathbf{u})$ are defined as: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{M_{u}(u,v)=u-u^{3}-v+\\alpha,}}\\\\ {{M_{v}(u,v)=\\beta(u-v),}}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "with $\\alpha=0.01$ denoting the external stimulus and $\\beta=0.25$ as the reaction coefficient. ", "page_idx": 17}, {"type": "text", "text": "We generated the dataset using the FD method on a $128^{2}$ grid and a timestep of $2.0\\times10^{-3}\\;\\mathrm{s}.$ . The spatial domain was set as $\\mathbf{x}\\in[0,128]^{2}$ with periodic boundary conditions applied. The simulation time is $T=10\\;\\mathrm{{s}}$ . This data is subsequently downsampled to $64^{2}$ with a timestep of $8.0\\times10^{-3}$ s to serve as the ground truth. For training purposes, we employ three groups of trajectories, each comprising 1375 snapshots. For our testing phase, we leverage ten distinct groups of trajectories, each with unique ICs. ", "page_idx": 17}, {"type": "image", "img_path": "motImXq3B1/tmp/3b8f03f7ff188530a6a94c005ee76840e517309adf78384caec57e199ffb447f.jpg", "img_caption": ["Figure S3: Generalization across multiple Re\u2019s and forces. "], "img_footnote": [], "page_idx": 18}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "NS. The NS equations are fundamental to the study of fluid dynamics, which govern the behavior of fluid motion. In this paper, we consider a 2-dimensional incompressible Kolmogorov flow with periodic boundary conditions in velocity-pressure form, which is written as ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\frac{\\partial{\\bf u}}{\\partial t}+({\\bf u}\\cdot\\nabla){\\bf u}=\\frac{1}{R e}{\\nabla^{2}}{\\bf u}-{\\nabla}p+{\\bf f},\\quad t\\in[0,T],}\\\\ {{\\nabla\\cdot\\bf u}=0,\\qquad\\qquad\\qquad\\qquad\\qquad}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\mathbf{u}=\\{u,v\\}\\in\\mathbb{R}^{2}$ denotes the fluid velocity vector, $p\\in\\mathbb{R}$ is the pressure, $R e$ representes the Reynolds number that characterizes the flow regime. The Reynolds number serves as a scaling parameter in the NS equation, resulting in a balance between the inertial forces (captured by the advection term $({\\bf u}\\cdot{\\bf\\nabla}{\\bf V}){\\bf u})$ and the viscous forces(captured by the Laplacian term $\\nabla^{2}\\bar{\\mathbf{u}})$ ). Thus, for low Reynolds numbers (i.e., when $R e$ is small), the viscous forces are dominant, and the fluid flow is mostly laminar and smooth. On the other hand, at high Reynolds numbers (i.e., when $R e$ is large), the inertial forces are dominant, and the fluid flow becomes more turbulent and chaotic. ", "page_idx": 18}, {"type": "table", "img_path": "motImXq3B1/tmp/a5a1ccb6290cfc4902be81f53f0cf9d486addb25a3d697b7cdabd102cc711f4e.jpg", "table_caption": ["Table S1: Impact of different kernel sizes. "], "table_footnote": [], "page_idx": 19}, {"type": "table", "img_path": "motImXq3B1/tmp/92805bd7ab5eb1e7fc0ca68824a8146044e549fd265976ce658df1c85a5932ea.jpg", "table_caption": ["Table S2: Dataset generate details "], "table_footnote": [], "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "In this paper, we generate the training data for a $R e=1000$ , using periodic boundary conditions within the spatial domain $\\mathbf{x}\\in[0,2\\pi]^{2}$ . The data generation employs the FV method on a $2048^{2}$ grid with a simulation timestep of $2.19\\stackrel{.}{\\times}10^{-4}\\mathrm{~s~}$ . Subsequently, this data is downsampled to $64^{2}$ with a time step of $7.0\\times10^{-3}$ to produce the ground truth. Five groups of trajectories, each containing 4800 snapshots, are employed for training. Ten groups of trajectories with diverse ICs are used for each of the tests. Specifically, to further test the model\u2019s generalization ability, we expand the test set: (1) generating data corresponding to $R e$ values of 200, 500, 800, 1000, and 2000, and (2) creating data with different external forces: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{f}_{1}=\\cos(4y)\\mathbf{n}_{x}-0.1\\mathbf{u},}\\\\ &{\\mathbf{f}_{2}=\\sin(4y)\\mathbf{n}_{x}-0.4\\mathbf{u},}\\\\ &{\\mathbf{f}_{3}=\\cos(2y)\\mathbf{n}_{x}-0.1\\mathbf{u},}\\\\ &{\\mathbf{f}_{4}=\\sin(2y)\\mathbf{n}_{x}-0.1\\mathbf{u},}\\\\ &{\\mathbf{f}_{5}=\\cos(4y)\\mathbf{n}_{x}-0.4\\mathbf{u},}\\\\ &{\\mathbf{f}_{6}=0}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "F Training Details ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "All experiments were conducted on a single 80GB Nvidia A100 GPU, using an Intel(R) Xeon(R) Platinum 8380 CPU (2.30GHz, 64 cores). We only give some of the changed parameters here, and the other hyperparameters remain the same as the default settings. ", "page_idx": 19}, {"type": "text", "text": "$\\mathbf{P^{2}C^{2}N e t}.$ . The architecture of $\\mathrm{P^{2}C^{2}N e t}$ , as shown in Figure 1, utilizes the Adam optimizer with a learning rate set at $5\\times10^{-3}$ . The model is trained with a batch size of 16 over 500 epochs. The rollout timestep settings are detailed in Table 1. We employ the StepLR scheduler scaling the learning rate by 0.96 every 200 steps. ", "page_idx": 19}, {"type": "text", "text": "FNO. The network architecture of FNO remains largely consistent with the original paper [8], with the primary modification being the adaptation of the training method for this model to an autoregressive approach. We utilize the Adam optimizer, with a learning rate of $1\\times10^{-3}$ and a batch size of 20. The training spans 1000 epochs, and the rollout timestep is aligned with that of the $\\mathrm{P^{2}C^{2}N e t}$ . ", "page_idx": 19}, {"type": "table", "img_path": "motImXq3B1/tmp/a3a23e16fc6e94e0b30e5a410684304fbc63169397ec7c16a983e03c23f7a23f.jpg", "table_caption": ["Table S3: Impact of noise on $\\mathrm{P^{2}C^{2}N e t}$ performance "], "table_footnote": [], "page_idx": 20}, {"type": "table", "img_path": "motImXq3B1/tmp/7c5283e78b23b76e9f89a175e73752635b0da23c6220623d017541580d9a3fe2.jpg", "table_caption": ["Table S4: Impact of sparser Burgers dataset on $\\mathrm{P^{2}C^{2}N e t}$ performance "], "table_footnote": [], "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "UNet. We employ the modern UNet [22] architecture with the default setting, with the rollout timestep consistent with that of $\\mathrm{P^{2}C^{2}N e t}$ . The scheduler utilized is StepLR with a step size of 100 and a gamma of 0.96. The optimizer employed is Adam, with a learning rate of $1\\times10^{-3}$ and a batch size of 10. The training is conducted over 1000 epochs. ", "page_idx": 20}, {"type": "text", "text": "DeepONet. We adopt the default architecture of DeepONet [7], with the Adam optimizer. The learning rate is set at $5\\times10^{-4}$ , with a decay applied every 5000 steps scaling at 0.9. The training is conducted with a batch size of 16 and spans 20000 epochs. ", "page_idx": 20}, {"type": "text", "text": "PeRCNN. We utilize an architecture that is identical to the standard PeRCNN configuration [19]. The optimization is performed using Adam, with a StepLR scheduler that reduces the learning rate by a factor of 0.96 every 100 steps. The initial learning rate is set at 0.01. The training regimen spans 1000 epochs with a batch size of 32. ", "page_idx": 20}, {"type": "text", "text": "LI. We utilizes its default network architecture and parameter configurations [20]. The optimizer chosen is Adam with $\\beta_{1}=0.9$ and $\\beta_{2}=0.99$ . The batch size is set to 8, with a global gradient norm clipping of 0.01. The learning rate is $1\\times10^{-3}$ , and the weight decay is $1\\times10^{\\bar{-6}}$ . ", "page_idx": 20}, {"type": "text", "text": "G Additional Results ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "G.1 Applicability to different BCs ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "To verify the applicability of our model to different BCs, we use the Burgers equation as an example and set the left boundary as Dirichlet, the right boundary as Neumann, and the top/bottom boundaries as Periodic. Here, we denote this case as Complex Boundary Conditions (CBC). The rest of the data generation setup (e.g., ICs, mesh grids) remains the same as used in the paper. We generated 10 CBC test datasets resulting from different random ICs. ", "page_idx": 20}, {"type": "text", "text": "We then directly tested the model previously trained based on Periodic BC datasets reported in the paper, meanwhile processing the boundaries using the BC encoding strategy [19] during inference. The quantitative results (average over 10 datasets) are presented in Table S5 where we also list the predicted snapshots at $1.4\\:\\mathrm{s}$ for two random ICs in Figure S4 . We can see that our model is capable of generalizing over different BCs. ", "page_idx": 20}, {"type": "text", "text": "G.2 Generalization Results ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "For the NS equation, we also evaluate the generalization capability of $\\mathrm{P^{2}C^{2}N e t}$ with respect to multiple $R e$ \u2019s and forces. Please refer to Figure S3 for details. ", "page_idx": 20}, {"type": "table", "img_path": "motImXq3B1/tmp/169cba1be2488277baa6daef8da5ce96f61fd6b992735e2e52eed8917fd6226e.jpg", "table_caption": ["Table S5: Generalization of $\\mathrm{P^{2}C^{2}N e t}$ over different boundaries on the Burgers example for 10 trajectories. "], "table_footnote": [], "page_idx": 21}, {"type": "image", "img_path": "motImXq3B1/tmp/326139bbcb88d3ce77a3093a4f58563c62e3a7d4c77a256f13316fffd9a0ab9b.jpg", "img_caption": ["Figure S4: $\\mathrm{P^{2}C^{2}N e t}$ generalization over complex BCs (left Dirichlet, right Neumann, top/bottom Periodic) on the Burgers example for two random ICs. Snapshots at $t=1.4~\\mathrm{s}$ . "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: In the abstract and introduction, our content covers the challenges to be addressed by the paper, contributions, and a detailed overview of the applications. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 22}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Justification: In the conclusion, we discuss the limitations of this work, including the focus on 2D problems. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 22}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: We state the lemma and corollary in the main paper, with detailed derivations provided in the Appendix Section A. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 23}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: As detailed in the paper, our model is easily reproducible, with key training details provided in the Appendix, and the code can help readers reproduce the results. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 23}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: https://github.com/intell-sci-comput/P2C2Net Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 24}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: We provide detailed descriptions of our experimental methods, comprehensive code for replication, and further information on additional results, proofs, and supplementary content in the appendix. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 24}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: We visualize our experimental results with informative figures and tables. These include violin plots for error distribution, error propagation curves, and key metrics like RMSE, MNAD, and MAE. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. ", "page_idx": 24}, {"type": "text", "text": "\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 25}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: We offer sufficient computational resources and comprehensive information to reproduce the experiments, which can be found in Appendix Section F. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 25}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Justification: Our research is solely intended for scientific purposes, conforms in every respect with the NeurIPS Code of Ethics, and poses no potential ethical risks. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 25}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: This method has the potential to revolutionize fields like weather forecasting, turbulent flow prediction, and various other simulation tasks with its ability to accelerate computations. We emphasize that our work is intended for positive societal impact, with detailed discussions provided in the Appendix. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 26}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Justification: Our model addresses scientific computing problems and has been used by other researchers or institutions, such as Microsoft, with relevant data, which does not involve high-risk scenarios ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 26}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: Our code and data are developed in-house, so they are approved by the creators. Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets. \u2022 The authors should cite the original paper that produced the code package or dataset. \u2022 The authors should state which version of the asset is used and, if possible, include a URL. ", "page_idx": 26}, {"type": "text", "text": "\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 27}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: We are pleased to provide the necessary documentation, data, and code to facilitate the reproduction of our results, ensuring convenience for all users. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 27}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: Our research subjects spatiotemporal dynamical systems and does not involve humans or human subjects ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 27}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 27}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 27}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 27}, {"type": "text", "text": "Justification: Our paper is limited to PDE issues, complies with national laws and regulations, and has no potential risks. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 28}]