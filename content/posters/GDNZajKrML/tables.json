[{"figure_path": "GDNZajKrML/tables/tables_6_1.jpg", "caption": "Table 1: Gauss-Laguerre quadrature look-up table when n = 8.", "description": "This table presents the weights (wi) and points (xi) used in the Gauss-Laguerre quadrature for volume rendering when n is set to 8.  These values are used in the GL-NeRF algorithm to efficiently approximate the volume rendering integral. The weights represent the contribution of each point to the final rendered color, while the points determine the locations along a ray where the color is sampled. The table is crucial for implementing GL-NeRF's deterministic point selection strategy, significantly reducing the computational cost compared to uniform sampling methods.", "section": "4.1.3 Intuitive understanding of the points selected using the Gauss-Laguerre quadrature"}, {"figure_path": "GDNZajKrML/tables/tables_7_1.jpg", "caption": "Table 2: Quantitative comparison. We demonstrate that our method has a minimal performance drop while significantly reducing the number of color MLP calls.", "description": "This table presents a quantitative comparison between TensoRF and GL-NeRF.  It shows the average number of MLP calls (a measure of computational cost) and the resulting PSNR, SSIM, and LPIPS scores for both methods on the LLFF and NeRF-Synthetic datasets.  The key finding is that GL-NeRF achieves a substantial reduction in MLP calls with only a minimal drop in the quality metrics (PSNR, SSIM, LPIPS), indicating significant computational savings without significant loss of image quality.", "section": "5 Experiments"}, {"figure_path": "GDNZajKrML/tables/tables_8_1.jpg", "caption": "Table 3: Quantitative comparison when training with GL-NeRF. Vanilla refers to the vanilla NeRF and its sampling strategy while ours refers to replacing the fine sample stage in vanilla NeRF with our sampling strategy, i.e. GL-NeRF. The result for Vanilla NeRF is produced by rendering using more than 100 points while GL-NeRF only uses 32 points.", "description": "This table compares the quantitative metrics (PSNR, SSIM, LPIPS) of vanilla NeRF and GL-NeRF on LLFF and NeRF-Synthetic datasets.  Vanilla NeRF uses more than 100 sampling points, while GL-NeRF uses only 32 points. The comparison highlights GL-NeRF's ability to achieve comparable performance with significantly fewer sampling points.", "section": "5. Experiments"}, {"figure_path": "GDNZajKrML/tables/tables_8_2.jpg", "caption": "Table 4: Ablation study on the number of points sampled. The more points we have, the better the performance will be. With 8 points, our method is comparable to the original sampling strategy in TensoRF.", "description": "This table shows the results of an ablation study on the number of points sampled using the proposed GL-NeRF method.  It compares the performance (PSNR, SSIM, LPIPS)  of the method using different numbers of points (1, 2, 3, 4, 8) against the original TensoRF sampling strategy ('Ori'). The results demonstrate that even with a relatively small number of points (8), GL-NeRF achieves performance comparable to the original method.", "section": "5.3 Ablation studies"}, {"figure_path": "GDNZajKrML/tables/tables_9_1.jpg", "caption": "Table 5: Per-scene results on Blender dataset between InstantNGP and ours. We demonstrate that GL-NeRF is able to be plugged into ANY NeRF models.", "description": "This table compares the per-scene performance of InstantNGP and the proposed GL-NeRF method on the Blender dataset.  It showcases the PSNR values achieved by each method for various scenes within the dataset. The results highlight that GL-NeRF can be easily integrated into existing NeRF models without significant performance loss.", "section": "5.1 Comparison with baselines"}, {"figure_path": "GDNZajKrML/tables/tables_9_2.jpg", "caption": "Table 6: Comparison between our method and TensoRF on Lego scene using WebGL-based renderer. The result is collected from an AMD Ryzen 9 5900HS CPU. GL-NeRF is able to provide almost real-time rendering while remaining similar quality as TensoRF.", "description": "This table compares the performance of GL-NeRF and TensoRF on a Lego scene rendered using a WebGL-based renderer.  It shows that GL-NeRF achieves a significant speedup (22.34 FPS vs 5.84 FPS) while maintaining comparable image quality (PSNR, SSIM, LPIPS). The experiment was conducted using an AMD Ryzen 9 5900HS CPU.", "section": "5.3 Ablation studies"}, {"figure_path": "GDNZajKrML/tables/tables_16_1.jpg", "caption": "Table 2: Quantitative comparison. We demonstrate that our method has a minimal performance drop while significantly reducing the number of color MLP calls.", "description": "This table presents a quantitative comparison of the proposed GL-NeRF method against the baseline TensoRF method across two datasets: LLFF and NeRF-Synthetic.  The comparison focuses on the average number of multi-layer perceptron (MLP) calls required for color prediction, peak signal-to-noise ratio (PSNR), structural similarity index (SSIM), and learned perceptual image patch similarity (LPIPS). The results show that GL-NeRF achieves comparable PSNR, SSIM, and LPIPS scores while significantly reducing the number of MLP calls, indicating improved computational efficiency.", "section": "5 Experiments"}, {"figure_path": "GDNZajKrML/tables/tables_17_1.jpg", "caption": "Table 2: Quantitative comparison. We demonstrate that our method has a minimal performance drop while significantly reducing the number of color MLP calls.", "description": "This table presents a quantitative comparison of the proposed GL-NeRF method against a baseline TensoRF model.  It shows the average number of MLP calls, PSNR, SSIM, and LPIPS scores for both methods on the LLFF and NeRF-Synthetic datasets. The key takeaway is that GL-NeRF achieves a significant reduction in the number of MLP calls (from 118.51 to 4 on average) with only a minimal drop in performance metrics.", "section": "5 Experiments"}, {"figure_path": "GDNZajKrML/tables/tables_18_1.jpg", "caption": "Table 2: Quantitative comparison. We demonstrate that our method has a minimal performance drop while significantly reducing the number of color MLP calls.", "description": "This table presents a quantitative comparison of the proposed GL-NeRF method against a baseline TensoRF model.  The comparison focuses on four key metrics: Average MLP calls, PSNR, SSIM, and LPIPS.  The results show that GL-NeRF achieves a significant reduction in the number of MLP calls (from 118.51 to 4 for LLFF, and from 31.08 to 4 for NeRF-Synthetic) with only a minimal decrease in the other three performance metrics.", "section": "5 Experiments"}]