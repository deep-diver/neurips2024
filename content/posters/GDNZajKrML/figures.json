[{"figure_path": "GDNZajKrML/figures/figures_1_1.jpg", "caption": "Figure 1: GL-NeRF method overview. The vanilla volume rendering in NeRF requires uniform sampling in space. This leads to a huge number of computationally heavy MLP calls since we have to assign each point a color value. Our approach, GL-NeRF, significantly reduces the number of points needed for volume rendering and selects points in the most informative area.", "description": "This figure compares the sampling strategies of traditional NeRF and the proposed GL-NeRF.  The left panel illustrates NeRF's uniform sampling along a ray, resulting in many MLP calls (red dots) to determine the color of each sample point.  In contrast, GL-NeRF (right panel) uses the Gauss-Laguerre quadrature to strategically select fewer sample points (blue dots) along the ray. This results in a significant reduction in MLP calls while maintaining rendering quality.", "section": "1 Introduction"}, {"figure_path": "GDNZajKrML/figures/figures_4_1.jpg", "caption": "Figure 3: Point Selection strategy in GL-NeRF. We choose points along the ray that satisfy the integral from zero to the point of the volume density function to be equal to the roots of Laguerre polynomials. The points selected is then used for querying the color. In the figure above is an example of choosing 5 points using a 5-degree Laguerre polynomial. The number on the plot indicates the value of the integral from zero to the right boundary of the region.", "description": "This figure illustrates the point selection strategy employed by GL-NeRF.  Instead of uniform sampling, GL-NeRF strategically selects points along a ray based on the Gauss-Laguerre quadrature. The selection ensures that the integral of the volume density from the ray origin to each selected point corresponds to the roots of a Laguerre polynomial. This results in fewer points being evaluated, leading to computational savings. The plot shows an example of selecting 5 points using a 5th-degree Laguerre polynomial.", "section": "4.1.2 Point selection in GL-NeRF"}, {"figure_path": "GDNZajKrML/figures/figures_5_1.jpg", "caption": "Figure 3: Point Selection strategy in GL-NeRF. We choose points along the ray that satisfy the integral from zero to the point of the volume density function equal to the roots of Laguerre polynomials. The points selected is then used for querying the color. In the figure above is an example of choosing 5 points using a 5-degree Laguerre polynomial. The number on the plot indicates the value of the integral from zero to the right boundary of the region.", "description": "This figure illustrates the point selection strategy employed by GL-NeRF. Unlike traditional NeRF methods that use uniform sampling along a ray, GL-NeRF strategically selects points based on the roots of Laguerre polynomials.  The selection is guided by the cumulative integral of the volume density, ensuring that points most informative for color reconstruction are chosen. The figure shows an example with 5 points chosen corresponding to a 5th degree Laguerre polynomial, highlighting how the integral value increases as points approach the object's surface.  The numbers shown on the plot represent the cumulative integral of the volume density up to each chosen point.", "section": "4.1.2 Point selection in GL-NeRF"}, {"figure_path": "GDNZajKrML/figures/figures_6_1.jpg", "caption": "Figure 4: Comparison between GL-NeRF and vanilla NeRF in terms of render time and quantitative metrics. Each point on the figure represents an individual scene. We showcase that with the drop of computational cost GL-NeRF provides, the average time needed for rendering one image is 1.2 to 2 times faster than the vanilla NeRF. In the mean time, the overall performance remains almost the same despite some minor decreases.", "description": "This figure compares the rendering time and quantitative metrics (PSNR, SSIM, LPIPS) of GL-NeRF against vanilla NeRF across multiple scenes from the LLFF and Blender datasets.  The results demonstrate a 1.2x to 2x speedup in rendering time with GL-NeRF while maintaining comparable image quality, showing that GL-NeRF achieves significant computational savings without a substantial drop in performance.", "section": "4 Experiments"}, {"figure_path": "GDNZajKrML/figures/figures_7_1.jpg", "caption": "Figure 5: Qualitative results on LLFF (top) and NeRF-Synthetic (bottom) datasets. We could tell from the comparisons that the drop in performances has minimal effect on the visual quality.", "description": "This figure displays qualitative comparisons of image rendering results between the original TensoRF model and the proposed GL-NeRF method, applied to two datasets: LLFF (top) and NeRF-Synthetic (bottom).  The results demonstrate that while GL-NeRF reduces computational cost, there is only a minimal impact on the visual quality of the rendered images.", "section": "5 Experiments"}, {"figure_path": "GDNZajKrML/figures/figures_8_1.jpg", "caption": "Figure 1: GL-NeRF method overview. The vanilla volume rendering in NeRF requires uniform sampling in space. This leads to a huge number of computationally heavy MLP calls since we have to assign each point a color value. Our approach, GL-NeRF, significantly reduces the number of points needed for volume rendering and selects points in the most informative area.", "description": "This figure compares the sampling strategies of vanilla NeRF and GL-NeRF.  Vanilla NeRF uses uniform sampling, resulting in many MLP calls to determine the color of each point.  GL-NeRF, in contrast, uses Gauss-Laguerre quadrature to select fewer, more informative points, thus significantly reducing the computational cost.", "section": "1 Introduction"}]