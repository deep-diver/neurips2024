[{"figure_path": "i2oacRDF5L/figures/figures_1_1.jpg", "caption": "Figure 1: (a) Spaceship Repair running example. (b) BSQ constraint for the user preference from the Introduction. (c) The expected cumulative cost function for (b) with a horizon of 12.", "description": "This figure demonstrates a spaceship repair problem where a robot must decide whether to repair itself or the spaceship after a communication error.  (a) shows the problem's structure. (b) presents a belief-state query (BSQ) constraint representing user preferences. The robot should prioritize repairing itself if there's a high probability of it being broken, and then the spaceship if it's likely broken. Otherwise, it should wait. (c) shows the non-convex, piecewise constant expected cumulative cost function for this BSQ constraint, illustrating that a finite number of evaluations is sufficient to find optimal user-aligned behavior.", "section": "Introduction"}, {"figure_path": "i2oacRDF5L/figures/figures_4_1.jpg", "caption": "Figure 2: (a) Strategy tree created from BSQ constraint in Fig. 1 and Spaceship Repair gPOMDP for a horizon of 2. (b) Complete partitions of parameter space with partitions from two of the braids highlighted. Error detection sensor accuracy for the robot and ship is 60% and 75%, respectively.", "description": "This figure shows a strategy tree and a partitioned parameter space for the Spaceship Repair problem using BSQ constraints. The strategy tree (a) illustrates possible decision paths based on belief states, actions, and observations, with leaf nodes representing final outcomes. Each path through the tree is labelled with a sequence of rules (from the BSQ constraints) and observations. The partitioned parameter space (b) shows how the continuous parameter space for the BSQ constraints is divided into distinct regions, each with a constant expected cost.  The color-coding connects the regions in (b) to subsets of leaf nodes in (a), illustrating the relationship between parameter choices and resulting behavior. The sensor accuracy information clarifies the uncertainty involved in the problem.", "section": "4.1 Strategy Trees"}, {"figure_path": "i2oacRDF5L/figures/figures_8_1.jpg", "caption": "Figure 3: Empirical results evaluating the hypothesized optimal partition performance tracked. Equally spaced samples across PRS evaluation time are taken while a sample is taken each iteration of Nelder-Mead and Particle Swarm. The error displayed is the standard deviation error.", "description": "This figure presents the empirical results of the proposed Partition Refinement Search (PRS) algorithm and compares its performance against several baselines on four different problems: Lane Merger, Graph Rock Sample, Spaceship Repair, and Store Visit. The plot shows the expected cost and percentage of goal achievement over time. The PRS algorithm consistently outperforms the baselines and demonstrates its capability to converge to a high-quality, user-aligned solution. The error bars represent standard deviations, providing a measure of variability in the results.", "section": "Empirical Results"}, {"figure_path": "i2oacRDF5L/figures/figures_9_1.jpg", "caption": "Figure 3: Empirical results evaluating the hypothesized optimal partition performance tracked. Equally spaced samples across PRS evaluation time are taken while a sample is taken each iteration of Nelder-Mead and Particle Swarm. The error displayed is the standard deviation error.", "description": "The figure shows the performance of the Partition Refinement Search (PRS) algorithm compared to Nelder-Mead and Particle Swarm optimization algorithms.  The x-axis represents time, and the y-axis shows both expected cost and percentage goal achievement.  The results show PRS converging more quickly and achieving a lower expected cost and higher goal achievement rate than the other methods across four different problems: Lane Merger, Graph Rock Sample, Spaceship Repair, and Store Visit. Error bars represent standard deviations.", "section": "Empirical Results"}, {"figure_path": "i2oacRDF5L/figures/figures_19_1.jpg", "caption": "Figure 3: Empirical results evaluating the hypothesized optimal partition performance tracked. Equally spaced samples across PRS evaluation time are taken while a sample is taken each iteration of Nelder-Mead and Particle Swarm. The error displayed is the standard deviation error.", "description": "The figure shows the performance of three different algorithms (PRS-Epsilon, Nelder-Mead, and Particle Swarm) over time for four different problems (Lane Merger, Graph Rock Sample, Spaceship Repair, and Store Visit). The y-axis shows both the expected cost and the percentage of goals achieved. The x-axis shows the time in seconds.  The plot demonstrates that PRS-Epsilon consistently outperforms the other two algorithms in terms of both expected cost and goal achievement rate across all four problems.  Error bars representing standard deviation are included.", "section": "7 Empirical Results"}]