[{"figure_path": "01XV5Za56k/figures/figures_6_1.jpg", "caption": "Figure 1: Example graph G for n = 5 with n + 1 = 6 vertices and 2n \u2212 1 = 9 edges.", "description": "This figure is a graph with 6 vertices and 9 edges. Vertices 1 through 5 are connected in a line, and each of these vertices is connected to vertex 6.  This graph structure is used to reformulate a linear program related to the smooth calibration error (smCE) as a minimum-cost flow problem. This reformulation is crucial to the development of a fast algorithm for calibration testing.", "section": "Smooth calibration"}, {"figure_path": "01XV5Za56k/figures/figures_8_1.jpg", "caption": "Figure 2: The 25% quantile, median, and 75% quantile (over 100 runs) for smCE, dCE and CECE respectively. The x-axis is for dataset with size 2<sup>x</sup> + 1.", "description": "This figure compares the performance of three different calibration error measures (smCE, dCE, and ConvECE) in detecting miscalibration in synthetic datasets. The x-axis represents the dataset size (2<sup>x</sup>+1), and the y-axis represents the median error of the three methods, with error bars showing the 25th and 75th percentiles across 100 runs.  The results demonstrate that smCE and dCE are more reliable in estimating the true calibration error than ConvECE, especially as the sample size increases.", "section": "Experiments"}, {"figure_path": "01XV5Za56k/figures/figures_18_1.jpg", "caption": "Figure 1: Example graph G for n = 5 with n + 1 = 6 vertices and 2n \u2212 1 = 9 edges.", "description": "This figure is a graph showing an example of the graph structure used in the dynamic programming algorithm to solve the smooth calibration linear program in the paper. It has 6 vertices and 9 edges.  The structure is designed to efficiently represent the constraints in the linear program, making the problem amenable to a dynamic programming solution. The vertices represent the variables, and the edges represent relationships between these variables (constraints). The graph's particular arrangement allows for an efficient algorithm to compute the minimum-cost flow, which corresponds to the solution of the linear program.", "section": "Smooth calibration"}]