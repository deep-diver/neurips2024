[{"figure_path": "4A5IQEjG8c/tables/tables_7_1.jpg", "caption": "Table 1: Solution quality ||z||1 of the MVC methods for all DIMACS MVC instances.", "description": "This table presents the solution quality, in terms of the number of vertices in the minimum vertex cover, obtained by four different methods for solving the Minimum Vertex Cover (MVC) problem on a set of benchmark instances from the DIMACS dataset. The methods compared are: ILP-CPU (Integer Linear Programming solved on a CPU), QUBO-CPU (Quadratic Unconstrained Binary Optimization solved on a CPU), QUBO-Loihi (QUBO solved using a Spiking Neural Network on Intel Loihi), and SF-HMVC-Loihi (Slack-Free HMVC solver using an SNN on Intel Loihi).  The table shows the number of vertices (|V|) and edges (|E|) for each instance and the solution quality obtained by each method. The results illustrate the performance of the proposed SF-HMVC-Loihi method compared to existing methods, showing its ability to find high-quality solutions, especially on larger and more complex instances.", "section": "5.1 MVC"}, {"figure_path": "4A5IQEjG8c/tables/tables_7_2.jpg", "caption": "Table 2: Runtime (in seconds) and energy usage (in Joules) of MVC methods. Note that \u221e indicates that the energy was too high for pyJoules to measure.", "description": "This table presents a comparison of four different methods for solving the Minimum Vertex Cover (MVC) problem: ILP-CPU, QUBO-CPU, QUBO-Loihi, and SF-HMVC-Loihi.  For each method, the table shows the runtime in seconds and energy consumption in Joules across fifteen different instances of the MVC problem from the DIMACS benchmark dataset. The symbol \u221e indicates that the energy consumption was too high to measure accurately using the pyJoules tool.", "section": "5.1 MVC"}, {"figure_path": "4A5IQEjG8c/tables/tables_8_1.jpg", "caption": "Table 3: Solution quality ||z||1 of the HMVC methods for all synthetic HMVC instances. Infeasible solutions are indicated in red, with number of constraint violations in brackets. N/A means that the SNN was not able to be embedded into the Loihi 2 due to capacity limitations.", "description": "This table presents a comparison of the solution quality (measured by the L1 norm of the solution vector z) for the Hypergraph Minimum Vertex Cover (HMVC) problem across different methods. The methods compared include: ILP solved on CPU, QUBO formulation solved on CPU, QUBO formulation solved on Loihi neuromorphic chip using an established SNN, and the proposed SF-HMVC method on Loihi.  The table shows that the proposed SF-HMVC method performs comparably to or better than the others in terms of solution quality and feasibility, while the QUBO methods, especially on Loihi, fail to produce feasible solutions for many instances due to capacity limitations.", "section": "5.2 HMVC"}, {"figure_path": "4A5IQEjG8c/tables/tables_9_1.jpg", "caption": "Table 4: Runtime (in seconds) and energy usage (in Joules) of HMVC methods. Note that \u221e indicates that the energy was too high for pyJoules to measure, while N/A indicates the instance could not be embedded into Loihi 2 due to capacity limitations.", "description": "This table presents the runtime and energy consumption results for solving the Hypergraph Minimum Vertex Cover (HMVC) problem using four different methods: ILP-CPU, QUBO-CPU, QUBO-Loihi, and SF-HMVC-Loihi.  For each method and instance, the time taken to find a solution (in seconds) and the energy consumed (in Joules) are provided. Note that some energy values are infinitely large or unavailable (N/A) due to hardware limitations on Intel Loihi 2.", "section": "5.2 HMVC"}]