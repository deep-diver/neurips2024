[{"type": "text", "text": "Hydra: Bidirectional State Space Models Through Generalized Matrix Mixers ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Sukjun Hwang\u2217,1, Aakash Lahoti\u2217,1, Ratish Puduppully\u2020,2, Tri Dao3, and Albert $\\mathbf{Gu}^{1,4}$ ", "page_idx": 0}, {"type": "text", "text": "1Machine Learning Department, Carnegie Mellon University 2IT University of Copenhagen 3Department of Computer Science, Princeton University 4Cartesia AI ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "A wide array of sequence models are built on a framework modeled after Transformers, comprising alternating sequence mixer and channel mixer layers. This paper studies a unifying matrix mixer view of sequence mixers that can be conceptualized as a linear map on the input sequence. This framework encompasses a broad range of well-known sequence models, including the self-attention of Transformers as well as recent strong alternatives such as structured state space models (SSMs), and allows understanding downstream characteristics such as efficiency and expressivity through properties of their structured matrix class. We identify a key axis of matrix parameterizations termed sequence alignment, which increases the flexibility and performance of matrix mixers, providing insights into the strong performance of Transformers and recent SSMs such as Mamba. Furthermore, the matrix mixer framework offers a systematic approach to developing sequence mixers with desired properties, allowing us to develop several new sub-quadratic sequence models. In particular, we propose a natural bidirectional extension of the Mamba model (Hydra), parameterized as a quasiseparable matrix mixer, which demonstrates superior performance over other sequence models including Transformers on non-causal tasks. As a drop-in replacement for attention layers, Hydra outperforms BERT by 0.8 points on the GLUE benchmark and ViT by $\\mathrm{{\\dot{2}\\%}}$ Top-1 accuracy on ImageNet. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large-scalepretrainedmodelssuch asGPT[35], BERT[10], andViT[11] exhibitstate-of-the-art performance across a wide range of tasks in multiple domains, including language and vision. A large number of these pretrained models follow a multi-layer architectural blueprint: a sequence mixer, such as Self-Attention1 [42], aggregatesinformationacrosstheinputsequence, followedbyachannelmixer processes information within each sequence element. Over the years, Attention has been the predominant choice for sequence mixing due to its ability to facilitate direct pairwise interactions between elements of the input sequence in a single step. However, this capability incurs a quadratic cost with respect to sequence length, making the training and deployment of these models prohibitively expensive for longer sequences. Although numerous alternatives have been proposed, designing principled sequence models that match the performance and versatility of attention-based systems remains a substantial challenge. ", "page_idx": 0}, {"type": "text", "text": "One general strategy in designing alternative sequence models involves substituting the Attention matrix with different matrix parameterizations as the core sequence mixer. These modifications are motivated by various goals. For instance, simplifying the sequence mixer has led to the development of models such as MLP-Mixer [40], which uses dense matrices, and FNet [23], which utilizes the Discrete ", "page_idx": 0}, {"type": "image", "img_path": "preo49P1VY/tmp/af248659fdcc302027f8605f0fb79996b51580229310d47570aab5a544b2fe5c.jpg", "img_caption": ["Figure 1: (Left) A schematic of the matrix mixer framework. (Right) An overview of matrix mixer classes: dense, Vandermonde, Toeplitz, low-rank, semiseparable, and quasiseparable. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "Fourier Transform matrix. Additionally, incorporating inductive biases such as positional information has resulted in the use of Toeplitz matrices in models like TNN [33]. Enhancing computational efficiency has spurred the creation of low-rank structures in models like Linear Attention (LA) [22] and Linformer [45], as well as Monarch matrices [5] in models such as M2 [13]. ", "page_idx": 1}, {"type": "text", "text": "Despite the achievements of these approaches, they often lack a systematic analysis of their theoretical foundations and empirical consequences. Moreover, these models typically exhibit lower empirical performance than Attention, which is successfully applied across diverse domains and tasks. In another line of work, structured state space models (SSMs) [17, 18] such as Mamba [16] have been popularized for its attention-like performance with linear-time computational scaling. Furthermore, recent work [6] has shown that SSMs can also be expressed as semiseparable matrices. However, these models are primarily causal as underscored by their recurrent view of computation, limiting their application to auto-regressive settings. Several concurrent efforts to adapt Mamba into a bidirectional model [48, 38] have been made, but these attempts remain ad-hoc. ", "page_idx": 1}, {"type": "text", "text": "In this work, we study the matrix mixer framework (see Figure 1), which provides a powerful abstraction for enhancing the understanding of sequence models through the analysis of their matrix structures. Specifically, we suggest the following: ", "page_idx": 1}, {"type": "text", "text": "(i) Formalization of matrix mixer sequence models. We establish the conceptual foundation of the Matrix Mixer sequence models, delineating key axes of matrix parameterizations that influence model characteristics such as efficiency, causality, and expressivity. For instance, we highlight that structured matrix [29] parameterizations underpin efficient sequence models through computationally efficient algorithms (Section 2.1).   \n(ii) Introduction of sequence alignment. Within this framework, we define sequence alignment as a novel attribute, which induces sequence models with essential features of data-dependence and extendability. We introduce Sequence Aligned Matrices (SAM) that exhibit these properties, demonstrating their superior performance in downstream tasks compared to non-aligned counterparts (Section 2.2).   \n(iii) Exploration of structured matrix parameterizations. Through the matrix mixer framework, we systematically explore and categorize a broad spectrum of existing sequence models (Section 2.3). Motivated by sequence alignment, we also present new sequence models with underexplored structured matrix configurations, such as Vandermonde and Cauchy matrices (Section 2.4). ", "page_idx": 1}, {"type": "text", "text": "Building on our matrix mixer framework, we introduce a novel sequence model Hydra, which employs a quasiseparable matrix mixer (Section 3). Quasiseparable matrices are a fundamental matrix structure with several important properties, making them ideal for sequence modeling. For example, they generalize both the low-rank matrix mixers found in linear attention models and the semiseparable matrices utilized in state space models. In fact, quasiseparable matrix mixers can be seen as a natural bidirectional extension of semiseparable matrices, addressing a major limitation in state space models by making their use in non-causal settings possible. Additionally, Hydra maintains the strong performance and linear-time computational efficiency of SSMs, thanks to structured matrix multiplication algorithms. Unlike prior attempts to make SSMs bidirectional by ad-hoc methods \u2013 typically by combining separate models for forward and backward sequence processing through element-wise addition [15, 48, 38], the Hadamard product [44], or concatenation [44, 12, 38] \u2013 the systematic approach of Hydra offers a more coherent and theoretically grounded advancement. Specifically, the definition of quasiseparable mixer matrices generalize both the heuristic bidirectional extensions of SSMs and linear attention, providing a mathematical interpretation of the strong expressivity exhibited by Hydra. ", "page_idx": 1}, {"type": "text", "text": "We provide extensive experimental results that substantiate our claims. Our systematic ablation studies control architectural variables to highlight the impact of matrix parameterization. These careful experiments confirm that Sequence Alignment, a property we newly identified in certain matrix mixers, significantly enhances downstream performance. Furthermore, our experimental findings demonstrate that novel sequence models like those using Cauchy matrix mixers match the performance of established matrixmixerssuchaslow-rank. Thisindicatesthatthestrongperformanceoflow-rankvariantsisnotsolely attributable to their matrix structure, but can be matched by other mixers that share similar properties. In addition, we also validate that the bidirectional extension of the Mamba model, implemented through quasiseparable matrix mixers, outperforms naive bidirectional approaches [15, 48, 38, 44, 12]. Importantly, Hydra excels as a performant, general-purpose bidirectional sequence model, as evidenced by its strong performance across diverse domains. It achieves state-of-the-art results on the GLUE benchmark [43] with an average accuracy of $84.3\\%$ , outperforming BERT [10] by 0.8 points, and records a Top-1 accuracy of $81.0\\%$ on the ImageNet-1K benchmark [9], surpassing ViT [11] by 2.2 points. ", "page_idx": 2}, {"type": "text", "text": "We publicly release source code at https://github.com/goombalab/hydra. ", "page_idx": 2}, {"type": "text", "text": "2 The Matrix Mixer Framework: ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Bridging Sequence Mixers and Structured Matrices ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In Section 2.1, we formally define the matrix mixer framework, conceptualizing sequence mixers as linear maps on input sequences. In Section 2.2, we introduce sequence alignment, a new axis of variation of matrix structures which controls important characteristics of downstream sequence models such as data-dependent parameterizations and extendability. Section 2.3 leverages these definitions to categorize a wide array of previous works based on their matrix mixers, facilitating the understanding of sequence mixers through their matrix structures. Furthermore, in Section 2.4, we propose novel sequence mixers utilizing Vandermonde and Cauchy matrices, demonstrating the flexibility of our framework in systematically designing new sequence mixers. ", "page_idx": 2}, {"type": "text", "text": "2.1 Formalizing the Matrix Mixer Framework ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Definition 2.1 (The matrix mixer framework). Let $\\mathbf{X}\\!\\in\\!\\mathbb{R}^{L\\times C}$ be the input sequence, consisting of $L$ elements, each with $C$ channels. Let $f_{X}\\colon\\mathbb{R}^{L\\times C}\\!\\to\\!\\mathbb{R}^{L\\times D}$ be the input preprocessing function that encapsulates common data transformations such as short convolutions, and linear layers. Let $H$ and $P$ be the number of heads and head dimension respectively, such that $H P\\!=\\!D.$ . Let $\\mathcal{M}\\,\\dot{\\subseteq}\\,\\mathbb{R}^{L\\times L}$ represent the underlying class of mixer matrices. For each head $h\\!\\in\\![H]$ , let $f_{\\mathcal{M}}^{h}\\colon\\mathbb{R}^{L\\times C}\\times\\Theta\\!\\rightarrow\\!\\mathcal{M}$ be the matrix construction function that maps input data to mixer matrices, where $\\Theta$ is the space of learnable parameters. We denote $\\mathbf{M}^{h}\\!=\\!f_{\\mathcal{M}}^{h}(\\mathbf{X},\\!\\dot{\\theta})$ , when $\\mathcal{M}\\mathcal{A}\\mathcal{\\mathbf{X}}$ are clear from the context. Then, we define matrix mixing as, ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\mathbf{Y}^{h}\\!=\\!\\mathbf{M}^{h}(f_{X}(\\mathbf{X}))^{h},\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $(f_{X}({\\mathbf{X}}))^{h},{\\mathbf{Y}}^{h}$ denote the preprocessed input and output slice corresponding to head $h$ . ", "page_idx": 2}, {"type": "text", "text": "This definition encapsulates the view that existing sequence mixers can be mathematically represented as $L\\times L$ mixer matrices that act on the sequence length (see Figure 1, left). The framework not only incorporatestypicaldatapreprocessingstepslikeprojections[22, 39], andshortconvolutions[16, 6], but it also accommodates data dependent mixer matrices [39, 34]. Furthermore, it is also powerful enough to capture the concept of head structure [42] by equivalently sharing the mixer matrices within a head. ", "page_idx": 2}, {"type": "text", "text": "Moreover, Definition 2.1 offers a different lens to conceptualize the computational cost of sequence mixers. If we assume that both the preprocessing function and the matrix construction function are sub-quadratic in the sequence length $L$ , which is generally true in practice, then the computational bottleneck lies in the $\\bar{\\mathbf{M}}f_{X}(\\mathbf{X})$ operation. For a general matrix M, this multiplication will incur a $O(L^{2})$ cost. The only way to mitigate this to restrict $\\mathcal{M}$ to being a structured matrix, which are known to possess sub-quadratic matrix multiplication algorithms. We refer to such sequence mixers as structured matrix mixers. This paves the way to systematically develop new sequence mixers: select an appropriate class of structured matrices from established mathematical literature, devise a data-dependent matrix construction function, and integrate them into the matrix mixer framework. ", "page_idx": 2}, {"type": "text", "text": "2.2 Sequence Aligned Matrices ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Unstructured mixer matrices, also known as dense matrices, lack two key useful properties: 1) these matrix mixers cannot be easily made data-dependent, which has been identified as a key property of performant sequence models such as Transformers and Mamba, and 2) they can only be applied to fixed-length sequences, a property we call extendability. Due to substantial importance of these ", "page_idx": 2}, {"type": "table", "img_path": "preo49P1VY/tmp/9b743cfd803907e7dfd0a12f053c3da45d76f9e36c285c03110d185cbeeaf098.jpg", "table_caption": ["Table 1: Categorization of existing methods as matrix mixers. $L$ denotes input sequence length. "], "table_footnote": ["features for sequence mixers, we formally define the class Sequence Aligned Matrices (SAM) to systematically explore matrices that are characterized with both properties. "], "page_idx": 3}, {"type": "text", "text": "Definition 2.2 (Sequence Aligned Matrices). Let $L$ be the sequence length and let $\\mathbf{M}\\!\\in\\!\\mathbb{R}^{L\\times L}$ denote a matrix with a parameter set $\\mathcal{P}$ . Then, we say that $\\mathbf{M}$ is a Sequence Aligned Matrix if there exists a partition $\\Pi$ of $\\bar{\\mathcal{P}}\\subseteq\\mathcal{P}$ , and $\\hat{\\mathcal{P}}\\!\\neq\\!\\mathcal{O}$ , such that for all sets ${\\mathcal{E}}\\in\\Pi$ , there exists a bijective map $f\\varepsilon\\colon[L]\\to\\mathcal{E}$ , and, for each $i,j\\in[L]$ , $i\\!\\le\\!j$ , the sub-matrix $\\mathbf{M}[i:j+1,i:j+1]$ is composed solely from the parameters in the subset $\\cup_{\\mathcal{E},i\\leq k\\leq j}f_{\\mathcal{E}}(k)\\subseteq\\mathcal{P}$ . ", "page_idx": 3}, {"type": "text", "text": "In simpler terms, this implies that each parameter of a SAM is either mapped to a specific element of the sequence or is left data-independent, ensuring that every upper-left sub-matrix upto index $i$ is constructed using only the parameters corresponding sequence segment upto and including index $i$ and/or the data-independent ones. ", "page_idx": 3}, {"type": "text", "text": "Proposition 2.3 (Data Dependency). Sequence aligned matrices exhibit canonical data-dependent parameterization. ", "page_idx": 3}, {"type": "text", "text": "Proof. This property arises from the parameter partition structure guaranteed in the definition. Specifically, for each partition we associate a parametric function that, for any given element $i$ computes the parameter\u2019s value by treating the element itself as an input. \u53e3 ", "page_idx": 3}, {"type": "text", "text": "Proposition 2.4 (Extendability). Sequence aligned sequence mixers can be extended beyond their trained length. ", "page_idx": 3}, {"type": "text", "text": "Proof. This is a direct consequence of Proposition 2.3: the pretrained parametric functions assigned to each partition enable the computation of matrices larger than those encountered during training. ", "page_idx": 3}, {"type": "text", "text": "We identify data dependency \u2013 the property induced by SAM \u2013 as a key axis of differentiation amongst existing models. Although data-dependency is a popular notion that is widely regarded as being crucial to performance of Attention, it lacked any formal definition in the literature. Consequently, various works have adopted different interpretations of this notion: Hyena [31] implements it via a datadependent linear operators over the Toeplitz matrix mixer; GSS [26] adds a data-dependent gate post sequence mixing; LA, SSD [22, 6], like Attention, directly map input data to the parameters of the matrix mixer. We adopt the third notion of data dependency, where each parameter is a function of a particular input token, and under this definition it is clear that models like Hydra, SSD, and LA are data-dependent, whereas MLP-Mixer, FNet, S4, S4D, and TNN, only have data-independent parameters. ", "page_idx": 3}, {"type": "text", "text": "2.3 Prior Sequence Models as (Structured) Matrix Mixers ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Using the formalization of the Matrix Mixer framework, we categorize a wide array of previous works \u2013 MLP-Mixer [40], Transformer [42], Linear Attention [22], Linformer [45], S4 [18, 17], H3 [14], TNN [33], CKConv [37], FNet [23], Kaleidoscope [8, 7], Monarch [5, 13], and Mamba [16, 6] \u2013 as matrix mixers in Table 1. For illustrative purposes, we explicitly show that MLP-Mixer, FNet and LA are matrix mixers (proofs in Appendix B), and leave out normalizing factors for simplicity as follows: ", "page_idx": 3}, {"type": "text", "text": "Proposition 2.5. (MLP-Mixer is a matrix mixer). MLP-Mixer employs $f_{X}$ as an identity function, and its mixer matrix M has an unstructured parameterization with a single head $\\!\\!\\!/H\\!\\!\\!\\!/=\\!\\!\\!\\!1,$ ). ", "page_idx": 3}, {"type": "text", "text": "Proposition 2.6. $'L A$ is a structured matrix mixer with sequence alignment). LA employs $f_{X}$ as a linear projection $f_{X}({\\bf X},{\\cal W}_{V})\\!=\\!{\\bf X}W_{V}$ , with its low-rank mixer matrix being SAM. The mixer matrix M has $H$ heads with a structured parameterization, where each $(i,j)$ -element $m_{i j}$ is defined as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l r l r}{m_{i j}\\!=\\!\\phi(x_{i}W_{Q})\\phi(x_{j}W_{K})^{T},}&{}&{\\phi(\\cdot)\\!=\\!e l u(\\cdot)\\!+\\!1,}&{}&{W_{Q},W_{K}\\!\\in\\!\\mathbb{R}^{C\\times D}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Additionally, it is important to note that not all structured matrix mixers inherently exhibit sequence alignment. For example, consider the matrix mixer formulation $\\mathbf{M}\\!=\\!W_{Q}W_{K}^{T}$ KT where WQ,WK \u2208RL\u00d7C are trainable parameters. This formulation yields a low-rank matrix mixer, which qualifies as a structured matrix mixer. However, this structure is independent of the input data, directly contradicting the concept of SAM. Another illustrative example is FNet: ", "page_idx": 4}, {"type": "text", "text": "Proposition 2.7. (FNet is a structured matrix mixer without sequence alignment). FNet employs $f_{X}$ as an identity function, using the canonical Vandermonde matrix \u2013 Discrete Fourier Transform $(D F T)-$ for its mixer matrix. The mixer matrix M has a single head $\\!\\!\\!/H\\!\\!\\!\\!/=\\!\\!\\!\\!1,$ ) with a structured parameterization, where each $\\left(p,q\\right)$ -element $m_{p q}$ is defined as $m_{p q}\\!=\\!w^{p q}$ , where $\\begin{array}{r}{w\\!=\\!e^{-\\frac{2\\pi i}{N}}}\\end{array}$ ", "page_idx": 4}, {"type": "text", "text": "Using these definitions, we present a series of matrix mixers, incorporating various mixer matrices both with and without the SAM property, and provide extensive experimental evaluations to investigate the influence of SAM on the expressivity of sequence mixers in Section 4.1.1. ", "page_idx": 4}, {"type": "text", "text": "2.4 The Matrix Mixer Framework as a Creative Toolbox ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Armed with this framework, we illustrate how more classes of performant sequence models can be derived. In particular, we introduce Vandermonde and Cauchy matrix mixers, chosen because they are: 1) well-known families of structured matrices with sub-quadratic matrix multiplication, hence are efficient as sequence models, and 2) we show that they have SAM parameterizations. In Section 4.1.1, we validate that these properties are enough to create efficient and strong sequence models, e.g. our Cauchy matrix mixer is on par with LA. This validates the central theme of this paper that developing sequence models can be reduced to choosing structured matrix classes with target properties. We assume an input sequence $\\mathbf{X}\\!\\in\\!\\mathbb{R}^{L\\times C}$ is given, and utilize the prevalent query-key concept that we employ ${\\bf Q}\\!=\\!{\\bf X}\\bar{W}_{Q}$ , ${\\bf K}\\!=\\!{\\bf X}{W}_{K}$ where $W_{Q},W_{K}\\!\\in\\!\\mathbb{R}^{C\\times D}$ . For simplicity, we show the single-headed $\\!\\!H\\!=\\!1\\!,$ ) case, where $D\\!=\\!P$ . Further details including the implementations of multi-headed extensions are in Appendix E. ", "page_idx": 4}, {"type": "text", "text": "Sequence aligned Vandermonde mixer. In contrast to FNet, which employs a fixed-parameter Vandermonde mixer based on the Discrete Fourier Transform (DFT), we propose a trainable, and datadependent Vandermonde-based matrix mixer. Then, we can construct a mixer matrix from a combination of two separate Vandermonde matrices ${\\bf M}_{Q},{\\bf M}_{K}$ , each generated from $\\mathbf{Q}$ and $\\mathbf{K}$ . Specifically, each $(i,j)$ -element of the resulting mixer matrix $\\mathbf{M}$ is formulated as $\\begin{array}{r}{m_{i j}\\!=\\!\\sum_{d}(\\cos(2\\pi q_{i d}^{j})\\!-\\!\\cos(2\\pi k_{j d}^{i}))}\\end{array}$ . This formulation utilizes the cosine function \u2013 the real part of an imaginary number \u2013 which is a well established technique used in SSMs [17, 28] to prevent the potential for excessive values resulting from the powers of elements. Thanks to the associative property of matrix multiplications, our sequence aligned Vandermonde matrix mixer enjoys algorithms with efficient computational complexities. ", "page_idx": 4}, {"type": "text", "text": "Sequence aligned Cauchy mixer. As indicated by the definition of Cauchy matrices in Table 1, the underlying philosophy of using both the Cauchy and low-rank matrix classes as a sequence mixer is remarkably similar: the relevance of a pair of elements is directly proportional to their associated value \u2013 the greater the relevance, the higher value assigned. Specifically, each $(i,j)$ -element of the mixer matrix M is constructed by $\\begin{array}{r}{\\overline{{m_{i j}}}=\\sum_{d}1/(q_{i d}-\\overline{{k}}_{j d}+c)}\\end{array}$ , where $c$ is a trainable constant that prevents elements leading to excessive values when the denominator $q_{i d}\\!-\\!k_{j d}$ approaches zero. To our knowledge, this is the first introduction of a Cauchy-based sequence mixer that achieves performance comparable to Attention matrix mixers. ", "page_idx": 4}, {"type": "text", "text": "3 Hydra: The Double-Headed Mamba ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In this section, we introduce Hydra, a novel sequence-to-sequence model through a bidirectional extension of Mamba. We briefly begin with a preliminary background that SSMs are semiseparable matrix mixers (Section 3.1). Then, we motivate the design choice of Hydra under the domain of the matrix mixer framework. Specifically, we opt for quasiseparable matrices as our matrix mixer, a choice grounded by solid mathematical foundations (Section 3.2). Additionally, we underline the computational benefits and enhanced parameter efficiency afforded by adopting quasiseparable matrices (Section 3.3). ", "page_idx": 4}, {"type": "table", "img_path": "preo49P1VY/tmp/818864045968e7f795a9897b66c0f28ab7c903a836357b33924b3b912fd7cda5.jpg", "table_caption": [], "table_footnote": [], "page_idx": 5}, {"type": "text", "text": "Figure 2: (a) A semiseparable (SS) matrix. (b) A quasiseparable (QS) matrix. (c) A mixer matrix of addition-based bidirectional SSMs. (d) A QS mixer matrix for Hydra. SS and QS matrices are characterized by rank conditions (Definition 3.1, Definition 3.2). The rank characterization of SS matrices include the diagonals (e.g., green submatrices), whereas that of QS matrices hold for offdiagonal submatrices (e.g., yellow submatrices). Because of the similar rank properties, a naive addition-based bidirectional SSM is provably a QS matrix mixer. Hence, QS matrix mixers generalize this common heuristic for bidirectional SSMs. The freedom in the diagonal values of Hydra leads to a higher expressivity compared to the mixer matrices of the addition-based bidirectional SSMs, where the diagonal values are constrained by the colored vectors. ", "page_idx": 5}, {"type": "text", "text": "3.1 Background: State Space Models are Semiseparable Matrix Mixers ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "SSD [6], the latest advancement in the iterations of SSMs, presents a sub-quadratic sequence mixer that attains language modeling performance on-par with Attention. Crucially, SSD underscores that all SSMs are inherently parameterized by semiseparable matrices, which play a pivotal role in their computational efficiency and strong empirical performance. Specifically, the operational essence of selective SSMs such as Mamba \u2013 the transformation of an input sequence $\\mathbf{X}\\!\\in\\!\\mathrm{{\\bf~R}}^{L\\times C}\\!\\mapsto\\!\\mathbf{Y}\\!\\in\\!\\mathrm{{\\mathbb{R}}}^{L\\times C}$ \u2013 can be succinctly represented within the matrix mixer framework, as detailed below: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{{\\displaystyle{\\bf y}_{t}\\!=\\!\\sum_{s=0}^{t}\\!{\\bf C}_{t}^{T}{\\bf A}_{t:s}^{\\times}{\\bf B}_{s}{\\bf x}_{s}}\\quad}&{}&{\\quad{\\bf(1)}\\quad}&{}\\\\ {{\\displaystyle{\\bf Y}\\!=\\!{\\bf S}{\\bf M}({\\bf A},{\\bf B},{\\bf C})({\\bf X})\\!=\\!{\\bf M}{\\bf X}\\quad}}&{}&{\\quad{\\bf A}_{i:j}^{\\times}\\!=\\!\\left\\{\\!\\!\\begin{array}{l l}{{\\!\\prod_{k=j+1}^{i}\\!{\\bf A}_{k}\\!}}&{{\\!\\mathrm{for}\\,i\\!>\\!j}}\\\\ {{\\!\\mathrm{I}\\!\\!\\!\\!-\\!\\!\\!1\\!\\!\\!}}&{{\\!\\mathrm{for}\\,i\\!=\\!j\\!\\cdot\\!\\!\\!}}\\\\ {{\\!\\prod_{k=i}^{j-1}\\!\\!\\!\\!\\mathbf{A}_{k}\\!}}&{{\\!\\mathrm{for}\\,i\\!<\\!j}}\\end{array}\\!\\right.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Here, $m_{i j}$ represents an $(i,j)$ -element of the mixer matrix $\\mathbf{M}\\!\\in\\!\\mathbb{R}^{L\\times L}$ , with each matrix ${\\bf A}_{i}\\!\\in\\!\\mathbb{R}^{N\\times N}$ and vector $\\mathbf{c}_{i},\\mathbf{b}_{i}\\in\\mathbb{R}^{N\\times1}$ as time-varying parameters of selective SSMs. This formulation reveals that the mixer matrices M follow a fundamental class of structured matrices known as semiseparable matrices, defined as follows: ", "page_idx": 5}, {"type": "text", "text": "Definition 3.1 (The rank characterization of semiseparable matrices). A lower triangular matrix M is $N$ -semiseparable iff any submatrix from the lower triangle (on or below the diagonal) has a rank of at most $N$ . See Figure $2\\left(a\\right)$ . ", "page_idx": 5}, {"type": "text", "text": "However, a key limitation of these matrices \u2013 and by extension, SSMs \u2013 is their inherent causality, which restricts their use in scenarios where bidirectional processing is vital. To circumvent this limitation, previous efforts [44, 15, 12] have explored employing two separate SSMs, one for forward and the other for backward sequence processing, then combine the outputs using strategies like element-wise addition, the Hadamard product, or concatenation. Among such heuristics, addition-based bidirectional extensions of SSMs [15, 48, 38] can be conceptualized within our matrix mixer framework, as illustrated in Figure 2 (c). ", "page_idx": 5}, {"type": "text", "text": "3.2 Quasiseparable Matrices: A Principled Bidirectional Matrix Mixer ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We fully utilize the matrix mixer framework, which is discussed in Section 2, to explore a novel bidirectional sequence mixer and identify quasiseparable matrices as a prime candidate. Our exploration focuses on structured matrix classes that meet the following criteria: 1) they feature upper triangular components for bidirectionality, 2) they possess strong expressivity, and 3) they benefit from sub-quadratic matrix multiplication algorithms. ", "page_idx": 5}, {"type": "text", "text": "The structural design of quasiseparable matrices inherently meets the first criterion, which is defined as follows: a matrix $\\mathbf{M}$ is $N$ -quasiseparable if each element $m_{i j}$ satisfies ", "page_idx": 5}, {"type": "equation", "text": "$$\nm_{i j}\\!=\\!\\left\\{\\!\\!\\begin{array}{l l}{\\overrightarrow{\\mathbf{c}_{i}^{T}}\\overrightarrow{\\mathbf{A}_{i:j}^{\\times}}\\overrightarrow{\\mathbf{b}_{j}},}&{\\mathrm{if}\\;i\\!>\\!j}\\\\ {\\delta_{i},}&{\\mathrm{if}\\;i\\!=\\!j\\,,}\\\\ {\\overrightarrow{\\mathbf{c}_{i}^{T}}\\overleftarrow{\\mathbf{A}_{i:j}^{\\times}}\\overleftarrow{\\mathbf{b}_{j}},}&{\\mathrm{if}\\;i\\!<\\!j}\\end{array}\\!\\!\\right.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where each $\\delta_{i}$ is a scalar, $\\mathbf{b}_{i},\\mathbf{c}_{i}\\in\\mathbb{R}^{N\\times1}$ , and ${\\bf A}_{i}\\in\\mathbb{R}^{N\\times N}$ [4]. Clearly, this matrix class features non-zero upper triangular components, enabling bidirectional processing. ", "page_idx": 5}, {"type": "text", "text": "Furthermore, the second requirement \u2013 the expressivity of quasiseparable matrices \u2013 is confirmed by their rank characterization: ", "page_idx": 6}, {"type": "text", "text": "Definition 3.2 (The rank characterization of quasiseparable matrices [30]). A matrix M is $N$ -quasiseparable iff any submatrix from either the strictly upper or lower triangle (off from the diagonal) has a rank of at most N. See Figure 2 (b). ", "page_idx": 6}, {"type": "text", "text": "This definition emphasizes the rank constraint inherent in quasiseparable matrices, which is also evident from Equation (3) given that each vector $\\mathbf{c}_{i},\\mathbf{b}_{i}\\in\\mathbb{R}^{N\\times1}$ and matrix ${\\bf A}_{i}\\in\\mathbb{R}^{N\\times N}$ has a rank of at most $N$ . This structural flexibility of quasiseparable matrices directly leads to significant generalizations, extending the capabilities of both low-rank and semiseparable matrices. ", "page_idx": 6}, {"type": "text", "text": "Corollary 3.3. Quasiseparable matrices generalize low-rank matrices. ", "page_idx": 6}, {"type": "text", "text": "Corollary 3.4. Quasiseparable matrices generalize and extend semiseparable matrices. ", "page_idx": 6}, {"type": "text", "text": "Additionally, we revisit the previous addition-based bidirectional extensions of SSMs [15, 48, 38] through the lens of our matrix mixer framework. Unlike other elements, the diagonal values in a mixer matrix embody a unique concept of residuals, serving as a critical aspect of model expressivity. As demonstrated in Figure 2 (c), the mixer matrices in these bidirectional SSMs exhibit constraints in their diagonal elements $\\{\\overrightarrow{\\mathbf{c}_{i}^{T}}\\overrightarrow{\\mathbf{b}_{i}}+\\overleftarrow{\\mathbf{c}_{i}^{T}}\\overleftarrow{\\mathbf{b}_{i}}\\}_{L}$ , which are directly influenced by the shared non-diagonal construction vectors $\\{\\overrightarrow{\\mathbf{c}_{i}},\\overrightarrow{\\mathbf{b}_{i}},\\overleftarrow{\\mathbf{c}_{i}},\\overleftarrow{\\mathbf{b}_{i}}\\}_{\\cal L}$ . Importantly, the rank characterization of semiseparable matrices includes on-diagonal elements, whereas that of quasiseparable matrices applies only to off-diagonal submatrices. This generosity in the rank-based definition suggests that sequence models employing quasiseparable mixers not only offer inherent extendability in handling both causal and bidirectional processing, but also exhibit strong expressivity. ", "page_idx": 6}, {"type": "text", "text": "Corollary 3.5. Quasiseparable matrices are strictly more expressive than mixer matrices of addition-based bidirectional SSMs. ", "page_idx": 6}, {"type": "text", "text": "Leveraging this inherent flexibility of quasiseparable matrix mixers, our Hydra in Section 3.3 is defined by incorporating shift operations. Our experimental results strikingly confirm that this nuanced parameterization difference leads to a notable improvement in downstream task performance, thereby substantiating our theoretical claims (see Appendix D.1). ", "page_idx": 6}, {"type": "text", "text": "Moreover, with their structural similarity to semiseparable matrices, quasiseparable matrices are confirmed as sequence aligned matrices. Given our experimental results that SAM parameterizations are the key to the strong representational power (Section 4.1.1), we further validate our choice of quasiseparable matrices for the bidirectional sequence mixer. ", "page_idx": 6}, {"type": "text", "text": "Proposition 3.6. $N$ -quasiseparable matrices are sequence aligned matrices. ", "page_idx": 6}, {"type": "text", "text": "Proof. quasiseparable matrices, due to their structural similarity to semiseparable matrices, belong to the class of Sequence Aligned matrices. Specifically, the set of parameters is given by $\\mathcal{P}\\!=\\!\\hat{\\mathcal{P}}\\!=\\!\\{\\mathbf{A}_{i},\\mathbf{b}_{i},\\mathbf{c}_{i},\\delta_{i}\\}_{L}$ . We consider the partition $\\Pi\\!=\\!\\{\\{\\mathbf{A}_{i}\\}_{L},\\{\\mathbf{b}_{i}\\}_{L},\\{\\mathbf{c}_{i}\\}_{L},\\{\\delta_{i}\\}_{L}\\}.$ , and for each element of the partition set, we choose the bijection that maps token $i$ to ${\\bf A}_{i}$ , ${\\bf b}_{i}$ , $\\mathbf{c}_{i}$ , and $\\delta_{i}$ respectively. Finally, it is easy to see that the sub-matrix $M[:i+1,:i+{\\bar{1}}]$ indeed only contains parameters in the set $\\{\\bar{\\mathbf{A}_{j}},\\mathbf{b}_{j},\\mathbf{c}_{j},\\bar{\\delta_{j}}\\}_{i}$ , thus satisfying the last requirement of SAM matrices. \u53e3 ", "page_idx": 6}, {"type": "text", "text": "In Section 3.3, we detail how quasiseparable sequence mixer can be effectively implemented using existing SSM frameworks to achieve sub-quadratic multiplication efficiencies, fulfilling the final criterion of our matrix mixer exploration. ", "page_idx": 6}, {"type": "text", "text": "3.3 Taming the Hydra ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "As a direct consequence of the favorable mathematical properties of quasiseparable matrices, we present a new sequence mixer Hydra. We adopt quasiseparable matrices as matrix mixers in Hydra, which bring forth three significant advantages: 1) higher representational power compared to its heuristic alternatives, 2) easy to implement sub-quadratic matrix multiplication algorithm, and 3) significant parameter savings. ", "page_idx": 6}, {"type": "text", "text": "We exploit the relationship between semiseparable and quasiseparable matrices to develop an easy-to-implement, sub-quadratic matrix multiplication algorithm. Specifically, we recognize that quasiseparable matrices can be expressed as a combination of two semiseparable matrices. ", "page_idx": 6}, {"type": "text", "text": "Proposition 3.7. Let $\\mathbf{X}\\in\\mathbb{R}^{L\\times D}$ be the input sequence, and let $Q S(\\cdot)$ and $S S(\\cdot)$ denote the action of a quasiseparable and semiseparable matrix respectively. Let the two matrices share the parameters ", "page_idx": 6}, {"type": "table", "img_path": "preo49P1VY/tmp/bd0f8df203d70d528bab11e02c635543b98534b036d5c60e68cb1d8c7831955f.jpg", "table_caption": ["Table 2: Matrix mixer ablations. A systematic empirical study of matrix mixers on the GLUE benchmark by controlling for the architecture and varying only the matrix parameterization. Sequencealigned matrices dynamically parameterize via input projections, becoming data-dependent (DD) that significantly increases performance. Most DD variants achieve competitive GLUE scores. "], "table_footnote": ["$\\{\\mathbf{A}_{i},\\mathbf{b}_{i},\\mathbf{c}_{i}\\}_{\\cal L}$ , and define $\\mathbf{D}=d i a g(\\delta_{1},\\cdots\\,,\\delta_{L}),$ , where $\\delta_{i}$ \u2019s are the diagonal parameters of the quasiseparable matrix. Then, "], "page_idx": 7}, {"type": "equation", "text": "$$\n\\begin{array}{r}{Q S(\\mathbf{X})\\!=\\!s h i f\\!t\\!\\left(\\mathbf{S}S(\\mathbf{X})\\right)\\!+\\!\\!f\\!i p\\!\\left(s h i f\\!t(S S(\\hbar\\!\\!\\left(p\\!\\!\\left(\\mathbf{X}\\right)\\right)\\right))\\!+\\!\\mathbf{D}\\mathbf{X},}\\end{array}\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "where $f i t p(\\cdot)$ denotes the operation that reverses the input sequence, while shift $\\langle\\cdot\\rangle$ refers to shifting the sequence right by one position, padding the beginning with zero. (Proof in Appendix $B$ ) ", "page_idx": 7}, {"type": "text", "text": "The above proposition demonstrates that quasiseparable matrix multiplication can be decomposed into two operations of semiseparable matrix multiplication with simple functions such as flip and shift. Given that semiseparable matrix structure encompasses SSMs, this flexibility allows for the selection of any SSM variant for implementation. In this paper, we employ SSD [6], chosen for its linear-time and dedicated hardware-efficient implementation. However, the architecture of Hydra is compatible with a variety of SSMs [18, 17, 16, 6] and can also be generalized with other recurrent models [47, 28]. ", "page_idx": 7}, {"type": "text", "text": "Furthermore, Hydra significantly improves parameter over the heuristic approaches to bidirectional modeling using SSMs [15, 48, 44, 12]. For example, some approaches utilize two distinct SSMs, which doubles the number of training parameters. In contrast, since we conceptualize the model as a quasiseparable matrix mixer (see Figure 4), we naturally share the $f_{X}$ projection layer, which accounts for a bulk of the model size. Empirically, we observe only a marginal increase in the total number of parameters compared to a single SSM, and can cut the the number of parameters nearly in half compared to the heuristic approaches to bidirectionality. ", "page_idx": 7}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "In Section 4.1, we begin by analyzing the matrix mixer framework through extensive performance comparisons between different structured matrix classes (Section 4.1.1). The data-dependent parameterization of Quasiseparable matrices surpasses the performance of all other matrix classes, validating our selection of it as the sequence mixer. Furthermore, we compare our method against other ad-hoc solutions that extend SSMs to acquire bidirectionality (Appendix D.1), and show that our Hydra outperforms them, underscoring the utility of the matrix view of sequence mixers. ", "page_idx": 7}, {"type": "text", "text": "Then, in Section 4.2, we validate the effectiveness of our method by evaluating Hydra on quintessential language and image benchmark tasks: Masked Language Modeling (Section 4.2.1) and Image Classification (Section 4.2.2). State-of-the-art performance in both tasks has generally been dominated by transformer-based models [10, 11]. Our Hydra serves as an efficient and powerful replacement to the transformer layer, outperforming it on both tasks. ", "page_idx": 7}, {"type": "text", "text": "In the presentation of results across all tables, the highest performing scores are highlighted in bold, while the second-highest scores are marked with an underline. Each number is the average of five runs. ", "page_idx": 7}, {"type": "text", "text": "Table 3: Performance of various approaches that extend Mamba to a bidirectional model. We compare our quasiseparable matrix mixer to element-wise addition (Add), the Hadamard product (Mult), and concatenation (Concat) variants. ", "page_idx": 8}, {"type": "table", "img_path": "preo49P1VY/tmp/c071d4b1b9768c8430a2dff197ba9520bc0ba60a28d1dd264613250d570397c8.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "4.1 Analysis of the Matrix Mixer Framework 4.1.1 Effects of Different Structured Matrix Families ", "text_level": 1, "page_idx": 8}, {"type": "image", "img_path": "preo49P1VY/tmp/895c22c6ec148cf09032e7d335b082a3766930b0145efc8773963090629af581.jpg", "img_caption": ["Figure 3: Cross-entropy loss of various bidirectional variants, measured on the C4 validation set. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "Our controlled experimental setting distinctly separates the mixer matrices from other architectural components, enabling a rigorous and focused comparison between different types of mixer matrices. Specifically, utilizing the recent Mamba [6] block, we only replace SSD with different mixer matrices M. In Table 2 we provide experimental results that showcase the expressivity of various matrix mixers that support bidirectional sequence processing, primarily by utilizing off-the-shelf structured matrix families for the mixer matrix. Further details of the experimental setup are provided in Appendix E. ", "page_idx": 8}, {"type": "text", "text": "Results. The results distinctly highlight the substantial advantage in expressivity conferred by the SAM property (Definition 2.2). Previously, the high performance observed in [22, 45] was attributed to their low-rank based mixer matrices, particularly emphasized by the query-key $Q K^{T}$ interaction. The results show that the structures of mixer matrices affect the capability of sequence models. However, we demonstrate that the key factor that primarily contributes to significant improvements in the expressivity of sequence models is not the query-key formulation, but rather the SAM property. Through our systematic extension, we adapt six structured matrix families \u2013 Toeplitz, Vandermonde, Cauchy, low-rank, Attention, and quasiseparable \u2013 to include the SAM property (see Appendix E for implementation details). This adaptation reveals that the sequence-aligned Cauchy variant performs nearly as well as the sequence-aligned low-rank variant, which characterizes LA. Moreover, the experimental results consistently indicate that variants equipped with the SAM property outperform those lacking this feature across all tested matrix families. ", "page_idx": 8}, {"type": "text", "text": "4.1.2 Ablating Approaches for Bidirectionality ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We compare the quasiseparable matrix mixer approach to prior bidirectional SSMs models that achieve bidirectionality by aggregating forward and backward SSMs using various heuristics including element-wise addition [15], the Hadamard product [44], and concatenation [44, 12]. We provide details of the ablation studies in Appendix D.1. ", "page_idx": 8}, {"type": "text", "text": "Results. The results presented in Table 3 show the shortcomings of the unidirectional Mamba [16] when applied to bidirectional contexts, as evidenced in C4 and GLUE. This significant performance disparity $(-4.0)$ underscores the essential need for models to be capable of bidirectional sequence processing. Within the comparison of four bidirectional variants shown in Table 3, our approach of utilizing a quasiseparable matrix achieves the top validation results on the C4 benchmark and records the highest GLUE average score of 81.7. This advantage of our method is further validated in Figure 3, where it demonstrates the cross-entropy loss on the C4 validation set throughout training. Considering the gigantic size of the dataset, the expressivity of Hydra using quasiseparable matrices is clearly manifested by consistently achieving the lowest loss, as well as the highest masked token prediction accuracy. ", "page_idx": 8}, {"type": "text", "text": "4.2 Evaluation Results of Hydra ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "4.2.1 Bidirectional Masked Language Modeling ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We pretrain our models on the masked language modeling objective using the Colossal Cleaned Common Crawl (C4) corpus [36], then finetune and evaluate them on the GLUE benchmark [43]. We relegate experimental details in Appendix D.2. ", "page_idx": 8}, {"type": "table", "img_path": "preo49P1VY/tmp/90089339c23657b753b168d1e377b884a4188f2c18c2fba2879536634a0137ef.jpg", "table_caption": ["Table 4: GLUE Results. Evaluation of various sequence models that can be formulated as matrix mixers. For maximum performance, all models are trained using established recipes [32, 13]. "], "table_footnote": ["Results. The results in Table 4, showcase that Hydra outperforms all existing state-of-the-art methods. Notably, Hydra surpasses the performance of BERT \u2013 trained with the latest HuggingFace recipe [46] \u2013 in both pretraining and GLUE benchmark scores. BERT has shown a noticeable gap in the masked language modeling task compared to other previous methods [40, 23, 13]. Hydra gains a $1.8\\%$ improvement in accuracy of C4 validation and a $\\bar{0}.8\\%$ increase in the average GLUE score, illustrating the effectiveness of leveraging matrix mixer view for bidirectional settings. "], "page_idx": 9}, {"type": "text", "text": "4.2.2 Image Classification ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We assess Hydra on the renowned ImageNet1K benchmark [9], which comprises $1.28\\mathbf{M}$ training images and $50\\mathbf{k}$ validation images across $1,000$ categories. We use the ViTBase [11] model as a baseline to facilitate a rigorous comparison of various sequence mixers by substituting the Transformer block in ViT with alternative sequence mixer models, specifically S4ND [27], Hyena [31], Mamba [16], and our proposed Hydra model. Unlike many off-the-shelf models such as CNN-based [19, 25] and vision-specialized Transformers [24] that include additional ", "page_idx": 9}, {"type": "table", "img_path": "preo49P1VY/tmp/dd03c9d148b5cea4025a765340e5eb4e49de3e4bc4a84edeae7f8d4ea8e63fd7.jpg", "table_caption": ["Table 5: Top 1 & 5 image classification accuracies evaluated on the ImageNet-1K benchmark. We also report accuracies using the common model ensembling technique: Exponential Moving Average (EMA) weights. (Top) Reported from literature [27, 31]. (Bottom): Our unidirectional and bidirectional Mamba results. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "techniques such as hierarchical spatial downsampling to boost accuracy, our approach involves substituting only the sequence mixer layers within the ViT architecture. In addition, as opposed to other baselines in the setting of [31], our method uses no tuning over the default ViT recipe except for droppath. We found that Hydra fits the training data noticeably better than ViT, perhaps due to better expressivity and inductive bias, so we simply increased droppath from 0.3 to 0.5 as stronger regularization. We relegate further experimental details in Appendix D.2. ", "page_idx": 9}, {"type": "text", "text": "Results. The results, as presented in Table 5, compare the performance of Hydra with ViT [11] and other variants [27, 31] on ImageNet-1K. Hydra exhibits superior performance in image classification, outperforming ViT by $2.2\\%$ in Top-1 accuracy and $1.1\\%$ in Top-5 accuracy. Remarkably, even though Hydra simply flattens images without incorporating any specific 2D architectural adjustments, it still surpasses S4ND [27] \u2013 which is specifically tailored for image processing \u2013 by a notable margin of $1.6\\bar{\\%}$ in Top-1 accuracy. This showcases the versatility and effectiveness of Hydra in handling diverse data types. ", "page_idx": 9}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this work, we have explored a common paradigm for sequence models wherein the sequence mixer can be represented by a matrix. This framework encompasses many well-known models such as MLP-Mixer, FNet, convolutions, Transformers (softmax attention), and recent state-space models such as Mamba. By formalizing the matrix mixer framework and exploring additional matrix variants, we have identified a key axis of variation (sequence alignment) in matrix parameterizations, which enables benefits such as data dependence. This, in turn, provides increased flexibility and stronger performance for sequence models. Furthermore, we have leveraged the matrix mixer framework to motivate a natural bidirectional extension of state space models called Hydra, which can be formulated as quasiseparable matrix mixers. Hydra consistently outperforms unidirectional Mamba and other bidirectional sequence models in tasks such as masked language modeling and image classification. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This research was made possible by the generous support of computational resources provided by Cartesia AI. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Simran Arora, Sabri Eyuboglu, Aman Timalsina, Isys Johnson, Michael Poli, James Zou, Atri Rudra, and Christopher R\u00e9. \u201cZoology: Measuring and improving recall in efficient language models\u201d. In: arXiv preprint arXiv:2312.04927 (2023). [2] Simran Arora, Sabri Eyuboglu, Michael Zhang, Aman Timalsina, Silas Alberti, Dylan Zinsley, James Zou, Atri Rudra, and Christopher R\u00e9. \u201cSimple linear attention language models balance the recall-throughput tradeoff\u201d. In: arXiv preprint arXiv:2402.18668 (2024).   \n[3] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. \u201cNeural machine translation by jointly learning to align and translate\u201d. In: arXiv preprint arXiv:1409.0473 (2014).   \n[4] Tom Bella, Yuli Eidelman, Israel Gohberg, and Vadim Olshevsky. \u201cComputations with quasiseparable polynomials and matrices\u201d. In: Theoretical Computer Science (2008).   \n[5] Tri Dao, Beidi Chen, Nimit S Sohoni, Arjun Desai, Michael Poli, Jessica Grogan, Alexander Liu, Aniruddh Rao, Atri Rudra, and Christopher R\u00e9. \u201cMonarch: Expressive structured matrices for efficient and accurate training\u201d. In: International Conference on Machine Learning. PMLR. 2022, pp. 4690\u20134721.   \n[6] Tri Dao and Albert Gu. \u201cTransformers are SSMs: Generalized Models and Efficient Algorithms Through Structured State Space Duality\u201d. In: International Conference on Machine Learning (ICML). 2024.   \n[7] Tri Dao, Albert Gu, Matthew Eichhorn, Atri Rudra, and Christopher R\u00e9. \u201cLearning fast algorithms for linear transforms using butterfly factorizations\u201d. In: International conference on machine learning. PMLR. 2019, pp. 1517\u20131527.   \n[8] Tri Dao, Nimit S Sohoni, Albert Gu, Matthew Eichhorn, Amit Blonder, Megan Leszczynski, Atri Rudra, and Christopher R\u00e9. \u201cKaleidoscope: An efficient, learnable representation for all structured linear maps\u201d. In: arXiv preprint arXiv:2012.14966 (2020).   \n[9] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. \u201cImagenet: A large-scale hierarchical image database\u201d. In: CVPR. 2009.   \n[10] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. \u201cBert: Pre-training of deep bidirectional transformers for language understanding\u201d. In: NAACL (2019).   \n[11] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. \u201cAn image is worth 16x16 words: Transformers for image recognition at scale\u201d. In: ICLR (2021).   \n[12] Yassir Fathullah, Chunyang Wu, Yuan Shangguan, Junteng Jia, Wenhan Xiong, Jay Mahadeokar, Chunxi Liu, Yangyang Shi, Ozlem Kalinli, Mike Seltzer, and Mark J. F. Gales. \u201cMulti-Head State Space Model for Speech Recognition\u201d. In: Proc. INTERSPEECH 2023. 2023, pp. 241\u2013245. DOI: 10.21437/Interspeech.2023-1036.   \n[13] Daniel Y Fu, Simran Arora, Jessica Grogan, Isys Johnson, Sabri Eyuboglu, Armin W Thomas, Benjamin Spector, Michael Poli, Atri Rudra, and Christopher R\u00e9. \u201cMonarch Mixer: A simple sub-quadratic GEMM-based architecture\u201d. In: NeurIPS (2023).   \n[14] Daniel Y. Fu, Tri Dao, Khaled Kamal Saab, Armin W. Thomas, Atri Rudra, and Christopher R\u00e9. \u201cHungry Hungry Hippos: Towards Language Modeling with State Space Models\u201d. In: The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023. OpenReview.net, 2023. URL: https://openreview.net/pdf?id= COZDy0WYGg.   \n[15] Karan Goel, Albert Gu, Chris Donahue, and Christopher R\u00e9. \u201cIt\u2019s raw! audio generation with state-space models\u201d. In: ICML. 2022.   \n[16] Albert Gu and Tri Dao. \u201cMamba: Linear-time sequence modeling with selective state spaces\u201d. In: arXiv preprint arXiv:2312.00752 (2023).   \n[17] Albert Gu, Karan Goel, Ankit Gupta, and Christopher R\u00e9. \u201cOn the parameterization and initialization of diagonal state space models\u201d. In: NeurIPS (2022).   \n[18] Albert Gu, Karan Goel, and Christopher R\u00e9. \u201cEfficiently modeling long sequences with structured state spaces\u201d. In: ICLR (2022).   \n[19] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. \u201cDeep residual learning for image recognition\u201d. In: Proceedings of theIEEE conference on computer visionand pattern recognition. 2016, pp. 770\u2013778.   \n[20] Peter Izsak, Moshe Berchansky, and Omer Levy. \u201cHow to train BERT with an academic budget\u201d. In: EMNLP. 2021.   \n[21] Samy Jelassi, David Brandfonbrener, Sham M Kakade, and Eran Malach. \u201cRepeat after me: Transformers are better than state space models at copying\u201d. In: arXiv preprint arXiv:2402.01032 (2024).   \n[22] Angelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and Fran\u00e7ois Fleuret. \u201cTransformers are rnns: Fast autoregressive transformers with linear attention\u201d. In: ICML. 2020.   \n[23] James Lee-Thorp, Joshua Ainslie, Ilya Eckstein, and Santiago Ontanon. \u201cFnet: Mixing tokens with fourier transforms\u201d. In: NAACL (2022).   \n[24] Ze Liu, Yutong Lin, Yue Cao, Han Hu, Yixuan Wei, Zheng Zhang, Stephen Lin, and Baining Guo. \u201cSwin transformer: Hierarchical vision transformer using shifted windows\u201d. In: ICCV. 2021.   \n[25] Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, and Saining Xie. \u201cA convnet for the 2020s\u201d. In: Proceedings of the IEEE/CVF conference on computer vision and pattern recognition. 2022, pp. 11976\u201311986.   \n[26] Harsh Mehta, Ankit Gupta, Ashok Cutkosky, and Behnam Neyshabur. \u201cLong Range Language Modeling via Gated State Spaces\u201d. In: The Eleventh International Conference on Learning Representations. 2023. URL: https://openreview.net/forum?id $=$ 5MkYIYCbva.   \n[27] Eric Nguyen, Karan Goel, Albert Gu, Gordon Downs, Preey Shah, Tri Dao, Stephen Baccus, and Christopher R\u00e9. \u201cS4nd: Modeling images and videos as multidimensional signals with state spaces\u201d. In: NeurIPS (2022).   \n[28] Antonio Orvieto, Samuel L Smith, Albert Gu, Anushan Fernando, Caglar Gulcehre, Razvan Pascanu, and Soham De. \u201cResurrecting recurrent neural networks for long sequences\u201d. In: International Conference on Machine Learning. PMLR. 2023, pp. 26670\u201326698.   \n[29] Victor Y Pan. Structured matrices and polynomials: unified superfast algorithms. Springer Science & Business Media, 2012.   \n[30] Cl\u00e9ment Pernet, Hippolyte Signargout, and Gilles Villard. \u201cExact computations with quasiseparable matrices\u201d. In: Proceedings of the 2023 International Symposium on Symbolic and Algebraic Computation. 2023, pp. 480\u2013489.   \n[31] Michael Poli, Stefano Massaroli, Eric Nguyen, Daniel Y. Fu, Tri Dao, Stephen Baccus, Yoshua Bengio, Stefano Ermon, and Christopher R\u00e9. \u201cHyena Hierarchy: Towards Larger Convolutional Language Models\u201d. In: ICML. 2023.   \n[32] Jacob Portes, Alex Trott, Sam Havens, Daniel King, Abhinav Venigalla, Moin Nadeem, Nikhil Sardana, Daya Khudia, and Jonathan Frankle. \u201cMosaicBERT: A Bidirectional Encoder Optimized for Fast Pretraining\u201d. In: arXiv preprint arXiv:2312.17482 (2023).   \n[33] Zhen Qin, Xiaodong Han, Weixuan Sun, Bowen He, Dong Li, Dongxu Li, Yuchao Dai, Lingpeng Kong, and Yiran Zhong. \u201cToeplitz Neural Network for Sequence Modeling\u201d. In: ICLR. 2023.   \n[34] Zhen Qin, Xiaodong Han, Weixuan Sun, Dongxu Li, Lingpeng Kong, Nick Barnes, and Yiran Zhong. \u201cThe devil in linear transformer\u201d. In: EMNLP (2022).   \n[35] Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. \u201cLanguage models are unsupervised multitask learners\u201d. In: OpenAI blog 1.8 (2019), p. 9.   \n[36] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. \u201cExploring the limits of transfer learning with a unified text-to-text transformer\u201d. In: JMLR (2020).   \n[37] David W Romero, Anna Kuzina, Erik J Bekkers, Jakub M Tomczak, and Mark Hoogendoorn. \u201cCkconv: Continuous kernel convolution for sequential data\u201d. In: arXiv preprint arXiv:2102.02611 (2021).   \n[38] Yair Schiff, Chia-Hsiang Kao, Aaron Gokaslan, Tri Dao, Albert Gu, and Volodymyr Kuleshov. \u201cCaduceus: Bi-directional equivariant long-range dna sequence modeling\u201d. In: arXiv preprint arXiv:2403.03234 (2024).   \n[39] Yutao Sun, Li Dong, Shaohan Huang, Shuming Ma, Yuqing Xia, Jilong Xue, Jianyong Wang, and Furu Wei. Retentive Network: A Successor to Transformer for Large Language Models. 2023. arXiv: 2307.08621 [cs.CL].   \n[40] Ilya O Tolstikhin, Neil Houlsby, Alexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Thomas Unterthiner, Jessica Yung, Andreas Steiner, Daniel Keysers, Jakob Uszkoreit, et al. \u201cMlp-mixer: An all-mlp architecture for vision\u201d. In: NeurIPS (2021).   \n[41] Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, and Herv\u00e9 J\u00e9gou. \u201cTraining data-efficient image transformers & distillation through attention\u201d. In: ICML. 2021.   \n[42] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. \u201cAttention is all you need\u201d. In: NeurIPS (2017).   \n[43] Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel Bowman. \u201cGLUE: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding\u201d. In: ICLR. 2019.   \n[44] Junxiong Wang, Jing Yan, Albert Gu, and Alexander Rush. \u201cPretraining Without Attention\u201d. In: EMNLP. 2023.   \n[45] Sinong Wang, Belinda Z Li, Madian Khabsa, Han Fang, and Hao Ma. \u201cLinformer: Self-attention with linear complexity\u201d. In: arXiv preprint arXiv:2006.04768 (2020).   \n[46] Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, R\u00e9mi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. \u201cTransformers: State-ofthe-Art Natural Language Processing\u201d. In: EMNLP. 2020.   \n[47] Songlin Yang, Bailin Wang, Yikang Shen, Rameswar Panda, and Yoon Kim. \u201cGated linear attention transformers with hardware-efficient training\u201d. In: arXiv preprint arXiv:2312.06635 (2023).   \n[48] Lianghui Zhu, Bencheng Liao, Qian Zhang, Xinlong Wang, Wenyu Liu, and Xinggang Wang. \u201cVision mamba: Efficient visual representation learning with bidirectional state space model\u201d. In: arXiv preprint arXiv:2401.09417 (2024). ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "A Discussions ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "A.1 Limitations ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In this section, we share two limitations of our work, namely 1) Representation-Computation Tradeoff, and 2) Hardware Efficiency. ", "page_idx": 13}, {"type": "text", "text": "Representation-Computation Tradeoff. While structured matrix mixers are computationally more efficient than their dense matrix mixer counterparts like softmax attention, they are also representationally less expressive, which may be seen as a limitation of these methods. For instance, concurrent works [1, 2, 21] have begun investigating the representational power of SSMs by analyzing their performance on memorization-centric tasks. They report that SSMs with a fixed model capacity are eventually outperformed by softmax attention for longer sequences. This can be viewed as a consequence of the matrix being too structured, and hence too inexpressive for the problem. ", "page_idx": 13}, {"type": "text", "text": "On the other hand, we remark that the degree of structure of a structured matrix is a knob that can be tuned according to the specific task, that is we can tradeoff the computational efficiency of the method for larger expressivity. For instance, within the structured matrix class of low rank matrices, we can tune the rank upto the size of the matrix, which is the sequence length. As the rank of the matrix class increases so does its expressive power; however, at the same time it also diminishes the compute efficiency associated with the matrix being low rank. ", "page_idx": 13}, {"type": "text", "text": "As another example, we demonstrate this tradeoff on the performance of SSMs on retrieval-style tasks for SSD, which is the modern variant of Mamba. Specifically, we show that SSD is able to recover the accuracy attained by softmax attention once we control for the compute capacity of the model. In contrast, hardware limitations of the selective scan algorithm make it impractical to match the compute capacity in Mamba, explaining the emerging findings from [1, 2, 21] that SSMs underperform on memorization-centric tasks. This makes it evident that the development and analysis of SSMs is an active area of research with substantial room for exploration and improvement. ", "page_idx": 13}, {"type": "text", "text": "Hardware Efficiency: Despite the fact that structured matrices have associated sub-quadratic matrix multiplication algorithms, their implementation may not be hardware-friendly, which can reduce the execution speed in practice. For instance, one of the core advantages of Transformer is the hardware-friendly nature of its architectural design, mainly composed of pure matrix multiplications. ", "page_idx": 13}, {"type": "text", "text": "A.2 Broader Impact ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "This paper presents work whose goal is to advance the field of Machine Learning. The primary objective of this work is to introduce novel component designs that are universally applicable across various tasks. Consequently, we believe that this work is unlikely to have significant societal impacts that necessitate special emphasis within this context. ", "page_idx": 13}, {"type": "text", "text": "B Proofs ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Proposition 2.5. MLP-Mixer is a Matrix Mixer ", "page_idx": 13}, {"type": "text", "text": "Proof. Recall that MLP-Mixer applies a weight-shared, per-channel linear projection on the input sequence. Since MLP-Mixer does not pre-process the input sequence, we set $f_{X}$ to be the identity function. Additionally, since the mixer matrix is data independent and is learned as a free parameter, we define the class $\\mathcal{M}:=\\mathrm{\\dot{R}}^{L\\times L}$ , and set $f_{\\mathcal{M}}(\\mathbf{X};\\theta)\\!:=\\!\\theta^{3}$ , for $\\bar{\\boldsymbol{\\theta}}\\in\\Theta$ , where $\\Theta\\!:=\\!\\mathbb{R}^{L\\times L}$ . Since MLP-Mixer shares the matrix across all channels, the number of heads $H\\!=\\!1$ . The output is given by ${\\bf Y}^{(0)}\\!=\\!\\theta{\\bf X}^{(0)}$ , where $\\theta$ is the learned mixer matrix, which matches with the functional form of MLP-Mixer\u2019s sequence mixing primitive. \u53e3 ", "page_idx": 13}, {"type": "text", "text": "Proposition 2.6. LA is a Structured Matrix Mixer ", "page_idx": 13}, {"type": "text", "text": "Proof. Recall that for each head $h\\!\\in\\![H]$ , LA computes, ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{Y}^{h}\\!=\\!\\sigma(\\mathbf{Q}^{h})\\sigma(\\mathbf{K}^{h})^{T}\\mathbf{V}^{h},}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where $\\mathbf{Q}^{h},\\mathbf{K}^{h},\\mathbf{V}^{h}$ and projections of the input. Since LA preprocesses the input sequence via projection, we set $f_{X}\\!=\\!\\mathbf{W}_{V}\\,\\boldsymbol{\\dot{\\in}}\\,\\mathbb{R}^{\\boldsymbol{\\Tilde{C}}\\times\\boldsymbol{D}}$ , with $\\mathbf{W}_{V}$ as a learned parameter. The class of structured matrices $\\mathcal{M}$ is clearly the class of Low Rank matrices. We define the set $\\Theta\\!=\\!(\\!\\mathbb{R}^{C\\times H d})^{2}$ to correspond to the learned parameters ${\\bf W}_{Q},{\\bf W}_{K}$ for the $\\{\\mathbf{Q}^{h},\\mathbf{K}^{h}\\}_{h}$ matrices, where $d$ is the internal dimension for keys and queries. We set the matrix-generating function $f_{\\mathcal{M}}^{h}$ to compute $\\mathbf{M}^{h}$ as $\\mathbf{M}^{h}\\!=\\!\\sigma(\\mathbf{Q}^{h})\\sigma(\\mathbf{K}^{h})^{T}$ through linear projections, followed by applying element-wise nonlinearity $\\sigma$ , and a matrix multiplication. The output $\\mathbf{Y}^{h}=\\mathbf{M}^{h}(f_{X}(\\mathbf{X}))^{h}$ matches the expected functional form of LA\u2019s sequence mixing primitive. \u53e3 ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "Proposition 3.2. Let $\\mathbf{X}\\in\\mathbb{R}^{L\\times D}$ be the input sequence, and let $Q S(\\cdot)$ and $S S(\\cdot)$ denote the action of a Quasiseparable and Semiseparable matrix respectively. Let the two matrices share the parameters $\\{\\mathbf{A}_{i},\\mathbf{b}_{i},\\mathbf{c}_{i}\\}_{\\cal L}$ , and define $\\mathbf{D}=d i a g(\\delta_{1},\\cdots,\\delta_{L})$ , where $\\delta_{i}$ \u2019s are the diagonal parameters of the Quasiseparable matrix. Then, ", "page_idx": 14}, {"type": "equation", "text": "$\\begin{array}{r}{Q S(\\mathbf{X})\\!=\\!s h i f\\!t\\!\\left(\\mathbf{S}S(\\mathbf{X})\\right)\\!+\\!\\!\\mathcal{H}i p\\!\\left(s h i f\\!t(S S(\\boldsymbol{\\mu}i p(\\mathbf{X})))\\right)\\!+\\!\\mathbf{D}\\mathbf{X},}\\end{array}$ ", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where flip $(\\cdot)$ denotes the operation that reverses the input sequence, while shift $\\langle\\cdot\\rangle$ refers to shifting the sequence right by one position, padding the beginning with zero. ", "page_idx": 14}, {"type": "text", "text": "Proof. The proof follows by observing that the first term, shift $\\operatorname{(SS}(\\mathbf{X}))$ , models the effect of the lower triangular part of the QS matrix. The next term, fli $\\operatorname{p}(\\sinh\\!\\operatorname{ft}(\\operatorname{SS}(\\operatorname{fip}(\\mathbf{X}))))$ ), represents the upper triangular part of the QS matrix, and the last term, DX, accounts for the QS matrix\u2019s diagonal. \u518f\u53e3 ", "page_idx": 14}, {"type": "image", "img_path": "preo49P1VY/tmp/899e856993a3984d0647c9202922c4823cec796e30ebf331400f818ebded5c63.jpg", "img_caption": ["Figure 4: Detailed illustration of Hydra. "], "img_footnote": [], "page_idx": 14}, {"type": "image", "img_path": "preo49P1VY/tmp/adb0d14f788afa8f25228491508bd970ed1d79bf0d9689b5784a8e989d363c26.jpg", "img_caption": ["Figure 5: Pseudo code for Hydra. $B{,}L,H{,}P$ denote batch size, sequence length, number of heads, and head dimension respectively. The suffices $^{\\lrcorner\\pmb{f}}$ and _b denote forward and backward. shift: Rightshift. "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "C Architectural Details ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Here, we provide architectural specifics of our method Hydra. As shown in Figure 4 and previously discussed Figure 5, Hydra is largely divided into two sub-components, each for forward and backward sequence processing respectively. A key architectural difference from the unidirectional Mamba [16] and SSD [6] models is the type of convolutional layers employed. Unlike Mamba and SSD, which utilize causal convolutions due to their unidirectional nature, Hydra incorporates standard convolutional layers, reflecting its capacity for bidirectional sequence processing. ", "page_idx": 14}, {"type": "text", "text": "D Additional Details ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "D.1 Details of Ablation Studies in Section 4.1 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Bidirectionality. We provide details of the experiments in . Each method under consideration employs 12 layers. As depicted in Table 3, due to shared projection layers for forward and backward ", "page_idx": 14}, {"type": "text", "text": "SSMs, Hydra only requires an additional 2M parameters compared to its unidirectional counterpart. Moreover because of the parameter increase in the concatenation variant, we lower its hidden dimension to match parameters. As [CLS] token is typically placed at the start of a sequence, we add an additional technique only to Mamba, which substitutes a [CLS] token with a global average pool of tokens. ", "page_idx": 15}, {"type": "text", "text": "D.2 Details of Main Results in Section 4.2 ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Training Details of Hydra We align our setup with the BERT-Base [10] architecture, which consists of 110M parameters across 12 transformer encoder layers. To ensure a fair comparison, MLPMixer [40], FNet [23], and M2 [13] are configured with 12 layers, with the number of channels adjusted to match the parameter count of BERT. Similarly, Hydra is structured with 23 layers to align with the total number of parameters of BERT. We follow the well-established BERT training recipes [32, 13] for optimal performance of each method. The specific hyperparameters for reproducing the results in Table 4 are reported in Table 6, and the settings used for obtaining the results of Hydra in Table 5 are listed in Table 9. ", "page_idx": 15}, {"type": "text", "text": "GLUE. We pretrain on the C4 dataset, and follow the recipe from MosaicBERT [32] which has been widely adopted in recent works - the models are trained for $70k$ steps with a batch size of 4096. We adopt the same hyperparameters as M2 [13] for pretraining, including the optimizer, learning rate schedule, and the bert-base uncased tokenizer. We employ the controlled setting from [20] for finetuning models on the GLUE benchmark. Specifically, we utilize weights pretrained on the C4 corpus for the five tasks \u2013 MNLI, QNLI, QQP, SST2, and COLA \u2013 and finetune RTE, STSB, and MRPC from an MNLI checkpoint. For reliability, the performance metrics reported represent the average scores from five runs for each GLUE task, with seeds selected completely at random. ", "page_idx": 15}, {"type": "text", "text": "The well-established BERT and M2 models benefit from highly optimized training and finetuning recipes [20, 13]. Therefore, we perform a short sweep for the learning rate and number of epochs for finetuning tasks to obtain the best results. To note, we ensure that the number of epochs do not surpass their original values for fairness. In Table 7 first row, we observe that Hydra of 24 layers trained using the M2 recipe out-of-the-box outperforms both BERT (83.5) and M2 (80.9) on the GLUE benchmark without any hyperparameter tuning. From the tuned hyperparameter, Hydra with 23 layers (second row) gains additional improvements, outperforming the results obtained by using the M2 recipe. ", "page_idx": 15}, {"type": "text", "text": "In Table 8, we report extended results for our GLUE comparisons (Table 4), including reference numbers directly reported from the literature. We include these to show that our results are a fair comparison of different models using our internally-consistent training framework, and that our baselines are strong and generally consistent with those found in MosaicBERT [32]. ", "page_idx": 15}, {"type": "text", "text": "ImageNet-1K. For Table 5, we use 12 layers for the Transformer [42], S4ND [27], and Hyena [31] blocks, and set to 24 layers for Mamba and Hydra to match the number of parameters. The training involves images of $224\\!\\times\\!224$ resolution, tokenized using a $16\\!\\times\\!16$ patchifying layer. For Hydra, we adopt a row-major ordering to flatten patches and deliberately exclude positional embeddings. The models are trained over 300 epochs, leveraging hyperparameters primarily sourced from a standard training recipe [24], including an initial learning rate of $1e-4$ and a batch size of 1024. We also incorporate regular ImageNet-1K training techniques [41], such as augmentation and regularization strategies. All other configurations remain consistent with the original ViT [11] setup, ensuring that any observed differences in performance can be directly attributed to the expressivity of the respective sequence mixer layers. ", "page_idx": 15}, {"type": "text", "text": "E Additional Details of Ablation Studies in Table 2 ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "To rigorously demonstrate the representational power of various families of matrix mixers, we ensure a fair comparison by meticulously controlling architectural hyperparameters. Specifically, all variants are constructed on the SSD [6] block, with a consistent configuration of 12 layers, an expansion factor of 2, and a hidden dimension (d_model) of 768. We then adjust the channel dimensions for qk_dim and headdim to keep the total parameter counts close to 70M. The models are pretrained for 24k steps in C4, each with a 4096 batch size, thus processing approximately 12.5B tokens in total. The finetuning phase adheres to the standardized protocol used for Hydra, ensuring comparability. ", "page_idx": 15}, {"type": "text", "text": "The primary differentiating factor among the variants is the mixer matrix M, which has two main configurable attributes: 1) the presence of the SAM property, and 2) the family of a mixer matrix. According to Definition 2.2, mixers with the SAM attribute contain parameters that are dynamically generated from elements of the input sequence, making them input data-dependent (Proposition 2.3). In contrast, variants without SAM are data-independent, with shared parameters across all inputs. The inclusion of projection layers for data dependency results in a marginal increase in parameter count for models with SAM. Consequently, we precisely configure $\\mathtt{q k\\_d i m\\_l6}$ , headdim $=\\!128$ for SAM variants, and qk_dim $=64$ , headdim $=64$ for non-SAM variants. For dense, Toeplitz (SAM and non-SAM), and Vandermonde DFT, we slightly adjust the hyperparameters to match the number of parameters. ", "page_idx": 15}, {"type": "table", "img_path": "preo49P1VY/tmp/60c633fbb7dba69233deb7d6e1b13384af2bbac41fca5a8e808ec62b2d85dd04.jpg", "table_caption": ["Table 6: Hyperparameters of different recipes used for training GLUE benchmark tasks. "], "table_footnote": [], "page_idx": 16}, {"type": "table", "img_path": "preo49P1VY/tmp/e269629cd3be78127bce3e8cc86a99e64430b016c094e42678c8199dd9ee406e.jpg", "table_caption": ["Table 7: Evaluation of Hydra on C4 dataset and GLUE Benchmark using different training recipes. Specific hyperparameters for reproducing the results are provided in Table 6. "], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "To facilitate understanding and reproducability of these methods, we provide PyTorch codes in Figure 6, Figure 7, Figure 8, Figure 9, Figure 10, and Figure 11. Our primary focus on this ablation is the comparison of expressivity between different Matrix Mixers. Therefore, our implementations do not necessarily adopt algorithms with efficient computational complexities for simplicity. The abbreviation di stands for data-independent and dd represents data-dependent, in which dd variants are equipped with the SAM property. As the Quasiseparable variant is equivalent to the Hydra blocks, its implementation can be found in the Python file provided in the supplementary. Further specific details are described below. ", "page_idx": 16}, {"type": "text", "text": "Dense. While extending Dense matrices to incorporate the SAM attribute is not straightforward, implementing the vanilla Dense mixers (i.e. without SAM) is extremely simple: they are equivalent to MLP-Mixer [40], employing a mixer matrix of $\\mathbb{R}^{L\\times L}$ . ", "page_idx": 16}, {"type": "table", "img_path": "preo49P1VY/tmp/93011f3c0db0c2f5f6d29df646f4c7dd3be74a895417a738163b8bbe5f5ca6b9.jpg", "table_caption": ["Table 9: ViT settings for ImageNet-1K "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "Toeplitz. ToeplitzmatrixmixerswithoutSAMpropertiesareequivalenttoconvolutionoperations[18, 17], formulated with $\\mathbb{R}^{2L-1}$ parameters. We also present a Toeplitz matrix mixer with SAM properties, thus data-dependent and can handle sequences of arbitrary lengths. The core idea is fairly similar to the quasiseparable matrix mixer \u2013 Hydra \u2013 that the Toeplitz matrix mixer integrates outputs from two separate forward and reverse sequence convolutions. Specifically, for $i\\in0,...L\\!-\\!1$ , each token $x_{i}$ generates two convolution parameters $m_{-i}$ and $m_{i}$ . Using all $m$ parameters, a data-dependent dynamic convolutional weight is generated as $\\{m_{-L+1},m_{-L+2},...,m_{-1},m_{0},m_{1},...m_{L-2},m_{L-1}\\}$ . ", "page_idx": 17}, {"type": "text", "text": "Vandermonde. In Section 2.4, we introduced the single-headed sequence aligned Vandermonde matrix mixer. Leveraging the definition, we present multi-headed implementation by a seamless extension. ", "page_idx": 17}, {"type": "text", "text": "Cauchy. The constant for preventing the denominator approaching zero is initialized to 0.0 and 0.5 for the di and the dd variants, respectively. ", "page_idx": 17}, {"type": "text", "text": "Definition E.1 (Cauchy Matrix). Given $\\mathbf{q},\\mathbf{k}\\in\\mathbb{R}^{L}$ , a matrix M is Cauchy if each $(i,j)$ -entry $m_{i j}$ satisfies $m_{i j}\\!=\\!\\frac{1}{q_{i}\\!-\\!k_{j}}$ ; $q_{i}-k_{j}\\,\\ne0.$ . ", "page_idx": 17}, {"type": "text", "text": "F Ablating the impact of Shift and Diagonal operations in Hydra ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Observe that general Quasiseparable (QS) matrices can be viewed as the Add variant augmented by two operations: an extra diagonal component and a shift operation. In this ablation we assesses the impact of each operation on the model performance by individually removing either the diagonal or shift term, as well as removing both (Add) to analyze why QS outperforms Add. ", "page_idx": 17}, {"type": "text", "text": "We find that using only the shift (80.7) or only the diagonal (80.7) yields the same performance as the Add method (80.6). It is only when both operations are combined that we observe a clear improvement. This result validates our choice of QS matrices, as neither Add $^+$ Diag nor Add $^+$ Shift alone has the expressivity of QS which is strictly more expressive than the addition of two SS matrices. ", "page_idx": 17}, {"type": "table", "img_path": "preo49P1VY/tmp/52d4e1e34cf139cc8b25af2a6a976167cc86bcf0f3a75bbcd79dc5da767d63b3.jpg", "table_caption": ["Table 10: Analyzing the impact of Shift and Diagonal operations in Hydra. "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "class Dense(nn.Module): def __init__( self , d_model , max_seq_len , # max_seq_len is necessary for Dense. expand $^{=2}$ , headdim $=128$ , device $=$ None , dtype $=$ None , factory_kwargs $=$ {\"device\": device , \"dtype\": dtype} super ().__init__ () self.d_model $=$ d_model self. max_seq_len $=$ max_seq_len self.expand $=$ expand self.d_inner $=$ self.expand $^*$ self.d_model self.headdim $=$ headdim assert self.d_inner % self.headdim $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad0$ self.nheads $=$ self.d_inner // headdim self.std_dev = 1 / np.sqrt(self. max_seq_len ) self. $\\texttt{M}=\\texttt{n n}$ .Parameter( torch.empty(self.nheads , self.max_seq_len , self.max_seq_len , $^{**}$ factory_kwargs ) ) nn.init. xavier_normal_ (self.M) def forward(self , hidden_states ): residual $=$ hidden_states # Rearrange hidden states to shape [batch , n_heads , length , headdim] hidden_states $=$ rearrange(hidden_states , \u2019b l (n h) -> b n l h\u2019, n=self.nheads) output $=$ torch.einsum(\u2019b n t h, n l t -> b n l h\u2019, hidden_states , self.M) output $=$ self.std_dev $^*$ output output $=$ rearrange(output , \u2019b n l h $->$ b l (n h)\u2019) $^+$ residual return output ", "page_idx": 18}, {"type": "text", "text": "Figure 6: PyTorch code for the Dense variant in Table 2. ", "page_idx": 18}, {"type": "text", "text": "lass Toeplitz(nn.Module): def __init__( self , is_data_dependent , d_model , max_seq_len , # max_seq_len is necessary for Toeplitz. expand $\\bar{=}2$ , headdim $_1=128$ , device $=$ None , dtype $=$ None , ", "page_idx": 19}, {"type": "text", "text": "): factory_kwargs $=$ {\"device\": device , \"dtype\": dtype} super ().__init__ () self. is_data_dependent $=$ is_data_dependent self.d_model $=$ d_model self. max_seq_len $=$ max_seq_len self.expand $=$ expand self.d_inner $=$ self.expand $^*$ self.d_model self.headdim $=$ headdim assert self.d_inner % self.headdim $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad0$ self.nheads $=$ self.d_inner // self.headdim self. kernel_size $\\begin{array}{r l}{\\mathbf{\\Sigma}}&{{}=\\quad\\mathbf{2}\\quad\\ast\\quad}\\end{array}$ self. max_seq_len - 1 self.pad_size $=$ self. max_seq_len - 1 self.std_dev $=$ 0.5 / np.sqrt(self. max_seq_len ) if not self. is_data_dependent : self. conv_params $=$ nn.Parameter( torch.empty(self.nheads , self.kernel_size , dtype $=\\cdot$ torch.float32 , device $=$ device) ) nn.init. xavier_uniform_ (self. conv_params ) def forward(self , x, forward_conv $=$ None , reverse_conv $=$ None): \"\"\" $x$ : (batch , seqlen , nheads $^*$ headdim) forward_conv : (batch , seqlen , nheads) reverse_conv : (batch , seqlen , nheads) \"\"\" residual $=x$ $\\mathbf{x}=$ rearrange(x, \u2019b l (n h) -> b h n l\u2019, ${\\bf n}^{=}$ self.nheads) # Pad the hidden states $\\textbf{\\tiny x}=\\textbf{\\tiny F}$ .pad(x, (self.pad_size , 0)) x_fft $=$ torch.fft.fft(x.to(torch.float32), $\\mathtt{n=2*}$ self. max_seq_len -1) if self. is_data_dependent : forward_conv $=$ rearrange(forward_conv , \u2019b l n -> b n l\u2019) reverse_conv $=$ rearrange(reverse_conv , \u2019b l n -> b n l\u2019) conv_params $=$ torch.cat( [torch.flip( reverse_conv [:,:,1:], [-1]), forward_conv ], dim=-1 ).to(torch.float32) # FFT requires float32. fft_conv_params $=$ torch.fft.fft(conv_params , ${\\bf n}^{=}$ self. kernel_size ).unsqueeze(1) else: fft_conv_params $=$ torch.fft.fft(self.conv_params , $\\mathtt{n}=$ self. kernel_size ) output $=$ torch.fft.ifft(x_fft $^*$ fft_conv_params , ${\\bf n}^{=}$ self. kernel_size ).real output $=$ self.std_dev $^*$ output[:, :, :, :self. max_seq_len ] output $=$ rearrange(output , \u2019b h n l -> b l (n h)\u2019).to(residual.dtype) $^+$ residual return output ", "page_idx": 19}, {"type": "text", "text": "lass Vandermonde(nn.Module): def __init__( self , is_data_dependent , d_model , qk_dim , is_dft=True , # Used only when is_data_dependent is False. max_seq_len $=$ None , # max_seq_len is necessary for non -DFT data - independent version. expand $^{=2}$ , headdim $_1=128$ , device $=$ None , dtype $=$ None , ", "page_idx": 20}, {"type": "text", "text": "factory_kwargs $=$ {\"device\": device , \"dtype\": dtype}   \nsuper (). _init__ ()   \nself. is_data_dependent $=$ is_data_dependent   \nself.d_model $=$ d_model   \nself.qk_dim $=$ qk_dim   \nself.is_dft $=$ is_dft   \nself. max_seq_len $=$ max_seq_len   \nself.expand $=$ expand   \nself.d_inner $=$ self.expand $^*$ self.d_model   \nself.headdim $=$ headdim   \nassert self.d_inner % self.headdim $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad0$   \nself.nheads $=$ self.d_inner // self.headdim   \nself.d_state $=$ self.nheads \\* qk_dim   \nif self. is_data_dependent : self.std_dev $\\bar{\\mathbf{\\alpha}}=\\bar{\\mathbf{\\alpha}}1$ / np.sqrt(2 \\* self. max_seq_len $^*$ self.qk_dim) self.eps $=$ 1e-3 # Constant to stabilize training.   \nelse: if self.is_dft: column_indices $=$ torch.arange(self. max_seq_len ) row_indices $=$ torch.arange(self. max_seq_len ).unsqueeze(1) dft_matrix $=$ torch.cos(2 $^*$ torch.pi \\* row_indices $^*$ column_indices / self . max_seq_len ).to( $^{\\ast\\ast}$ factory_kwargs ) self. register_buffer (\u2019dft_matrix \u2019, dft_matrix ) self.std_dev $=$ 1 / np.sqrt(self. max_seq_len ) else: self.q_bias $=$ nn.Parameter(torch.zeros(self.nheads , self.qk_dim , self. max_seq_len , \\*\\* factory_kwargs )) self.k_bias $=$ nn.Parameter(torch.zeros(self.nheads , self.qk_dim , self. max_seq_len , \\*\\* factory_kwargs )) self.std_dev $=$ 1 / np.sqrt(2 $^*$ self. max_seq_len $^*$ self.qk_dim) ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "def forward(self , v, $\\mathtt{q}^{=}$ None , $\\mathtt{k}\\!=\\!\\mathtt{l}$ one): batch , seqlen , dim $=0$ .shape residual $=\\quad\\uptau$ $\\v{v}=$ rearrange(v, \u2019b l (n h) -> b l n h\u2019, ${\\bf n}^{=}$ self.nheads) if self. is_data_dependent : $\\textsf{q}=$ rearrange(q, \u2019b l (n d) -> b n d l\u2019, $\\bar{\\mathbf{n}}\\!=$ self.nheads) $\\texttt{k}=$ rearrange(k, \u2019b l (n d) -> b n d l\u2019, $\\bar{\\mathbf{n}}\\!=$ self.nheads) q_matrix $=$ torch.cos( 2 $^*$ torch.pi \\* self.eps \\* torch.einsum( \u2019b n d t, l -> b n d t l\u2019, q, torch.arange(seqlen , dtype $\\mathbf{\\Phi}=\\mathfrak{v}$ .dtype).to( v.device) ) ) k_matrix $=$ torch.cos( 2 \\* torch.pi \\* self.eps \\* torch.einsum( \u2019b n d t, l -> b n d l t\u2019, k, torch.arange(seqlen , dtype $\\mathbf{\\Phi}=\\mathfrak{v}$ .dtype).to( v.device) ) sym_vandermonde $=$ (q_matrix - k_matrix).sum( ${\\tt d i m}\\!=\\!2$ ) output $=$ torch.einsum(\u2019b n t l, b l n h -> b t n h\u2019, sym_vandermonde , v) else: if self.is_dft: output $=$ torch.einsum(\u2019b l n h, t l -> b t n h\u2019, v, self.dft_matrix) else: q, k $=$ self.q_bias , self.k_bias q_matrix $=$ torch.cos( 2 $^*$ torch.pi \\* torch.einsum( \u2019n d t, l -> n d t l\u2019, q, torch.arange(self.max_seq_len , dtype $=v$ . dtype).to(v.device) ) ) k_matrix $=$ torch.cos( 2 \\* torch.pi \\* torch.einsum( \u2019n d t, l -> n d l t\u2019, k, torch.arange(self.max_seq_len , dtype $=v$ . dtype).to(v.device) ) sym_vandermonde $=$ (q_matrix $^+$ k_matrix).sum( ${\\tt d i m}\\!=\\!1$ ) output $=$ torch.einsum(\u2019n t l, b t n h -> b t n h\u2019, sym_vandermonde , v) output $=$ self.std_dev $^*$ output output $=$ rearrange(output , \u2019b l n h b l (n h)\u2019) $^+$ residual return output 21 ", "page_idx": 20}, {"type": "text", "text": "lass Cauchy(nn.Module): def __init__( self , is_data_dependent , d_model , qk_dim , max_seq_len $=$ None , # max_seq_len is necessary for data - independent version. expand $\\bar{=}2$ , headdi $_1=128$ , device $=$ None , dtype $=$ None , ", "page_idx": 21}, {"type": "text", "text": "): factory_kwargs $=$ {\"device\": device , \"dtype\": dtype} super ().__init__ () self. is_data_dependent $=$ is_data_dependent self.d_model $=$ d_model self.qk_dim $=$ qk_dim self. max_seq_len $=$ max_seq_len self.expand $=$ expand self.d_inner $=$ self.expand $^*$ self.d_model self.headdim $=$ headdim assert self.d_inner % self.headdim $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad0$ self.nheads $=$ self.d_inner // self.headdim self.d_state $=$ self.nheads \\* qk_dim self.tol $\\begin{array}{r l}{=}&{{}1\\,\\Theta\\mathrm{~-~}8}\\end{array}$ self.std_dev $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad1$ / np.sqrt(self. max_seq_len $^*$ self.qk_dim) if self. is_data_dependent : self.bias $=$ nn.Parameter(torch.tensor(0.5)) else: self.q_matrix $=$ nn.Parameter( torch.empty(self.max_seq_len , self.nheads , self.qk_dim , $^{**}$ factory_kwargs ) ) self.k_matrix $=$ nn.Parameter( torch.empty(self.max_seq_len , self.nheads , self.qk_dim , $^{**}$ factory_kwargs ) ) nn.init. xavier_normal_ (self.q_matrix) nn.init. xavier_normal_ (self.k_matrix) ", "page_idx": 21}, {"type": "text", "text": "def forward(self , v, $\\mathtt{q}^{=}$ None , $\\mathtt{k}\\!=$ None): residual $=\\quad\\uptau$ $\\v{v}=$ rearrange(v, \u2019b l (n h) -> b l n h\u2019, ${\\bf n}^{=}$ self.nheads) if self. is_data_dependent : $\\textsf{q}=$ rearrange(q, \u2019b l (n d) -> b n l 1 d\u2019, ${\\bf n}^{=}$ self.nheads) $\\begin{array}{r l}{\\bar{\\mathbf{z}}}&{{}=}\\end{array}$ rearrange(k, \u2019b l (n d) -> b n 1 l d\u2019, ${\\bf n}^{=}$ self.nheads) q = torch.exp(q) $^+$ self.bias k = torch.exp(k) $^+$ self.bias inv_cauchy_matrix = q + k + self.tol cauchy_matrix $=$ torch.sum(1 / inv_cauchy_matrix , dim=-1) output $=$ torch.einsum(\u2019b t n h, b n l t -> b l n h\u2019, v, cauchy_matrix ) else: $\\#\\mathrm{~\\textbf~{~q~}~}$ , k: (nheads , seqlen , qkdim) q = torch.exp(self.q_matrix) $\\begin{array}{r l}{\\bar{\\mathbf{z}}}&{{}=}\\end{array}$ torch.exp(self.k_matrix) inv_cauchy_matrix $=$ (q.unsqueeze(1) + k.unsqueeze(0)) $^+$ self.tol cauchy_matrix $=$ torch.sum(1 / inv_cauchy_matrix , dim $=-1$ ) output $=$ torch.einsum(\u2019b t n h, l t n -> b l n h\u2019, v, cauchy_matrix ) output $=$ self.std_dev $^*$ output output $=$ rearrange(output , \u2019b l n h -> b l (n h)\u2019) $^+$ residual return output ", "page_idx": 21}, {"type": "text", "text": "Figure 9: PyTorch code for the Cauchy variants in Table 2. ", "page_idx": 21}, {"type": "text", "text": "lass LowRank(nn.Module): def __init__( self , is_data_dependent , d_model , qk_dim , max_seq_len $=$ None , # max_seq_len is necessary for data - independent version. expand $\\bar{=}2$ , headdi $_1=128$ , device $=$ None , dtype $=$ None , ", "page_idx": 22}, {"type": "text", "text": "): factory_kwargs $=$ {\"device\": device , \"dtype\": dtype} super ()._ _init__ () self. is_data_dependent $=$ is_data_dependent self.d_model $=$ d_model self.qk_dim $=$ qk_dim self. max_seq_len $=$ max_seq_len self.expand $=$ expand self.d_inner $=$ self.expand $^*$ self.d_model self.headdim $=$ headdim assert self.d_inner % self.headdim $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad0$ self.nheads $=$ self.d_inner // self.headdim self.d_state $=$ self.nheads \\* qk_dim self.std_dev $=$ 1 / np.sqrt(self. max_seq_len $^*$ self.qk_dim) if not self. is_data_dependent : self.q_matrix $=$ nn.Parameter( torch.empty(self.max_seq_len , self.nheads , self.qk_dim , $^{**}$ factory_kwargs ) ) self.k_matrix $=$ nn.Parameter( torch.empty(self.max_seq_len , self.nheads , self.qk_dim , $^{**}$ factory_kwargs ) ) nn.init. xavier_normal_ (self.q_matrix) nn.init. xavier_normal_ (self.k_matrix)   \ndef forward(self , v, $\\mathtt{q}^{=}$ None , $\\mathtt{k}\\!=$ None): residual $=$ v $\\v{v}=$ rearrange(v, \u2019b l (n h) -> b l n h\u2019, ${\\bf n}^{=}$ self.nheads) if self. is_data_dependent : q $=$ rearrange(q, \u2019b l (n d) -> b l n d\u2019, n=self.nheads) ", "page_idx": 22}, {"type": "text", "text": "k $=$ rearrange(k, \u2019b l (n d) -> b l n d\u2019, n=self.nheads) output $=$ torch.einsum(\u2019b t n d, b l n d, b l n h -> b t n h\u2019, q, k, v) else: output $=$ torch.einsum(\u2019t n d, l n d, b l n h -> b t n h\u2019, self.q_matrix , self .k_matrix , v) output $=$ self.std_dev $^*$ output output $=$ rearrange(output , \u2019b l n h -> b l (n h)\u2019) $^+$ residual return output ", "page_idx": 22}, {"type": "text", "text": "Figure 10: PyTorch code for the low-rank variants in Table 2. ", "page_idx": 22}, {"type": "text", "text": "class Attention(nn.Module): def __init__( self , is_data_dependent , d_model , qk_dim , max_seq_len $=$ None , # max_seq_len is necessary for data - independent version. expand $\\bar{=}2$ , headdi $_1=128$ , device $=$ None , dtype $=$ None , ): factory_kwargs $=$ {\"device\": device , \"dtype\": dtype} super (). _init__ () self. is_data_dependent $=$ is_data_dependent self.d_model $=$ d_model self.qk_dim $=$ qk_dim self. max_seq_len $=$ max_seq_len self.expand $=$ expand self.d_inner $=$ self.expand $^*$ self.d_model self.headdim $=$ headdim assert self.d_inner % self.headdim $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad=\\quad0$ self.nheads $=$ self.d_inner // self.headdim self.d_state $=$ self.nheads \\* qk_dim if not self. is_data_dependent : self.q_matrix $=$ nn.Parameter( torch.empty(self.max_seq_len , self.nheads , self.qk_dim , $^{**}$ factory_kwargs ) ) self.k_matrix $=$ nn.Parameter( torch.empty(self.max_seq_len , self.nheads , self.qk_dim , $^{**}$ factory_kwargs ) ) nn.init. xavier_normal_ (self.q_matrix) nn.init. xavier_normal_ (self.k_matrix) def forward(self , v, $\\mathtt{q}^{=}$ None , k=None): residual $=\\quad\\uptau$ $\\v{v}=$ rearrange(v, \u2019b l (n h) -> b l n h\u2019, ${\\bf n}^{=}$ self.nheads) if self. is_data_dependent : q = rearrange(q, \u2019b l (n d) -> b l n d\u2019, n=self.nheads) k $=$ rearrange(k, \u2019b l (n d) -> b l n d\u2019, n=self.nheads) qk $=$ torch.einsum(\u2019b t n d, b l n d -> b n t l\u2019, q, k) attn_weights $=$ torch.softmax(1 / np.sqrt(self.qk_dim) $^*$ qk , dim $=-1$ ) output $=$ torch.einsum(\u2019b n t l, b l n h -> b t n h\u2019, attn_weights , v) else: qk torch.einsum(\u2019n t d, n l d -> n t l\u2019, self.q_matrix , self.k_matrix) attn_weights $=$ torch.softmax(1 / np.sqrt(self.qk_dim) \\* qk , ${\\tt d i m}=-1$ ) output $=$ torch.einsum(\u2019n t l, b l n h -> b t n h\u2019, attn_weights , v) output $=$ rearrange(output , \u2019b l n h -> b l (n h)\u2019) $^+$ residual return output ", "page_idx": 23}, {"type": "text", "text": "G Background ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "FNet In the FNet [23] architecture, the sequence mixing module utilizes a Discrete Fourier Transform (DFT) for processing input sequences. One of the approaches they adopt for short sequences is the application of the matrix representation of the DFT to the input sequence. This representation, denoted as $M$ , takes the form of a Vandermonde matrix, constructed from the roots of unity: ", "page_idx": 23}, {"type": "equation", "text": "$$\nM_{n k}\\!=\\!e^{-\\frac{2\\pi i}{L}n k}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "where indices $n$ and $k$ range from 0 to $L\\!-\\!1$ . First, we define $\\omega_{n}$ as the $n$ -th root of unity: ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\omega_{n}\\!=\\!e^{-\\frac{2\\pi i}{L}n}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "Then, the matrix $M$ , which represents the DFT, is expressed using $\\omega_{n}$ in the form of a Vandermonde matrix as follows: ", "page_idx": 23}, {"type": "equation", "text": "$$\n{\\cal M}=\\left(\\begin{array}{c c c c}{{\\omega_{0}^{0}}}&{{\\omega_{0}^{1}}}&{{\\cdots}}&{{\\omega_{0}^{L-1}}}\\\\ {{\\omega_{1}^{0}}}&{{\\omega_{1}^{1}}}&{{\\cdots}}&{{\\omega_{1}^{L-1}}}\\\\ {{\\omega_{2}^{0}}}&{{\\omega_{2}^{1}}}&{{\\cdots}}&{{\\omega_{2}^{L-1}}}\\\\ {{\\vdots}}&{{\\vdots}}&{{\\ddots}}&{{\\vdots}}\\\\ {{\\omega_{L-1}^{0}}}&{{\\omega_{L-1}^{1}}}&{{\\cdots}}&{{\\omega_{L-1}^{L-1}}}\\end{array}\\right)\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "MLP-Mixer In the MLP-Mixer architecture, sequence mixing is implemented using a MLP $M$ . This MLP operates on each token in the sequence and is formulated as follows: ", "page_idx": 24}, {"type": "equation", "text": "$$\nM\\!=\\!W_{2}\\sigma(W_{1})\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "where $\\sigma$ denotes a non-linear activation function (such as ReLU). In this context: ", "page_idx": 24}, {"type": "text", "text": "\u2022 $W_{1}$ is a weight matrix with dimensions $\\mathbb{R}^{d_{S}\\times L}$ , transforming the sequence from its original sequence length $L$ to an intermediate dimension $d_{S}$ .   \n\u2022 $W_{2}$ is a weight matrix with dimensions $\\mathbb{R}^{L\\times d_{S}}$ , converting the dimensions back from the intermediate dimension $d_{S}$ to the original sequence length $L$ . ", "page_idx": 24}, {"type": "text", "text": "This design means that $W_{1}$ and $W_{2}$ first compress and then expand the sequence dimensions, respectively. The choice of the inner dimension $d_{S}$ is made independent of the sequence length $L$ . Such a configuration leads to a computational complexity that is linear with respect to the sequence length $L$ , contrasting with the quadratic complexity commonly seen in sequence mixing operations in attention mechanisms. ", "page_idx": 24}, {"type": "text", "text": "Note that $M$ is a dense matrix, effectively capturing interactions across different tokens in the sequence. ", "page_idx": 24}, {"type": "text", "text": "Linear Attention Transformers process sequences of feature vectors, denoted as $\\mathbf{X}\\!\\in\\!\\mathbb{R}^{N\\times C}$ , where $N$ represents the number of vectors and $C$ their dimension. The core component of a Transformer is the self-attention mechanism, which mixes information across the sequence. ", "page_idx": 24}, {"type": "text", "text": "In self-attention, the sequence $\\mathbf{X}$ is projected into queries $\\mathbf{Q}$ , keys $\\mathbf{K}$ , and values $\\mathbf{V}$ using matrices $\\mathbf{W}_{Q},\\mathbf{W}_{K},\\mathbf{W}_{V}\\in\\mathbb{R}^{C\\times D}$ . The attention output is calculated as follows: ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\begin{array}{r}{{\\mathbf Q}{=}{\\mathbf X}{\\mathbf W}_{Q},\\qquad\\qquad\\qquad}\\\\ {{\\mathbf K}{=}{\\mathbf X}{\\mathbf W}_{K},}\\\\ {{\\mathbf V}{=}{\\mathbf X}{\\mathbf W}_{V},}\\\\ {{\\mathbf A}\\mathrm{ttention}({\\mathbf X}){=}\\mathrm{softmax}\\left(\\frac{{\\mathbf Q}{\\mathbf K}^{T}}{\\sqrt{D}}\\right){\\mathbf V}}\\end{array}\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "A generalized version of self-attention can be represented as [22]: ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\mathbf{v}_{i}^{\\prime}\\!=\\!\\frac{\\sum_{j=1}^{N}\\!\\mathrm{similarity}(\\mathbf{q}_{i},\\!\\mathbf{k}_{j})\\mathbf{v}_{j}}{\\sum_{j=1}^{N}\\!\\mathrm{similarity}(\\mathbf{q}_{i},\\!\\mathbf{k}_{j})},\n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "where the standard softmax attention employs similarity $(\\mathbf{q},\\mathbf{k})\\!=\\!e^{\\frac{\\mathbf{q}^{T}\\mathbf{k}}{\\sqrt{D}}}$ as the similarity function. ", "page_idx": 24}, {"type": "text", "text": "In the context of multi-headed Linear Attention (LA) [22], the input sequence is preprocessed and projected into three matrices for each head $h\\!\\in\\![H]$ . This is achieved through learned parameters and nonlinear transformations. Specifically, for each head, the input is projected into matrices $\\sigma(\\mathbf{Q}^{h})$ , $\\sigma(\\mathbf{K}^{h})$ , and $\\mathbf{V}^{h}$ , where $\\sigma$ denotes a non-linearity function. The set of learned parameters for these projections, denoted as $\\Theta$ , includes ${\\bf W}_{Q},{\\bf W}_{K}$ corresponding to the query and key matrices across all heads, defined as $\\Theta\\!=\\!(\\mathbb{R}^{C\\times H d})^{2}$ . Here, $H$ is the number of heads, and $d$ represents the dimension for each head for keys and queries. ", "page_idx": 24}, {"type": "text", "text": "The class of structured matrices $\\mathcal{M}$ used in LA is characterized as the class of Low Rank matrices. The matrix-generating function for each head $h$ , denoted as $f_{\\mathcal{M}}^{h}$ , computes the matrix $\\mathbf{M}^{h}$ as $\\mathbf{M}^{h}=$ $\\sigma(\\mathbf{Q}^{h})\\sigma(\\mathbf{K}^{h})^{T}$ . This computation involves linear projections of the queries and keys, application of element-wise nonlinearity $\\sigma$ , and matrix multiplication. ", "page_idx": 24}, {"type": "text", "text": "The output for each head $h$ , denoted as $\\mathbf{Y}^{h}$ , is then computed as $\\mathbf{Y}^{h}\\!=\\!\\mathbf{M}^{h}(f_{X}(\\mathbf{X}))^{h}$ , where $f_{X}=$ $\\mathbf{W}_{V}\\in\\mathbb{R}^{C\\times D}$ represents a projection of the input sequence with $\\mathbf{W}_{V}$ as a learned parameter matrix. This projection transforms the input data $\\mathbf{X}$ into a suitable form for processing by the attention mechanism. The LA method, as described, offers computational efficiency with time and memory complexity of $\\mathcal{O}(N)$ , in contrast to the traditional softmax attention mechanism which scales with $\\mathcal{O}(\\bar{N}^{2})$ . ", "page_idx": 24}, {"type": "text", "text": "Discrete Convolution Consider a convolution operation between sequence $X$ and the fliter sequence $h$ to produce the output sequence $Y$ . Such a convolution can be represented by a matrix multiplication with an $L\\times L$ Toeplitz matrix $M$ [31]. ", "page_idx": 24}, {"type": "text", "text": "Let: ", "page_idx": 24}, {"type": "text", "text": "\u2022 $X$ be the input signal, a column vector of length $L$ , i.e., $X\\!\\in\\!\\mathbb{R}^{L\\times1}$ . ", "page_idx": 24}, {"type": "text", "text": "\u2022 $h$ be the convolution filter, with a length $N$ where typically $N\\!\\leq\\!L$ .   \n\u2022 $Y$ be the output of the convolution, also of length $L$ . ", "page_idx": 25}, {"type": "text", "text": "The Toeplitz matrix $M$ for the convolution is constructed as follows: ", "page_idx": 25}, {"type": "equation", "text": "$$\n{\\cal M}\\!=\\!\\left(\\begin{array}{c c c c}{{h_{0}}}&{{h_{-1}}}&{{\\cdots}}&{{h_{-L+1}}}\\\\ {{h_{1}}}&{{h_{0}}}&{{\\cdots}}&{{h_{-L+2}}}\\\\ {{\\vdots}}&{{\\vdots}}&{{\\ddots}}&{{\\vdots}}\\\\ {{h_{L-1}}}&{{h_{L-2}}}&{{\\cdots}}&{{h_{0}}}\\end{array}\\right)\n$$", "text_format": "latex", "page_idx": 25}, {"type": "text", "text": "Thus, the output $Y\\!=\\!M X$ represents the convolution of $X$ with $h$ , with both $X$ and $Y$ having the same length $L$ , achieved through the $L\\times L$ Toeplitz matrix $M$ as defined above. ", "page_idx": 25}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "The checklist is designed to encourage best practices for responsible machine learning research, addressing issues of reproducibility, transparency, research ethics, and societal impact. Do not remove the checklist: The papers not including the checklist will be desk rejected. The checklist should follow the references and follow the (optional) supplemental material. The checklist does NOT count towards the page limit. ", "page_idx": 26}, {"type": "text", "text": "Please read the checklist guidelines carefully for information on how to answer these questions. For each question in the checklist: ", "page_idx": 26}, {"type": "text", "text": "\u2022 You should answer [Yes] , [No] , or [NA] .   \n\u2022 [NA] means either that the question is Not Applicable for that particular paper or the relevant information is Not Available.   \n\u2022 Please provide a short (1\u20132 sentence) justification right after your answer (even for NA). ", "page_idx": 26}, {"type": "text", "text": "The checklist answers are an integral part of your paper submission. They are visible to the reviewers, area chairs, senior area chairs, and ethics reviewers. You will be asked to also include it (after eventual revisions) with the final version of your paper, and its final version will be published with the paper. ", "page_idx": 26}, {"type": "text", "text": "The reviewers of your paper will be asked to use the checklist as one of the factors in their evaluation. While \"[Yes] \" is generally preferable to \"[No] \", it is perfectly acceptable to answer \"[No] \" provided a proper justification is given (e.g., \"error bars are not reported because it would be too computationally expensive\" or \"we were unable to find the license for the dataset we used\"). In general, answering \"[No] \" or \"[NA] \" is not grounds for rejection. While the questions are phrased in a binary way, we acknowledge that the true answer is often more nuanced, so please just use your best judgment and write a justification to elaborate. All supporting evidence can appear either in the main paper or the supplemental material, provided in appendix. If you answer [Yes] to a question, in the justification please point to the section(s) where related material for the question can be found. ", "page_idx": 26}, {"type": "text", "text": "IMPORTANT, please: ", "page_idx": 26}, {"type": "text", "text": "\u2022 Delete this instruction block, but keep the section heading \u201cNeurIPS paper checklist\", \u2022 Keep the checklist subsection headings, questions/answers and guidelines below. \u2022 Do not modify the questions and only use the provided macros for your answers. ", "page_idx": 26}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Justification: The main claims made in the abstract and introduction are clearly discussed throughout the paper. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 26}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: The limitations are discussed in Section A. Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 27}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Justification: Theoretical assumptions are provided with proofs in Section 2, 3, and Section B. Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 27}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: We provide specific details of our models, and experimental settings. In addition, we provide source code of our method in the supplementary. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not. ", "page_idx": 27}, {"type": "text", "text": "\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 28}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: In the supplementary, we provide source code with instructions in a README file. Moreover, we provide implementations of ablations studies in Section E. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 28}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: We provide specific experimental details in Section 4, Section C, Section D, and Section E. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 29}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: Each number is the average of five runs. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 29}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [No] ", "page_idx": 29}, {"type": "text", "text": "Justification: ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 29}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: The research conform Code of Ethics. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 30}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Justification: We briefly discuss potential impacts in Section A. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 30}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [No] ", "page_idx": 30}, {"type": "text", "text": "Justification: ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images. ", "page_idx": 30}, {"type": "text", "text": "\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 31}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes]   \nJustification: All assets are open-license. Guidelines:   \n\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 31}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 31}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper. ", "page_idx": 31}, {"type": "text", "text": "\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 32}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] Justification: ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 32}, {"type": "text", "text": "\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 32}]