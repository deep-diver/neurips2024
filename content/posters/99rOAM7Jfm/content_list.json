[{"type": "text", "text": "Noise-Aware Differentially Private Regression via Meta-Learning ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Ossi R\u00e4is\u00e4\u2217 University of Helsinki ossi.raisa@helsinki.fi ", "page_idx": 0}, {"type": "text", "text": "Stratis Markou\u2217 University of Cambridge em626@cam.ac.uk ", "page_idx": 0}, {"type": "text", "text": "Matthew Ashman University of Cambridge mca39@cam.ac.uk ", "page_idx": 0}, {"type": "text", "text": "Wessel P. Bruinsma Microsoft Research AI for Science wessel.p.bruinsma@gmail.com ", "page_idx": 0}, {"type": "text", "text": "Marlon Tobaben University of Helsinki marlon.tobaben@helsinki.fi ", "page_idx": 0}, {"type": "text", "text": "Antti Honkela University of Helsinki antti.honkela@helsinki.fi ", "page_idx": 0}, {"type": "text", "text": "Richard E. Turner University of Cambridge ret26@cam.ac.uk ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Many high-stakes applications require machine learning models that protect user privacy and provide well-calibrated, accurate predictions. While Differential Privacy (DP) is the gold standard for protecting user privacy, standard DP mechanisms typically significantly impair performance. One approach to mitigating this issue is pre-training models on simulated data before DP learning on the private data. In this work we go a step further, using simulated data to train a meta-learning model that combines the Convolutional Conditional Neural Process (ConvCNP) with an improved functional DP mechanism of Hall et al. [2013] yielding the DPConvCNP. DPConvCNP learns from simulated data how to map private data to a DP predictive model in one forward pass, and then provides accurate, well-calibrated predictions. We compare DPConvCNP with a DP Gaussian Process (GP) baseline with carefully tuned hyperparameters. The DPConvCNP outperforms the GP baseline, especially on non-Gaussian data, yet is much faster at test time and requires less tuning. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Deep learning has achieved tremendous success across a range of domains, especially in settings where large datasets are publicly available. However, in many impactful applications such as healthcare, the data may contain sensitive information about users, whose privacy we want to protect. Differential Privacy [DP; Dwork et al., 2006] is the gold standard framework for protecting user privacy, as it provides strong guarantees on the privacy loss incurred on users participating in a dataset. However, enforcing DP often significantly impairs performance. A recently proposed method to mitigate this issue is to pre-train a model on non-private data, e.g. from a simulator [Tang et al., 2023], and then fine-tune it under DP on real private data [Yu et al., 2021, Li et al., 2022, De et al., 2022]. ", "page_idx": 0}, {"type": "text", "text": "We go a step further and train a meta-learning model with a DP mechanism inside it (Figure 1). While supervised learning is about learning a mapping from inputs to outputs using a learning algorithm, in meta-learning we learn a learning algorithm directly from the data, by meta-training, enabling generalisation to new datasets during meta-testing. Our model is meta-trained on simulated datasets, each of which is split into a context and target set, learning to make predictions at the target inputs given the context set. At meta-test-time, the model takes a context set of real data, which is protected by the DP mechanism, and produces noise-aware predictions and accurate uncertainty estimates. ", "page_idx": 0}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/2598d681facc6edaa116a10a46d77f075dfb6e6b77020879dbdc32f1b8a3f178.jpg", "img_caption": ["Figure 1: Meta-training (left) and meta-testing (right) using our method. We train a model on multiple tasks with non-private (simulated or proxy) data to predict on target $(t)$ points using the context $(c)$ points. Crucially, by including a DP mechanism, which clips and adds noise to the data during training, the parameter updates (dashed arrow) teach the model to make well-calibrated and accurate predictions in the presence of DP noise. At test time, we deploy the model on real data using the same mechanism, which protects the context set with DP guarantees. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Neural Processes. Our method is based on neural processes [NPs; Garnelo et al., 2018a], a model which leverages the flexibility of neural networks to produce well-calibrated predictions in the metalearning setting. The parameters of the NP are meta-trained to generalise to unseen datasets, while adapting to new contexts much faster than gradient-based fine-tuning alternatives [Finn et al., 2017]. ", "page_idx": 1}, {"type": "text", "text": "Convolutional NPs. We focus on convolutional conditional NPs [ConvCNPs; Gordon et al., 2020], a type of NP that has remarkably strong performance in challenging regression problems. That is because the ConvCNP is translation equivariant [TE; Cohen and Welling, 2016], so its outputs change predictably whenever the input data are translated. This is an extremely useful inductive bias when modelling, for example, stationary data. The ConvCNP architecture also makes it natural to embed an especially effective DP mechanism inside it using the functional mechanism [Hall et al., 2013] to protect the privacy of the context set (Figure 1). We call the resulting model the DPConvCNP. ", "page_idx": 1}, {"type": "text", "text": "Training with a DP mechanism. A crucial aspect of our approach is training the DPConvCNP on non-sensitive data with the DP mechanism in the training loop. The mechanism involves clipping and adding noise, so applying it only during testing would create a mismatch between training and testing. Training with the mechanism eliminates this mismatch, ensuring calibrated predictions (Figure 2). ", "page_idx": 1}, {"type": "text", "text": "Overview of contributions. In summary, our main contributions in this work are as follows. ", "page_idx": 1}, {"type": "text", "text": "1. We introduce the DPConvCNP, a meta-learning model which extends the ConvCNP using the functional DP mechanism [Hall et al., 2013]. The model is meta-trained with the mechanism in place, learning to make calibrated predictions from the context data under DP.   \n2. We improve upon the functional mechanism of Hall et al. [2013] by leveraging Gaussian DP theory [Dong et al., 2022], showing that context set privacy can be protected with smaller amounts of noise (at least $25\\%$ lower standard deviation in the settings considered in Figure 4). We incorporate these improvements into DPConvCNP, but note that they are also of interest in any use case of the functional mechanism.   \n3. We conduct a study on synthetic and sim-to-real tasks. Remarkably, even with relatively few context points (a few hundreds) and modest privacy budgets, the predictions of the DPConvCNP are surprisingly close to those of the non-DP optimal Bayes predictor. Further, we find that a single DPConvCNP can be trained to generalise across generative processes with different statistics and privacy budgets. We also evaluate the DPConvCNP by training it on synthetic data, and testing it on a real dataset in the small data regime. In all cases, the DPConvCNP produces well calibrated predictions, and is competitive with a carefully tuned DP Gaussian process baseline. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Training deep learning models on public proxy datasets and then fine-tuning with DP on private data is becoming increasingly common in computer vision and natural language processing applications ", "page_idx": 1}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/759d66e2d7cd4e258caabce07f1deca3004d4b4f523a288a7ec166d4f25f70df.jpg", "img_caption": [""], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "Figure 2: Training our proposed model with a DP mechanism inside it, enables the model to make accurate well-calibrated predictions, even for modest privacy budgets and dataset sizes. Here, the context data (black) are protected with different $(\\epsilon,\\delta)$ DP budgets as indicated. The model makes predictions (blue) that are remarkably close to the optimal (non-private) Bayes predictor. ", "page_idx": 2}, {"type": "text", "text": "[Yu et al., 2021, Li et al., 2022, De et al., 2022, Tobaben et al., 2023]. However, these approaches rely on the availability of very large non-sensitive datasets. Because these datasets would likely need to be scraped from the internet, it is unclear whether they are actually non-sensitive [Tram\u00e8r et al., 2024]. On the other hand, other approaches study meta-learning with DP during meta-training [Li et al., 2020, Zhou and Bassily, 2022], but do not enforce privacy guarantees at meta-test time. ", "page_idx": 2}, {"type": "text", "text": "Our approach flils a gap in the literature by enforcing privacy of the meta-test data with DP guarantees (see Figure 1), and using non-sensitive proxy data during meta-training. Unlike other approaches which rely on large fine tuning datasets, our method produces well-calibrated predictions even for relatively small datasets (a few hundred datapoints). In this respect, the work of Smith et al. [2018], who study Gaussian process (GP) regression under DP for the small data regime, is perhaps most similar to ours. However, Smith et al. [2018] enforce privacy constraints only with respect to the output variables and do not protect the input variables, whereas our approach protects both. ", "page_idx": 2}, {"type": "text", "text": "In terms of theory, there is fairly limited prior work on releasing functions with DP guarantees. Our method is based on the functional DP mechanism of Hall et al. [2013] which works by adding noise from a GP to a function to be released. This approach works especially well when the function lies in a reproducing kernel Hilbert space (RKHS), a property which we leverage in the DPConvCNP. We improve on the original functional mechanism by leveraging Gaussian DP theory of Dong et al. [2022]. In related work, Ald\u00e0 and Rubinstein [2017] develop the Bernstein DP mechanism, which adds noise to the coefficients of the Bernstein polynomial of the released function, and Mirshani et al. [2019] generalise the functional mechanism beyond RKHSs. Jiang et al. [2023] derive R\u00e9nyi differential privacy [RDP; Mironov, 2017] bounds for the mechanism of Hall et al. [2013]. ", "page_idx": 2}, {"type": "text", "text": "3 Background ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We start by laying the necessary background. In Section 3.1, we outline meta-learning and NPs, focusing on the ConvCNP. In Section 3.2 we introduce DP, and the functional mechanism of Hall et al. [2013]. We keep the discussion on DP lightweight, deferring technical details to Appendix A. ", "page_idx": 2}, {"type": "text", "text": "3.1 Meta-learning and Neural Processes ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Supervised learning. Let $\\mathcal{D}$ be the set of datasets consisting of $(x,y)$ -pairs with $x\\,\\in\\,\\mathcal{X}\\,\\subset\\,\\mathbb{R}^{d}$ and $y\\in\\mathcal{D}\\subset\\mathbb{R}$ . The goal of supervised learning is to use a dataset $D\\,\\in\\,{\\mathcal{D}}$ to learn appropriate parameters $\\theta$ for a conditional distribution $p(\\boldsymbol{y}|\\boldsymbol{x},\\boldsymbol{\\theta})$ , which maximise the predictive log-likelihood on unseen, randomly sampled test pairs $(x^{*},y^{*})$ , i.e. $\\bar{\\mathcal L}(\\theta,(x^{*},y^{*}))=\\log p(\\bar{y^{*}}|x^{*},\\theta)$ . Let us denote the entire algorithm that performs learning, followed by prediction, by $\\pi$ , that is $\\pi(x^{\\ast},D)=p(\\cdot|x^{\\ast},\\theta^{\\ast})$ , where $\\theta^{*}=\\arg\\operatorname*{max}_{\\theta}\\mathcal{L}(r,D)$ . Supervised learning is concerned with designing a hand-crafted $\\pi$ , e.g. picking an appropriate architecture and optimiser, which is trained on a single dataset $D$ . ", "page_idx": 2}, {"type": "text", "text": "Meta-learning. Meta-learning can be regarded as supervised learning of the function $\\pi$ itself. In this setting, $D$ is regarded as part of a single training example, which means that a meta-learning algorithm can handle different $D$ at test time. Concretely, in meta-learning, we have $\\pi_{\\theta,\\phi}(x^{*},D)=$ $p\\bar{(\\cdot|x^{*},\\theta,r_{\\phi}(D))}$ , where $r_{\\phi}$ is now a function that produces task-specific parameters, adapted for $D$ . The meta-training set now consists of a collection of datasets $(D_{m}^{\\bar{\\mathbf{\\alpha}}})_{m=1}^{M}$ , often referred to as tasks. Each task is partitioned into a context set $\\boldsymbol{D}^{(c)}=(\\mathbf{x}^{(c)},\\mathbf{y}^{(c)})$ and a target set $\\boldsymbol{D}^{(t)}=(\\mathbf{x}^{(t)},\\mathbf{y}^{(t)})$ . We refer to $\\mathbf{x}^{(c)}\\mathbf{\\dot{and}}\\,\\mathbf{y}^{(c)}$ as the context inputs and outputs and to $\\mathbf{x}^{(t)}$ and $\\mathbf{y}^{(t)}$ as the target inputs and outputs. To meta-train a meta-learning model, we optimise its predictive log-likelihood, averaged over tasks, i.e. $\\mathbb{E}_{D}[\\mathcal{L}(\\theta,\\phi,D)]=\\mathbb{E}_{D}[\\log\\pi_{\\theta,\\phi}(\\mathbf{x}^{(t)},D^{(c)})(\\mathbf{y}^{(t)})].$ Meta-learning algorithms are broadly categorised into two groups, based on the choice of $r_{\\phi}$ [Bronskill, 2020]. ", "page_idx": 2}, {"type": "text", "text": "Gradient based vs amortised meta-learning. On one hand, gradient-based methods, such as MAML [Finn et al., 2017] and its variants (e.g. [Nichol et al., 2018]) rely on gradient-based fine-tuning at test time. Concretely, these let $r_{\\phi}$ be a function that performs gradient-based optimisation. For such algorithms, we can enforce DP with respect to a meta-test time dataset by fine-tuning with a DP optimisation algorithm, such as DP-SGD [Abadi et al., 2016]. While generally effective, such approaches can require significant resources for fine-tuning at meta-test-time, as well as careful DP hyper-parameter tuning to work at all. On the other hand, there are amortised methods, such as neural processes [Garnelo et al., 2018a], prototypical networks [Snell et al., 2017], and matching networks [Vinyals et al., 2016], in which $r_{\\phi}$ is a learnable function, such as a neural network. This approach has the advantage that it requires far less compute and memory at meta-test-time. In this work, we focus on neural processes (NPs), and show how $r_{\\phi}$ can be augmented with a DP mechanism to make well calibrated predictions, while protecting the context data at meta test time. ", "page_idx": 3}, {"type": "text", "text": "Neural Processes. Neural processes (NPs) are a type of model which leverage the flexibility of neural networks to produce well calibrated predictions. A range of NP variants have been developed, including conditional NPs [CNPs; Garnelo et al., 2018a], latent-variable NPs [LNPs; Garnelo et al., 2018b], Gaussian NPs [GNPs; Markou et al., 2022], score-based NPs Dutordoir et al. [2023], and autoregressive NPs [Bruinsma et al., 2023]. In this work, we focus on CNPs because these are ideally suited for our purposes, but our framework can be extended to other variants. A CNP consists of an encoder $\\mathtt{e n c}_{\\phi}$ , and a decoder ${\\mathsf{d e c}}_{\\theta}$ . The encoder is a neural network which ingests a context set $D^{(c)}\\in\\mathcal{D}$ and outputs a representation $r$ in some representation space $\\mathcal{R}$ . Two concrete examples of such encoders are DeepSets [Zaheer et al., 2017] and SetConv layers [Gordon et al., 2020]. The decoder is another neural network, with parameters $\\theta$ , which takes the representation $r$ together with target inputs $\\mathbf{x}^{(t)}$ and produces predictions for the corresponding $\\mathbf{y}^{(t)}$ . In summary ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pi_{\\phi,\\theta}(\\mathbf{x}^{(t)},D^{(c)})=\\mathtt{d e c}_{\\theta}(\\mathbf{x}^{(t)},r),\\quad r=\\mathtt{e n c}_{\\phi}(D^{(c)}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "In CNPs, a standard choice, which we also use here, is to let $\\pi_{\\phi,\\theta}\\big(\\mathbf{x}^{(t)},D^{(c)}\\big)$ return a mean $\\mu_{\\phi,\\theta}(\\boldsymbol{x^{(t)}},D^{(c)})$ and a variance $\\sigma_{\\mathcal{A}.\\theta}^{2}(x_{.}^{(t)},D^{(c)})$ , to parameterise a predictive distribution that factorises across the target points $y^{(\\#)}|x^{(t)}\\sim\\mathcal{N}(\\hat{\\mu_{\\phi,\\theta}}(\\dot{x}^{(t)},D^{(c)}),\\sigma_{\\phi,\\theta}^{2}\\big(x^{(t)},D^{(c)}))$ . We note that our framework straightforwardly extends to more complicated $\\pi_{\\phi,\\theta}(\\mathbf{x}^{(t)},D^{(c)})$ . To train a CNP to make accurate predictions, we can optimise a log-likelihood objective Garnelo et al. [2018a] such as ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathcal{L}(\\theta,\\phi)=\\mathbb{E}_{D}\\left[\\log\\mathcal{N}\\left({\\mathbf{y}_{m}^{(t)}|\\mu_{\\phi,\\theta}(\\mathbf{x}_{m}^{(t)},D^{(c)})},\\sigma_{\\phi,\\theta}^{2}(\\mathbf{x}^{(t)},D^{(c)})\\right)\\right],\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where the expectation is taken over the distribution over tasks $D$ . This objective is optimised by presenting each task $D_{m}$ to the CNP, computing the gradient of the loss with back-propagation, and updating the parameters $(\\phi,\\theta)$ of the CNP with any first-order optimiser (see alg. 1). This process trains the CNP to make well-calibrated predictions for $D^{(t)}$ given $D^{(c)}$ . At test time, given a new $D^{(c)}$ , we can use $\\pi_{\\phi,\\theta}$ which can be queried at arbitrary target inputs, to obtain corresponding predictions (alg. 2). ", "page_idx": 3}, {"type": "text", "text": "Convolutional CNPs. Whenever we have useful inductive biases or other prior knowledge, we can leverage these by building them directly into the encoder and the decoder of the CNP. Stationarity is a powerful inductive bias that is often encountered in potentially sensitive applications such as time series or spatio-temporal regression. Whenever the generating process is stationary, the corresponding Bayesian predictive posterior is TE [Foong et al., 2020]. ConvCNPs leverage this inductive bias using TE architectures [Cohen and Welling, 2016, Huang et al., 2023]. ", "page_idx": 3}, {"type": "text", "text": "ConvCNP encoder. To achieve TE, the ConvCNP encoder produces an $r$ that is itself a TE function. ", "page_idx": 3}, {"type": "text", "text": "Algorithm 1 Meta-training a neural process. Input: Simulated datasets $(D_{m})_{m=1}^{M}$ , encoder $\\mathtt{e n c}_{\\phi}$ , decoder $\\mathtt{d e c}_{\\theta}$ , iterations $T$ , optimiser opt Output: Optimised parameters $\\phi,\\theta$ for $\\bar{i}\\in\\{1\\bar{.}\\bar{.}\\cdot T\\}$ do Choose $D$ from $(D_{m})_{m=1}^{M}$ randomly $\\begin{array}{r l}&{D^{(c)},D^{(t)}\\gets D}\\\\ &{\\mathbf{x}^{(t)},\\mathbf{y}^{(t)}\\gets D^{(t)}}\\\\ &{\\mu,\\sigma^{2}\\gets\\mathsf{d e c}_{\\theta}(\\mathbf{x}^{(t)},\\mathsf{e n c}_{\\phi}(D^{(c)}))}\\\\ &{\\mathcal{L}(\\theta,\\phi)\\gets\\log\\mathcal{N}(\\mathbf{y}^{(t)}|\\mu,\\sigma^{2})}\\\\ &{\\phi,\\theta\\gets\\mathsf{o p t}(\\phi,\\theta,\\nabla_{\\phi,\\theta}\\mathcal{L})}\\end{array}$ ", "page_idx": 3}, {"type": "text", "text": "end for Return $\\phi,\\theta$ ", "page_idx": 3}, {"type": "table", "img_path": "99rOAM7Jfm/tmp/9cc59eeb6a3404c5abdabd4c7405582429240ff118d437e0f7c80f89b2c0cf2e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 3: Left; Illustration of the ConvCNP encoder $\\mathtt{e n c}_{\\phi}$ . Black crosses show an example context set $D^{(c)}$ . The density channel $r^{(d)}$ is shown in purple and the signal channel $r^{(r)}$ is shown in red. The representation $r$ consists of concatenating $r^{\\dot{(}d)}$ and $r^{(s)}$ . Right; Illustration of the DPConvCNP encoder. Black crosses show an example context $D^{(c)}$ , clipped with a threshold $C$ (gray dashed). Here, a single point (rightmost) is clipped (gray cross shows value before clipping). The density and signal channels are computed and GP noise is added to obtain the DP representation (red $\\&$ purple). ", "page_idx": 4}, {"type": "text", "text": "Specifically, $\\mathtt{e n c}_{\\phi}$ maps the context $D^{(c)}=((x_{n}^{(c)},y_{n}^{(c)}))_{n=1}^{N}$ to the function $r:\\mathcal{X}\\to\\mathbb{R}^{2}$ ", "page_idx": 4}, {"type": "equation", "text": "$$\nr(x)=\\left[\\!\\!{\\big/}^{(d)}(x)\\!\\!\\right]=\\sum_{n=1}^{N}\\left[\\!\\!{\\big/}_{y_{n}^{(c)}}\\!\\!\\right]\\psi\\left({\\frac{x-x_{n}^{(c)}}{\\lambda}}\\!\\!\\right),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\psi$ is the Gaussian radial basis function (RBF) and $\\phi=\\{\\lambda\\}$ . We refer to the two channels of $r$ as the density $r^{(d)}$ and the signal $r^{(s)}$ channels, which can be viewed as a smoothed version of $D^{(c)}$ . The density channel carries information about the inputs of the context data, while the signal channel carries information about the outputs. This encoder is referred to as the SetConv. ", "page_idx": 4}, {"type": "text", "text": "ConvCNP decoder. Once $r$ has been computed, it is passed to the decoder which performs three steps. First, it discretises $r$ using a pre-specified resolution. Then, it applies a CNN to the discretised signal, and finally it uses an RBF smoother akin to Equation (3) to make predictions at arbitrary target locations. The aforementioned steps are all TE so, composing them with the TE encoder produces a TE prediction map [Bronstein et al., 2021]. The ConvCNP has universal approximator properties and produces state-of-the-art, well-calibrated predictions [Gordon et al., 2020]. ", "page_idx": 4}, {"type": "text", "text": "3.2 Differential Privacy ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Differential privacy [Dwork et al., 2006, Dwork and Roth, 2014] quantifies the maximal privacy loss to data subjects that can occur when the results of analysis are released. The loss is quantified by two numbers, $\\epsilon$ and $\\delta$ , which bound the change in the distribution of the output of an algorithm, when the data of a single data subject in the dataset change. ", "page_idx": 4}, {"type": "text", "text": "Definition 3.1. An algorithm $\\mathcal{M}$ is $(\\epsilon,\\delta)$ -DP if for neighbouring $D,D^{\\prime}$ and all measurable sets $S$ ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}(\\mathcal{M}(D)\\in S)\\leq e^{\\epsilon}\\operatorname*{Pr}(\\mathcal{M}(D^{\\prime})\\in S)+\\delta.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We consider $D\\in\\mathbb{R}^{N\\times d}$ with $N$ users and $d$ dimensions, and use the substitution neighbourhood relation $\\sim_{S}$ where $D\\sim_{S}D^{\\prime}$ if $D$ and $D^{\\prime}$ differ by at most one row. ", "page_idx": 4}, {"type": "text", "text": "Gaussian DP. In Section 3.3 we discuss the functional mechanism of Hall et al. [2013], which we use in the ConvCNP. However, the original privacy guarantees derived by Hall et al. [2013] are suboptimal. We improve upon these using the framework of Gaussian DP [GDP; Dong et al., 2022]. Dong et al. [2022] define GDP from a hypothesis testing perspective, which is not necessary for our purposes. Instead, we present GDP through the following conversion formula between GDP and DP. ", "page_idx": 4}, {"type": "text", "text": "Definition 3.2. A mechanism $\\mathcal{M}$ is $\\mu$ -GDP if and only if it is $(\\epsilon,\\delta(\\epsilon))$ -DP for all $\\epsilon\\geq0$ , where ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\delta(\\epsilon)=\\Phi\\left(-\\frac{\\epsilon}{\\mu}+\\frac{\\mu}{2}\\right)-e^{\\epsilon}\\Phi\\left(-\\frac{\\epsilon}{\\mu}-\\frac{\\mu}{2}\\right)\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "and $\\Phi$ is the CDF of the standard Gaussian distribution. ", "page_idx": 4}, {"type": "text", "text": "Properties of (G)DP. Differential privacy has several useful properties. First, post-processing immunity guarantees that post-processing the result of a DP algorithm does not cause privacy loss: ", "page_idx": 4}, {"type": "text", "text": "Theorem 3.3 (Dwork and Roth 2014). Let $\\mathcal{M}$ be an $(\\epsilon,\\delta)$ -DP (or $\\mu$ -GDP) algorithm and let $f$ be any, possibly randomised, function. Then $f\\circ\\mathcal{M}$ is $(\\epsilon,\\delta)$ -DP (or $\\mu$ -GDP). ", "page_idx": 4}, {"type": "text", "text": "Composition of DP mechanisms refers to running multiple mechanisms on the same data. When each mechanism can depend on the outputs of the previous mechanisms, the composition is called adaptive. GDP is particularly appealing because it has a simple and tight composition formula: ", "page_idx": 5}, {"type": "text", "text": "Theorem 3.4 (Dong et al. 2022). The adaptive composition of $T$ mechanisms that are $\\mu_{i}$ -GDP $(i=1,\\ldots,T)$ , is $\\mu$ -GDP with $\\mu=\\sqrt{\\mu_{1}^{2}+\\cdot\\cdot\\cdot+\\mu_{T}^{2}}$ . ", "page_idx": 5}, {"type": "text", "text": "Gaussian mechanism. One of the central mechanisms to guarantee DP, is the Gaussian mechanism. This releases the output of a function $f$ with added Gaussian noise ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{M}(D)=f(D)+\\mathcal{N}(0,\\sigma^{2}I),\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where the variance $\\sigma^{2}$ depends on the $l_{2}$ -sensitivity of $f$ , defined as ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\Delta=\\operatorname*{sup}_{D\\sim D^{\\prime}}||f(D)-f(D^{\\prime})||_{2}.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Theorem 3.5 (Dong et al. 2022). The Gaussian mechanism with variance $\\sigma^{2}=\\Delta^{2}/\\mu^{2}$ is $\\mu$ -GDP. ", "page_idx": 5}, {"type": "text", "text": "3.3 The Functional Mechanism ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Now we turn to the functional mechanism of Hall et al. [2013]. Given a dataset $D\\in\\mathbb{R}^{N\\times d}$ , the functional mechanism releases a function $f_{D}\\colon T\\to\\mathbb{R}$ , where $T\\subset\\mathbb{R}^{d}$ , with added noise from a Gaussian process. For simplicity, here we only define the functional mechanism for functions in a reproducible kernel Hilbert space (RKHS), and defer the more general definition to Appendix A.2. ", "page_idx": 5}, {"type": "text", "text": "Definition 3.6. Let $g$ be a sample path of a Gaussian process having mean zero and covariance function $k$ , and let $\\mathcal{H}$ be an RKHS with kernel $k$ . Let $\\{\\bar{f}_{D}:D\\in\\mathcal{D}\\}\\subset\\mathcal{H}$ be $a$ family of functions indexed by datasets, satisfying ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\Delta_{\\mathcal{H}}f\\stackrel{\\mathrm{def}}{=}\\operatorname*{sup}_{D\\sim D^{\\prime}}||f_{D}-f_{D^{\\prime}}||_{\\mathcal{H}}\\leq\\Delta.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "The functional mechanism with multiplier c and sensitivity $\\Delta$ is defined as ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{M}(D)=f_{D}+c g.\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Theorem 3.7 (Hall et al.). If $\\epsilon\\leq1$ , the mechanism in Def. 3.6 with $\\begin{array}{r}{c=\\frac{\\Delta}{\\epsilon}\\sqrt{2\\ln(2/\\delta)}}\\end{array}$ is $(\\epsilon,\\delta)$ -DP. ", "page_idx": 5}, {"type": "text", "text": "4 Differential privacy for the ConvCNP ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Now we turn to our main contributions. First, we tighten the functional mechanism privacy analysis in Section 4.1 and then we build the functional mechanism into the ConvCNP in Section 4.2. ", "page_idx": 5}, {"type": "text", "text": "4.1 Improving the Functional Mechanism ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "The privacy bounds given by Theorem 3.7 are suboptimal, and do not allow us to use the tight composition formula from Theorem 3.4. However, the proof of Theorem 3.7 builds on the classical Gaussian mechanism privacy bounds, which we can replace with the GDP theory from Section 3.2. As demonstrated in Figure 4, our bound offers significantly smaller $\\epsilon$ for the same noise standard deviation, compared to the existing bounds of Hall et al. [2013] and Jiang et al. [2023]. ", "page_idx": 5}, {"type": "text", "text": "Theorem 4.1. The functional mechanism with sensitivity $\\Delta$ and multiplier $c=\\Delta/\\mu$ is $\\mu$ -GDP. ", "page_idx": 5}, {"type": "text", "text": "Proof. The proof of Theorem 3.7 from Hall et al. [2013] shows that any $(\\epsilon,\\delta)$ -DP bound for the Gaussian mechanism carries over to the functional mechanism. Replacing the classical Gaussian mechanism bound with the GDP bound proves the claim. For details, see Appendix A. \u53e3 ", "page_idx": 5}, {"type": "text", "text": "Algorithm 3 DPSetConv; modifications to the original SetConv layer shown in blue. ", "page_idx": 6}, {"type": "text", "text": "Input: Grid $\\textbf{x}\\subseteq\\mathbb{R}^{D}$ , $D^{(c)}$ , $(\\epsilon,\\delta)$ , RBF covariance $k$ with scale $\\lambda$ , threshold $C$ , DP accounting method noise_scales. ", "page_idx": 6}, {"type": "text", "text": "Output: DP representation of $r^{(d)},r^{(s)}$ . $\\tilde{y}_{n}^{(c)}\\gets\\mathsf{c l i p}(y_{n}^{(c)},C)$ for ${n=1,...,N}$ $g_{d},g_{s}\\sim\\mathcal{G P}(0,k)$   \ngd, $\\mathbf{g}_{s}\\gets g_{d}(\\mathbf{x}),g_{s}(\\mathbf{x})$   \n\u03c3d, \u03c3s \u2190noise_scales $(\\epsilon,\\delta,C)$   \n$\\begin{array}{r}{\\mathbf{r}^{(d)}\\leftarrow\\sum_{n=1}^{N}\\psi\\big((\\mathbf{x}-x_{n}^{(c)})\\big/\\lambda\\big)\\ +\\ \\sigma_{d}\\mathbf{g}_{d}}\\end{array}$ $\\begin{array}{r}{\\mathbf{r}^{(s)}\\xleftarrow{}\\sum_{n=1}^{N}\\tilde{y}_{n}^{(c)}\\psi\\big((\\mathbf{x}-x_{n}^{(c)})\\big/\\lambda\\big)\\ +\\ \\sigma_{s}\\mathbf{g}_{s}}\\end{array}$ Return: Density and signal $\\mathbf{r}^{(d)},\\mathbf{r}^{(s)}$ . ", "page_idx": 6}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/50ba2120f851aacfc3a301b383065475bca35e527b46cd54b073a884d7d452d3.jpg", "img_caption": [], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "Figure 4: Noise magnitude comparison for the classical functional mechanism of Hall et al. [2013], the RDP-based mechanism of Jiang et al. [2023] and our improved GDP-based mechanism. The line for Hall et al. cuts off at $\\epsilon=1$ since their bound has only been proven for $\\epsilon\\leq1$ . We set $\\Delta^{2}=10$ and $\\delta=10^{-3}$ , which are representative values from our experiments. See Appendix A.6 for more details. ", "page_idx": 6}, {"type": "text", "text": "4.2 Differentially Private Convolutional CNP ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Differentially Private SetConv. Now we turn to building the functional DP mechanism into the ConvCNP. We want to modify the SetConv encoder (Eq. 3) to make it DP. As a reminder, the SetConv outputs the density $r^{(d)}$ and signal $r^{(s)}$ channels ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\left[r^{(d)}(x)\\right]=\\sum_{n=1}^{N}\\left[y_{n}^{(c)}\\right]\\psi\\left(\\frac{x-x_{n}^{(c)}}{\\lambda}\\right),\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "which are the two quantities we want to release under DP. To achieve this, we must first determine the sensitivity of $r^{(\\bar{d})}$ and $r^{(s)}$ , as defined in Eq. 8. Recall that we use the substitution neighbourhood relation \u223cS, defined as D(1c) $D_{1}^{(c)}\\sim_{S}D_{2}^{(c)}$ if ${D}_{1}^{(c)}$ and ${D}_{2}^{(c)}$ differ in at most one row, i.e. by a single context point. Since the RBF $\\psi$ is bounded above by $1$ , it can be shown (see Appendix A.4) that the squared $l_{2}$ -sensitivity of $r^{(d)}$ is bounded above by 2, and this bound is tight. Unfortunately however, since the signal channel $r^{(s)}$ depends linearly on each $y_{n}^{(c)}$ (see Eq. 10), its sensitivity is unbounded. To address this, we clip each $y_{n}^{(\\frac{1}{c})}$ by a threshold $C$ , which is a standard way to ensure the sensitivity is bounded. With this modification we obtain the following tight sensitivities for $r^{(d)}$ and $r^{(s)}$ : ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\Delta_{\\mathcal{H}}^{2}r^{(d)}=2,\\quad\\Delta_{\\mathcal{H}}^{2}r^{(s)}=4C^{2}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "With these in place, we can state our privacy guarantee which forms the basis of the DPConvCNP. Postprocessing immunity (Theorem 3.3) ensures that post-processing $r^{(s)}$ and $r^{(d)}$ with the ConvCNP decoder does not result in further privacy loss. ", "page_idx": 6}, {"type": "text", "text": "Theorem 4.2. Let $g_{d}$ and $g_{s}$ be sample paths of two independent Gaussian processes having zero mean and covariance function $k$ , such that $0\\,\\le\\,k\\,\\le\\,C_{k}$ for some $C_{k}\\,>\\,0$ . Let $\\Delta_{d}^{2}\\,=\\,2C_{k}$ and $\\Delta_{s}^{2}=4C^{2}C_{k}$ . Then releasing $r^{(d)}+\\sigma_{d}g_{d}$ and $r^{(s)}+\\sigma_{s}g_{s}$ is $\\mu$ -GDP with $\\mu=\\sqrt{\\Delta_{s}^{2}/\\sigma_{s}^{2}+\\Delta_{d}^{2}/\\sigma_{d}^{2}}$ . ", "page_idx": 6}, {"type": "text", "text": "Proof. The result follows by starting from the GDP bound of the mechanism in Theorem 4.1 and using Theorem 3.4 to combine the privacy costs for the releases of $r^{(d)}$ and $r^{(s)}$ . \u53e3 ", "page_idx": 6}, {"type": "text", "text": "Corollary 4.3. Algorithm 2 with the DPSetConv encoder from Algorithm $^3$ is $(\\epsilon,\\delta)$ -DP with respect to the real context set $D^{(c)}$ . ", "page_idx": 6}, {"type": "text", "text": "Proof. The noise_scales method in Algorithm 3 computes the appropriate $\\sigma_{d}$ and $\\sigma_{s}$ values from Theorem 4.2 and Definition 3.2 such that releasing the functional encodings $r^{(d)}+\\sigma_{d}g_{d}$ and $r^{(s)}+\\sigma_{s}g_{s}$ is $(\\epsilon,\\delta)$ -DP. The $(\\epsilon,\\delta)$ -DP guarantee extends [Hall et al., 2013, Proposition 5] to the point evaluations $\\mathbf{r}^{(d)}$ and $\\mathbf{r}^{(s)}$ over the grid $\\mathbf{x}$ in Algorithm 3. Post-processing immunity (Theorem 3.3) extends $(\\epsilon,\\delta)$ -DP to Algorithm 2. \u53e3 ", "page_idx": 6}, {"type": "text", "text": "4.3 Training the DPConvCNP ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Training loss and algorithm. We meta-train the DPConvCNP parameters $\\theta,\\phi$ using the CNP log-likelihood (eq. 2) within Algorithm 1, and meta-test it using alg. 2. Importantly, the encoder $\\mathtt{e n c}_{\\phi}$ now includes clipping and adding noise (alg. 3) in its forward pass. Meta-training with the functional in place is crucial, because it teaches the decoder to handle the DP noise and clipping. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Privacy hyperparameters. By Definition 3.2 and Theorem 4.2, each $(\\epsilon,\\delta)$ -budget implies a $\\mu$ - budget, placing a constraint on the sensitivities and noise magnitudes, namely $\\mu^{2}=\\bar{\\Delta_{s}^{2}}/{\\sigma_{s}^{2}}+\\bar{\\Delta_{d}^{2}}/{\\bar{\\sigma_{d}^{2}}}$ . Since $\\psi$ is an RBF, $\\Delta_{d}^{2}=2$ and $\\Delta_{s}^{2}=4C^{2}$ , and we need to specify $C,\\sigma_{s}$ and $\\sigma_{d}$ , subject to this constraint. We introduce a variable $0<t<1$ and rewrite the constraint as ", "page_idx": 7}, {"type": "equation", "text": "$$\n\\sigma_{s}^{2}=\\frac{4C^{2}}{t\\mu^{2}}~~\\mathrm{and}~~\\sigma_{d}^{2}=\\frac{2}{(1-t)\\mu^{2}}\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "allowing us to freely set $t$ and $C$ . One straightforward approach is to fix $t$ and $C$ to hand-picked values, but this is sub-optimal since the optimal values depend on $\\mu,N$ , and the data statistics. Instead, we can make them adaptive, letting $t\\mathbin{\\bar{:}}\\mathbb{R}^{+}\\times\\mathbb{N}\\to(0,\\bar{1})$ and $C:\\mathbb{R}^{+}\\times\\mathbb{N}\\to\\mathbb{R}^{+}$ be learnable functions, e.g. neural networks $t(\\mu,N)={\\bf s i g}({\\bf N N}_{t}(\\mu,N))$ and $C(\\mu,N)=\\exp(\\mathrm{NN}_{C}(\\mu,N))$ where ${\\tt s i g}$ is the sigmoid. These networks are meta-trained along with all other parameters of the DPConvCNP. ", "page_idx": 7}, {"type": "text", "text": "5 Experiments & Discussion ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We conduct experiments on synthetic and a sim-to-real task with real data. We provide the exact experimental details in Appendix E. We make our implementation of the DPConvCNP public in the repository https://github.com/cambridge-mlg/dpconvcnp. ", "page_idx": 7}, {"type": "text", "text": "DP-SGD baseline. Since, we are interested in the small-data regime, i.e. a few hundred datapoints per task, we turn to Gaussian processes [GP; Rasmussen and Williams, 2006], the gold-standard model for well-calibrated predictions in this setting. To enforce DP, we make the GP variational [Titsias, 2009], and use DP-SGD [Abadi et al., 2016] to optimise its variational parameters and hyperparameters. This is a strong baseline because GPs excel in small data, and DP-SGD is a stateof-the-art DP fine-tuning algorithm. We found it critical to carefully tune the DP-SGD parameters and the GP initialisation using BayesOpt, and devoted substantial compute on this to ensure we have maximised GP performance. We refer to this baseline as the DP-SVGP. For details see Appendix D. ", "page_idx": 7}, {"type": "text", "text": "General setup. In both synthetic and sim-toreal experiments, we first tuned the DP as well as the GP initialisation parameters of the DPSVGP on synthetic data using BayesOpt. We then trained the DPConvCNP on synthetic data from the same generative process. Last, we tested both models on unseen test data. For the DP-SVGP, testing involves DP fine-tuning its variational parameters and its hyperparameters on each test set. For the DPConvCNP, testing involves a single forward pass through the network. We report results in Figures 6 and 7, and discuss them below. ", "page_idx": 7}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/415468e02b9ad73f1cf784a28ed11c36323b513eb574885ce204aefdab30c681.jpg", "img_caption": ["Figure 5: Deployment-time comparison on Gaussian (top) and non-Gaussian (bottom) data. We ran the DP-SVGP for different numbers of DP-SGD steps to determine a speed versus quality-of-fit tradeoff. Reporting $95\\%$ confidence intervals. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "5.1 Synthetic tasks ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Gaussian data. First, we generated data from a GP with an exponentiated quadratic (EQ) covariance (Figure 6; top), fixing its signal and noise scales, as well as its lengthscale $\\ell$ . For each $\\ell$ we sampled datasets with $N\\sim\\mathcal{U}[1,512]$ and privacy budgets with $\\epsilon\\sim\\mathcal{U}[0.9\\bar{0},4.00]$ and $\\delta=10^{-3}$ . We trained separate DP-SVGPs and DPConvCNPs for each $\\ell$ and tested them on unseen data from the same generative process (non-amortised; Figure 6). These models can handle different privacy budgets but only work well for the lengthscale they were trained on. In practice an appropriate lengthscale is not known a priori. To make this task more realistic, we also trained a single DPConvCNP on data with randomly sampled $\\ell\\sim\\mathcal{U}[0.25,2.00]$ (amortised; Figure 6). This model implicitly infers $\\ell$ and simultaneously makes predictions, under DP. We also show the performance of the non-DP Bayes posterior, which is optimal (oracle; Figure 6 top). See Appendix E.1 for more details. ", "page_idx": 7}, {"type": "text", "text": "DPConvCNP competes with DP-SVGP. Even in the Gaussian setting, where the DP-SVGP is given the covariance of the generative process, the DPConvCNP remains competitive (red and purple in Figure 6; top). While the DP-SVGP outperforms the DPConvCNP for some $N$ and $\\ell$ , the gaps are typically small. In contrast, the DP-SVGP often fails to provide sensible predictions (see $\\ell=0.25$ , $N\\geq300]$ ), and tends to overestimate the lengthscale, which is a known challenge in variational GPs [Bauer et al., 2016]. We also found that the DP-SVGP tends to underestimate the observation noise, resulting in over-smoothed and over-confident predictions which lead to a counter-intuitive reduction in performance as $N$ increases. By contrast, the DPConvCNP gracefully handles different $N$ and recovers predictions that are close to the non-DP Bayesian posterior for modest $\\epsilon$ and $N$ , with runtimes several orders of magnitude faster than the DP-SVGP (Figure 5). ", "page_idx": 7}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/502e320593fb112731d69189e793157206ec07bd043b08b661daf002e3b267e2.jpg", "img_caption": ["Figure 6: Negative log-likelihoods (NLL) of the DPConvCNP and the DP-SVGP baseline on synthetic data from a EQ GP (top two rows; EQ lengthscale $\\ell$ ) and non-Gaussian data from sawtooth waveforms (bottom two rows; waveform period $\\tau$ ). For each point shown we report the mean NLL with its $95\\%$ confidence intervals (error bars too small to see). See Appendix C.2 for example fits. ", ""], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Amortising over $\\ell$ and privacy budgets. We observe that the DPConvCNP trained on a range of lengthscales (green; Figure 6) accurately infers the lengthscale of the test data, with only a modest performance reduction compared to its non-amortised counterpart (red). The ability of the DPConvCNP to implicitly infer $\\ell$ while making calibrated predictions is remarkable, given the DP constraints under which it operates. Further, we observe that the DPConvCNP works well across a range of privacy budgets. In preliminary experiments, we found that the performance loss due to amortising over privacy budgets is small. This is particularly appealing because a single DPConvCNP can be trained on a range of budgets and deployed at test time using the privacy level specified by the practitioner, eliminating the need for separate models for different budgets. ", "page_idx": 8}, {"type": "text", "text": "Non-Gaussian synthetic tasks. We generated data from a non-Gaussian process with sawtooth signals, which has previously been identified as a challenging task Bruinsma et al. [2023]. We sampled the waveform direction and phase using a fixed period $\\tau$ and adding Gaussian observation noise with a fixed magnitude. We gave the DP-SVGP an advantage by using a periodic covariance function, and truncating the Fourier series of the waveform signal to make it continuous: otherwise, since the DP-SVGP cannot handle discontinuities in the sawtooth signal, it explains the data mostly as noise, failing catastropically. Again, we trained a separate DP-SVGP and DPConvCNP for each $\\tau$ , as well as a single DPConvCNP model on randomly sampled $\\tau^{-1}\\sim\\mathcal{U}[0.20,1.25]$ . We report results in Figure 6 (bottom), along with a non-DP oracle (blue). The Bayes posterior is intractable, so we report the average NLL of the observation noise, which is a lower bound to the NLL. ", "page_idx": 8}, {"type": "text", "text": "DPConvCNP outperforms the DP-SVGP. We find that, even though we gave the DP-SVGP significant advantages, the DPConvCNP still outperforms it, and produces near-optimal predictions even for modest $N$ and $\\epsilon$ . Overall, our findings in the non-Gaussian tasks mirror those of the Gaussian tasks. The DPConvCNP can amortise over different signal periods with very small performance drops (red, green in Figure 6; bottom). Given the difficulty of this task, the fact that the DPConvCNP can predict accurately for signals with different periods under DP constraints is especially impressive. ", "page_idx": 8}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/827aec3ef4a76a518fc7af69710590b61cb9de0e8f0e05183a15d8b4ccbff639.jpg", "img_caption": ["Figure 7: Left; Negative log-likelihoods of the DPConvCNP and the DP-SVGP baseline on the sim to real task with the !Kung dataset, predicting individuals\u2019 height from their age (left col.) or their weight from their age (right col.). For each point shown here, we partition each dataset into a context and target at random, make predictions, and repeat this procedure 512 times. We report mean NLL with its $95\\%$ confidence intervals. Error bars are to small to see here. Right; Example predictions for the DPConvCNP and the DP-SVGP, showing the mean and $95\\%$ confidence intervals, with $N=300,\\epsilon=1.00,\\delta=10^{-3}$ . The DPConvCNP is visibly better-calibrated than the DP-SVGP. "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "5.2 Sim-to-real tasks ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Sim-to-real task. We evaluated the performance of the DPConvCNP in a sim-to-real task, where we train the model on simulated data and test it on the the Dobe !Kung dataset [Howell, 2009], also used by Smith et al. [2018], containing age, weight and height measurements of 544 individuals. We generated data from GPs with a Mat\u00e9rn- $3/2$ covariance, with a fixed signal scale of $\\sigma_{v}=1.00$ , randomly sampled noise scale $\\sigma_{n}\\sim\\mathcal{U}[0.20,0.60]$ and lengthscale $\\ell\\sim\\mathcal{U}[0.50,2.00]$ . We chose Mat\u00e9rn- $\\scriptstyle{3/2}$ since its paths are rougher than those of the EQ, and picked hyperparameter ranges via a back-of-the envelope calculation, without tuning them for the task. We trained a single DP-SVGP and a DPConvCNP with $\\epsilon\\sim\\mathcal{U}[0.90,4.00]$ and $\\bar{\\delta^{\\,}}=10^{-3}$ . We consider two test tasks: predicting the height or the weight of an individual from their age. For each $N$ , we split the dataset into a context and target at random, repeating the procedure for multiple splits. ", "page_idx": 9}, {"type": "text", "text": "Sim-to-real comparison. While the two models perform similarly for large $N$ , the DPConvCNP performs much better for smaller $N$ (Figure 7; left). The DPConvCNP predictions are surprisingly good even for strong privacy guarantees, e.g. $\\epsilon=1.00$ , $\\delta=10^{-3}$ , and a modest dataset size (Figure 7; right), and significantly better-calibrated than those of the DP-SVGP, which under-ftis. Note we have not tried to tune the simulator or add prior knowledge, which could further improve performance. ", "page_idx": 9}, {"type": "text", "text": "6 Limitations & Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Limitations. The DPConvCNP does not model dependencies between target outputs, which is a major limitation. This could be achieved straightforwardly by extending our approach to LNPs, GNPs, or ARNPs. Another limitation is that the efficacy of any sim-to-real scheme is limited by the quality of the simulated data. If the real and the simulated data differ substantially, then sim-to-real transfer has little hope of working. This can be mitigated by simulating diverse datasets to ensure the real data are in the training distribution. However, as simulator diversity increases, predictions typically become less certain, so there is a sweet spot in simulator diversity. While we observed strong sim-to-real results, exploring the effect of this diversity is a valuable direction for future work. ", "page_idx": 9}, {"type": "text", "text": "Broader Impacts. This paper presents work whose goal is to advance the field of DP. Generally, we view the potential for broader impact of this work as generally positive. Ensuring individual user privacy is critical across a host of Machine Learning applications. We believe that methods such as ours, aimed at improving the performance of DP algorithms and improve their practicality, have the potential to have a positive impact on individual users of Machine Learning models. ", "page_idx": 9}, {"type": "text", "text": "Conclusion. We proposed an approach for DP meta-learning using NPs. We leveraged and improved upon the functional DP mechanism of Hall et al. [2013], and showed how it can be naturally built into the ConvCNP to protect the privacy of the meta-test set with DP guarantees. Our improved bounds for the functional DP mechanism are substantial, providing the same privacy guarantees with $\\mathrm{a\\approx30\\%}$ lower noise magnitude, and are likely of independent interest. We showed that the DPConvCNP is competitive and often outperforms a carefully tuned DP-SVGP baseline on both Gaussian and non-Gaussian synthetic tasks, while simultaneously being orders of magnitude faster at meta-test time. Lastly, we demonstrated how the DPConvCNP can be used as a sim-to-real model in a realistic evaluation scenario in the small data regime, where it outperforms the DP-SVGP baseline. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was supported in part by the Research Council of Finland (Flagship programme: Finnish Center for Artificial Intelligence, FCAI as well as Grants 356499 and 359111), the Strategic Research Council at the Research Council of Finland (Grant 358247) as well as the European Union (Project 101070617). Views and opinions expressed are however those of the author(s) only and do not necessarily reflect those of the European Union or the European Commission. Neither the European Union nor the granting authority can be held responsible for them. SM is supported by the Vice Chancellor\u2019s and Marie and George Vergottis Scholarship, and the Qualcomm Innovation Fellowship. Richard E. Turner is supported by Google, Amazon, ARM, Improbable, EPSRC grant EP/T005386/1, and the EPSRC Probabilistic AI Hub (ProbAI, EP/Y028783/1). ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "Martin Abadi, Andy Chu, Ian Goodfellow, H. Brendan McMahan, Ilya Mironov, Kunal Talwar, and Li Zhang. Deep learning with differential privacy. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016. ", "page_idx": 10}, {"type": "text", "text": "Takuya Akiba, Shotaro Sano, Toshihiko Yanase, Takeru Ohta, and Masanori Koyama. Optuna: A next-generation hyperparameter optimization framework. In The 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining, pages 2623\u20132631, 2019. ", "page_idx": 10}, {"type": "text", "text": "Francesco Ald\u00e0 and Benjamin Rubinstein. The Bernstein Mechanism: Function Release under Differential Privacy. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 31, 2017. ", "page_idx": 10}, {"type": "text", "text": "Matthias Bauer, Mark van der Wilk, and Carl Edward Rasmussen. Understanding probabilistic sparse Gaussian process approximations. In Advances in Neural Information Processing Systems, volume 29, 2016. ", "page_idx": 10}, {"type": "text", "text": "John Bronskill. Data and computation efficient meta-learning. PhD thesis, University of Cambridge, 2020. ", "page_idx": 10}, {"type": "text", "text": "Michael M. Bronstein, Joan Bruna, Taco Cohen, and Petar Velickovic. Geometric deep learning: Grids, groups, graphs, geodesics, and gauges. arXiv preprint arXiv:2104.13478, 2021. ", "page_idx": 10}, {"type": "text", "text": "Wessel Bruinsma, Stratis Markou, James Requeima, Andrew Y. K. Foong, Tom Andersson, Anna Vaughan, Anthony Buonomo, Scott Hosking, and Richard E Turner. Autoregressive conditional neural processes. In The Eleventh International Conference on Learning Representations, 2023. ", "page_idx": 10}, {"type": "text", "text": "Taco Cohen and Max Welling. Group equivariant convolutional networks. In Proceedings of The 33rd International Conference on Machine Learning, volume 48 of Proceedings of Machine Learning Research, pages 2990\u20132999. PMLR, 2016. ", "page_idx": 10}, {"type": "text", "text": "Soham De, Leonard Berrada, Jamie Hayes, Samuel L. Smith, and Borja Balle. Unlocking High-Accuracy Differentially Private Image Classification through Scale. arXiv preprint arXiv:2204.13650, 2022. ", "page_idx": 10}, {"type": "text", "text": "Jinshuo Dong, Aaron Roth, and Weijie J. Su. Gaussian Differential Privacy. Journal of the Royal Statistical Society Series B: Statistical Methodology, 84(1):3\u201337, 2022. ", "page_idx": 10}, {"type": "text", "text": "Vincent Dutordoir, Alan Saul, Zoubin Ghahramani, and Fergus Simpson. Neural diffusion processes. In International Conference on Machine Learning, pages 8990\u20139012. PMLR, 2023. ", "page_idx": 10}, {"type": "text", "text": "Cynthia Dwork and Aaron Roth. The Algorithmic Foundations of Differential Privacy. Foundations and Trends in Theoretical Computer Science, 9(3-4):211\u2013407, 2014. ", "page_idx": 10}, {"type": "text", "text": "Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam D. Smith. Calibrating Noise to Sensitivity in Private Data Analysis. In Third Theory of Cryptography Conference, volume 3876 of Lecture Notes in Computer Science, pages 265\u2013284. Springer, 2006. ", "page_idx": 10}, {"type": "text", "text": "Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-Agnostic Meta-Learning for Fast Adaptation of Deep Networks. In Proceedings of the 34th International Conference on Machine Learning. PMLR, 2017.   \nAndrew Foong, Wessel Bruinsma, Jonathan Gordon, Yann Dubois, James Requeima, and Richard Turner. Meta-learning stationary stochastic process prediction with convolutional neural processes. In Advances in Neural Information Processing Systems, volume 33, pages 8284\u20138295, 2020.   \nMarta Garnelo, Dan Rosenbaum, Christopher Maddison, Tiago Ramalho, David Saxton, Murray Shanahan, Yee Whye Teh, Danilo Rezende, and S. M. Ali Eslami. Conditional Neural Processes. In Proceedings of the 35th International Conference on Machine Learning, pages 1704\u20131713. PMLR, 2018a.   \nMarta Garnelo, Jonathan Schwarz, Dan Rosenbaum, Fabio Viola, Danilo J. Rezende, S. M. Ali Eslami, and Yee Whye Teh. Neural Processes. arXiv preprint arXiv:1807.01622, 2018b.   \nJonathan Gordon, Wessel P. Bruinsma, Andrew Y. K. Foong, James Requeima, Yann Dubois, and Richard E. Turner. Convolutional Conditional Neural Processes. In International Conference on Learning Representations, 2020.   \nRob Hall, Alessandro Rinaldo, and Larry A. Wasserman. Differential privacy for functions and functional data. Journal of Machine Learning Research, 14(1):703\u2013727, 2013.   \nNancy Howell. Dobe !kung census of all population., 2009. URL https://tspace.library. utoronto.ca/handle/1807/17973. License: All right reserved.   \nDaolang Huang, Manuel Haussmann, Ulpu Remes, S. T. John, Gr\u00e9goire Clart\u00e9, Kevin Luck, Samuel Kaski, and Luigi Acerbi. Practical Equivariances via Relational Conditional Neural Processes. In Advances in Neural Information Processing Systems, volume 36, 2023.   \nDihong Jiang, Sun Sun, and Yaoliang Yu. Functional R\u00e9nyi Differential Privacy for Generative Modeling. In Thirty-Seventh Conference on Neural Information Processing Systems, 2023.   \nJeffrey Li, Mikhail Khodak, Sebastian Caldas, and Ameet Talwalkar. Differentially Private MetaLearning. In International Conference on Learning Representations, 2020.   \nXuechen Li, Florian Tram\u00e8r, Percy Liang, and Tatsunori Hashimoto. Large language models can be strong differentially private learners. In The Tenth International Conference on Learning Representations, ICLR, 2022.   \nStratis Markou, James Requeima, Wessel P. Bruinsma, Anna Vaughan, and Richard E. Turner. Practical conditional neural processes via tractable dependent predictions. In Proceedings of the 10th International Conference on Learning Representations, 2022.   \nIlya Mironov. R\u00e9nyi Differential Privacy. In 30th IEEE Computer Security Foundations Symposium, pages 263\u2013275, 2017.   \nArdalan Mirshani, Matthew Reimherr, and Aleksandra Slavkovic\u00b4. Formal Privacy for Functional Data with Gaussian Perturbations. In Proceedings of the 36th International Conference on Machine Learning, pages 4595\u20134604. PMLR, May 2019.   \nAlex Nichol, Joshua Achiam, and John Schulman. On first-order meta-learning algorithms. arXiv preprint arXiv:1803.02999, 2018.   \nCarl Edward Rasmussen and Christopher KI Williams. Gaussian Processes for Machine Learning. MIT Press, 2006.   \nMichael T. Smith, Mauricio A. \u00c1lvarez, Max Zwiessele, and Neil D. Lawrence. Differentially Private Regression with Gaussian Processes. In Proceedings of the Twenty-First International Conference on Artificial Intelligence and Statistics, pages 1195\u20131203. PMLR, 2018.   \nJake Snell, Kevin Swersky, and Richard Zemel. Prototypical Networks for Few-shot Learning. In Advances in Neural Information Processing Systems, volume 30, 2017.   \nXinyu Tang, Ashwinee Panda, Vikash Sehwag, and Prateek Mittal. Differentially Private Image Classification by Learning Priors from Random Processes. In Thirty-Seventh Conference on Neural Information Processing Systems, 2023.   \nMichalis Titsias. Variational learning of inducing variables in sparse Gaussian processes. In Artificial intelligence and statistics, pages 567\u2013574. PMLR, 2009.   \nMarlon Tobaben, Aliaksandra Shysheya, John Bronskill, Andrew Paverd, Shruti Tople, Santiago Zanella B\u00e9guelin, Richard E. Turner, and Antti Honkela. On the efficacy of differentially private few-shot image classification. Transactions on Machine Learning Research, 2023.   \nFlorian Tram\u00e8r, Gautam Kamath, and Nicholas Carlini. Position: Considerations for Differentially Private Learning with Large-Scale Public Pretraining. In Proceedings of the 41st International Conference on Machine Learning, pages 48453\u201348467. PMLR, 2024.   \nOriol Vinyals, Charles Blundell, Timothy Lillicrap, Daan Wierstra, et al. Matching networks for one shot learning. Advances in neural information processing systems, 29, 2016.   \nAshkan Yousefpour, Igor Shilov, Alexandre Sablayrolles, Davide Testuggine, Karthik Prasad, Mani Malek, John Nguyen, Sayan Ghosh, Akash Bharadwaj, Jessica Zhao, Graham Cormode, and Ilya Mironov. Opacus: User-friendly differential privacy library in PyTorch. arXiv preprint arXiv:2109.12298, 2021.   \nDa Yu, Saurabh Naik, Arturs Backurs, Sivakanth Gopi, Huseyin A. Inan, Gautam Kamath, Janardhan Kulkarni, Yin Tat Lee, Andre Manoel, Lukas Wutschitz, Sergey Yekhanin, and Huishuai Zhang. Differentially Private Fine-tuning of Language Models. In International Conference on Learning Representations, 2021.   \nManzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Russ R Salakhutdinov, and Alexander J Smola. Deep sets. In Advances in Neural Information Processing Systems, volume 30, 2017.   \nXinyu Zhou and Raef Bassily. Task-level Differentially Private Meta Learning. In Advances in Neural Information Processing Systems, volume 35, 2022. ", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "A Differential Privacy Details ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "A.1 Measure-Theoretic Details ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Definition 3.1 is the typical definition of $(\\epsilon,\\delta)$ -DP that is given in the literature, but it glosses over some measure-theoretic details that are usually not important, but are important for the functional mechanism. In particular, the precise meaning of \u201cmeasurable\u201d is left open. Here, we make the $\\sigma$ -field that \u201cmeasurable\u201d implicitly refers to explicit: ", "page_idx": 13}, {"type": "text", "text": "Definition A.1. An algorithm $\\mathcal{M}$ is $(\\epsilon,\\delta,A)$ -DP for a $\\sigma$ -field $\\boldsymbol{\\mathcal{A}}$ if, for neighbouring datasets $D,D^{\\prime}$ and all $A\\in{\\mathcal{A}}$ , ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\operatorname*{Pr}(\\mathcal{M}(D)\\in A)\\leq e^{\\epsilon}\\operatorname*{Pr}(\\mathcal{M}(D^{\\prime})\\in A)+\\delta.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "Hall et al. [2013] point out that the choice of $\\boldsymbol{\\mathcal{A}}$ is important, and insist that $\\boldsymbol{\\mathcal{A}}$ be the finest $\\sigma$ -field on which $\\mathcal{M}(D)$ is defined for all $D$ . When the output of the mechanism is discrete, or an element of $\\mathbb{R}^{n}$ , this corresponds with the $\\sigma$ -field that is typically implicitly used in such settings. When the output is a function, as in the functional mechanism, the choice of $\\boldsymbol{\\mathcal{A}}$ is not as clear [Hall et al., 2013]. Note that $\\boldsymbol{\\mathcal{A}}$ is similarly implicitly present in the definition of GDP (Definition 3.2). ", "page_idx": 13}, {"type": "text", "text": "Next, we recall the construction of the appropriate $\\sigma$ -field for the functional mechanism from Hall et al. [2013]. Let $T$ be an index set. We denote the set of functions from $T$ to $\\mathbb{R}$ as $\\mathbb{R}^{T}$ . For $S=(x_{1},\\ldots,x_{n})\\in T^{n}$ and a Borel set $B\\in B(\\mathbb{R}^{n})$ , ", "page_idx": 13}, {"type": "equation", "text": "$$\nC_{S,B}=\\{f\\in\\mathbb{R}^{T}\\mid(f(x_{1}),\\ldots,f(x_{n}))\\in B\\}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "is called a cylinder set of functions. Let ${\\mathcal{C}}_{S}=\\{C_{S,B}\\mid B\\in B({\\mathbb{R}}^{n})\\}$ and ", "page_idx": 13}, {"type": "equation", "text": "$$\nF_{0}=\\bigcup_{S:|S|<\\infty}{\\mathcal{C}}_{S}.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "${\\mathcal{F}}_{0}$ is called the field of cylinder sets. $(\\epsilon,\\delta,\\mathcal{F}_{0}){\\bf-}\\mathrm{DP}^{\\,2}$ amounts to $(\\epsilon,\\delta,\\mathcal{B}(\\mathbb{R}^{n}))$ -DP for any evaluation of $f$ at a finite vector of points $(x_{1},\\ldots,x_{n})\\in T^{n}$ , of any size $n\\in\\mathbb{N}$ [Hall et al., 2013]. ", "page_idx": 13}, {"type": "text", "text": "The $\\sigma$ -field for the functional mechanism is the $\\sigma$ -field $\\mathcal{F}$ generated by ${\\mathcal{F}}_{0}$ [Hall et al., 2013]. It turns out that $(\\epsilon,\\delta,{\\mathcal{F}}_{0})$ -DP is sufficient for $(\\epsilon,\\delta,{\\mathcal{F}})$ -DP. ", "page_idx": 13}, {"type": "text", "text": "A.2 General Definition of the Functional Mechanism ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Definition A.2. Let g be a sample path of a Gaussian process having mean zero and covariance function $k$ . Let $\\{f_{D}:D\\in\\mathcal{D}\\}\\subset\\bar{\\mathbb{R}}^{T}$ be a family of functions indexed by datasets satisfying the inequality ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\operatorname*{sup}_{D\\sim D^{\\prime}}\\operatorname*{sup}_{n<\\infty}\\operatorname*{sup}_{(x_{1},\\ldots,x_{n})\\in T^{n}}\\bigg|\\Big|\\Delta_{D,D^{\\prime}}^{(x_{1},\\ldots,x_{n})}\\Big|\\bigg|_{2}\\le\\Delta,\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "with ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\Delta_{D,D^{\\prime}}^{(x_{1},\\dots,x_{n})}=M^{-1/2}(x_{1},\\dots,x_{n})\\left[{\\begin{array}{c}{f_{D}(x_{1})-f_{D^{\\prime}}(x_{1})}\\\\ {\\vdots}\\\\ {f_{D}(x_{n})-f_{D^{\\prime}}(x_{n})}\\end{array}}\\right],\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where $M(x_{1},\\dots x_{n})_{i j}=k(x_{i},x_{j})$ . The functional mechanism with multiplier c and sensitivity $\\Delta$ is defined as ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\mathcal{M}(D)=f_{D}+c g.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "If $f$ is a member of a reproducible kernel Hilbert space (RKHS) $\\mathcal{H}$ with the same kernel $k$ as the noise process $g$ , the sensitivity bound of Definition A.2 is much simpler: ", "page_idx": 13}, {"type": "text", "text": "Lemma A.3 (Hall et al. 2013). For a function $f$ in an RKHS $\\mathcal{H}$ with kernel $k$ , ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\Delta_{\\mathcal{H}}f\\stackrel{\\mathrm{def}}{=}\\operatorname*{sup}_{D\\sim D^{\\prime}}||f_{D}-f_{D^{\\prime}}||_{\\mathcal{H}}\\leq\\Delta.\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "implies (16). ", "page_idx": 13}, {"type": "text", "text": "2This is a small abuse of notation, as ${\\mathcal{F}}_{0}$ is not a $\\sigma$ -field. ", "page_idx": 13}, {"type": "text", "text": "A.3 Proof of Theorem 4.1 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "To prove Theorem 4.1, we need a GDP version of a lemma from Hall et al. [2013]: ", "page_idx": 14}, {"type": "text", "text": "Lemma A.4. Suppose that, for a positive definite symmetric matrix $M\\,\\,\\in\\,\\,\\mathbb{R}^{d\\times d},$ , the function $f\\colon D\\to\\mathbb{R}^{d}$ satisfies ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\operatorname*{sup}_{D\\sim D^{\\prime}}||M^{-1/2}(f(D)-f(D^{\\prime}))||_{2}\\leq\\Delta.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Then the mechanism $\\mathcal{M}$ that outputs (Gaussian mechanism) ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\mathcal{M}(D)=f(D)+c Z,\\quad Z\\sim\\mathcal{N}_{d}(0,M)\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "is $\\mu$ -GDP with $\\begin{array}{r}{c=\\frac{\\Delta}{\\mu}}\\end{array}$ . ", "page_idx": 14}, {"type": "text", "text": "Proof. We can write ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\mathcal{M}(D)=M^{1/2}c\\left(\\frac{M^{-1/2}}{c}f(D)+S\\right),\\quad S\\sim\\mathcal{N}_{d}(0,I).\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Denote $\\begin{array}{r}{\\mathcal{M}^{\\prime}(D)=\\frac{M^{-1/2}}{c}f(D)+S.\\;\\mathcal{N}}\\end{array}$ $\\mathcal{M}^{\\prime}$ is a Gaussian mechanism with variance 1. Because of (19), M \u2212c1/2f(D) has sensitivity ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\Delta^{*}=\\operatorname*{sup}_{D\\sim D^{\\prime}}\\left\\vert\\left\\vert\\frac{M^{-1/2}}{c}f(D)-\\frac{M^{-1/2}}{c}f(D^{\\prime})\\right\\vert\\right\\vert_{2}\\leq\\frac{\\Delta}{c}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "so $\\mathcal{M}^{\\prime}$ is $\\mu$ -GDP by Theorem 3.5. $\\mathcal{M}$ is obtained by post-processing $\\mathcal{M}^{\\prime}$ , so it is also $\\mu$ -GDP. ", "page_idx": 14}, {"type": "text", "text": "Theorem 4.1. The functional mechanism with sensitivity $\\Delta$ and multiplier $c=\\Delta/\\mu$ is $\\mu$ -GDP. ", "page_idx": 14}, {"type": "text", "text": "Proof. Let $T$ be the index set of the Gaussian process $G$ , and let $S~=~(x_{1},\\ldots,x_{n})~\\in~T^{n}$ . Then $(G(x_{1}),\\ldots,G(x_{n}))$ has a multivariate Gaussian distribution with mean zero and covariance $\\operatorname{Cov}(G(x_{i}),G(x_{j}))=K(x_{i},x_{j})$ . Then the vector obtained by evaluating $\\mathcal{M}(D)$ at $(x_{1},\\ldots,x_{n})$ is $\\mu$ -GDP by Lemma A.4, as (16) implies the sensitivity bound (19). Theorem 3.5 gives a curve of $(\\epsilon,\\delta(\\epsilon))$ -bounds for all $\\epsilon\\geq0$ from $\\mu$ . ", "page_idx": 14}, {"type": "text", "text": "This holds for any $S~\\in~T^{n}$ and any $\\textit{n}\\in\\mathbb{N}$ , so $\\mathcal{M}$ is $(\\epsilon,\\delta(\\epsilon),\\mathcal{F}_{0})$ -DP for all $\\epsilon\\_0$ , which immediately implies $(\\epsilon,\\delta(\\epsilon),{\\mathcal{F}})$ -DP. This curve can be converted back to $\\mu$ -GDP (with regards to $\\mathcal{F}$ ) using Theorem 3.5. \u53e3 ", "page_idx": 14}, {"type": "text", "text": "A.4 Functional Mechanism Sensitivities for DPConvCNP ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "To bound the sensitivity of $r^{(d)}$ and $r^{(s)}$ for the functional mechanism, we look at two neighbouring context sets $D_{1}^{(c)}=((x_{n,1}^{(c)},y_{n,1}^{(c)}))_{n=1}^{N}$ and $D_{2}^{(c)}=((x_{n,2}^{(c)},y_{n,2}^{(c)}))_{n=1}^{N}$ that differ only in the points $(x_{1},y_{1})\\in D_{1}^{(c)}$ and $(x_{2},y_{2})\\in D_{2}^{(c)}$ . Let $r_{D_{i}^{(c)}}^{(d)}$ for $i\\in\\{1,2\\}$ denote $r^{(d)}$ from (10) computed from $D_{i}^{(c)}$ , and define $r_{D_{i}^{(c)}}^{(s)}$ similarly. ", "page_idx": 14}, {"type": "text", "text": "Denote the RKHS of the kernel $k$ by $\\mathcal{H}$ . The distance in $\\mathcal{H}$ between the functions $k_{x_{1}}=k(x_{1},\\cdot)$ and $k_{x_{2}}=k(x_{2},\\cdot)$ is given by ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\|k_{x1}-k_{x2}\\|_{\\mathcal{H}}^{2}=\\langle k_{x1}-k_{x2},k_{x1}-k_{x2}\\rangle\\varkappa}\\\\ &{\\qquad\\qquad\\qquad=k(x1,x_{1})-2k(x1,x_{2})+k(x_{2},x_{2})}\\\\ &{\\qquad\\qquad\\qquad\\leq2C_{k}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "For the RBF kernel, this is a tight bound without other assumptions on $x$ , as $k(x,x)=1=C_{k}$ for all $x$ and $k(x_{1},x_{2})$ can be made arbitrarily small by placing $x_{1}$ and $x_{2}$ far away from each other. ", "page_idx": 14}, {"type": "text", "text": "The sensitivity of $r^{(d)}$ for the functional mechanism can be bounded with (22): for , ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\Delta_{\\mathcal{H}}^{2}r^{(d)}=\\displaystyle\\operatorname*{sup}_{D_{1}^{(c)}\\sim s}D_{2}^{(\\digamma)}\\left|\\left|r_{D_{1}^{(c)}}^{(d)}-r_{D_{2}^{(c)}}^{(d)}\\right|\\right|_{\\mathcal{H}}^{2}}\\\\ &{\\qquad=\\displaystyle\\operatorname*{sup}_{D_{1}^{(c)}\\sim s D_{2}^{(c)}}\\left|\\left|\\sum_{n=1}^{N}(k_{x_{n,1}^{(c)}}-k_{x_{n,2}^{(c)}})\\right|\\right|_{\\mathcal{H}}^{2}}\\\\ &{\\qquad=\\displaystyle\\operatorname*{sup}_{x_{1},x_{2}}||k_{x_{1}}-k_{x_{2}}||_{\\mathcal{H}}^{2}}\\\\ &{\\qquad\\leq2C_{k},}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where the second to last line follows from the fact that $D_{1}^{(c)}$ and ${D}_{2}^{(c)}$ only differ in one datapoint. This is a tight bound for the RBF kernel, because when $x=x_{1}$ , $k_{x_{1}}(x)=1$ and $k_{x_{2}}(x)=1$ can be a made arbitrarily small by moving $x_{2}$ far away from $x$ . ", "page_idx": 15}, {"type": "text", "text": "For $r^{(s)}$ and any function $\\phi$ with $|\\phi(y)|\\le C$ , we first bound ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{||\\phi(y_{1})k_{x1}-\\phi(y_{2})k_{x2}||_{\\mathcal{H}}^{2}}\\\\ &{=\\phi(y_{1})^{2}k(x_{1},x_{1})-2\\phi(y_{1})\\phi(y_{2})k(x_{1},x_{2})+\\phi(y_{2})^{2}k(x_{2},x_{2})}\\\\ &{\\leq4C^{2}C_{k}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Again, these are tight bounds for the RBF kernel if we don\u2019t constrain $x$ or $y$ further. ", "page_idx": 15}, {"type": "text", "text": "The $\\mathcal{H}$ -sensitivity for $r^{(s)}$ is then derived in the same way as the sensitivity for $r^{(d)}$ , giving ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\Delta_{\\mathcal{H}}^{2}r^{(s)}\\leq4C^{2}C_{k}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "A.5 Gaussian Mechanism for DPConvCNP ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "A naive way of releasing $r(x)$ under DP is to first select discretisation points $x_{1},\\ldots,x_{n}$ , in some way, and release $r(x_{1}),\\ldots,r(x_{n})$ with the Gaussian mechanism. The components of $r$ , $r^{(s)}$ and $r^{(d)}$ , have the following sensitivities: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\Delta^{2}r^{(d)}(x)=\\displaystyle\\operatorname*{sup}_{D_{1}^{(c)}\\sim s D_{2}^{(c)}}\\left|\\left|r_{D_{1}^{(c)}}^{(d)}(x)-r_{D_{2}^{(c)}}^{(d)}(x)\\right|\\right|_{2}^{2}}\\\\ &{\\qquad\\qquad=\\displaystyle\\operatorname*{sup}_{D_{1}^{(c)}\\sim s D_{2}^{(c)}}\\left|\\sum_{n=1}^{N}(k_{x_{n,1}^{(c)}}(x)-k_{x_{n,2}^{(c)}}(x))\\right|^{2}}\\\\ &{\\qquad=\\displaystyle\\operatorname*{sup}_{x_{1},x_{2}}|k_{x_{1}}(x)-k_{x_{2}}(x)|^{2}}\\\\ &{\\qquad\\leq C_{k}^{2}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Line (33) follows from the fact that $D_{1}^{(c)}$ and ${D}_{2}^{(c)}$ only differ in one datapoint. ", "page_idx": 15}, {"type": "text", "text": "For $r^{(s)}(x)$ , we have ", "page_idx": 15}, {"type": "equation", "text": "$$\n|\\phi(y_{1})k_{x_{1}}(x)-\\phi(y_{2})k_{x_{2}}(x)|^{2}\\leq4C^{2}C_{k}^{2}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Then we get ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\Delta^{2}r^{(s)}(x)\\leq4C^{2}C_{k}^{2}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "following the derivation of $\\Delta^{2}r^{(d)}(x)$ . For the RBF kernel, this is again tight without additional assumptions on $y$ or $x$ . ", "page_idx": 15}, {"type": "text", "text": "These sensitivities give the following privacy bound: ", "page_idx": 15}, {"type": "text", "text": "Theorem A.5. Let $\\Delta_{s}^{2}~=~4C^{2}C_{k}^{2}$ and $\\Delta_{d}^{2}\\mathrm{\\Delta}=\\mathrm{\\Delta}C_{k}^{2}$ . Releasing $n$ evaluations of $r(x)\\;\\;=\\;\\;$ $(r^{(d)}(x),r^{(s)}(x))$ with the Gaussian mechanism with noise variance $\\sigma^{2}$ is $\\mu$ -GDP for ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mu=\\sqrt{n\\frac{\\Delta_{s}^{2}+\\Delta_{d}^{2}}{\\sigma^{2}}}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Proof. Releasing $n$ evaluations of $r(x)$ is simply an $n$ -fold composition of Gaussian mechanisms that release $r(x)$ for one value. Releasing $r(x)$ for one value is a composition of releasing $r^{(d)}(x)$ and $r^{(s)}(x)$ , which have the sensitivities $\\Delta_{s}$ and $\\Delta_{d}$ . Now Theorems 3.5 and 3.4 prove the claim. ", "page_idx": 16}, {"type": "text", "text": "As $\\mu$ scales with $n$ , this method must add a large amount of noise for even moderate numbers of discretisation points. ", "page_idx": 16}, {"type": "text", "text": "The difference between having a factor of $C_{k}^{2}$ in the $L_{2}$ -sensitivities and $C_{k}$ in the $\\mathcal{H}$ -sensitivities is explained by the fact that the kernel also directly affects the noise variance for the functional mechanism, but it does not directly affect the noise variance with the Gaussian mechanism. This can be illustrated by considering what happens when the kernel is multiplied by a constant $u>0$ . This multiplies $C_{k}$ by $u$ , and multiplies the $L_{2}$ -sensitivities by $u^{2}$ . For the Gaussian mechanism, this means multiplying the noise standard deviation by $u$ , but simultaneously multiplying all released values by $u$ , which does not change the signal-to-no\u221aise ratio. For the functional mechanism, multiplying the kernel values effectively multiplies $c$ by $\\sqrt{u}$ and the squared sensitivities by $u$ , which then cancel each other in $\\mu$ . ", "page_idx": 16}, {"type": "text", "text": "For the RBF kernel and clipping function $\\phi$ with threshold $C=1$ , we see that $\\Delta_{\\mathcal{H}}^{2}r^{(d)}=2$ while $\\Delta_{2}^{2}r^{(d)}=1$ , and $\\Delta_{\\mathcal{H}}^{2}r^{(s)}=4$ , while $2\\Delta_{2}^{2}r^{(s)}\\,=\\,4$ , so the functional mechanism adds noise with slightly more variance as releasing a single value with the Gaussian mechanism, so the functional mechanism adds noise of less variance when 2 or more discretisation points are required. However, the functional mechanism adds correlated noise, which is not as useful for denoising as the uncorrelated noise that the Gaussian mechanism adds. ", "page_idx": 16}, {"type": "text", "text": "A.6 Details on Figure 4 ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In this section, we go over the details of the calculations behind Figure 4. The \u201cclassical\u201d line of the figure is computed from Theorem 3.7. The GDP line uses Definition 3.2 to convert the $(\\epsilon,\\delta)$ -pair into a ${\\mathrm{GDP}}\\ \\mu$ bound by numerically solving for $\\mu$ in Eq.(5). $\\sigma$ is then found with Theorem 4.1. ", "page_idx": 16}, {"type": "text", "text": "For the RDP line, we get an RDP guarantee from Corollary 2 of Jiang et al. [2023], which we convert to $(\\epsilon,\\delta)$ with Proposition 3 of Jiang et al. [2023]. These give the equation ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\epsilon=\\frac{\\alpha\\Delta^{2}}{2\\sigma^{2}}-\\frac{\\ln\\delta}{\\alpha-1},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where $\\alpha>1$ is a parameter of RDP that can be freely chosen. The $\\alpha$ value that minimises $\\epsilon$ is ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\alpha^{*}=\\sqrt{-\\frac{2\\sigma^{2}\\ln\\delta}{\\Delta^{2}}}+1.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Plugging $\\alpha^{*}$ into Eq. (38) gives the quadratic equation ", "page_idx": 16}, {"type": "equation", "text": "$$\n-\\epsilon\\sigma^{2}+2\\sqrt{-\\frac{\\Delta^{2}\\ln\\delta}{2}}\\sigma+\\frac{\\Delta^{2}}{2}=0\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "that can be solved for $\\sigma$ . ", "page_idx": 16}, {"type": "text", "text": "To see that choosing the $\\alpha$ that minimises $\\epsilon$ also leads to the smallest $\\sigma$ that satisfies a given $(\\epsilon,\\delta)$ - bound, let ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\epsilon(\\alpha,\\sigma)={\\frac{\\alpha\\Delta^{2}}{2\\sigma^{2}}}-{\\frac{\\ln\\delta}{\\alpha-1}},\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "and let $\\sigma^{*}$ be the solution to Eq. (40). Let $\\alpha,\\sigma$ be another pair that satisfies the $(\\epsilon,\\delta)$ -bound. Since $\\alpha^{*}$ is chosen to minimise $\\epsilon$ , $\\epsilon(\\alpha^{*}(\\sigma),\\sigma)\\leq\\epsilon(\\alpha,\\sigma)$ . We can assume that $\\epsilon(\\alpha,\\sigma)=\\epsilon(\\alpha^{*}(\\sigma),\\sigma)=\\epsilon$ , since otherwise we could reduce $\\sigma$ further. Now ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\epsilon(\\alpha^{*}(\\sigma^{*}),\\sigma^{*})=\\epsilon=\\epsilon(\\alpha^{*}(\\sigma),\\sigma)\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "so $\\epsilon(\\alpha^{*}(\\sigma^{*}),\\sigma^{*})=\\epsilon(\\alpha^{*}(\\sigma),\\sigma)$ . By manipulating Eq. (40), we can see that $\\epsilon(\\alpha^{*}(\\cdot),\\cdot)$ is strictly decreasing, so this implies that $\\sigma=\\sigma^{*}$ . ", "page_idx": 16}, {"type": "text", "text": "Input : Dimension-wise grid location $u_{d}\\in\\mathbb{R}$ , spacing $\\gamma_{d}\\in\\mathbb{R}$ and number of points $N_{d}\\in\\mathbb{N}$ , Product kernel $k\\ {\\stackrel{\\bullet}{:}}\\ \\mathbb{R}^{D}\\times\\mathbb{R}^{D}\\rightarrow\\mathbb{R}$ with factors $k_{d}:\\mathbb{R}\\times\\mathbb{R}\\to\\mathbb{R}$ .   \nOutput: Sample $f_{n_{1}\\dots n_{D}}$ from GP with kernel $k$ on grid inputs $x_{n_{1}...n_{D}}$ defined by $u_{d},\\gamma_{d},N_{d}$ .   \nSample $f_{n_{1}...n_{D}}\\sim\\mathcal{N}(0,1)$ for each $1\\le n_{d}\\le N_{d}$ , $d=1,\\dots,D$ {Sample Gaussian noise}   \nfor $d=1$ to $D$ do $K_{d n m}\\gets k_{d}(u_{d}+n\\gamma_{d},u_{d}+m\\gamma_{d})$ for $0\\leq n,m\\leq N_{d}-1$ {Compute covariance} $L_{d}\\gets\\mathrm{CHOLESKY}(K_{d})$ {Compute Cholesky factor} $f\\gets\\mathbf{MATMULALONGDIM}(L_{d},f,d)$ {Matmul $f$ by $L_{d}$ along dimension $d\\}$   \nend for ", "page_idx": 17}, {"type": "text", "text": "B Efficient sampling of Gaussian process noise ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In order to ensure differential privacy within the DPConvCNP, we need to add GP noise (from a GP with an EQ kernel) to the functional representation outputted by the SetConv. In practice, this is implemented by adding GP noise on the discretised representation, i.e. the data and density channels. ", "page_idx": 17}, {"type": "text", "text": "While sampling GP noise is typically tractable if the grid is one-dimensional, the computational and memory costs of sampling can easily become intractable for two- or three-dimensional grids. This is because the number of grid points increases exponentially with the number of input dimensions and, in addition to this, the cost of sampling increases cubically with the number of grid points. Fortunately, we can exploit the regularity of the grid and the fact that the EQ kernel is a product kernel, to make sampling tractable. Proposition B.1 illustrates how this can be achieved. ", "page_idx": 17}, {"type": "text", "text": "Proposition B.1. Let $\\boldsymbol{x}\\in\\mathbb{R}^{N_{1}\\times\\cdots\\times N_{D}}$ be a grid of points in $\\mathbb{R}^{D}$ given by ", "page_idx": 17}, {"type": "equation", "text": "$$\nx_{n_{1}\\ldots\\;n_{D}}=\\left(u_{1}+(n_{1}-1)\\gamma_{1},\\ldots,u_{D}+(n_{D}-1)\\gamma_{D}\\right),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $u_{d}\\in\\mathbb{R},\\,\\gamma_{d}\\in\\mathbb{R}^{+}$ and $1\\leq n_{d}\\in\\mathbb{N}\\leq N_{d}$ for each $d=1,\\dots,D$ . Also let $k:\\mathbb{R}^{D}\\times\\mathbb{R}^{D}\\to\\mathbb{R}$ be a product kernel, i.e. a kernel that satisfies ", "page_idx": 17}, {"type": "equation", "text": "$$\nk(z,z^{\\prime})=\\prod_{d=1}^{D}k_{d}(z_{d},z_{d}^{\\prime}),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "for some univariate kernels $k_{d}:\\mathbb{R}\\rightarrow\\mathbb{R},$ , for every $z,z^{\\prime}\\in\\mathbb{R}^{D}$ , let ", "page_idx": 17}, {"type": "equation", "text": "$$\nK_{d n m}=k_{d}(u_{d}+(n-1)\\gamma_{d},\\;u_{d}+(m-1)\\gamma_{d}),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "and let $L_{d}$ be a Cholesky factor of the matrix $K_{d}$ . Then if $\\epsilon_{n_{1}\\ldots\\,n_{D}}\\,\\in\\,\\mathbb{R}\\sim\\mathcal{N}(0,1)$ is a grid of corresponding i.i.d. standard Gaussian noise, the scalars $f_{n_{1}...n_{D}}\\in\\mathbb{R}$ , defined as ", "page_idx": 17}, {"type": "equation", "text": "$$\nf_{n_{1}\\ldots\\;n_{D}}=\\sum_{k_{1}=1}^{N_{1}}L_{1n_{1}k_{1}}\\cdot\\cdot\\cdot\\sum_{k_{D}=1}^{N_{D}}L_{D n_{D}k_{D}}\\;\\epsilon_{k_{1}\\ldots\\;k_{D}},\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "are Gaussian-distributed, with zero mean and covariance ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\mathbb{C}[f_{n_{1}\\dots\\;n_{D}},f_{m_{1}\\dots\\;m_{D}}]=k(x_{n_{1}\\dots\\;n_{D}},x_{m_{1}\\dots\\;m_{D}}).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Before giving the proof of Proposition B.1, we provide pseudocode for this approach in Algorithm 4 and discuss the computation and memory costs of this implementation compared to a naive approach. Naive sampling on a grid of $N_{1}\\times\\cdots\\times N_{D}$ points requires computing a Cholesky factor for the covariance matrix of the entire grid and then multiplying standard Gaussian noisy by this factor. We discuss the costs of these operations, comparing them to the efficient approach. ", "page_idx": 17}, {"type": "text", "text": "Computing Cholesky factors. The cost of computing a Cholesky factor for covariance matrix of the entire $N_{1}\\times\\cdots\\times N_{D}$ grid incurs a computation cost of $\\mathcal{O}(\\bar{N}_{1}^{3}\\times\\cdots\\times N_{D}^{3})$ and a memory cost of $\\mathcal{O}(N_{1}^{2}\\,\\times\\,\\cdot\\,\\cdot\\,\\times\\,N_{D}^{2})$ . By contrast, Algorithm 4 only ever computes Cholesky factors for $N_{d}\\times N_{d}$ covariance matrices, so it incurs a computational cost of $\\mathcal{O}\\big(\\sum_{d=1}^{D}N_{d}^{3}\\big)$ and a memory cost of $\\textstyle\\mathcal{O}\\big(\\sum_{d=1}^{\\mathcal{D}}N_{d}^{2}\\big)$ , which are both much lower than those of a naive implementation. For clarity, if ", "page_idx": 17}, {"type": "text", "text": "$N_{1}=\\cdot\\cdot\\cdot=N_{D}=N$ , naive factorisation has $\\mathcal{O}(N^{3D})$ computational and $\\mathcal{O}(N^{2D})$ memory cost, whereas the efficient implementation has $\\mathcal{O}(D N^{3})$ computational and $O(D N^{2})$ memory cost. ", "page_idx": 18}, {"type": "text", "text": "Matrix multiplications. In addition, naively multiplying the Gaussian noise by the Cholesky factor of the entire covariance matrix incurs a $\\mathcal{O}(N_{1}^{2}\\times\\therefore\\times\\mathrm{{}}\\bar{N}_{D}^{2})$ computation cost. On the other hand, in Algorithm 4 we perform $D$ batched matrix-vector multiplications, where the $d^{\\mathrm{th}}$ multiplication consists of $\\prod_{d^{\\prime}=d}N_{d^{\\prime}}$ matrix-vector multiplications, where a vector with $N_{d}$ entries is multiplied by an $N_{d}\\times N_{d}$ matrix. The total computation cost for this step is only $\\begin{array}{r}{\\mathcal{O}\\big(\\sum_{d=1}^{D}N_{d}^{2}\\prod_{d^{\\prime}\\neq d}\\dot{N}_{d^{\\prime}}\\big)}\\end{array}$ . For example, if $N_{1}=\\cdot\\cdot\\cdot=N_{D}=N$ , naive matrix-vector multiplication has a computation cost of $\\mathcal{O}(N^{2D})$ , whereas the efficient implementation has a computation cost of $O(N^{D+1})$ . ", "page_idx": 18}, {"type": "text", "text": "In Algorithm 4, CHOLESKY denotes a function that computes the Cholesky factor of a square positivedefinite matrix. $\\begin{array}{r}{\\mathrm{IATVECALONGDIM}(L_{d},f,d)}\\end{array}$ denotes the batched matrix-vector multiplication of an array $f$ by a matrix $L_{d}$ along dimension $d$ , batching over the dimensions $d^{\\prime}\\neq d$ . Specifically, given a $D$ -dimensional array $b$ with dimension sizes $N_{1},\\ldots,N_{D}$ and an $N_{d}\\times N_{d}$ matrix $A$ , the matrix-vector multiplication of $b$ by $A$ along dimension $d$ outputs the $D$ -dimensional array ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathrm{MATVECALONGDIM}(A,b,d)_{n_{1}\\ldots n_{D}}=\\sum_{j=1}^{N_{d}}A_{n_{d}j}b_{n_{1}\\ldots n_{d-1}\\,\\,j\\,\\,n_{d+1}\\ldots n_{D}}.\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "From the above equation, we can see that initialising $f$ with standard Gaussian noise, and batchmultiplying $f$ by $L_{d}$ along dimension $d$ for each $d=1,\\dots,D$ , amounts to computing the nested sum in Equation (46). Note that the order with which these batch multiplications are performed does not matter: it does not change neither the numerical result nor the computation or memory cost of the algorithm. ", "page_idx": 18}, {"type": "text", "text": "Proof of Proposition B.1. From the definition above, we see that $f_{n_{1}\\ldots\\;n_{D}}$ is a linear transformation of Gaussian random variables with zero mean, and therefore also has zero mean. For the covariance, again from the definition above, we have ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{\\mathbb{C}\\left[f_{n_{1}\\ldots n_{D}},f_{m_{1}\\ldots n_{D}}\\right]=}&{(49)}\\\\ &{\\mathbb{C}\\left[\\displaystyle\\sum_{k_{1}=1}^{N_{1}}L_{1n_{1}k_{1}}\\ldots\\displaystyle\\sum_{k_{D}=1}^{N_{D}}L_{D n_{D}k_{D}}\\,\\epsilon_{k_{1}\\ldots k_{D}},\\displaystyle\\sum_{l_{1}=1}^{N_{1}}L_{1m_{1}l_{1}}\\ldots\\displaystyle\\sum_{l_{D}=1}^{N_{D}}L_{D m_{D}l_{D}}\\,\\epsilon_{l_{1}\\ldots l_{D}}\\right]=}&{(50)}\\\\ &{\\mathbb{C}\\left[\\displaystyle\\sum_{k_{1}=1}^{N_{1}}\\ldots\\displaystyle\\sum_{k_{D}=1}^{N_{D}}L_{1n_{1}k_{1}}\\ldots L_{D n_{D}k_{D}}\\,\\epsilon_{k_{1}\\ldots k_{D}},\\displaystyle\\sum_{l_{1}=1}^{N_{1}}\\ldots\\displaystyle\\sum_{l_{D}=1}^{N_{D}}L_{1m_{1}l_{1}}\\ldots L_{D m_{D}l_{D}}\\,\\epsilon_{l_{1}\\ldots l_{D}}\\right]=}&{(51)}\\\\ &{\\mathbb{E}\\left[\\left(\\displaystyle\\sum_{k_{1}=1}^{N_{1}}\\cdots\\displaystyle\\sum_{k_{D}=1}^{N_{D}}L_{1n_{1}k_{1}}\\ldots L_{D n_{D}k_{D}}\\,\\epsilon_{k_{1}\\ldots k_{D}}\\right)\\left(\\displaystyle\\sum_{l_{1}=1}^{N_{1}}\\ldots\\displaystyle\\sum_{l_{D}=1}^{N_{D}}L_{1m_{1}l_{1}}\\ldots L_{D m_{D}l_{D}}\\,\\epsilon_{l_{1}\\ldots l_{D}}\\right)\\right],}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where we have used the fact that the expectation of $f$ is zero. Now, expanding the product of sums above, taking the expectation and using the fact that $\\epsilon_{n_{1}\\ldots~n_{D}}$ are i.i.d., we see that all terms vanish, except those where $k_{d}=l_{d}$ for all $d=1,\\dots,D$ . Specifically, we have ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\mathbb{C}\\left[f_{n_{1}\\ldots n_{D}},f_{m_{1}\\ldots m_{D}}\\right]=\\ }}\\\\ {{=\\mathbb{E}\\left[\\displaystyle\\sum_{k_{1}=1}^{N_{1}}\\cdots\\sum_{k_{D}=1}^{N_{D}}\\sum_{l=1}^{N_{1}}\\cdots\\sum_{l=1}^{N_{D}}L_{\\mathrm{ln},k_{1}}\\ldots L_{D n_{D}k_{D}}L_{\\mathrm{lm},l_{1}}\\ldots L_{D m_{D}l_{D}}\\epsilon_{k_{1}\\ldots k_{D}}\\epsilon_{l_{1}\\ldots l_{D}}\\right]}}\\\\ {{=\\displaystyle\\sum_{k_{1}=1}^{N_{1}}\\cdots\\sum_{k_{D}=1}^{N_{D}}\\sum_{l=1}^{N_{1}}\\cdots\\sum_{l=1}^{N_{D}}L_{\\mathrm{ln},k_{1}}\\ldots L_{D n_{D}k_{D}}L_{\\mathrm{lm},l_{1}}\\ldots L_{D m_{D}l_{D}}\\mathbb{E}\\left[\\epsilon_{k_{1}\\ldots k_{D}}\\epsilon_{l_{1}\\ldots l_{D}}\\right]}}\\\\ {{=\\displaystyle\\sum_{k_{1}=1}^{N_{1}}\\cdots\\sum_{k_{D}=1}^{N_{D}}\\sum_{l=1}^{N_{1}}\\cdots\\sum_{l=1}^{N_{D}}L_{\\mathrm{ln},k_{1}}\\ldots L_{D n_{D}k_{D}}L_{\\mathrm{lm},l_{1}}\\ldots L_{D m_{D}l_{D}}\\ \\mathbb{E}_{\\mathrm{lm},l_{1}\\ldots l_{D}}=l_{D}}}\\\\ {{=\\displaystyle\\sum_{k_{1}=1}^{N_{1}}\\cdots\\sum_{k_{D}=1}^{N_{D}}\\sum_{l=1}^{N_{1}}\\cdots\\sum_{l=1}^{N_{D}}L_{\\mathrm{ln},k_{1}}\\ldots L_{D n_{D}k_{D}}L_{\\mathrm{lm},l_{1}}\\ldots L_{D m_{D}l_{D}}\\ \\mathbb{1}_{k_{1}=l_{1},\\ldots,k_{D}=l_{D}}}}\\\\ {{=\\displaystyle\\sum_{k_{1}=1}^{N}\\cdots\\sum_{k_{D}=1}^{N}L_{\\mathrm{ln},k_{1}}\\ldots L_{D n_{D}k_{D}}L_{\\mathrm{lm},\n$$", "text_format": "latex", "page_idx": 18}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/a4de48060094f5e5048ac6f9195034a71a3a7e3138a7bf1c121f857fe6492ad8.jpg", "img_caption": [""], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "Figure S1: DPConvCNP performance on the GP modelling task, where the data are generated using an EQ GP with lengthscale $\\ell$ . We train three models per $\\epsilon,\\ell$ combination, keeping $\\bar{\\delta}=10^{-3}$ fixed as well as the clipping threshold $C=2.00$ and noise weight $t=0.50$ fixed. Specifically, we train one model where only noise to the signal channel (red; no clip, no density), one model where noise and clipping are applied to the signal channel (orange; clip, no density noise) and another model where noise and clipping to the signal channel as well as noise to the density channel are applied (green; clip, density noise). We also show the NLL of the oracle, non-DP, Bayesian posterior, which is the best average NLL that can be obtained on this task (blue). Lastly, we show a bound to the functional mechanism (black), which is a lower bound on the NLL that can be obtained with the functional mechanism with $C=2.00,t=0.50$ on this task. We used 512 evaluation tasks for each $N,\\ell,\\epsilon$ combination, and report mean NLLs together with their $95\\%$ confidence intervals. Note that the error bars are plotted but are too small to see in the plot. ", "page_idx": 19}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/1a4ece1599a13a93071be4373ac4ef83ac925fa4a576ff0344d4b30aa07aa269.jpg", "img_caption": [], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "which is the required result. ", "page_idx": 19}, {"type": "text", "text": "C Additional results ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "C.1 How effectively does the ConvCNP learn to undo the DP noise? ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Quantifying performance gaps. In this section we provide some additional results on the performance of the DPConvCNP and the functional mechanism. Specifically, we investigate the performance gap between the DPConvCNP and the oracle (non-DP) Bayes predictor. Assuming the data generating prior is known, which in our synthetic experiments it is, the corresponding Bayes posterior predictive attains the best possible average log-likelihood achievable. We determine and quantify the sources of this gap in a controlled setting. ", "page_idx": 19}, {"type": "text", "text": "Sources of the performance gaps. Specifically, the performance gap can be broken down into two main parts: one part due to the DP mechanism (specifically the signal channel clipping and noise, and the density channel noise) and another part due to the fact that we are training a neural network to map the DP representation to an estimate of the Bayes posterior. To assess the performance gap introduced by each of these sources, we perform a controlled experiment with synthetic data from a Gaussian process prior (see Figure S1). ", "page_idx": 19}, {"type": "text", "text": "Gap quantification experiment. We fix the clipping threshold value at $C=2.00$ , which is a sensible setting since the marginal confidence intervals of the data generating process are $\\pm1.96$ . We also fix the noise weighting at $t=0.50$ , which is again is a sensible setting since it places roughly equal importance to the noise added to the density and the signal channels. We consider three different settings for the prior lenghtscale $\\mathit{\\Pi}^{'}\\!\\ell\\,=\\,0.25,0.71,2.00\\bar{)}$ and two settings for the DP parameters $(\\epsilon=1.00,3.00$ and fixed $\\delta=10^{-3}$ ). For each of the six combinations of settings, we train three different DPConvCNPs, one with just signal noise (red; no clip, no density noise), one with signal noise and clipping (orange; clip, no density noise) and one with signal noise and clipping and also density noise (green; clip, density noise). Note, only the last model has DP guarantees. We compare performance with the non-DP Bayesian posterior oracle (blue). ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "Lower bound model. When we only add signal noise to the ConvCNP representation (and do not apply clipping or add density noise), and the true generative process is a GP such as in this case, the predictive posterior (given the noisy signal representation and the noiseless density representation) is a GP. That is because the data come from a known GP, and the signal channel is a linear combination of the data (since we have turned off clipping) plus GP noise, so it is also a GP. Therefore, we can write down a closed form predictive posterior in this case. We refer to this as the lower bound model (black) in Figure S1, because for a given $C$ and $t$ , the performance of this model is a lower bound to the NLL of any model that uses this representation as input. Note however that different lower bounds can be obtained for different $C$ and $t$ . ", "page_idx": 20}, {"type": "text", "text": "Conclusions. We observe that the DPConvCNP with no clipping and no density noise (red) matches the performance of the lower bound model. This is encouraging as it suggests that the model is able to undo the effect of the signal noise perfectly. We also observe that applying clipping (orange) does not reduce performance substantially, which is also encouraging as it suggests that the model is able to cope with the effect of clipping on the signal channel, when it is trained to do so. Lastly, we observe that there is an additional gap in performance is introduced due to noise in the density channel (green). This is expected since the density noise is substantial and confounds the context inputs. This gap reduces as the number of context points increases, which is again expected. From the above, we conclude that in practice, the model is able to make predictions under DP constraints that are near optimal, i.e. there is likely not a significant gap due to approximating the mapping from the DP representation to the optimal predictive map, with a neural network. ", "page_idx": 20}, {"type": "text", "text": "C.2 Supplementary model fits for the synthetic tasks ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "We also provide supplementary model fits for the synthetic, Gaussian and non-Gaussian tasks. For each task, we provide fits for three parameter settings ( $\\boldsymbol{\\ell}$ and $\\tau$ ), two privacy budgets, four context sizes and two dataset random seeds. See Figures S2 to S5, at the end of this document, for model ftis. ", "page_idx": 20}, {"type": "text", "text": "D Differentially-Private Sparse Gaussian Process Baseline ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Here, we provide details of the differentially-private sparse variational Gaussian process (DP-SVGP) baseline. Let $D\\equiv\\left(\\mathbf{x},\\mathbf{y}\\right)$ denote a dataset consisting of inputs $N$ inputs $\\mathbf{x}\\in\\mathcal{X}^{N}$ and $N$ corresponding outputs $\\mathbf{y}\\in\\mathcal{Y}^{N}$ . We assume the observations are generated according to the probabilistic model: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{f\\sim\\mathcal{G P}(0,k_{\\theta_{1}}(x,x^{\\prime}))}\\\\ {\\mathbf{y}|f,\\mathbf{x}\\sim\\displaystyle\\prod_{n=1}^{N}p_{\\theta_{2}}(y_{n}|f(x_{n})),}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $k_{\\theta}$ denotes the GP kernel from which the latent function $f$ is sampled from, with hyperparameters $\\theta$ , and $\\theta_{2}$ denotes the parameters of the likelihood function. Computing the posterior distribution $p_{\\theta}(f|\\mathbf x,\\mathbf y)$ is only feasible when the likelihood is Gaussian. Even when this is true, the computational complexity associated with this computation is $\\mathcal{O}(N^{3})$ . ", "page_idx": 20}, {"type": "text", "text": "Sparse variational GPs [Titsias, 2009] offer a solution to this by approximating the true posterior with the GP ", "page_idx": 20}, {"type": "equation", "text": "$$\nq_{\\theta,\\phi}(f)=p_{\\theta}(f_{\\neq\\mathbf{u}}|\\mathbf{u})q_{\\phi}(\\mathbf{u})\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "with $\\mathbf{u}=f(\\mathbf{z})$ , where $\\mathbf{z}\\in\\mathcal{X}^{M}$ denote a set of $M$ inducing locations, and $q_{\\phi}(\\mathbf{u})=\\mathcal{N}(\\mathbf{u};\\mathbf{m},\\mathbf{S})$ . The computational complexity associated with this posterior approximation is $\\mathcal{O}(N M^{2})$ , which is significantly lower if $M\\ll N$ . We can optimise the variational parameters $\\boldsymbol{\\phi}=\\{\\mathbf{m},\\mathbf{\\bar{S}},\\mathbf{z}\\}$ by ", "page_idx": 20}, {"type": "text", "text": "optimisation of the evidence lower bound, $\\mathcal{L}_{\\mathrm{ELBO}}$ : ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{ELBO}}(\\theta,\\phi)=\\mathbb{E}_{q_{\\theta}(f)}\\left[\\log p_{\\theta}(\\mathbf{y}\\vert f(\\mathbf{x}))\\right]-\\mathrm{KL}\\left[q_{\\phi}(\\mathbf{u})\\vert\\vert p_{\\theta}(\\mathbf{u})\\right].\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Importantly, $\\mathcal{L}_{\\mathrm{ELBO}}$ also serves as a lower bound to the marginal likelihood $p_{\\theta}(\\mathbf{y}\\vert\\mathbf{x})$ , and so we can optimise this objective with respect to both $\\theta$ and $\\phi$ . Since the likelihood factorises, we can obtain an unbiased estimate to the $\\mathcal{L}_{\\mathrm{ELBO}}$ by sampling batches of datapoints. This lends itself to stochastic optimisation using gradient based methods, such as SGD. By replacing SGD with a differentially-private gradient-based optimisation routine (DP-SGD), we obtain our DP-SVGP baseline. ", "page_idx": 21}, {"type": "text", "text": "A difficulty in performing DP-SGD to optimise model and variational parameters of the DP-SVGP baseline is that the test-time performance is a complex function of the hyperparameters of DP-SGD (i.e. maximum gradient norm, batch size, epochs, learning rate), the initial hyperparameters of the model (i.e. kernel hyperparameters, and likelihood parameters), and the initial variational parameters (i.e. number of inducing locations $M$ ). Fortunately, we are considering the meta-learning setting, in which we have available to us a number of datasets that we can use to tune these hyperparameters. We do so using Bayesian optimisation (BO) to maximise the sum of the $\\mathcal{L}_{\\mathrm{ELBO}}$ \u2019s for a number of datasets. To limit the number of parameters we optimise using BO, we set the initial variational mean and variational covariance to the prior mean and covariance, $\\mathbf m={\\bf0}$ and $\\mathbf{S}=k(\\mathbf{z},\\mathbf{z})$ . ", "page_idx": 21}, {"type": "text", "text": "In Table S1, we provide the range for each hyperparameter that we optimise over. In all cases, we fix the number of datasets that we compute the $\\mathcal{L}_{\\mathrm{ELBO}}$ for to 64 and the number of BO iterations to 200. We use Optuna [Akiba et al., 2019] to perform the BO, and Opacus [Yousefpour et al., 2021] to perform DP-SGD using the PRV privacy accountant. ", "page_idx": 21}, {"type": "table", "img_path": "99rOAM7Jfm/tmp/2b4c3fa9f130ef26bcaa10e5f05b4bbbd247a72f204b22fc92ca00235466aa4f.jpg", "table_caption": [], "table_footnote": [], "page_idx": 21}, {"type": "text", "text": "Table S1: The ranges of DP-SGD hyperparameter settings (upper half) and initial model hyperparameters (lower half) over which Bayesian optimisation is performed for the DP-SVGP baseline. ", "page_idx": 21}, {"type": "text", "text": "E Experiment details ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "In this section we give full details for our experiments. Specifically, we describe the generative processes we used for the Gaussian, non-Gaussian and sim-to-real tasks. ", "page_idx": 21}, {"type": "text", "text": "E.1 Synthetic tasks ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "First, we specify the general setup that is shared between the Gaussian and non-Gaussian tasks.   \nSecond, we specify the Gaussian and non-Gaussian generative processes used to generate the outputs.   \nLastly we give details on the parameter settings for the amortised and the non-amortised models. ", "page_idx": 21}, {"type": "text", "text": "General setup. During training, we generate data by sampling the context set size $N\\sim\\mathcal{U}[1,512]$ , then sample $N$ context inputs uniformly in $[-2.00,2.{\\dot{0}}0]$ and 512 target inputs in the range $[-6.00,6.{\\dot{0}}0]$ . We then sample the corresponding outputs using either the EQ Gaussian process or the sawtooth process, which we define below. For the DPConvCNP we use 6,553,600 such tasks with a batch size of 16 at training time, which is equivalent to 409,600 gradient update steps. We do note however that this large number of tasks, which was used to ensure convergence across all variants of the models we trained, is likely unnecessary and significantly fewer tasks (fewer than half of what we used) suffices. Throughout optimisation, we maintain a fixed set of 2,048 tasks generated in the same way, as a validation set. Every 32,768 gradient updates (i.e. 200 times throughout the training process) we evaluate the model on these held out tasks, maintaining a checkpoint of the best model encountered thus far. After training, this best model is the one we use for evaluation. At evaluation time, we fix $N$ to each of the numbers specified in Figure 6, and sample $N$ context inputs uniformly in $[-2.00,2.00]$ and 512 target inputs in the range $[-2.00,2.00]$ . We repeat this procedure for 512 separate tasks, and report the mean NLL together with its $95\\%$ confidence intervals in Figure 6. For all tasks, we set the privacy budget with $\\delta=10^{-3}$ and $\\epsilon\\sim\\mathcal{U}[0.90,4.00]$ . ", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 22}, {"type": "text", "text": "Gaussian generative process. For the Gaussian task, we generate the context and target outputs from a GP with the exponentiated quadratic (EQ) covariance, which is defined as ", "page_idx": 22}, {"type": "equation", "text": "$$\nk(x,x^{\\prime})=\\sigma_{v}^{2}\\exp\\left(-\\frac{(x-x^{\\prime})^{2}}{2\\ell^{2}}\\right)+\\sigma_{n}^{2}.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Sawtooth generative process. For the non-Gaussian task, we generate the context and target outputs from a the truncation of the Fourier series of the sawtooth waveform ", "page_idx": 22}, {"type": "equation", "text": "$$\nf(x)={\\frac{2}{\\pi}}\\sum_{m=1}^{2}{\\frac{\\sin(2m\\pi(d x/\\tau)+\\phi)}{m}}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where $d\\sim\\mathcal{U}[-1,1]$ is a direction sampled uniformly from $\\{-1,1\\}$ , $\\tau$ is a period and $\\phi\\in[0,2\\pi]$ is a phase shift. In preliminary experiments, we found that the DPConvCNP worked well with the raw sawtooth signal (i.e. the full Fourier series) but the DP-SVGP struggled due to the discontinuities of the original signal, so we truncated the series, giving an advantage to the DP-SVGP. ", "page_idx": 22}, {"type": "text", "text": "Non-amortised and amortised tasks. For the non-amortised tasks, we train and evaluate a single model for a single setting of the generative parameter $\\ell$ or $\\tau$ . Specifically, for the Gaussian tasks, we fix $\\ell=0.50,0.71$ or 2.00 and train a separate model for each one, that is then tested on data with the same value of $\\ell$ . Similarly, for the non-Gaussian tasks, we fix $\\tau^{-1}=0.25,0.50$ or 1.00 and train a separate model for each one, that is again then tested on data with the same value of $\\tau$ . For the amortised tasks, we sample the generative parameter $\\ell$ or $\\tau$ at random. Specifically, for the Gaussian tasks, we sample $\\ell\\sim\\mathcal{U}[0.20,2.50]$ for each task that we generate, and train a single model on these data. We then evaluate this model for each of the settings $\\ell=0.50,0.71$ or 2.00. Similarly, for the non-Gaussian tasks, we sample $\\tau^{-1}\\sim\\mathcal{U}[0.20,1.25]$ for each task that we generate, and train a single model on these data. We then evaluate this model for each of the settings $\\bar{\\tau}^{-1}=0.25,0.50$ or 1.00. The results of these procedures are summarised in Figure 6. ", "page_idx": 22}, {"type": "text", "text": "E.2 Sim-to-real tasks ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "For the sim-to-real tasks we follow a training procedure that is similar to that of the synthetic experiments. During training, we generate data by sampling the context set size $N\\sim\\mathcal{U}[1,512]$ , then sample $N$ context inputs uniformly in $[-1.00,1.00]$ and 512 target inputs in the range $[-1.00,1.00]$ . We then generate data by sampling them from a GP with covariance ", "page_idx": 22}, {"type": "equation", "text": "$$\nk(x,x^{\\prime})=k_{3/2,\\ell}(x,x^{\\prime})+\\sigma_{n}^{2},\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where $k_{3/2,\\ell}$ is a Matern- $3/2$ covariance with lengthscale $\\ell\\,\\sim\\,\\mathcal{U}[0.50,2.00]$ and noise standard deviation $\\sigma_{n}\\,\\sim\\,\\mathcal{U}[0.30,0.80]$ . For all tasks, we set the privacy budget at $\\delta~=~10^{-3}$ and $\\epsilon\\mathrm{~\\sim~}$ $\\mathcal{U}[0.90,4.00]$ . The Dobe !Kung dataset is publicly available in TensorFlow 2 [Abadi et al., 2016], specifically the Tensorflow Datasets package. Note that we rescale the ages to be between $-1.0$ and 1.0 and normalise the heights and weights of users to have zero mean and unit standard deviation. We assume that the required statistics for these normalisations are public, but they could be released with additional privacy budget. Inaccurate normalisations would only increase the sim-to-real gap and reduce utility, but not affect the privacy analysis. At evaluation time, we fix $N$ to each of the numbers specified in Figure 7. We then sample $N$ points at random from the normalised !Kung dataset and use the remaining points as the target set. We repeat this procedure for 512 separate tasks, and report the mean NLL together with its $95\\%$ confidence intervals in Figure 7. ", "page_idx": 22}, {"type": "text", "text": "E.3 Optimisation ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "For all our experiments with the DPConvCNP we use Adam with a learning rate of $3\\times10^{-4}$ , setting all other options to the default TensorFlow 2 settings. ", "page_idx": 22}, {"type": "text", "text": "E.4 Compute details ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "We train the DPConvCNP on a single NVIDIA GeForce RTX 2080 Ti GPU, on a machine with 20 CPU workers. Meta-training requires approximately 5 hours, with synthetic data generated on the fly. Meta-testing is performed on the same infrastructure, and timings are reported in Figure 5. ", "page_idx": 23}, {"type": "text", "text": "F DPConvCNP architecture ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Here we give the details of the DPConvCNP architecture used in our experiments. The DPConvCNP consists of a DPSetConv encoder, and a CNN decoder followed by a SetConv decoder. We specify the details for the parameters of these layers below. ", "page_idx": 23}, {"type": "text", "text": "DPSetConv encoder and SetConv decoder. For all our experiments, we initialise the DPSetConv and SetConv lengthscales (which are also used to sample the DP noise) to $\\lambda=0.20$ , and allow this parameter to be optimised during training. For the learnable DP parameter mappings $t(\\mu,N)=$ $\\mathsf{\\bar{s i g}}(\\mathbf{NN}_{t}(\\mu,N))$ and $C(\\mu,N)\\;\\bar{=}\\;\\exp(\\bar{\\bf N}\\bar{\\bf N}_{C}(\\mu,N))$ we use simple fully connected feedforward networks with two layers of 32 hidden units each. For the discretisation step in the encoder, we use a resolution of 32 points per unit for all our experiments. We also use a fixed discretisation window of $[-7,7]$ for the synthetic tasks and $[-2,2]$ for the sim-to-real tasks. We did this for simplicity, although our implementation supports dynamically adaptive discretisation windows. ", "page_idx": 23}, {"type": "text", "text": "Decoder convolutional neural network. Most of the computation involved in the DPConvCNP happens in the CNN of the decoder. For this CNN we used a bare-bones implementation of a UNet with skip connections. This UNet consists of an initial convolution layer processes the signal and density channels, along with two constant channels fixed to the magnitudes $\\sigma_{s},\\sigma_{d}$ of the DP noise used in these two channels, into another set of $C_{\\mathrm{in}}$ channels. The result of the initial layer is then passed through the UNet backbone, which consists of $N$ convolutional layers with a stride of 2 and with output channels $\\boldsymbol{C}=(C_{1},\\hdots,C_{N})$ , followed by $N$ transpose convolutions again with a stride of 2 and output channels $C=(C_{N},\\dots,C_{1})$ . Before applying each of these convolution layers, we create a skip connection from the input of the convolution layer and concatenate this to the output of the corresponding transpose convolution layer. Finally, we pass the output of the UNet through a final transpose convolution with $C_{\\mathrm{out}}=2$ output channels, which are then smoothed by the SetConv decoder to obtain the interpolated mean and (log) standard deviation of the predictions at the target points. For all our experiments, we used $C_{\\mathrm{in}}=32,N=7$ and $C_{n}=256$ . We used a kernel size of 5 for all convolutions and transpose convolutions. ", "page_idx": 23}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/1e5fc6fc6f88dc065d57f1d53195c2ae74f8558aa36d8c9ae2781de5ffa1f826.jpg", "img_caption": ["Figure S2: Example model fits for the DPConvCNP on the EQ GP task. For all the above fits, a single amortised DPConvCNP is used, that is a DPConvCNP that has been trained on EQ GP data with randomly chosen lengthscales $\\ell\\sim\\mathcal{U}[0.20,2.50]$ and random privacy budgets, specifically $\\epsilon\\sim\\mathcal{U}[0.90,4.00]$ and $\\delta=10^{-3}$ . The first four rows correspond to $\\epsilon=1.00$ and the last four to $\\epsilon=3.00$ . We have fixed $\\delta=10^{-3}$ . Note that column-wise the datasets are fixed, and we are varying the context set size $N$ . "], "img_footnote": [], "page_idx": 24}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/03be1a6019662d8fac2093df8b7b26dc4d91d00fd6b53c9ffe2ed1c0d1850b17.jpg", "img_caption": ["Figure S3: Same as Figure S2, but with a different dataset seed. Example model fits for the DPConvCNP on the EQ GP task. For all the above fits, a single amortised DPConvCNP is used, that is a DPConvCNP that has been trained on EQ GP data with randomly chosen lengthscales $\\ell\\sim\\mathcal{U}[0.20,2.50]$ and random privacy budgets, specifically $\\epsilon\\sim\\mathcal{U}[0.90,4.00]$ and $\\delta=1\\bar{0}^{-3}$ . The first four rows correspond to $\\epsilon=1.00$ and the last four to $\\epsilon=3.00$ . We have fixed $\\delta=10^{-3}$ . Note that column-wise the datasets are fixed, and we are varying the context set size $N$ . "], "img_footnote": [], "page_idx": 25}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/ec3c1ec681701c7afc1f1367e213d611d10d3cbb91d7244c877c81ca81933d21.jpg", "img_caption": ["Figure S4: Example model fits for the DPConvCNP on the sawtooth task. For all the above fits, a single amortised DPConvCNP is used, that is a DPConvCNP that has been trained on sawtooth data with randomly chosen periods $\\tau^{-1}\\sim\\mathcal{U}[0.20,1.25]$ and random privacy budgets, specifically $\\epsilon\\sim\\mathcal{U}[0.90,4.00]$ and $\\delta=\\bar{1}0^{-3}$ . The first four rows correspond to $\\epsilon=1.00$ and the last four to $\\epsilon=3.00$ . We have fixed $\\delta=10^{-3}$ . Note that column-wise the datasets are fixed, and we are varying the context set size $N$ . "], "img_footnote": [], "page_idx": 26}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/f79d251ae627f6a4ac5778317a9cda06a66e70f2db76106d5bbb2ec862a55fbb.jpg", "img_caption": ["Figure S5: Same as Figure S4, but with a different dataset seed. Example model fits for the DPConvCNP on the sawtooth task. For all the above fits, a single amortised DPConvCNP is used, that is a DPConvCNP that has been trained on sawtooth data with randomly chosen periods $\\tau^{-1}\\sim\\mathcal{U}[0.20,1.25]$ and random privacy budgets, specifically $\\epsilon\\sim\\mathcal{U}[0.90,4.00]$ and $\\delta=10^{-3}$ . The first four rows correspond to $\\epsilon=1.00$ and the last four to $\\epsilon=3.00$ . We have fixed $\\delta=10^{-3}$ . Note that column-wise the datasets are fixed, and we are varying the context set size $N$ . "], "img_footnote": [], "page_idx": 27}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/e0dcc70ab3ebd891e16c2770c4186cb2c94204e534bfc3312f7782451f8630e7.jpg", "img_caption": ["Figure S6: Additional results using the DPConvCNP on the EQ and sawtooth synthetic tasks with stricter DP parameters, namely all combinations of $\\epsilon=\\{{^{1}}/{3},{1}\\}$ and $\\delta=\\{10^{-5},\\dot{1}0^{-3}\\}$ . The overall setup in this figure is identical to that in Figure 6, except the amortised DPConvCNP is trained on randomly chosen $\\epsilon\\sim\\mathcal{U}[1/3,1]$ and fixed $\\delta=10^{-5}$ or $\\mathrm{\\dot{1}0^{-3}}$ , and the non-amortised DPConvCNP models are trained on $\\epsilon$ and $\\delta$ values as indicated on the plots. Then, both amortised and non-amortised models are evaluated with the parameters shown on the plots. The DP-SVGP baseline was not run due to time constraints in the rebuttal period: it is significantly slower and more challenging to optimise than the DPConvCNP. We note that the amortisation gap, due to training a model to handle a continuous range of $\\epsilon$ values, is negligible. We also note that as the number of context points $N$ increases, the performance of the DPConvCNP approaches that of the oracle predictors. "], "img_footnote": [], "page_idx": 28}, {"type": "image", "img_path": "99rOAM7Jfm/tmp/8a1b289ce6350e062ff9eec84d04b07771f6286e504eaed667b6b34eab55ddec.jpg", "img_caption": ["Figure S7: Illustrations of model fits on the synthetic EQ and sawtooth tasks, using stricter DP paramters, for different context sizes $N$ . Left: model fits of amortised DPConvCNPs trained on EQ data using $\\epsilon\\sim\\mathcal{U}[1/3,1]$ and fixed $\\delta=10^{-3}$ (first column) or $\\delta=10^{-5}$ (second column) and evaluated on the DP parameters shown in the plots. Right: same as the left plot, except the data generating process is the sawtooth waveform rather than an EQ Gaussian process. We observe that the DPConvCNP produces sensible predictions even under strict privacy settings. "], "img_footnote": [], "page_idx": 28}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: The main claims of the paper, summarised at the end of the introduction accurately reflect the contributions of the paper made in Sections 4 and 5. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 29}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Justification: Limitations are discussed in Section 6. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 29}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: All novel theorems include either the full proof, or a proof idea with the reference to the full proof in the Appendix. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 30}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: Yes, we give all necessary details in the main text and appendix E, and provide our implementations in the supplementary material. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 30}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: The code is included in the supplementary material, and the Dobe !Kung dataset [Howell, 2009] is freely available, e.g. through TF datasets Abadi et al. [2016]. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 31}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: Yes, we give all necessary details in the main text and appendix E. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 31}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Justification: Error bars are reported when appropriate, and documented in the figure captions. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 31}, {"type": "text", "text": "", "page_idx": 32}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 32}, {"type": "text", "text": "Justification: Yes, these details are provided in Appendix E.4. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 32}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Justification: The paper conforms to the Code of Ethics. Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 32}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Justification: Broader impacts are discussed in Section 6. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 32}, {"type": "text", "text": "", "page_idx": 33}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: The paper does not pose such risks. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 33}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Justification: License for the Dobe !Kung dataset [Howell, 2009] is mentioned in the bibliography. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided. ", "page_idx": 33}, {"type": "text", "text": "\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 34}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 34}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 34}, {"type": "text", "text": "Justification: Documentation is included in the code. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 34}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 34}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 34}, {"type": "text", "text": "Justification: The paper does not include crowdsourcing experiments or research with human subjects. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 34}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 34}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 34}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 34}, {"type": "text", "text": "Justification: The paper does not include crowdsourcing experiments or research with human subjects. ", "page_idx": 34}, {"type": "text", "text": "Guidelines: ", "page_idx": 34}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 34}]