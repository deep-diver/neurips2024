[{"figure_path": "CcNw4mVIxo/figures/figures_0_1.jpg", "caption": "Figure 1: Comparison of event slicing methods. Traditional methods slice event streams based on prefixed time intervals (a) or event counts (b). In contrast, our approach (c) utilizes SNN as a dynamic event processor for adaptive event slicing. The sliced sub-event streams can be converted into various event representations with robust information and then applied to multiple downstream tasks.", "description": "This figure compares three different event slicing methods: fixed time intervals, fixed event counts, and adaptive slicing using a spiking neural network (SNN).  The fixed methods (a and b) demonstrate potential issues of either losing information in low-speed scenarios or creating redundancy in high-speed ones.  In contrast, the SNN-based approach (c) adapts the slicing dynamically, leading to robust event representation for downstream tasks such as object tracking, detection, and recognition.  The SNN acts as a dynamic event processor, improving information extraction by adapting to changing event density.", "section": "1 Introduction"}, {"figure_path": "CcNw4mVIxo/figures/figures_2_1.jpg", "caption": "Figure 2: Overview of our method. The input events are first fed into an SNN, and the event is determined to be sliced when a spike occurs. To find the accurate slicing time, the neighborhood search method explores other time steps, and feeds event representations to the downstream ANN model (e.g., object tracker or recognizer). The ANN model then offers feedback, which guides the SNN in firing spikes at the optimal slicing time by supervising the membrane potential through the Spiking Position-aware Loss LSPA.", "description": "This figure illustrates the architecture of SpikeSlicer, the proposed adaptive event stream slicing method.  Raw event streams are fed into a Spiking Neural Network (SNN). When the SNN fires a spike, it triggers an event slice.  A neighborhood search refines the slicing time. The resulting event representations are sent to a downstream Artificial Neural Network (ANN) (e.g., object tracker or recognizer). The ANN provides feedback that refines the SNN's slicing decisions via the Spiking Position-aware Loss (SPA-Loss).", "section": "3 Our Approach: SpikeSlicer"}, {"figure_path": "CcNw4mVIxo/figures/figures_4_1.jpg", "caption": "Figure 3: Empirical observations: (a) Hill effect in adaptive slicing process; (b) Impact of hyperparameter \u03b1 settings on TransT tracker [27] and (c) DiMP tracker [28].", "description": "This figure demonstrates empirical observations related to the proposed method. (a) shows the Hill effect in the adaptive slicing process, illustrating the dependence phenomenon between neighboring membrane potentials. (b) and (c) illustrate the impact of hyperparameter \u03b1 settings on the performance of TransT and DiMP trackers respectively, highlighting the challenges in finding the optimal value for \u03b1.", "section": "3.3 Spiking Position-aware Loss"}, {"figure_path": "CcNw4mVIxo/figures/figures_5_1.jpg", "caption": "Figure 1: Comparison of event slicing methods. Traditional methods slice event streams based on prefixed time intervals (a) or event counts (b). In contrast, our approach (c) utilizes SNN as a dynamic event processor for adaptive event slicing. The sliced sub-event streams can be converted into various event representations with robust information and then applied to multiple downstream tasks.", "description": "This figure compares three different event slicing methods.  (a) shows traditional fixed-duration slicing, where events are grouped into fixed-length time windows. This method can miss events in high-speed motion or have redundant data in slow-speed motion. (b) shows fixed-count slicing, where a fixed number of events are grouped together. This has similar limitations to (a). (c) shows the proposed SpikeSlicer method, which uses a spiking neural network (SNN) to dynamically slice the event stream. This adaptive method is more robust to varying speeds and object sizes.", "section": "1 Introduction"}, {"figure_path": "CcNw4mVIxo/figures/figures_6_1.jpg", "caption": "Figure 4: (a) Experiments on comparing different loss functions on a simple event slicing task. Our proposed Mem-Loss and LA-Loss require only a small number of iterations to supervise the SNN to activate spikes at the desired time steps; (b) Experiments on different hyperparameter settings. Our dynamic tuning method can stably converge towards the optimal spiking time (colored in green). In contrast, using a fixed \u03b1 results in unstable training and challenges in finding the optimal point.", "description": "This figure presents the results of experiments comparing different loss functions for training a spiking neural network (SNN) for event slicing. (a) shows that the proposed Mem-Loss and LA-Loss converge faster than other methods to achieve the desired spiking behavior. (b) demonstrates the advantage of dynamically tuning a hyperparameter (\u03b1) in stabilizing the training process and finding the optimal spiking time, outperforming a fixed \u03b1 setting.", "section": "4.1 Beginner's Arena: Event Slicing in Simple Tasks"}, {"figure_path": "CcNw4mVIxo/figures/figures_7_1.jpg", "caption": "Figure 5: Visualization results on FE108 dataset. The white box denotes the zoom-in area. Our adaptive event slicing method provides better tracking performance than fixed counterparts while enabling edge enhancement (a,b) and redundancy removal (c).", "description": "This figure compares the results of object tracking using the proposed SpikeSlicer method against a baseline method.  Subfigures (a), (b), and (c) show example tracking results, highlighting the superior performance of SpikeSlicer in terms of accuracy and robustness, particularly in handling challenging scenarios with complex motion and varying event density. The white boxes zoom in on specific areas to better illustrate the differences between the two methods.", "section": "Visualization of Adaptive Event Slicing"}, {"figure_path": "CcNw4mVIxo/figures/figures_7_2.jpg", "caption": "Figure 5: Visualization results on FE108 dataset. The white box denotes the zoom-in area. Our adaptive event slicing method provides better tracking performance than fixed counterparts while enabling edge enhancement (a,b) and redundancy removal (c).", "description": "This figure compares the results of object tracking using the proposed SpikeSlicer method against a baseline method using fixed event slicing.  The visualizations show that SpikeSlicer achieves better tracking accuracy and provides enhanced edges while removing redundant information compared to the baseline. This highlights the adaptive nature of the SpikeSlicer approach.", "section": "Visualization of Adaptive Event Slicing"}, {"figure_path": "CcNw4mVIxo/figures/figures_13_1.jpg", "caption": "Figure 7: Visualization of sensitivity analysis on N-Caltech101 dataset. The fluctuations in accuracy for different numbers of sliced event with different fixed slicing methods are significant, demonstrating that events are very sensitive to fixed slicing methods.", "description": "This figure shows the sensitivity analysis of fixed event slicing methods on the N-Caltech101 dataset.  It demonstrates that using fixed time intervals or fixed event counts to slice the event stream results in significant fluctuations in accuracy for various numbers of slices. This highlights the challenges of traditional event slicing techniques and underscores the need for a more adaptive approach like the one proposed by SpikeSlicer in the paper. Different models (ResNet18 and ResNet34) are used to assess the sensitivity.", "section": "C Sensitivity Analysis of Fixed Event Slicing Method"}, {"figure_path": "CcNw4mVIxo/figures/figures_16_1.jpg", "caption": "Figure 8: Visualization of the boundary cases when controlling the desired membrane potential, where the 'heart-like' point denotes the lower bound case and the 'moon-like' point denotes the upper bound case.", "description": "This figure illustrates the boundary conditions for the membrane potential (U[n*]) used in the membrane potential-driven loss (Mem-Loss) calculation within the Spiking Position-aware Loss (SPA-Loss) function. The lower bound ensures the membrane potential reaches the activation threshold (Vth) at the desired time step (n*), while the upper bound prevents premature spiking by limiting the membrane potential increase before n*.  The figure shows how the hyperparameter 'a' in equation 8 balances the desired membrane potential between the lower and upper bounds.", "section": "3.3 Spiking Position-aware Loss"}, {"figure_path": "CcNw4mVIxo/figures/figures_16_2.jpg", "caption": "Figure 9: Visualization of our expected linearly increasing membrane potential.", "description": "This figure illustrates the concept of the Linear-assuming Loss (LA-Loss) used in the Spiking Position-aware Loss (SPA-Loss). The LA-Loss addresses the issue of the \"Hill effect,\" where an early spike might prevent a later, desired spike. The figure shows two membrane potential curves: raw and supervised.  The supervised curve shows how the LA-Loss guides the membrane potential to increase linearly over time, ensuring that a spike occurs at the expected time (n*) without the interference from earlier spikes.", "section": "3.3 Spiking Position-aware Loss"}, {"figure_path": "CcNw4mVIxo/figures/figures_17_1.jpg", "caption": "Figure 2: Overview of our method. The input events are first fed into an SNN, and the event is determined to be sliced when a spike occurs. To find the accurate slicing time, the neighborhood search method explores other time steps, and feeds event representations to the downstream ANN model (e.g., object tracker or recognizer). The ANN model then offers feedback, which guides the SNN in firing spikes at the optimal slicing time by supervising the membrane potential through the Spiking Position-aware Loss LSPA.", "description": "This figure illustrates the overall process of SpikeSlicer. Raw events are fed to an SNN which triggers a spike indicating an optimal slicing point. A neighborhood search refines the slicing point, and the sliced events are sent to an ANN. ANN's feedback is used to optimize the SNN, thus creating a cooperative paradigm between SNN and ANN.", "section": "Our Approach: SpikeSlicer"}, {"figure_path": "CcNw4mVIxo/figures/figures_20_1.jpg", "caption": "Figure 1: Comparison of event slicing methods. Traditional methods slice event streams based on prefixed time intervals (a) or event counts (b). In contrast, our approach (c) utilizes SNN as a dynamic event processor for adaptive event slicing. The sliced sub-event streams can be converted into various event representations with robust information and then applied to multiple downstream tasks.", "description": "This figure compares three different event slicing methods.  Traditional methods use either fixed time intervals (method a) or a fixed number of events (method b) to slice the event stream. These methods can lead to information loss, particularly in scenarios with varying motion speeds. The proposed method (c) uses a spiking neural network (SNN) to adaptively slice the event stream, resulting in more robust information extraction for downstream tasks. The figure visually shows the differences in slicing patterns and the resulting event representations.", "section": "1 Introduction"}, {"figure_path": "CcNw4mVIxo/figures/figures_21_1.jpg", "caption": "Figure 1: Comparison of event slicing methods. Traditional methods slice event streams based on prefixed time intervals (a) or event counts (b). In contrast, our approach (c) utilizes SNN as a dynamic event processor for adaptive event slicing. The sliced sub-event streams can be converted into various event representations with robust information and then applied to multiple downstream tasks.", "description": "This figure compares three different event slicing methods: fixed time interval slicing, fixed count slicing, and the proposed adaptive event slicing method using a spiking neural network (SNN).  The fixed methods show limitations in handling events from varying speeds and densities, while the SNN-based adaptive method demonstrates more robust event stream slicing suitable for various downstream tasks.", "section": "Introduction"}]