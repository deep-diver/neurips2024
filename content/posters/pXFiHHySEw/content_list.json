[{"type": "text", "text": "Multi-Stage Predict+Optimize for (Mixed Integer) Linear Programs ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Xinyi $\\mathbf{H}\\mathbf{u}^{1}$ , Jasper C.H. Lee2, Jimmy H.M. Lee1, Peter J. Stuckey3 ", "page_idx": 0}, {"type": "text", "text": "1Department of Computer Science and Engineering, The Chinese University of Hong Kong, Shatin, N.T., Hong Kong 2Department of Computer Science, University of California, Davis, USA 3Department of Data Science and AI, Monash University, Clayton, Australia {xyhu,jlee} $@$ cse.cuhk.edu.hk, jasperlee $@$ ucdavis.edu, peter.stuckey $@$ monash.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "The recently-proposed framework of Predict+Optimize tackles optimization problems with parameters that are unknown at solving time, in a supervised learning setting. Prior frameworks consider only the scenario where all unknown parameters are (eventually) revealed at the same time. In this work, we propose Multi-Stage Predict+Optimize, a novel extension catering to applications where unknown parameters are instead revealed in sequential stages, with optimization decisions made in between. We further develop three training algorithms for neural networks (NNs) for our framework as proof of concept, all of which can handle mixed integer linear programs. The first baseline algorithm is a natural extension of prior work, training a single NN which makes a single prediction of unknown parameters. The second and third algorithms instead leverage the possibility of updating parameter predictions between stages, and trains one NN per stage. To handle the interdependency between the NNs, we adopt a sequential and parallelized versions of coordinate descent for training. Experimentation on three benchmarks demonstrates the superior learning performance of our methods over classical approaches. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Constrained optimization problems can frequently model applications in everyday life, yet, the parameters of the problem are unknown at the time of solving. Consider, for example, a real-world application where hospital administrators need to schedule shifts for nurses, so as to minimize the total costs for hiring nurses while meeting the patient load. Here, the shifts need to be decided before the (real-time) patient demand is known, which requires predicting the demand when scheduling. ", "page_idx": 0}, {"type": "text", "text": "In the present work, we focus on the supervised learning setting, where unknown parameters can be predicted using relevant features, and historical (features, parameters) pairs serve as training data for the prediction model. The goal is to estimate the unknown parameters based on the related features, such that when we solve the optimization problem using the estimated parameters, the resulting solution is good even under the later-revealed true parameters. ", "page_idx": 0}, {"type": "text", "text": "Classic approaches, for example by learning predictors using (regularized) $\\ell_{2}$ loss, do not necessarily work well \u2014 low prediction error in parameter space does not guarantee good performance of the estimated solution according to the optimization objective. The influential framework of Predict+Optimize proposed by Elmachtoub and Grigas [9] instead uses the more effective regret loss, which incorporates information about the optimization problem. However, the framework limits the unknown parameters to appear only in the objective and not the constraints \u2014 if uncertainty in constraints is mis-predicted, the resulting estimated solution might not even be feasible under the true parameters. Recent works by Hu et al. [15, 16] thus propose a Two-Stage adaptation of ", "page_idx": 0}, {"type": "text", "text": "Predict+Optimize, explicitly modelling 1) a prediction stage and 2) a recourse stage which corrects infeasible solutions into feasible ones. The new two-stage framework is therefore applicable even when the optimization constraints contain uncertainty. ", "page_idx": 1}, {"type": "text", "text": "However, the two-stage framework essentially assumes that all the unknown parameters are revealed simultaneously, excluding applications where such information is gradually released and new decisions need to be made across many stages (e.g. in a daily/weekly manner). Crucially, in these applications, predictions can also be updated between stages, in light of the new information and past committed actions. Consider again the example of scheduling shifts for nurses. A typical facility might have an appointment system, with reservations closing the day before each working day. As opposed to a two-stage modelling, a more practical approach would treat each day in a work week as its own stage where new information (the precise appointments the next day) is learned, inducing both new optimization decisions and updated predictions. ", "page_idx": 1}, {"type": "text", "text": "The concrete contributions of this paper are three-fold. ", "page_idx": 1}, {"type": "text", "text": "Framework We propose and formalize the new framework of Multi-Stage Predict $^+$ Optimize (Section 3), where unknown parameters are revealed across multiple stages, inducing new optimization decisions and updated parameter predictions. ", "page_idx": 1}, {"type": "text", "text": "Training algorithms The flexibility to update (future) parameter predictions in each stage introduces intricate challenges to the training process, which should train a prediction model per stage. The challenges are both in predictive power and in computation time. The performance of predictors across stages are intertwined and interdependent: the \u201cgoodness\u201d of a prediction depends on actions in other stages, which in turn depends on predictions of those other stages. Such dependency can also cause serialization issues that could drastically lengthen training time. ", "page_idx": 1}, {"type": "text", "text": "In Section 4, we propose three neural network training algorithms for our framework, assuming that the optimization problems can be formulated as mixed integer linear programs (MILPs): 1) a baseline algorithm that directly generalizes the two-stage algorithm of Hu et al. [16], training only a single neural network predictor, 2) a sequential coordinate descent training algorithm which trains a neural network model per stage, and each stage is considered a \u201ccoordinate\u201d, and 3) a parallel version of coordinate descent. These algorithms trade off between training time and predictive performance. ", "page_idx": 1}, {"type": "text", "text": "Empirical evaluation We apply these methods to three benchmarks (Section 5) to empirically demonstrate their superior learning performance over classical training methods, as well as the computation/prediction tradeoff between the proposed methods. ", "page_idx": 1}, {"type": "text", "text": "We note that there are other lines of work tackling similar settings, where unknown parameters in optimizations are also revealed in a sequential fashion. Perhaps the most well-known is multi-stage stochastic optimization [14, 30]. The main difference between our work and multi-stage stochastic optimization is supervised vs unsupervised learning. Our framework (and Predict $^{+}$ Optimize in general) has features that help making parameter predictions, whereas (non-contextual) stochastic optimization does not and requires different techniques to tackle. See Appendix A.3 for a detailed discussion on the connection and comparison between our framework and stochastic optimization. ", "page_idx": 1}, {"type": "text", "text": "Related Work We include a brief literature review here in the main body. See Appendix A for a detailed exposition. ", "page_idx": 1}, {"type": "text", "text": "Elmachtoub and Grigas proposed the influential framework of Predict+Optimize [9], with lots of followup work in the community on improving computational efficiency [23, 24], predictive accuracy [7, 18, 22], on types of applicable optimization problems [12, 17, 36], and applying to specific real-world scenarios [6, 34, 35]. More recently, Hu et al. [15, 16] proposed adaptations of the framework to handle uncertainty in optimization constraints, including the Two-Stage framework which our work is most related to. ", "page_idx": 1}, {"type": "text", "text": "Predict+Optimize also sits in a broader line of work on decision-focused learning, including works that learn prediction models for unknown parameters but with different goals/loss measures [25, 28], as well as other works that invent techniques for differentiating through optimization problems [1, 2, 36]. ", "page_idx": 1}, {"type": "text", "text": "Outside of decision-focused learning, our work is also somewhat related to (multi-stage) stochastic programming [14, 30]. The main difference, again, is supervised vs unsupervised learning. See Appendix A.3 for a more detailed comparison. ", "page_idx": 2}, {"type": "text", "text": "2 Background \u2014 Two-Stage Predict+Optimize ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In this section, we describe Two-Stage Predict+Optimize [16], which is prerequisite to understanding our contributions. Without loss of generality, the framework is stated for minimization problems. ", "page_idx": 2}, {"type": "text", "text": "A parameterized optimization problem (Para-OP) $P(\\theta)$ is defined as finding: ", "page_idx": 2}, {"type": "equation", "text": "$$\nx^{*}(\\theta)=\\arg\\operatorname*{min}_{x}o b j(x,\\theta)\\quad{\\mathrm{~s.t.~}}C(x,\\theta)\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "where $x$ is a vector of decision variables, $\\theta$ is a vector of parameters, $o b j$ is a function mapping decisions $x$ and parameters $\\theta$ to a real objective value that is to be minimized, and $C$ is a set of constraints that must be satisfied over $x$ under parameters $\\theta$ . We call $x^{*}(\\theta)$ an optimal solution under parameters $\\theta$ , and $o b j(x^{*}(\\theta),\\theta))$ the optimal value under parameters $\\theta$ . When the parameters are all known, a Para-OP is just a classical optimization problem (OP). ", "page_idx": 2}, {"type": "text", "text": "In the Predict+Optimize setting (from the original framework [9], to the two-stage framework [16], and to our multi-stage framework later on), each instantiation of the true parameter vector $\\theta$ has an associated feature matrix $A$ . These features are relevant information that can help a model predict $\\theta$ . ", "page_idx": 2}, {"type": "text", "text": "In the following, we number the stages by 0 and 1 in Two-Stage Predict+Optimize [16] to make the framework look more similar to the multi-stage framework we propose later in Section 3. ", "page_idx": 2}, {"type": "text", "text": "Stage 0 The practitioner uses a prediction model, which takes in a feature matrix $A$ , to compute a vector of estimated parameters $\\hat{\\theta}$ . The Stage 0 solution $\\scriptstyle{\\hat{x}}_{0}$ is then computed as ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\hat{x}^{(0)}=\\underset{x}{\\arg\\operatorname*{min}}\\;o b j(x,\\hat{\\theta})\\quad\\mathrm{~s.t.~}C(x,\\hat{\\theta})\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "The Stage 0 solution $\\hat{x}^{(0)}$ should be interpreted as a form of soft commitment that can be modified in Stage 1, subject to a penalty. ", "page_idx": 2}, {"type": "text", "text": "Stage 1 The true parameters $\\theta$ are revealed, and the practitioner wishes to compute an updated Stage 1 solution $\\hat{x}^{(1)}$ from $\\hat{x}^{(0)}$ , subject to a (problem-specific) penalty function $P e n\\bar{(}\\hat{x}^{(0)}\\rightarrow\\bar{\\hat{x}}^{(1)},\\theta)$ which depends on both the softly-committed Stage 0 $\\mid\\hat{x}^{(0)}$ , the final Stage 1 solution $\\hat{x}^{(1)}$ and the true parameters $\\theta$ . More specifically, the Stage 1 solution $\\hat{x}^{(1)}$ is computed as ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\hat{x}^{(1)}=\\operatorname*{arg\\,min}_{x}o b j(x,\\theta)+P e n(\\hat{x}^{(0)}\\rightarrow x,\\theta)\\ \\ \\ \\mathrm{s.t.}\\ C(x,\\theta)\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "The Stage 1 solution $\\hat{x}^{(1)}$ should be interpreted as a hard-committed final action, and note that it is guaranteed to be feasible under the true parameters $\\theta$ . ", "page_idx": 2}, {"type": "text", "text": "The prediction $\\hat{\\theta}$ is evaluated using the post-hoc regret [16], which is the sum of two terms: (a) the difference in objective between the true optimal solution $x^{*}(\\theta)$ and the final Stage 1 solution $\\hat{x}^{(1)}$ under the true parameters $\\theta$ , and (b) the penalty incurred by modifying $\\hat{x}^{(0)}$ to $\\hat{x}^{(1)}$ . Formally, the post-hoc regret function $P R e g({\\hat{\\theta}},\\theta)$ (for minimization problems) is: ", "page_idx": 2}, {"type": "equation", "text": "$$\nP R e g(\\hat{\\theta},\\theta)=\\;o b j(\\hat{x}^{(1)},\\theta)-o b j(x^{*}(\\theta),\\theta)+P e n(\\hat{x}^{(0)}\\rightarrow\\hat{x}^{(1)},\\theta)\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "The goal of a prediction model is to make predictions $\\hat{\\theta}$ so as to minimize the post-hoc regret. We emphasize again that the main difference between Predict $^+$ Optimize frameworks and stochastic programming frameworks is that in Predic $^{+}$ Optimize, a prediction model has access to features relevant to the true parameters in order to make a prediction. Stochastic programming, on the other hand, frequently operates solely at the level of the distribution over the true parameters. ", "page_idx": 2}, {"type": "text", "text": "3 Multi-Stage Predict+Optimize ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we present our new framework of Multi-Stage Predict+Optimize, which models applications where unknown parameters are revealed across $T$ different stages. ", "page_idx": 3}, {"type": "text", "text": "Consider again the Para-OP ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{x}^{*}(\\pmb{\\theta})=\\underset{\\mathbf{x}}{\\arg\\operatorname*{min}}\\;o b j(\\mathbf{x},\\pmb{\\theta})\\quad\\mathrm{~s.t.~}C(\\mathbf{x},\\pmb{\\theta})\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "We view the true parameter vector $\\pmb{\\theta}$ as $(\\theta_{1},\\ldots,\\theta_{T})$ , where each $\\theta_{t}$ is the sub-vector of parameters released at Stage $t$ . Similarly, we also view the vector of decision variables $\\mathbf{x}$ as $(x_{0},\\ldots,x_{T})$ , where each $x_{t}$ is the sub-vector of decision variables that are hard-committed in Stage $t$ (e.g. via a concrete real-world action taken at Stage $t$ ) and soft-committed in prior stages (e.g. a tentative nurse schedule). ", "page_idx": 3}, {"type": "text", "text": "At a high level, the parameters $\\theta_{t}$ are revealed at Stage $t$ , and a model makes a prediction $\\hat{\\pmb{\\theta}}^{(t)}=$ $(\\hat{\\theta}_{t+1}^{(t)},\\cdot\\cdot\\cdot,\\hat{\\theta}_{T}^{(t)})$ , \u03b8\u02c6(Tt )) of all the unrevealed parameters. Then, the practitioner solves the Stage t optimization problem which we define later in the section. The decision variables $x_{t}$ are newly hard-committed, whereas the decision variables $x_{t+1},\\dots,x_{T}$ are soft-committed with potential to be modified in future stages (at the cost of a penalty). This process is repeated until all stages are completed. ", "page_idx": 3}, {"type": "text", "text": "In the rest of the section and paper, we will use the standard notation of $\\pmb\\theta[t_{1}:t_{2}]=(\\theta_{t_{1}},\\dots,\\theta_{t_{2}})$ to denote sub-vectors (treated as arrays), and use the notation $\\bigoplus$ for vector concatenation. ", "page_idx": 3}, {"type": "text", "text": "3.1 Formal Framework Definition ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Now we formally define Multi-Stage Predict $^{\\cdot+}$ Optimize framework. In Appendix B, we also present the hospital scenario from the Introduction as a detailed example of applying this framework. ", "page_idx": 3}, {"type": "text", "text": "Stage 0 None of the true parameters have been revealed. $M o d e l_{0}$ takes the feature matrix $A$ and predicts $\\hat{\\pmb{\\theta}}^{(0)}=(\\hat{\\theta}_{1}^{(0)},\\dots,\\hat{\\theta}_{T}^{(0)})$ . The practitioner then computes the Stage 0 solution $\\hat{x}^{(0)}$ as ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{x}^{(0)}=\\underset{x}{\\arg\\operatorname*{min}}\\,o b j(x,\\hat{\\pmb{\\theta}}^{(0)})\\ \\ \\ \\mathrm{s.t.}\\ C(x,\\hat{\\pmb{\\theta}}^{(0)})\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The decision variables $\\hat{x}_{0}^{(0)}$ are hard commitments, whereas the rest of the decision vector $\\hat{x}_{1}^{(0)},\\dots,\\hat{x}_{T}^{(0)}$ are soft commitments. ", "page_idx": 3}, {"type": "text", "text": "Stage $t$ (for $1\\leq t\\leq T$ ) The true parameters $\\theta_{1},\\ldots,\\theta_{t-1}$ were previously revealed, and $\\theta_{t}$ is newly revealed. Modelt makes a prediction \u03b8\u02c6(t) = (\u03b8\u02c6t(t+)1, $\\hat{\\pmb{\\theta}}^{(t)}=(\\hat{\\theta}_{t+1}^{(t)},\\dots,\\hat{\\theta}_{T}^{(t)})$ . . . , \u03b8\u02c6T ) using 1) the feature matrix A, 2) the previous stage solution $\\hat{x}^{(t-1)}$ and 3) the revealed true parameters $\\theta_{1},\\ldots,\\theta_{t}$ . For computational efficiency reasons, $M o d e l_{t}$ may instead take any subset or derived functions of the above inputs. For example, $M o d e l_{t}$ can choose whether or not to incorporate the revealed true parameters $\\theta_{1},\\ldots,\\theta_{t}$ as input. While these revealed parameters can serve as additional features, potentially guiding and correcting current predictions more effectively, they also increase training time (and inference time to a smaller extent). The trade-off between prediction improvement and additional training time depends on the optimization problem, model structure, and training data. Therefore, whether to utilize the revealed true parameters can be considered a hyperparameter that should be tuned for each application using the available training data. See Appendix H.1 for a more detailed discussion. ", "page_idx": 3}, {"type": "text", "text": "Afterwards, the practitioner computes the Stage $t$ solution $\\hat{x}^{(t)}$ using the following Stage $t$ optimization problem, which crucially modifies the original Para-OP by: 1) introducing a penalty term $P e n_{t}(\\hat{x}^{(t-1)}\\rightarrow x,\\pmb{\\theta}[1:t])$ capturing the cost of changing the Stage $t-1$ solution $\\hat{x}^{(t-1)}$ to the new Stage $t$ solution $x$ , and 2) introducing the constraint that $x[1:t-1]=\\hat{x}^{(t-1)}[1:t-1]$ , namely, hard commitments from prior stages cannot be modified in the current Stage $t$ . This constraint is a form of a non-anticipativity constraint in the stochastic programming literature [14]. ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\hat{x}^{(t)}=}&{\\;\\arg\\operatorname*{min}_{}o b j(x,\\pmb{\\theta}[1:t]\\oplus\\hat{\\pmb{\\theta}}^{(t)})+P e n_{t}(\\hat{x}^{(t-1)}\\rightarrow x,\\pmb{\\theta}[1:t])}\\\\ &{\\;\\;\\;\\;x}\\\\ {\\mathrm{s.t.}}&{\\;C(x,\\pmb{\\theta}[1:t]\\oplus\\hat{\\pmb{\\theta}}^{(t)})\\quad\\mathrm{~and~}\\quad x[1:t-1]=\\hat{x}^{(t-1)}[1:t-1]}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The Stage $t$ solution, by construction, has $\\hat{x}^{(t)}[1\\,:\\,t\\,-\\,1]$ being equal/compatible with the hard commitments from prior stages. The new hard commitments are $\\hat{x}_{t}^{(t)}$ , and the rest of the decision vector ${\\hat{x}}^{(t)}[t+1:T]$ are new soft commitments we make for the future stages. ", "page_idx": 4}, {"type": "text", "text": "At $t=T$ , the prediction $\\hat{\\pmb{\\theta}}^{(T)}$ is a length-0 vector since all the true parameters will have been revealed. ", "page_idx": 4}, {"type": "text", "text": "For the rest of the paper, we make the assumption that these Stage $t$ optimizations are always satisfiable, regardless of the prior stage solutions, prior+current predictions and revealed parameters. For practical applications, this assumption is both natural and essential. In real-world scenarios, encountering an unsatisfiable condition can lead to catastrophic outcomes. Therefore, before using the application, the domain expert should always have designed the underlying real-world system to have recourse actions to mitigate bad prior commitments (at cost/penalty) and to prevent catastrophe, and furthermore model such recourse actions in the (multi-stage) optimization problem. Any system and the corresponding formulation of multi-stage optimization problem lacking such recourse should not be used/executed. It is thus a reasonable assumption and a practical responsibility our framework asks of the practitioner, that recourse actions are always designed into the underlying system and modelled, so that our feasibility assumption is satisfied. ", "page_idx": 4}, {"type": "text", "text": "Evaluation: The sequence of predictions $\\hat{\\pmb{\\theta}}^{(0)},\\dots,\\hat{\\pmb{\\theta}}^{(T)}$ , which along with the true parameters $\\pmb{\\theta}$ induces the sequence of solutions $\\hat{x}^{(0)},\\ldots,\\hat{x}^{(T)}$ , is evaluated using a generalized notion of post-hoc regret, defined as follows (for a minimization problem): ", "page_idx": 4}, {"type": "equation", "text": "$$\nP R e g((\\hat{\\theta}^{(0)},\\dots,\\hat{\\theta}^{(T)}),\\theta)=o b j(\\hat{x}^{(T)},\\theta)-o b j(x^{*}(\\theta),\\theta)+\\sum_{t}P e n_{t}(\\hat{x}^{(t-1)}\\rightarrow\\hat{x}^{(t)},\\theta[1:t])\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $x^{*}(\\pmb\\theta)$ is again the optimal in-hindsight vector of decisions for the original Para-OP. ", "page_idx": 4}, {"type": "text", "text": "We note that if a problem has only 2 stages (Stages 0 and 1), then our framework of Multi-Stage Predict+Optimize indeed captures Two-Stage Predict+Optimize described in Section 2. ", "page_idx": 4}, {"type": "text", "text": "4 End-to-End Training Algorithms on MILPs ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In this section, we give 3 training algorithms for neural network models for the Multi-Stage Predict+Optimize framework, under the assumption that all Stage $t$ optimization problems can be formulated as (mixed integer) linear programs (MILPs). ", "page_idx": 4}, {"type": "text", "text": "The first training algorithm, our baseline (Section 4.1), is a straightforward generalization of the one proposed for the two-stage framework [16]. This algorithm only trains a single neural network and reuses the same parameter predictions across all stages. Although the approach is computationally efficient, it fails to fully exploit the power of the framework, which allows for predictions to be updated at each stage. ", "page_idx": 4}, {"type": "text", "text": "Our second and third algorithms (Sections 4.2 and 4.3) instead train one neural network per stage, each making new parameter predictions for the corresponding stage. As mentioned in Section 1, it is delicate to train these neural networks. The quality of a prediction in one stage depends on decisions in other stages, which in turn depends on predictions made in those other stages. To handle this dependency, we employ a coordinate-descent strategy, where each stage/neural network is a coordinate. We present both a sequential version and a parallel version of this strategy as training algorithms, which trade off between training time (sequential being slower) and predictive performance. ", "page_idx": 4}, {"type": "text", "text": "We also point out that it is technically possible to train all networks simultaneously, without using coordinate descent like in Sections 4.2 and 4.3. To do so, we would instead use ground truth parameters in place of prior and future stage predictions. However, intuitively, this simpler approach should have worse predictive ability than the proposed two methods, given the interdependency of the predictors. We show experimental comparisons in Appendix H.2 confirming this intuition. ", "page_idx": 4}, {"type": "text", "text": "In Section 5, we show empirical results comparing these algorithms and classic non-Predict+Optimize learning algorithms (e.g. standard regression models), which demonstrate that even our baseline training approach outperforms classic non-Predict+Optimize algorithms. Also, our more sophisticated approaches yield even better learning performance, at the cost of additional training time. ", "page_idx": 4}, {"type": "text", "text": "4.1 Baseline: Extending the Two-Stage Approach to Train a Single Neural Network ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We first present a baseline Predict+Optimize training algorithm for our multi-stage setting, via a natural extension of the two-stage approach [16]. ", "page_idx": 5}, {"type": "text", "text": "This baseline algorithm trains a single neural network $N N$ , which takes a feature matrix $A$ and returns the prediction $\\hat{\\pmb{\\theta}}=N\\!N(\\boldsymbol{A})$ . The same predictions are then reused across all the stages. More specifically, in the language of Section 3, we choose ${\\hat{\\pmb{\\theta}}}^{(t)}={\\hat{\\pmb{\\theta}}}[t+1:T]$ for this basic approach. ", "page_idx": 5}, {"type": "text", "text": "We use standard gradient methods to train the neural network $N N$ , with the goal of minimizing post-hoc regret as defined in Section 3: ", "page_idx": 5}, {"type": "equation", "text": "$$\nP R e g=o b j(\\hat{x}^{(T)},\\theta)-o b j(x^{*}(\\theta),\\theta)+\\sum_{t}P e n_{t}(\\hat{x}^{(t-1)}\\rightarrow\\hat{x}^{(t)},\\theta[1:t])\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Noting the second term is independent of $\\hat{\\pmb\\theta}^{(0)}$ and hence $N N$ , the gradient with respect to an edge weight $w_{e}$ in $N N$ is ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\,P R e g}{\\mathrm{d}w_{e}}=\\frac{\\mathrm{d}\\,o b j(\\hat{x}^{(T)},\\pmb{\\theta})}{\\mathrm{d}w_{e}}+\\sum_{t=1}^{T}\\frac{\\mathrm{d}\\,P e n_{t}(\\hat{x}^{(t-1)}\\rightarrow\\hat{x}^{(t)},\\pmb{\\theta}[1:t])}{\\mathrm{d}w_{e}}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "By the law of total derivative, we can expand this to ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{1}P R e g}{\\mathrm{d}w_{e}}=\\frac{\\mathrm{d}\\,o b j(\\hat{x}^{(T)},\\theta)}{\\mathrm{d}\\hat{x}^{(T)}}\\frac{\\mathrm{d}\\hat{x}^{(T)}}{\\mathrm{d}\\hat{\\theta}}\\frac{\\mathrm{d}\\hat{\\theta}}{\\mathrm{d}w_{e}}+\\sum_{t=1}^{T}\\left(\\left.\\frac{\\partial\\,P e n_{t}}{\\partial\\hat{x}^{(t-1)}}\\right|_{\\hat{x}^{(t)}}\\frac{\\mathrm{d}\\hat{x}^{(t-1)}}{\\mathrm{d}\\hat{\\theta}}+\\left.\\frac{\\partial\\,P e n_{t}}{\\partial\\hat{x}^{(t)}}\\right|_{\\hat{x}^{(t-1)}}\\frac{\\mathrm{d}\\hat{x}^{(t)}}{\\mathrm{d}\\hat{\\theta}}\\right)\\frac{\\mathrm{d}\\hat{\\theta}}{\\mathrm{d}w_{e}}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "The term $\\frac{\\mathrm{d}\\hat{\\theta}}{\\mathrm{d}w_{e}}$ is calculated via standard backpropagation, while the terms $\\frac{\\textrm{d}o b j(\\hat{x}^{(T)},\\pmb{\\theta})}{\\textrm{d}\\hat{x}^{(T)}}$ , $\\left.\\frac{\\partial\\,P e n_{t}}{\\partial\\hat{x}^{(t-1)}}\\right|_{\\hat{x}^{(t)}}$ and \u2202\u2202Px\u02c6 (etn)t  x\u02c6(t\u22121) are calculable when the objective and penalty functions are smooth. The only non-trivial calculation is for dx\u02c6(\u02c6t) for all $t\\in[T]$ . ", "page_idx": 5}, {"type": "text", "text": "Recall that ${\\hat{x}}^{(t)}$ is computed from the Stage $t$ optimization problem, as a deterministic function of $\\hat{x}^{(t-1)}$ and $\\hat{\\pmb{\\theta}}^{(t)}$ (which is a sub-vector of $\\hat{\\pmb{\\theta}}$ here, since we reuse predictions), while $\\hat{x}^{(t-1)}$ itself also depends on $\\hat{\\pmb\\theta}$ . We thus further decompose $\\frac{\\mathrm{d}\\hat{x}^{(t)}}{\\mathrm{d}\\hat{\\theta}}$ into the following recursive computation ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\hat{x}^{(t)}}{\\mathrm{d}\\hat{\\theta}}=\\left.\\frac{\\partial\\hat{x}^{(t)}}{\\partial\\hat{x}^{(t-1)}}\\right|_{\\hat{\\theta}}\\frac{\\mathrm{d}\\hat{x}^{(t-1)}}{\\mathrm{d}\\hat{\\theta}}+\\left.\\frac{\\partial\\hat{x}^{(t)}}{\\partial\\hat{\\theta}}\\right|_{\\hat{x}^{(t-1)}}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Calculating \u2202\u2202x\u02c6(x\u02c6t\u22121) $\\left.\\frac{\\partial\\hat{x}^{(t)}}{\\partial\\hat{x}^{(t-1)}}\\right|_{\\hat{\\theta}}$ and \u2202x\u02c6(t) $\\left.\\frac{\\partial\\hat{x}^{(t)}}{\\partial\\hat{\\pmb{\\theta}}}\\right|_{\\hat{x}^{(t-1)}}$ requires differentiating through a MILP. So instead of directly using MILP formulations for the Stage $t$ optimization problems, we use the convex relaxation by $\\operatorname{Hu}$ et al. [16], which in turn adapts the approach of Mandi and Guns [22]. ", "page_idx": 5}, {"type": "text", "text": "We also note that it is possible to use other convex relaxations and approaches to differentiate through the MILP, for example using tools like CvxpyLayers [1]. We chose Hu et al.\u2019s calculations because their experiments showed the computational efficiency of their approach over other tools. ", "page_idx": 5}, {"type": "text", "text": "4.2 Sequential Coordinate Descent ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Training only one neural network, the baseline algorithm is efficient but fails to fully harness the power of the framework in Section 3. Each stage $t$ makes new decisions, and the \u201cgoodness\u201d of future decisions depends on these previously committed decisions. Thus, new predictions should be made each stage for future parameters, based on prior-stage optimization decisions, so as to yield current and future optimization decisions that work well with the already-committed ones. However, the baseline algorithm ignores this information and does not update the predictions accordingly. ", "page_idx": 5}, {"type": "text", "text": "We thus propose our second training algorithm, which trains one neural network per stage, from Stages 0 to $T-1$ . The neural network $N N_{t}$ for Stage $t$ takes the feature matrix $A$ as input, as well as all the prior decision vector $\\hat{x}^{(t-1)}$ , and outputs the prediction $\\hat{\\pmb{\\theta}}^{(t)}$ for parameters $\\pmb{\\theta}[t+1:T]$ The astute reader might recall that the proposed framework in Section 3 allows $N N_{t}$ to utilize the revealed parameters from stage $t-1$ as additional features as input. However, preliminary experiments in Appendix H.1 indicated that including such parameters does not really enhance prediction quality, while merely increasing training time. Therefore, in our current implementation, $N N_{t}$ does not include these revealed parameters. In general, however, such choice should be treated as a hyperparameter and made for each application. ", "page_idx": 5}, {"type": "table", "img_path": "pXFiHHySEw/tmp/826948d36885aabb45c81b913d0ca96b32d48937eeddc0cb6c2ec180cd77996c.jpg", "table_caption": ["Algorithm 1: Sequential and Parallel Coordinate Descent Approaches "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "To address the dependency between the neural networks, we employ a coordinate descent approach, where each stage/neural network is treated as a \u201ccoordinate\u201d. We train the neural networks $N\\!N_{0},\\dots,N\\!N_{T-1}$ in cyclic order, repeating until termination (e.g. convergence or timeout). See Algorithm 1 for high-level pseudocode description of this sequential coordinate descent approach, as well as the parallelized version described in the next subsection. ", "page_idx": 6}, {"type": "text", "text": "Concretely, we train $N N_{t}$ by considering all the other neural networks as fixed. Here, we will focus on describing the forward pass, since the backward pass gradient computations follow essentially the same strategy described in Section 4.1 \u2014 see Appendix C for details of the gradient computations. ", "page_idx": 6}, {"type": "text", "text": "Forward pass Consider a historical (feature, parameter) pair $(A,\\theta)$ . We first iteratively generate the sequence of solutions $\\hat{x}^{(0)},\\ldots,\\hat{x}^{(t)}$ using $\\hat{\\pmb{\\theta}}^{(i)}=N N_{i}(A,\\hat{x}^{(i-1)})$ for $i\\in[0,t-1]$ . Then, we compute the Stage $t$ prediction $\\hat{\\pmb{\\theta}}^{(t)}\\,=\\,N N_{t}\\bigl({\\cal A},\\hat{x}^{(t-1)}\\bigr)$ , and generate the remaining sequence of solutions $\\hat{x}^{(t)},\\ldots,\\hat{x}^{(T)}$ using $\\hat{\\pmb{\\theta}}^{(i)}=\\hat{\\pmb{\\theta}}^{(t)}[i+1:T]$ for $i\\in[t,T]$ . ", "page_idx": 6}, {"type": "text", "text": "Backward pass The goal is to compute the derivative of the post-hoc regret with respect to each edge weight $w_{e}$ of $N N_{t}$ . Similar to Section 4.1, instead of directly using the MILP formulation of all the Stage $t$ optimization problems in the forward pass, we use the convex relaxation of $\\operatorname{Hu}$ et al. and Mandi and Guns. This allows us to differentiate the modified (due to convex relaxations) post-hoc regret with respect to each $w_{e}$ in $N N_{t}$ . As mentioned, the calculations are quite similar to those in Section 4.1, and so we defer them to Appendix C. ", "page_idx": 6}, {"type": "text", "text": "Experimental results in Section 5 demonstrate that the sequential coordinate descent training approach outperforms both the classic non-Predict+Optimize methods and the baseline Predict+Optimize approach from Section 4.1. ", "page_idx": 6}, {"type": "text", "text": "We note that in the above description of the training implementation of $N N_{t}$ , there is a lot of repeated computation that can be pre-computed and reused. Since, during coordinate descent, the prior neural networks $N N_{0},\\ldots,N N_{t-1}$ are considered fixed, the solutions $\\bar{(x^{(0)},\\ldots,\\hat{x}^{(t-1)})}$ are also fixed for a given (features, parameters) pair $(A,\\theta)$ no matter how $N N_{t}$ is updated during training. Thus, for each $(A,\\theta)$ we always pre-compute and save the sequence of solutions $(\\hat{x}^{(0)},\\cdot\\cdot\\cdot,\\hat{x}^{(t-1)})$ , and only recompute $(\\hat{x}^{t},\\cdot\\cdot\\cdot,\\bar{\\hat{x}}^{T})$ as we update $N N_{t}$ through training gradient steps. ", "page_idx": 6}, {"type": "text", "text": "4.3 Parallel Coordinate Descent ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "While the sequential coordinate descent training approach yields accurate predictors, the computational cost is also high. Training a single neural network already requires solving sequences of optimization problems over many iterations; the serialization from training the neural networks one at a time can make the resulting training time prohibitive for applications. ", "page_idx": 6}, {"type": "text", "text": "We thus propose to parallelize the coordinate descent approach, slightly sacrificing prediction quality for efficiency. In each coordinate descent step, we train all the neural networks in parallel. When training a particular neural network $N N_{t}$ , we use copies of $N_{0},...\\,,N_{t-1},N_{t+1},...\\,,N_{T-1}$ from the previous descent step, but otherwise the training implementation remain the same as in Section 4.2. See also Algorithm 1. ", "page_idx": 6}, {"type": "text", "text": "This simple change drastically improves running time (Appendix G), while only slightly decreases predictive accuracy: the post-hoc regret of models trained using parallel coordinate descent sits between that of the baseline training algorithm and the sequential coordinate descent approach. ", "page_idx": 7}, {"type": "text", "text": "5 Experimental Evaluation ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We evaluate the proposed 3 training algorithms: Baseline, Sequential Coordinate Descent (SCD), and Parallel Coordinate Descent (PCD) on 3 benchmarks described in Appendix D. We compare these algorithms to classic non-Predict+Optimize regression models [10]: ridge regression (Ridge), $k$ -nearest neighbors ( $k$ -NN), classification and regression tree (CART), random forest (RF), and neural network (NN). The single predictions from these classical regression models are used in test time identically to our Baseline approach (Section 4.1). We tune all algorithm hyperparameters via cross-validation \u2014 Appendix E gives all the hyperparameter types and chosen values. In particular, the termination criteria for SCD and PCD in Algorithm 1 are based on a threshold that measures the difference in training set post-hoc regrets between two (outermost) iterations of the training coordinate descent. This threshold is also treated as a hyperparameter that was tuned per each application; in the experiments presented in this paper, we used a threshold of 0.1. ", "page_idx": 7}, {"type": "text", "text": "Due to space limitations, we present only the best results obtained among all standard regression methods (BAS) as one column in the main paper. See Appendix F for full results. Furthermore, we report mainly the prediction accuracy \u2014 see Appendix G for computational setup and detailed runtime comparisons. ", "page_idx": 7}, {"type": "text", "text": "Given the lack of datasets specific to these benchmarks, we follow a standard Predict+Optimize experimental approach [16, 24, 7] and use real data from different problems as numerical values in our experiment instances. We include details in the individual subsections. For each benchmark, we run 30 simulations, each simulation containing a 70/30 training/test data split. ", "page_idx": 7}, {"type": "text", "text": "5.1 Production and Sales Problem ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Our first benchmark is a linear programming (LP) problem. An oil company is developing a production and sales plan for the upcoming $T$ quarters/months. The company aims to maximize profits \u2014 sales revenues minus production costs \u2014 under the constraint that the amount of oil sold each quarter/month cannot exceed the customer demands. The production cost and sales price for each quarter/month are known, but the demand is revealed only at the beginning of each quarter/month after the company receives the orders. See Appendix D.1 for the detailed description and LP model. ", "page_idx": 7}, {"type": "text", "text": "We generate production costs and sales prices following the method by Ardjmand et al. [3]. Production costs are randomly generated from [50, 100]. Two groups of sales prices are considered: low-profit product prices are randomly generated from [50, 100]; high-profti product prices are from [120, 150]. Customer demands are the unknown parameters and need prediction \u2014 we use real data from a knapsack benchmark [28] as demand parameters, where each parameter is related to 4096 features. ", "page_idx": 7}, {"type": "text", "text": "We conduct experiments on $T\\,=\\,\\{4,12\\}$ , corresponding to 4 quarters or 12 months. For NN, Baseline, SCD, and PCD, we use 5-layer fully connected networks with 512 neurons per hidden layer. ", "page_idx": 7}, {"type": "text", "text": "Table 1 reports the mean post-hoc regrets and standard deviations across 30 simulations for the proposed 3 methods and BAS on the problem. Appendix F.1 gives a full data table (Table 5) with all standard regression methods. We also report the mean and standard deviations of True Optimal Values (TOV) in the last column \u2014 optimal objective under true parameters in hindsight \u2014 for readers to use as (rough) normalization for relative errors. The results demonstrate the advantage of Predict+Optimize methods. All three proposed methods, even Baseline, beat all standard regression methods. SCD consistently achieves the best performance, followed closely by PCD. Baseline falls between the two coordinate descent methods. ", "page_idx": 7}, {"type": "text", "text": "In Appendix F.1, Table 6 shows the percentage improvements of the proposed 3 methods against BAS. From that table, we observe that the advantage of our methods increases with the number of stages. ", "page_idx": 7}, {"type": "text", "text": "Considering the relatively large standard deviations in Table 1, to show the substantial performance improvements clearly, we provide \u201cwin rate\u201d results in Figure 1 and related information in Table 7 in Appendix F.1. Here, \u201cwin rate\u201d refers to counting the number of simulations (out of 30) where a method outperforms another. Table 7 reports win rate results among Baseline, SCD, PCD, and BAS, and Figure 1 further compares the proposed methods against BAS across each individual simulation. Both the table and figure show that SCD outperforms BAS in all simulations, while PCD and Baseline outperform BAS in most simulations. ", "page_idx": 7}, {"type": "table", "img_path": "pXFiHHySEw/tmp/deaaec68666f38034dffe779364199e28c0edf9522374edf8afc39632c6a5c77.jpg", "table_caption": ["Table 1: Mean post-hoc regrets and standard deviations for the production and sales problem. "], "table_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "pXFiHHySEw/tmp/a7681e7d918c83d1dda876572ae6bdde4e42d935d9226ca20d9de46a2de41032.jpg", "table_caption": ["Table 2: Mean post-hoc regrets and standard deviations for the investment problem when capita $=\\!50$ . "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "5.2 Investment Problem ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Our second benchmark shows our framework on a MILP problem. The task is to create an investment plan for trading financial products over a year, under limited capital. The net profit consists of: 1) dividends gained from holding products, 2) market price of products in the portfolio at the end of the year and 3) net profits from trading products (selling price minus buying price) minus trading transaction fees. For simplicity, we assume that transaction fees are linear in the products\u2019 market prices. We call the proportionality constant the transaction factor, which we vary across experiments. ", "page_idx": 8}, {"type": "text", "text": "The market price of (resp. dividends from owning) each product in each quarter/month is revealed only at the beginning (resp. end) of the quarter/month, requiring predictions. As with the previous benchmark, we use real data from a knapsack benchmark [28] for parameters needing prediction. The detailed problem description and the MILP formulation are in Appendix D.2 ", "page_idx": 8}, {"type": "text", "text": "We conduct experiments on five financial products, and $T=\\{4,12\\}$ , corresponding to 4 quarters or 12 months. We consider two different initial capital values: 25 and 50, and three different transaction factors: 0.01, 0.05, or 0.1. For NN, Baseline, SCD and PCD, we again use a 5-layer fully connected network with 512 neurons per hidden layer. ", "page_idx": 8}, {"type": "text", "text": "Table 2 reports the mean post-hoc regrets and standard deviations across 30 simulations for the proposed three methods and BAS on the problem when capita $=\\scriptstyle50$ . We report full data tables (Tables 8 and 9) in Appendix F.2. TOVs are reported in the last column, again for reference. The results confirm the performance ordering of $\\mathrm{SCD}>\\mathrm{PCD}>\\mathrm{E}$ aseline $>$ classical regression methods. ", "page_idx": 8}, {"type": "text", "text": "Table 10 in Appendix F.2 presents the percentage improvement of our proposed methods against BAS. Curiously, contrasting the previous benchmark, the advantage of our methods against BAS appears to be non-increasing with the number of stages. We hypothesize this is an LP versus MILP issue \u2014 training for this benchmark required relaxing integrality constraints, introducing more approximations with more stages. It is interesting future work to study if the performance decay in the number of stages is a general phenomenon for MILPs and if it can be mitigated. ", "page_idx": 8}, {"type": "text", "text": "For the investment problem benchmark, we again provide win rate results in Table 11 in Appendix F.2. The results show that the proposed 3 methods outperform BAS in more than $96.67\\%$ of the simulations. ", "page_idx": 8}, {"type": "text", "text": "5.3 Nurse Rostering Problem ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Our last benchmark is the nurse rostering MILP problem described in Section 1. The task is to minimize the costs of hiring nurses to meet the (unknown) patient demands. After each stage\u2019s patient demands are revealed, the admin can modify future rosters at cost, and hire extra temporary nurses at higher salary in case of understaffing. See Appendix B for a detailed description of the model. ", "page_idx": 8}, {"type": "table", "img_path": "pXFiHHySEw/tmp/a891244f92c1f37b198a53bd3e1a80a09d8a4898d5f7ccab3d14c386ec771ec1.jpg", "table_caption": ["Table 3: Mean post-hoc regrets and standard deviations for the nurse rostering problem. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Each problem instance consists of 10 regular nurses and 7 days (stages). Extra nurses come at a cost of $\\{15,20,25,30\\}$ in different experiments. Due to the longer solving time for these MILPs, we use real data from the ICON scheduling competition [32] as the numerical values for patient demands, where each demand value is related to 8 features as opposed to 4096 features in previous benchmarks. Given far fewer features, for both NN, Baseline, SCD and PCD, we use a smaller network architecture: a 5-layer fully-connected network with 16 neurons per hidden layer. ", "page_idx": 9}, {"type": "text", "text": "Table 3 reports the mean post-hoc regrets and standard deviations across 30 simulations for each approach, again corroborating the prediction performance order of $\\mathrm{SCD}>\\mathrm{PCD}>1$ Baseline $>$ BAS. Appendix F.3 gives full experimental results. ", "page_idx": 9}, {"type": "text", "text": "Similarly to the first two benchmarks, we report win rate results in Table 14 and show comparisons between the proposed methods against BAS across each individual simulation in Figure 2 in Appendix F.3. Table 14 shows that SCD pretty consistently outperforms BAS, achieving win rates of $86.67\\%$ or higher in most scenarios. PCD also demonstrates competitive performance, with win rates ranging from $70\\%$ to $83.33\\%$ , making it a viable alternative as we hypothesized. ", "page_idx": 9}, {"type": "text", "text": "5.4 Runtime Analysis ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Appendix $\\mathrm{G}$ gives the training times for each method. The training times follow the order of SCD $>\\mathrm{PCD}>$ Baseline $>$ classic regression methods, which is the same for predictive accuracy in the benchmarks, indicating a tradeoff between training time and accuracy. Our methods take longer runtime than most other regression methods due to having to solve sequences of linear programs during training. Among our methods, the coordinate descent methods take longer time than Baseline due to having to train more neural networks, and the sequential version naturally takes longer than the parallelized version. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion and Future Work ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We propose the first Predict+Optimize framework for scenarios where unknown parameters are revealed progressively over stages. Specifically, our proposal allows better predictions and (re)optimization at each stage as more parameters are made known. Algorithmically, we focus on MILPs\u2013\u2014a large and widely-studied class of problems\u2013\u2014and present three training methods for our novel framework. Empirical results in three benchmarks demonstrate better predictions from our methods over classical ones. Our methods trade off between predictive accuracy and training time. ", "page_idx": 9}, {"type": "text", "text": "Our work establishes the feasibility of Multi-Stage Predict+Optimize, and furthermore shows that even our baseline algorithm of training a single predictor outperforms classical non-Predict+Optimize approaches. Looking into the future beyond the present work, there is ample space for algorithmic improvements. As we observed in Section 5, the current experimental results suggest that our multi-stage predict+optimize methods display rather different behaviors depending on whether the optimization is a linear program or a mixed integer program. In particular, for linear programs, the advantage of our methods over classical methods increases with the number of stages, whereas the opposite happens for integer programs. We believe it is important to investigate whether this phenomenon holds more generally. If so, it is a prudent research direction to understand whether such decay is inevitable for MILPs, or if there are algorithmic techniques to mitigate this effect. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "We thank the anonymous reviewers for their constructive comments. In addition, Xinyi Hu and Jimmy H.M. Lee acknowledge the financial support of a General Research Fund (RGC Ref. No. CUHK 14206321) by the Hong Kong University Grants Committee, and also a Direct Grant (Ref. No. 4055231) by The Chinese University of Hong Kong. Jasper C.H. Lee\u2019s work was partially done while he was at the University of Wisconsin-Madison, supported by a Croucher Fellowship for Postdoctoral Research and NSF Medium Award CCF-2107079. Peter Stuckey\u2019s contribution was partially supported by the DARPA Assured Neuro Symbolic Learning and Reasoning (ANSR) program under award number FA8750-23-2-1016, and by the Australian Research Council through the OPTIMA ITTC IC200100009. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] A. Agrawal, B. Amos, S. Barratt, S. Boyd, S. Diamond, and J. Z. Kolter. Differentiable convex optimization layers. Advances in neural information processing systems, 32, 2019. [2] B. Amos and J. Z. Kolter. Optnet: Differentiable optimization as a layer in neural networks. In International Conference on Machine Learning, pages 136\u2013145. PMLR, 2017.   \n[3] E. Ardjmand, G. R. Weckman, W. A. Young, O. Sanei Bajgiran, and B. Aminipour. A robust optimisation model for production planning and pricing under demand uncertainty. International Journal of Production Research, 54(13):3885\u20133905, 2016.   \n[4] H. Bae, J. Lee, W. C. Kim, and Y. Lee. Deep value function networks for large-scale multistage stochastic programs. In International Conference on Artificial Intelligence and Statistics, pages 11267\u201311287. PMLR, 2023.   \n[5] M.-F. Balcan, T. Dick, T. Sandholm, and E. Vitercik. Learning to branch. In International conference on machine learning, pages 344\u2013353. PMLR, 2018.   \n[6] H. Chu, W. Zhang, P. Bai, and Y. Chen. Data-driven optimization for last-mile delivery. Complex & Intelligent Systems, 9(3):2271\u20132284, 2023.   \n[7] E. Demirovi\u00b4c, P. J. Stuckey, T. Guns, J. Bailey, C. Leckie, K. Ramamohanarao, and J. Chan. Dynamic programming for Predict+Optimise. In Proceedings of the Thirty-Fourth AAAI Conference on Artificial Intelligence, pages 1444\u20131451, 2020.   \n[8] P. Donti, B. Amos, and J. Z. Kolter. Task-based end-to-end model learning in stochastic optimization. Advances in neural information processing systems, 30, 2017.   \n[9] A. N. Elmachtoub and P. Grigas. Smart \u201cPredict, then Optimize\u201d. Management Science, 68(1):9\u201326, 2022.   \n[10] J. Friedman, T. Hastie, and R. Tibshirani. The elements of statistical learning. Springer series in statistics New York, 2001. Volume 1, Number 10.   \n[11] M. Gasse, D. Ch\u00e9telat, N. Ferroni, L. Charlin, and A. Lodi. Exact combinatorial optimization with graph convolutional neural networks. Advances in neural information processing systems, 32, 2019.   \n[12] A. U. Guler, E. Demirovic\u00b4, J. Chan, J. Bailey, C. Leckie, and P. J. Stuckey. A divide and conquer algorithm for Predict $^{+}$ Optimize with non-convex problems. In Proceedings of the Thirty-Sixth AAAI Conference on Artificial Intelligence, 2022.   \n[13] Gurobi Optimization, LLC. Gurobi Optimizer Reference Manual, 2023.   \n[14] J. L. Higle. Stochastic programming: optimization when uncertainty matters. In Emerging theory, methods, and applications, pages 30\u201353. Informs, 2005.   \n[15] X. Hu, J. C. H. Lee, and J. H. M. Lee. Predict+Optimize for packing and covering LPs with unknown parameters in constraints. In Proceedings of the AAAI Conference on Artificial Intelligence, 2022.   \n[16] X. Hu, J. C. H. Lee, and J. H. M. Lee. Two-Stage Predict+Optimize for mixed integer linear programs with unknown parameters in constraints. In Advances in Neural Information Processing Systems, 2023.   \n[17] X. Hu, J. C. H. Lee, J. H. M. Lee, and A. Z. Zhong. Branch & Learn for recursively and iteratively solvable problems in Predict+Optimize. In Advances in Neural Information Processing Systems, 2022.   \n[18] J. Jeong, P. Jaggi, A. Butler, and S. Sanner. An exact symbolic reduction of linear smart Predict+Optimize to mixed integer linear programming. In K. Chaudhuri, S. Jegelka, L. Song, C. Szepesvari, G. Niu, and S. Sabato, editors, Proceedings of the 39th International Conference on Machine Learning, volume 162 of Proceedings of Machine Learning Research, pages 10053\u201310067. PMLR, 17\u201323 Jul 2022.   \n[19] J.-H. Lange and P. Swoboda. Efficient message passing for 0\u20131 ilps with binary decision diagrams. In International Conference on Machine Learning, pages 6000\u20136010. PMLR, 2021.   \n[20] D. Liu, M. Fischetti, and A. Lodi. Learning to search in local branching. In Proceedings of the aaai conference on artificial intelligence, volume 36, pages 3796\u20133803, 2022.   \n[21] L. Lozano, D. Bergman, and J. C. Smith. On the consistent path problem. Operations Research, 68(6):1913\u20131931, 2020.   \n[22] J. Mandi and T. Guns. Interior point solving for LP-based prediction $^+$ optimisation. Advances in Neural Information Processing Systems, 33:7272\u20137282, 2020.   \n[23] J. Mandi, P. J. Stuckey, T. Guns, et al. Smart predict-and-optimize for hard combinatorial optimization problems. In Proceedings of the Thirty-Fourth AAAI Conference on Artificial Intelligence, volume 34, pages 1603\u20131610, 2020.   \n[24] M. Mulamba, J. Mandi, M. Diligenti, M. Lombardi, V. B. Lopez, and T. Guns. Contrastive losses and solution caching for predict-and-optimize. In 30th International Joint Conference on Artificial Intelligence (IJCAI-21): IJCAI-21, pages 2833\u20132840. International Joint Conferences on Artificial Intelligence, 2021.   \n[25] Y. Nandwani, R. Ranjan, P. Singla, et al. A solver-free framework for scalable learning in neural ilp architectures. Advances in Neural Information Processing Systems, 35:7972\u20137986, 2022.   \n[26] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, A. Desmaison, A. Kopf, E. Yang, Z. DeVito, M. Raison, A. Tejani, S. Chilamkurthy, B. Steiner, L. Fang, J. Bai, and S. Chintala. Pytorch: An imperative style, high-performance deep learning library. In Advances in Neural Information Processing Systems 32, pages 8024\u20138035. 2019.   \n[27] R. M. Patel, J. Dumouchelle, E. Khalil, and M. Bodur. Neur2sp: Neural two-stage stochastic programming. Advances in neural information processing systems, 35:23992\u201324005, 2022.   \n[28] A. Paulus, M. Rol\u00ednek, V. Musil, B. Amos, and G. Martius. Comboptnet: Fit the right NP-hard problem by learning integer programming constraints. In International Conference on Machine Learning, pages 8443\u20138453. PMLR, 2021.   \n[29] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine learning in Python. Journal of Machine Learning Research, 12:2825\u20132830, 2011.   \n[30] G. C. Pflug and A. Pichler. Multistage stochastic optimization, volume 1104. Springer, 2014.   \n[31] Y. Rychener, D. Kuhn, and T. Sutter. End-to-end learning for stochastic optimization: A bayesian perspective. In International Conference on Machine Learning, pages 29455\u201329472. PMLR, 2023.   \n[32] H. Simonis, B. O\u2019Sullivan, D. Mehta, B. Hurley, and M. D. Cauwer. Energy-Cost Aware Scheduling/Forecasting Competition, 2014.   \n[33] J. Song, Y. Yue, B. Dilkina, et al. A general large neighborhood search framework for solving integer linear programs. Advances in Neural Information Processing Systems, 33:20012\u201320023, 2020.   \n[34] A. Stratigakos, S. Camal, A. Michiorri, and G. Kariniotakis. Prescriptive trees for integrated forecasting and optimization applied in trading of renewable energy. IEEE Transactions on Power Systems, 37(6):4696\u20134708, 2022.   \n[35] X. Tian, R. Yan, Y. Liu, and S. Wang. A smart predict-then-optimize method for targeted and cost-effective maritime transportation. Transportation Research Part B: Methodological, 172:32\u201352, 2023.   \n[36] B. Wilder, B. Dilkina, and M. Tambe. Melding the data-decisions pipeline: Decision-focused learning for combinatorial optimization. In Proceedings of the Thirty-Third AAAI Conference on Artificial Intelligence, pages 1658\u20131665, 2019.   \n[37] G. Zarpellon, J. Jo, A. Lodi, and Y. Bengio. Parameterizing branch-and-bound search trees to learn branching policies. In Proceedings of the aaai conference on artificial intelligence, volume 35, pages 3931\u20133939, 2021. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "A Detailed Literature Review ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In this section, we first summarize the related works in Predict+Optimize, and then summarize other works related to learning unknowns in optimization problems, but outside of Predict+Optimize. ", "page_idx": 13}, {"type": "text", "text": "A.1 Predict+Optimize ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "As mentioned in Section 1, prior works all focus on the case where all unknown parameters are revealed simultaneously. Most of them have focused on the regime where the unknown parameters only appear in the objective and use the regret proposed by Elmachtoub et al. [9] as the loss function. Since the regret loss is usually not (sub-) differentiable, and gradient-based methods do not apply, they proposed ways to overcome the non-differentiability of the regret. Elmachtoub et al. [9] propose a differentiable surrogate function for the regret function, while Wilder et al. [36] relax the integral objective in constrained optimization and solve a regularized quadratic programming problem. Mandy and Guns [22] focus on mixed integer linear programs and propose an interior point based approach. In addition to computing the (approximate) gradients of the regret function or approximations of it, another way to deal with the non-differentiability of the regret is to exploit the structure of optimization problems to train models without computing gradients. Demirovic\u00b4 et al. [7] investigate problems amenable to tabular dynamic programming and propose a coordinate descent method to learn a linear prediction function. Hu et al. [17] extend their framework, to enable problems solvable with a recursive or iterative algorithm to be tackled in Predict+Optimize. Guler et al. [12] proposes a divide and conquer algorithm, extending the work of Demirovi\u00b4c et al. [7] in a different manner so that the algorithm can deal with problems with the linear objective function. ", "page_idx": 13}, {"type": "text", "text": "As for Predict+Optimize with unknown parameters also in constraints, Hu et al. [15] first propose the post-hoc regret loss function and a framework for packing and covering LPs with unknown parameters in both objectives and constraints. They [16] further advocate a conceptually simpler framework, which enable solving MILPs with unknown constraints. Besides, there are also works applying Predict+Optimize to a wide range of real-world problems, including maritime transportation [35], last-mile delivery [6], and trading in renewable energy [34]. ", "page_idx": 13}, {"type": "text", "text": "A.2 Decision-Focused Learning ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Now we summarize other works related to learning unknowns in optimization problems, particularly those outside of Predict+Optimize. These works can be placed into two categories. ", "page_idx": 13}, {"type": "text", "text": "One category considers learning unknown parameters but with very different goals and measures of loss. For example, CombOptNet [28] and Nandwani et al. [25] focus on learning parameters so as to make the predicted optimal solution (Stage 0 estimated solution in the proposed framework) as close to the true optimal solution $x^{*}$ as possible in the solution space/metric. However, these works also assume that all unknown parameters are revealed simultaneously, and thus cannot be applied to applications where unknown parameters are revealed progressively over several stages. Furthermore, experiments in Two-Stage Predict+Optimize [16] show that these other methods yield worse predictive performance when evaluated on the post-hoc regret. ", "page_idx": 13}, {"type": "text", "text": "Another category gives ways to differentiate through LPs or LPs with regularizations, as a technical component in a gradient-based training algorithm [2, 36, 1]. While our proposed algorithms in Section 4.1 and Appendix C use the methods of Hu et al. [15, 16] and Mandi and Guns [22] to perform gradient computations, we could in principle use any of the aforementioned other works. However, we point out that our main contribution is not the gradient computation method but the two training algorithms of the set of NNs. Nonetheless, experiments in Two-Stage Predict+Optimize framework [16] demonstrate that the gradient calculation method they used (which we also use) performs at least as well in post-hoc regret performance as other gradient methods, while being (significantly) faster. This is the reason we follow Hu et al.\u2019s method and implementation. ", "page_idx": 13}, {"type": "text", "text": "A.3 (Multi-Stage) Stochastic Programming ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "As mentioned in Section 1, while stochastic programming and Predict+Optimize are related frameworks, the technical challenges are very different. The most important difference is that Predict+Optimize is a supervised learning problem, whereas stochastic programming is unsupervised learning. In Predict+Optimize frameworks, the true parameters (which need prediction) are always associated with relevant features that help prediction. On the other hand, stochastic programming frameworks have no such features, and typically assume that the entire distribution over the unknown parameters is given to the algorithm \u2014 in practice, the distribution needs to be estimated from historical data over the unknown parameters, which is an unsupervised density estimation problem. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "Due to the different starting assumptions, Predict+Optimize and stochastic programming formulate optimization problems rather differently. In stochastic programming, since the assumption is that the full parameter distribution is given, the optimization problem (or problems, across stages) would explicitly include the expectation operator in the objective \u2014 the goal is to solve for optimization decisions so that the expected objective, with expectation taken over the parameter distribution, is maximized/minimized. Predict+Optimize frameworks approach this rather differently: while the goal is still to optimize the expected objective, the optimization problems themselves are phrased such that they take predicted parameters, and the problem asks for the optimal decisions assuming the predicted parameters. It then becomes the goal of the learning algorithm to learn to make predictions from features, such that the expected objective is optimized overall. This is achieved via empirical risk minimization over training data, which we assume are samples from the underlying (feature,parameter) joint distribution. ", "page_idx": 14}, {"type": "text", "text": "We also note the dimensionality of the objects being learnt in the different frameworks. In stochastic programming, the entire distribution over the unknown parameters needs to be learnt. On the other hand, in Predict+Optimize, we learn a mapping from features to predicted parameters, which, under smoothness assumptions or bounded model complexity assumptions (e.g. by restricting to using a fixed neural network architecture), can effectively be regarded as a (much) lower dimensional object than learning an entire distribution over unknown parameters. ", "page_idx": 14}, {"type": "text", "text": "A.4 Integration of Machine Learning and Mixed-Integer Programming ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "The integration of machine learning and (discrete) optimization is an increasingly popular field. In this section, we mention some works on using machine learning to help solve mixed-integer programs and especially stochastic programs. ", "page_idx": 14}, {"type": "text", "text": "In the context of integrating machine learning with stochastic programming, several noteworthy contributions have emerged. Donti et al. [8] propose an end-to-end learning framework that directly aligns the training of probabilistic machine learning models with the ultimate task-based objective in the context of stochastic programming. Patel et al. [27] use a neural network to approximate the expected value function in two-stage stochastic programming problems, enabling more efficient solution approaches compared to traditional methods. Bae et al. [4] propose a neural network-based stagewise decomposition algorithm that can effectively approximate value functions for large-scale multistage stochastic programming problems. Rychener et al. [31] develop a principled end-to-end learning framework for training neural network decision maps that can effectively solve stochastic optimization problems, including empirical risk minimization and distributionally robust optimization formulations. ", "page_idx": 14}, {"type": "text", "text": "The application of using ML to help mixed-integer programming (MIP) has also seen substantial progress: ML algorithms for exact solving of MIPs by branch-and-cut based algorithms [5, 11, 37], ML algorithms for exact solving of MIPs by decomposition-based algorithms [19, 21], ML algorithms for approximate solving MIPs by large neighborhood search based algorithm [33, 20], and so on. ", "page_idx": 14}, {"type": "text", "text": "B A Detailed Example for Multi-Stage Predict $^+$ Optimize Framework ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In this section, we use the hospital scenario, i.e., the nurse rostering problem (NRP), mentioned in Section 1 as a running example for the Multi-Stage Predict+Optimize framework described in Section 3.1. ", "page_idx": 14}, {"type": "text", "text": "Here we describe the NRP in detail. A hospital needs to make nurses schedule for the whole week (7 days) two weeks beforehand so that the nurses can be well prepared for the work and also plan for their leisure activities. The goal of the hospital is to minimize the total costs for hiring nurses and meet the patients\u2019 demands. ", "page_idx": 14}, {"type": "text", "text": "There are full-time nurses in the hospital. If there are too many patients and the hospital\u2019s nurses are understaffed, the hospital can temporarily hire some extra nurses at a higher salary. Since the number of patients that will come in each shift on each day is unknown two weeks beforehand, the hospital needs to predict the number of patients to make a schedule for the full-time nurses and plan to hire extra nurses. The hospital will learn the predictor based on historical hospital records, considering features such as time of year, day of the week and temperature. ", "page_idx": 15}, {"type": "text", "text": "To provide better service to patients, the hospital has an appointment system that requires patients to schedule an appointment in advance to receive medical care. Reservations for the next day close the night before. At this point, the hospital knows the precise number of patients for each shift of the current day. Therefore, at the night of day $(t-1)$ , i.e., Stage $t$ $1\\leq t\\leq7$ ), the true numbers of patients for each shift of the current day are revealed. ", "page_idx": 15}, {"type": "text", "text": "Now we show the running example for the Multi-Stage Predict+Optimize framework. Examples 1, and 2 are examples for Stage 0 and Stage $t$ (for $1\\leq t\\leq T$ ) respectively. ", "page_idx": 15}, {"type": "text", "text": "Example 1. Suppose there are $n$ full-time nurses, 7 days, and 3 working shifts per day. Full-time nurses are entitled to take a rest: day-off shift. The decision variables are: 1) a Boolean vector $x\\in\\{0,1\\}^{n\\times7\\times3}$ , where $x_{i,j,k}$ represents that whether nurse $i$ is assigned to shift $k$ in day $j$ , and 2) an integer vector $\\sigma\\in\\mathbb{N}^{7\\times3}$ , where $\\sigma_{j,k}$ represents the number of extra nurses hired in shift $k$ day $j$ . Let $d_{j,k}$ denote the number of patients in shift day $j$ , $m_{i}$ denote the number of patients that the nurse $i$ can serve per shift, $c_{i}$ denote the payment of the nurse i per shift, $e_{s}$ denote the number of patients that each extra nurse can serve per shift, and $e_{c}$ denote the payment of each extra nurse per shift. The unknown parameters are $\\pmb{d}\\in\\bar{\\mathbb{N}}^{7\\times3}$ . ", "page_idx": 15}, {"type": "text", "text": "Consider the time that the schedules need to be made as Stage 0. The hospital learns the predictor and uses the estimated number of patients $\\hat{\\pmb d}^{(0)}$ to optimize for that week\u2019s schedule. The Stage 0 OP, the NRP using the estimations, can be formulated as: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\bar{x}^{(0)},\\bar{\\sigma}^{(0)}=\\underset{x=r_{s}}{\\operatorname*{argmin}}\\:\\sum_{\\ell=1}^{n}\\sum_{k=1}^{\\ell}x_{i,j,k}+e_{c}\\sum_{j=1}^{7}\\sum_{k=1}^{3}\\sigma_{j,k}}\\\\ &{\\quad\\times,\\quad m_{i}x_{i,j,k}+e_{s}\\sigma_{j,k}\\geq\\bar{d}_{j,k}^{(0)},\\quad\\forall j\\in\\{1,\\ldots,7\\},k\\in\\{1,2,3\\}}\\\\ &{\\quad\\quad\\quad\\:\\:\\frac{4}{\\ensuremath{k}-1}}\\\\ &{\\quad\\quad\\:\\sum_{k=1,j,k=1}^{4}\\mathrm{~vi}\\in\\{1,\\ldots,n\\},j\\in\\{1,\\ldots,7\\}}\\\\ &{\\quad\\quad\\:\\:x_{i,j,k}+x_{i,j+1,1}\\leq1,\\quad\\forall i\\in\\{1,\\ldots,n\\},j\\in\\{1,\\ldots,6\\}}\\\\ &{\\quad\\quad\\:\\sum_{j=1}^{7}x_{i,j,4}\\leq2,\\quad\\forall i\\in\\{1,\\ldots,n\\}}\\\\ &{\\quad\\quad\\quad\\:\\sum_{j=1}^{7}x_{i,j,4}\\leq0}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "where Equation (1) represents the objective, which is to minimize the total costs for hiring full-time nurses and extra nurses; Equation (2) ensures that the schedule can satisfy the patient demand under each shift; Equation (3) ensures that each full-time nurse will be scheduled for exactly one shift each day; Equation (4) ensures that no full-time nurse will be scheduled to work a night shift followed immediately by a morning shift; and Equation (5) ensures that each full-time nurse gets one or two day-off shifts per week. ", "page_idx": 15}, {"type": "text", "text": "After Stage $O$ , the schedules for day $^{\\,l}$ are hard commitments and cannot be changed, i.e., $\\hat{x}_{0}^{(0)}=$ $\\left\\{{{x}_{i,1,k}}\\mid\\forall i\\in\\left\\{1,...,n\\right\\},k\\in\\left\\{1,2,3\\right\\}\\right\\}$ , whereas the rest of the decisions are soft commitments. ", "page_idx": 15}, {"type": "text", "text": "Example 2. (Continued) At the night of day $t-1$ , i.e., Stage t (for $1\\leq t\\leq7,$ ), the reservations for the next day close, and the true numbers of patients for the three shifts of the next day $\\theta_{t}\\,=$ $(d_{t,1},d_{t,2},d_{t,3})\\in\\mathbb{N}^{3}$ are revealed. By Stage $t_{:}$ , all the true numbers of patients for the prior $t-1$ days are also revealed. The number of patients for the later $7-t$ days are still uncovered and are estimated as $\\hat{\\pmb{\\theta}}^{(t)}=(\\hat{\\theta}_{t+1}^{(t)},\\dots,\\hat{\\theta}_{T}^{(t)})$ , where $\\hat{\\theta}_{i}^{(t)}=(\\hat{d}_{i,1}^{(t)},\\hat{d}_{i,2}^{(t)},\\hat{d}_{i,3}^{(t)})\\in\\overset{.}{\\mathbb{N}}^{3}$ represents the numbers of patients on day $i$ estimated on day $t$ . ", "page_idx": 15}, {"type": "text", "text": "Hard commitments contain two parts: $^{\\,I}$ ) the schedule for the day $t$ and the prior $t-1$ days, and 2) the number of extra nurses hired in the prior $t-1$ days, i.e., here $x[1:t-1]$ represents $\\{x_{i,j,k}\\mid\\forall i\\in$ $\\{1,...,n\\},j\\in\\{1,...,t\\},k\\in\\{1,2,3\\}\\}\\cup\\{\\sigma_{j,k}\\mid\\forall j\\in\\{1,...,t-1\\},k\\in\\{1,2,3\\}\\}.$ . The hospital may update the predictions and reschedule for the later $(7-t)$ days. But such rescheduled leads to extra costs for hiring full-time nurses, which are recorded by the penalty function $P e n(\\hat{x}^{(t-1)}\\rightarrow$ $x,\\pmb{\\theta}[1:t])$ . The more temporarily the shift is rescheduled, the larger the increase in the costs. For simplicity, we assume that the extra cost is linear in the original cost for hiring each full-time nurse. In this scenario, the penalty function can be formulated as $\\begin{array}{r}{E x t r a(\\hat{x}^{(t-1)}\\rightarrow\\breve{x})}\\end{array}$ : ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "equation", "text": "$$\nE x t r a(\\hat{x}^{(t-1)}\\rightarrow x)=\\sum_{i=1}^{n}\\sum_{j=1}^{7}\\sum_{k=1}^{3}E x t r a(\\hat{x}^{(t-1)}\\rightarrow x)_{i,j,k}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "where the $(i,j,k)$ -th item in the penalty function is: ", "page_idx": 16}, {"type": "equation", "text": "$$\nE x t r a(\\hat{x}^{(t-1)}\\rightarrow x)_{i,j,k}=\\left\\{\\begin{array}{l l}{(T-j+t)\\rho_{i}c_{i},}&{x_{i,j,k}>\\hat{x}_{i,j,k}^{(t-1)}}\\\\ {0,}&{x_{i,j,k}\\leq\\hat{x}_{i,j,k}^{(t-1)}}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "As mentioned in Section 3.1, the Stage t optimization problem modifies the original Para-OP by: $^{\\,l}$ ) introducing the penalty term capturing the cost of changing the Stage $t-1$ solution $\\hat{x}^{(t-1)}$ to the new Stage $t$ solution $x$ to the objective: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\hat{x}^{(t)},\\hat{\\sigma}^{(t)}=\\arg\\operatorname*{min}_{x,\\sigma}\\sum_{i=1}^{n}c_{i}\\sum_{j=1}^{7}\\sum_{k=1}^{3}x_{i,j,k}+e_{c}\\sum_{j=1}^{7}\\sum_{k=1}^{3}\\sigma_{j,k}+\\sum_{i=1}^{n}\\sum_{j=1}^{7}\\sum_{k=1}^{3}E x t r a(\\hat{x}^{(t-1)}\\rightarrow x)_{i,j,k}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "and 2) introducing the constraint that hard commitments from prior stages cannot be modified in the current Stage $t$ : ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{x_{i,j,k}=\\hat{x}_{i,j,k}^{(t-1)},\\quad\\forall i\\in\\{1,...,n\\},j\\in\\{1,...,t\\},k\\in\\{1,2,3\\}\\}}\\\\ &{\\sigma_{j,k}=\\hat{\\sigma}_{j,k}^{(t-1)},\\quad\\forall j\\in\\{1,...,t-1\\},k\\in\\{1,2,3\\}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Besides, for the first constraint in Equation (2), the Stage 0 predicted parameters $\\hat{d}^{0}$ are replaced by $(d_{1,1},\\ldots,d_{t,3},\\hat{d}_{t+1,1}^{(t)},\\ldots,\\hat{d}_{7,3}^{(t)})$ : ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\displaystyle\\sum_{i=1}^{n}m_{i}x_{i,j,k}+e_{s}\\sigma_{j,k}\\ge d_{j,k},}&{\\forall j\\in\\{1,\\ldots,t\\},k\\in\\{1,2,3\\}}\\\\ &{\\displaystyle\\sum_{i=1}^{n}m_{i}x_{i,j,k}+e_{s}\\sigma_{j,k}\\ge\\hat{d}_{j,k}^{t},}&{\\forall j\\in\\{t+1,\\ldots,7\\},k\\in\\{1,2,3\\}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "The four constraints from Equation (3) to Equation (6) keep the same in the Stage $t$ (for $1\\le t\\le7$ ) optimization. ", "page_idx": 16}, {"type": "text", "text": "C Gradient Computations in Sequential Coordinate Descent ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "The post-hoc regret used to train $N N_{t}$ can be written as: ", "page_idx": 16}, {"type": "equation", "text": "$$\nP R e g(\\hat{\\theta}^{(t)},\\theta[t+1:T])=o b j(\\hat{x}^{(T)},\\theta)-o b j(x^{*}(\\theta),\\theta)+\\sum_{i=t}^{T}P e n_{i}(\\hat{x}^{(i-1)}\\rightarrow\\hat{x}^{(i)},\\theta[1:i])\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Noting the second term is independent of $\\hat{\\pmb{\\theta}}^{(t)}$ and hence $N N_{t}$ , the gradient with respect to an edge weight $w_{e}$ in $N N_{t}$ is ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\,P R e g}{\\mathrm{d}w_{e}}=\\frac{\\mathrm{d}\\,o b j(\\hat{x}^{(T)},\\theta)}{\\mathrm{d}w_{e}}+\\sum_{i=t}^{T}\\frac{\\mathrm{d}\\,P e n_{i}(\\hat{x}^{(i-1)}\\rightarrow\\hat{x}^{(i)},\\theta[1:i])}{\\mathrm{d}w_{e}}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "By the law of total derivative, we can expand this to ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{i}\\,P R e g}{\\mathrm{d}w_{e}}=\\frac{\\mathrm{d}\\,o b j(\\hat{x}^{(T)},\\theta)}{\\mathrm{d}\\hat{x}^{(T)}}\\frac{\\mathrm{d}\\hat{x}^{(T)}}{\\mathrm{d}\\hat{\\theta}^{(t)}}\\frac{\\mathrm{d}\\hat{\\theta}^{(t)}}{\\mathrm{d}w_{e}}+\\sum_{i=t}^{T}\\left(\\frac{\\partial\\,P e n_{i}}{\\partial\\hat{x}^{(i-1)}}\\bigg|_{\\hat{x}^{(i)}}\\,\\frac{\\mathrm{d}\\hat{x}^{(i-1)}}{\\mathrm{d}\\hat{\\theta}^{(t)}}+\\left.\\frac{\\partial\\,P e n_{i}}{\\partial\\hat{x}^{(i)}}\\right|_{\\hat{x}^{(i-1)}}\\frac{\\mathrm{d}\\hat{x}^{(i)}}{\\mathrm{d}\\hat{\\theta}^{(t)}}\\right)\\frac{\\mathrm{d}\\hat{\\theta}^{(t)}}{\\mathrm{d}w_{e}}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Similar to the gradient computation in Section 4.1, the term $\\frac{\\mathrm{d}\\hat{\\pmb{\\theta}}^{(t)}}{\\mathrm{d}w_{e}}$ is calculated via standard backpropagation, while the terms $\\frac{\\textrm{d}o b j(\\hat{x}^{(T)},\\pmb{\\theta})}{\\textrm{d}\\hat{x}^{(T)}}$ dx\u02c6(T ) , \u2202\u2202x\u02c6P( ie\u2212n1i)  x\u02c6(i) and \u2202\u2202Px\u02c6 (ein)i x\u02c6(i\u22121) are calculable when the objective and penalty functions are smooth. The only non-trivial calculation is for dd \u03b8x\u02c6\u02c6((it)) for all $i\\in[t:T]$ . ", "page_idx": 17}, {"type": "text", "text": "Recall that $\\hat{x}^{(i)}$ is computed from the Stage $i$ optimization problem, as a deterministic function of $\\hat{x}^{(i-1)}$ and $\\hat{\\pmb{\\theta}}^{(t)}$ , while $\\hat{x}^{(i-1)}$ itself also depends on $\\hat{\\pmb{\\theta}}^{(t)}$ . We thus further decompose $\\frac{\\mathrm{d}\\hat{x}^{(i)}}{\\mathrm{d}\\hat{\\pmb{\\theta}}^{(t)}}$ into the following recursive computation ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\frac{\\mathrm{d}\\hat{x}^{(i)}}{\\mathrm{d}\\hat{\\pmb{\\theta}}^{(t)}}=\\left.\\frac{\\partial\\hat{x}^{(i)}}{\\partial\\hat{x}^{(i-1)}}\\right|_{\\hat{\\pmb{\\theta}}^{(t)}}\\frac{\\mathrm{d}\\hat{x}^{(i-1)}}{\\mathrm{d}\\hat{\\pmb{\\theta}}^{(t)}}+\\left.\\frac{\\partial\\hat{x}^{(i)}}{\\partial\\hat{\\pmb{\\theta}}^{(t)}}\\right|_{\\hat{x}^{(i-1)}}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Calculating \u2202\u2202x\u02c6(x\u02c6i\u22121) \u02c6(t) and \u2202x\u02c6(i) $\\left.\\frac{\\partial\\hat{x}^{(i)}}{\\partial\\hat{\\pmb{\\theta}}^{(t)}}\\right|_{\\hat{x}^{(i-1)}}$ requires differentiating through a MILP. So instead of directly using MILP formulations for the Stage $t$ optimization problems, we use the convex relaxation by $\\mathrm{Hu}$ et al. [16], which in turn adapts the approach of Mandi and Guns [22]. ", "page_idx": 17}, {"type": "text", "text": "D Details for Case Studies ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In this section, we give a detailed description for the other two benchmarks used in Section 5. ", "page_idx": 17}, {"type": "text", "text": "D.1 Production and Sales Problem ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "We first demonstrate, using the example of the production and sales problem, how our framework can tackle LPs. An oil company intends to develop a production and sales plan for the upcoming $T$ quarters/months. The goal is to maximize the profits, i.e., the sales revenues minus the production costs, under the constraints that the amount of oil product sold each quarter/month cannot exceed the customer demands. The production cost and sales price for each quarter/month are known, but the customer demand is revealed only at the beginning of each quarter/month after the company receives the orders. The company will estimate the customer demands based on historical sales records, considering features such as oil type, oil consumption of different areas, and so on. ", "page_idx": 17}, {"type": "text", "text": "The decision variables are: 1) a real vector $x\\,\\in\\,\\mathbb{R}^{T}$ , where $x_{i}$ represents the amount of product produced in month $i$ , and 2) a real vector $y\\in\\mathbb{R}^{T}$ , where $y_{i}$ represents the amount of product sold in month $i$ . Let $p_{i}$ denote the unit profit of selling product in month $i$ , $c_{i}$ denote the unit cost of producing product in month $i$ , $d_{i}$ denote the customer demands in month $i$ . The unknown parameters are $\\pmb{d}\\in\\breve{\\mathbb{R}}^{\\hat{T}}$ . ", "page_idx": 17}, {"type": "text", "text": "At Stage 0, i.e., the time that the production and sales plan needs to be made, there is no order yet and the customer demands are unknown. The company learns the predictor and uses the predicted demands $\\hat{\\pmb d}^{(0)}$ to make the plan. The Stage 0 OP can be formulated as: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\hat{x}^{(0)},\\hat{y}^{(0)}=\\underset{x,y}{\\mathrm{arg\\,max}}\\displaystyle\\sum_{i=1}^{T}p_{i}y_{i}-\\displaystyle\\sum_{i=1}^{T}c_{i}x_{i}}\\\\ &{\\qquad\\qquad\\mathrm{~s.t.~}\\,y_{i}\\leq\\hat{d}_{i}^{(0)},\\quad\\forall i\\in\\{1,\\ldots,T\\}}\\\\ &{\\qquad\\qquad y_{i}\\leq\\displaystyle\\sum_{j=1}^{i-1}x_{j}-\\displaystyle\\sum_{j=1}^{i-1}y_{j},\\quad\\forall i\\in\\{1,\\ldots,T\\}}\\\\ &{\\qquad\\qquad\\quad y\\geq0,\\quad y\\geq0}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where Equation (8) represents the objective, for maximizing the proftis, i.e., the sales revenues minus the production costs; Equation (9) ensures that the amount of oil product sold each quarter/month will not exceed the customer demands; Equation (10) ensures that the amount of oil product sold each quarter/month will not exceed the inventory at that quarter/month. ", "page_idx": 17}, {"type": "text", "text": "At the beginning of each quarter/month, the company receives orders, and the demand for that quarter/month is revealed. We assume that the beginning of each quarter/month is one stage. Then, by Stage $t$ ( $1\\leq t\\leq T)$ , all the true demands for the prior $(t-1)$ quarters/months as well as the $t$ quarter/month are revealed. The demands for the later $(T-t)$ quarters/months are still uncovered and are estimated as \u03b8\u02c6(t) = (\u03b8\u02c6t(t+)1 $\\hat{\\pmb{\\theta}}^{(t)}=(\\hat{\\theta}_{t+1}^{(t)},\\dots,\\hat{\\theta}_{T}^{(t)})$ , where $\\hat{\\theta}_{i}^{(t)}=\\hat{d}_{i}^{(t)}$ represents the demand of quarter/month $i$ estimated on quarter/month $t$ . The production and sales for the quarter/month $t$ and the prior $(t-1)$ quarters/months have already happened and cannot be changed, which are committed variables. There is no penalty function in this scenario. Therefore, the Stage $t$ OP can be formulated as: ", "page_idx": 17}, {"type": "text", "text": "", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\hat{x}^{(t)},\\hat{y}^{(t)}=\\underset{x,y}{\\mathrm{arg\\,max}}\\displaystyle\\sum_{i=1}^{T}p_{i}y_{i}-\\sum_{i=1}^{T}c_{i}x_{i}}\\\\ &{\\qquad\\mathrm{~s.t.~}\\,y_{i}\\leq d_{i},\\quad\\forall i\\in\\{1,\\ldots,t\\}}\\\\ &{\\qquad\\qquad y_{i}\\leq\\hat{d}_{i}^{(t)},\\quad\\forall i\\in\\{t+1,\\ldots,T\\}}\\\\ &{\\qquad\\qquad y_{i}\\leq\\displaystyle\\sum_{j=1}^{i-1}x_{j}-\\sum_{j=1}^{i-1}y_{j},\\quad\\forall i\\in\\{1,\\ldots,T\\}}\\\\ &{\\qquad\\qquad x_{i}=\\hat{x}_{i}^{(t-1)},y_{i}=\\hat{y}_{i}^{(t-1)},\\quad\\forall i\\in\\{1,\\ldots,t-1\\}}\\\\ &{\\qquad\\qquad x\\geq0,\\quad y\\geq0}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "D.2 Investment Problem ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "In the second experiment, we showcase our framework on an MILP. The unknown parameters appear in both the objective and constraints. A person wants to make an investment plan for buying several types of financial products next year to maximize the investment profit, under limited capital. The investment profti contains 3 parts: 1) the interest gained from the products owned, 2) the market prices of the products owned at the end of the year, and 3) profits from selling products minus costs for buying products minus transaction fees. The capital for the whole year is given. However, the market price of each product in each quarter/month is revealed only at the beginning of the quarter/month, and the interest of owning each product in each quarter/month is revealed only at the end of the quarter/month. The person will estimate the market prices and interests based on past experiences, considering features such as the product type, the financial condition and operational capabilities of the company to which the product belongs, and so on. ", "page_idx": 18}, {"type": "text", "text": "Suppose there are $T$ quarters/months, and $N$ investment products. The decision variables are: 1) a natural vector $\\boldsymbol{x}\\in\\dot{\\mathrm{N}}^{T\\times N}$ , where $x_{i,j}$ represents the number of product $j$ on hand at the end of quarter/month $i,2,$ ) an integer vector $\\boldsymbol{y}\\in\\mathrm{Z}^{(T-1)\\times N}$ , where $y_{i,j}$ represents the number of product $j$ bought or sold in quarter/month $i$ , and 3) a natural vector $z\\in\\mathrm{N}^{(T-1)\\times N}$ , where $z_{i,j}$ represents whether the transaction fee is paid for product $j$ in month $i$ . Let $p_{i,j}$ denote the interest of product $j$ in month $i$ , $w_{i,j}$ denote the market price of product $j$ in month $i$ , $C$ denote the capital for the whole year. ", "page_idx": 18}, {"type": "text", "text": "We assume that the end of quarter/month $t$ , i.e., the beginning of quarter/month $(t+1)$ , is Stage $t$ . At Stage 0, i.e., the beginning of quarter/month 1, the person can buy some products without paying a transaction fee. The market price of each product at this time is known, i.e., $w_{1}=(w_{1,1},\\dots,w_{1,N})$ are given. The unknown parameters in this OP are $\\pmb{p}\\in\\mathbb{R}^{T\\times N}$ and ${\\pmb w}=(w_{2},\\dots,w_{T})\\in\\mathbb{R}^{(T-1)\\times N}$ . At the beginning of each subsequent quarter/month, the person can buy more products or sell the products owned but needs to pay a transaction fee. For simplicity, we assume that the transaction fee for buying/selling product $i$ in quarter/month $j$ is linear in the market price of product $i$ in quarter/month $j$ . Here, the linearity factor is independent of the request. That is, if the person buys/sells $k$ number of product $i$ in quarter/month $j$ , the person has to spend $k\\sigma w_{i j}$ , where $\\sigma\\geq0$ is a non-negative tunable scalar parameter, and we call it transaction factor. ", "page_idx": 18}, {"type": "text", "text": "At Stage 0, i.e., the beginning of quarter/month 1, the person uses the predicted interests $\\hat{\\pmb{p}}^{(0)}$ and market prices $\\hat{\\pmb w}^{(0)}$ to make the plan. The Stage 0 OP can be formulated as: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\dot{x}^{(0)},\\dot{y}^{(0)},\\dot{z}^{(0)}=\\operatorname{arg\\,max}\\ o b j(\\hat{p}^{(0)},w_{1},\\hat{w}^{(0)},x,y,z)}\\\\ &{\\qquad\\qquad\\qquad\\quad\\times}\\\\ &{\\qquad\\qquad\\int_{-1}^{N}w_{1,j}x_{1,j}\\leq C,}\\\\ &{\\qquad\\qquad\\quad\\sum_{j=1}^{N}w_{1,j}z^{1},j}\\\\ &{\\qquad\\qquad\\quad+\\sum_{i=2}^{N}\\sum_{j=1}^{N}\\sigma_{i j}^{\\hat{x}_{i,j}}z_{i,j}\\ \\leq C,\\quad\\forall t\\in\\{2,\\ldots,T\\}}\\\\ &{\\qquad+\\sum_{i=2}^{t}\\sum_{j=1}^{N}\\hat{w}_{i,j}^{(0)}y_{i,j}}\\\\ &{\\qquad\\qquad\\quad x_{i,j}=y_{i,j}+x_{(i-1),j},\\quad\\forall i\\in\\{2,\\ldots,T\\},j\\in\\{1,\\ldots,N\\}}\\\\ &{\\qquad\\qquad\\quad\\varepsilon_{i,j}\\geq y_{i,j},\\quad\\forall i\\in\\{2,\\ldots,T\\},j\\in\\{1,\\ldots,N\\}}\\\\ &{\\qquad\\qquad\\quad z_{i,j}\\geq-y_{i,j},\\quad\\forall i\\in\\{2,\\ldots,T\\},j\\in\\{1,\\ldots,N\\}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\displaystyle o b j(\\hat{p}^{0},w_{1},\\hat{w}^{0},x,y,z)}}\\\\ {{\\displaystyle=\\sum_{i=1}^{T}\\hat{p}_{i,j}^{(0)}x_{i,j}+\\sum_{j=1}^{N}\\hat{w}_{T,j}^{(0)}x_{T,j}-(\\sum_{j=1}^{N}w_{1,j}x_{1,j}+\\sum_{i=2}^{T}\\sum_{j=1}^{N}\\sigma\\hat{w}_{i,j}^{(0)}z_{i,j}+\\sum_{i=2}^{T}\\sum_{j=1}^{N}\\hat{w}_{i,j}^{(0)}y_{i,j})}}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "represents the objective, which is to maximize the investment profti; Equations (13) and (14) ensure that the money spent on buying products and transaction fees will not exceed the capital available; Equations (15), (16), and (17) formulate the relationships among three decision variables $x,y$ , and $z$ . ", "page_idx": 19}, {"type": "text", "text": "At Stage $t$ , i.e., the end of quarter/month $t$ , the interest of owning each product in quarter/month $t$ as well as the market price of each product revealed. Then, by Stage $t$ $1\\leq t\\leq T$ ), all the true market prices for the prior $t$ quarters/months, as well as the $(t+1)$ quarter/month, are revealed. Besides, all the true interests for the prior $t$ quarters/months are also revealed. But the market prices for the later $(T-t-1)$ quarters/months and the interests for the later $(T-t)$ are still uncovered and are estimated as $\\pmb{\\hat{w}}^{(t)}=\\bar{(w_{t+2}^{(t)},\\dots,\\hat{w}_{T}^{(t)})}$ and $\\hat{\\pmb{p}}^{(t)}=(\\hat{p}_{t+1}^{(t)},\\dots\\hat{p}_{T}^{(t)})$ , where $\\hat{w}_{i}^{(t)}$ and $\\hat{p}_{i}^{(t)}$ represents the market price and the interest of quarter/month $i$ estimated on quarter/month $t$ . The investment decisions $x,y,z$ for the prior $t$ quarters/months have already happened and cannot be changed, which are committed variables. There is no penalty function in this scenario. ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\operatorname*{lim}_{\\alpha\\in\\mathbb{N}}\\alpha_{j}\\mathrm{Le}^{i\\left(j\\right)\\left(\\underline{{\\theta}}_{1}\\mid\\cdot\\mathrm{I}\\right)}\\psi^{i},\\ u,\\mathbf{n}_{i},\\mathbf{n}_{j};:t+1\\right)\\oplus\\mathrm{i}\\left(\\theta_{j}^{i},x,y,z_{j}\\right)}\\\\ &{\\quad\\times}\\\\ &{\\sum_{i,j=1}^{N}w_{i,j}z_{j}\\ c,}\\\\ &{\\quad\\sum_{j=1}^{N}w_{i,j}z_{j,i}x_{j}}\\\\ &{\\quad+\\sum_{i+2}^{N}\\sum_{j=1}^{N}w_{i,j}z_{j}\\ c,\\quad\\leq C,\\quad\\forall k\\in\\{2,\\ldots,t\\}}\\\\ &{\\quad+\\sum_{i=2}^{N}\\sum_{j=1}^{N}w_{i,j}\\mathrm{R}_{i,j}}\\\\ &{\\quad\\sum_{j=1}^{N}w_{i,j}z_{j}\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\times}\\\\ &{\\quad-\\sum_{i=1}^{N}w_{i,j}z_{i}\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\times}\\\\ &{\\quad+\\sum_{i=1}^{N}\\sum_{j=1}^{N}w_{i,j}z_{i,j}+\\sum_{i+1}^{N}z_{i}\\sum_{j=1}^{N}w_{i,j}^{i}z_{i,j}\\qquad\\leq C,\\quad\\forall k\\in\\{t+1,\\ldots,T\\}}\\\\ &{\\quad+\\sum_{i=1}^{N}\\sum_{j=1}^{N}w_{i,j}y_{i,j}+\\sum_{i=i+2}^{N}\\sum_{j=1}^{N}w_{i,j}y_{i,j}}\\\\ &{\\quad\\times_{i,j}=y_{i,j}+z_{i-1,j},\\quad\\forall i\\in\\{2,\\ldots,T\\}\\ d\\in\\{1,\\ldots,N\\}}\\\\ &{\\quad z_{j,i}\\geq b_{j,j}\\quad\\forall i\\in\\{2,\\ldots,T\\},\\quad\\forall j\\in\\{1,\\ldots,N\\}}\\\\ &{\\quad z_{j,j}=z_{i,j},\\quad\\forall i\\in\\{1,\\ldots,T\\}\\ d\\in\\{1,\\ldots,N\\}}\\\\ &{\\quad z_{i,j}=z_{i,j}^{i}-\\sum_{i,j}^{N}\\psi\\in\\{1,\\ldots,T\\}\\ d\\in\\{1,\\ldots,N\\}}\\\\ &{\\quad\\forall j\\in\\mathcal{J}_{i,j}^{\\pm1} \n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle>b j(p[1:t]\\oplus\\hat{p}^{(t)},w_{1},w[2:t+1]\\oplus\\hat{w}^{(t)},x,y,z)}\\\\ {\\displaystyle=\\sum_{i=1}^{t}\\sum_{j=1}^{N}p_{i,j}x_{i,j}+\\sum_{i=t+1}^{T}\\sum_{j=1}^{N}\\hat{p}_{i,j}^{(t)}x_{i,j}-\\displaystyle\\sum_{j=1}^{N}w_{1j}x_{1j}-(\\sum_{i=2}^{t+1}\\sum_{j=1}^{N}\\alpha w_{i,j}z_{i,j}+\\sum_{i=t+2}^{T}\\sum_{j=1}^{N}\\alpha\\hat{w}_{i,j}^{(t)}z_{i,j})}\\\\ {\\displaystyle~~~-\\sum_{i=2}^{t+1}\\sum_{j=1}^{N}w_{i,j}y_{i,j}+\\sum_{i=t+2}^{T}\\sum_{j=1}^{N}\\hat{w}_{i,j}^{(t)}y_{i,j})+\\sum_{j=1}^{N}\\hat{w}_{T j}^{(t)}x_{T j}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "E Hyperparameters for the Experiments ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "The methods of $k$ -NN, RF, NN, Baseline, SCD and PCD have hyperparameters, which we tune via cross-validation: for $k$ -NN, we try $k\\in\\{1,3,5\\}$ ; for RF, we try different numbers of trees in the forest $\\{10,50,100\\}$ ; for NN, Baseline, and PCD, we treat the optimizer, learning rate, and epochs as hyperparameters. For Baseline, SCD and PCD, we treat the optimizer, learning rate, the early-cut-off value of log barrier regularization term $(\\mu)$ , and epochs as hyperparameters. ", "page_idx": 20}, {"type": "text", "text": "Table 4 show the final hyperparameter choices for the three problems: 1) production and sales problem, 2) investment problem, and 3) nurse rostering problem. ", "page_idx": 20}, {"type": "table", "img_path": "pXFiHHySEw/tmp/1bc86e0c0b8189b30d5b682e612a30aeef856cf46e1fb41c67fd40f4a0292b21.jpg", "table_caption": ["Table 4: Hyperparameters of the experiments on the three problems. "], "table_footnote": [], "page_idx": 20}, {"type": "text", "text": "Ridge, $k$ -NN, CART and RF are implemented using scikit-learn [29]. The neural network is implemented using $P y$ Torch [26]. To compute the two stages of optimization at test time for our method, and to compute the optimal solution of an (MI)LP under the true parameters, we use the Gurobi MILP solver [13]. ", "page_idx": 20}, {"type": "text", "text": "F Detailed Experiment Results ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "F.1 Production and Sales Problem ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Table 5 reports the mean post-hoc regrets and standard deviations across 30 simulations for all training methods on the production and sales problem. Compared among standard regression models, NN performs well and achieves the best performance in all cases listed in Table 5, while Ridge and RF also have decent performances. ", "page_idx": 20}, {"type": "text", "text": "Table 6 shows improvement ratios among the proposed 3 algorithms and BAS. \u201cA vs B\" refers to the improvement in the percentage of method A over method B. Take \u201cBaseline vs BAS\" as an example, the improvement percentage of the baseline over BAS is (355.56\u2212305.26) $/355.56\\!\\times\\!100\\%=14.1\\bar{5}\\%$ when $T=4$ in the low-profti price group. Comparing numbers in \u201cSCD VS BAS\", \u201cPCD VS BAS\", and \u201cBaseline VS BAS\" when stage num $=4$ and 12, we can see that the advantages of the proposed methods over BAS are more distinct when the number of stages is larger. Additionally, comparing numbers in \u201cSCD VS Baseline\" and \u201cPCD VS Baseline\" when stage $\\mathrm{num}=4$ and 12, we also note that the advantages of SCD and PCD over the Baseline are more distinct when the number of stages is larger. ", "page_idx": 20}, {"type": "table", "img_path": "pXFiHHySEw/tmp/f25bf69418af42b96b3be4824b70d8ecab7a7e063003e32dca4458b64f23d3d7.jpg", "table_caption": ["Table 5: Mean post-hoc regrets and standard deviations of all methods for the production and sales problem. "], "table_footnote": [], "page_idx": 21}, {"type": "table", "img_path": "pXFiHHySEw/tmp/1a013f0286e4c4d16836805c34f272c7fe186eae8d7b9111247f6401a7dc79c2.jpg", "table_caption": ["Table 6: Improvement ratios among Baseline, SCD, PCD, and standard regression models for the production and sales problem. "], "table_footnote": [], "page_idx": 21}, {"type": "text", "text": "Figure 1 shows post-hoc regret comparisons between BAS and the proposed methods (Baseline, SCD, and PCD) for each run. The $\\mathbf{X}_{\\mathrm{~}}$ -axis refers to the number of each simulation, and the y-axis refers to the ratio of the post-hoc regret achieved by BAS and the proposed methods (Baseline, SCD, and PCD) corresponding to that simulation. To easily read the comparisons, we sorted all simulations by the increasing order of the post-hoc regret ratios of BAS/SCD. The red dashed line where the post-hoc regret ratio is 1.0 represents the boundary line where (Baseline, SCD, or PCD) performs better or worse than BAS. When the point representing the post-hoc regret ratio of BAS/(Baseline, SCD, or PCD) falls above the red dashed line, it means that (Baseline, SCD, or PCD) performs better than BAS. Conversely, when the point falls below the red dashed line, it means BAS performs better than (Baseline, SCD, or PCD). Observing Figure 1, SCD outperforms BAS across all simulations in all 4 scenarios. While not as stable as SCD, PCD and Baseline also outperform BAS in most of the simulations. Compared with Figure 1a, there are more BAS/Baseline points that fall below the red dashed line in Figure 1b, while the number of BAS/SCD points and the number of BAS/PCD points that fall below the red dashed line are similar in Figure 1a and Figure 1b. The same phenomenon can be observed when comparing Figure 1c and Figure 1d, demonstrating the advantage of SCD and PCD over Baseline. ", "page_idx": 21}, {"type": "text", "text": "The win rate of a method against other methods can be directly computed from Figure 1 by counting the number of simulations with ratios $>1$ , and we provide the win rates table as a reference in Table 7. Table 7 indicates that in more than half of the simulations, SCD achieved the best performance. PCD followed closely, achieving the best performance in the remaining $20\\%$ to $50\\%$ of the simulations. ", "page_idx": 21}, {"type": "table", "img_path": "pXFiHHySEw/tmp/44467615ed084b7c4e5319033205abec9c118206a33607ba38c7b2373825b64f.jpg", "table_caption": ["Table 7: Win rates for the production and sales problem. "], "table_footnote": [], "page_idx": 21}, {"type": "text", "text": "F.2 Investment Problem ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Table 8 and Table 9 report the mean post-hoc regrets and standard deviations across 30 simulations for all training methods on the investment problem. Compared among standard regression models, NN performs well and achieves the best performance in most cases, while Ridge and RF also have decent performances and obtain the smallest mean post-hoc regret in some cases. ", "page_idx": 21}, {"type": "text", "text": "Table 10 shows improvement ratios among the proposed 3 algorithms and BAS. Comparing \"SCD vs BAS\", \"PCD vs BAS\", and \"Baseline vs BAS\" performance under the same capital and the same stage number, we observe that the advantages of the proposed methods (SCD, PCD, and Baseline) over the standard regression approaches become more pronounced as the transaction factor increases. ", "page_idx": 21}, {"type": "image", "img_path": "pXFiHHySEw/tmp/11576f7a1fa57ef71d04058fd97bda8b8ed76ef0179836ba074ff17999376244.jpg", "img_caption": ["Figure 1: BAS/Baseline, BAS/SCD, and BAS/PCD for the production and sales problem. "], "img_footnote": [], "page_idx": 22}, {"type": "table", "img_path": "pXFiHHySEw/tmp/7aa4208bfbc00a78bca5c6bc21ef67560e339f74d3fc75215346d124e41dcb5a.jpg", "table_caption": ["Table 8: Mean post-hoc regrets and standard deviations of all methods for the investment problem when capita $|{=}25$ . "], "table_footnote": [], "page_idx": 22}, {"type": "text", "text": "Besides, comparing \u201cSCD vs Baseline\" and \u201cPCD vs Baseline\" under the same capital and the same transaction factor but different stage numbers, the advantages of SCD and PCD over Baseline are amplified as the number of stages increases. This trend is consistent with the findings from the experiments on the production and sales problem. One interesting phenomenon is that under the same capital and the same transaction factor, the advantage of the proposed methods over BAS appears to be similar or even less obvious when the number of stages is 12 compared to when it is 4. This observation differs from the pattern seen in the production and sales problem experiments. We hypothesize that this divergence may be attributable to the fundamental differences between the problem settings. While the production and sales problem is a pure LP, the investment problem is an IP with several integrality constraints. The proposed methods relax these integrality constraints and treat the problem as an LP for the purpose of forward and backward propagation. The gaps between the original IP and the relaxed LP may accumulate as the number of stages grows larger, potentially diminishing the advantages of the Predict+Optimize approaches. ", "page_idx": 22}, {"type": "table", "img_path": "pXFiHHySEw/tmp/ec9ffc5cf11f7c7cec3818196e15644a5a81c016008d16afb79c7f33835ad3b3.jpg", "table_caption": ["Table 9: Mean post-hoc regrets and standard deviations of all methods for the investment problem when capita $|{=}50$ . "], "table_footnote": [], "page_idx": 23}, {"type": "table", "img_path": "pXFiHHySEw/tmp/460cef1ad05bc9f1dc9a32cd8ba0fd1f073cb40e954518bb590a7d09972a00a0.jpg", "table_caption": ["Table 10: Improvement ratios among Baseline, SCD, PCD, and standard regression models for the investment problem. "], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "Table 11 presents the win rate results for Baseline, SCD, PCD, and BAS. We observe that SCD outperforms BAS across most of the simulations, with win rates exceeding $80\\%$ in most scenarios. PCD also shows strong performance, particularly at higher transaction factors. Compared with BAS, PCD achieves win rates above $80\\%$ in many scenarios, closely following SCD. ", "page_idx": 23}, {"type": "table", "img_path": "pXFiHHySEw/tmp/82ff4ad00a7d6fb67da457ba843a43f1caa7cde1f050d25ec8a319c66b8ada12.jpg", "table_caption": ["Table 11: Win rates for the investment problem. "], "table_footnote": [], "page_idx": 23}, {"type": "text", "text": "F.3 Nurse Rostering Problem ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Table 12 reports the mean post-hoc regrets and standard deviations across 30 simulations for all training methods on the nurse rostering problem. Compared among standard regression models, NN always performs well and achieves the best performance, while Ridge and RF also have decent performances. ", "page_idx": 23}, {"type": "text", "text": "Table 13 shows improvement ratios among the proposed 3 algorithms and BAS. Comparing \"SCD vs BAS\", \"PCD vs BAS\", and \"Baseline vs BAS\" performance with different extra nurse payments, we observe that the advantages of the proposed methods (SCD, PCD, and Baseline) over the standard regression approaches become more pronounced as the extra nurse payment increases. ", "page_idx": 23}, {"type": "text", "text": "Figure 2 shows post-hoc regret comparisons between BAS and the proposed methods (Baseline, SCD, and PCD) for each run. To easily read the comparisons, we again sorted all simulations by the increasing order of the post-hoc regret ratios of BAS/SCD. Observing Figure 2, the proposed ", "page_idx": 23}, {"type": "text", "text": "Table 12: Mean post-hoc regrets and standard deviations of all methods for the nurse rostering problem. ", "page_idx": 24}, {"type": "table", "img_path": "pXFiHHySEw/tmp/7d1ec473edb82e6702af2143f71669ee8ffdd5913f1976454713d058a56db56e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "Table 13: Improvement ratios among Baseline, SCD, PCD, and standard regression models for the nurse rostering problem. ", "page_idx": 24}, {"type": "table", "img_path": "pXFiHHySEw/tmp/1727c9d772e500e5ee8634ad48f5c9cf344d2246798b5a235131d69eb784e47b.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "image", "img_path": "pXFiHHySEw/tmp/07b41b2e8d1e7a29d53becd471e36522dd91a25548d1c53f5ea81a30ce14d7cf.jpg", "img_caption": ["Figure 2: BAS/Baseline, BAS/SCD, and BAS/PCD for the nurse rostering problem. "], "img_footnote": [], "page_idx": 24}, {"type": "text", "text": "methods outperform BAS in most of the simulations. Since the nurse rostering problem is an IP with several integrality constraints, and the proposed methods just relax these constraints and treat the problem as an LP for the purpose of forward and backward propagation. We hypothesize that the gap between the original IP and the relaxed LP may diminish the advantages of the proposed methods, and thus, BAS sometimes performs slightly better than the proposed methods. ", "page_idx": 24}, {"type": "text", "text": "Table 14 presents the win rate results for Baseline, SCD, PCD, and BAS. Same as in the first two benchmarks, SCD demonstrates high win rates against BAS across all scenarios. SCD achieves win rates of $86.67\\%$ or higher in three out of four cases, peaking at $96.67\\%$ when the extra payment is 25. PCD also performs well, with win rates ranging from $70\\%$ to $83.33\\%$ against BAS. While not as consistently high as SCD, PCD\u2019s performance remains competitive, indicating its viability as an alternative approach. ", "page_idx": 25}, {"type": "table", "img_path": "pXFiHHySEw/tmp/0e966ea3acc173eeade0b8d4a1579a56987547235e82b0f9765bb70419e163db.jpg", "table_caption": ["Table 14: Win rates for the nurse rostering problem. "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "G Runtimes for the Experiments ", "text_level": 1, "page_idx": 25}, {"type": "table", "img_path": "pXFiHHySEw/tmp/655f88a625e2618d567cef0b2b1456170a99059360642934ae45d358b3c7f63b.jpg", "table_caption": ["Table 15: Average training time (in seconds) for the three benchmarks (in seconds). "], "table_footnote": [], "page_idx": 25}, {"type": "text", "text": "In this paper, all models are trained with Intel(R) Xeon(R) CPU E5-2630 v2 $@$ $2.60\\mathrm{GHz}$ processors on Google Colab. Since the testing time of different approaches is quite similar and close to being negligible, here, we only show the training time of each prediction model and do not include the testing time. At training time, the proposed Baseline, SCD, and PCD methods need to solve the LP. Training for the usual NN does not involve the LP at all, and so training is much faster (but gives much worse results). ", "page_idx": 25}, {"type": "text", "text": "There are two stopping criteria for SCD and PCD. We set the maximum iteration number of SCD and PCD as 5. Besides, if the difference between the post-hoc regret of two consecutive iterations is less than 1, we consider that the algorithm has converged. This is the second stopping criterion. ", "page_idx": 25}, {"type": "text", "text": "Table 15 shows the average training time across 30 simulations for the three problems. For the investment problem, since the training times under different transaction fees are similar when the capital and the number of stages are the same, we do not report them one by one but report only the average. For the nurse rostering problem, since the training times under different extra nurse payments are similar when the numbers of stages are the same, we also do not report them one by one but report only the average. ", "page_idx": 25}, {"type": "text", "text": "Since the proposed 3 methods require solving multiple LPs when training, their training times are usually longer than standard methods. But since the production and sales problem is an LP, the solving time of which is not too long, the training time of Baseline is around double of NN. Table 15 also shows that SCD and PCD usually converge in 4 iterations in the production and sales problem. ", "page_idx": 25}, {"type": "text", "text": "In the investment problem, the training times of Baseline are better than that of RF. The solving time of the OP, i.e., the difficulty of solving the OP, can largely affect the training times of the proposed methods. When the number of stages grows larger, the investment problem is more difficult to solve. Therefore, the training times of Baseline when there are 4 stages are quite comparable with that of NN, but the training times of Baseline when there are 12 stages are much larger than that of NN. In addition, when the OP becomes more complex, the number of iterations required for SCD and PCD convergence also increases. SCD and PCD convergence usually in 2-3 iterations when there are 4 stages, and usually in 3-4 iterations when there are 12 stages. ", "page_idx": 25}, {"type": "text", "text": "In the NRP, since the solving time of 1 NRP is large, the training times of the proposed methods are larger than standard regression methods, which indicates that one future research direction is the speed-vs-prediction accuracy tradeoffs on Multi-Stage Predict+Optimize. ", "page_idx": 25}, {"type": "text", "text": "H Other End-to-End Training Approaches on MILPs ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "As mentioned in Section 3 and Section 4, other types of training algorithms can be used within the proposed framework. Considering the performance in both post-hoc regret and training time, we proposed three training algorithms in Section 4. However, there are additional possibilities, and we will discuss two of them in this section. ", "page_idx": 26}, {"type": "text", "text": "H.1 Revealed Parameters as a Feature for Later Stage Predictions ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "As mentioned in Section 3, the proposed framework allows the training algorithm to choose whether to incorporate the revealed true parameters as additional features as input. In the current implementation of the proposed SCD and PCD methods, we did not include these revealed parameters because, in our preliminary experiments, including them does not really improve prediction quality while just increasing training time. ", "page_idx": 26}, {"type": "text", "text": "Table 16 reports the results from the experiments on the production and sales problem by incorporating the revealed parameters from stage $t-1$ as inputs to the stage $t$ networks. As Table 16 shows, the performance using this expanded input did not improve over the results of the proposed three approaches. ", "page_idx": 26}, {"type": "table", "img_path": "pXFiHHySEw/tmp/4699b4b534db8ed385b22068b5a3c1324ae61730872d0f9c2a674b9b5d5f54a4.jpg", "table_caption": ["Table 16: Mean post-hoc regrets and standard deviations of training SCD with revealed parameters, training PCD with revealed parameters, SCD, PCD, and Baseline for the production and sales problem.. "], "table_footnote": [], "page_idx": 26}, {"type": "text", "text": "The reason that including revealed parameters does not lead to better predictive performance is due to a combination of the nature of the data and the neural network architecture. Consider one extreme: the true parameter vectors in every single stage are always equal. A neural network model (or other reasonable models) that takes in the prior-stage true parameters should be able to learn to pick up on that and use the information. Consider the other extreme: if the parameter vectors are completely independent across stages, then no model will be able to use prior-stage true parameter information, since no actual information exists. Reality (and our particular dataset) is somewhere in between: there can be some correlation between stages, but, it really depends on whether such information is extractable by the neural network architecture (or whatever other prediction model one wants to use within our multi-stage framework). ", "page_idx": 26}, {"type": "text", "text": "For general applications, the decision whether to use the prior-stage true parameters is essentially another hyperparameter, to be tuned for that particular application using the available training data (though one can be safe and always include it, at the expense of training time). ", "page_idx": 26}, {"type": "text", "text": "H.2 Training Different-Stage Neural Networks Simultaneously (or, Necessity of Coordinate Descent Approach) ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "We propose two coordinate descent based methods in Section 4, but it is also possible to train all networks simultaneously, without the use of coordinate descent. In this section, we compare the proposed two methods against a simultaneous training method, to better motivate the necessity of coordinate descent. ", "page_idx": 26}, {"type": "text", "text": "A reasonable way (and the only way we can think of) to train all networks simultaneously is replace prior and future stage predictions in SCD and PCD by the ground truth parameters. However, intuitively, this is a worse approach than the proposed methods, given the interdependency of the predictors: the performance of a predictor depends on the predictions and choices made in past and future stages. ", "page_idx": 26}, {"type": "table", "img_path": "pXFiHHySEw/tmp/e2bb13c6fb3a5a4daaf3be6a6080052fbdaf609096d30495d51d4c4640120c78.jpg", "table_caption": ["Table 17: Mean post-hoc regrets and standard deviations of a simultaneous training method, SCD, PCD, and Baseline for the production and sales problem.. "], "table_footnote": [], "page_idx": 27}, {"type": "text", "text": "We have explored this alternative training method and here are the preliminary results on the production and sales problem in Table 17. We observe that the solution quality achieved by the simultaneous training method was worse than the SCD and PCD methods. ", "page_idx": 27}, {"type": "text", "text": "The coordinate descent strategy in Section 4 was needed to capture the complex interactions between the networks in different stages, and crucial for the strong performance. ", "page_idx": 27}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Justification: Our abstract and introduction state our contributions, including the new framework and training algorithms. We state clearly that the algorithms are applicable to MILPs. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 28}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Justification: Section 3 states the \u201ctotal recourse\u201d assumption that we assume all Stage $t$ optimization problems are always satisfiable. Section 4 states that we only work with MILP formulations. Section 5 discusses the tradeoff between training time and predictive accuracy. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 28}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 29}, {"type": "text", "text": "Justification: We make no substantial theoretical claims in this paper, beyond basic gradient calculations which are provided. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 29}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Justification: We provide code and all hyperparameter choices, as well as how the data was generated or sourced. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 29}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We provide data and code with the paper. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 30}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We provide all data splits, how the data was generated/sourced, and hyperparameter choices. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 30}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: We give standard deviations in our results. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 30}, {"type": "text", "text": "", "page_idx": 31}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: Appendix G gives the computational setup. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 31}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: We have no human subjects nor do we use any private data in experiments. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 31}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: Our work is on fundamental research and does not have a direct path to nefarious use cases. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed. \u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact. ", "page_idx": 31}, {"type": "text", "text": "\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 32}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: Our work does not release any artifacts that can be easily misused. Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 32}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 32}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Justification: We cite relevant data sources in Section 5. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 32}, {"type": "text", "text": "", "page_idx": 33}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 33}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 33}, {"type": "text", "text": "Justification: We provide documentation for our implementations to run these experiments. Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 33}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: We do not use any human subjects. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 33}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 33}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 33}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 33}, {"type": "text", "text": "Justification: We do not use any human subjects. ", "page_idx": 33}, {"type": "text", "text": "Guidelines: ", "page_idx": 33}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 33}]