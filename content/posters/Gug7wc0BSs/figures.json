[{"figure_path": "Gug7wc0BSs/figures/figures_1_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of various sparse training methods on the 3s5z task from the StarCraft Multi-Agent Challenge (SMAC) benchmark.  The neural network used has only 10% of its original parameters.  The methods compared include Static Sparse (SS), SET, RigL, RLx2, and the proposed MAST.  The y-axis represents the win rate, illustrating MAST's significantly superior performance compared to other methods.", "section": "Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_2_1.jpg", "caption": "Figure 2: Illustration of dynamic sparse training", "description": "The figure illustrates the process of dynamic sparse training. It starts with a dense network, then randomly sparsify the network. During training, it dynamically drops and grows links based on weight magnitude and gradient information to optimize the model parameters and connectivity. This process maintains the network sparsity throughout the training with dynamic sparse training.", "section": "2 Preliminaries"}, {"figure_path": "Gug7wc0BSs/figures/figures_3_1.jpg", "caption": "Figure 3: An example of the MAST framework based on QMIX.", "description": "This figure illustrates the MAST framework's architecture, specifically highlighting its application within the QMIX algorithm.  The framework consists of several key components:\n\n1. **Dual Buffers:**  An on-policy and an off-policy buffer are used for storing experience. The on-policy buffer stores the most recent experience, enhancing learning stability.  The off-policy buffer stores older experience, improving sample efficiency. Both are used to sample training data.\n2. **Environment Interaction:** Agents interact with the environment, generating experience (observations, actions, rewards).\n3. **Sparse MARL Agents (Agent 1 to Agent N):**  Multiple MARL agents are trained, each with a sparse neural network representing their Q-function (Qi). \n4. **Mixing Network:** Combines the individual Q-functions to produce a joint action-value function (Qtot).\n5. **TD(\u03bb) with Soft Mellowmax:** The framework employs a hybrid TD(\u03bb) learning target combined with the Soft Mellowmax operator to mitigate the overestimation problem that often arises in sparse network training and improve target reliability. This target is used to update the Q-functions.", "section": "Enhancing Value Learning in Sparse Models"}, {"figure_path": "Gug7wc0BSs/figures/figures_4_1.jpg", "caption": "Figure 4: Performances of different step lengths.", "description": "This figure shows the test win rates of different step lengths of TD(\u03bb) targets with different model sizes (sparsity levels). The x-axis represents the multi-step length and the y-axis represents the test win rate. The different lines represent different model sizes (12.5%, 10%, 7.5%, 5%).  It demonstrates that an optimal step length exists for various model sizes and that the optimal step length increases as model size decreases.", "section": "3.1 Improving the Reliability of Training Targets"}, {"figure_path": "Gug7wc0BSs/figures/figures_5_1.jpg", "caption": "Figure 5: Effects of Soft Mellowmax operator.", "description": "This figure demonstrates the impact of the Soft Mellowmax operator on the performance of RigL-QMIX in the 3s5z environment of SMAC.  Subfigure (a) shows the win rates, illustrating that RigL-QMIX with the Soft Mellowmax operator (RigL-QMIX-SM) outperforms the standard RigL-QMIX. Subfigure (b) displays the estimated values, highlighting that the Soft Mellowmax operator effectively mitigates overestimation bias, leading to more accurate value estimations.", "section": "3 Enhancing Value Learning in Sparse Models"}, {"figure_path": "Gug7wc0BSs/figures/figures_5_2.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "The figure compares the performance of different sparse training methods on the 3s5z task from SMAC.  The methods include static sparse (SS), SET, RigL, RLx2, and the proposed MAST.  The y-axis represents the win rate, indicating the success rate of the trained agents. MAST demonstrates a significantly higher win rate compared to other methods, highlighting its effectiveness in multi-agent sparse training.", "section": "Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_6_1.jpg", "caption": "Figure 7: Distribution Shift: d1 and d2 are distribution distances.", "description": "This figure illustrates how the dual buffer mechanism in MAST shifts the distribution of training samples. The blue curve represents the distribution of samples from the behavior policy in a single buffer, resulting in a policy inconsistency error (d1). By using dual buffers, the distribution shifts towards the target policy (red curve), reducing the policy inconsistency error (d2). The yellow curve shows the distribution of samples from the shifted target policy.", "section": "3 Enhancing Value Learning in Sparse Models"}, {"figure_path": "Gug7wc0BSs/figures/figures_7_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of various sparse training methods on the 3s5z task from SMAC, using a neural network with only 10% of its original parameters.  It shows that MAST significantly outperforms other methods such as SS, SET, RigL, and RLx2, achieving a win rate of over 90%. This highlights the challenges of applying sparse networks in MARL and demonstrates the effectiveness of the proposed MAST framework.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_7_2.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of different sparse training methods on the 3s5z task from SMAC. The methods include Static Sparse (SS), SET, RigL, RLx2, and MAST.  The y-axis represents the win rate, and the x-axis shows the different methods. MAST achieves a win rate of over 90%, significantly outperforming other methods.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_8_1.jpg", "caption": "Figure 10: Comparison of different sparse masks.", "description": "This figure compares the performance of different sparse network architectures with the same sparsity level.  The \"cheating ticket\" uses the topology obtained from MAST training and achieves the highest performance, approaching that of the dense model. The \"winning ticket\" obtained from MAST also performs well, while both the \"winning ticket\" from RigL and the \"random ticket\" perform significantly worse, highlighting the effectiveness of MAST in discovering effective sparse architectures.", "section": "4.2 Sparse Models Obtained by MAST"}, {"figure_path": "Gug7wc0BSs/figures/figures_8_2.jpg", "caption": "Figure 11: Visualization of weight masks in the first hidden layer of agent 1 by MAST-QMIX.", "description": "This figure visualizes the evolution of weight masks in the first hidden layer of agent 1 during the MAST-QMIX training process in the 3s5z scenario from the StarCraft Multi-Agent Challenge (SMAC) benchmark.  It shows snapshots of the mask at different training steps (0M, 0.5M, 1M, and 2M), where lighter pixels indicate the presence of a connection and darker pixels represent an absent connection.  The figure demonstrates how the network topology evolves during training, initially being highly sparse, gradually becoming more structured. This illustrates the dynamic sparsity of MAST and how it adapts the network structure during training.", "section": "3 Enhancing Value Learning in Sparse Models"}, {"figure_path": "Gug7wc0BSs/figures/figures_8_3.jpg", "caption": "Figure 12: Agent roles.", "description": "This figure consists of two subfigures. Subfigure (a) visualizes weight masks of the first hidden layer for different agents (stalkers and zealots) in the 3s5z scenario. It shows that the network topology for the same type of agent is very similar. However, stalkers have more connections than zealots, which is in line with their more critical roles in the game. Subfigure (b) compares the adaptive sparsity allocation scheme used in MAST with several fixed sparsity patterns (different percentage for stalkers and zealots). The results demonstrate that the adaptive sparsity allocation in MAST outperforms other manual sparsity patterns. ", "section": "4.2 Sparse Models Obtained by MAST"}, {"figure_path": "Gug7wc0BSs/figures/figures_25_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of various sparse training methods on the 3s5z task from SMAC. The methods include static sparse networks (SS), SET, RigL, RLx2, and the proposed MAST framework.  The y-axis represents the win rate, showing the effectiveness of each method in achieving high performance with only 10% of the original network parameters.  MAST significantly outperforms other methods.", "section": "Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_26_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "The figure shows the comparison of different sparse training methods on the 3s5z task from SMAC.  The methods compared are Static Sparse (SS), SET, RigL, RLx2, and MAST.  The y-axis represents the win rate, showing the percentage of games won by the agents trained with each method. MAST significantly outperforms all other methods, achieving a win rate of over 90%, while the other methods achieve much lower win rates. This demonstrates the effectiveness of MAST in training sparse MARL agents compared to existing sparse training methods.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_26_2.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of various sparse training methods, including static sparse (SS), SET, RigL, RLx2, and the proposed MAST, on the 3s5z task from the StarCraft Multi-Agent Challenge (SMAC) benchmark.  The neural network used for all methods had only 10% of its original parameters.  The results show that MAST significantly outperforms the other methods, achieving a win rate of over 90%, while the others achieved win rates significantly below 50%.  This highlights the challenges of applying sparse training methods directly to multi-agent reinforcement learning (MARL) and the effectiveness of the MAST framework in addressing those challenges.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_28_1.jpg", "caption": "Figure 5: Effects of Soft Mellowmax operator.", "description": "This figure shows the effects of using the Soft Mellowmax operator in the QMIX algorithm.  Panel (a) displays the win rates for RigL-QMIX (without Soft Mellowmax) and RigL-QMIX-SM (with Soft Mellowmax) on the 3s5z task in SMAC.  It demonstrates that RigL-QMIX-SM significantly outperforms RigL-QMIX. Panel (b) shows the estimated values for both algorithms, illustrating how the Soft Mellowmax operator effectively mitigates overestimation bias, a common problem in Q-learning.", "section": "3.1 Improving the Reliability of Training Targets"}, {"figure_path": "Gug7wc0BSs/figures/figures_29_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "The figure shows a bar chart comparing the performance of different sparse training methods on the 3s5z task from SMAC.  The methods compared are: Static Sparse (SS), SET, RigL, RLx2, and MAST.  MAST significantly outperforms the other methods, achieving a win rate of over 90%, while the others achieve win rates ranging from 32% to 49%. This highlights the effectiveness of MAST in training sparse MARL agents.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_29_2.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "The figure shows a bar chart comparing the performance of various sparse training methods on the 3s5z task from SMAC. The methods compared are Static Sparse (SS), SET, RigL, RLx2, and MAST.  The y-axis represents the win rate, indicating the percentage of games won by the agents trained with each method. MAST significantly outperforms the other methods, achieving a win rate of over 90%, while the others achieve significantly lower win rates. This demonstrates the effectiveness of MAST in enabling the training of sparse MARL agents.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_30_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of different sparse training methods on the 3s5z task from StarCraft Multi-Agent Challenge (SMAC).  The methods compared include Static Sparse (SS), SET, RigL, RLx2 and the proposed MAST method.  The y-axis represents the win rate achieved by each method, showing that MAST significantly outperforms all other methods, achieving a win rate of over 90% with a network using only 10% of its original parameters. This highlights the effectiveness of MAST in training sparse MARL agents.", "section": "Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_31_1.jpg", "caption": "Figure 11: Visualization of weight masks in the first hidden layer of agent 1 by MAST-QMIX.", "description": "This figure visualizes the evolution of the weight mask in the first hidden layer of agent 1 during the training process of MAST-QMIX in the 3s5z scenario of the StarCraft Multi-Agent Challenge (SMAC) benchmark.  The figure shows four snapshots of the weight mask at different training steps (0M, 0.5M, 1M, and 2M steps). Each snapshot represents a 64x64 matrix, where each cell represents a connection between an input neuron and an output neuron.  A light pixel indicates the existence of the connection, while a dark pixel indicates the absence of a connection. The figure shows how the network's topology changes over time, with connections becoming more concentrated in certain areas as training progresses. This visualization demonstrates the dynamic sparse training process of MAST, where the network's topology is dynamically adjusted during training to achieve high efficiency.", "section": "3 Enhancing Value Learning in Sparse Models"}, {"figure_path": "Gug7wc0BSs/figures/figures_31_2.jpg", "caption": "Figure 11: Visualization of weight masks in the first hidden layer of agent 1 by MAST-QMIX.", "description": "This figure visualizes the evolution of weight masks in the first hidden layer of agent 1 during the MAST-QMIX training process in the 3s5z scenario from the StarCraft Multi-Agent Challenge (SMAC) benchmark.  Snapshots of the weight masks are shown at four different training steps: 0M, 0.5M, 1M, and 2M (million steps).  Each mask is represented as a matrix, where a light pixel indicates the existence of a connection, and a dark pixel represents an absent connection. The figure showcases how the network's topology evolves dynamically during training, with a pronounced shift initially and a gradual convergence of connections onto a subset of input neurons later on, highlighting the redundancy present in dense models and the efficacy of MAST in identifying essential connections.", "section": "4.2 Sparse Models Obtained by MAST"}, {"figure_path": "Gug7wc0BSs/figures/figures_32_1.jpg", "caption": "Figure 11: Visualization of weight masks in the first hidden layer of agent 1 by MAST-QMIX.", "description": "This figure visualizes the evolution of the weight mask in the first hidden layer of agent 1 in the MAST-QMIX model during training on the 3s5z task.  The images show the sparsity pattern of the network at four different training time points (0M, 0.5M, 1M, and 2M training steps).  Light pixels indicate the presence of a connection, while dark pixels represent an absent connection. The figure demonstrates how the network's connections change over time during training, showcasing the dynamic nature of the sparse training process and the emergence of a more structured pattern from the initial random sparsity.", "section": "3 Enhancing Value Learning in Sparse Models"}, {"figure_path": "Gug7wc0BSs/figures/figures_33_1.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "The figure shows the comparison of different sparse training methods, including static sparse (SS), SET, RigL, RLx2, and MAST. MAST achieves the highest win rate (over 90%) compared to other methods on the 3s5z task from SMAC, demonstrating its effectiveness in value-based MARL.  The other methods show significantly lower win rates. This highlights the challenge of applying sparse training to MARL and the unique contribution of MAST in improving both the reliability of learning targets and the rationality of sample distribution.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_33_2.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "The figure shows a bar chart comparing the performance of different sparse training methods on the 3s5z task from SMAC. The methods compared are Static Sparse (SS), SET, RigL, RLx2, and MAST. MAST significantly outperforms the other methods, achieving a win rate of over 90%.", "section": "1 Introduction"}, {"figure_path": "Gug7wc0BSs/figures/figures_33_3.jpg", "caption": "Figure 1: Comparison of different sparse training methods.", "description": "This figure compares the performance of various sparse training methods (SS, SET, RigL, RLx2, and MAST) on the 3s5z task from the StarCraft Multi-Agent Challenge (SMAC) benchmark.  The neural network used in the experiment only contains 10% of its original parameters.  The results demonstrate that a straightforward application of dynamic sparse training techniques such as SET and RigL, and static sparse training (SS), are ineffective in the multi-agent setting, while RLx2 is only effective for single-agent settings. In contrast, the proposed MAST framework achieves a win rate of over 90%, highlighting its effectiveness in training sparse multi-agent reinforcement learning (MARL) models.", "section": "1 Introduction"}]