[{"figure_path": "hB5NkiET32/figures/figures_3_1.jpg", "caption": "Figure 2: Architecture of Our System", "description": "The figure illustrates the architecture of ABAUDITOR, a hybrid LLM and rule-based reasoning system for detecting accounting errors in smart contracts.  It starts with a smart contract as input, which is preprocessed by converting it into Static Single Assignment (SSA) form. The preprocessor then identifies entry functions. The parameters and global variables of these entry functions are then annotated with their financial meanings using an LLM.  Rule-based reasoning is then used to propagate these meanings through the contract's logic.  A validation and hallucination remedy step, using a trace generated from the rule-based reasoning, is used to filter out incorrect annotations (hallucinations) produced by the LLM. This process results in a list of potential accounting error vulnerabilities, which are further refined to identify the final accounting error vulnerabilities.", "section": "3 Design"}, {"figure_path": "hB5NkiET32/figures/figures_3_2.jpg", "caption": "Figure 3: Demo smart contract with accounting bug", "description": "This figure shows a Solidity smart contract with two functions: `tswap` and `applyFee`. The `tswap` function is a public function that performs a currency swap, applying a fee using the internal `applyFee` function.  The accounting bug lies in the double application of the fee within the `tswap` function, resulting in an incorrect final amount.", "section": "3 Design"}, {"figure_path": "hB5NkiET32/figures/figures_4_1.jpg", "caption": "Figure 3: Demo smart contract with accounting bug", "description": "This figure shows a Solidity smart contract with two functions: `tswap()` and `applyFee()`. The `tswap()` function is a public function that swaps an amount of one currency for another, applying a fee in the process. The `applyFee()` function is an internal function that deducts the fee from the input amount. The accounting bug lies in the `tswap()` function, specifically in how the fee is applied twice, resulting in a smaller remaining amount than intended.", "section": "3 Design"}, {"figure_path": "hB5NkiET32/figures/figures_5_1.jpg", "caption": "Figure 5: Reasoning Trace Prompt and Response from Hallucination", "description": "This figure demonstrates an example of how the system uses a reasoning trace to identify and correct hallucinations produced by the LLM. The LLM initially mislabels the variable \"tAmount\" as a \"Reserve\" instead of a \"raw balance.\" The system generates a reasoning trace that shows the LLM's reasoning steps and the inference rules used. This trace is then given to the LLM again as a prompt to determine any possible mislabeling. Based on the trace, the LLM corrects its initial annotation, identifying that \"tAmount\" should have been classified as a \"raw balance\". This example highlights the system's ability to leverage the LLM's capabilities while mitigating its potential for hallucinations.", "section": "3.3 Iterative Validation of Accounting Bugs and Remedy"}, {"figure_path": "hB5NkiET32/figures/figures_12_1.jpg", "caption": "Figure 6: Format for Naive Prompt", "description": "The figure shows the format of the prompt used for the naive approach of directly prompting the LLM with few-shot accounting bug examples and asking it to find new bugs of a similar nature.  It consists of three parts: 1. Definition of accounting bugs; 2. Few-shot examples (code and reason for being erroneous); 3. The new smart contract to analyze.", "section": "A Naive Approach"}, {"figure_path": "hB5NkiET32/figures/figures_12_2.jpg", "caption": "Figure 7: Format for Initial Prompt for Raw Balance", "description": "The figure shows the format of the prompt used for the initial annotation task. The prompt asks whether a given variable has a specific financial meaning.  It provides a definition of the financial meaning along with examples of variables having that meaning. The user is asked to answer YES or NO. ", "section": "3.1 Initial Annotation by LLM"}, {"figure_path": "hB5NkiET32/figures/figures_13_1.jpg", "caption": "Figure 3: Demo smart contract with accounting bug", "description": "This figure shows a Solidity smart contract with two functions: `tswap()` and `applyFee()`.  `tswap()` is a public function that performs a currency swap, applying a fee via the internal `applyFee()` function. The accounting bug lies in the fee deduction within `applyFee()`, where the fee is applied twice, resulting in an incorrect remaining amount after the swap.", "section": "3 Design"}, {"figure_path": "hB5NkiET32/figures/figures_14_1.jpg", "caption": "Figure 2: Architecture of Our System", "description": "The figure illustrates the architecture of ABAUDITOR, a hybrid LLM and rule-based reasoning system for detecting accounting errors in smart contracts.  It shows the flow of processing, starting with smart contract input, through several stages including pre-processing, SSA conversion, LLM annotation, rule-based reasoning, validation, and hallucination remedy.  The output is a list of potential accounting error vulnerabilities.", "section": "3 Design"}, {"figure_path": "hB5NkiET32/figures/figures_15_1.jpg", "caption": "Figure 5: Reasoning Trace Prompt and Response from Hallucination", "description": "This figure demonstrates an example of how the system uses a reasoning trace to identify and correct hallucinations by the LLM.  The prompt shows the reasoning trace, which includes the LLM's initial annotation, the propagation of financial meanings, and the identification of a potential accounting bug.  The LLM then responds by correcting the initial annotation, leading to a revised classification and the removal of the bug. This illustrates the iterative validation process employed by ABAUDITOR to improve accuracy and reliability.", "section": "3.3 Iterative Validation of Accounting Bugs and Remedy"}, {"figure_path": "hB5NkiET32/figures/figures_16_1.jpg", "caption": "Figure 9: Distributions of financial types", "description": "This pie chart shows the distribution of six financial meanings in the human annotations from the first experiment. Raw balance is the most frequent type (67%), followed by reserve (10%), net rate (8%), debt (5%), price (5%), and interest rate (5%). This distribution reflects the prevalence of raw balance variables in entry functions, where they often represent amounts of currency owned by users.", "section": "Research Question 2: What is the distribution of financial meanings?"}]