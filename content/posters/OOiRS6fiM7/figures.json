[{"figure_path": "OOiRS6fiM7/figures/figures_1_1.jpg", "caption": "Figure 1: On the left and in the middle we have two histograms representing the probability distributions of the random variables X\u2081 and X\u2082, respectively. The grid on the right represents the joint probability of the two distributions, with more intense colors indicating events with higher probability. The distribution of the random variable X = X\u2081 + X\u2082 can be obtained by summing up the diagonals of the grid as indicated in the figure. While this method of obtaining the distribution for X is valid and used by state-of-the-art neurosymbolic techniques [14, 21], the explicit construction of the joint is unnecessary and hampers inference and learning times (cf. Section 5).", "description": "This figure illustrates three different ways of visualizing the sum of two independent discrete random variables (X\u2081 and X\u2082).  The left and center histograms show the probability distributions of X\u2081 and X\u2082 respectively. The right panel shows the joint probability distribution of X\u2081 and X\u2082, represented as a grid where color intensity represents the probability of each combination of values.  The figure highlights that the probability distribution of the sum X = X\u2081 + X\u2082 can be obtained by summing along the diagonals of the joint distribution grid.  While this direct method is valid, it is computationally expensive for larger distributions and forms the basis for the efficiency improvements in the proposed PLIA approach that avoids this explicit construction.", "section": "1 Introduction"}, {"figure_path": "OOiRS6fiM7/figures/figures_4_1.jpg", "caption": "Figure 2: (Left) Adding a constant to a probabilistic integer simply means that we have to shift the corresponding histogram, shown here for X' = X + 1. (Middle) For the negation X\u2032 = \u2212X, the bins of the histogram reverse their order and the negation of the upper bound becomes the new lower bound. (Right) For multiplication, here show the case X' = 3X by inserting zero probability bins.", "description": "This figure demonstrates three operations on probabilistic integers: addition of a constant, negation, and multiplication by a constant.  The left panel shows that adding a constant shifts the histogram to the right. The middle panel shows that negation reverses the order of the histogram's bins, while the right panel shows that multiplication by a constant (3 in this example) stretches the histogram by inserting empty bins. ", "section": "2 Efficient Addition of Integer-Valued Random Variables"}, {"figure_path": "OOiRS6fiM7/figures/figures_6_1.jpg", "caption": "Figure 4: Control flow diagram for probabilistic branching. The branching condition is probabilistically true and induces a binary random variable C. In each of the two branches we then have two conditionally independent random variables X<sub>T</sub> and X<sub>\u22a5</sub> to which the functions g<sub>T</sub> and g<sub>\u22a5</sub> are applied in their respective branches. The probabilities of X\u2032 are then given by the weighted sums of the probabilities of g<sub>T</sub>(X<sub>T</sub>) and g<sub>\u22a5</sub>(X<sub>\u22a5</sub>) (Equation 29).", "description": "This figure shows a control flow diagram illustrating probabilistic branching.  A probabilistic integer X is input, feeding into a binary random variable C representing a condition. If the condition C is true, X passes to X<sub>T</sub> and function g<sub>T</sub> is applied; otherwise (C is false), X passes to X<sub>\u22a5</sub> and function g<sub>\u22a5</sub> is applied.  The final output X\u2032 is a weighted sum of the results from the two branches, reflecting the probabilities of the true and false branches of the condition.", "section": "4.2 Probabilistic Branching"}, {"figure_path": "OOiRS6fiM7/figures/figures_7_1.jpg", "caption": "Figure 5: We plot the runtime of Dice [5] and PLIA\u2081 against the domain size of the problems. From left to right, we have E[X\u2081 + X\u2082], E[1X\u2081+X\u2082<0], E[1X\u2081+X\u2082=0] and probabilistic Luhn. All four plots share the same y-axis on the very left, which is in log-scale. Following the experimental protocol of Cao et al. [5], we report average runtimes for every integer on the x-axis, both bitwidths and identifier lengths. No significant deviations from the mean were found.", "description": "This figure compares the runtime performance of PLIA\u2081 and Dice across four different benchmarks: the expected value of the sum of two random variables, the probability of the sum being less than 0, the probability of the sum being equal to 0, and the probabilistic Luhn algorithm. The x-axis represents the domain size of the problem (bitwidth or identifier length), and the y-axis represents the runtime in seconds (log-scale).  PLIA\u2081 shows significantly faster runtimes compared to Dice across all benchmarks, demonstrating its scalability advantages.", "section": "5.1 Exact Inference with Probabilistic Integers"}, {"figure_path": "OOiRS6fiM7/figures/figures_8_1.jpg", "caption": "Figure 6: (Left) Example of an MNIST addition data point, consisting of two numbers given as a series of MNIST digits and an integer. The integer is the sum of the two numbers and constitutes the label of the data point. (Right) Data point from the visual sudoku data set, consisting of a 9 \u00d7 9 grid filled with MNIST digits. Data points are labeled with a Boolean value indicating whether the integers underlying the MNIST digits satisfy the constraints of sudoku.", "description": "This figure shows two examples of data points used in the experiments for neurosymbolic learning.  The left panel displays an MNIST addition example, where two numbers represented by sequences of MNIST digits are added together to produce a result. This result, an integer, serves as the label for the data point. The right panel shows an example of a visual Sudoku data point.  It features a 9x9 grid populated with MNIST digits. The data point's label is a Boolean value indicating whether the underlying digits satisfy the rules of Sudoku.", "section": "5.2 Neurosymbolic Learning"}, {"figure_path": "OOiRS6fiM7/figures/figures_12_1.jpg", "caption": "Figure 5: We plot the runtime of Dice [5] and PLIA\u2081 against the domain size of the problems. From left to right, we have E [X\u2081 + X\u2082], E [1X\u2081+X\u2082<0], E [1X\u2081+X\u2082=0] and probabilistic Luhn. All four plots share the same y-axis on the very left, which is in log-scale. Following the experimental protocol of Cao et al. [5], we report average runtimes for every integer on the x-axis, both bitwidths and identifier lengths. No significant deviations from the mean were found.", "description": "This figure compares the performance of the proposed PLIA\u2081 method and the existing Dice method for four different probabilistic integer arithmetic problems. The x-axis represents the size of the problem, either in terms of bitwidth or identifier length, and the y-axis represents the runtime in seconds (logarithmic scale). The figure shows that PLIA\u2081 significantly outperforms Dice, especially for larger problems. ", "section": "5 Experiments"}]