[{"figure_path": "OP2D9sIdo4/figures/figures_1_1.jpg", "caption": "Figure 1: The distribution of CWE-416 (left) and CWE-119 (right) vulnerabilities across all modules in the Linux kernel over the past decade.", "description": "This figure shows two pie charts visualizing the distribution of CWE-416 (Use After Free) and CWE-119 (Buffer Overflow) vulnerabilities across different modules of the Linux kernel over the past ten years.  The left chart represents CWE-416, while the right chart represents CWE-119. Each slice in the pie chart represents a module, and its size is proportional to the number of vulnerabilities found within that module.  The charts highlight the disproportionate distribution of vulnerabilities across modules; certain modules are more prone to specific vulnerability types than others.", "section": "2 Motivation"}, {"figure_path": "OP2D9sIdo4/figures/figures_1_2.jpg", "caption": "Figure 2: CWE-416 vulnerability (left) and CWE-119 vulnerability (right) discovered in the net module.", "description": "This figure shows examples of CWE-416 (Use After Free) and CWE-119 (Buffer Overflow) vulnerabilities found in the \"net\" module of the Linux kernel.  The left panel displays a CWE-416 vulnerability involving a race condition with pointer-related resource leakage. The right panel shows a CWE-119 vulnerability related to insufficient checks in network protocol fields.  The examples highlight how different vulnerability types can manifest within the same module, demonstrating the need for task-oriented vulnerability detection.", "section": "2 Motivation"}, {"figure_path": "OP2D9sIdo4/figures/figures_2_1.jpg", "caption": "Figure 3: The overall architecture of KF-GVD.", "description": "The figure illustrates the overall architecture of the KF-GVD model, which consists of two main phases: feature representation and vulnerability detection and interpretation.  In the feature representation phase, source code is transformed into Code Property Graphs (CPGs), and task-specific vulnerability knowledge is integrated. Then, graph embedding, GCN layers, and self-attention are used to extract features. The vulnerability detection and interpretation phase involves knowledge fusion, graph pooling, classification, and statement-level interpretation to output both function-level prediction and statement-level interpretation.", "section": "3 The KF-GVD Framework"}, {"figure_path": "OP2D9sIdo4/figures/figures_3_1.jpg", "caption": "Figure 4: An example of feature representation.", "description": "This figure shows an example of how the source code is transformed into a Code Property Graph (CPG) and then into node feature vectors.  The CPG visually represents the code's structure and relationships.  The node feature vectors combine three types of information:  Vop (code element operation type, one-hot encoding), Vfunc (special function calls/code field types, one-hot encoding), and Vsemantic (semantic information from code statements, Word2Vec mapping). These combined vectors are used as the input for the next step in the KF-GVD model.", "section": "3.1 Feature Representation"}, {"figure_path": "OP2D9sIdo4/figures/figures_3_2.jpg", "caption": "Figure 5: The workflow of KF-GVD.", "description": "This figure illustrates the workflow of the KF-GVD model. It is divided into two parts: the source task and the target task. In the source task, a model FDo is trained on a dataset Do.  In the target task, knowledge Kt is integrated into the model using a knowledge fusion step. The fusion combines the knowledge Kt with the pre-trained model FDo and the dataset dt to generate a specialized model f that is more effective for the target task.", "section": "3.2 Vulnerability Detection and Interpretation"}, {"figure_path": "OP2D9sIdo4/figures/figures_7_1.jpg", "caption": "Figure 6: Statement-level VD comparison on MAP@5.", "description": "This figure compares the performance of various statement-level vulnerability detection (VD) methods across three target tasks (Tm119, Tsub, Tm416).  The methods compared are IVDetect, LineVD, LineVul, GVD-ft, and KF-GVD.  The metric used is Mean Average Precision at 5 (MAP@5), indicating the average precision of the top 5 most confidently predicted vulnerable statements.  KF-GVD consistently outperforms other methods in MAP@5 across all three target tasks, demonstrating its superiority in precisely locating vulnerable statements.", "section": "4.3 Statement-level Vulnerability Detection Performance"}, {"figure_path": "OP2D9sIdo4/figures/figures_15_1.jpg", "caption": "Figure 7: The F1-score of KF-GVD with knowledge fusion for different ratio of samples on Tm119 and Tsub.", "description": "This figure shows the impact of the ratio of samples using knowledge fusion on the F1-score for function-level and statement-level vulnerability detection.  The x-axis represents the ratio of samples where knowledge fusion was applied, and the y-axis shows the F1-score.  Separate lines are shown for different modules (Fs, Drivers, Net, Includes) and CWE subtypes (CWE-125, CWE-787) in both function-level and statement-level analyses. The graph indicates the optimal range for knowledge fusion, showing that the model achieves its peak performance when a certain proportion of samples undergo knowledge fusion.", "section": "D.1 Vulnerability Knowledge Sensitivity Analysis"}, {"figure_path": "OP2D9sIdo4/figures/figures_16_1.jpg", "caption": "Figure 8: The average F1-score of KF-GVD on different fusion coefficient settings.", "description": "This figure shows the impact of the knowledge fusion coefficient (\u03b2) on the performance of the KF-GVD model. The x-axis represents different values of \u03b2, and the y-axis represents the average F1-score across various subtasks within three target tasks (Tm119, Tsub, and Tm416). The graph illustrates how changing \u03b2 affects the model's ability to integrate vulnerability knowledge, influencing the precision and recall of vulnerability detection.", "section": "D.1 Vulnerability Knowledge Sensitivity Analysis"}]