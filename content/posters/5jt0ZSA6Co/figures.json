[{"figure_path": "5jt0ZSA6Co/figures/figures_1_1.jpg", "caption": "Figure 1: Example problems from the three PBE domains we evaluate HYSYNTH on: grid-based puzzles (ARC), tensor manipulation (TENSOR), and string manipulation (STRING).", "description": "This figure shows three example problems from the three program-by-example (PBE) domains used to evaluate the HYSYNTH program synthesis approach.  (a) shows an example of a grid-based puzzle from the Abstraction and Reasoning Corpus (ARC). The task is to identify the transformation rule that maps input grids to output grids and apply it to a test grid.  (b) shows an example of tensor manipulation problem. The task is to generate a program that transforms input tensor into the desired output tensor using Tensorflow operators. (c) shows an example of a string manipulation problem. The task is to create a program to transform an input string into the desired output string.", "section": "1 Introduction"}, {"figure_path": "5jt0ZSA6Co/figures/figures_2_1.jpg", "caption": "Figure 2: An overview of the hybrid program synthesis technique that uses a context-free LLM approximation. Programs generated by an LLM are used to learn a PCFG, which guides a bottom-up synthesizer to generate programs until a solution is found.", "description": "This figure illustrates the HYSYNTH program synthesis approach. It starts by using an LLM (like GPT-3.5, GPT-4, or DeepSeek) to generate programs given a prompt including input/output examples and a grammar.  These LLM-generated programs are then used to train a context-free surrogate model (a probabilistic context-free grammar or PCFG). This PCFG is then used to guide a bottom-up synthesizer, which efficiently explores the program search space by considering programs in increasing cost order. The synthesizer executes candidate programs, checking if they satisfy the input/output examples, until a solution is found. This hybrid approach combines the strengths of LLMs (generating plausible programs) and efficient search techniques (systematic exploration of the program space) to improve program synthesis.", "section": "Our Solution: Context-Free LLM Approximation"}, {"figure_path": "5jt0ZSA6Co/figures/figures_7_1.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure shows the performance of HYSYNTH compared to baselines and ablations across three domains: ARC, TENSOR, and STRING.  Subfigures (a), (b), and (c) are cumulative plots showing the number of problems solved over time for each domain.  The plots illustrate that HYSYNTH outperforms baselines in solving problems faster.  Subfigure (d) presents the percentage of syntactically valid program completions generated by the LLMs used in the experiments, highlighting the challenges posed by generating valid programs in unfamiliar DSLs.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_7_2.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure presents the results of the HYSYNTH program synthesis approach on three different domains: ARC (grid-based puzzles), TENSOR (tensor manipulations), and STRING (string manipulations). Subfigures (a), (b), and (c) show the cumulative number of benchmarks solved by HYSYNTH as a function of time (in seconds), comparing it to several baselines: unguided search, using only LLMs, and existing synthesizers (ARGA, TFCODER, and PROBE, respectively). Subfigure (d) shows the percentage of syntactically valid programs generated by the LLM in each domain. This demonstrates HYSYNTH's superior performance over baselines in various domains, especially when handling complex tasks, by leveraging LLMs effectively to guide bottom-up program synthesis.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_7_3.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure compares the performance of HYSYNTH against various baselines and ablations across three different domains (ARC, TENSOR, STRING).  Subfigures (a), (b), and (c) show cumulative solved problems over time. The timeout for each run is set to 10 minutes. Subfigure (d) shows the percentage of syntactically valid program completions generated by the language model in each domain.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_7_4.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure shows the performance of HYSYNTH and other methods (baseline synthesizers, unguided search, and direct LLM sampling) on three program synthesis domains: ARC (grid-based puzzles), TENSOR (tensor manipulations), and STRING (string manipulations).  Subfigures (a), (b), and (c) are cumulative plots showing the number of benchmarks solved over time.  Subfigure (d) shows the percentage of syntactically valid program completions generated by the LLMs (GPT40 and DEEPSEEK) for each domain.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_8_1.jpg", "caption": "Figure 5: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure shows the performance of HYSYNTH, comparing it to baselines and ablations. Subfigures (a), (b), and (c) present cumulative plots showing the number of benchmarks solved over time for the ARC, STRING, and TENSOR domains, respectively.  The plots illustrate that HYSYNTH outperforms baseline synthesizers and unguided search, and that direct LLM sampling performs poorly. Subfigure (d) shows the percentage of syntactically valid completions generated by the LLMs for each domain.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_8_2.jpg", "caption": "Figure 5: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure displays the performance of HYSYNTH across three different domains (ARC, TENSOR, STRING) by showing the cumulative number of benchmarks solved over time.  Subplots (a), (b), and (c) compare HYSYNTH's performance to baselines (ARGA, PROBE, TFCODER) and ablations (direct LLM sampling, unguided search, binary surrogate).  Different sample sizes used to learn the PCFG are also compared. Subplot (d) shows the percentage of syntactically valid program completions generated by the LLMs in each domain.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_8_3.jpg", "caption": "Figure 5: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure shows the performance of HYSYNTH, comparing it to baselines and ablations across three domains: ARC, TENSOR, and STRING.  Subfigures (a), (b), and (c) present cumulative problem-solving counts over time, highlighting HYSYNTH's superior speed. Subfigure (d) displays the percentage of syntactically valid program completions generated by the LLMs used, revealing a varying degree of grammatical correctness in the LLM outputs which impacts the performance.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_8_4.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure compares the performance of HYSYNTH against baselines and ablations across three domains (ARC, TENSOR, STRING).  Subfigures (a), (b), and (c) show cumulative number of problems solved over time.  Subfigure (d) shows the percentage of syntactically valid program completions generated by the LLMs for each domain.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_17_1.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure shows the performance of HYSYNTH compared to baselines and ablations across three domains: ARC, TENSOR, and STRING.  Subfigures (a), (b), and (c) are cumulative plots showing the number of problems solved over time. Each subfigure shows the performance of HYSYNTH with different numbers of LLM samples used to learn the PCFG, as well as the performance of baselines (ARGA, PROBE, TFCODER) and ablations (no search, unguided search, binary surrogate). Subfigure (d) shows the percentage of syntactically valid program completions generated by the LLM for each domain.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_17_2.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure presents a comparison of HYSYNTH's performance against baselines and ablations across three domains (ARC, TENSOR, STRING).  Subfigures (a), (b), and (c) show cumulative problem-solving counts over time, highlighting HYSYNTH's superiority in efficiently finding solutions.  Subfigure (d) provides the percentage of syntactically valid program completions generated by the LLMs used in the experiments.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_17_3.jpg", "caption": "Figure 5: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure shows the performance of HYSYNTH (a hybrid program synthesis approach using LLMs) against time across three different domains: ARC (grid-based puzzles), TENSOR (tensor manipulations), and STRING (string manipulations).  Subfigures (a), (b), and (c) present cumulative solved problems over time, comparing HYSYNTH to baseline synthesizers and ablation studies (unguided search, LLM alone, binary surrogate). Subfigure (d) displays the percentage of syntactically valid program completions generated by LLMs in each domain. The results highlight HYSYNTH's superior performance in solving PBE tasks compared to existing methods.", "section": "4.2 Results"}, {"figure_path": "5jt0ZSA6Co/figures/figures_17_4.jpg", "caption": "Figure 4: (a,b,c) Number of benchmarks solved by HYSYNTH as a function of time for the ARC, TENSOR, and STRING domains; timeout is 10 min. (d) Percentage of syntactically valid completions per domain.", "description": "This figure presents the results of the HYSYNTH experiments on three domains: ARC, TENSOR, and STRING.  Subfigures (a), (b), and (c) show cumulative plots of the number of benchmarks solved against time for each domain.  The plots compare HYSYNTH's performance against several baselines, including unguided search and the LLM alone. Subfigure (d) displays the percentage of syntactically valid program completions generated by the LLMs for each domain.", "section": "4.2 Results"}]