[{"figure_path": "xgP5ynlZWf/figures/figures_1_1.jpg", "caption": "Figure 1: Limitations of all-in-one models. (a) Models trained on different noise levels excel in specific areas, so choosing models on demand leads to better results. (b) Models trained on a wider range of blur degradations offer improved generalization but compromised performance, showing a trade-off. (c) Trained on different numbers of tasks Tested on various tasks All-in-one models underperform single-task models", "description": "This figure demonstrates the limitations of all-in-one models for image restoration.  Panel (a) shows that models trained on specific noise levels perform best within their training range, highlighting the need for task-specific models. Panel (b) illustrates the trade-off between generalization and performance when training on a wider range of blur levels. Panel (c) compares the performance of all-in-one models against single-task models on various tasks, demonstrating the superior performance of specialized models.", "section": "1 Introduction"}, {"figure_path": "xgP5ynlZWf/figures/figures_2_1.jpg", "caption": "Figure 2: Limitation illustration of all-in-one models, fixed task execution order, and fixed model. Images with a pink background indicate negative examples", "description": "This figure demonstrates the limitations of three different approaches to image restoration: all-in-one models, fixed task execution order, and fixed model for a task.  The top row (a1-a3) shows that all-in-one models struggle to handle unseen degradation types and often underperform specialized single-task models. The middle row (b1-b2) illustrates the negative impact of a fixed or random task execution order, where the processing order significantly affects the final restoration quality.  The bottom row (c) shows that using a single fixed model for a task is inflexible and limits optimal performance.  Images with pink backgrounds highlight cases where the selected method failed to achieve satisfactory results.", "section": "1 Introduction"}, {"figure_path": "xgP5ynlZWf/figures/figures_2_2.jpg", "caption": "Figure 2: Limitation illustration of all-in-one models, fixed task execution order, and fixed model. Images with a pink background indicate negative examples", "description": "This figure demonstrates the limitations of three different approaches to image restoration: all-in-one models, fixed task execution order, and using a single fixed model for each task.  The top row (a1-a3) shows that all-in-one models fail to handle unseen degradation types and underperform compared to specialized single-task models. The middle row (b1-b2) illustrates how a fixed or random task execution order can lead to suboptimal results because the order in which degradations are addressed affects the final outcome. The bottom row (c) shows that using a single fixed model for a task is inflexible and may not achieve optimal performance for various degradation patterns. Images with pink backgrounds highlight negative examples that demonstrate the limitations of each method.", "section": "1 Introduction"}, {"figure_path": "xgP5ynlZWf/figures/figures_2_3.jpg", "caption": "Figure 2: Limitation illustration of all-in-one models, fixed task execution order, and fixed model. Images with a pink background indicate negative examples", "description": "This figure demonstrates the limitations of three different approaches to image restoration: all-in-one models, fixed task execution order, and fixed model for a single task.  The top row (a1-a3) shows the limitations of all-in-one models: they fail on unseen degradation types, have limited performance compared to specialized models, and underperform when a single task model is combined with an all-in-one model. The middle row (b1-b2) shows the problems of using a fixed or random task execution order: the order greatly affects restoration quality, and applying one restoration task can impact subsequent tasks. The bottom row (c) highlights the inflexibility of using a single fixed model for each task: different patterns of the same degradation type require distinct handling methods. Images with pink backgrounds are examples of failure cases.", "section": "1 Introduction"}, {"figure_path": "xgP5ynlZWf/figures/figures_2_4.jpg", "caption": "Figure 2: Limitation illustration of all-in-one models, fixed task execution order, and fixed model. Images with a pink background indicate negative examples", "description": "This figure demonstrates the limitations of three different approaches to image restoration: all-in-one models, fixed task execution order, and fixed model for each task.  The top row (a1-a3) shows that all-in-one models fail on unseen degradation types and underperform specialized single-task models. The middle row (b1-b2) illustrates how the order of task execution significantly impacts the results, demonstrating that a fixed order may be ineffective and that adapting the order based on the specific degradations present in the image is crucial for better performance.  Finally, the bottom row (c) shows that a fixed model for a given type of degradation does not always perform well on varying image patterns, underscoring the need for adaptability and selecting the best model for each task based on the specific patterns present in the image. Images with pink backgrounds highlight cases where the chosen approach failed to deliver satisfactory results.", "section": "1 Introduction"}, {"figure_path": "xgP5ynlZWf/figures/figures_5_1.jpg", "caption": "Figure 3: Illustration of the data construction workflow and RestoreAgent pipeline.", "description": "The figure illustrates the data construction workflow and RestoreAgent pipeline.  The data construction involves creating training samples with various degradation combinations and their corresponding optimal restoration sequences. These sequences are determined using a scoring function that evaluates different pipeline options and selects the one with the highest score. The RestoreAgent pipeline depicts how the system takes a user input (a degraded image), utilizes a multimodal large language model to plan the restoration tasks and select appropriate models, executes the plan step-by-step, uses the execution history to adjust strategies if necessary, and supports rollback functionality for error correction. ", "section": "3 RestoreAgent"}, {"figure_path": "xgP5ynlZWf/figures/figures_7_1.jpg", "caption": "Figure 4: Illustrations of RestoreAgent's choices demonstrate that our approach predicts the correct task sequence. Images with a pink background show inappropriate decisions.", "description": "This figure shows examples of image restoration tasks processed by RestoreAgent. Each row represents a different input image with multiple degradation types. The left side shows the sequence of restoration tasks and the models chosen by RestoreAgent, while the right side shows the same input image processed with the tasks performed in a different order or with different models. Images with a pink background highlight cases where RestoreAgent made incorrect decisions, illustrating that the correct task sequence is crucial for optimal restoration results. This showcases the model's ability to predict the correct task order and model selection for various combinations of degradation types.", "section": "4.2 Comparisons with Other Strategies"}, {"figure_path": "xgP5ynlZWf/figures/figures_8_1.jpg", "caption": "Figure 5: Visual comparisons with All-in-One Methods. To ensure a fair comparison, All-in-One methods are tested only on the degradation types and datasets they support. The all-in-one approach still lacks the ability to effectively handle images containing multiple types of degradation.", "description": "This figure compares the performance of RestoreAgent against several all-in-one image restoration methods.  It shows visual results on three example images, each degraded with different combinations of noise, haze, JPEG artifacts, and rain.  The comparison highlights RestoreAgent's superior ability to handle complex, multi-type degradations where all-in-one methods struggle.", "section": "4.3 Comparisons with All-in-One Methods"}, {"figure_path": "xgP5ynlZWf/figures/figures_14_1.jpg", "caption": "Figure 6: Five scenarios for dataset construction and their corresponding examples.", "description": "This figure illustrates five scenarios used to construct the dataset for training the RestoreAgent model.  Each scenario is designed to improve the model's ability to handle various situations, including: initiating full enhancement sequences, dynamically adjusting strategies based on intermediate results, identifying and correcting suboptimal steps through rollback mechanisms, avoiding repetition of ineffective procedures after rollback, and recognizing when image quality has reached its optimal state. The scenarios are shown with example prompts and the corresponding model's responses, demonstrating how the data is structured and the type of information the model is trained on.", "section": "3.2 Data Construction"}, {"figure_path": "xgP5ynlZWf/figures/figures_16_1.jpg", "caption": "Figure 7: Challenges in human expert decision-making. This figure illustrates the difficulty faced by human experts in discerning minute differences between degradation patterns, leading to suboptimal restoration strategies.", "description": "This figure demonstrates the challenges faced by human experts in choosing the optimal restoration strategy.  The top panel shows that even with the same degradation types (rain, haze, noise, JPEG), different patterns require distinct execution orders.  The bottom panel illustrates the difficulty in selecting the single most effective strategy from many possibilities.  Suboptimal choices result in poor image quality, highlighting the need for a more automated and systematic approach.", "section": "4.2 Comparisons with Other Strategies"}, {"figure_path": "xgP5ynlZWf/figures/figures_16_2.jpg", "caption": "Figure 8: Examples of model decisions made by RestoreAgent. This figure demonstrates how choosing the appropriate model for a specific restoration task significantly affects the outcome quality. We present PSNR and LPIPS metrics for each image. Images with a pink background indicate examples of inappropriate decisions (zoom-in for better view).", "description": "This figure shows two examples of image restoration using RestoreAgent. Each example demonstrates the importance of choosing the right model for a specific task in achieving optimal restoration quality. The top example shows that selecting the appropriate model for denoising, a task with multiple suitable models, significantly impacts the final PSNR and LPIPS scores compared to using an ill-suited model. The bottom example illustrates that choosing the correct model for dehazing is crucial for high-quality restoration and avoiding over-smoothed results. In both examples, the results highlight the importance of RestoreAgent's ability to select the optimal model for each task, leading to significantly improved image quality.", "section": "A.5 Analysis"}]