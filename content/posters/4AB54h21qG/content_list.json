[{"type": "text", "text": "FlexSBDD: Structure-Based Drug Design with Flexible Protein Modeling ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Zaixi Zhang1,2,3, Mengdi Wang3, Qi Liu1,2,\u2217 ", "page_idx": 0}, {"type": "text", "text": "1: School of Computer Science and Technology, University of Science and Technology of China 2:State Key Laboratory of Cognitive Intelligence, Hefei, Anhui, China 3:Princeton University zaixi@mail.ustc.edu.cn, mengdiw $@$ princeton.edu, qiliuql@ustc.edu.cn ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Structure-based drug design (SBDD), which aims to generate 3D ligand molecules binding to target proteins, is a fundamental task in drug discovery. Existing SBDD methods typically treat protein as rigid and neglect protein structural change when binding with ligand molecules, leading to a big gap with real-world scenarios and inferior generation qualities (e.g., many steric clashes). To bridge the gap, we propose FlexSBDD, a deep generative model capable of accurately modeling the flexible protein-ligand complex structure for ligand molecule generation. FlexSBDD adopts an efficient flow matching framework and leverages E(3)-equivariant network with scalar-vector dual representation to model dynamic structural changes. Moreover, novel data augmentation schemes based on structure relaxation/sidechain repacking are adopted to boost performance. Extensive experiments demonstrate that FlexSBDD achieves state-of-the-art performance in generating high-affinity molecules and effectively modeling the protein\u2019s conformation change to increase favorable protein-ligand interactions (e.g., Hydrogen bonds) and decrease steric clashes. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Deep generative models are profoundly impacting drug discovery, particularly within the challenging subfield of structure-based drug design (SBDD) [1, 54, 36]. SBDD focuses on generating drug-like ligand molecules conditioned on target-binding proteins, necessitating precise modeling of complex geometric structures and detailed protein-ligand interactions. Some early attempts adopt autoregressive models to generate 3D ligand molecules atom-by-atom [53, 57] or fragment-by-fragment [85]. To overcome the limitations of autoregressive methods (e.g., error accumulation), recent works [28, 29] leverage non-autoregressive diffusion-based models [31] to predict the distribution of ligand atom types and positions via denoising and have achieved the state-of-the-art performance. ", "page_idx": 0}, {"type": "text", "text": "Despite the remarkable success, most existing SBDD models treat target proteins as rigid and neglect the conformation change. However, according to the \u201cinduced fit\u201d theory in biochemistry [43], proteins are flexible structures that undergo structural changes upon ligand binding, leading to enhanced interactions and binding affinity. In structural biology, the protein structure that has a bound small molecule is referred to as ligand-bound or holo conformation, and the protein structure without a bound small molecule is called ligand-free or apo conformation [16]. For example, Figure. 1 (a)&(b) shows the aligned apo and holo-structures of two proteins, and the extent of structural change is influenced by the specific properties and structures of the proteins and ligands. The neglect of protein flexibility in SBDD leads to several significant drawbacks: (1) The generated protein-ligand complexes are prone to have sub-optimal protein structures and steric clashes as the protein cannot adaptively adjust structures according to different generated molecules [30]. (2) The chemical search space is overly restricted by existing holo data, limiting the exploration of diverse high-quality drugs. As a result, SBDD models tend to produce molecules that are similar to those fitting the predefined pocket space [53, 62]. (3) A large gap between real-world physical binding process and computational simulations, which may lead to high false positive rates in real-world drug discovery applications i.e., most computationally designed drugs do not have real therapeutic effects [2]. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "However, several challenges exist for flexible protein modeling in existing SBDD models. Firstly, proteins are macromolecules with thousands of atoms, which brings formidable high degrees of freedom for flexible structural modeling [35]. Secondly, there lack apo-holo structure pair datasets for learning structural changes [16]. Finally, the widely used diffusion-based models are time-consuming for exploring the huge space of flexible protein-ligand complexes [28]. ", "page_idx": 1}, {"type": "text", "text": "To address the aforementioned challenges, we propose a new method FlexSBDD capable of modeling the flexibility of target protein while generating de novo 3D ligand molecules. To reduce the computational complexity, we focus on the key degrees of freedom in protein structure (i.e., $C_{\\alpha}$ coordinate, the orientation of the backbone frame, and the sidechain dihedral angels to determine the full atom structure) inspired by previous works [67, 77, 9]. As for the dataset, we employ the Apobind dataset [3] with additional Apo data generated by OpenMM relaxation [21] and Rosetta repacking [18] as data augmentation. For efficient and stable generation, we adopt a flow-matching framework [49, 5] that defines multimodal conditional flows for different components in protein-ligand complex and use E(3)-equivariant network with scalar-vector dual representation for learning the chemical and geometric information. The input to FlexSBDD is the initialized protein structure (e.g., apo structure). FlexSBDD learns to iteratively update protein-ligand structures and ligand atom types from $t i m e\\,=\\,0$ to 1 and finally outputs both the generated 3D ligand molecule and the updated protein structure (holo). Extensive evaluations on benchmarks and case studies show the advantage of FlexSBDD in generating structurally valid protein-ligand complexes with high affinity, more favorable non-covalent interactions, and fewer steric clashes. The code of the paper is provided at https://github.com/zaixizhang/FlexSBDD. We highlight our main contributions as follows: ", "page_idx": 1}, {"type": "text", "text": "\u2022 We propose a flow-matching-based generative model FlexSBDD, capable of modeling protein flexibility while generating de novo 3D ligand molecules. ", "page_idx": 1}, {"type": "text", "text": "\u2022 FlexSBDD not only achieves state-of-the-art performance on benchmark datasets (e.g., -9.12 Avg. Vina Dock score), but also learns to adjust the protein structure to increase favorable interactions (e.g., 1.96 Avg. Hydrogen bond acceptors) and decrease steric clashes. ", "page_idx": 1}, {"type": "text", "text": "\u2022 With a concrete case study on KRASG12C, a promising target of solid tumor, we demonstrate FlexSBDD\u2019s potential to discover cryptic pockets for drug discovery. ", "page_idx": 1}, {"type": "text", "text": "2 Related Works ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "2.1 Structure-Based Drug Design ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Structure-based drug design (SBDD) [87] aims to directly generate 3D ligand molecules inside target protein pockets. LiGAN [62] first uses 3D CNN to encode the protein-ligand structures and generate ligands by atom fitting and bond inference from the predicted atom densities. Several follow-up works have adopted autoregressive models for atom-wise [53, 50, 57, 79, 78] or fragment-wise [27, 60, 85, 78] generation of 3D molecules. For example, Pocket2Mol [57] adopts the geometric vector perceptrons [40] as the context encoder and autoregressively predicts the atom types, atom coordinates, and bond types until the generated molecule is completed. FLAG [85] and DrugGPS [82] predict the next molecular fragment and add it to the partially generated molecule in each round. Recently, powerful diffusion models have started to make a significant impact in SBDD, demonstrating promising results with non-autoregressive sampling [65, 28, 29, 46]. They usually represent the protein-ligand complex as 3D atom point sets, and define diffusion and denoising processes for both continuous atom coordinates and discrete atom types. For instance, TargetDiff [28] proposes a target-aware molecular diffusion process with a SE(3)-equivariant GNN denoiser. While there has been significant progress, existing approaches often neglect the critical aspect of protein flexibility. To address this gap, we explicitly model the conformational change of protein in FlexSBDD. ", "page_idx": 1}, {"type": "image", "img_path": "4AB54h21qG/tmp/96fc5dc79b4e86b1a9197293bcf01dbc98fd22966972547b9e84125c43bf5db0.jpg", "img_caption": ["Figure 1: Aligned apo (ligand-free) and holo (ligand-bound) examples of (a) Human Glutathione S-Transferase protein (PDB ID: 10GS) and (b) Human Menkes protein (PDB ID: 2KMX) [3]. Apo structures are colored in \u201cmagenta\u201d and holo-structures in \u201ccyan\u201d with the bounded ligand in \u201corange\u201d. (c) Illustration of the protein structure and ligand molecule parameterization. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "2.2 Flexible Protein Modeling ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Proteins are intrinsically dynamic entities and flexibility is a critical factor affecting protein\u2019s function and behavior in biological systems [72, 37]. The dynamic properties are traditionally modeled with physics-based methods such as Molecular Dynamics simulation (MD) [33]. To overcome the computationally demanding drawback of MD, some deep learning-based methods have been recently proposed, e.g., DynamicBind [51], FlexPose [20], SBAlign [68], NeuralPlexer [61], and DiffDock-Pocket [59] consider protein flexibility in protein-ligand docking. However, these methods can hardly extended to the challenging de novo ligand generation, leaving it an unsolved problem. ", "page_idx": 2}, {"type": "text", "text": "3 Preliminaries ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Notations and Problem Formulation: We model protein-ligand complex as $\\mathcal{C}=\\{\\mathcal{P},\\mathcal{G}\\}$ [84, 86, 76, 83]. The objective of FlexSBDD is to learn a conditional generative model $p(\\{\\mathcal{P}^{\\prime},\\mathcal{G}\\}|\\mathcal{P})$ that generates ligand molecule conditioned on the target protein and meanwhile updates the structure of the target protein $(\\mathcal{P}^{\\prime})$ . Proteins are composed of a sequence of residues (amino acids), each containing 4 backbone atoms (i.e., $C_{\\alpha},N,C,O)$ and a sidechain that identifies the residue type. In this paper, the residue types are assumed known and the full atom structure of an amino acid can be represented by its $C_{\\alpha}$ coordinates $\\pmb{x}_{i}\\in\\mathbb{R}^{3}$ , the frame orientation $O^{(i)}\\in S O(3)$ , and maximally 4 sidechain dihedral angles $\\mathcal{X}^{(i)}=\\{\\chi^{i1},\\chi^{i2},\\chi^{i3},\\chi^{i4}\\}\\in[0,2\\pi)^{4}$ , where $i\\in\\{1,\\cdot\\cdot\\cdot N_{p}\\}$ and $N_{p}$ is the number of residues in a protein. The backbone structure of the residue can be determined according to their ideal local coordinates relative to the $C_{\\alpha}$ position $\\pmb{x}^{(i)}$ and the orientation $O^{(i)}$ [23]. The sidechain conformations can be derived with the dihedral angles $\\chi^{(i)}$ as the bond length/angles are largely fixed [81]. With the above notations, a protein structure with $N_{p}$ residues can be compactly represented as $\\mathcal{P}=\\{\\pmb{x}^{(i)},\\pmb{O}^{(i)},\\pmb{\\chi}^{(i)}\\}_{i=1}^{N_{p}}$ (see the illustration in Figure. 1(c)). Following previous works [74], we treat each amino acid as a node and integrate backbone orientation and sidechain dihedral angles as node features. Such method enjoys the advantage of fewer nodes and less computational cost. The generated ligand molecule can be represented as a set of atoms: $\\mathcal{G}=\\{\\pmb{a}^{(i)},\\pmb{\\bar{x}}^{(i)}\\}_{i=1}^{N_{l}}$ , where indicate the atom type $\\cdot n_{a}$ is the total number of atom types we consider) and $\\pmb{x}^{(i)}\\in\\mathbb{R}^{3}$ denotes the atom coordinate. In the constructed protein-ligand complex 3D graph, we use $\\pmb{x}^{(i)}$ to denote both $C_{\\alpha}$ coordinates and the ligand atom coordinates for conciseness. ", "page_idx": 2}, {"type": "text", "text": "Riemanian Flow Matching: Flow Matching (FM) [49, 5, 4], a simulation-free method for learning continuous normalizing flows (CNFs) [15], has shown better performance and efficiency than diffusion-based models on a series of biomolecular tasks [9, 77, 69]. To model the complicated protein-ligand complex structures, we need to apply the general flow matching on the Riemannian manifolds [14]. Let $\\mathcal{M}$ be the manifold space with metric $g.\\ q$ is the probability distribution of data $x\\in{\\mathcal{M}}$ , and $p$ be the prior distribution. The time-dependant probability path on $\\mathcal{M}$ is defined as $p_{t\\in[0,1]}:\\mathcal{M}\\to\\mathbb{R}_{>0}$ satisfying $p_{0}=p$ and $p_{1}=q$ . $\\bar{u}_{t}(x)\\in\\bar{T}_{x}\\mathcal{M}$ is the corresponding gradient vector of the path on $x$ at time $t$ . Flow Matching aims to learn a neural network $v_{\\theta}(x,t)$ to approximate the target vector field $u_{t}$ $:\\mathcal{L}_{F M}(\\theta)=\\mathbb{E}_{t,p_{t}(x)}\\|v_{\\theta}(x,t)-u_{t}(x)\\|_{g}^{2}$ . However, $u_{t}$ is intractable in practice and an alternative is to use a conditional density path $p_{t}(x|x_{1})$ with a conditional gradient ", "page_idx": 2}, {"type": "image", "img_path": "4AB54h21qG/tmp/8e0c7c6b0252f5dbadbe81f16f4bce9e53561b7a73128cf4a5fd9a4756294d10.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 2: Overview of FlexSBDD. The flow matching-based generative process starts from an apo protein structure and the initialized ligand molecule. At each time step, FlexSBDD updates $\\ensuremath{\\mathcal{C}}_{t}$ to $\\mathcal{C}_{t+\\Delta t}$ and finally obtains the holo protein-ligand structure at $t=1$ . In the illustration, the gray dots indicate protein residues and the other dots indicate ligand atoms with different element types. ", "page_idx": 3}, {"type": "text", "text": "field $\\boldsymbol u_{t}(\\boldsymbol x|\\boldsymbol x_{1})$ and use Conditional Flow Matching (CFM) objective as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathcal{L}_{C F M}(\\theta)=\\mathbb{E}_{t,p_{1}(x_{1}),p_{t}(x|x_{1})}||v_{\\theta}(x,t)-u_{t}(x|x_{1})||_{g}^{2},\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "because ${\\mathcal{L}}_{F M}$ and ${\\mathcal{L}}_{C F M}$ have the same gradients according to previous works [14, 49]. $t$ is sampled from the uniform distribution between 0 and 1. Once the gradient field $v_{\\theta}$ is learned, we can integrate ordinary differential equations (ODE): $\\begin{array}{r}{\\frac{d}{d t}\\phi_{t}(x)\\,=\\,v_{\\theta}(\\phi_{t}(x),t)}\\end{array}$ with $\\phi_{0}(x)\\,=\\,x,\\phi_{t}(x)\\,=\\,x_{t}$ and ODE solvers [10] to push data from prior distribution $p_{0}$ to the data distribution $p_{1}$ . Specifically, a data point from the prior distribution $p_{0}$ is $\\mathcal{C}_{0}\\,=\\,\\{\\mathcal{P}_{0},\\mathcal{G}_{0}\\}$ , where ${\\mathcal P}_{0}$ is the initialized protein structure (e.g., the apo conformation) and $\\mathcal{G}_{\\mathrm{0}}$ is the initialized ligand molecule. The number of ligand atoms is sampled from the reference dataset distribution; the atom types are initialized with uniform distributions; the atom coordinates are initialized with Gaussian distributions inside the protein pocket following [28]. The target data distribution $p_{1}$ is the holo protein-ligand complex $\\mathcal{C}_{1}$ from datasets. ", "page_idx": 3}, {"type": "text", "text": "4 FlexSBDD ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Figure. 2 shows the overview of FlexSBDD. Given the initialized target protein structure, the goal of FlexSBDD is to generate the binding ligand molecule as well as the adjusted protein structure. In other words, the output is the generated protein-ligand complex. Given the complexity of the protein-ligand system, we first introduce flow matching on the protein backbone (Sec. 4.1), side chain (Sec. 4.2), and ligand atom type (Sec. 4.3) respectively. Then we show E(3)-equivariant network in Sec. 4.4. Finally, we discuss the training and generation procedure of FlexSBDD (Sec. 4.5). ", "page_idx": 3}, {"type": "text", "text": "4.1 FlexSBDD on Protein Backbone and Ligand Coordinates ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Following previous works [9, 41, 77], The backbone atom positions of each residue in a protein can be modeled as a rigid frame $T=({\\mathbf{}}x,O)\\in S E(3)$ , consisting of $C_{\\alpha}$ coordinate $\\mathbf{\\Delta}x\\in\\mathbb{R}^{3}$ (we use $\\textbf{\\em x}$ to denote coordinates in the rest of this paper) and the frame orientation matrix $O\\in S O(3)$ . For simplicity, the following deduction focuses on a single residue/frame and can be generalized to all the residues in the protein. The conditional flow of frame $T_{t}$ is defined to be along the geodesic path connecting $T_{0}$ (apo frame) and $T_{1}$ (holo frame): $T_{t}=\\exp_{T_{0}}(t\\log_{T_{0}}(T_{1}))$ , where $\\mathrm{exp}_{T}$ represents the exponential map and $\\log_{T}$ denotes the logarithmic map at $T$ [77, 9]. Specifically, the conditional flow for the Euclidean coordinate vector $\\pmb{x}_{t}$ and the orientation matrix $O_{t}$ are defined as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{Coordinates}(\\mathbb{R}^{3})\\colon x_{t}=(1-t)x_{0}+t x_{1}}\\\\ &{\\mathrm{Orientations}(\\mathrm{SO}(3))\\colon O_{t}=\\exp_{O_{0}}(t\\log_{O_{0}}(O_{1})).}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Both $\\mathbb{R}^{3}$ and $\\mathrm{SO}(3)$ are simple manifolds and their closed-form geodesics can be derived. The exponential map $\\exp_{\\mathrm{{o}}_{\\mathrm{{o}}}}$ can be computed using Rodrigues\u2019 formula and the logarithmic map $\\log_{O_{0}}$ is similarly easy to compute with its Lie algebra $\\mathfrak{s o}(3)$ [77]. In protein-ligand complex, the ligand atom coordinates have the same data modality and probability path as $C_{\\alpha}$ . The loss function of FlexSBDD for protein backbone and ligand coordinates is the summation of the following two terms: ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathcal{L}_{c o o r d}(\\theta)=\\mathbb{E}_{t,p_{1}(\\mathbf{x}_{1}),p_{0}(\\mathbf{x}_{0}),p_{t}(\\mathbf{x}_{t}|\\mathbf{x}_{0},\\mathbf{x}_{1})}\\frac{1}{N_{p}+N_{l}}\\sum_{i=1}^{N_{p}+N_{l}}\\left\\|v_{\\theta}^{(i)}(\\mathbf{x}_{t}^{(i)},t)-x_{1}^{(i)}+x_{0}^{(i)}\\right\\|_{2}^{2},}\\\\ &{\\mathcal{L}_{o r i}(\\theta)=\\mathbb{E}_{t,p_{1}(\\mathbf{\\theta}_{1}),p_{0}(\\mathbf{\\theta}_{0}),p_{t}(\\boldsymbol{O}_{t}|\\boldsymbol{O}_{0},\\boldsymbol{O}_{1})}\\frac{1}{N_{p}}\\sum_{i=1}^{N_{p}}\\left\\|v_{\\theta}^{(i)}(\\pmb{O}_{t}^{(i)},t)-\\frac{\\log_{Q_{t}^{(i)}}(\\pmb{O}_{1}^{(i)})}{1-t}\\right\\|_{\\mathrm{so}(3)}^{2},}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where the superscript $(i)$ in $\\pmb{x}^{(i)}$ and $O^{(i)}$ is the index of the residues/ligand atoms. For conciseness, we use Equ. 4 to represent the coordinate loss with respect to $N_{p}$ $\\alpha$ -Carbon and $N_{l}$ ligand atoms. ", "page_idx": 4}, {"type": "text", "text": "4.2 FlexSBDD on Sidechain Torsion Angles ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In FlexSBDD, we define sidechain torsion angles on the torus space to model the protein sidechain structures. There are maximally four sidechain dihedral angels for each residue i.e., $\\mathcal{X}^{(i)}\\,=\\,\\{\\chi^{i1},\\chi^{i2},\\chi^{i3},\\chi^{i4}\\}\\,\\in\\,[0,2\\pi)^{4}$ and there are totally $4N_{p}$ torsion angles [81]. Since each torsion angle lies in $[0,2\\pi)$ , the $4N_{p}$ torsion angles of sidechains define a hypertorus $\\mathbb{T}^{4N_{p}}$ . The manifold of the hypertorus is parameterized as the quotient space $\\mathbb{R}^{4N_{p}}/2\\pi\\mathbb{Z}^{4N_{p}}$ , leading to the equivalence relations $\\chi=(\\chi^{(1)},\\ldots,\\chi^{(4N_{p})})\\sim(\\chi^{(1)}+2\\pi,\\ldots,\\chi^{(4N_{p})})\\sim(\\chi^{(1)},\\ldots,\\chi^{(4N_{p})}+2\\pi)$ [39, 81]. We use the linear interpolation paths and the conditional flow for $x$ is defined as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\chi_{t}=(1-t)\\chi_{0}+t\\cdot\\mathrm{reg}(\\chi_{1}-\\chi_{0}),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\mathrm{reg}(\\cdot)$ means regularizing the torsion angles by $\\deg(\\chi)=(\\chi+\\pi)$ mod $(2\\pi)-\\pi$ . This leads to the closed-from expression of the loss to train the conditional Torus Flow Matching: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{s c}(\\theta)=\\mathbb{E}_{t,p_{1}(\\boldsymbol{\\chi}_{1}),p_{0}(\\boldsymbol{\\chi}_{0}),p_{t}(\\boldsymbol{\\chi}_{t}|\\boldsymbol{\\chi}_{0},\\boldsymbol{\\chi}_{1})}\\frac{1}{N_{p}}\\sum_{i=1}^{N_{p}}\\left\\lVert v_{\\theta}^{(i)}(\\boldsymbol{\\chi}_{t}^{(i)},t)-\\mathrm{reg}(\\boldsymbol{\\chi}_{1}^{(i)}-\\boldsymbol{\\chi}_{0}^{(i)})\\right\\rVert_{2}^{2}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "4.3 FlexSBDD on Ligand Atom Types ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The ligand atom types are denoted as $\\pmb{a}=\\{\\pmb{a}^{(i)}\\}_{i=1}^{N_{p}}$ where $\\pmb{a}^{(i)}$ is the $i^{\\th}$ -th atom probability vector with $n_{a}$ dimensions: $\\pmb{a}^{(i)}\\in\\mathbb{R}^{n_{a}}$ . To build a path, we define $\\scriptstyle a_{0}$ as a uniform distribution over all atom types and $\\pmb{a}_{1}$ as the one-hot vector indicating the ground truth atom type. The probability path is define as $\\begin{array}{r}{\\pmb{a}_{t}=t\\pmb{a}_{1}+(1-t)\\pmb{a}_{0}}\\end{array}$ , and $\\begin{array}{r}{u_{t}(\\pmb{a}|\\pmb{a}_{0},\\pmb{a}_{1})=\\pmb{a}_{1}-\\pmb{a}_{0}.}\\end{array}$ $\\mathbf{\\deltaa}_{t}$ is a probability vector because its summation over all types equals 1. Following [47, 70, 12], we use Cross-Entropy loss $\\operatorname{CE}(\\cdot,\\cdot)$ to directly measure the difference between the ground truth type and the predicted one: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}_{a t o m}(\\theta)=\\mathbb{E}_{t\\sim\\mathcal{U}(0,1),p_{1}(a_{1}),p_{0}(a_{0}),p_{t}(a|a_{0},a_{1})}\\frac{1}{N_{l}}\\sum_{n=1}^{N_{l}}\\mathrm{CE}\\left(a_{t}^{(i)}+(1-t)v_{\\theta}^{(i)}(a_{t}^{(i)},t),a_{1}^{(i)}\\right),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We also note the recent progress of sequential flow matching methods [71, 12], which can be seamlessly integrated into FlexSBDD and are left for future works. ", "page_idx": 4}, {"type": "text", "text": "4.4 Model Architecture ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "FlexSBDD is parameterized with an E(3)-Equivariant Neural Network with scalar-vector dual feature representation to effectively capture the 3D geometric attributes [40, 57]. The scalar features contain basic biochemical knowledge (e.g., residue/atom types), and the vector features contain geometric knowledge of the structure (e.g., direction to the geometric center). The basic building blocks include geometric vector linear (GVL) and geometric vector perceptron (GVP). We also incorporate the geometric vector normalization (GVNorm) and the geometric vector gate (GVGate) for the model\u2019s stability and better performance. There are mainly two modules: an encoder that is responsible for encoding the protein-ligand complex 3D graph (see details in Sec. D.2) and a decoder that updates both the coordinates, frame orientation, atom types, and side-chain torsion angles (see details in Sec. D.3). Similar to previous works [57], the update process satisfies the E(3)-equivariance. More model details are in the Appendix. D.5. ", "page_idx": 4}, {"type": "text", "text": "4.5 Training and Generation ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Training with Data Augementation: For protein-ligand complexes from the training set, we associate them with apo conformations from Apobind [3] to create apo-holo pairs. Additionally, we create synthetic apo conformations as data augmentation. This is done by first removing the ligands from the holo proteins, followed by applying OpenMM [21] relaxation and Rosetta repacking [18] to these proteins. For each holo-structure, we generate a total of 9 additional structures: 3 only with sidechain repacking, 3 with both structure relaxation and repacking, and 3 with additional random perturbations with up to 30 degrees to the sidechain angles. In each training iteration, we randomly sample from the corresponding pool of apo structure $\\mathcal{C}_{\\mathrm{0}}$ of the holo-structure $\\mathcal{C}_{1}$ and interpolate to obtain $\\ensuremath{\\mathcal{C}}_{t}$ . The overall loss function is the weighted summation of the above four loss functions: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}=w_{\\mathrm{atom}}\\mathcal{L}_{\\mathrm{atom}}+w_{\\mathrm{coord}}\\mathcal{L}_{\\mathrm{coord}}+w_{\\mathrm{ori}}\\mathcal{L}_{\\mathrm{ori}}+w_{\\mathrm{sc}}\\mathcal{L}_{\\mathrm{sc}},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $w_{\\mathrm{atom}},w_{\\mathrm{coord}},w_{\\mathrm{ori}}$ , and $w_{\\mathrm{sc}}$ are the loss weights and are set to 2.0, 1.0, 1.0, and 1.0 in the default setting. We adopt Adam [42] optimizer for the optimization and finish training on a Tesla A100 GPU. ", "page_idx": 5}, {"type": "text", "text": "Generation: Starting with the apo structure and an initialized ligand molecule, denoted as $\\mathcal{C}_{\\mathrm{0}}$ , the generation process of FlexSBDD is the integration of the ODE ddCtt $\\begin{array}{r}{\\frac{d\\tilde{C}_{t}}{d t}=v_{\\theta}(C_{t},t)}\\end{array}$ from $t=0$ to $t=1$ with an Euler solver [10]. Specifically, for each component in $\\ensuremath{\\mathcal{C}}_{t}$ , we have: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{{\\pmb x}_{t+\\Delta t}^{(i)}={\\pmb x}_{t}^{(i)}+v_{\\theta}({\\pmb x}_{t}^{(i)},t)\\Delta t;\\quad{\\pmb O}_{t+\\Delta t}^{(i)}={\\pmb O}_{t}^{(i)}\\exp\\left(v_{\\theta}({\\pmb O}_{t}^{(i)},t)\\Delta t\\right);}\\\\ &{{\\pmb\\chi}_{t+\\Delta t}^{(i)}=\\mathrm{reg}\\left(\\pmb\\chi_{t}^{(i)}+v_{\\theta}({\\pmb x}_{t}^{(i)},t)\\Delta t\\right);\\quad{\\pmb a}_{t+\\Delta t}^{(i)}=\\mathrm{norm}\\left({\\pmb a}_{t}^{(i)}+v_{\\theta}({\\pmb a}_{t}^{(i)},t)\\Delta t\\right);}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\Delta t$ is the time step. $\\operatorname{norm}(\\cdot)$ means normalizing the vector to a probability vector such that its summation is 1, and $\\mathrm{reg}(\\cdot)$ means regularizing the angles by $\\mathrm{reg}(\\tau)=(\\tau+\\pi)$ mod $(2\\pi)-\\pi$ . ", "page_idx": 5}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "5.1 Experimental Setup ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Datasets: Following previous works [65, 57], we use two popular benchmark datasets for experimental evaluations: CrossDocked and Binding MOAD. Binding MOAD dataset [34] contains around 41k experimentally determined protein-ligand complexes. We further filter and split the Binding MOAD dataset based on the proteins\u2019 enzyme commission number [7], resulting in $40\\mathrm{k}$ protein-ligand pairs for training, 100 pairs for validation, and 100 pairs for testing following previous work [65]. CrossDocked dataset [25] contains 22.5 million protein-molecule pairs generated through cross-docking. We use the same data preprocessing and splitting as [52], only high-quality docking poses (RMSD between the docked pose and the ground truth $<1\\mathring{\\mathrm{A}}$ ) are kept and $30\\%$ sequence identity dataset split is adopted. This produces 100, 000 protein-ligand pairs for training and 100 proteins for testing. We regard the protein-ligand structures in the datasets as holo-structures. The corresponding apo structures are obtained from Apobind and the generated apo structures as described in Sec. 4.5. We note that it is fair to compare FlexSBDD with other baseline methods as the additional apo structures contain no ligand molecules and cannot be used by baselines for training. ", "page_idx": 5}, {"type": "text", "text": "Baseline Methods: We compare FlexSBDD with five representative methods for SBDD. LiGAN [62] is a conditional VAE model that represents protein-ligand complex as an atomic density grid. AR [52] and Pocket2Mol [57] are autoregressive schemes that generate 3D ligand molecules atomby-atom. TargetDiff [28] and DecompDiff [29] are state-of-the-art diffusion-based models. ", "page_idx": 5}, {"type": "text", "text": "Evaluation: We comprehensively evaluate the generated molecules from three perspectives: binding affinity and molecular properties, molecular structures, and protein-ligand interactions: (1) Following previous work [28, 29], we use AutoDock Vina [22] to calculate and report the mean and median of binding affinity-related metrics, including Vina Score, Vina Min, Vina Dock, and High Affinity. Vina Score directly measures the binding affinity based on the generated 3D molecules; Vina Min performs a local structure relaxation before calculation; Vina Dock includes an extra step of re-docking, which serves to reveal the optimal binding affinity achievable; High affinity measures the percentage of generated molecules with higher binding affinity than the reference molecule in the ", "page_idx": 5}, {"type": "table", "img_path": "4AB54h21qG/tmp/7b46b83c28c5053601e34a5af512e86632917659073cfa9ab0ba0dfc860c5793.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "Table 1: Overview of properties of the reference dataset and the molecules generated by different methods on the CrossDocked dataset. (\u2191) / (\u2193) denotes the larger/smaller, the better. The best results are marked with bold and the runner-up with underline. ", "page_idx": 6}, {"type": "image", "img_path": "4AB54h21qG/tmp/44792d3500ea5f55daf68463a31adf543e266583879f3232aa1805e2d8784d70.jpg", "img_caption": ["Figure 3: Computational Efficiency and Interaction Analysis on CrossDocked. (a) The average time required by different methods to generate 100 ligand molecules for a protein target. (b) The number of steric clashes. (c) The number of hydrogen bond donors in the ligand molecules. (d) The number of hydrogen bond acceptors in the ligand molecules. (e) The number of hydrophobic interactions. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "test set. As for the other molecular properties, we consider QED, SA, and Diversity. QED measures how likely a molecule is a potential drug candidate; SA (synthesize accessibility) represents the difficulty of drug synthesis; Diversity is computed as the average pairwise dissimilarity between all generated molecules for a binding pocket. (2) In terms of molecular structures, we calculate the Jensen-Shannon divergences (JSD) in bond length/angle distributions between the reference molecules and the generated molecules following [29]. (3) We adopt PoseCheck [30] to evaluate whether methods can establish favorable interaction between protein and ligand. The interactions include Hydrogen bonds and Hydrophobic interactions. We also conduct Steric clashes analysis to examine unphysical structures/interactions. ", "page_idx": 6}, {"type": "text", "text": "5.2 Main Results ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "In Table. 1 and 4, we show the binding affinity and the drug-related properties of the generated molecules on two benchmarks. We can observe that our FlexSBDD outperforms baselines by a large margin in affinity-related metrics. For example, FlexSBDD surpasses the strongest baseline DecompDiff by 0.73 and 0.82 in Avg. and Med. Vina Dock on CrossDokecd and 0.92 and 1.03 respectively on Binding MOAD. These gains indicate the strong capability of FlexSBDD to explore high-affinity drug molecules and adjust protein structures for tight binding. As for molecular properties QED and SA, FlexSBDD also achieves competitive performance with baselines. As discussed in [29], these properties are usually employed as preliminary screening criteria in real drug discovery scenarios as long as they fall into a reasonable range. Finally, the high diversity indicates that FlexSBDD can explore larger chemical space with flexible protein modeling, which is important for early drug discovery. Generation efficiency is also a key factor to consider when sampling a large batch of molecules for screening. A major drawback of widely-used diffusion models is their inference speed, which may require 1000 time steps to produce high-quality samples. In contrast, flow matching methods remove stochasticity from the sampling path and can achieve stable and high-quality generation with much fewer steps (e.g., 20 steps in FlexSBDD). In Figure. 3, we observe that FlexSBDD can generate molecules much more efficiently than autoregressive-based methods such as AR [52] and diffusion-based methods such as TargetDiff [28] and DecompDiff [29]. ", "page_idx": 6}, {"type": "text", "text": "We further consider steric clashes, hydrogen bonds, and hydrophobic interactions. Steric Clashes happens when two neutral atoms come into closer proximity than the combined extent of their van der Waals radii [63], indicating energetically unfavorable and physically unrealistic structures. Hydrogen bonds (HBs) [58] and Hydrophobic interactions are polar interactions that significantly contribute to the binding affinity between proteins and ligands (More details in Appendix A.1). In Figure. 3, we show the average number of steric clashes, hydrogen bond donors, acceptors, and hydrophobic interactions in the generated ligands (without redocking). We observe that FlexSBDD can generate ligands introducing fewer clashes and more favorable interactions. For example, the average steric clashes for DecompDiff and FlexSBDD are 6.43 and 1.39 respectively. The average number of HB Acceptors for DecompDiff and FlexSBDD are 1.18 and 1.96 respectively. This could be attributed to the flexible protein adjustment capability of FlexSBDD, which could adaptively adjust protein and ligand conformations to reduce clashes and increase favorable protein-ligand interactions. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "In Figure. 4, we show examples of the generated ligand molecules for target proteins. Especially, We colored the original holo protein structure green and the updated structure with FlexSBDD cyan for comparison. Firstly, we observe FlexSBDD can generate ligand molecules with higher affinity and comparable QED and SA compared with reference complexes from datasets and molecules generated by DecompDiff. Moreover, the protein structures of FlexSBDD are adjusted to accommodate the generated ligand molecules. Consistent with the prior knowledge in biology [8], we generally observe that the loop regions in protein structures exhibit greater flexibility, whereas the alpha-helix and beta-sheet regions display more rigidity. To further evaluate the validity of the updated protein structure, we employ self-consistency Template Modeling (scTM) following [48] (more details in Appendix A.2). scTM score ranges from 0 to 1 and a larger scTM score indicates better structural validity. On average, the updated protein structures by FlexSBDD have a scTM score of 0.964, comparable to the score of the original structures from the datasets (0.975). Moreover, to evaluate the validity of sidechain structure, we compute the Mean Absolute Error (MAE) of sidechain angles following previous works [81]. In Table. 6, we observe FlexSBDD achieves better performance in sidechain structure prediction. These results indicate FlexSBDD has learned the protein flexible changes and maintains the structural validity. More results are included in the Appendix B. ", "page_idx": 7}, {"type": "text", "text": "5.3 Sub-structure analysis ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We further conduct sub-structure analysis to evaluate whether FlexSBDD can generate valid molecular conformations. In Table. 2 and Table. 5 in Appendix B, we compute different bond distance and bond angle distributions of the generated molecules and compare them against the corresponding reference empirical distributions following [28, 29]. We can observe that our model has a comparable or better performance on all the bond distances and angles, demonstrating the strong capability of FlexSBDD to generate realistic 3D molecules directly. ", "page_idx": 7}, {"type": "table", "img_path": "4AB54h21qG/tmp/4581b7ccd6a7ea258d22678d6b36a112c0f7236045b01754516793b466af8bdc.jpg", "table_caption": [], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Table 2: Jensen-Shannon divergence between bond distance distributions of reference and generated ligands (the lower, the better). \u201c-\u201d, \u201c=\u201d, and \u201c:\u201d denote single, double, and aromatic bonds. ", "page_idx": 7}, {"type": "text", "text": "5.4 Rediscover Cryptic Pockets with FlexSBDD ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "The dynamic nature of proteins frequently results in the formation of cryptic pockets, which can reveal novel druggable sites not found in static structures and make previously \u201cundruggable\u201d proteins into potential drug targets [55]. To study the capability of FlexSBDD to explore cryptic pockets, we take KRASG12C for a case study, which is a promising target in the treatment of solid tumors, and over 3 decades of efforts have been devoted to discovering its inhibitors (drug molecules) [17, 32]. The binding mode of ARS-1620 (green, PDB id 5V9U) represents the typical binding pocket exploited by previous research, which limits the exploration of high-affinity inhibitors. Here, we take the protein structure of ARS-1620 as the apo structure and generate ligand molecules. By comparing and filtering the generated molecules according to recent literature [45], we managed to rediscover the cryptic pockets with FlexSBDD. In Figure. 5, the updated structure is colored cyan and the generated ligand molecule is colored orange. We observe that the side chain rotation of residue Histidine-95 (marked with the red rectangle) is consistent with the report in [45] (PDB id 6P8Z), which forms a new subpocket and contributes a lot to binding affinity. This case study demonstrates FlexSBDD\u2019s capability to accurately model flexible protein structure, update sidechains to reduce steric clashes, and explore cryptic pockets for drug discovery. ", "page_idx": 7}, {"type": "image", "img_path": "4AB54h21qG/tmp/55093a41b66a6e63dccfab18aea8f9256b4ab674014c1d8eb7859d346c1054ea.jpg", "img_caption": ["Figure 5: The predicted side chain rotation of residue H95 (marked with the red rectangle) is consistent with experimental observation [45] "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "image", "img_path": "4AB54h21qG/tmp/8b9b0002ea1f92e7d6bcd0759cf7923c0b2e626798c0f1d63ba4734896968ecf.jpg", "img_caption": ["Figure 4: Examples of the generated ligand molecules for target proteins (PDB ID: 4yhj, 2v3r, 1fmc, 1a2g). We colored the original holo-structure from the dataset green and the updated protein structure with FlexSBDD cyan (structures are aligned). The Carbon atoms in Reference, DecompDiff, and FlexSBDD ligands are colored green, yellow, and orange. Vina Score, QED, and SA are reported. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "5.5 Ablation Studies ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We conduct a series of ablation experiments to study the effect of different modules on the generation capability of FlexSBDD: (1) Exp0: In model training, we remove the data augmentation mentioned in Sec. 5.1, (2) Exp1: we replace the geometric vector modules with EGNN [64] adopted in [65], which only has scalar features without vector features, (3) Exp2: we do not update the backbone structure of the protein (i.e., $x,O)$ (4) Exp3: we do not update the sidechain dihedral angles of the protein (i.e., $x,$ , (5) Exp4: we fix the whole protein structure in ligand molecule generation. We retrain all the FlexSBDD variant models for comparison. The results are present in Table. 3. ", "page_idx": 8}, {"type": "text", "text": "By comparing results from Exp0 and FlexSBDD, we can find that data augmentation indeed helps boost performance by introducing more diverse apo structures. In comparing Exp1 with FlexSBDD, it is obvious that scalar-vector dual feature representation can benefit ligand molecule generation by well capturing geometrical features. When comparing EXP2, 3, and 4 with FlexSBDD, we observe that the modeling of flexible protein structures including backbone and sidechains is important ", "page_idx": 8}, {"type": "table", "img_path": "4AB54h21qG/tmp/93d767c4acde1f553da514638d48b4495a8f2ac99d5454b70af0f9a4940b5090.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Table 3: Effect of different modules on the generation performance of FlexSBDD. The best results are marked with bold and the runner-up with underline. The original FlexSBDD is incorporated for comparison. ", "page_idx": 8}, {"type": "text", "text": "for FlexSBDD. Specifically, we find modeling the flexibility of sidechain angles is more important than backbone structure as the backbone is more rigid. For example, the average Vina Dock drops to -8.86 for Exp3 (FlexSBDD w/o flexible sidechain) while only drops to -9.05 for Exp2 (FlexSBDD w/o flexible backbone). According to [43], the sidechains are critical to \u201cinduced fit\u201d, where they adjust positions to accommodate the ligand and enhance binding affinity. Overall, the FlexSBDD variants still demonstrate competitive performance, showing the advantage of flow-matching architecture. ", "page_idx": 8}, {"type": "text", "text": "5.6 Hyperparameter Analysis ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We investigate the influence of two important hyperparameters on the performance of FlexSBDD, the hidden dimension size and the total number of iteration steps $T$ in flow matching. In Figure. 6, we ", "page_idx": 8}, {"type": "text", "text": "observe the trend of generating higher-quality molecules with larger hidden dimension sizes and more iteration steps. In the default setting, we set the node scaler feature size to 256 and total iteration steps to 20 to achieve a balance between the computational complexity and the generation quality. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we propose FlexSBDD, a deep generative model capable of modeling the flexible protein structure for ligand molecule generation. FlexSBDD adopts a flow matching framework for efficient ligand generation and leverages E(3)-equivariant network with scalar-vector dual feature representation to effectively model dynamic structural changes. Extensive experiments show its state-of-the-art performance in generating high-affinity molecules with less steric clashes and more favorable interactions. Potential future works include leveraging FlexSBDD to discover more cryptic pockets and modeling other functional proteins such as antibodies, peptides, and enzymes. ", "page_idx": 9}, {"type": "text", "text": "7 Acknowledgements ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "This research was supported by grants from the National Natural Science Foundation of China (Grant No. 623B2095) and the Fundamental Research Funds for the Central Universities. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] Josh Abramson, Jonas Adler, Jack Dunger, Richard Evans, Tim Green, Alexander Pritzel, Olaf Ronneberger, Lindsay Willmore, Andrew J. Ballard, Joshua Bambrick, et al. Accurate structure prediction of biomolecular interactions with alphafold 3. Nature, 2024.   \n[2] Yusuf O Adeshina, Eric J Deeds, and John Karanicolas. Machine learning classification can reduce false positives in structure-based virtual screening. Proceedings of the National Academy of Sciences, 117(31):18477\u201318488, 2020.   \n[3] Rishal Aggarwal, Akash Gupta, and U Priyakumar. Apobind: a dataset of ligand unbound protein conformations for machine learning applications in de novo drug design. arXiv preprint arXiv:2108.09926, 2021.   \n[4] Michael S Albergo, Nicholas M Boff,i and Eric Vanden-Eijnden. Stochastic interpolants: A unifying framework for flows and diffusions. arXiv preprint arXiv:2303.08797, 2023.   \n[5] Michael Samuel Albergo and Eric Vanden-Eijnden. Building normalizing flows with stochastic interpolants. In The Eleventh International Conference on Learning Representations, 2022. [6] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint arXiv:1607.06450, 2016.   \n[7] Amos Bairoch. The enzyme database in 2000. Nucleic acids research, 28(1):304\u2013305, 2000.   \n[8] Am\u00e9lie Barozet, Pablo Chac\u00f3n, and Juan Cort\u00e9s. Current approaches to flexible loop modeling. Current research in structural biology, 3:187\u2013191, 2021. [9] Avishek Joey Bose, Tara Akhound-Sadegh, Kilian Fatras, Guillaume Huguet, Jarrid RectorBrooks, Cheng-Hao Liu, Andrei Cristian Nica, Maksym Korablyov, Michael Bronstein, and Alexander Tong. Se (3)-stochastic flow matching for protein backbone generation. arXiv preprint arXiv:2310.02391, 2023.   \n[10] Kathryn Eleda Brenan, Stephen L Campbell, and Linda Ruth Petzold. Numerical solution of initial-value problems in differential-algebraic equations. SIAM, 1995.   \n[11] ID Brown. On the geometry of o\u2013h... o hydrogen bonds. Acta Crystallographica Section A: Crystal Physics, Diffraction, Theoretical and General Crystallography, 32(1):24\u201331, 1976.   \n[12] Andrew Campbell, Jason Yim, Regina Barzilay, Tom Rainforth, and Tommi Jaakkola. Generative flows on discrete state-spaces: Enabling multimodal flows with applications to protein co-design. ICML, 2024.   \n[13] Deliang Chen, Numan Oezguen, Petri Urvil, Colin Ferguson, Sara M Dann, and Tor C Savidge. Regulation of protein-ligand binding affinity by hydrogen bond pairing. Science advances, 2(3):e1501240, 2016.   \n[14] Ricky TQ Chen and Yaron Lipman. Riemannian flow matching on general geometries. arXiv preprint arXiv:2302.03660, 2023.   \n[15] Ricky TQ Chen, Yulia Rubanova, Jesse Bettencourt, and David K Duvenaud. Neural ordinary differential equations. Advances in neural information processing systems, 31, 2018.   \n[16] Jordan J Clark, Mark L Benson, Richard D Smith, and Heather A Carlson. Inherent versus induced protein flexibility: comparisons within and between apo and holo structures. PLoS computational biology, 15(1):e1006705, 2019.   \n[17] Adrienne D Cox, Stephen W Fesik, Alec C Kimmelman, Ji Luo, and Channing J Der. Drugging the undruggable ras: Mission possible? Nature reviews Drug discovery, 13(11):828\u2013851, 2014.   \n[18] Rhiju Das and David Baker. Macromolecular modeling with rosetta. Annu. Rev. Biochem., 77:363\u2013382, 2008.   \n[19] Justas Dauparas, Ivan Anishchenko, Nathaniel Bennett, Hua Bai, Robert J Ragotte, Lukas F Milles, Basile IM Wicky, Alexis Courbet, Rob J de Haas, Neville Bethel, et al. Robust deep learning\u2013based protein sequence design using proteinmpnn. Science, 378(6615):49\u201356, 2022.   \n[20] Tiejun Dong, Ziduo Yang, Jun Zhou, and Calvin Yu-Chian Chen. Equivariant flexible modeling of the protein\u2013ligand binding pose with geometric deep learning. Journal of Chemical Theory and Computation, 19(22):8446\u20138459, 2023.   \n[21] Peter Eastman and Vijay Pande. Openmm: A hardware-independent framework for molecular simulations. Computing in science & engineering, 12(4):34\u201339, 2010.   \n[22] Jerome Eberhardt, Diogo Santos-Martins, Andreas F Tillack, and Stefano Forli. Autodock vina 1.2. 0: New docking methods, expanded force field, and python bindings. Journal of Chemical Information and Modeling, 61(8):3891\u20133898, 2021.   \n[23] RA Engh and R Huber. Structure quality and target parameters. 2012.   \n[24] Wei Feng, Lvwei Wang, Zaiyun Lin, Yanhao Zhu, Han Wang, Jianqiang Dong, Rong Bai, Huting Wang, Jielong Zhou, Wei Peng, et al. Generation of 3d molecules in pockets via a language model. Nature Machine Intelligence, pages 1\u201312, 2024.   \n[25] Paul G Francoeur, Tomohide Masuda, Jocelyn Sunseri, Andrew Jia, Richard B Iovanisci, Ian Snyder, and David R Koes. Three-dimensional convolutional neural networks and a crossdocked data set for structure-based drug design. Journal of chemical information and modeling, 60(9):4200\u20134215, 2020.   \n[26] Richard A Friesner, Jay L Banks, Robert B Murphy, Thomas A Halgren, Jasna J Klicic, Daniel T Mainz, Matthew P Repasky, Eric H Knoll, Mee Shelley, Jason K Perry, et al. Glide: a new approach for rapid, accurate docking and scoring. 1. method and assessment of docking accuracy. Journal of medicinal chemistry, 47(7):1739\u20131749, 2004.   \n[27] Harrison Green, David R Koes, and Jacob D Durrant. Deepfrag: a deep convolutional neural network for fragment-based lead optimization. Chemical Science, 12(23):8036\u20138047, 2021.   \n[28] Jiaqi Guan, Wesley Wei Qian, Xingang Peng, Yufeng Su, Jian Peng, and Jianzhu Ma. 3d equivariant diffusion for target-aware molecule generation and affinity prediction. ICLR, 2023.   \n[29] Jiaqi Guan, Xiangxin Zhou, Yuwei Yang, Yu Bao, Jian Peng, Jianzhu Ma, Qiang Liu, Liang Wang, and Quanquan Gu. Decompdiff: Diffusion models with decomposed priors for structurebased drug design. ICML, 2023.   \n[30] Charles Harris, Kieran Didi, Arian Jamasb, Chaitanya Joshi, Simon Mathis, Pietro Lio, and Tom Blundell. Posecheck: Generative models for 3d structure-based drug design produce unrealistic poses. In NeurIPS 2023 Workshop on New Frontiers of AI for Drug Discovery and Development, 2023.   \n[31] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. Advances in neural information processing systems, 33:6840\u20136851, 2020.   \n[32] Matthew Holderfield. Efforts to develop kras inhibitors. Cold Spring Harbor Perspectives in Medicine, 8(7):a031864, 2018.   \n[33] Scott A Hollingsworth and Ron O Dror. Molecular dynamics simulation for all. Neuron, 99(6):1129\u20131143, 2018.   \n[34] Liegi Hu, Mark L Benson, Richard D Smith, Michael G Lerner, and Heather A Carlson. Binding moad (mother of all databases). Proteins: Structure, Function, and Bioinformatics, 60(3):333\u2013340, 2005.   \n[35] John B Ingraham, Max Baranov, Zak Costello, Karl W Barber, Wujie Wang, Ahmed Ismail, Vincent Frappier, Dana M Lord, Christopher Ng-Thow-Hing, Erik R Van Vlack, et al. Illuminating protein space with a programmable generative model. Nature, pages 1\u20139, 2023.   \n[36] Clemens Isert, Kenneth Atz, and Gisbert Schneider. Structure-based drug design with geometric deep learning. Current Opinion in Structural Biology, 79:102548, 2023.   \n[37] Giacomo Janson, Gilberto Valdes-Garcia, Lim Heo, and Michael Feig. Direct generation of protein conformational ensembles via machine learning. Nature Communications, 14(1):774, 2023.   \n[38] Yan-Bin Jia. Quaternions and rotations. Com S, 477(577):15, 2008.   \n[39] Bowen Jing, Gabriele Corso, Jeffrey Chang, Regina Barzilay, and Tommi Jaakkola. Torsional diffusion for molecular conformer generation. NeurIPS, 2022.   \n[40] Bowen Jing, Stephan Eismann, Pratham N Soni, and Ron O Dror. Equivariant graph neural networks for 3d macromolecular structure. ICML, 2021.   \n[41] John Jumper, Richard Evans, Alexander Pritzel, Tim Green, Michael Figurnov, Olaf Ronneberger, Kathryn Tunyasuvunakool, Russ Bates, Augustin \u017d\u00eddek, Anna Potapenko, et al. Highly accurate protein structure prediction with alphafold. Nature, 596(7873):583\u2013589, 2021.   \n[42] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.   \n[43] Daniel E Koshland Jr. The key\u2013lock theory and the induced fit theory. Angewandte Chemie International Edition in English, 33(23-24):2375\u20132378, 1995.   \n[44] Rohith Krishna, Jue Wang, Woody Ahern, Pascal Sturmfels, Preetham Venkatesh, Indrek Kalvet, Gyu Rie Lee, Felix S Morey-Burrows, Ivan Anishchenko, Ian R Humphreys, et al. Generalized biomolecular modeling and design with rosettafold all-atom. Science, 384(6693):eadl2528, 2024.   \n[45] Brian A Lanman, Jennifer R Allen, John G Allen, Albert K Amegadzie, Kate S Ashton, Shon K Booker, Jian Jeffrey Chen, Ning Chen, Michael J Frohn, Guy Goodman, et al. Discovery of a covalent inhibitor of krasg12c (amg 510) for the treatment of solid tumors, 2019.   \n[46] Haitao Lin, Yufei Huang, Haotian Zhang, Lirong Wu, Siyuan Li, Zhiyuan Chen, and Stan Z Li. Functional-group-based diffusion for pocket-specific molecule generation and elaboration. NeurIPS, 2023.   \n[47] Haitao Lin, Odin Zhang, Huifeng Zhao, Lirong Wu, Dejun Jiang, Zicheng Liu, Yufei Huang, and Stan Z Li. Ppflow: Target-aware peptide design with torsional flow matching. ICML, 2024.   \n[48] Yeqing Lin and Mohammed AlQuraishi. Generating novel, designable, and diverse protein structures by equivariantly diffusing oriented residue clouds. ICML, 2023.   \n[49] Yaron Lipman, Ricky TQ Chen, Heli Ben-Hamu, Maximilian Nickel, and Matt Le. Flow matching for generative modeling. arXiv preprint arXiv:2210.02747, 2022.   \n[50] Meng Liu, Youzhi Luo, Kanji Uchino, Koji Maruhashi, and Shuiwang Ji. Generating 3d molecules for target protein binding. ICML, 2022.   \n[51] Wei Lu, Ji-Xian Zhang, Weifeng Huang, Ziqiao Zhang, Xiangyu Jia, Zhenyu Wang, Leilei Shi, Chengtao Li, Peter Wolynes, and Shuangjia Zheng. Dynamicbind: Predicting ligand-specific protein-ligand complex structure with a deep equivariant generative model. 2023.   \n[52] Shitong Luo, Jiaqi Guan, Jianzhu Ma, and Jian Peng. A 3d generative model for structure-based drug design. NeurIPS, 34:6229\u20136239, 2021.   \n[53] Youzhi Luo and Shuiwang Ji. An autoregressive flow model for 3d molecular geometry generation from scratch. In ICLR, 2021.   \n[54] Dominic D Martinelli. Generative machine learning for de novo drug discovery: A systematic review. Computers in Biology and Medicine, 145:105403, 2022.   \n[55] Artur Meller, Soumendranath Bhakat, Shahlo Solieva, and Gregory R Bowman. Accelerating cryptic pocket discovery using alphafold. Journal of Chemical Theory and Computation, 19(14):4355\u20134363, 2023.   \n[56] Emily E Meyer, Kenneth J Rosenberg, and Jacob Israelachvili. Recent progress in understanding hydrophobic interactions. Proceedings of the National Academy of Sciences, 103(43):15739\u2013 15746, 2006.   \n[57] Xingang Peng, Shitong Luo, Jiaqi Guan, Qi Xie, Jian Peng, and Jianzhu Ma. Pocket2mol: Efficient molecular sampling based on 3d protein pockets. ICML, 2022.   \n[58] George C Pimentel and AL McClellan. Hydrogen bonding. Annual Review of Physical Chemistry, 22(1):347\u2013385, 1971.   \n[59] Michael Plainer, Marcella Toth, Simon Dobers, Hannes Stark, Gabriele Corso, C\u00e9line Marquet, and Regina Barzilay. Diffdock-pocket: Diffusion for pocket-level docking with sidechain flexibility. In NeurIPS 2023 Workshop on New Frontiers of AI for Drug Discovery and Development, 2023.   \n[60] Alexander Powers, Helen Yu, Patricia Suriana, and Ron Dror. Fragment-based ligand generation guided by geometric deep learning on protein-ligand structure. bioRxiv, 2022.   \n[61] Zhuoran Qiao, Weili Nie, Arash Vahdat, Thomas F Miller III, and Animashree Anandkumar. State-specific protein\u2013ligand complex structure prediction with a multiscale deep generative model. Nature Machine Intelligence, pages 1\u201314, 2024.   \n[62] Matthew Ragoza, Tomohide Masuda, and David Ryan Koes. Generating 3d molecules conditional on receptor binding sites with deep generative models. Chemical science, 13(9):2701\u2013 2713, 2022.   \n[63] Srinivas Ramachandran, Pradeep Kota, Feng Ding, and Nikolay V Dokholyan. Automated minimization of steric clashes in protein structures. Proteins: Structure, Function, and Bioinformatics, 79(1):261\u2013270, 2011.   \n[64] Victor Garcia Satorras, Emiel Hoogeboom, and Max Welling. E(n) equivariant graph neural networks, 2021.   \n[65] Arne Schneuing, Yuanqi Du, Charles Harris, Arian Jamasb, Ilia Igashov, Weitao Du, Tom Blundell, Pietro Li\u00f3, Carla Gomes, Max Welling, et al. Structure-based drug design with equivariant diffusion models. arXiv preprint arXiv:2210.13695, 2022.   \n[66] Kristof Sch\u00fctt, Pieter-Jan Kindermans, Huziel Enoc Sauceda Felix, Stefan Chmiela, Alexandre Tkatchenko, and Klaus-Robert M\u00fcller. Schnet: A continuous-fliter convolutional neural network for modeling quantum interactions. NeurIPS, 30, 2017.   \n[67] Chence Shi, Chuanrui Wang, Jiarui Lu, Bozitao Zhong, and Jian Tang. Protein sequence and structure co-design with equivariant translation. In The Eleventh International Conference on Learning Representations, 2022.   \n[68] Vignesh Ram Somnath, Matteo Pariset, Ya-Ping Hsieh, Maria Rodriguez Martinez, Andreas Krause, and Charlotte Bunne. Aligned diffusion schr\u00f6dinger bridges. In Uncertainty in Artificial Intelligence, pages 1985\u20131995. PMLR, 2023.   \n[69] Yuxuan Song, Jingjing Gong, Minkai Xu, Ziyao Cao, Yanyan Lan, Stefano Ermon, Hao Zhou, and Wei-Ying Ma. Equivariant flow matching with hybrid probability transport for 3d molecule generation. Advances in Neural Information Processing Systems, 36, 2024.   \n[70] Hannes Stark, Bowen Jing, Regina Barzilay, and Tommi Jaakkola. Harmonic selfconditioned flow matching for multi-ligand docking and binding site design. arXiv preprint arXiv:2310.05764, 2023.   \n[71] Hannes Stark, Bowen Jing, Chenyu Wang, Gabriele Corso, Bonnie Berger, Regina Barzilay, and Tommi Jaakkola. Dirichlet flow matching with applications to dna sequence design. arXiv preprint arXiv:2402.05841, 2024.   \n[72] Sandhya P Tiwari and Nathalie Reuter. Conservation of intrinsic dynamics in proteins\u2014what have computational models taught us? Current Opinion in Structural Biology, 50:75\u201381, 2018.   \n[73] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. Advances in neural information processing systems, 30, 2017.   \n[74] Limei Wang, Haoran Liu, Yi Liu, Jerry Kurtin, and Shuiwang Ji. Learning hierarchical protein representations via complete 3d graph networks. In The Eleventh International Conference on Learning Representations, 2022.   \n[75] Ruidong Wu, Fan Ding, Rui Wang, Rui Shen, Xiwen Zhang, Shitong Luo, Chenpeng Su, Zuofan Wu, Qi Xie, Bonnie Berger, et al. High-resolution de novo structure prediction from primary sequence. BioRxiv, pages 2022\u201307, 2022.   \n[76] Jiaxian Yan, Zaixi Zhang, Jintao Zhu, Kai Zhang, Jianfeng Pei, and Qi Liu. Deltadock: A unified framework for accurate, efficient, and physically reliable molecular docking. Advances in Neural Information Processing Systems, 2024.   \n[77] Jason Yim, Andrew Campbell, Andrew YK Foong, Michael Gastegger, Jos\u00e9 Jim\u00e9nez-Luna, Sarah Lewis, Victor Garcia Satorras, Bastiaan S Veeling, Regina Barzilay, Tommi Jaakkola, et al. Fast protein backbone generation with se (3) flow matching. arXiv preprint arXiv:2310.05297, 2023.   \n[78] Odin Zhang, Tianyue Wang, Gaoqi Weng, Dejun Jiang, Ning Wang, Xiaorui Wang, Huifeng Zhao, Jialu Wu, Ercheng Wang, Guangyong Chen, et al. Learning on topological surface and geometric structure for 3d molecular generation. Nature Computational Science, 3(10):849\u2013859, 2023.   \n[79] Odin Zhang, Jintu Zhang, Jieyu Jin, Xujun Zhang, RenLing Hu, Chao Shen, Hanqun Cao, Hongyan Du, Yu Kang, Yafeng Deng, et al. Resgen is a pocket-aware 3d molecular generation model based on parallel multiscale modelling. Nature Machine Intelligence, 5(9):1020\u20131030, 2023.   \n[80] Yang Zhang and Jeffrey Skolnick. Scoring function for automated assessment of protein structure template quality. Proteins: Structure, Function, and Bioinformatics, 57(4):702\u2013710, 2004.   \n[81] Yangtian Zhang, Zuobai Zhang, Bozitao Zhong, Sanchit Misra, and Jian Tang. Diffpack: A torsional diffusion model for autoregressive protein side-chain packing. arXiv preprint arXiv:2306.01794, 2023.   \n[82] Zaixi Zhang and Qi Liu. Learning subpocket prototypes for generalizable structure-based drug design. ICML, 2023.   \n[83] Zaixi Zhang, Qi Liu, Chee-Kong Lee, Chang-Yu Hsieh, and Enhong Chen. An equivariant generative framework for molecular graph-structure co-design. Chemical Science, 14(31):8380\u2013 8392, 2023.   \n[84] Zaixi Zhang, Zepu Lu, Hao Zhongkai, Marinka Zitnik, and Qi Liu. Full-atom protein pocket design via iterative refinement. Advances in Neural Information Processing Systems, 36:16816\u2013 16836, 2023.   \n[85] Zaixi Zhang, Yaosen Min, Shuxin Zheng, and Qi Liu. Molecule generation for target protein binding with structural motifs. In The Eleventh International Conference on Learning Representations, 2023.   \n[86] Zaixi Zhang, Wanxiang Shen, Qi Liu, and Marinka Zitnik. Pocketgen: Generating full-atom ligand-binding protein pockets. bioRxiv, pages 2024\u201302, 2024.   \n[87] Zaixi Zhang, Jiaxian Yan, Qi Liu, Enhong Chen, and Marinka Zitnik. A systematic survey in geometric deep learning for structure-based drug design. arXiv preprint arXiv:2306.11768, 2023. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Data Analysis ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "A.1 Protein-ligand Interaction Analysis ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We consider steric clashes, hydrogen bonds, and hydrophobic interactions in protein-ligand interaction analysis with PoseCheck [30]. Steric Clashes happens when two neutral atoms come into closer proximity than the combined extent of their van der Waals radii [63], indicating energetically unfavorable and physically unrealistic structures. In PoseCheck, a clash is counted when the pairwise distance between a protein and ligand atom falls below the sum of their van der Waals radii, allowing a clash tolerance of $0.5\\,\\mathring\\mathrm{A}$ . Hydrogen bonds (HBs) represent a form of molecular interaction where a hydrogen atom, covalently linked to an element of high electronegativity like nitrogen, oxygen, or fluorine, engages with another electronegative atom [58]. These bonds are crucial in numerous protein-ligand interactions [13] and necessitate precise geometric alignments to form [11]. HBs are directional, bestowing distinct roles on the atoms involved: the hydrogen covalently bonded to the electronegative atom acts as a \u201cdonor\u201d, while the atom that receives the HB is known as an \u201cacceptor\u201d. Hydrophobic interactions are a type of non-covalent bonding that occurs among hydrophobic molecules or moieties within an aqueous setting. Driven by water\u2019s propensity to hydrogen bond with itself, these interactions result in the segregation of non-polar entities, compelling them to cluster together away from the water-rich environment [56]. This behavior significantly contributes to the binding affinity between proteins and ligands. ", "page_idx": 14}, {"type": "text", "text": "A.2 Protein Sturcture Analysis ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Following [48], scTM takes a generated structure and feeds it into ProteinMPNN [19], a state-ofthe-art structure-conditioned sequence generation method. With a sampling temperature of 0.1, we generate eight sequences per input structure and then use OmegaFold [75] to predict the structure of each putative sequence. We follow [48] that substitutes AlphaFold2 with OmegaFold for better sequence prediction performance. Finally, scTM is measured by computing the TM-score [80], a metric of structural congruence of the OmegaFold-predicted structure and the original updated structure by our FlexSBDD. scTM scores range from 0 to 1, with higher numbers corresponding to the increased likelihood that an input structure is designable (higher structural validity). ", "page_idx": 14}, {"type": "text", "text": "B More Results and Analysis ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Table. 5, 7 and Figure. 6 show the additional results on substructure analysis, and hyperparameters analysis. ", "page_idx": 14}, {"type": "text", "text": "B.1 Benchmark Results on CrossDocked ", "text_level": 1, "page_idx": 14}, {"type": "table", "img_path": "4AB54h21qG/tmp/16bd78c07aba8261fa2d6f763766bac53271876f581086a417b3c9d826c8ca79.jpg", "table_caption": ["In Table. 4, we show the additional results on the Binding MOAD dataset. "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Table 4: Overview of properties of the reference dataset and the molecules generated by different methods on Binding MOAD dataset. (\u2191) / (\u2193) denotes the larger/smaller, the better. The best results are marked with bold and the runner-up with underline. ", "page_idx": 14}, {"type": "text", "text": "B.2 Bond Angle Distributions ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In Table. 5, we show the Jensen-Shannon divergence between bond angle distributions of the reference molecules and the generated molecules. ", "page_idx": 14}, {"type": "table", "img_path": "4AB54h21qG/tmp/edc3639cbc500ed2d1f4407f7610df401bceea8378df48f45a7c04c220d1eeb0.jpg", "table_caption": [], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "Table 5: Jensen-Shannon divergence between bond angle distributions of the reference molecules and the generated molecules, and lower values indicate better performances. We highlight the best two results with bold text and underlined text, respectively. ", "page_idx": 15}, {"type": "text", "text": "B.3 Validity of Side Chain Prediction ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In FlexSBDD, the sidechain torsion angles are predicted and the sidechain conformations are derived based on the dihedral angles and the ideal bond length/angles. To evaluate the validity of sidechain structure, we compute the Mean Absolute Error (MAE) of sidechain angles (degrees) following previous works [81] in Table. 6. We also compare the results with NeuralPlexer [61], the state-of-theart protein-ligand complex structure prediction. In the table, we report the average MAE and can observe that FlexSBDD achieves better performance in generating valid sidechain structures. ", "page_idx": 15}, {"type": "table", "img_path": "4AB54h21qG/tmp/7d728c0552f3f15309ef7b3150507be060b4d1f2dcb87f18605d6a39879d4260.jpg", "table_caption": ["Table 6: The MAE of NeuralPlexer and FlexSBDD on sidechain torsion angles. "], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "B.4 More Results on Abation Studies ", "text_level": 1, "page_idx": 15}, {"type": "table", "img_path": "4AB54h21qG/tmp/cbe0cde96e7d9c4a8a77523a51459ca590974c870d54f035b465afe66d5de6f2.jpg", "table_caption": ["In Table. 7, we show the average number of interactions in the ablation studies. "], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "Table 7: Effect of different modules on the generation performance of FlexSBDD. We show the average number of interactions here. We highlight the best two results with bold text and underlined text, respectively. ", "page_idx": 15}, {"type": "text", "text": "B.5 Evaluation of Binding Affinity with GlideSP ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Besides Vina Scores, we also try to leverage other docking methods to evaluate the binding affinity [24]. In Table. 8, we further leverage Glide [26] to evaluate the generated ligand molecules, which demonstrates superior ability in filtering active compounds. Specifically, we calculate the min-inplace GlideSP score following [24], where the ligand structure undergoes force-field-based energy minimization within the receptor\u2019s field before scoring. In the table below, we observe that FlexSBDD can also achieve the best score on Glide, demonstrating its strong performance in generating proteinbinding molecules. ", "page_idx": 15}, {"type": "text", "text": "Table 8: Comparison of Average Min-in-Place GlideSP Scores on CrossDocked. ", "page_idx": 16}, {"type": "table", "img_path": "4AB54h21qG/tmp/7d4fb4c121451ecd358530c12cf9bd2ed702727cf9ae3434f1d06ea0cbd02123.jpg", "table_caption": [], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "B.6 Hyperparameter Analysis ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "In Figure. 6, we show hyperparameter analysis for the hidden dimension size and the total steps of flow matching. ", "page_idx": 16}, {"type": "image", "img_path": "4AB54h21qG/tmp/c1a56e8fb3910d3edcd67a0823d513ac8203bcb583c8df80c32bb954d85e8fcb.jpg", "img_caption": ["Figure 6: Hyperparameters Analysis with respect to (a) the hidden dimension size (the node scaler features) and (b) the total iteration steps of flow matching. When varying the dimension size of the node scaler features, the other features are scaled proportionally. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "C More Details of FlexSBDD Training and Generation ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "C.1 Hyperparameters settings ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "To construct the protein-ligand KNN graph, we set $k$ as 8 (each node is connected to its nearest 8 neighbors). In the default setting, we use a hidden size of 256, 128, 128, and 64 for the scalar features of nodes, scalar features of edges, vector features of nodes, and vector features of edges, respectively. The Encoder and Decoder have 6 layers respectively with the number of attention heads set as 4. The number of integration steps in flow matching is 20 for FlexSBDD. The hyperparameters for the loss function: $w_{\\mathrm{atom}}$ , $w_{\\mathrm{coord}}$ , $w_{\\mathrm{ori}}$ , and $w_{\\mathrm{sc}}$ are selected based on grid search $(\\bar{\\{0.5,1.0,2.0,3.0\\}})$ . $w_{\\mathrm{atom}}$ , $w_{\\mathrm{coord}}$ , $w_{\\mathrm{ori}}$ , and $w_{\\mathrm{sc}}$ are set to 2.0, 1.0, 1.0, and 1.0 in the default setting. To train FlexSBDD, we use the Adam [42] as our optimizer with a learning rate of 0.001, $b e t a s=(0.95,0.999)$ , and batch size 4 for $500\\mathrm{k}$ iterations. It takes around 36 hours on n one NVIDIA GeForce GTX A100 GPU to complete the training. ", "page_idx": 16}, {"type": "text", "text": "C.2 Pseudo Algorithms ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We show the pseudo codes of FlexSBDD training and generation in Algorithm 1 and 2. ", "page_idx": 16}, {"type": "text", "text": "D More Details of Neural Network Architecture ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "D.1 Overview ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "A series of previous works on biochemistry tasks [40, 57, 79, 20] have shown that representing the nodes and edges in 3D graphs with scalar-vector dual features can greatly improve performance. In ", "page_idx": 16}, {"type": "text", "text": "Input: Holo data distribution $p_{1}$ , FlexSBDD model $v_{\\theta}$ , Apobind and generated apo structures   \nwhile Training do $\\mathcal{C}_{1}\\sim p_{1};t\\sim\\mathcal{U}[0,1]$ ; Sample $\\mathcal{C}_{0}$ from the corresponding apo structure pool (Apobind and data augmentation) ${\\pmb x}_{t}=(1-t){\\pmb x}_{0}+t{\\pmb x}_{1}$ ; $\\bar{\\cal O}_{t}=\\bar{\\exp_{O_{0}}}(t\\log_{O_{0}}(\\bar{O}_{1}))$ $\\chi_{t}=(1-t)\\chi_{0}+t\\cdot\\mathrm{reg}(\\chi_{1}-\\chi_{0})$ ; $\\dot{\\mathbf{\\alpha}}_{a_{t}}=\\dot{t}\\dot{\\mathbf{a}}_{1}+(1-t)\\mathbf{a}_{0};//$ Interpolation L \u2190 $w_{\\mathrm{atom}}\\mathcal{L}_{\\mathrm{atom}}+w_{\\mathrm{coord}}\\mathcal{L}_{\\mathrm{coord}}+w_{\\mathrm{ori}}\\mathcal{L}_{\\mathrm{ori}}+w_{\\mathrm{sc}}\\mathcal{L}_{\\mathrm{sc}}//$ calculate loss according to Equ. 9; $\\theta\\gets\\mathbf{Update}(\\theta,\\nabla_{\\theta}\\mathcal{L}_{F M})$ ; ", "page_idx": 17}, {"type": "text", "text": "return $v_{\\theta}$ ", "page_idx": 17}, {"type": "text", "text": "Algorithm 2: Generation algorithm of FlexSBDD ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Input: Total number of integration steps T, and trained model $v_{\\theta}$   \n$s t e p s\\gets0,t\\gets0,\\Delta t\\gets1/T$ ;   \nInitialize $\\mathcal{C}_{\\mathrm{0}}$ with the apo structure and sampled ligand atoms;   \nwhile steps $\\le T-1$ do $\\begin{array}{r l}&{{\\pmb x}_{t+\\Delta t}^{(i)}={\\pmb x}_{t}^{-}(i)+v_{\\theta}({\\pmb x}_{t}^{(i)},t)\\Delta t;\\quad{\\pmb O}_{t+\\Delta t}^{(i)}={\\pmb O}_{t}^{(i)}\\exp\\left(v_{\\theta}({\\pmb O}_{t}^{(i)},t)\\Delta t\\right);}\\\\ &{\\chi_{t+\\Delta t}^{(i)}=\\mathrm{reg}(\\chi_{t}^{(i)}+v_{\\theta}({\\pmb\\chi}_{t}^{(i)},t)\\Delta t);\\quad{\\pmb a}_{t+\\Delta t}^{(i)}=\\mathrm{norm}\\left({\\pmb a}_{t}^{(i)}+v_{\\theta}({\\pmb a}_{t}^{(i)},t)\\Delta t\\right);}\\end{array}$ $t\\leftarrow t+\\Delta t$ ;   \nreturn $\\mathcal{C}_{1}$ ", "page_idx": 17}, {"type": "text", "text": "FlexSBDD, all nodes and edges in the target protein $\\mathcal{P}$ and the generated molecules $\\mathcal{G}$ are assigned with both scalar and vector features to better capture the 3D geometric information. The scalar features contain basic biochemical knowledge (e.g., residue/atom types), and the vector features contain geometric knowledge of the structure (e.g., direction to the geometric center). In the rest of this paper, we use \u201c\u00b7\u201d and $^{\\omega}\\rightarrow^{\\bullet}$ overheads to explicitly indicate scalar features and vector features (e.g., $\\dot{\\mathbf{v}}$ and $\\vec{\\bf v}$ ). ", "page_idx": 17}, {"type": "text", "text": "We adopt the geometric vector linear (GVL) and the geometric vector perceptron (GVP) as the main building blocks to enhance the information flows between the scalar features and the vector features and achieve E(3)-equivariance [40]. The details of GVP and GVL are shown in Appendix D.5. Briefly, they propagate the vector features into the scalar features by row-wise norm and propagate the scalar features to the vector features through gating. The GVP further applies extra non-linear transformations to both the scalar and vector features, following the output of GVL: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{(\\dot{\\mathbf{v}}^{\\prime},\\vec{\\mathbf{v}}^{\\prime})\\leftarrow\\mathtt{G V L}(\\dot{\\mathbf{v}},\\vec{\\mathbf{v}}),}\\\\ &{(\\dot{\\mathbf{v}}^{\\prime},\\vec{\\mathbf{v}}^{\\prime})\\leftarrow\\mathtt{N o n L i n e a r T r a n s f o r m}(\\dot{\\mathbf{v}}^{\\prime},\\vec{\\mathbf{v}}^{\\prime}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "where $(\\dot{\\mathbf{v}},\\vec{\\mathbf{v}})$ could be any pair of scalar-vector features. Incorporating vector features is essential for our model\u2019s ability to directly and precisely update the positions of atoms and model the conformation change of the flexible protein. In our model, we also incorporate the geometric vector normalization (GVNorm) and the geometric vector gate (GVGate) for model\u2019s stability and better performance. Specifically, GVNorm combines the layer normalization [6] with the vector normalization [40]; GVGate performs skip connection and fuses features from different blocks. ", "page_idx": 17}, {"type": "text", "text": "D.2 Encoder ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In FlexSBDD, we represent the protein pocket-ligand complex as a $k$ -nearest neighbor (KNN) graph in which nodes represent protein residues or ligand atoms and each node is connected to its $k$ -nearest neighbors. The input scalar features of residues are onehot embeddings of residue types and the input scalar features of ligand atoms are initialized with a uniform distribution over all atom types. The input vector features of residues are computed based on the coordinates of backbone and sidechain atoms, while the vector features of ligand atoms are the Euclidean vectors pointing to the geometric center of the ligand molecule (see Appendix D.4). The scalar edge features are the radial basis function (RBF) distance encodings [66] and the vector edge features are the relative coordinates. In the flow matching model, to further incorporate time step information, we embed time with sinusoidal embedding [73] and concatenate it with the input scalar node features following [28]. ", "page_idx": 17}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "Generally, the encoder of FlexSBDD follows the message-passing paradigm to update the features. Denote the feature of node $i$ at the $l_{\\cdot}$ -th layer as $(\\dot{\\mathbf{v}}_{i}^{(l)},\\vec{\\mathbf{v}}_{i}^{(l)})$ and the edge feature between node $i$ and $j$ as $(\\dot{\\mathbf{e}}_{i j}^{(l)},\\vec{\\mathbf{e}}_{i j}^{(l)})$ (we use subscript here for the index of nodes instead of time step in the main paper). Each layer consists of a message-passing module $M_{l}$ and an update module $U_{l}$ : ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathbf{M}_{v}^{(l)},\\mathbf{M}_{e}^{(l)}=M_{l}(\\dot{\\mathbf{v}}_{j}^{(l-1)},\\vec{\\mathbf{v}}_{j}^{(l-1)},\\dot{\\mathbf{e}}_{i j}^{(l-1)},\\vec{\\mathbf{e}}_{i j}^{(l-1)}),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n(\\dot{\\mathbf{v}}_{i}^{(l)},\\vec{\\mathbf{v}}_{i}^{(l)}),(\\dot{\\mathbf{e}}_{i j}^{(l)},\\vec{\\mathbf{e}}_{i j}^{(l)})=U_{l}(\\dot{\\mathbf{v}}_{i}^{(l-1)},\\vec{\\mathbf{v}}_{i}^{(l-1)},\\mathbf{M}_{v}^{(l)},\\mathbf{M}_{e}^{(l)}),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where we use $\\mathbf{M}_{v}^{(l)}=(\\dot{\\mathbf{m}}_{i}^{(l)},\\vec{\\mathbf{m}}_{i}^{(l)})$ and $\\mathbf{M}_{e}^{(l)}=(\\dot{\\mathbf{m}}_{i j}^{(l)},\\vec{\\mathbf{m}}_{i j}^{(l)})$ to denote the calculated messages for node $i$ and the edge between node $i$ and $j$ . The message-passing module is based on an attention mechanism [73]. The query $(\\dot{\\mathbf{q}}_{i},\\vec{\\mathbf{q}}_{i})$ , key $(\\dot{\\mathbf{k}}_{j},\\vec{\\mathbf{k}}_{j})$ , value $(\\dot{\\mathbf{u}}_{j},\\vec{\\mathbf{u}}_{j})$ , and edge bias $(\\dot{\\mathbf{b}}_{i j},\\vec{\\mathbf{b}_{i j}})$ are first calculated with GVLs (the layer superscripts are omitted here for simplicity): ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\dot{\\mathbf{q}}_{i},\\vec{\\mathbf{q}}_{i}=\\mathbf{G}\\mathbf{V}\\mathbf{L}(\\dot{\\mathbf{v}}_{i}^{(l-1)},\\vec{\\mathbf{v}}_{i}^{(l-1)}),}\\\\ &{\\dot{\\mathbf{k}}_{j},\\vec{\\mathbf{k}}_{j},\\dot{\\mathbf{u}}_{j},\\vec{\\mathbf{u}}_{j}=\\mathbf{G}\\mathbf{V}\\mathbf{L}(\\dot{\\mathbf{v}}_{j}^{(l-1)},\\vec{\\mathbf{v}}_{j}^{(l-1)}),}\\\\ &{\\dot{\\mathbf{b}}_{i j},\\vec{\\mathbf{b}}_{i j}=\\mathbf{G}\\mathbf{V}\\mathbf{L}(\\dot{\\mathbf{e}}_{i j}^{(l-1)},\\vec{\\mathbf{e}}_{i j}^{(l-1)}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Then the attention weights for the scalar are computed as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\dot{\\bf a}_{i j}=\\dot{\\bf q}_{i}\\odot\\dot{\\bf k}_{j}\\odot\\dot{\\bf b}_{i j},\\quad\\dot{\\bf a}_{i j}\\in\\mathbb{R}^{h^{s}}}\\\\ &{\\hat{a}_{i j}=\\mathrm{softmax}_{j}\\frac{1}{\\sqrt{h^{s}}}\\dot{\\bf a}_{i j}{\\bf1},}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Similarly for the vector features: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\vec{\\bf a}_{i j}=\\vec{\\bf q}_{i}\\odot\\vec{\\bf k}_{j}\\odot\\vec{\\bf b}_{i j},\\quad\\vec{\\bf a}_{i j}\\in\\mathbb{R}^{h^{v}\\times3},}\\\\ &{\\hat{\\hat{a}}_{i j}=\\mathrm{softmax}_{j}\\frac{1}{\\sqrt{3h^{v}}}{\\bf1}^{\\top}\\vec{\\bf a}_{i j}{\\bf1},}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\odot$ denotes the Hadamard product, 1 is the vector with all entries as 1, $h^{s}$ and $h^{v}$ denote the hidden dimension size of the scalar and vector features respectively. softmaxj means perform softmax over the $j$ index. $\\hat{a}_{i j}$ and $\\hat{\\hat{a}}_{i j}$ are the attention weights (scalar and vector channel) between node $i$ and $j$ . The message is obtained as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n(\\dot{\\mathbf{m}}_{i}^{(l)},\\vec{\\mathbf{m}}_{i}^{(l)})=\\mathrm{GVL}(\\sum_{j}\\hat{a}_{i j}\\dot{\\mathbf{u}}_{j},\\sum_{j}\\hat{\\hat{a}}_{i j}\\vec{\\mathbf{u}}_{j}),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n(\\dot{\\mathbf{m}}_{i j}^{(l)},\\vec{\\mathbf{m}}_{i j}^{(l)})=\\mathrm{GVL}\\left(\\mathbf{a}_{i j},\\vec{\\mathbf{a}}_{i j}\\right),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where the message features with respect to node $i$ are obtained by applying GVL to the weighted summation of the neighboring value features. Finally, the update module $U_{l}$ is formulated as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\dot{\\mathbf{v}}_{i}^{(l)},\\vec{\\mathbf{v}}_{i}^{(l)}=\\mathbf{GVNorm}(\\mathbf{GVGate}(\\dot{\\mathbf{v}}_{i}^{(l-1)},\\vec{\\mathbf{v}}_{i}^{(l-1)},\\dot{\\mathbf{m}}_{i}^{(l)},\\vec{\\mathbf{m}}_{i}^{(l)})),}\\\\ &{\\dot{\\mathbf{e}}_{i j}^{(l)},\\vec{\\mathbf{e}}_{i j}^{(l)}=\\mathbf{GVNorm}(\\mathbf{GVGate}(\\dot{\\mathbf{e}}_{i j}^{(l-1)},\\vec{\\mathbf{e}}_{i j}^{(l-1)},\\dot{\\mathbf{m}}_{i j}^{(l)},\\vec{\\mathbf{m}}_{i j}^{(l)})),}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where the GVGate fuses the information from the $(l-1)$ -th layer and the calculated messages from the $l$ -th layer. GVNorm is appended to normalize the features. ", "page_idx": 18}, {"type": "text", "text": "D.3 Decoder ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "The node/edge features of the decoder are initialized from the output of the encoder and are updated the same as the encoder. The decoder of FlexSBDD further updates the protein $C_{\\alpha}$ and ligand atom coordinates as follows: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\dot{f}_{i}^{(l)},\\,\\bar{f}_{i}^{(l)}=\\mathrm{GVL}\\big(\\mathrm{GVP}\\big(\\displaystyle\\sum_{j}\\hat{a}_{i j}\\dot{\\mathbf{u}}_{j},\\displaystyle\\sum_{j}\\hat{\\hat{a}}_{i j}\\vec{\\mathbf{u}}_{j}\\big)\\big),}\\\\ &{\\displaystyle\\vec{r}_{i}^{(l)}=\\sum_{j}\\frac{x_{i}^{(l-1)}-x_{j}^{(l-1)}}{\\|x_{i}^{(l-1)}-x_{j}^{(l-1)}\\|_{2}}\\mathbf{MLP}\\big(\\mathrm{concat}(\\dot{\\mathbf{a}}_{i j},\\|\\vec{\\mathbf{a}}_{i j}\\|_{2}^{(r)})\\big),}\\\\ &{\\displaystyle x_{i}^{(l)}=x_{i}^{(l-1)}+\\bar{f}_{i}^{(l)}+\\bar{r}_{i}^{(l)},}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\pmb{x}_{i}^{(l)}$ is the node $i$ \u2019s coordinate at the $l$ -th layer and $\\|\\cdot\\|_{2}^{(r)}$ denotes the row-wise L2 norm. The attention weights $(\\hat{\\hat{a}}_{i j},\\hat{\\hat{a}}_{i j},\\dot{\\mathbf{a}}_{i j},\\vec{\\mathbf{a}}_{i j})$ and features $(\\dot{\\mathbf{u}}_{j},\\vec{\\mathbf{u}}_{j})$ are calculated similarly to Equations 14 and 15. Finally, we apply MLPs on last layer representations $(\\dot{\\mathbf{v}}_{i}^{(L)},\\vec{\\mathbf{v}}_{i}^{(L)})$ (totally $L$ layers) that capture the chemical and geometric attributes for ligand atom type $\\pmb{a}^{(i)}$ , residue sidechain dihedral angles $\\chi^{(i)}$ , and the residue backbone orientation $\\bar{O}^{(i)}$ prediction. For the efficient encapsulation of three-dimensional rotations for $O^{(i)}$ , we predict a unit quaternion vector [38]. The quaternion can be easily transformed into a rotation matrix and is a more concise representation of a rotation in 3D. The protein-ligand structure is then adjusted based on the updated coordinates, orientation, and the sidechain dihedral angles. Similar to previous works [57], the update process satisfies the E(3)-equivariance. ", "page_idx": 19}, {"type": "text", "text": "D.4 Feature Initialization ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Protein node vector features Following [20], the vector feature for protein nodes in FlexSBDD consists of three parts with a total dimension of $[N_{p},24,3]$ $N_{p}$ is the total number of protein nodes). ", "page_idx": 19}, {"type": "text", "text": "(1) Euclidean vectors between the C, CA, N, CB (CA for GLY) atoms for a given residue (shape: $[N_{p},16,3]\\rangle$ ). It encompasses various combinations like C to C, $\\mathbf{C}$ to CA, C to N, C to CB, CA to C, and so forth. ", "page_idx": 19}, {"type": "text", "text": "(2) Euclidean vectors between atom $j$ and atom $k$ in for all side-chain dihedral angles (shape: $[N_{p},4,3])$ . For instance, in an amino acid like Arginine (ARG), the side-chain angles (denoted as $\\chi_{1},\\chi_{2},\\chi_{3},\\chi_{4})$ are defined by specific sequences of four atoms $(i{-}j{-}k{-}l)$ according to Rosetta: $\\chi_{1}$ : N-CA-CB-CG, $\\chi_{2}$ : CA-CB-CG-CD, $\\chi_{3}$ : CB-CG-CD-NE, $\\chi_{4}$ : CG-CD-NE-CZ. Then the Euclidean vectors can be obtained by combining vectors of CA to CB, CB to CG, CG to CD, and CD to NE. For residues with less than 4 sidechain angles, the corresponding vectors are assigned 0. ", "page_idx": 19}, {"type": "text", "text": "(3) Euclidean vectors between CA and atom $k$ in all side-chain dihedral angles (shape: $[N_{p},4,3])$ . For example, the vectors for ARG can be obtained by combining Euclidean vectors of CA to CB, CA to CG, CA to CD, and CA to NE. For residues with less than 4 sidechain angles, the corresponding vectors are assigned 0. ", "page_idx": 19}, {"type": "text", "text": "Ligand node vector features The vector features for ligand nodes are initialized as the Euclidean vectors between ligand atoms and the geometric center of the ligand molecule (shape: $[N_{l},1,3]!$ ). $N_{l}$ is the number of ligand atoms. ", "page_idx": 19}, {"type": "text", "text": "D.5 Geometric Vector Modules ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "In Algorithm 3 and 4, we show the Geometric vector linear (GVL) and the Geometric vector perception (GVP) modules in FlexSBDD. In Algorithm 5 and 5, we show the GVNorm and GVGate modules for the stability and better performance of FlexSBDD. ", "page_idx": 19}, {"type": "table", "img_path": "4AB54h21qG/tmp/60d457a508c3e7d550d1680cc4c8c7cedc754af6cc1cab8245189d1b6d56ba87.jpg", "table_caption": [], "table_footnote": [], "page_idx": 19}, {"type": "text", "text": "Input: Scalar and vector features $(\\mathbf{v},{\\vec{\\mathbf{v}}})$   \nOutput: Nonlinear transformed scalar and vector features $(\\mathbf{v}^{u},\\vec{\\mathbf{v}}^{u})$   \nFunction GVP $(\\mathbf{v},\\vec{\\mathbf{v}})$ : $\\mathbf{v}^{\\prime},\\vec{\\mathbf{v}}^{\\prime}\\leftarrow\\mathrm{GVL}(\\mathbf{v},\\vec{\\mathbf{v}});$ ; $\\mathbf{v}^{u}\\leftarrow\\mathrm{leaky\\_relu}(\\mathbf{v}^{\\prime});$ $\\vec{\\bf v}^{\\prime\\prime}\\leftarrow\\mathrm{LinearNoBias}(\\vec{\\bf v}^{\\prime})$ ; ${\\bf v}_{d o t}\\leftarrow(\\vec{\\bf v}^{\\prime}\\odot\\vec{\\bf v}^{\\prime\\prime}){\\bf1}$ ; $\\mathbf{v}_{m a s k}\\gets1$ if $\\mathbf{v}_{d o t}\\ge0$ , else 0; $\\vec{\\mathbf{v}}_{a c t}\\gets\\mathbf{v}_{d o t}\\oslash\\lVert\\vec{\\mathbf{v}}^{\\prime\\prime}\\rVert_{2}^{2}\\odot\\vec{\\mathbf{v}}$ ; $1/0$ is element-wise division $\\vec{\\mathbf{v}}^{u}\\gets\\alpha\\vec{\\mathbf{v}}^{\\prime}+(1-\\alpha)$ $\\left(\\mathbf{v}_{m a s k}\\odot\\vec{\\mathbf{v}}^{\\prime}+\\left(1-\\mathbf{v}_{m a s k}\\right)\\odot\\left(\\vec{\\mathbf{v}}^{\\prime}-\\vec{\\mathbf{v}}_{a c t}\\right)\\right)$ ; // \u03b1 = 0.01 return $(\\mathbf{v}^{u},\\vec{\\mathbf{v}}^{u})$ ; ", "page_idx": 20}, {"type": "text", "text": "Algorithm 5: Geometric Vector Normalization (GVNorm) ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Input: Scalar and vector features $(\\mathbf{v},{\\vec{\\mathbf{v}}})$   \nOutput: Normalized scalar and vector features $(\\mathbf{v}^{u},\\vec{\\mathbf{v}}^{u})$   \nFunction $\\mathtt{G V N o r m}(\\mathbf{v},\\vec{\\mathbf{v}})$ : $\\mathbf{v}^{u}\\leftarrow\\mathrm{LayerNorm}(\\mathbf{v});$ ; $\\begin{array}{r}{\\vec{\\bf v}^{\\prime}\\leftarrow\\vec{\\bf v}/\\sqrt{\\frac{1}{h^{\\prime}}\\langle\\vec{\\bf v},\\vec{\\bf v}\\rangle_{F}}}\\end{array}$ ; $//\\vec{\\textbf{v}}^{\\prime}\\in\\mathbb R^{h^{\\prime}\\times3}$ \u20d7vu \u2190\u03b3\u20d7v\u2032 + \u03b2; $//\\gamma\\in\\mathbb{R}^{1},\\beta\\in\\mathbb{R}^{1}$ are trainable parameters return $(\\mathbf{v}^{u},\\vec{\\mathbf{v}}^{u})$ ; ", "page_idx": 20}, {"type": "text", "text": "Algorithm 6: Geometric vector gate (GVGate) ", "page_idx": 20}, {"type": "text", "text": "Input: Scalar and vector features $(\\mathbf{v},{\\vec{\\mathbf{v}}})$   \nOutput: Updated scalar and vector features $(\\mathbf{v}^{u},\\vec{\\mathbf{v}}^{u})$   \nFunction GVGate $(\\mathbf{v}_{p},\\mathbf{v}_{q},\\vec{\\mathbf{v}}_{p},\\vec{\\mathbf{v}}_{q})$ : $\\mathbf{v}_{c}\\gets$ concat $\\left(\\mathbf{v}_{p},\\mathbf{v}_{q},\\mathbf{v}_{p}-\\mathbf{v}_{q}\\right)$ $\\vec{\\bf v}_{c}\\gets$ concat $(\\vec{\\mathbf{v}}_{p},\\vec{\\mathbf{v}}_{q},\\vec{\\mathbf{v}}_{p}-\\vec{\\mathbf{v}}_{q})$ $\\mathbf{v}_{g},\\vec{\\mathbf{v}}_{g}\\gets\\mathrm{GVL}\\left(\\mathbf{v}_{c},\\vec{\\mathbf{v}}_{c}\\right)$ ; $\\mathbf{g}_{s}\\leftarrow$ sigmoid $\\left(\\mathbf{v}_{g}\\right)$ ; $\\mathbf{g}_{v}\\gets$ sigmoid $\\left(||\\vec{\\mathbf{v}}_{g}||_{2}\\right)$ ; $\\mathbf{v}^{u}\\leftarrow\\mathbf{g}_{s}\\odot\\mathbf{v}_{p}+\\left(1-\\mathbf{g}_{s}\\right)\\odot\\mathbf{v}_{q};$ $\\vec{\\bf v}^{u}\\leftarrow{\\bf g}_{v}\\odot\\vec{\\bf v}_{p}+(1-{\\bf g}_{v})\\odot\\vec{\\bf v}_{q};$ ; return $(\\mathbf{v}^{u},\\vec{\\mathbf{v}}^{u})$ ", "page_idx": 20}, {"type": "text", "text": "E Limitations and Broader Impact ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "One limitation of FlexSBDD is that it only considers small molecule design. Recently, other drug modalities such as antibodies, peptides, and nucleic acids have played critical roles in drug discoveries and bio-engineering. We would like to build a generalized version of FlexSBDD for other drug modalities. Another limitation is the limited dataset size, which restricts the scaling of the proposed models. In the future, we may benefit from the generated protein-ligand interaction data from generative AI models e.g., AlphaFold 3 [1] and RoseTTAFold All-Atom [44]. ", "page_idx": 20}, {"type": "text", "text": "As for the broader impacts, there are many potential applications of our work, e.g., discovering cryptic pockets and generating drugs to cure various diseases. We acknowledge the necessity for regulatory oversight of our Structure-Based Drug Design (SBDD) technique to prevent the creation of harmful molecules. Overall, we believe the positive influence of our work outweighs the potential negative impacts. ", "page_idx": 20}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: In the abstract and introduction, we clearly state the contributions of our paper. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 21}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Justification: In Appendix.E, we clearly describe the limitations of the work and the potential ways to reduce the limitations in future works. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 21}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 22}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: The code will be included in https://github.com/zaixizhang/ FlexSBDD. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 22}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: We clearly discussed the training datasets and other details. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 23}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 23}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 23}, {"type": "text", "text": "Justification: The paper specify all the training and test details. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 23}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 23}, {"type": "text", "text": "Answer: [No] ", "page_idx": 23}, {"type": "text", "text": "Justification: We followed previous works and did not report the error bars. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 24}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: The paper provides sufficient information on the computer resources. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 24}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: The research in this paper conforms in every respect with the NeurIPS Code of Ethics. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 24}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 24}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 24}, {"type": "text", "text": "Justification: The paper discussed potential societal impacts. ", "page_idx": 24}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 25}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 25}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: The existing assets are properly cited and credited. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 25}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 26}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 26}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 26}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 26}]