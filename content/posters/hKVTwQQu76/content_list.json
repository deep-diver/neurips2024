[{"type": "text", "text": "DFA-GNN: Forward Learning of Graph Neural Networks by Direct Feedback Alignment ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Gongpei Zhao1,2, Tao Wang1,2,\u2217 Congyan Lang1,2, Yi $\\mathbf{Jin}^{1,2}$ , Yidong $\\mathbf{Li}^{1,2}$ , Haibin Ling3 1Key Laboratory of Big Data & Artificial Intelligence in Transportation, Ministry of Education, China 2School of Computer Science & Technology, Beijing Jiaotong University, China 3Department of Computer Science, Stony Brook University, USA {csgpzhao, twang, cylang, yjin, ydli}@bjtu.edu.cn hling@cs.stonybrook.edu ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Graph neural networks (GNNs) are recognized for their strong performance across various applications, with the backpropagation (BP) algorithm playing a central role in the development of most GNN models. However, despite its effectiveness, BP has limitations that challenge its biological plausibility and affect the efficiency, scalability and parallelism of training neural networks for graph-based tasks. While several non-backpropagation (non-BP) training algorithms, such as the direct feedback alignment (DFA), have been successfully applied to fully-connected and convolutional network components for handling Euclidean data, directly adapting these non-BP frameworks to manage non-Euclidean graph data in GNN models presents significant challenges. These challenges primarily arise from the violation of the independent and identically distributed (i.i.d.) assumption in graph data and the difficulty in accessing prediction errors for all samples (nodes) within the graph. To overcome these obstacles, in this paper we propose DFA-GNN, a novel forward learning framework tailored for GNNs with a case study of semi-supervised learning. The proposed method breaks the limitations of BP by using a dedicated forward training mechanism. Specifically, DFA-GNN extends the principles of DFA to adapt to graph data and unique architecture of GNNs, which incorporates the information of graph topology into the feedback links to accommodate the non-Euclidean characteristics of graph data. Additionally, for semi-supervised graph learning tasks, we developed a pseudo error generator that spreads residual errors from training data to create a pseudo error for each unlabeled node. These pseudo errors are then utilized to train GNNs using DFA. Extensive experiments on 10 public benchmarks reveal that our learning framework outperforms not only previous non-BP methods but also the standard BP methods, and it exhibits excellent robustness against various types of noise and attacks. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "As a class of neural networks (NNs) specifically designed to process and learn from graph data, graph neural networks (GNNs) [Zhou et al., 2020, Wu et al., 2020] have gained significant popularity in addressing graph analytical challenges. They have demonstrated outstanding success in various applications, including recommendation systems [Wu et al., 2022], drug discovery [Xiong et al., 2021] and question answering [Yasunaga et al., 2021]. The impressive accomplishments of GNNs, as well as other neural network models, are largely attributed to the backpropagation (BP) algorithm [HechtNielsen, 1992], which has emerged as the standard technique for training deep neural networks. ", "page_idx": 0}, {"type": "image", "img_path": "hKVTwQQu76/tmp/3f4eb134e9ee78b5d7e3c4f43e89932e3d45e16b9d63fb1c294fcc36375af7ef.jpg", "img_caption": ["Figure 1: Illustrations of BP, FF, FORWARDGNN and proposed DFA-GNN. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "The backpropagation algorithm adjusts neural network weights based on the loss between the prediction and the ground truth, and allows the network to learn and improve over time. However, despite its effectiveness, BP draws concerns on its biological plausibility for two main reasons [Hinton, 2022, Lillicrap et al., 2016]: (1) it uses the same weights in reverse order for both feedforward and feedback paths, creating the weight symmetry problem [Lillicrap et al., 2016]; and (2) its parameter updating relies on the activity of all downstream layers, leading to the update locking problem [Dellaferrera and Kreiman, 2022]. These limitations may as well impact the efficiency, scalability and parallel processing capabilities of neural network training. ", "page_idx": 1}, {"type": "text", "text": "To address these limitations, direct feedback alignment (DFA) [N\u00f8kland, 2016] offers an effective alternative to BP by training neural networks through a single forward pass. DFA uses fixed random feedback connections to project output errors directly onto hidden neurons, allowing for parallel gradient computation and eliminating the need for sequential backward error propagation. While demonstrated a limited accuracy penalty compared with BP, DFA aligns with brain-like learning mechanisms through its use of global error modulation and local synaptic activity, making it a notable non-BP method applicable in areas such as image classification [Zhao et al., 2023] and privacy protection [Ohana et al., 2021]. ", "page_idx": 1}, {"type": "text", "text": "Directly applying DFA to GNNs, however, faces two challenges: (1) graph data often violates the independent and identically distributed (i.i.d.) assumption and thus ties the supervision gradients with the graph structure, making the straightforward error projection of DFA inadequate; and (2) DFA requires the prediction errors of all the input samples, while for graph data, especially under the semi-supervised setting, samples (nodes) without ground truth meet problems for the error calculation, complicating the deployment of DFA to GNNs. ", "page_idx": 1}, {"type": "text", "text": "To tackle these challenges, in this paper we propose DFA-GNN, a non-BP learning framework tailored for graph neural networks. Our primary contribution is to improve and extend DFA to graph neural networks. Specifically, we redesign the random feedback strategy for graph data to make the DFA portable to GNNs. The information from the graph topology, in the form of an adjacency matrix, is incorporated into the feedback links to accommodate the non-Euclidean characteristics of graph data. We take graph convolutional network (GCN) [Kipf and Welling, 2016] as a case study, and derive the specific formula for updating parameters in each GCN layer. Furthermore, for the semi-supervised graph learning task, we develop a novel pseudo error generator that spreads residual errors from training data to generate a pseudo error for each unlabeled node. Such pseudo errors are then used for the training of graph neural networks by DFA. ", "page_idx": 1}, {"type": "text", "text": "In summary, our proposed learning procedure for GNNs contributes in three significant folds: ", "page_idx": 1}, {"type": "text", "text": "\u2022 We introduce DFA-GNN, a non-BP training algorithm that extends DFA to GNN architectures. It offers a more biologically plausible alternative to traditional BP methods. \u2022 For semi-supervised graph learning tasks, we develop a novel pseudo error generator that propagates residual errors from the training data to create pseudo errors for unlabeled nodes. ", "page_idx": 1}, {"type": "text", "text": "\u2022 We prove the convergence of our DFA-GNN, and validate its effectiveness on 10 benchmarks. The experimental results demonstrate the superiority of our DFA-GNN against both traditional BP and the state-of-the-art non-BP approaches. ", "page_idx": 2}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "The biological implausibility of BP mainly lies in weight transport and update locking issues. feedback alignment (FA) [Lillicrap et al., 2016] addresses the weight transport by using fixed random weights to convey error gradients. Building on this, direct feedback alignment (DFA) [N\u00f8kland, 2016], direct random target projection (DRTP) [Frenkel et al., 2021] and PEPITA [Dellaferrera and Kreiman, 2022] further tackle the update locking problem with non-BP update methods. Prompted by the recent critiques of Hinton [2022], the forward-forward (FF) algorithm emerges as a more neurophysiologically aligned alternative, using dual forward passes with positive and negative data to simplify the training process and accommodate non-differentiable elements. The recently proposed cascaded forward algorithm (CaFo) [Zhao et al., 2023] attaches a class predictor to each layer, where only the layer-wise predictors are locally trained, with each neural block being randomly initialized and remaining fixed throughout. ", "page_idx": 2}, {"type": "text", "text": "Our work aims to push the frontier of the non-BP training algorithm for GNNs, which is a field still in its infancy. A remarkable recent work along the line is FORWARDGNN [Park et al., 2023] inspired by the forward-forward algorithm. FORWARDGNN avoids the constraints imposed by BP via an effective layer-wise local forward training. It trains GNNs using a single forward pass with the assistant of a data augmentation strategy. The augmented graph structure integrates virtual nodes linked only to labeled nodes, leaving the local topology of unlabeled nodes unchanged. The augmentation strategy makes it possible to operate without generating negative inputs. Despite of its advantages, FORWARDGNN still suffers from the greed-based training strategy, and thus results in inferiority in prediction performance in comparison with traditional BP algorithm. ", "page_idx": 2}, {"type": "text", "text": "In contrast, our method does not necessitate data augmentation for graph data; instead, it directly utilizes the discrepancy between predictions and actual ground truth to update each layer. Our approach directly outputs the prediction of the multi-class distribution, eliminating the need to calculate the goodness between unlabeled nodes and virtual nodes. As a result, our method offers convenience for multi-class prediction tasks and gains improvements in prediction performance. ", "page_idx": 2}, {"type": "text", "text": "3 Preliminaries ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "3.1 Problem Definition ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "An attributed relational graph of $n$ nodes can be represented by $G\\;=\\;(\\mathcal{V},\\mathcal{E},\\mathbf{X})$ , where $\\nu\\,=$ $\\{v_{1},v_{2},\\cdot\\cdot\\cdot\\,,v_{n}\\}$ represents the set of $n$ nodes, and $\\mathcal{E}\\;=\\;\\{e_{i j}\\}$ signifies the set of edges. $\\textbf{X}=$ $\\{\\mathbf{x}_{1}^{\\mathrm{T}};\\mathbf{x}_{2}^{\\mathrm{T}};\\cdot\\cdot\\cdot\\mathbf{\\mu};\\mathbf{x}_{n}^{\\mathrm{T}}\\}\\in\\mathbb{R}^{n\\times d}$ is the attribute set for all nodes, with $\\mathbf{X}_{i}$ being the $d$ -dimensional attribute vector for node $v_{i}$ . The adjacency matrix $\\mathbf{A}=\\{a_{i j}\\}\\in\\mathbb{R}^{n\\times n}$ denotes the topological structure of graph $G$ , where $a_{i j}>0$ if there exists an edge $e_{i j}$ between nodes $v_{i}$ and $v_{j}$ and $a_{i j}=0$ otherwise. ", "page_idx": 2}, {"type": "text", "text": "For semi-supervised node classification, the node set $\\nu$ can be split into a labeled node set $\\mathcal{V}_{L}\\subset\\mathcal{V}$ with attributes $\\mathbf{X}_{L}\\subset\\mathbf{X}$ and an unlabeled one $\\mathcal{V}_{U}=\\mathcal{V}/\\mathcal{V}_{L}$ with attributes ${\\bf X}_{U}={\\bf X}/{\\bf X}_{L}$ .2 We assume that each node belongs to exactly one class, and denote ${\\bf y}_{L}=\\{y_{i}\\}$ as the ground-truth labels of node set $\\mathcal{V}_{L}$ where $y_{i}$ denotes the class label of node $v_{i}\\in\\mathcal{V}_{L}$ . ", "page_idx": 2}, {"type": "text", "text": "The objective of semi-supervised node classification is to train a classifier using the graph and the known labels $\\mathbf{y}_{L}$ , and then apply this classifier to predict the labels for the unlabeled nodes $\\mathbf{v}_{U}$ . Define a classifier $f_{\\theta}\\;:\\;(\\tilde{\\mathbf{y}}_{L},\\bar{\\tilde{\\mathbf{y}}_{U}})\\;\\leftarrow\\;f_{\\theta}(\\mathbf{X},\\mathbf{A},\\mathbf{y}_{L})$ , where $\\theta$ is the parameters of model. $\\tilde{\\bf y}_{L}$ and $\\tilde{\\mathbf{y}}_{U}$ are the predicted labels of nodes $\\mathbf{v}_{L}$ and $\\mathbf{v}_{U}$ respectively. Generally, the goal is to make the predicted labels $\\tilde{\\bf y}_{L}$ align as closely as possible with the actual ground-truth labels $\\mathbf{y}_{L}$ in favor of: $\\begin{array}{r}{\\theta^{*}=\\arg\\operatorname*{min}_{\\theta}d(\\tilde{\\mathbf{y}}_{L}^{*},\\mathbf{y}_{L}^{})=\\arg\\operatorname*{min}_{\\theta}d\\big(f_{\\theta}(\\mathbf{X},\\mathbf{A},\\mathbf{y}_{L}),\\mathbf{y}_{L}\\big)}\\end{array}$ , where $d(\\cdot,\\cdot)$ represents a measure of some type of distance between two sets of labels. ", "page_idx": 2}, {"type": "text", "text": "3.2 Direct Feedback Alignment ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "While BP relies on symmetric weights for error propagation to hidden layers, there is evidence suggesting that symmetrical weight distribution may not be crucial for learning. For example, the study of feedback alignment (FA) shows that learning can still occur when errors are back propagated using randomly fixed weights. Direct feedback alignment (DFA) advances in this direction by directly transmitting output errors to each hidden layer through fixed linear feedback links. Specifically, for an $L$ layer network, feedback matrices $\\mathbf{B}^{(l)}\\,\\in\\,\\mathbb{R}^{n_{L}\\times n_{l}}$ are employed to replace the derivatives $\\partial\\mathbf{x}^{(L)}/\\partial\\mathbf{\\dot{x}}^{(l)}$ of output neurons with respect to hidden neurons in the $l_{\\cdot}$ -th layer. The approximate gradient $\\delta\\mathbf{W}^{(l)}$ for the weights of the $l$ -th hidden layer is then computed as: $\\begin{array}{r}{\\delta\\mathbf{\\dot{W}}^{(l)}=\\frac{\\partial\\mathbf{\\bar{\\mathcal{L}}}}{\\partial\\mathbf{x}^{(L)}}\\mathbf{B}^{(l+1)}\\frac{\\partial\\mathbf{x}^{(\\bar{l}+1)}}{\\partial\\mathbf{W}^{(l)}}}\\end{array}$ ) \u2202\u2202x(Wl(+l1)) , where x(l) represents the latent representation of a sample at the l-th layer, and $\\mathcal{L}$ the loss value. In DFA, the feedback matrices assigned to hidden layers are randomly selected and remain unchanged throughout the training process. The effectiveness of DFA hinges on the alignment between forward weights and feedback matrices, leading to a congruence between the estimated and the actual gradient. When the angle between these gradients remains below 90 degrees, the update direction points to a downward trajectory. DFA has been successfully implemented in popular deep learning architectures such as fully-connected neural network (FC) [Zhang et al., 2017] and convolutional neural network (CNN) [Li et al., 2021a]. However, extending DFA to graph neural networks remains unexplored. ", "page_idx": 3}, {"type": "text", "text": "4 Proposed DFA-GNN ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "As depicted in Fig. 1, our DFA-GNN aims to train GNN models in non-BP framework by extending the DFA algorithm. Different from the original DFA algorithm designed on FC for Euclidean data, two key issues should be solved when extending it to GNN for graph data: (1) the original random feedback operations need to be reformulated to handle the dependence between samples (nodes); and (2) high-quality pseudo errors for test samples are required as they are not isolated from the training procedure. To this end, in Sec. 4.1 we redesign the random feedback strategy specified for graph data, and in Sec. 4.2 we develop a novel pseudo error generator for semi-supervised graph learning tasks. Finally, we provide deep insight of our DFA-GCN about its convergence and optimization in Sec. 4.3. ", "page_idx": 3}, {"type": "text", "text": "4.1 Generalizing DFA to GNN ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "The training process of traditional BP for GNN is listed in Algo. 1 of Appx. A.1, and it uses both a forward propagation and a backward one in each epoch. Generally, different GNN models may differ in the operations of aggregation and combination, and we provide a typical implementation in Algo. 1. We take graph convolutional network (GCN) [Kipf and Welling, 2016], one of the most classic and successful GNN models, as a case study to integrate DFA for graph learning. ", "page_idx": 3}, {"type": "text", "text": "For illustrative purpose, we consider a three-layer GCN model with ReLU for hidden activation and sigmoid for output activation. The forward propagation process could be written as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{\\mathbf{Layer\\mathbf{1}}:\\mathbf{H}^{(0)}=\\mathbf{S}\\mathbf{X}^{(0)},\\;}&{\\mathbf{X}^{(1)}=\\mathrm{relu}(\\mathbf{H}^{(0)}\\mathbf{W}^{(0)}),}\\\\ {\\mathbf{Layer\\mathbf{2}}:\\mathbf{H}^{(1)}=\\mathbf{S}\\mathbf{X}^{(1)},\\;}&{\\mathbf{X}^{(2)}=\\mathrm{relu}(\\mathbf{H}^{(1)}\\mathbf{W}^{(1)}),}\\\\ {\\mathbf{Output\\;layer}:\\mathbf{H}^{(2)}=\\mathbf{S}\\mathbf{X}^{(2)},\\;}&{\\mathbf{X}^{(3)}=\\mathbf{H}^{(2)}\\mathbf{W}^{(2)},\\quad\\tilde{\\mathbf{Y}}=\\mathrm{sigmoid}(\\mathbf{X}^{(3)}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathbf{S}\\,=\\,\\tilde{\\mathbf{D}}^{-\\frac{1}{2}}\\tilde{\\mathbf{A}}\\tilde{\\mathbf{D}}^{-\\frac{1}{2}}$ , $\\tilde{\\mathbf{A}}\\,=\\,\\mathbf{A}+\\mathbf{I}$ is the adjacency matrix of graph $G$ after adding self loop. $\\tilde{\\mathbf{D}}=\\mathrm{diag}(\\tilde{\\mathbf{A}})$ the diagonal matrix of $\\tilde{\\mathbf A}$ , $\\mathbf{W}^{(l-1)}$ a trainable weight matrix of the $l$ -th layer and $\\sigma$ a non-linear activation function. $\\mathbf{X}^{(l)}\\in\\mathbb{R}^{n\\times d}$ denotes the latent representation matrix of the $l$ -th layer and $\\mathbf{X}^{(0)}=\\mathbf{X}$ . If we choose sigmoid activation function in the output layer and a binary cross-entropy (BCE) loss function, the loss $J$ for a graph with $n$ nodes and the gradient $\\mathbf{E}$ at the output layer are calculated as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r c l}{{{\\cal J}}}&{{=}}&{{\\displaystyle-\\frac{1}{N}\\sum_{m,k}{\\bf Y}_{m,k}\\log{\\tilde{\\bf Y}}_{m,k}+(1-{\\bf Y}_{m,k})\\log(1-{\\tilde{\\bf Y}}_{m,k}),}}\\\\ {{}}&{{}}&{{}}\\\\ {{{\\bf E}}}&{{=}}&{{\\delta{\\bf X}^{(3)}=\\displaystyle\\frac{\\partial{\\cal J}}{\\partial{\\bf X}^{(3)}}={\\tilde{\\bf Y}}-{\\bf Y},}}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\tilde{\\mathbf Y}$ and $\\mathbf{Y}\\in\\mathbb{R}^{n\\times c}$ are respectively prediction and one-hot ground truth; $m$ and $k$ are respectively sample index and output unit. It is important to highlight that $\\mathbf{E}$ represents the exact error between the prediction and the ground truth. For GCN, the gradients for hidden layers are calculated according to Algo. 1 as: $\\delta{\\bf X}^{(2)}={\\bf S}^{\\mathsf{T}}\\delta{\\bf H}^{(2)}={\\bf S}^{\\mathsf{T}}{\\bf E}{\\bf W}^{(2)\\mathrm{T}},\\delta{\\bar{\\bf X}}^{(1)}={\\bf S}^{\\mathsf{T}}\\delta{\\bf H}^{(1)}={\\bf S}^{\\mathsf{T}}\\delta{\\bf X}^{(2)}{\\bf W}^{(1)\\mathrm{T}},$ . ", "page_idx": 4}, {"type": "text", "text": "As demonstrated by the work of FF [Lillicrap et al., 2016] and DFA [N\u00f8kland, 2016], learning can be effective when errors are back propagated using randomly fixed weights. Similarly, we establish parallel direct feedback links for each layer. We approximate the update directions for the hidden layers as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\delta{\\bf X}^{(2)}={\\bf S}^{\\mathrm{T}}{\\bf E}{\\bf B}^{(2)},\\quad\\delta{\\bf X}^{(1)}={\\bf S}^{\\mathrm{T}}\\delta{\\bf H}^{(1)}={\\bf S}^{\\mathrm{T}}\\delta{\\bf X}^{(2)}{\\bf B}^{(1)},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\mathbf{B}^{(i)}$ is a fixed random weight matrix with appropriate dimension. $\\delta\\mathbf{X}^{(1)}$ can be then written as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\delta{\\pmb X}^{(1)}={\\bf S}^{\\mathrm{T}}\\delta{\\pmb X}^{(2)}{\\pmb B}^{(1)}={\\bf S}^{\\mathrm{T}}({\\bf S}^{\\mathrm{T}}{\\bf E}{\\pmb B}^{(2)}){\\pmb B}^{(1)}=({\\bf S}^{\\mathrm{T}})^{2}{\\pmb E}{\\bf B}^{(1)},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "and the weight updates for all layers are calculated as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\delta{\\bf W}^{(0)}={\\bf H}^{(0)\\mathrm{T}}\\delta{\\bf X}^{(1)},\\quad\\delta{\\bf W}^{(1)}={\\bf H}^{(1)\\mathrm{T}}\\delta{\\bf X}^{(2)},\\quad\\delta{\\bf W}^{(2)}={\\bf H}^{(2)\\mathrm{T}}{\\bf E}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The above derivations can be easily extended to GCNs with more layers, as done in our experiments. ", "page_idx": 4}, {"type": "text", "text": "4.2 Pseudo Error Generator by Spreading Residual Errors ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In the computation of gradient (Eq. 6), the labels of all nodes are required, but not all nodes are labeled in the semi-supervised learning task. To address this issue, we introduce a mechanism to generate errors, assigning a pseudo error to each unlabeled node. The underlying principle is the expectation that errors in initial predictions are likely to propagate along the graph edges. That is, an error at a given node $v$ suggests a higher likelihood of similar errors to its the neighbor nodes. This concept of error propagation across the graph is supported by previous studies [Jia and Benson, 2020]. Our approach draws inspiration from the strategy of residual propagation used in node regression tasks, and more broadly, from the frameworks of generalized least squares and correlated error models [Shalizi, 2013]. ", "page_idx": 4}, {"type": "text", "text": "In semi-supervised graph learning, the error matrix $\\mathbf{E}=\\{\\mathbf{e}_{1}^{\\mathrm{T}};\\mathbf{e}_{2}^{\\mathrm{T}};\\cdot\\cdot\\cdot\\cdot;\\mathbf{e}_{n}^{\\mathrm{T}}\\}\\in\\mathbb{R}^{n\\times c}$ as described in Eq. 3 is modified as the residual on the training nodes, while being set to zero for all other nodes. This adjustment entails initializing ${\\bf e}_{i}$ as a zero vector for all nodes $v_{i}\\in\\mathcal{V}_{U}$ . ", "page_idx": 4}, {"type": "text", "text": "The residuals in the rows of $\\mathbf{E}$ for the training nodes are zero only when the forward process achieves perfect predictions. We utilize the label spreading technique [Zhou et al., 2003] to smooth the error with the goal of optimizing the following objective: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{Z}^{*}=\\arg\\operatorname*{min}_{\\mathbf{Z}\\in\\mathbb{R}^{n\\times c}}t r(\\mathbf{Z}^{\\mathrm{T}}(\\mathbf{I}-\\mathbf{S})\\mathbf{Z})+\\mu\\|\\mathbf{Z}-\\mathbf{E}\\|_{F}^{2},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $t r(\\cdot)$ denotes the trace of a matrix. The first term enhances the smoothness of the error estimation throughout the graph, while the second term ensures that the final solution stays consistent with the initial error estimate $\\mathbf{E}$ . Following the optimization methodology in Zhou et al. [2003] and Huang et al. [2021], the solution to Eq. 7 can be obtained through iterative processing ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{Z}^{(t+1)}=(1-\\alpha)\\mathbf{E}+\\alpha\\mathbf{S}\\mathbf{Z}^{(t)},\\quad\\alpha=\\frac{1}{1+\\mu},\\quad\\mathbf{Z}^{(0)}=\\mathbf{E}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "This process represents the diffusion of error, and such propagation is demonstrably appropriate within the context of regression problems under a Gaussian assumption. Nevertheless, for classification tasks like ours, the smoothed error ${\\bf Z}^{\\ast}$ might not align with the correct scale. Typically, $\\|\\mathbf{Z}^{(t+1)}\\|_{2}\\leq$ $(1-\\alpha)\\|\\mathbf{E}\\|_{2}+\\alpha\\|\\mathbf{S}\\|_{2}\\|\\mathbf{E}^{(t)}\\|_{2}=(1-\\alpha)\\|\\mathbf{E}\\|_{2}+\\alpha\\|\\mathbf{Z}^{(t)}\\|_{2}$ . Starting with ${\\bf Z}^{(0)}={\\bf E}$ , we find that $\\|\\mathbf{Z}^{(t)}\\|_{2}\\leq\\|\\mathbf{E}\\|_{2}$ , indicating a need to adjust the scale of residuals adaptively. The aim is to match the magnitude of error in ${\\bf Z}^{\\ast}$ to that in $\\mathbf{E}$ as closely as possible. Given that we only have accurate error information for labeled nodes, we use the average error across these nodes to estimate the appropriate scale. Specifically, with $\\mathbf{e}_{i},\\mathbf{z}_{i}^{*}\\in\\mathbb{R}^{c}$ representing the $i$ -th row of $\\mathbf{E}$ and ${\\bf Z}^{\\ast}$ respectively, the adjusted error for an unlabeled node $j$ is calculated as: $\\hat{\\mathbf{e}}_{j}=\\eta/\\lVert\\mathbf{z}_{j}^{*}\\rVert_{1}\\cdot\\mathbf{z}_{j}^{*}$ , in which $\\begin{array}{r}{\\eta=\\frac{1}{|\\mathcal{V}_{L}|}\\sum_{v_{i}\\in\\mathcal{V}_{L}}{\\|\\mathbf{e}_{i}\\|_{1}}}\\end{array}$ . ", "page_idx": 4}, {"type": "text", "text": "Give the rescaled pseudo error \u02c6e for each unlabeled node, we define $\\hat{\\mathbf{E}}\\in\\mathbb{R}^{n\\times c}$ , where the $i$ -th row is set to $\\mathbf{e}_{i}^{\\mathrm{{T}}}$ for nodes $v_{i}\\in\\mathcal{V}_{L}$ and to $\\hat{\\mathbf{e}}_{i}^{\\mathrm{{T}}}$ for other nodes. The matrix $\\hat{\\bf E}$ can then be directly utilized in Eqs. 5 and 6 for GCN training. Nevertheless, not all rescaled error of unlabeled nodes are accurate and useful. To address this, a mask is implemented to filter out these nodes. Define $\\hat{\\mathbf{Y}}=\\tilde{\\mathbf{Y}}-\\hat{\\mathbf{E}}$ as the corrected prediction. For labeled nodes, this corrected prediction equals to the one-hot ground truth. We introduce a mask vector $\\mathbf{p}\\in\\mathbb{R}^{n}$ to facilitate this process. Formally, the setup is as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\np_{i}=\\binom{1,\\quad\\mathrm{if}\\,\\,\\mathrm{count}(\\hat{\\mathbf{y}}_{i}>\\epsilon)=1,}{0,\\quad\\mathrm{otherwise},}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $p_{i}$ is the $i$ -th element $1\\leq i\\leq n)$ ) of the vector $\\mathbf{p}$ , $\\epsilon$ a manually set threshold for controlling flitering and $\\operatorname{count}(\\cdot)$ a counting function. Eq. 9 focuses on retaining only those well predicted nodes, characterized by a single category being identified as positive and the rest as negative. With the mask, the flitering operations could be performed on $\\hat{\\bf E}$ and $\\mathbf{S}$ by row through the mask. The weight updates in Eq. 6 are modified as: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\delta\\mathbf{W}^{(0)}=\\mathbf{H}^{(0)\\mathrm{T}}\\mathbf{S}_{f}^{(2)\\mathrm{T}}\\hat{\\mathbf{E}}_{f}\\mathbf{B}^{(1)},\\quad\\delta\\mathbf{W}^{(1)}=\\mathbf{H}^{(1)\\mathrm{T}}\\mathbf{S}_{f}^{(1)\\mathrm{T}}\\hat{\\mathbf{E}}_{f}\\mathbf{B}^{(2)},\\quad\\delta\\mathbf{W}^{(2)}=\\mathbf{H}_{f}^{(2)\\mathrm{T}}\\hat{\\mathbf{E}}_{f},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where ${\\bf S}_{f}^{(k)},\\hat{\\bf E}_{f},{\\bf H}_{f}^{(k)}$ represent the row flitering of $\\mathbf{S}^{k}$ , $\\hat{\\bf E}$ and $\\mathbf{H}^{(k)}$ respectively, according to the mask $\\mathbf{p}$ . As $(\\mathbf{S}^{\\mathrm{T}})^{k}\\hat{\\mathbf{E}}$ exactly denotes the accumulation of errors related to the $k$ -hop neighbors of each node, the difference between Eq. 6 and Eq. 10 lies in the partial sampling of neighbors to approximate the update directions, as compared with using all neighbors. Given that only poorly predicted nodes are excluded and they constitute a small fraction, the update directions in both approaches generally remain aligned. The formal description of our algorithm is provided in Appx. A.2. ", "page_idx": 5}, {"type": "text", "text": "4.3 Insights of DFA-GNN ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "DFA-GNN provides a non-BP training procedure for GNN. For GCN we provide a detailed analysis on how such an asymmetric feedback path introduced in Sec. 4.1 can provide learning by aligning the gradients of backward propagation and forward propagation with its own. N\u00f8kland [2016] has originally proved the conclusion for fully-connected layer architectures. We can show that this conclusion is equally valid for the GCN architecture, and provide the detailed proof in Appx. A.3. ", "page_idx": 5}, {"type": "text", "text": "Experiments in Fig. 2(a) validate the dynamic process of alignment between $\\mathbf{B}$ and $\\mathbf{W}$ during training, and the weight alignment leads to gradient alignment because for weight alignment of DFA: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathbf{W}^{(0<l<L)}\\propto\\mathbf{B}^{(l)\\mathrm{T}}\\mathbf{B}^{(l+1)},\\;\\;\\mathbf{W}^{(L)}\\propto\\mathbf{B}^{(L)\\mathrm{T}},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where the symbol $\\propto$ represents a positive scalar multiple relationship. As gradient alignment requires \u03b4X(DlF)A $\\delta\\mathbf{X}_{\\mathrm{DFA}}^{(l)}\\ \\propto\\ \\delta\\mathbf{X}_{\\mathrm{BP}}^{(l)}$ , i.e., $(\\mathbf{S}^{\\mathrm{T}})^{L-l}\\mathbf{EB}^{(l)}\\;\\propto\\;\\mathbf{S}^{\\mathrm{T}}\\delta\\mathbf{X}^{(l+1)}\\mathbf{W}^{(l)\\mathrm{T}}$ , the weight alignmen t directly implies gradient alignment if the feedback matrices are assumed right-orthogonal, i.e., . This assumption holds if the feedback matrices elements are sampled i.i.d. from a Gaussian distribution since $\\mathbb{E}[\\mathbf{B}\\mathbf{B}^{\\mathrm{T}}]\\propto\\mathbf{I}$ , hence Eq. 11 induces the weights, by the orthogonality condition, to cancel out by pairs of two: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{S}^{\\mathsf{T}}\\delta\\mathbf{X}^{(l+1)}\\mathbf{W}^{(l)\\mathrm{T}}\\propto(\\mathbf{S}^{\\mathsf{T}})^{L-l}\\mathbf{E}\\mathbf{B}^{(L)}\\mathbf{B}^{(L)\\mathrm{T}}\\cdot\\cdot\\mathbf{\\Delta}\\mathbf{B}^{(l+1)\\mathrm{T}}\\mathbf{B}^{(l)}=(\\mathbf{S}^{\\mathsf{T}})^{L-l}\\mathbf{E}\\mathbf{B}^{(l)}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "The alignments of weights and gradients make our method trained with DFA tend to converge to a specific region within the landscape, guided by the structure of the feedback matrices, while the optimization paths trained with BP according to stochastic gradient descent often exhibit divergent within the loss landscape, as shown in Fig. 2 (d). ", "page_idx": 5}, {"type": "text", "text": "For deeper understanding of the training mechanism in our method, we divide the entire training process into three stages: Stage 1 (train layers 1 and 2 while freezing layer 3), Stage 2 (freeze layers 1 and 2 while training layer 3) and Stage 3 (train layers 1 and 2 while freezing layer 3). The results in Figs. 2(b,c) show a strong correlation between weight alignment and the fitting degree of the model, as indicated by the loss. Notably, even though our method updates parameters of each layer in parallel, the effective update follows a backward-to-forward manner. As shown in Fig. 2 (b), when the parameters of layer $l$ are not effectively learned, updating the preceding layers does not enhance fitting ability of the model. This behavior contrasts with the characteristics of traditional BP, which indicates that the alignment of weights and gradients also adhere to a backward-to-forward sequence. ", "page_idx": 5}, {"type": "image", "img_path": "hKVTwQQu76/tmp/62d2372b9bb321361c3bd1c2ea264d09012ce67246fd0fc7561b88e0de718084.jpg", "img_caption": ["Figure 2: For a three-layer GCN model trained by DFA-GNN on Cora, (a) the accuracy and angle between W and B; (b) the change in loss across different stages; (c) the change in angle between W and $\\mathbf{B}$ across different stages; (d) difference in optimization direction between BP and our method. "], "img_footnote": [], "page_idx": 6}, {"type": "table", "img_path": "hKVTwQQu76/tmp/f1f240ec866f0e56eeffc581f51124d2cfa8d27a365a3b59b94a41998846a698.jpg", "table_caption": ["Table 1: Results on datasets: mean accuracy $(\\%)\\pm95\\%$ confidence interval. The best result on each dataset is indicated with bold. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "5.1 Comparison with Baseline Training Algorithms ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We evaluate our method on 10 benchmark datasets across various domains and compare it with the BP [Rumelhart et al., 1986], PEPITA [Dellaferrera and Kreiman, 2022], two versions of the FF (abbr. $\\mathrm{FF+LA}$ , $\\mathrm{FF+VN}$ ) [Hinton, 2022, Park et al., 2023], two versions of the CaFo (abbr. CaFo+MSE, $\\mathrm{CaFo+CE}$ ) [Zhao et al., 2023] and the FORWARDGNN-SF (abbr. SF) [Park et al., 2023]. Detailed datasets and experimental setup information can be found in Appx. A.4 and Appx. A.5, respectively. The comparative analysis of various algorithms on benchmark datasets is summarized in Tab. 1. While the non-BP methods such as PEPITA, CaFo and FF have proven effective for architectures involving fully-connected and convolutional layers with Euclidean data, they exhibit weaker performance with non-Euclidean graph data. This is primarily due to the unique challenges posed by graph data. ", "page_idx": 6}, {"type": "text", "text": "Firstly, in typical fully-connected and convolutional layers, shallow layers capture coarse-grained features while deep layers handle fine-grained features, with these two types of features usually being highly correlated. However, in GNNs, different layers aggregate information from varying neighborhood ranges, resulting in layers that often contain uncorrelated information. Particularly in heterophilic graphs, the information extracted by deep and shallow layers may be entirely unrelated or even have opposing effects on predictions. This lack of correlation complicates the application of layer-wise optimization strategies, which rely on greedy strategies and local loss calculations common in traditional networks. This is a key reason for the underperformance of methods like PEPITA, CaFo and FF in GNNs, as evidenced in Tab. 1, particularly on datasets characterized by low homophily. Secondly, since graph data do not adhere to the i.i.d. assumption, sampling positive and negative samples based on features $\\mathrm{(FF+LA)}$ and topology $\\mathrm{(FF+VN)}$ ) for the FF algorithm can be unreliable, potentially leading to inconsistent results. Notably, $\\mathrm{FF+VN}$ modifies the original graph topology by introducing virtual nodes into both positive and negative graphs, which results in overall unsatisfactory performance in benchmarks. For CaFo, the rigidity in fixing the parameters of each block, with only the predictors being learnable, further constrains its adaptability. As the most recently proposed non-BP GNN training approach, SF shows a performance that is superior to PEPITA, CaFo and FF but still lags behind the traditional BP method on most datasets. The reason lies in that SF also introduces virtual nodes that disrupt graph topology and employs a layer-wise training strategy. By contrast, our method well adapts to graph data and gains significant improvement in testing accuracy in comparison with the baseline algorithms, achieving the best or second-best results across all datasets. ", "page_idx": 6}, {"type": "table", "img_path": "hKVTwQQu76/tmp/367edc32c07dbe5426294ba8b560a38e1622c8b05e4225a30993940efd42dbf4.jpg", "table_caption": ["Table 2: Ablation study results on different datasets with proposed designs. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "The training times for each method are shown in Appx. A.6. Our approach demonstrates a general time advantage over CaFo, FF and SF. Our method includes a forward propagation and a parameter update where all layers execute in parallel during each iteration, which offers greater parallelism compared with layer-wise update methods like CaFo, FF and SF. Our method has a higher training time consumption compared with BP, primarily due to the additional time needed for generating pseudo errors and filtering masks, as discussed in Sec. 4.2. ", "page_idx": 7}, {"type": "text", "text": "5.2 Ablation Study ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We ablate the proposed method to study the importance of designs in DFA-GNN. Two designs are studied including the pseudo error generator (abbr. EG) and the node filter (abbr. NF). For trials with EG, the pseudo error generator is applied according to Eq. 7 to assign a pseudo error for each unlabeled node. It worth noting that when ER is removed from the method, only the errors of labeled nodes are used for the updating of parameters according to Eq. 6. For trials with NF, the mask calculated as Eq. 9 is introduced in training process and the parameters are updated according to Eq. 10. The ablation results are included in Tab. 2. We note that even the most naive version of DFA-GNN elaborated in Sec. 4.1 achieves comparable results in comparison with BP. Furthermore, both the two designs introduced in Sec. 4.2 contribute to our training framework, making significant enhancement to DFA-GNN to outperform BP method. ", "page_idx": 7}, {"type": "text", "text": "5.3 Visualization of Convergence ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "To better illustrate the training convergence of DFA-GNN, we plot the training and validation accuracy of the proposed DFA-GNN and BP over training epochs on three datasets, as shown in Fig. 3. In general, our method shows similar convergence to BP. For both BP and our method, the convergence of validation accuracy occurs much earlier than that of training accuracy due to overfitting. The validation convergent epoch of DFA-GNN is nearly the same as BP on Cora and CiteSeer (around 100 epochs), while it is 100 epochs later than BP on PubMed (around 200 epochs). Our method achieves better validation accuracy on all these datasets and suffers less from overfitting compared with BP. In terms of training accuracy, the convergence of our method is slightly slower than BP because the update direction of our method is not exactly opposite to the gradient direction but maintains a small angle. Since our method considers both the errors of labeled nodes and pseudo errors of unlabeled nodes as supervision information, which is different from BP that only uses the loss of labeled nodes ", "page_idx": 7}, {"type": "image", "img_path": "hKVTwQQu76/tmp/f52f6bda56e93b32528a13d65f042c53fcb8f22996b378bfa8bcb9d06c39d845.jpg", "img_caption": ["Figure 3: Visualization of the convergence of BP and our method on Cora, CiteSeer, and PubMed. "], "img_footnote": [], "page_idx": 8}, {"type": "image", "img_path": "hKVTwQQu76/tmp/ceb34761aa28e1e44803ddbf805b2112a236283225cbd097f794dce3c248e09f.jpg", "img_caption": ["Figure 4: (a) Test accuracy with the model layers increasing. (b-d) Test accuracy with the perturbation rate (b: add, c: remove, d: flip) increasing. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "for supervision, the convergent value of training accuracy for our method is slightly lower than BP.   \nHowever, this does not affect our method achieving better validation results. ", "page_idx": 8}, {"type": "text", "text": "5.4 Robustness Analysis ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We focus on over-smoothing and random structural attack, two common sources of perturbation that reduce GNN performance. Over-smoothing [Keriven, 2022] is a problematic issue in GNNs, stemming from the aggregation mechanism within GNNs, which hinders the expansion of GNN models to a large number of layers. We test the robustness of our method against over-smoothing in Fig. 4 (a). Our method demonstrates greater robustness compared with BP, particularly when dealing with architectures that have a large number of layers. This enhanced robustness is due to the fact that the global loss directly contributes to the optimization of each individual layer. SF is less effected by over-smoothing due to its layer-wise optimization with local loss. However, its performance largely depends on shallow layers and the best performance on each dataset is inferior to ours. ", "page_idx": 8}, {"type": "text", "text": "For random structural attack [Li et al., 2021b], three random attack types are implemented on the original graph topology with a perturbation rate $\\lambda$ from 0.2 to 0.8. To better compare the robustness of different methods, we employ a more challenging experimental setup with a sparse supervision pattern, where each class has only 20 labeled nodes. The node split follows Kipf and Welling [2016]. The detailed operating description for attacking type is summarized as follows: (1) add: randomly add $\\lambda|\\mathcal{E}|$ edges to the original graph for a denser topology; (2) remove: randomly remove $\\lambda|\\mathcal{E}|$ edges from the original graph for a sparser topology; and (3) flip: randomly choose $\\lambda|\\mathcal{E}|$ node pairs, and remove the edge if there exists one between the pair, and otherwise add an edge to connect the pair. ", "page_idx": 8}, {"type": "text", "text": "Our method is less sensitive to all types of perturbations as shown in Figs. 4 (b-d), consistently outperforms two approaches on each trial, and exhibits exciting robustness even under a high perturbation rate. As the pseudo error generator derives pseudo error for each unlabeled node to update each layer, this supervision generation mechanism helps enhance robustness of the model against noise and attacks. Interestingly, a comparison of results across three different types of attacks shows that removing edges has the least adverse effect, suggesting that injecting incorrect topological information could be more detrimental to GNN performance than losing valuable original topology. ", "page_idx": 8}, {"type": "text", "text": "5.5 Scalability on Large Datasets ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Our method is well-suited for large datasets. When the graph scale is large, we can use edge indices instead of an adjacency matrix to store the graph. For forward propagation (Eq. 1), the complexity of neighbor aggregation can be reduced from $O(n^{2}d)$ to ${\\mathcal{O}}(|{\\mathcal{E}}|d)$ , where $\\vert\\mathcal{E}\\vert$ denotes the number of edges. For direct feedback alignment (Eq. 10), as $(\\mathbf{S}^{\\mathrm{T}})^{k}\\hat{\\mathbf{E}}$ is exactly the aggregation of errors for $k$ times, the time and space complexity can be reduced to $\\mathcal{O}(k c|\\mathcal{E}|)$ , without the need to calculate the $k$ -th power of the adjacency matrix. Similarly, complexity reduction can also be achieved in the node filtering process. The experimental results on the Flickr [Zeng et al., 2020], Reddit [Hamilton et al., 2017], and ogbn-arxiv [Hu et al., 2020] datasets, as presented in Tab. 3, demonstrate that our method is effective on large-scale datasets, delivering strong performance. Our method achieves results comparable to BP while surpassing other non-BP methods, all with a small memory footprint (2043 MiB for Flickr, 11675 MiB for Reddit, and 2277 MiB for ogbn-arxiv). This indicates that our method not only scales well to large graphs but also maintains efficiency in terms of space usage. ", "page_idx": 8}, {"type": "table", "img_path": "hKVTwQQu76/tmp/49e9ba4384c9b4834e5a36e76a6c07aa5b0e389662c590cb2cc7ef79efcc353c.jpg", "table_caption": ["Table 3: Results on three large datasets. OOM denotes out of memory. "], "table_footnote": [], "page_idx": 9}, {"type": "table", "img_path": "hKVTwQQu76/tmp/24f13080abadb54319f378c1d3400cfa3ceeaa76d19bee2772db437d0a5d079b.jpg", "table_caption": ["Table 4: Performance of our method integrated with different GNN models. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "5.6 Portability Analysis ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We apply our training algorithm to five popular GNN models [Wu et al., 2019, Velic\u02c7kovic\u00b4 et al., 2018, Hamilton et al., 2017, Gasteiger et al., 2018, Defferrard et al., 2016] and report the mean accuracy across ten random splits in Tab. 4. Each of the testing models is modified to fit our framework. Specifically, for SGC, which only has a single learnable linear output layer, the training of our framework involves no direct feedback but only incorporates the pseudo error generator and node fliter. For GraphSage, we utilize a mean-aggregator for message aggregation. Our observations indicate that our method can be effectively ported to mainstream GNN models. All test models integrated with our algorithm work well and surpass the performance of traditional BP in most scenarios. It demonstrates the effectiveness of our method across various GNN models and underscores its excellent portability and potential generalization ability to other innovative GNN models. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we investigate the potential of non-backpropagation training methods within the context of graph learning. We adapt the direct feedback alignment algorithm for training graph neural networks on graph data and introduce DFA-GNN. This new approach incorporates a meticulously designed random feedback strategy, a pseudo error generator, and a node filter to effectively spread residual errors. Through mathematical formulations, we demonstrate that our method can align with backpropagation in terms of parameter update gradients and perform effective training. Extensive experiments on real-world datasets confirm the effectiveness, efficiency, robustness and versatility of our proposed forward graph learning framework. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work is supported by the National Nature Science Foundation of China (Nos. 62076021 and 62376020). Haibin Ling was not supported by any fund for this work. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "Jie Zhou, Ganqu Cui, Shengding Hu, Zhengyan Zhang, Cheng Yang, Zhiyuan Liu, Lifeng Wang, Changcheng Li, and Maosong Sun. Graph neural networks: A review of methods and applications. AI Open, 1:57\u201381, 2020.   \nZonghan Wu, Shirui Pan, Fengwen Chen, Guodong Long, Chengqi Zhang, and S Yu Philip. A comprehensive survey on graph neural networks. IEEE Transactions on Neural Networks and Learning Systems, 32(1):4\u201324, 2020.   \nShiwen Wu, Fei Sun, Wentao Zhang, Xu Xie, and Bin Cui. Graph neural networks in recommender systems: a survey. ACM Computing Surveys, 55(5):1\u201337, 2022.   \nJiacheng Xiong, Zhaoping Xiong, Kaixian Chen, Hualiang Jiang, and Mingyue Zheng. Graph neural networks for automated de novo drug design. Drug Discovery Today, 26(6):1382\u20131393, 2021.   \nMichihiro Yasunaga, Hongyu Ren, Antoine Bosselut, Percy Liang, and Jure Leskovec. Qa-gnn: Reasoning with language models and knowledge graphs for question answering. arXiv preprint arXiv:2104.06378, 2021.   \nRobert Hecht-Nielsen. Theory of the backpropagation neural network. In Neural Networks for Perception, pages 65\u201393. 1992.   \nGeoffrey Hinton. The forward-forward algorithm: Some preliminary investigations. arXiv preprint arXiv:2212.13345, 2022.   \nTimothy P Lillicrap, Daniel Cownden, Douglas B Tweed, and Colin J Akerman. Random synaptic feedback weights support error backpropagation for deep learning. Nature Communications, 7(1): 13276, 2016.   \nGiorgia Dellaferrera and Gabriel Kreiman. Error-driven input modulation: Solving the credit assignment problem without a backward pass. In International Conference on Machine Learning, pages 4937\u20134955, 2022.   \nArild N\u00f8kland. Direct feedback alignment provides learning in deep neural networks. Advances in Neural Information Processing Systems, 29, 2016.   \nGongpei Zhao, Tao Wang, Yidong Li, Yi Jin, Congyan Lang, and Haibin Ling. The cascaded forward algorithm for neural network training. arXiv preprint arXiv:2303.09728, 2023.   \nRuben Ohana, Hamlet Medina, Julien Launay, Alessandro Cappelli, Iacopo Poli, Liva Ralaivola, and Alain Rakotomamonjy. Photonic differential privacy with direct feedback alignment. Advances in Neural Information Processing Systems, 34:22010\u201322020, 2021.   \nThomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks. In International Conference on Learning Representations, 2016.   \nCharlotte Frenkel, Martin Lefebvre, and David Bol. Learning without feedback: Fixed random learning signals allow for feedforward training of deep neural networks. Frontiers in Neuroscience, 15:629892, 2021.   \nNamyong Park, Xing Wang, Antoine Simoulin, Shuai Yang, Grey Yang, Ryan A Rossi, Puja Trivedi, and Nesreen K Ahmed. Forward learning of graph neural networks. In International Conference on Learning Representations, 2023.   \nYuchen Zhang, Jason Lee, Martin Wainwright, and Michael I Jordan. On the learnability of fullyconnected neural networks. In Artificial Intelligence and Statistics, pages 83\u201391, 2017.   \nZewen Li, Fan Liu, Wenjie Yang, Shouheng Peng, and Jun Zhou. A survey of convolutional neural networks: analysis, applications, and prospects. IEEE Transactions on Neural Networks and Learning Systems, 33(12):6999\u20137019, 2021a.   \nJunteng Jia and Austion R Benson. Residual correlation in graph neural network regression. In ACM SIGKDD International Conference on Knowledge Discovery & Data Mining, pages 588\u2013598, 2020.   \nCosma Shalizi. Advanced data analysis from an elementary point of view. 2013.   \nDengyong Zhou, Olivier Bousquet, Thomas Lal, Jason Weston, and Bernhard Sch\u00f6lkopf. Learning with local and global consistency. Advances in Neural Information Processing Systems, 16, 2003.   \nQian Huang, Horace He, Abhay Singh, Ser-Nam Lim, and Austin Benson. Combining label propagation and simple models out-performs graph neural networks. In International Conference on Learning Representations, 2021.   \nDavid E Rumelhart, Geoffrey E Hinton, and Ronald J Williams. Learning representations by back-propagating errors. Nature, 323(6088):533\u2013536, 1986.   \nNicolas Keriven. Not too little, not too much: a theoretical analysis of graph (over) smoothing. Advances in Neural Information Processing Systems, 35:2268\u20132281, 2022.   \nYaxin Li, Wei Jin, Han Xu, and Jiliang Tang. Deeprobust: a platform for adversarial attacks and defenses. In AAAI Conference on Artificial Intelligence, volume 35, pages 16078\u201316080, 2021b.   \nHanqing Zeng, Hongkuan Zhou, Ajitesh Srivastava, Rajgopal Kannan, and Viktor Prasanna. Graphsaint: Graph sampling based inductive learning method. In International Conference on Learning Representations, 2020.   \nWill Hamilton, Zhitao Ying, and Jure Leskovec. Inductive representation learning on large graphs. Advances in Neural Information Processing Systems, 30, 2017.   \nWeihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen Liu, Michele Catasta, and Jure Leskovec. Open graph benchmark: Datasets for machine learning on graphs. Advances in Neural Information Processing Systems, 33:22118\u201322133, 2020.   \nFelix Wu, Amauri Souza, Tianyi Zhang, Christopher Fifty, Tao Yu, and Kilian Weinberger. Simplifying graph convolutional networks. In International Conference on Machine Learning, pages 6861\u20136871, 2019.   \nPetar Veli\u02c7ckovi\u00b4c, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Li\u00f2, and Yoshua Bengio. Graph attention networks. In International Conference on Learning Representations, 2018.   \nJohannes Gasteiger, Aleksandar Bojchevski, and Stephan G\u00fcnnemann. Predict then propagate: Graph neural networks meet personalized pagerank. In International Conference on Learning Representations, 2018.   \nMicha\u00ebl Defferrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks on graphs with fast localized spectral filtering. Advances in Neural Information Processing Systems, 29, 2016.   \nPrithviraj Sen, Galileo Namata, Mustafa Bilgic, Lise Getoor, Brian Galligher, and Tina Eliassi-Rad. Collective classification in network data. AI Magazine, 29(3):93\u201393, 2008.   \nZhilin Yang, William Cohen, and Ruslan Salakhudinov. Revisiting semi-supervised learning with graph embeddings. In International Conference on Machine Learning, pages 40\u201348, 2016.   \nJulian McAuley, Christopher Targett, Qinfeng Shi, and Anton Van Den Hengel. Image-based recommendations on styles and substitutes. In International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 43\u201352, 2015.   \nBenedek Rozemberczki, Carl Allen, and Rik Sarkar. Multi-scale attributed node embedding. Journal of Complex Networks, 9(2):cnab014, 2021. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "Hongbin Pei, Bingzhe Wei, Kevin Chen-Chuan Chang, Yu Lei, and Bo Yang. Geom-gcn: Geometric graph convolutional networks. In International Conference on Learning Representations, 2019. Oleg Platonov, Denis Kuznedelev, Michael Diskin, Artem Babenko, and Liudmila Prokhorenkova. A critical look at the evaluation of gnns under heterophily: Are we really making progress? In International Conference on Learning Representations, 2022. Minjie Wang, Lingfan Yu, Da Zheng, Quan Gan, Yu Gai, Zihao Ye, Mufei Li, Jinjing Zhou, Qi Huang, Chao Ma, Ziyue Huang, Qipeng Guo, Hao Zhang, Haibin Lin, Junbo Zhao, Jinyang Li, Alexander J. Smola, and Zheng Zhang. Deep graph library: Towards efficient and scalable deep learning on graphs. In ICLR Workshop on Representation Learning on Graphs and Manifolds, 2019. ", "page_idx": 12}, {"type": "text", "text": "A APPENDIX ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Here we provide some implementation details of our methods to help readers further understand the algorithms and experiments in this paper. ", "page_idx": 13}, {"type": "text", "text": "A.1 GNN Training Process of BP ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Algorithm 1 GNN Training Process of BP   \nInput: G, X, W, $\\mathbf{y}_{L}$ , max_epoch.   \nOutput: \u02dcy, W. 1: for epoch in [0, 1, ..., max_epoch-1] do 2: for $l$ in $[0,1,...,L-1]$ do {Forward propagation} 3: for $v$ in v do 4: $\\begin{array}{r}{\\mathbf{\\dot{h}}_{v}^{(l)}=\\sum_{u\\in\\tilde{N}(v)}e_{v u}\\cdot\\mathbf{x}_{u}^{(l)}}\\end{array}$ ; {Aggregation} 5: end for 6: $\\mathbf{\\overline{{X}}}^{(l+1)}=\\sigma(\\mathbf{H}^{(l)}\\mathbf{W}^{(l)})$ ; {Combination} 7: end for 8: $l o s s=L o s s\\_c o m p u t i n g({\\bf X}^{(L)},{\\bf y}_{L})$ 9: for $l$ in $[L-1,L-2,...,0]$ do {Backward propagation}   \n10: $\\delta\\mathbf{W}^{(l)}=\\mathbf{H}^{(l)T}\\delta\\mathbf{X}^{(l+1)}$ ;{Combination}   \n11: $\\delta\\mathbf{H}^{(l)}=\\delta\\mathbf{X}^{(l+1)}\\mathbf{W}^{(l)T}$ ;{Combination}   \n12: for $v$ in v do   \n13: $\\begin{array}{r}{\\^{\\delta}\\delta\\mathbf{\\bar{x}}_{v}^{(l)}=\\sum_{u\\in\\tilde{N}(v)}e_{u v}\\cdot\\delta\\mathbf{h}_{u}^{(l)};\\{A g g r e g a t i o n\\}}\\end{array}$   \n14: end for   \n15: end for   \n16: $\\begin{array}{r l}{\\lefteqn{W e i g h t\\_u p d a t i n g(e p o c h,\\mathbf{W}^{(0)},\\delta\\mathbf{W}^{(0)},...,\\mathbf{W}^{(L-1)},\\delta\\mathbf{W}^{(L-1)});}}\\end{array}$   \n17: end for   \n18: \u02dcy = arg max Y\u02dc = arg max X(L). ", "page_idx": 13}, {"type": "text", "text": "A.2 GCN Training Process of Our Method ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Algorithm 2 GCN Training Process   \nInput: G, X, W, $\\mathbf{y}_{L}$ , max_epoch.   \nOutput: $\\widetilde{\\mathbf{y}}$ , W. 1: Initialize $\\{\\mathbf{B}^{(1)},\\mathbf{B}^{(2)},...,\\mathbf{B}^{(L-1)}\\}$ ;   \n2: for epoch in [0, 1, ..., max_epoch-1] do 3: Compute the prediction $\\tilde{\\mathbf Y}$ given by Eq. 1; {Forward propagation} 4: Compute the error $\\mathbf{E}$ using $\\tilde{\\mathbf{Y}},\\mathbf{y}_{L}$ for labeled nodes according to Eq. 3; 5: Compute pseudo error ${\\bf Z}^{\\ast}$ for unlabeled nodes by Eqs. 8, and rescale it to get rescaled error $\\hat{\\bf E}$ ; 6: Compute mask vector $\\mathbf{p}$ given by Eq. 9; 7: for $l$ in $[0,1,...,L-1]$ do 8: if $l==L-1$ then   \n9: Compute $\\delta\\mathbf{W}^{(l)}$ using $\\hat{\\bf E}$ , $\\mathbf{p}$ according to Eq. 10; {Direct feedback}   \n10: else   \n11: Compute $\\delta\\mathbf{W}^{(l)}$ using $\\hat{\\bf E}$ , $\\mathbf{p}$ and $\\mathbf{B}^{(l+1)}$ according to Eq. 10; {Direct feedback}   \n12: end if   \n13: end for   \n14: $\\begin{array}{r l}{\\lefteqn{W e i g h t\\_u p d a t i n g(e p o c h,\\mathbf{W}^{(0)},\\delta\\mathbf{W}^{(0)},...,\\mathbf{W}^{(L-1)},\\delta\\mathbf{W}^{(L-1)});}}\\end{array}$   \n15: end for   \n16: $\\tilde{\\mathbf{y}}=\\arg\\operatorname*{max}\\tilde{\\mathbf{Y}}.$ . ", "page_idx": 13}, {"type": "text", "text": "A.3 Proof of Theorem in Sec. 4.3 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Theorem. For a GCN model with two hidden layers $k$ and $k+1$ where $k$ connects to $k+1$ in sequence, we have $\\mathbf{x}^{(k+1)}=\\sigma(\\mathbf{a}^{(k+1)})$ and $\\mathbf{a}^{(k+1)}=g(\\mathbf{W}\\mathbf{x}^{(k)})$ , where $\\sigma$ is the activation function and $g(\\cdot)$ the aggregation operation in Algo. 1. Let the layers be updated according to the non-zero update directions $\\delta\\mathbf{x}^{(k)}$ and $\\delta\\mathbf{x}^{(k+1)}$ where $\\frac{\\delta\\mathbf{x}^{(k)}}{\\|\\delta\\mathbf{x}^{(k)}\\|}$ and $\\frac{\\delta\\mathbf{x}^{(k+1)}}{\\|\\delta\\mathbf{x}^{(k+1)}\\|}$ are constant for each data point. The negative update directions will minimize the following layer-wise criterion: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\mathbf{P}=\\mathbf{P}^{(k)}+\\mathbf{P}^{(k+1)}=\\frac{\\delta\\mathbf{x}^{(k)\\mathrm{T}}\\mathbf{x}^{(k)}}{\\|\\delta\\mathbf{x}^{(k)}\\|}+\\frac{\\delta\\mathbf{x}^{(k+1)\\mathrm{T}}\\mathbf{x}^{(k+1)}}{\\|\\delta\\mathbf{x}^{(k+1)}\\|}.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Minimizing $\\mathbf{P}$ will lead to an increase in the gradient, thereby enhancing the alignment criterion: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\mathbf{Q}=\\mathbf{Q}^{(k)}+\\mathbf{Q}^{(k+1)}=\\frac{\\delta\\mathbf{x}^{(k)\\mathrm{T}}\\mathbf{c}^{(k)}}{\\|\\delta\\mathbf{x}^{(k)}\\|}+\\frac{\\delta\\mathbf{x}^{(k+1)\\mathrm{T}}\\mathbf{c}^{(k+1)}}{\\|\\delta\\mathbf{x}^{(k+1)}\\|},\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathbf{c}^{(k)}=\\displaystyle\\frac{\\partial\\mathbf{x}^{(k+1)}}{\\partial\\mathbf{x}^{(k)}}\\delta\\mathbf{x}^{(k+1)}=\\mathbf{W}^{\\mathrm{T}}g^{\\prime}\\big(\\delta\\mathbf{x}^{(k+1)}\\odot\\sigma^{\\prime}\\big(\\mathbf{a}^{(k+1)}\\big)\\big),}\\\\ &{\\mathbf{c}^{(k+1)}=\\displaystyle\\frac{\\partial\\mathbf{x}^{(k+1)}}{\\partial\\mathbf{x}^{(k)\\mathrm{T}}}\\delta\\mathbf{x}^{(k)}=g^{\\prime}\\big(\\mathbf{W}\\delta\\mathbf{x}^{(k)}\\big)\\odot\\sigma^{\\prime}\\big(\\mathbf{a}^{(k+1)}\\big).}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "$g^{\\prime}(\\cdot)$ is the aggregation of gradients in Algo. 1, (line 13). If $\\mathbf{Q}^{(k)}\\,>\\,0$ , then $-\\delta\\mathbf{x}^{(k)}$ serves as a direction of descent to minimize $\\mathbf{P}^{(k+1)}$ . ", "page_idx": 14}, {"type": "text", "text": "Proof. Let $i$ be the any of the layers $k$ or $k+1$ , and prescribed update $-\\delta\\mathbf{x}^{(i)}$ is the steepest descent direction to minimize $\\mathbf{P}^{(i)}$ . Since any partial derivative of $\\frac{\\delta\\mathbf{x}^{(i)}}{\\|\\delta\\mathbf{x}^{(i)}\\|}$ is zero, we have: ", "page_idx": 14}, {"type": "equation", "text": "$$\n-{\\frac{\\partial\\mathbf{P}^{(i)}}{\\partial\\mathbf{x}^{(i)}}}=-{\\frac{\\partial}{\\partial\\mathbf{x}^{(i)}}}[{\\frac{\\delta\\mathbf{x}^{(i)\\mathsf{T}}\\mathbf{x}^{(i)}}{\\|\\delta\\mathbf{x}^{(i)}\\|}}]=-{\\frac{\\partial}{\\partial\\mathbf{x}^{(i)}}}[{\\frac{\\delta\\mathbf{x}^{(i)}}{\\|\\delta\\mathbf{x}^{(i)}\\|}}]\\mathbf{x}^{(i)}-{\\frac{\\partial\\mathbf{x}^{(i)}}{\\partial\\mathbf{x}^{(i)}}}{\\frac{\\delta\\mathbf{x}^{(i)}}{\\|\\delta\\mathbf{x}^{(i)}\\|}}=-\\alpha^{(i)}\\delta\\mathbf{x}^{(i)},\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "where $\\begin{array}{r}{\\alpha^{(i)}=\\frac{1}{\\|\\delta\\mathbf{x}^{(i)}\\|}>0}\\end{array}$ 1(i) > 0. As \u03b4a(i) = \u2202x((ii)) \u03b4 $\\begin{array}{r}{\\delta\\mathbf{a}^{(i)}=\\frac{\\partial\\mathbf{x}^{(i)}}{\\partial\\mathbf{a}^{(i)}}\\delta\\mathbf{x}^{(i)}=\\delta\\mathbf{x}^{(i)}\\odot\\boldsymbol{\\sigma}^{\\prime}(\\mathbf{a}^{(i)})}\\end{array}$ , the gradients maximizing $\\mathbf{Q}^{(k)}$ and Q(k+1) are: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathbf{Q}^{(i)}}{\\partial\\mathbf{c}^{(i)}}=\\frac{\\partial}{\\partial\\mathbf{c}^{(i)}}[\\frac{\\delta\\mathbf{x}^{(i)\\mathrm{T}}\\mathbf{c}^{(i)}}{\\lVert\\delta\\mathbf{x}^{(i)}\\rVert}]=\\frac{\\partial}{\\partial\\mathbf{c}^{(i)}}[\\frac{\\delta\\mathbf{x}^{(i)}}{\\lVert\\delta\\mathbf{x}^{(i)}\\rVert}]\\mathbf{c}^{(i)}+\\frac{\\partial\\mathbf{c}^{(i)}}{\\partial\\mathbf{c}^{(i)}}\\frac{\\delta\\mathbf{x}^{(i)}}{\\lVert\\delta\\mathbf{x}^{(i)}\\rVert}=\\alpha^{(i)}\\delta\\mathbf{x}^{(i)},\n$$", "text_format": "latex", "page_idx": 14}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathbf{Q}^{(k+1)}}{\\partial\\mathbf{W}}=\\frac{\\partial\\mathbf{Q}^{(k+1)}}{\\partial\\mathbf{c}^{(k+1)}}\\frac{\\partial\\mathbf{c}^{(k+1)}}{\\partial\\mathbf{W}}={\\boldsymbol{\\alpha}}^{(k+1)}g^{\\prime}(\\delta\\mathbf{x}^{(k+1)}\\odot{\\boldsymbol{\\sigma}}^{\\prime}(\\mathbf{a}^{(k+1)}))\\delta\\mathbf{x}^{(k)\\Gamma}={\\boldsymbol{\\alpha}}^{(k+1)}g^{\\prime}(\\delta\\mathbf{a}^{(k+1)})\\delta\\mathbf{x}^{(k+1)},\n$$", "text_format": "latex", "page_idx": 14}, {"type": "equation", "text": "$$\n\\frac{\\partial\\mathbf{Q}^{(k)}}{\\partial\\mathbf{W}}=\\frac{\\partial\\mathbf{c}^{(k)}}{\\partial\\mathbf{W}^{\\mathrm{T}}}\\frac{\\partial\\mathbf{Q}^{(k)}}{\\partial\\mathbf{c}^{(k)T}}=g^{\\prime}(\\delta\\mathbf{x}^{(k+1)}\\odot\\boldsymbol{\\sigma}^{\\prime}(\\mathbf{a}^{(k+1)}))\\boldsymbol{\\alpha}^{(k)}\\delta\\mathbf{x}^{(k)\\mathrm{T}}=\\boldsymbol{\\alpha}^{(k)}g^{\\prime}(\\delta\\mathbf{a}^{(k+1)})\\delta\\mathbf{x}^{(k)\\mathrm{T}}.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "When ignoring the magnitude of the gradients we have $\\begin{array}{r}{\\frac{\\partial\\mathbf{Q}}{\\partial\\mathbf{W}}\\approx\\frac{\\partial\\mathbf{Q}^{(k)}}{\\partial\\mathbf{W}}\\approx\\frac{\\partial\\mathbf{Q}^{(k+1)}}{\\partial\\mathbf{W}}}\\end{array}$ \u2202Q\u2202(kW+1). If x(i) is projected onto $\\delta\\mathbf{x}^{(i)}$ we have x\u2225(\u03b4i)xT(\u03b4i)x\u2225(i2) \u03b4x(i) + x(rie)s. The prescribed update for W is: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\delta{\\bf W}=-\\delta{\\bf x}^{(k+1)}\\frac{{\\partial{\\bf x}^{(k+1)}}}{{\\partial{\\bf W}}}=-g^{\\prime}(\\delta{\\bf x}^{(k+1)}\\odot\\sigma^{\\prime}({\\bf a}^{(k+1)})){\\bf x}^{(k)\\mathrm{T}}}}\\\\ {{\\mathrm{\\boldmath~\\mu~}=-g^{\\prime}(\\delta{\\bf a}^{(k+1)}){\\bf x}^{(k)\\mathrm{T}}=-g^{\\prime}(\\delta{\\bf a}^{(k+1)})(\\alpha^{(k)}{\\bf P}^{(k)}\\delta{\\bf x}^{(k)}+{\\bf x}_{r e s}^{(k)})^{\\mathrm{T}}}}\\\\ {{\\mathrm{\\boldmath~\\mu~}=-\\alpha^{(k)}{\\bf P}^{(k)}g^{\\prime}(\\delta{\\bf a}^{(k+1)})\\delta{\\bf x}^{(k)\\mathrm{T}}-g^{\\prime}(\\delta{\\bf a}^{(k+1)}){\\bf x}_{r e s}^{(k)\\mathrm{T}}=-{\\bf P}^{(k)}\\frac{\\partial{\\bf Q}^{(k)}}{\\partial{\\bf W}}-g^{\\prime}(\\delta{\\bf a}^{(k+1)}){\\bf x}_{r e s}^{(k)\\mathrm{T}}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "It is obvious that $\\mathbf{Q}^{(k)}$ and ${\\bf Q}^{(k+1)}$ can be maximized when the component of $\\frac{\\partial\\mathbf{Q}^{(k)}}{\\partial\\mathbf{W}}$ in $\\delta\\mathbf{W}$ is maximized by minimizing $\\mathbf{P}^{(k)}$ . The gradient to minimize $\\mathbf{P}^{(k)}$ is the prescribed update $-\\delta\\mathbf{x}^{(k)}$ . The angle between $\\delta\\mathbf{x}^{(k)}$ and the gradient of $\\mathbf{B}\\mathbf{P}\\mathbf{\\Lambda}\\mathbf{c}^{(k)}$ is within $90^{\\circ}$ if $\\mathbf{Q}^{(k)}>0$ because the cosine of the two vector is $\\frac{\\mathbf{Q}^{(k)}}{\\|\\mathbf{c}^{(k)}\\|}>0$ , and it also indicates that $\\mathbf{c}^{(k)}$ is nonzero and therefore in a descending trend. Consequently, $\\delta\\mathbf{x}^{(k)}$ will be oriented towards a descending direction since any vector that lies within $90^{\\circ}$ of the steepest descent direction will similarly point downwards, in other words, for GCN, a broad spectrum of asymmetric feedback paths can offer a descending gradient direction for a hidden layer as long as $\\mathbf{Q}^{(i)}\\bar{>}\\,0$ . ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "From Eq. 5, it is obvious one advantage of our method is that $\\delta\\mathbf{x}^{(i)}$ is non-zero for any non-zero error e, as a randomly generated matrix $\\mathbf{B}^{(i)}$ is highly likely to be of full rank. Ensuring $\\delta\\mathbf{x}^{(i)}$ is non-zero is crucial for achieving $\\mathbf{Q}^{(i)}>0$ . Maintaining static feedback across training helps preserve the characteristic, and also simplifies the process of maximizing $\\mathbf{Q}^{(i)}$ due to the more consistent direction to $\\delta\\mathbf{x}^{(i)}$ . Our method shows better biological plausibility in GNN training, which introduces asymmetric feedback paths to take place of BP, not only solving the weight transport problem and partially solving the update locking problem, but also releasing the requirement to store neural activations and accumulated gradients for backward propagation. ", "page_idx": 15}, {"type": "text", "text": "A.4 Datasets Statistics ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "We evaluate our method on 10 benchmark datasets across domains: citation networks (Cora, CiteSeer, PubMed) [Sen et al., 2008, Yang et al., 2016], Amazon co-purchase graph (Photo, Computer) [McAuley et al., 2015], Wikipedia graphs (Chameleon, Squirrel) [Rozemberczki et al., 2021], actor co-occurrence graph (Actor) [Pei et al., 2019] and webpage graphs from WebKB (Texas, Cornell) [Pei et al., 2019]. The datasets adopted are representative which describe diverse reallife scenarios. Some of them are highly homophilic while others are heterophilic. Note that for Chameleon and Squirrel, we use the filtered version from Platonov et al. [2022], as the original version from [Rozemberczki et al., 2021] may contain duplicated nodes. The detailed statistics of the datasets are summarized in Tab. 5. We compute the node homophily for each dataset using the method proposed by Pei et al. [2019], referred to as the homophily value. ", "page_idx": 15}, {"type": "table", "img_path": "hKVTwQQu76/tmp/1cb7d88f42f90e0f37a28f56c931599813b7f20e08ec9c2046bd84c3729c6beb.jpg", "table_caption": ["Table 5: Datasets statistics. "], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "\u2022 Cora, CiteSeer and PubMed [Sen et al., 2008] are three classic homophilic citation networks. In these networks, nodes correspond to academic papers, and edges signify the citation links between papers. The node features are derived from bag-of-word representations of the papers, and the labels categorize each paper into specific research topics. ", "page_idx": 15}, {"type": "text", "text": "\u2022 Computer and Photo [McAuley et al., 2015] are segments of the Amazon co-purchase graph, where nodes represent goods, edges indicate that two goods are frequently bought together, node features are bag-of-words encoded product reviews, and class labels are given by the product category. ", "page_idx": 15}, {"type": "text", "text": "\u2022 Chameleon and Squirrel [Rozemberczki et al., 2021] are two heterophilic networks derived from Wikipedia. In these networks, nodes represent Wikipedia web pages, and edges correspond to hyperlinks between these pages. The features are comprised of informative nouns extracted from the Wikipedia content, while the labels reflect the average traffic of each web page. ", "page_idx": 15}, {"type": "text", "text": "\u2022 Actor [Pei et al., 2019] is a heterophilic actor co-occurrence network where nodes represent actors, and edges signify that two actors have appeared together in the same movie. The features are derived from keywords found on the actors\u2019 Wikipedia pages, while the labels consist of significant words associated with each actor. ", "page_idx": 15}, {"type": "text", "text": "\u2022 Cornell and Texas [Pei et al., 2019] are heterophilic networks from the WebKB1 project representing computer science departments at three universities. Nodes are departmental web pages, edges represent hyperlinks, features are derived using bag-of-words, and labels categorize page types. These networks illustrate heterophilic connections where linked pages often differ in type. ", "page_idx": 16}, {"type": "text", "text": "A.5 Experimental Settings ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We conduct the semi-supervised node classification task using a basic GCN model, where the node set is randomly divided into the train/validation/test set with $60\\%/20\\%/20\\%$ . For fairness, we generate 10 random splits using different seeds and evaluate all approaches on these identical splits, reporting the average performance for each method. Our method is compared with five baseline training strategies including the traditional backpropagation (BP) [Rumelhart et al., 1986], PEPITA [Dellaferrera and Kreiman, 2022], two versions of the forward-forward algorithm (abbr. $\\mathrm{FF+LA}$ , $\\mathrm{FF+VN}$ ) [Hinton, 2022, Park et al., 2023], two versions of the cascaded forward algorithm (abbr. CaFo $^+$ MSE, CaFo+CE) [Zhao et al., 2023] and the FORWARDGNN Single-Forward algorithm (abbr. SF) [Park et al., 2023] specifically designed for GNNs. To ensure fairness, we train all approaches using the same GCN architecture, which includes 3 graph convolutional layers and 64 hidden units\u2014sufficiently representative for all datasets. We employ Adam as the optimization algorithm, refraining from using any regularization techniques other than an appropriate L2 penalty specific to Adam. The evaluation metric used is accuracy (acc), presented with a $95\\%$ confidence interval. ", "page_idx": 16}, {"type": "table", "img_path": "hKVTwQQu76/tmp/c3d15f4dda5134a50d320d64442606f8c49f814e4aed8bd60ebcc4ef400f4023.jpg", "table_caption": ["Table 6: Hyper-parameters of proposed method on real-world datasets. "], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "The codes of DFA-GNN are based on the GNNs in the PyTorch version by Deep Graph Library (DGL) [Wang et al., 2019]. To generate pseudo errors, we search the optimal $\\alpha$ in Eq. 8 within {0.001, 0.01, 0.1, 0.3, 0.5, 0.7, 0.9}, the iteration epoch for Eq. 8 within {5, 10, 30, 50, 100, 150, 200}, \u03f5 in Eq. 9 within {0.3, 0.5, 0.7, 0.9}. For the training of our method, we search the learning rate within {0.001, 0.01, 0.1} and weight decay within {0.0005, 0}. All the experiments are run on AMD EPYC 7542 32-Core Processor with Nvidia GeForce RTX 3090. We list the hyper-parameter values used in our model in Tab. 6. ", "page_idx": 16}, {"type": "text", "text": "A.6 Time Comparison ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Table 7: Average running time per epoch (s). For layer-wise training methods like PEPITA, CaFo, FF and SF, the total time taken by each layer per epoch is reported. ", "page_idx": 17}, {"type": "table", "img_path": "hKVTwQQu76/tmp/7d7b61af016b5e61fc178471cbbaa9e54e393e2217b13cc91ab03d4d0c43f503.jpg", "table_caption": [], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "A.7 Comparison of BP and DFA with Pseudo-Error Generation ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Although the pseudo-error generation process is essential for our method, it is also an optional choice for backpropagation. We integrate this component into BP, and the experimental results from Tab. 8 show that although this component contributes to DFA in our method, it does not positively enhance BP overall. Even with pseudo-error generation, BP cannot outperform our method. This observation indicates that direct feedback of errors may benefti more from pseudo-errors rather than the layer-by-layer backward pass. ", "page_idx": 17}, {"type": "table", "img_path": "hKVTwQQu76/tmp/e1ec5e8dcdf500cee497230fc9855a4bf3367dfd353ac8909758eeb6abc4f402.jpg", "table_caption": ["Table 8: Results of BP and DFA with pseudo-error generation spreading: mean accuracy $(\\%){\\pm}95\\%$ confidence interval. "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "A.8 DFA-GNN with Alternative Activation Functions ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "We conduct experiments for our method with four different activation functions (i.e., Sigmoid, Tanh, ELU and LeakyReLU) as shown in Tab. 9. The results demonstrate our method is well integrated with different activation functions and derives consistently good results. ", "page_idx": 17}, {"type": "table", "img_path": "hKVTwQQu76/tmp/c6a9258e5d6d363651ca4c014788a816520b83992cf11fe98aac9553210e753f.jpg", "table_caption": ["Table 9: Results of our method with different activation functions. "], "table_footnote": [], "page_idx": 18}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: The abstract and introduction clearly state the claims made. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 18}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Justification: Please see Secs. 4 and 5. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness. ", "page_idx": 18}, {"type": "text", "text": "\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 19}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: Please see Sec. 4.3 and Appx. A.3. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 19}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Justification: The detailed experimental settings are included in Appx. A.5. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully.   \n(c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset).   \n(d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: In Appx. A.4, we provide the sources of the datasets. We provide the key parts of the algorithm in the supplementary. The complete version will be made publicly available once it is fully organized. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 20}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Justification: Please see Sec. 5 and Appx. A.5. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 20}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We report mean accuracy $(\\%)\\pm95\\%$ confidence interval in Tabs.1, 2 and 4. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 21}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: The information on the computer resources is discussed in Appx. A.5 and A.6. Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 21}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: Yes, we do. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 21}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: There is no societal impact of the work performed and we cannot foresee any possible negative impacts, due to the highly technical nature of the task under consideration. Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 22}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: The paper poses no such risks. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 22}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: We have cited the original paper that produced the code package or dataset. Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 23}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: The paper does not release new assets. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 23}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: No crowdsourcing or research with human subjects involved. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 23}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 23}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] Justification: No crowdsourcing or research with human subjects involved. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 24}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 24}]