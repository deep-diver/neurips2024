[{"figure_path": "KhwOuB0fs9/figures/figures_3_1.jpg", "caption": "Figure 2: Pipeline of EFFI-LEARNER. LLMs first generate code for the given problem. This code is then executed locally to gather overhead profiles. These profiles are subsequently utilized by the LLMs to optimize the code in successive iterations, thereby enhancing the overall efficiency of the generated code. A comprehensive illustration is provided in the Appendix Figure 4-Figure 11.", "description": "This figure illustrates the workflow of the EFFI-LEARNER framework.  It begins with an LLM generating code for a given problem.  This code is then executed to create an overhead profile (execution time and memory usage). This profile is fed back into the LLM, which then refines the code to improve efficiency. This iterative process of code generation, profiling, and refinement continues until the desired level of efficiency is achieved.  The appendix contains more detailed diagrams illustrating specific aspects of this process.", "section": "3 EFFI-LEARNER"}, {"figure_path": "KhwOuB0fs9/figures/figures_17_1.jpg", "caption": "Figure 2: Pipeline of EFFI-LEARNER. LLMs first generate code for the given problem. This code is then executed locally to gather overhead profiles. These profiles are subsequently utilized by the LLMs to optimize the code in successive iterations, thereby enhancing the overall efficiency of the generated code. A comprehensive illustration is provided in the Appendix Figure 4-Figure 11.", "description": "The figure illustrates the workflow of EFFI-LEARNER, a self-optimization framework for improving the efficiency of LLM-generated code.  It shows three main stages: (1) Code Generation, where an LLM generates initial code; (2) Overhead Profiling, where the generated code is executed locally to capture its execution time and memory usage; (3) Code Refinement, where the overhead profiles are fed back into the LLM to iteratively revise and optimize the code.  This iterative process continues until the code reaches a satisfactory level of efficiency, significantly enhancing its performance.", "section": "3 EFFI-LEARNER"}, {"figure_path": "KhwOuB0fs9/figures/figures_26_1.jpg", "caption": "Figure 2: Pipeline of EFFI-LEARNER. LLMs first generate code for the given problem. This code is then executed locally to gather overhead profiles. These profiles are subsequently utilized by the LLMs to optimize the code in successive iterations, thereby enhancing the overall efficiency of the generated code. A comprehensive illustration is provided in the Appendix Figure 4-Figure 11.", "description": "This figure illustrates the workflow of the EFFI-LEARNER framework.  It starts with an LLM generating code for a given problem. This code is then executed, and an overhead profile (execution time and memory usage) is created.  This profile is fed back into the LLM, which then refines the code. This iterative process continues until the LLM produces an efficient code.  The Appendix contains more detailed illustrations of this process.", "section": "3 EFFI-LEARNER"}, {"figure_path": "KhwOuB0fs9/figures/figures_27_1.jpg", "caption": "Figure 2: Pipeline of EFFI-LEARNER. LLMs first generate code for the given problem. This code is then executed locally to gather overhead profiles. These profiles are subsequently utilized by the LLMs to optimize the code in successive iterations, thereby enhancing the overall efficiency of the generated code. A comprehensive illustration is provided in the Appendix Figure 4-Figure 11.", "description": "This figure illustrates the workflow of the EFFI-LEARNER framework.  It starts with an LLM generating code for a given problem. This code is then executed, and its execution time and memory usage are profiled. These profiles (overhead profiles) are fed back into the LLM, which then refines the code. This iterative process of code generation, profiling, and refinement continues until the efficiency of the generated code is satisfactory. The Appendix contains more detailed illustrations of this process.", "section": "3 EFFI-LEARNER"}, {"figure_path": "KhwOuB0fs9/figures/figures_33_1.jpg", "caption": "Figure 2: Pipeline of EFFI-LEARNER. LLMs first generate code for the given problem. This code is then executed locally to gather overhead profiles. These profiles are subsequently utilized by the LLMs to optimize the code in successive iterations, thereby enhancing the overall efficiency of the generated code. A comprehensive illustration is provided in the Appendix Figure 4-Figure 11.", "description": "This figure illustrates the workflow of EFFI-LEARNER, a self-optimization framework for improving the efficiency of LLM-generated code.  It shows three main stages: 1) Code Generation, where an LLM generates initial code; 2) Overhead Profiling, where the generated code is executed to obtain execution time and memory usage profiles; and 3) Code Refinement, where the profiles are fed back to the LLM to iteratively refine the code for better efficiency.  The process repeats until a satisfactory level of efficiency is reached. This iterative feedback loop is the key to EFFI-LEARNER's effectiveness. Appendix figures 4-11 provide a more detailed breakdown of the process.", "section": "3 EFFI-LEARNER"}, {"figure_path": "KhwOuB0fs9/figures/figures_34_1.jpg", "caption": "Figure 2: Pipeline of EFFI-LEARNER. LLMs first generate code for the given problem. This code is then executed locally to gather overhead profiles. These profiles are subsequently utilized by the LLMs to optimize the code in successive iterations, thereby enhancing the overall efficiency of the generated code. A comprehensive illustration is provided in the Appendix Figure 4-Figure 11.", "description": "This figure illustrates the pipeline of the EFFI-LEARNER framework.  It starts with an LLM generating code for a given problem. This code is then executed, and an overhead profile (execution time and memory usage) is generated. This profile is fed back into the LLM, which uses it to refine the code. This iterative process repeats until the LLM produces an efficient solution.  The appendix contains more detailed illustrations of this process.", "section": "3 EFFI-LEARNER"}]