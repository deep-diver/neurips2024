[{"figure_path": "u7JRmrGutT/figures/figures_4_1.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u03b8, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u03b8 to obtain R, R' \u2208 RN(N\u22121)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N\u22121)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED\u03b8,\u03d5(G, G') (Eq.(8)).", "description": "The figure illustrates the architecture of GRAPHEDX, a neural model for computing GED.  The top part shows example graphs illustrating the optimal edit path between source and target graphs. The bottom part illustrates the process: 1) MPNNs process each graph independently, 2) a PERMNET module generates node alignment P and node-pair alignment S, 3) MLPs generate node and edge embeddings, and 4) these are combined to estimate the final GED.", "section": "4.1 GED computation using node alignment map"}, {"figure_path": "u7JRmrGutT/figures/figures_29_1.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u0113, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u0189 to obtain R, R' \u2208 RN(N-1)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N-1)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED0,$(G, G') (Eq.(8)).", "description": "The figure illustrates an example of two graphs and their optimal alignment, along with the architecture of the GRAPHEDX model. The top part shows two example graphs, G and G', with color-coded nodes indicating the optimal node alignment. The bottom part shows the proposed GED prediction pipeline that uses MPNN to encode the graphs, MLP to obtain node-pair embeddings, PERMNET to obtain soft node alignment, and finally computes the GED using the learned alignment and cost parameters.", "section": "4.1 GED computation using node alignment map"}, {"figure_path": "u7JRmrGutT/figures/figures_31_1.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u0113, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u0189 to obtain R, R' \u2208 RN(N-1)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N-1)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED0,$(G, G') (Eq.(8)).", "description": "This figure illustrates the GRAPHEDX model architecture. The top panel shows an example of two graphs and their optimal alignment. The bottom panel depicts the model's pipeline. The graphs are encoded using MPNNs, then padded and processed through MLPs to get node-pair embeddings. The PERMNET generates a soft node alignment, leading to the node-pair alignment. Finally, node and edge costs are estimated from embeddings and combined to obtain the GED prediction.", "section": "4.1 GED computation using node alignment map"}, {"figure_path": "u7JRmrGutT/figures/figures_31_2.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u0113, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u0189 to obtain R, R' \u2208 RN(N-1)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N-1)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED0,$(G, G') (Eq.(8)).", "description": "The figure illustrates an example of two graphs (G and G') and their optimal alignment, color-coded to show the edit operations needed to transform G into G'.  The bottom part shows the architecture of GRAPHEDX, a neural network that predicts the Graph Edit Distance (GED). It uses message passing neural networks (MPNNs) to generate node and edge embeddings, followed by a Gumbel-Sinkhorn network (PERMNET) to learn a soft node alignment. The node and edge embeddings are then used to compute set divergences that approximate the costs of the four edit operations (node insertion, node deletion, edge insertion, edge deletion), which are summed to give the final GED prediction.", "section": "4.1 GED computation using node alignment map"}, {"figure_path": "u7JRmrGutT/figures/figures_32_1.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u0113, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u0189 to obtain R, R' \u2208 RN(N-1)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N-1)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED0,$(G, G') (Eq.(8)).", "description": "The figure illustrates the GRAPHEDX model's architecture and workflow. The top part shows an example of two graphs and their optimal node alignment, representing the edit operations required to transform one graph into the other. The bottom part depicts the model's pipeline, detailing how graphs are encoded using message-passing neural networks (MPNNs), how node and edge alignments are learned using a Gumbel-Sinkhorn network (PERMNET), and how these alignments are used to compute the final Graph Edit Distance (GED).", "section": "Proposed approach"}, {"figure_path": "u7JRmrGutT/figures/figures_33_1.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u0113, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u0189 to obtain R, R' \u2208 RN(N-1)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N-1)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED0,$(G, G') (Eq.(8)).", "description": "The figure shows an example of two graphs G and G', their alignment, and the architecture of GRAPHEDX model for predicting Graph Edit Distance (GED). The top part illustrates an example of two graphs and their optimal alignment, while the bottom part depicts the architecture of the GRAPHEDX model. The model consists of several components: MPNN for generating node embeddings, MLP for generating node-pair embeddings, PERMNET for generating soft node alignment matrix P, and the final layer which combines the embeddings and alignment information to compute the GED.", "section": "4.1 GED computation using node alignment map"}, {"figure_path": "u7JRmrGutT/figures/figures_33_2.jpg", "caption": "Figure 1: Top: Example graphs G and G' are shown with color-coded nodes to indicate alignment corresponding to the optimal edit path transforming G to G'. Bottom: GRAPHEDX's GED prediction pipeline. G and G' are independently encoded using MPNN\u0113, and then padded with zero vectors to equalize sizes, resulting in contextual node representations X, X' \u2208 RN\u00d7d. For each node-pair, the corresponding embeddings and edge presence information are gathered and fed into MLP\u0189 to obtain R, R' \u2208 RN(N-1)/2\u00d7D. Simultaneously, X, X' are fed into PERMNET, to obtain the soft node alignment P (Eq.(16)) which constructs the node-pair alignment matrix S\u2208 RN(N-1)/2\u00d7N(N\u22121)/2 as S[(u, v), (u', v')] = P[u, u']P[v, v'] + P[u, v']P[v, u']. Finally, X, X', P are used to approximate node insertion and deletion costs, while R, R', S are used to approximate edge insertion and deletion costs. The four costs are summed to give the final prediction GED0,$(G, G') (Eq.(8)).", "description": "This figure illustrates the GRAPHEDX model's architecture. The top panel shows an example of two graphs and their optimal node alignment, while the bottom panel depicts the model's pipeline.  The model independently processes each graph using an MPNN, then generates soft node and edge alignments using a PERMNET. Finally, these alignments are used to compute the GED by combining the individual costs of edge/node addition and deletion.", "section": "Proposed approach"}]