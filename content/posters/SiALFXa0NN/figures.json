[{"figure_path": "SiALFXa0NN/figures/figures_1_1.jpg", "caption": "Figure 1: VerSAILLE reflects a proof of a control envelope in an NN to verify infinite-time safety of an NNCS from mere open-loop NNV properties. Mosaic completely lifts off-the-shelf open-loop NNV tools to polynomial arithmetic by combining approximation with judicious SMT reasoning.", "description": "This figure illustrates the VerSAILLE approach which uses a control envelope proven in differential dynamic logic (dL) to verify infinite-time safety of a neural network controlled system (NNCS).  It shows how open-loop neural network verification (NNV) is used to check if the neural network adheres to the control envelope, effectively transferring the dL safety guarantee to the NNCS.  The figure also highlights the Mosaic technique that extends the applicability of existing linear-constraint open-loop NNV tools to polynomial constraints, enabling the verification of NN properties with arbitrary logical structure.", "section": "Overview"}, {"figure_path": "SiALFXa0NN/figures/figures_5_1.jpg", "caption": "Figure 3: Visualization of the nonlinear verification algorithm Mosaic in Section 4", "description": "The figure visualizes how Mosaic, a nonlinear verification algorithm, handles nonlinear constraints in NN verification.  It shows the input space partitioned into regions with linear approximations of nonlinear constraints.  The NN's behavior is analyzed in each region, considering reachable outputs. The output space highlights spurious and concrete counterexamples resulting from the linear approximations.  This process aims for completeness and efficiency by combining approximation and SMT reasoning to verify complex properties on piecewise linear NNs.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_5_2.jpg", "caption": "Figure 4: Enumeration of specification regions", "description": "This figure illustrates the concept of Mosaic, a novel approach for handling nonlinear open-loop NNV queries. It shows how the input space is partitioned into regions (A1, A2, A3) which contain different linear and non-linear constraints.  The algorithm efficiently addresses the arbitrary logical structure and polynomial constraints found in hybrid systems. Instead of processing all combinations of constraints individually, it partitions the problem into smaller subproblems (azulejos) making the verification process more efficient and practical for real-world applications.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_8_1.jpg", "caption": "Figure 3: Visualization of the nonlinear verification algorithm Mosaic in Section 4", "description": "The figure visualizes the nonlinear verification algorithm Mosaic. It shows how Mosaic handles nonlinear constraints in NN verification by combining approximation with exact reasoning. The input space is partitioned into regions where the NN is locally affine.  Linear approximations of the constraints are generated, and these are used to check if unsafe regions are reachable. If a spurious counterexample is found, it is generalized to an affine region to preserve completeness. The algorithm combines off-the-shelf linear constraint tools with approximation and SMT reasoning to handle arbitrary logical structure in nonlinear constraints.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_30_1.jpg", "caption": "Figure 6: This plot shows the (input) state space for the ACC_Large NNCS: The orange line represents the boundary of the safe state space; the red areas indicate regions with counterexamples; the purple and green lines show potential trajectories of the system (dots represent discrete controller decisions).", "description": "This figure shows the state space of the Adaptive Cruise Control (ACC) system with a large neural network (NN). The orange line demarcates the boundary of safe states.  Red areas highlight regions where the NNCS exhibits unsafe behaviors (counterexamples).  The green line illustrates a successful trajectory of the system, while the purple line shows an unsafe trajectory that leads to a collision.  The dots along the trajectories represent individual control decisions.", "section": "5 Evaluation"}, {"figure_path": "SiALFXa0NN/figures/figures_34_1.jpg", "caption": "Figure 3: Visualization of the nonlinear verification algorithm Mosaic in Section 4", "description": "The figure visualizes the nonlinear verification algorithm Mosaic. The left side shows the input space with linear and nonlinear constraints. The linear approximations are shown in orange lines. The blue and green areas represent two different input regions. The right side shows the output space with unsafe regions in red and reachable regions in green and blue. The algorithm aims to efficiently verify nonlinear properties by partitioning the input space and using off-the-shelf linear constraint tools for each partition.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_34_2.jpg", "caption": "Figure 3: Visualization of the nonlinear verification algorithm Mosaic in Section 4", "description": "The figure visualizes the nonlinear verification algorithm Mosaic.  It shows how Mosaic handles nonlinear constraints in the verification of neural networks by combining approximation with exact reasoning. The input space is partitioned (creating a \"mosaic\"), and linear approximations are used for the nonlinear constraints. This allows lifting off-the-shelf linear constraint tools to the nonlinear setting while maintaining completeness. The figure illustrates how the algorithm identifies spurious counterexamples (spurious CEX) versus concrete counterexamples (concrete CEX) and how it partitions the input and output spaces for efficient verification.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_34_3.jpg", "caption": "Figure 3: Visualization of the nonlinear verification algorithm Mosaic in Section 4", "description": "The figure visualizes the process of the nonlinear verification algorithm Mosaic. The input space is shown on the left, where green and blue areas represent linear and nonlinear constraints, respectively. The algorithm partitions the input space into regions. Each region is analyzed for safety properties. The output space is shown on the right, where red areas indicate unsafe regions. The algorithm identifies concrete counterexamples and generalizes them to counterexample regions. This process combines approximation with exact reasoning to achieve completeness.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_35_1.jpg", "caption": "Figure 3: Visualization of the nonlinear verification algorithm Mosaic in Section 4", "description": "This figure visualizes the nonlinear verification algorithm Mosaic.  The left side shows the input space with linear and nonlinear constraints. The nonlinear constraints are approximated by linear approximations (orange lines around the blue constraint). The input space is partitioned into regions (azulejos), each with its own open-loop NNV query. The right side shows the output space, highlighting spurious and concrete counterexamples. The algorithm determines whether the NN's output reaches unsafe regions, effectively verifying nonlinear properties.", "section": "4 Mosaic: Nonlinear Open-Loop NN Verification"}, {"figure_path": "SiALFXa0NN/figures/figures_35_2.jpg", "caption": "Figure 5: An unsafe advisory by the Airborne Collision Avoidance NN: After a previous advisory to climb at least 1500ft/min, the NN advises the pilot to reverse vertical direction (\"Strengthen Descent to at least 1,500 ft/min\"). This leads to an NMAC 6 seconds later. More examples are in Appendix G.", "description": "This figure shows a specific scenario where the Airborne Collision Avoidance Neural Network provides an unsafe advisory, leading to a near mid-air collision (NMAC).  Initially advised to climb, the NN unexpectedly instructs a descent, resulting in a collision six seconds later. The figure highlights the trajectories of both aircraft, illustrating how the NN's unsafe recommendation leads to a dangerous situation. Additional similar examples are detailed in Appendix G of the paper.", "section": "Evaluation"}, {"figure_path": "SiALFXa0NN/figures/figures_35_3.jpg", "caption": "Figure 5: An unsafe advisory by the Airborne Collision Avoidance NN: After a previous advisory to climb at least 1500ft/min, the NN advises the pilot to reverse vertical direction (\"Strengthen Descent to at least 1,500 ft/min\"). This leads to an NMAC 6 seconds later. More examples are in Appendix G.", "description": "This figure shows an example of an unsafe advisory generated by the Airborne Collision Avoidance Neural Network.  After receiving an advisory to climb, the NN subsequently advises a descent, leading to a near mid-air collision (NMAC) within 6 seconds.  This highlights a failure case where the NN's decision-making process resulted in an unsafe outcome, demonstrating the need for rigorous safety verification.", "section": "Evaluation"}, {"figure_path": "SiALFXa0NN/figures/figures_35_4.jpg", "caption": "Figure 5: An unsafe advisory by the Airborne Collision Avoidance NN: After a previous advisory to climb at least 1500ft/min, the NN advises the pilot to reverse vertical direction (\"Strengthen Descent to at least 1,500 ft/min\"). This leads to an NMAC 6 seconds later. More examples are in Appendix G.", "description": "This figure shows an example of an unsafe advisory generated by the Airborne Collision Avoidance Neural Network.  After initially advising a climb, the NN subsequently advises a descent, leading to a near mid-air collision (NMAC) within 6 seconds.  This illustrates a failure case where the NN's decision-making process results in an unsafe outcome, highlighting the importance of rigorous verification techniques.", "section": "5 Evaluation"}]