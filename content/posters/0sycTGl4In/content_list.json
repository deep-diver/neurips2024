[{"type": "text", "text": "4D Gaussian Splatting in the Wild with Uncertainty-Aware Regularization ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Mijeong Kim1 Jongwoo Lim2, 3 Bohyung Han1,3 mijeong.kim@snu.ac.kr jongwoo.lim@snu.ac.kr bhhan@snu.ac.kr ", "page_idx": 0}, {"type": "text", "text": "1ECE, $^{2}\\mathrm{ME}$ , and 3IPAI, Seoul National University, South Korea ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Novel view synthesis of dynamic scenes is becoming important in various applications, including augmented and virtual reality. We propose a novel 4D Gaussian Splatting (4DGS) algorithm for dynamic scenes from casually recorded monocular videos. To overcome the overftiting problem of existing work for these real-world videos, we introduce an uncertainty-aware regularization that identifies uncertain regions with few observations and selectively imposes additional priors based on diffusion models and depth smoothness on such regions. This approach improves both the performance of novel view synthesis and the quality of training image reconstruction. We also identify the initialization problem of 4DGS in fast-moving dynamic regions, where the Structure from Motion (SfM) algorithm fails to provide reliable 3D landmarks. To initialize Gaussian primitives in such regions, we present a dynamic region densification method using the estimated depth maps and scene flow. Our experiments show that the proposed method improves the performance of 4DGS reconstruction from a video captured by a handheld monocular camera and also exhibits promising results in few-shot static scene reconstruction. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Dynamic novel View Synthesis (DVS) aims to reconstruct dynamic scenes from captured videos and generate photorealistic frames for an arbitrary new combination of a viewpoint and a time step. This task has emerged as a vital research area in the 3D vision community with rapid advancements in augmented reality and virtual reality. Early DVS research primarily relied on neural radiance fields [29, 69, 10, 13, 11, 38, 39, 41, 5, 12, 50]. In contrast, more recent methods [61, 18, 31] extend 3D Gaussian Splatting [23] to account for the additional time dimension in dynamic scenes, and these techniques are referred to as 4D Gaussian Splatting. ", "page_idx": 0}, {"type": "text", "text": "Despite the recent success of 4D Gaussian Splatting models [61, 18, 31, 68], their applicability remains largely limited to controlled and purpose-built environments. Most existing models are developed and tested with multi-view video setups [29, 41]. While there are several methods tackling monocular video settings, these setups are still controlled and fall short of in-the-wild scenarios. For instance, [38, 69] maintain multi-view characteristics, where the camera captures a broad arc around a slow-moving object. Also, HyperNeRF [39] relies on unrealistic train-test splits, with both sets sampled from the same video trajectory, which renders the task closer to video interpolation than genuine novel view synthesis. In this paper, we focus for the first time on more natural, real-world monocular videos [14], where a single handheld camera moves around fast-moving objects. ", "page_idx": 0}, {"type": "text", "text": "In casually recorded monocular videos, which often lack sufficient multi-view information, 4D Gaussian Splatting algorithms tend to overfti the training frames in real-world scenarios. To address overfitting, recent regularization techniques [26, 7, 58, 67, 25, 36, 20] can be applied to provide additional priors for unseen views. However, these regularization techniques often involve a balancing issue: while they effectively improve novel view synthesis performance during testing, they inherently sacrifice the reconstruction accuracy of training images. Since both the reconstruction accuracy and the novel view synthesis quality are equally important in our target task, the trade-off caused by the na\u00efve application of the regularization techniques is not desirable. ", "page_idx": 0}, {"type": "image", "img_path": "0sycTGl4In/tmp/4aaa29a63d83f182029b57d1d7c5f10fdef100208844a22614b87c549524053d.jpg", "img_caption": ["Figure 1: Concept of uncertainty-aware regularization. Existing models often use regularization techniques to introduce additional priors for unseen views, aiming to enhance novel view synthesis performance. However, these methods tend to over-regularize accurately reconstructed pixels, which degrades the reconstruction quality of training images. To address this issue, our uncertainty-aware regularization selectively focuses on uncertain regions in unseen views, preserving the quality of well-reconstructed pixels with low uncertainty. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "In this paper, we address this balancing issue with a simple yet effective solution: uncertainty-aware regularization. First, we quantify the uncertainty of each Gaussian primitive based on its contribution to rendering for training images. Then, a 2D uncertainty map is constructed for unseen views using an $\\alpha$ -blending method. Regularization is selectively applied to uncertain regions, guided by the diffusion and depth smoothness priors, while low-uncertainty regions, where training data already provide sufficient reconstruction detail, are left unregularized, as illustrated in Figure 1. This approach results in a better balance between training and test performance, achieving good performance. ", "page_idx": 1}, {"type": "text", "text": "In real-world scenarios involving fast motions, especially in casually recorded videos, 4D Gaussian Splatting additionally faces considerable challenges with initialization. The algorithms based on Gaussian Splatting initialize Gaussian primitives using point clouds obtained by Structure from Motion (SfM) [47]. However, SfM struggles to reconstruct dynamic regions, particularly those with fast motion, often treating them as noise and leaving these areas without initialized primitives. Such an incomplete initialization disrupts training, causing primitives in static regions to be repeatedly cloned and split in an attempt to fill the dynamic areas. This can lead to an excessive number of primitives and, in some cases, out-of-memory issues. To address this limitation, we propose a dynamic region densification technique that initializes additional Gaussian primitives in dynamic regions. ", "page_idx": 1}, {"type": "text", "text": "We address the challenging problem of 4D reconstruction from an in-the-wild monocular video recorded casually with a handheld camera\u2014a scenario that has been rarely explored. The main contributions of this paper are summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "\u2022 We propose an uncertainty quantification technique based on contribution to training image rendering and introduce adaptive regularization techniques based on the uncertainty map, which balances between novel view synthesis performance and training image reconstruction quality.   \n\u2022 We address the issue of incomplete initialization in dynamic regions, emphasizing the importance of proper initialization in the training process of 4D Gaussian Splatting.   \n\u2022 We demonstrate the effectiveness of our algorithm on casually recorded monocular videos, showing improvements over baselines. Additionally, we validate the applicability of our method in few-shot static scene reconstruction. ", "page_idx": 1}, {"type": "text", "text": "The rest of this paper is organized as follows. Section 2 reviews related work and Section 3 discusses the basic concepts of 4D Gaussian splatting, which builds upon 3D Gaussian Splatting by integrating deformation strategies. The details of our approach are described in Section 4, followed by the presentation of experimental results in Section 5. Finally, we conclude this paper in Section 6. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "2.1 Dynamic Novel View Synthesis ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In recent years, significant advances have been made in novel view synthesis [34, 6, 15, 60, 35, 23]. Initially focused on static scenes, novel view synthesis has shifted towards dynamic scenes through the integration of motion modeling, now referred to as Dynamic novel View Synthesis (DVS). Early approaches [13, 10, 38, 5, 12, 50, 11] are largely driven by Neural Radiance Fields (NeRF). Some studies [13, 10] capture dynamics implicitly through temporal inputs or latent codes, and other approaches [38, 5, 12, 50, 11] focus on training the canonical NeRF and its deformation fields. ", "page_idx": 2}, {"type": "text", "text": "The introduction of 3D Gaussian Splatting (3DGS) [23] has marked a paradigm shift in novel view synthesis, leading to the development of 4D Gaussian Splatting (4DGS) [68, 18, 61, 31] for DVS. These 4DGS methods deform canonical 3D Gaussian primitives over time using additional deformation networks, which can be based on MLPs, learnable control points, Hexplane [5, 61], or polynomial functions. While these models excel at reconstructing dynamic scenes in controlled environments [38, 69, 29, 41, 39], they face significant challenges when applied to casually recorded monocular videos, posing substantial hurdles for real-world applications. ", "page_idx": 2}, {"type": "text", "text": "2.2 Regularization Techniques in Sparse Reconstruction ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Casually recorded monocular videos typically provide limited multi-view information, as they are typically captured with a single handheld camera that only exhibits gentle motion. Consequently, reconstructing dynamic scenes from these videos is often regarded as a form of sparse reconstruction due to the lack of multi-view data. ", "page_idx": 2}, {"type": "text", "text": "In the context of sparse reconstruction, various regularization techniques have been proposed to mitigate overfitting on limited training images [36, 25, 20, 48, 22, 4, 49, 53, 24, 63, 43, 8, 59, 55, 16, 65, 62, 2, 17, 16]. These approaches generally involve rendering images or depth maps for unseen views to provide additional priors. For instance, some methods leverage depth priors based on estimated depths for novel views [43, 8, 59, 55, 16, 72], while others incorporate color smoothness constraints to enhance these views [25, 36]. Building on the success of diffusion models [44], recent approach [62] starts to incorporate diffusion priors to produce more realistic images of novel views. While these methods effectively enhance novel view synthesis performance at test time, they inherently compromise the quality of training image reconstructions. Since both the reconstruction accuracy and the novel view synthesis quality are equality important in our target task, the trade-off caused by the na\u00efve application of the regularization techniques is not desirable. ", "page_idx": 2}, {"type": "text", "text": "2.3 Uncertainty Quantifications in Novel View Synthesis ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Uncertainty estimation in novel view synthesis has primarily been explored with Neural Radiance Fields (NeRF) [29]. Pioneering approaches [37, 51, 52] re-parameterize MLP networks in NeRF using Bayesian models to compute the uncertainty of network predictions. Inspired by InfoNeRF [25], which considers entropy along rays for few-shot NeRFs, some studies [70, 66, 27] quantify uncertainty using the entropy of density along rays from a novel view. Additionally, Density-aware NeRF Ensembles [56] measures uncertainty by examining the variance in RGB images produced by an ensemble of models. ", "page_idx": 2}, {"type": "text", "text": "In contrast, uncertainty quantification in Gaussian Splatting [23] remains largely underexplored, with only a few works addressing this issue. Savant et al. [46] incorporate variational inference into the rendering pipeline, but this approach increases learnable parameters. Similarly, FisherRF [21] quantifies the uncertainty of Gaussian primitives by aggregating the diagonal of the Hessian matrix of the log-likelihood function; however, it is not straightforward to obtain a scalar value of uncertainty from the Hessian matrix for each Gaussian primitive. Our approach, on the other hand, directly quantifies the observed information of each Gaussian primitive by aggregating their contributions to the reconstruction of training images. ", "page_idx": 2}, {"type": "text", "text": "Most existing works that utilize estimated uncertainty primarily focus on quantifying model predictions after training [46] or on active learning for next-view selection [21]. In contrast, our approach leverages estimated uncertainty for adaptive regularization during training, specifically targeting Gaussian Splatting in sparse reconstruction. ", "page_idx": 3}, {"type": "text", "text": "3 Preliminary: 4D Gaussian Splatting ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "This section briefly overviews 3D Gaussian splatting (3DGS) [23] and explains the deformation modeling in 4D Gaussian Splatting (4DGS) [68, 18, 61, 31] for dynamic scenes. ", "page_idx": 3}, {"type": "text", "text": "3.1 3D Gaussian Splatting ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Gaussian primitive 3D Gaussian splatting has demonstrated real-time, state-of-the-art rendering quality on static scenes. It uses an explicit 3D scene representation consisting of a set of 3D Gaussian ellipsoids, denoted by $\\Gamma=\\{\\gamma_{1},...,\\gamma_{K}\\}$ . Each Gaussian primitive, $\\gamma_{k}$ , is based on an unnormalized 3D Gaussian kernel, $\\mathcal{G}_{k}({\\boldsymbol{x}})$ , parameterized by $\\pmb{\\mu}_{k}$ and $\\Sigma_{k}$ as follows: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathcal{G}_{k}(\\pmb{x};\\pmb{\\mu}_{k},\\pmb{\\Sigma}_{k}):=\\exp\\left(-\\frac{1}{2}(\\pmb{x}-\\pmb{\\mu}_{k})^{\\top}\\pmb{\\Sigma}_{k}^{-1}(\\pmb{x}-\\pmb{\\mu}_{k})\\right),\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\pmb{\\mu}_{k}\\in\\mathbb{R}^{3}$ is the center position, $\\pmb{\\Sigma}_{k}\\in\\mathbb{R}^{3\\times3}$ is an anisotropic covariance matrix, and $\\pmb{x}\\in\\mathbb{R}^{3}$ is an arbitrary location in 3D space. The covariance matrix $\\Sigma_{k}$ is valid only when positive semi-definite, which is challenging to enforce during optimization. To ensure this condition, we learn $\\Sigma_{k}$ by decomposing it into two learnable components, a rotation matrix $\\scriptstyle R_{k}$ and a scaling matrix $S_{k}$ as follows: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\pmb{\\Sigma}_{k}:=\\pmb{R}_{k}\\pmb{S}_{k}\\pmb{S}_{k}^{\\top}\\pmb{R}_{k}^{\\top}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "In addition to the standard Gaussian parameters such as $\\pmb{\\mu}_{k},\\pmb{R}_{k}$ , and $\\boldsymbol{S}_{k}$ , the Gaussian primitive requires additional learnable parameters for its opacity, $\\alpha_{k}\\in[0,1]$ , and feature, $\\pmb{f}_{k}\\in\\mathbb{R}^{d}$ , which is typically represented by RGB colors or spherical harmonic (SH) coefficients. Thus, each Gaussian primitive is represented as $\\gamma_{k}:=(\\mu_{k},R_{k},S_{k},\\alpha_{k},f_{k})$ . ", "page_idx": 3}, {"type": "text", "text": "Differentiable rasterization Before rendering with the Gaussian primitives $\\Gamma$ on an image space, each 3D Gaussian kernel, $\\mathscr{G}_{k}(\\pmb{x};\\pmb{\\mu}_{k},\\pmb{\\Sigma}_{k})$ , is projected onto a 2D image space and forms a 2D Gaussian kernel, $\\mathscr{G}_{k}^{\\pi}(r;\\mu_{k}^{\\pi},\\Sigma_{k}^{\\pi})$ , where $\\pi:\\mathbb{R}^{3}\\overset{\\cdot}{\\rightarrow}\\bar{\\mathbb{R}}^{2}$ denotes a projection from the world coordinate to an image space. In the projected Gaussian representation, $r\\in\\mathbb{R}^{2}$ indicates a pixel location in an image, and the 2D mean $\\bar{\\mu}_{k}^{\\pi}\\in\\mathbb{R}^{2}$ and covariance $\\Sigma_{k}^{\\pi}\\in\\mathbb{R}^{2}$ are given by ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mu_{k}^{\\pi}:=\\pi(\\mu_{k})\\qquad\\mathrm{and}\\qquad\\Sigma_{k}^{\\pi}:=J W\\Sigma_{k}W^{\\top}J^{\\top},}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $_{J}$ denotes the Jacobian of the affine approximation of the projective transformation, and $W$ is the world-to-camera transform matrix. When rendering the primitives in $\\Gamma$ to a target camera, they are sorted by their depths with respect to the camera center. The color of a pixel $\\pmb{r}$ is then obtained by $\\alpha$ -blending, which is given by ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{I}}(\\boldsymbol{r}):=\\sum_{k=1}^{K}\\omega_{k}^{\\pi}(\\boldsymbol{r})c(f_{k},\\boldsymbol{r}),\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\omega_{k}^{\\pi}(r)$ represents a relative contribution of each Gaussian primitive to pixel $\\pmb{r}$ and $c(f_{k},r)$ is the color of a pixel $\\pmb{r}$ measured along the view direction. If a feature vector $\\scriptstyle f_{k}$ is based on spherical harmonics coefficients, the color is decoded from $\\scriptstyle f_{k}$ using the view direction associated with pixel $\\pmb{r}$ ; otherwise, the feature vector $\\scriptstyle f_{k}$ can be identical to the RGB color of the primitive. For more details, please refer to the original Gaussian Splatting paper [23]. Note that, following the $\\alpha$ -blending procedure in 3DGS [23], $\\omega_{k}^{\\pi}({\\boldsymbol{r}})$ is given by ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\omega_{k}^{\\pi}(\\boldsymbol{r}):=\\alpha_{k}\\mathcal{G}_{k}^{\\pi}(\\boldsymbol{r};\\mu_{k}^{\\pi},\\boldsymbol{\\Sigma}_{k}^{\\pi})\\prod_{j=1}^{k-1}\\left(1-\\alpha_{j}\\mathcal{G}_{j}^{\\pi}(\\boldsymbol{r};\\mu_{k}^{\\pi},\\boldsymbol{\\Sigma}_{k}^{\\pi})\\right),\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\alpha_{k}\\mathcal{G}_{k}^{\\pi}(\\boldsymbol{r};\\mu_{k}^{\\pi},\\Sigma_{k}^{\\pi})$ is the opacity of the $k^{\\mathrm{th}}$ projected primitive at the junction with a ray corresponding to pixel $\\pmb{r}$ and $\\textstyle\\prod_{j=1}^{k-1}\\left(\\cdot\\right)$ is the transmittance at the primitive $\\gamma_{k}$ on pixel $\\pmb{r}$ , which measure how much light penetrates the preceding primitives along the ray. ", "page_idx": 3}, {"type": "text", "text": "3.2 Deformation Modeling in 4D Gaussian Splatting ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "To represent 4D scenes using Gaussian splatting, recent algorithms [68, 18, 61, 31] deform the 3D Gaussian primitives from their canonical states to a target state over time. The transformed position $\\pmb{\\mu}^{t}$ , rotation $\\pmb{R}^{t}$ , and scale $S^{t}$ at time $t$ are given by ", "page_idx": 4}, {"type": "equation", "text": "$$\n(\\mu_{k}^{t},R_{k}^{t},S_{k}^{t})=(\\mu_{k}+\\phi_{\\mu}(\\mu_{k},t),R_{k}+\\phi_{r}(R_{k},t),S_{k}+\\phi_{s}(S_{k},t)),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where the deformation functions $\\phi_{\\mu}(\\cdot),\\;\\phi_{r}(\\cdot)$ , and $\\phi_{s}(\\cdot)$ can be various forms, including MLPs, learnable control points [18], Hexplane [5, 61], or polynomial functions. A deformed 3D Gaussian primitive at time $t$ is represented as $\\gamma_{k}(t):=(\\pmb{\\mu}_{k}^{t},\\pmb{\\bar{R}}_{k}^{t};\\pmb{S}_{k}^{t},\\alpha_{k},\\pmb{f}_{k})$ . The projection onto a 2D space follows the same procedure as the static 3D Gaussian splatting, presented in Equation (4). Our approach adopts the Hexplane structure for deformation, similar to [61]. ", "page_idx": 4}, {"type": "text", "text": "4 Uncertanty-Aware 4D Gaussian Splatting ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "4.1 Uncertainty-Aware Regularization ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "We now discuss the proposed uncertainty-aware regularization technique designed for the balance between reconstruction quality on training images and generalization to unseen views. ", "page_idx": 4}, {"type": "text", "text": "Uncertainty quantification We first estimate how informative each Gaussian primitive is for reconstruction, based on its visibility from all pixels in training images and its opacity, which is given by ", "page_idx": 4}, {"type": "equation", "text": "$$\nC_{k}=\\sum_{\\mathbf{I}\\in\\mathcal{T}}\\sum_{r}\\omega_{k}^{\\pi}(\\pmb{r}),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\pmb{r}$ is a pixel in a training image $\\mathbf{I}\\in\\mathcal{T}$ , and $\\omega_{k}^{\\pi}({\\boldsymbol{r}})$ is the contribution of each Gaussian primitive $\\gamma_{k}$ to pixel $\\pmb{r}$ during $\\alpha$ -blending, as described in Equation (5). For the computation of this value, we customize the CUDA kernel to modify the backward process of the 3DGS [23]. ", "page_idx": 4}, {"type": "text", "text": "The parameters of an informative Gaussian primitive are typically estimated accurately with high confidence. Conversely, a Gaussian primitive that is not properly supported by training images struggles with low accuracy and high uncertainty of its parameter estimation. Based on these observations, the uncertainty of each Gaussian primitive, $U_{k}$ , is defined as ", "page_idx": 4}, {"type": "equation", "text": "$$\nU_{k}=1-{\\tt S i g m o i d}(C_{k};c_{0},c_{1}),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where the sigmoid function is used to bound and normalize $C_{k}$ and $\\{c_{0},c_{1}\\}$ control the inflection point shift and the slope of the sigmoid function, respectively. Given an arbitrary unseen viewpoint, a 2D uncertainty map $\\mathbf{U}$ is constructed using $\\alpha$ -blending as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{U}(r)=\\sum_{k=1}^{K}\\omega_{k}^{\\pi}(r)U_{k},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\pmb{r}$ is a pixel in the uncertainty map U. We employ the estimated uncertainty map for the adaptive regularization to unseen views. Specifically, we adopt a diffusion prior as well as a depth smoothing prior and the details of these two priors are discussed next. ", "page_idx": 4}, {"type": "text", "text": "Uncertainty-aware diffusion-based regularization To render natural-looking images for novel views and times, we incorporate Stable Diffusion [44] into our pipeline. We begin by generating text prompts from the training frames using the vision-language model BLIP [28]. These prompts guide fine-tuning of the diffusion model via DreamBooth [45] with the training images, which aligns the model\u2019s understanding to the specific content in the training images as discussed in the image-to-3D reconstruction algorithm [42]. Using this fine-tuned model, we produce a refined image, IDDIM from the rendered image $\\hat{\\bf I}$ for novel views or times. Specifically, we first encode $\\hat{\\bf I}$ into the latent space using the latent diffusion encoder Enc, then perturb it into a noisy latent representation as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathbf{x}_{t}={\\sqrt{\\bar{\\alpha}_{t}}}\\mathrm{Enc}({\\hat{\\mathbf{I}}})+{\\sqrt{1-{\\bar{\\alpha}_{t}}}}\\epsilon,\\quad{\\mathrm{where}}\\quad\\epsilon\\sim{\\mathcal{N}}(\\mathbf{0},I)\\quad{\\mathrm{and}}\\quad t\\in[0,T],\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\bar{\\alpha}_{t}$ is a scalar value that controls the noise level and $t$ is a diffusion time step. Similar to SDEdit [32], we generate IDDIM by performing the DDIM sampling [54] over $k=\\lfloor50\\cdot\\frac{t}{T}\\rfloor$ steps and running the diffusion decoder Dec as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{{\\mathbf I}_{\\mathrm{DDIM}}=\\mathrm{Dec}(\\mathrm{DDIM}(\\mathbf x_{t},\\mathbf v)),}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\pmb{v}$ is the text embedding of the prompt from BLIP. Applying a reconstruction loss between $\\hat{\\bf I}$ and IDDIM is helpful for generating natural-looking images for unseen views; however, it may compromise reconstruction quality because IDDIM sometimes contains misaligned context with the actual 3D scene inherent in the training images. To achieve accurate and realistic reconstruction by balancing the two properties, we propose uncertainty-aware diffusion loss, $\\scriptstyle{\\mathcal{L}}_{\\mathrm{UA-diff}}$ . This loss applies the estimated uncertainty to the computation of the reconstruction error between the synthesized image, $\\hat{\\bf I}$ and the corresponding DDIM-sampled image, IDDIM, where uncertain regions are more regularized than low-uncertainty regions\u2014where the training data already provide sufficient reconstruction detail\u2014as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{UA-diff}}=\\frac{|\\mathbf{U}\\cdot(\\hat{\\mathbf{I}}-\\mathbf{I}_{\\mathrm{DDM}})|_{2}}{|\\mathbf{U}|_{2}}+\\frac{|\\mathbf{U}\\cdot(\\hat{\\mathbf{I}}-\\mathbf{I}_{\\mathrm{DDM}})|_{1}}{|\\mathbf{U}|_{1}},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\mathbf{U}$ is the uncertainty map of the unseen view and $\\cdot$ denotes element-wise product. Since the DDIM sampling for generating IDDIM is time-consuming, performing it every iteration could slow down the training process, which is not desirable. To avoid the computational burden for training, we randomly sample 200 images at the beginning of every 2,000 iterations, refine them by DDIM, and store them in memory. During the next 2,000 iterations, we utilize the stored images to compute the diffusion-based regularization term, ${\\mathcal{L}}_{\\mathrm{UA}}$ -diff. ", "page_idx": 5}, {"type": "text", "text": "Uncertainty-aware depth smoothing regularization We introduce an additional regularization term to encourage smooth depth predictions in uncertain regions. To this end, we first generate a depth map $\\mathbf{D}$ for unseen views using an $\\alpha$ -blending method as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{D}}(r)=\\sum_{k=1}^{K}\\omega_{k}^{\\pi}({\\boldsymbol{r}})d_{k},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\pmb{r}\\in\\mathbb{R}^{2}$ is a pixel coordinate in the depth map $\\hat{\\bf D}$ , and $d_{k}$ denotes the depth at the center of the $k^{\\mathrm{th}}$ Gaussian with respect to the camera center. We employ the total variation to regularize the estimated depth map $\\hat{\\bf D}$ , which promotes smooth depth transitions between neighboring pixels. However, the uniform total variation loss over all pixels produces blur artifacts on accurately predicted regions, resulting in large reconstruction error. To address this drawback, we propose an uncertaintyaware total variation loss, $\\scriptstyle{\\mathcal{L}}_{\\mathrm{UA-TV}}$ , which applies stronger smoothing to high-uncertainty regions for noise reduction in the depth map, while leaving low-uncertainty areas unregularized to preserve details. Our uncertainty-aware total variation loss is given by ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{UA-TV}}=\\frac{1}{u_{r}}\\sum_{i,j}\\frac{\\mathbf{U}_{i,j}+\\mathbf{U}_{i+1,j}}{2}\\cdot|\\hat{\\mathbf{D}}_{i,j}-\\hat{\\mathbf{D}}_{i+1,j}|+\\frac{1}{u_{c}}\\sum_{i,j}\\frac{\\mathbf{U}_{i,j}+\\mathbf{U}_{i,j+1}}{2}\\cdot|\\hat{\\mathbf{D}}_{i,j}-\\hat{\\mathbf{D}}_{i,j+1}|,\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\hat{\\mathbf{D}}_{i,j}$ is the estimated depth at pixel $(i,j)$ and $u_{r}$ and $u_{c}$ respectively denote the sums of the average uncertainties of vertically and horizontally adjacent pixels, in other words, $\\begin{array}{r}{u_{r}=\\sum_{i,j}\\frac{\\mathbf{U}_{i,j}+\\mathbf{U}_{i+1,j}}{2}}\\end{array}$ $\\begin{array}{r}{u_{c}=\\sum_{i,j}\\frac{\\mathbf{U}_{i,j}+\\mathbf{U}_{i,j+1}}{2}}\\end{array}$ ", "page_idx": 5}, {"type": "text", "text": "4.2 Dynamic Region Densification ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Existing 4D Gaussian Splattings initialize Gaussian primitives using point clouds obtained from Structure from Motion (SfM) [47]. However, since SfM assumes static scenes, it is fundamentally unable to reconstruct dynamic regions, particularly those involving rapid motion, as shown in Figure 2c. This failure occurs because the algorithm treats dynamic regions as noise, leaving these areas without initialized primitives. Such incomplete initialization disrupts the training process, causing primitives in static regions to be repeatedly cloned and split in an attempt to flil the dynamic areas. This leads to an excessive number of primitives and, in some case, out-of-memory issues. ", "page_idx": 5}, {"type": "image", "img_path": "0sycTGl4In/tmp/e4f385b63000ee6ac6f91c71d501014fefc3603b3c56ece2501d80f40ebe5b35.jpg", "img_caption": ["Figure 2: Visualization of the dynamic region densification on the Backpack scene. Since SfM [47] is designed for static scenes, it fails to properly initialize Gaussian primitives in dynamic regions. Our dynamic region densification module initializes additional Gaussian primitives in the identified dynamic regions using scene flow and depth map. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "To address this limitation, we propose a dynamic region densification that initializes additional Gaussian primitives $\\Gamma^{\\prime}=\\{\\gamma_{1}^{\\prime},...,\\bar{\\gamma}_{K}^{\\prime}\\}$ in dynamic regions. To this end, we first identify dynamic pixels in the training images using scene flows [71] and randomly select a subset of the pixels. For each selected pixel $\\pmb{r}$ , the corresponding Gaussian primitive $\\gamma_{k}^{\\prime}$ is initialized with position $\\pmb{\\mu_{k}}$ and feature vector $f_{k}$ as: ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mu_{k}=\\pi^{-1}\\left(r,\\mathbf{D}(r)\\right)\\qquad\\mathrm{and}\\qquad\\left[f_{k}^{(0)},f_{k}^{(1)},f_{k}^{(2)}\\right]=\\mathbf{I}(r),}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where ${\\bf D}(r)$ is the depth value of pixel $\\pmb{r}$ estimated from [71], and $\\pi^{-1}$ is the inverse projection function that reprojects $\\pmb{r}$ into 3D space. The feature vector $f_{k}$ encodes the information of the $k^{\\mathrm{th}}$ Gaussian primitive, where its first three components are set to the RGB colors of pixel $\\pmb{r}$ in an image I and the rest of dimensions, which are optional for the spherical harmonics representation, are padded to zeros. This method provides reasonable placements of Gaussian primitives in dynamic regions as shown in Figure 2d. ", "page_idx": 6}, {"type": "text", "text": "4.3 Data-Driven Losses ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Since the dynamic scene reconstruction from casually recorded monocular video is a highly ill-posed problem, we apply the additional data-driven losses based on depth and flow maps. The depth-driven loss is defined by the difference between the depth maps $\\hat{\\bf D}$ and $\\mathbf{D}$ , which are respectively obtained via the $\\alpha$ -blending shown in Equation (13) and the algorithm proposed in [71], as shown in the following equation: ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{\\mathrm{depth}}=|\\hat{\\mathbf{D}}-\\mathbf{D}|_{1}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "The flow-driven loss is analogously defined. Given two frames $\\Pi$ and $\\Pi^{\\prime}$ , the flow of a pixel $\\pmb{r}$ is estimated using $\\alpha$ -blending, which is expressed by ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{F}}^{\\Pi\\rightarrow\\Pi^{\\prime}}(r)=\\sum_{k=1}^{K}\\omega_{k}^{\\pi}(r)F_{k}^{\\Pi\\rightarrow\\Pi^{\\prime}},\\qquad\\mathrm{where}\\qquad F_{k}^{\\Pi\\rightarrow\\Pi^{\\prime}}=\\pi^{\\prime}(\\mu_{k}^{t^{\\prime}})-\\pi(\\mu_{k}^{t}),\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where F \u03a0\u2192\u03a0\u2032 represents the deformation of the $k^{\\mathrm{th}}$ Gaussian primitive from frame $\\Pi$ to frame $\\Pi^{\\prime}$ in the projected image space, where $(\\pi,t)$ and $(\\pi^{\\prime},t^{\\prime})$ denote the projection function and timestamp associated with frames $\\Pi$ and $\\Pi^{\\prime}$ , respectively. Similar to $\\mathcal{L}_{\\mathrm{depth}}$ , the data-driven loss for flow is defined by ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\mathcal{L}_{\\mathrm{flow}}=|\\hat{\\mathbf{F}}^{\\Pi\\rightarrow\\Pi^{\\prime}}-\\mathbf{F}^{\\Pi\\rightarrow\\Pi^{\\prime}}|_{1},\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where F is an optical flow map obtained from RAFT [57]. ", "page_idx": 6}, {"type": "text", "text": "The final data-driven loss, $\\mathcal{L}_{\\mathrm{data}}$ , is defined as the sum of the two data-driven loss terms, as shown in the following equation: ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathcal{L}_{\\mathrm{data}}=\\mathcal{L}_{\\mathrm{depth}}+\\mathcal{L}_{\\mathrm{flow}}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "4.4 Total Loss ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "To train our uncertainty-award 4D Gaussian splatting models, the total loss function is given by ", "page_idx": 7}, {"type": "equation", "text": "$$\n\\mathcal{L}=\\mathcal{L}_{\\mathrm{recon}}+\\lambda_{\\mathrm{grid}}\\mathcal{L}_{\\mathrm{grid}}+\\lambda_{\\mathrm{data}}\\mathcal{L}_{\\mathrm{data}}+\\lambda_{\\mathrm{UA-diff}}\\mathcal{L}_{\\mathrm{UA-diff}}++\\lambda_{\\mathrm{UA-TV}}\\mathcal{L}_{\\mathrm{UA-TV}},\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "where ${\\mathcal{L}}_{\\mathrm{recon}}$ is the standard reconstruction loss based on training images, $\\mathcal{L}_{\\mathrm{grid}}$ is a loss term associated with the Hexplane-based deformation adopted in our baseline [61], and $\\{\\bar{\\lambda_{\\mathrm{grid}}},\\lambda_{\\mathrm{data}},\\lambda_{\\mathrm{UA-diff}},\\lambda_{\\mathrm{UA-TV}}\\}$ are balancing hyperparameters for individual loss terms. ", "page_idx": 7}, {"type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "This section compares the proposed method, referred to as UA-4DGS, with existing 4D Gaussian splatting algorithms including D-3DGS [68], Zhan et al. [31], and 4DGS [61]. Our method is implemented based on the official code of 4DGS [61] and tested on a single RTX A5000 GPU. ", "page_idx": 7}, {"type": "text", "text": "5.1 Settings ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Dataset Our primary goal is to reconstruct dynamic scenes from casually recorded monocular videos, for which we use DyCheck [14] as our main dataset. This dataset consists of monocular videos captured with a single handheld camera, featuring scenes with fast motion to provide a challenging and realistic scenario for dynamic scene reconstruction. The DyCheck dataset includes 14 videos; however, only the half of scenes\u2014apple, block, paper-windmill, teddy, space-out, spin, and wheel\u2014are suitable for evaluation due to the availability of held-out views. ", "page_idx": 7}, {"type": "text", "text": "Evaluation protocol To evaluate novel view rendering quality, we use three metrics: peak signalto-noise ratio (PSNR), structural similarity (SSIM), and a perceptual metric called learned perceptual image patch similarity (LPIPS). Additionally, since our target dataset provides a co-visibility mask, we also compute masked versions of these metrics, mPSNR, mSSIM, and mLPIPS, focusing on co-visible regions. For masked evaluations, we employ the JAX implementation provided by DyCheck [14]. ", "page_idx": 7}, {"type": "text", "text": "5.2 Experimental Results ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Table 1 presents the quantitative comparison of our algorithm against existing methods based on 4D Gaussian Splatting [68, 61, 31] and MLPs [39] on the DyCheck dataset [14]. Our approach, UA-4DGS, surpasses the performance of all other 4D Gaussian Splatting algorithms across all metrics. Figure 3 shows qualitative results on the space-out, paper-windmill, teddy, and spin scenes, where UA-4DGS synthesizes more realistic images, clearly outperforming existing 4D Gaussian Splatting algorithms. ", "page_idx": 7}, {"type": "text", "text": "Although Gaussian Splatting generally outperforms MLP-based approaches on multi-view or less challenging datasets, our experiments show that they fall behind MLP-based methods in our target setting based on casually recorded videos with a monocular handheld camera as presented in Table 1. This is probably because the methods based on Gaussian Splatting focus more on local optimization with respect to individual Gaussian primitives and, consequently, are prone to overftiting to training images in in-the-wild monocular scenarios. ", "page_idx": 7}, {"type": "text", "text": "5.3 Analysis ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Generalization to static scenes To demonstrate the generality of our method in static scene reconstruction, we incorporate the proposed uncertainty-aware regularization to FSGS [72], a fewshot Gaussian Splatting algorithm for static scenes, and refer to this version of our model as UA-FSGS. We test both FSGS and UA-3DGS on the LLFF dataset [33] using three training images with five different runs. Table 2 presents quantitative comparisons where UA-3DGS outperforms existing methods, including both the original results and our reproduced ones of FSGS. ", "page_idx": 7}, {"type": "text", "text": "Ablation study Table 3 shows the results of the ablation study on each proposed component. Dynamic region densification improves performance compared to the data-driven loss alone, implying that better alignment of primitives with scene geometry enhances the effectiveness of the loss term. Moreover, uncertainty-aware regularization yields further improvements, where $\\mathcal{L}_{\\mathrm{UA-diff}}$ provides substantial benefits, and adding ${\\mathcal{L}}_{\\mathrm{UA-TV}}$ results in additional gains. ", "page_idx": 7}, {"type": "table", "img_path": "0sycTGl4In/tmp/bc9cbafea3e1f8d9e8aaa3649796cd9532e7dcd900703356e0ed1a7bd20cd47c.jpg", "table_caption": ["Table 1: Quantitative comparisons on a challenging dataset, DyCheck. Our approach shows the best performance among 4D Gaussian Splatting-based methods. However, Gaussian Splatting is generally worse than MLP-based methods in more challenging settings with casually recorded videos using a monocular handheld camera. "], "table_footnote": [], "page_idx": 8}, {"type": "table", "img_path": "0sycTGl4In/tmp/4c7dade8a5440bb4adfc173c1b665710f2c85c977e5e9037e8d45093f156d26d.jpg", "table_caption": ["Table 2: Few-shot novel view synthesis results with three views for static scenes, tested on the LLFF [33] dataset. Our method significantly outperforms existing methods across all metrics. $\\mathrm{FSGS^{\\dagger}}$ and UA-3DGS were tested over five runs, with $(\\dagger)$ indicating reproduced results. Results for other methods are taken from [72] and [7]. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Impact of uncertainty consideration To evaluate the impact of incorporating uncertainty, we test regularization methods without uncertainty consideration, where we refer to this version as $\\mathcal{L}_{\\mathrm{diff}}$ and ${\\mathcal{L}}_{\\mathrm{TV}}$ , respectively. Table 4 shows both train and test performance; while $\\mathcal{L}_{\\mathrm{diff}}$ and ${\\mathcal{L}}_{\\mathrm{TV}}$ are still effective for test performance, they exhibit underftiting on training images with lower reconstruction performance. In contrast, by integrating uncertainty through $\\mathcal{L}_{\\mathrm{UA-diff}}$ and ${\\mathcal{L}}_{\\mathrm{UA-TV}}$ , we can enhance the balance between training reconstruction quality and test performance in novel view synthesis. ", "page_idx": 8}, {"type": "text", "text": "6 Conclusions ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We proposed a novel training framework for 4D Gaussian Splatting, targeting dynamic scenes captured from casually recorded monocular cameras. Our uncertainty-aware regularizations, which incorporate diffusion and depth-smoothness priors, effectively improve novel view synthesis performance while preserving reconstruction quality on training images. Additionally, we addressed the initialization challenges of Gaussian primitives in fast-moving scenes by introducing dynamic region densification. Our method demonstrated performance gains over baseline approaches, both in dynamic scene reconstructions and few-shot static scene reconstructions. We conducted a detailed analysis through extensive experiments, and we believe this work initiates research on an important, emerging problem in 4D Gaussian Splatting, offering valuable insights to the field. ", "page_idx": 8}, {"type": "text", "text": "Limitations and future work Novel view synthesis performance on casually recorded monocular videos still lags behind that on multi-view or simpler datasets, highlighting potential areas for improvement in future research. Currently, our regularization techniques rely on image-level regularization using 2D uncertainty maps; future work could enhance this by incorporating regularization in the Gaussian primitive level [64, 19] to directly leverage each Gaussian primitive\u2019s uncertainty. Additionally, our dynamic region densification does not consider temporal consistency for primitive initialization, but this issue may be addressed by integrating long-term tracking algorithms [9]. ", "page_idx": 8}, {"type": "table", "img_path": "0sycTGl4In/tmp/95b3c54a1c93dbbb1f14440ae841c8155c2375cada2c495e2913550ec90c62de.jpg", "table_caption": ["Table 3: Ablation test results of our training schemes on the spin scene in the DyCheck [14] dataset. Dynamic Dens. refers to dynamic region densification. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "Table 4: Quantitative comparison of regularization methods with and without uncertainty estimation on the static room scene in the LLFF dataset, where FSGS [72] are used as the baseline. Incorporating uncertainty into the regularization improves novel view synthesis by enhancing the balance between reconstruction quality on training images and performance on novel views. ", "page_idx": 9}, {"type": "table", "img_path": "0sycTGl4In/tmp/986585f05ae6f4a0294650f59e1f60a7242fa90e885ff5a9f4cdf857703e1fcb.jpg", "table_caption": [], "table_footnote": [], "page_idx": 9}, {"type": "image", "img_path": "0sycTGl4In/tmp/bb1d1b4f3771a232ef90b863cd97e41250873e4edb6a19feb3d8b83be531e766.jpg", "img_caption": ["Figure 3: Qualitative results on the space-out, paper-windmill, teddy, and spin scenes in the DyCheck dataset. UA-4DGS (Ours) shows outstanding quality of rendered images compared to existing methods, including D-3DGS [68], Zhan et al. [31], and 4DGS [61] "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was partly supported by Samsung Advanced Institute of Technology (SAIT), and by the Institute of Information & Communications Technology Planning & Evaluation (IITP) [No.RS2022-II220959 (No.2022-0-00959), No.RS-2021-II211343, No.RS-2021-II212068] and the National Research Foundation (NRF) [No.RS-2021-NR056445 (No.2021M3A9E408078222)] funded by the Korea government (MSIT). ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] J. An. Model development with vessl, 2023. URL https://www.vessl.ai/. Software available from vessl.ai.   \n[2] J. Bai, L. Huang, W. Gong, J. Guo, and Y. Guo. Self-nerf: A self-training pipeline for few-shot neural radiance fields. arXiv:2303.05775, 2023.   \n[3] J. T. Barron, B. Mildenhall, M. Tancik, P. Hedman, R. Martin-Brualla, and P. P. Srinivasan. Mip-nerf: A multiscale representation for anti-aliasing neural radiance fields. In ICCV, 2021.   \n[4] M. Bonotto, L. Sarrocco, D. Evangelista, M. Imperoli, and A. Pretto. Combinerf: A combination of regularization techniques for few-shot neural radiance field view synthesis. arXiv:2403.14412, 2024.   \n[5] A. Cao and J. Johnson. Hexplane: A fast representation for dynamic scenes. In CVPR, 2023.   \n[6] A. Chen, Z. Xu, A. Geiger, J. Yu, and H. Su. Tensorf: Tensorial radiance fields. In ECCV, 2022.   \n[7] J. Chung, J. Oh, and K. M. Lee. Depth-regularized optimization for 3d gaussian splatting in few-shot images. arXiv:2311.13398, 2023.   \n[8] K. Deng, A. Liu, J.-Y. Zhu, and D. Ramanan. Depth-supervised nerf: Fewer views and faster training for free. In CVPR, 2022.   \n[9] C. Doersch, Y. Yang, M. Vecerik, D. Gokay, A. Gupta, Y. Aytar, J. Carreira, and A. Zisserman. Tapir: Tracking any point with per-frame initialization and temporal refinement. In ICCV, 2023.   \n[10] Y. Du, Y. Zhang, H.-X. Yu, J. B. Tenenbaum, and J. Wu. Neural radiance flow for 4d view synthesis and video processing. In ICCV, 2021.   \n[11] J. Fang, T. Yi, X. Wang, L. Xie, X. Zhang, W. Liu, M. Nie\u00dfner, and Q. Tian. Fast dynamic radiance fields with time-aware neural voxels. In SIGGRAPH Asia, 2022.   \n[12] S. Fridovich-Keil, G. Meanti, F. R. Warburg, B. Recht, and A. Kanazawa. K-planes: Explicit radiance fields in space, time, and appearance. In CVPR, 2023.   \n[13] C. Gao, A. Saraf, J. Kopf, and J.-B. Huang. Dynamic view synthesis from dynamic monocular video. In ICCV, 2021.   \n[14] H. Gao, R. Li, S. Tulsiani, B. Russell, and A. Kanazawa. Monocular dynamic view synthesis: A reality check. In NeurIPS, 2022.   \n[15] S. J. Garbin, M. Kowalski, M. Johnson, J. Shotton, and J. Valentin. Fastnerf: High-fidelity neural rendering at 200fps. In ICCV, 2021.   \n[16] S. Guo, Q. Wang, Y. Gao, R. Xie, and L. Song. Depth-guided robust and fast point cloud fusion nerf for sparse input views. In AAAI, 2024.   \n[17] S. Hu, K. Zhou, K. Li, L. Yu, L. Hong, T. Hu, Z. Li, G. H. Lee, and Z. Liu. Consistentnerf: Enhancing neural radiance fields with 3d consistency for sparse view synthesis. arXiv:2305.11031, 2023.   \n[18] Y.-H. Huang, Y.-T. Sun, Z. Yang, X. Lyu, Y.-P. Cao, and X. Qi. Sc-gs: Sparse-controlled gaussian splatting for editable dynamic scenes. In CVPR, 2024.   \n[19] J. Hyung, S. Hong, S. Hwang, J. Lee, J. Choo, and J.-H. Kim. Effective rank analysis and regularization for enhanced 3d gaussian splatting. arXiv preprint arXiv:2406.11672, 2024.   \n[20] A. Jain, M. Tancik, and P. Abbeel. Putting nerf on a diet: Semantically consistent few-shot view synthesis. In ICCV, 2021.   \n[21] W. Jiang, B. Lei, and K. Daniilidis. Fisherrf: Active view selection and uncertainty quantification for radiance fields using fisher information. In ECCV, 2024.   \n[22] D. Kanaoka, M. Sonogashira, H. Tamukoh, and Y. Kawanishi. Manifoldnerf: View-dependent image feature supervision for few-shot neural radiance fields. arXiv:2310.13670, 2023.   \n[23] B. Kerbl, G. Kopanas, T. Leimk\u00fchler, and G. Drettakis. 3d gaussian splatting for real-time radiance field rendering. In ACM ToG, 2023.   \n[24] I. Kim, M. Choi, and H. J. Kim. Up-nerf: Unconstrained pose prior-free neural radiance field. In NeurIPS, 2023.   \n[25] M. Kim, S. Seo, and B. Han. Infonerf: Ray entropy minimization for few-shot neural volume rendering. In CVPR, 2022.   \n[26] M.-S. Kwak, J. Song, and S. Kim. Geconerf: Few-shot neural radiance fields via geometric consistency. In ICML, 2023.   \n[27] S. Lee, L. Chen, J. Wang, A. Liniger, S. Kumar, and F. Yu. Uncertainty guided policy for active robotic 3d reconstruction using neural radiance fields. IEEE Robotics and Automation Letters, 2022.   \n[28] J. Li, D. Li, C. Xiong, and S. Hoi. Blip: Bootstrapping language-image pre-training for unified vision-language understanding and generation. In ICML, 2022.   \n[29] T. Li, M. Slavcheva, M. Zollhoefer, S. Green, C. Lassner, C. Kim, T. Schmidt, S. Lovegrove, M. Goesele, R. Newcombe, et al. Neural 3d video synthesis from multi-view video. In CVPR, 2022.   \n[30] Z. Li, S. Niklaus, N. Snavely, and O. Wang. Neural scene flow fields for space-time view synthesis of dynamic scenes. In CVPR, 2021.   \n[31] Z. Li, Z. Chen, Z. Li, and Y. Xu. Spacetime gaussian feature splatting for real-time dynamic view synthesis. In CVPR, 2024.   \n[32] C. Meng, Y. He, Y. Song, J. Song, J. Wu, J.-Y. Zhu, and S. Ermon. Sdedit: Guided image synthesis and editing with stochastic differential equations. In ICLR, 2022.   \n[33] B. Mildenhall, P. P. Srinivasan, R. Ortiz-Cayon, N. K. Kalantari, R. Ramamoorthi, R. $\\mathrm{Ng}$ , and A. Kar. Local light field fusion: Practical view synthesis with prescriptive sampling guidelines. In SIGGRAPH, 2019.   \n[34] B. Mildenhall, P. P. Srinivasan, M. Tancik, J. T. Barron, R. Ramamoorthi, and R. Ng. Nerf: Representing scenes as neural radiance fields for view synthesis. In ECCV, 2020.   \n[35] T. M\u00fcller, A. Evans, C. Schied, and A. Keller. Instant neural graphics primitives with a multiresolution hash encoding. ACM TOG, 2022.   \n[36] M. Niemeyer, J. T. Barron, B. Mildenhall, M. S. Sajjadi, A. Geiger, and N. Radwan. Regnerf: Regularizing neural radiance fields for view synthesis from sparse inputs. In CVPR, 2022.   \n[37] X. Pan, Z. Lai, S. Song, and G. Huang. Activenerf: Learning where to see with uncertainty estimation. In ECCV, 2022.   \n[38] K. Park, U. Sinha, J. T. Barron, S. Bouaziz, D. B. Goldman, S. M. Seitz, and R. Martin-Brualla. Nerfies: Deformable neural radiance fields. ICCV, 2021.   \n[39] K. Park, U. Sinha, P. Hedman, J. T. Barron, S. Bouaziz, D. B. Goldman, R. Martin-Brualla, and S. M. Seitz. Hypernerf: A higher-dimensional representation for topologically varying neural radiance fields. ACM Trans. Graph., 2021.   \n[40] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, et al. Pytorch: An imperative style, high-performance deep learning library, 2019.   \n[41] A. Pumarola, E. Corona, G. Pons-Moll, and F. Moreno-Noguer. D-nerf: Neural radiance fields for dynamic scenes. In CVPR, 2021.   \n[42] G. Qian, J. Mai, A. Hamdi, J. Ren, A. Siarohin, B. Li, H.-Y. Lee, I. Skorokhodov, P. Wonka, S. Tulyakov, et al. Magic123: One image to high-quality 3d object generation using both 2d and 3d diffusion priors. In ICLR, 2024.   \n[43] B. Roessle, J. T. Barron, B. Mildenhall, P. P. Srinivasan, and M. Nie\u00dfner. Dense depth priors for neural radiance fields from sparse input views. In CVPR, 2022.   \n[44] R. Rombach, A. Blattmann, D. Lorenz, P. Esser, and B. Ommer. High-resolution image synthesis with latent diffusion models. In CVPR, 2022.   \n[45] N. Ruiz, Y. Li, V. Jampani, Y. Pritch, M. Rubinstein, and K. Aberman. Dreambooth: Fine tuning text-to-image diffusion models for subject-driven generation. In CVPR, 2023.   \n[46] L. Savant, D. Valsesia, and E. Magli. Modeling uncertainty for gaussian splatting. arXiv preprint arXiv:2403.18476, 2024.   \n[47] J. L. Schonberger and J.-M. Frahm. Structure-from-motion revisited. In CVPR, 2016.   \n[48] S. Seo, Y. Chang, and N. Kwak. Flipnerf: Flipped reflection rays for few-shot novel view synthesis. In ICCV, 2023.   \n[49] S. Seo, D. Han, Y. Chang, and N. Kwak. Mixnerf: Modeling a ray with mixture density for novel view synthesis from sparse inputs. In CVPR, 2023.   \n[50] R. Shao, Z. Zheng, H. Tu, B. Liu, H. Zhang, and Y. Liu. Tensor4d: Efficient neural 4d decomposition for high-fidelity dynamic reconstruction and rendering. In CVPR, 2023.   \n[51] J. Shen, A. Ruiz, A. Agudo, and F. Moreno-Noguer. Stochastic neural radiance fields: Quantifying uncertainty in implicit 3d representations. In 3DV, 2021.   \n[52] J. Shen, A. Agudo, F. Moreno-Noguer, and A. Ruiz. Conditional-flow nerf: Accurate 3d modelling with reliable uncertainty quantification. In ECCV, 2022.   \n[53] N. Somraj and R. Soundararajan. Vip-nerf: Visibility prior for sparse input neural radiance fields. In SIGGRAPH Conference, 2023.   \n[54] J. Song, C. Meng, and S. Ermon. Denoising diffusion implicit models. arXiv:2010.02502, 2020.   \n[55] J. Song, S. Park, H. An, S. Cho, M.-S. Kwak, S. Cho, and S. Kim. D\u00e4rf: Boosting radiance fields from sparse input views with monocular depth adaptation. In NeurIPs, 2023.   \n[56] N. S\u00fcnderhauf, J. Abou-Chakra, and D. Miller. Density-aware nerf ensembles: Quantifying predictive uncertainty in neural radiance fields. In ICRA, 2023.   \n[57] Z. Teed and J. Deng. Raft: Recurrent all-pairs field transforms for optical flow. In ECCV, 2020.   \n[58] P. Truong, M.-J. Rakotosaona, F. Manhardt, and F. Tombari. Sparf: Neural radiance fields from sparse and noisy poses. In CVPR, 2023.   \n[59] G. Wang, Z. Chen, C. C. Loy, and Z. Liu. Sparsenerf: Distilling depth ranking for few-shot novel view synthesis. In CVPR, 2023.   \n[60] L. Wang, J. Zhang, X. Liu, F. Zhao, Y. Zhang, Y. Zhang, M. Wu, J. Yu, and L. Xu. Fourier plenoctrees for dynamic radiance field rendering in real-time. In CVPR, 2022.   \n[61] G. Wu, T. Yi, J. Fang, L. Xie, X. Zhang, W. Wei, W. Liu, Q. Tian, and X. Wang. 4d gaussian splatting for real-time dynamic scene rendering. In CVPR, 2024.   \n[62] J. Wynn and D. Turmukhambetov. Diffusionerf: Regularizing neural radiance fields with denoising diffusion models. In CVPR, 2023.   \n[63] Y. Xiao, X. Liu, D. Zhai, K. Jiang, J. Jiang, and X. Ji. Sgcnerf: Few-shot neural rendering via sparse geometric consistency guidance. arXiv:2404.00992, 2024.   \n[64] T. Xie, Z. Zong, Y. Qiu, X. Li, Y. Feng, Y. Yang, and C. Jiang. Physgaussian: Physics-integrated 3d gaussians for generative dynamics. In CVPR, 2024.   \n[65] D. Xu, Y. Jiang, P. Wang, Z. Fan, H. Shi, and Z. Wang. Sinnerf: Training neural radiance fields on complex scenes from a single image. In ECCV, 2022.   \n[66] D. Yan, J. Liu, F. Quan, H. Chen, and M. Fu. Active implicit object reconstruction using uncertainty-guided next-best-view optimization. IEEE Robotics and Automation Letters, 2023.   \n[67] J. Yang, M. Pavone, and Y. Wang. Freenerf: Improving few-shot neural rendering with free frequency regularization. In CVPR, 2023.   \n[68] Z. Yang, X. Gao, W. Zhou, S. Jiao, Y. Zhang, and X. Jin. Deformable 3d gaussians for high-fidelity monocular dynamic scene reconstruction. In CVPR, 2024.   \n[69] J. S. Yoon, K. Kim, O. Gallo, H. S. Park, and J. Kautz. Novel view synthesis of dynamic scenes with globally coherent depths from a monocular camera. In CVPR, 2020.   \n[70] H. Zhan, J. Zheng, Y. Xu, I. Reid, and H. Rezatofighi. Activermap: Radiance field for active mapping and planning. arXiv:2211.12656, 2022.   \n[71] Z. Zhang, F. Cole, R. Tucker, W. T. Freeman, and T. Dekel. Consistent depth of moving objects in video. ACM TOG, 2021.   \n[72] Z. Zhu, Z. Fan, Y. Jiang, and Z. Wang. Fsgs: Real-time few-shot view synthesis using gaussian splatting. 2024. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Appendix ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "A.1 Per-Scene Breakdown ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "DyCheck dataset Supplementing Table 1 of the main paper, we show the experimental results from individual scenes in terms of mPSNR (PSNR), mSSIM (SSIM), and mLPIPS (LPIPS) in Table 5 As shown in the table, UA-4DGS achieves consistent improvement over its baselines across all metrics. ", "page_idx": 14}, {"type": "table", "img_path": "0sycTGl4In/tmp/081f25e776cbd527022950f4fe31519426d46a779e3c583d210c2b28d66fe82d.jpg", "table_caption": ["Table 5: Breakdown results on the DyCheck dataset. The value in (\u00b7) represents the non-masked version of the corresponding evaluation measure. "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "LLFF dataset Supplementing Table 2 of the main paper, we show the experimental results from individual scenes in terms of PSNR, SSIM, and LPIPS in Table 6. As shown in the table, UA-3DGS achieves consistent improvement over its baselines across all metrics. ", "page_idx": 14}, {"type": "table", "img_path": "0sycTGl4In/tmp/19a16f232dcccd21e4ee8a7086b20792301863b9768fc2cf097d5fd0376b5826.jpg", "table_caption": ["Table 6: Breakdown results on the LLFF dataset. "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "A.2 Implementation Details ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Our method is implemented based on the publicly available official code 1 of 4D Gaussian Splatting (4DGS) [61], using PyTorch [40]. Following our baseline, we utilize the Adam optimizer and set the resolution of the Hexplane grid to (64, 64, 64, 150). For grid smoothness in the Hexplane, we follow the default value of 4DGS. We use the DyCheck dataset 2 as our primary dataset, containing causally captured monocular videos. For diffusion finetuning, we manually select a single prompt from training frames that best represents the overall content of the video. We train our model for 40,000 iterations, where uncertainty-aware regularization is applied starting from iteration 20,000, as the refined images from diffusion model and uncertainty maps become more reliable at this stage. The coefficients $(c_{0},c_{1})$ for the sigmoid function are set as 0.25 and $20/L$ , respectively, where $L$ is the number of training images. We set the balance weights for $\\lambda_{\\mathrm{data}}$ , $\\lambda_{\\mathrm{UA-diff}}$ , and $\\lambda_{\\mathrm{UA-TV}}$ as 0.5, 0.2, and 0.01, respectively. To measure the quality of generated images, we compute mPSNR, mSSIM, and mLPIPS, leveraging visibility masks provided by the DyCheck. ", "page_idx": 15}, {"type": "text", "text": "For experiments on the LLFF dataset, our method is implemented based on the publicly available official code 3 of FSGS [72]. We set the balance weights for $\\lambda_{\\mathrm{UA-diff}}$ , and $\\lambda_{\\mathrm{UA-TV}}$ as 0.1 and 0.001, respectively, for optimal performance, applying the same hyperparameters across all scenes. All experiments are conducted in the Vessl environment [1]. ", "page_idx": 15}, {"type": "text", "text": "A.3 Additional Qualitative Results ", "text_level": 1, "page_idx": 15}, {"type": "image", "img_path": "0sycTGl4In/tmp/584cb26e22966712e6be6c8ab8921eb1245588e741413c1600e4dbe9e9ceb46f.jpg", "img_caption": ["Figure 4: Qualitative comparison between UA-4DGS and other methods tested on the DyCheck dataset. Ours achieves the outstanding quality of rendered images. "], "img_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "0sycTGl4In/tmp/d3fcdfaf15fa4ada8a4ff2b4ddcfdf5ca7c8787f7f78ce18a792176f158fcfe3.jpg", "img_caption": ["(a) Ground Truth (b) D-3DGS (c) Zhan et al. (d) 4DGS (e) UA-4DGS (f) Depth (Ours) ", "Figure 5: Qualitative comparison between UA-4DGS and other methods tested on the DyCheck dataset. Ours achieves the outstanding quality of rendered images. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "1. Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? [Yes] ", "page_idx": 17}, {"type": "text", "text": "2. Does the paper discuss the limitations of the work performed by the authors? [Yes] ", "page_idx": 17}, {"type": "text", "text": "3. For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? [Yes] ", "page_idx": 17}, {"type": "text", "text": "4. Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? [Yes] ", "page_idx": 17}, {"type": "text", "text": "5. Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? [Yes] ", "page_idx": 17}, {"type": "text", "text": "6. Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? [Yes] ", "page_idx": 17}, {"type": "text", "text": "7. Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? [Yes] ", "page_idx": 17}, {"type": "text", "text": "8. For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? [Yes] ", "page_idx": 17}, {"type": "text", "text": "9. Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines?[Yes] ", "page_idx": 17}, {"type": "text", "text": "10. Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? [NA] ", "page_idx": 17}, {"type": "text", "text": "11. Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? [NA] ", "page_idx": 17}, {"type": "text", "text": "12. Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? [Yes] ", "page_idx": 17}, {"type": "text", "text": "13. Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? [NA] ", "page_idx": 17}, {"type": "text", "text": "14. For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? [NA] ", "page_idx": 17}, {"type": "text", "text": "15. Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? [NA] ", "page_idx": 17}]