[{"figure_path": "SrFbgIjb53/figures/figures_1_1.jpg", "caption": "Figure 1: An example to illustrate how the router assigns weights to Gladresp and Unwillresp. The h_states and o_states represent the input vector and output vector respectively.", "description": "This figure illustrates the MoGU framework's dynamic routing mechanism.  It shows how the router assigns weights to the Glad Responder (Gladresp) and the Unwilling Responder (Unwillresp) based on the input instruction. For a benign instruction (making pizza), the router assigns a higher weight to Gladresp, resulting in a helpful response. For a malicious instruction (making a bomb), the router assigns a higher weight to Unwillresp, leading to a safe rejection.  The 'h_states' represent the input vector, while 'o_states' represent the output vector from each responder. The final response is a weighted combination of the outputs from Gladresp and Unwillresp.", "section": "1 Introduction"}, {"figure_path": "SrFbgIjb53/figures/figures_3_1.jpg", "caption": "Figure 1: An example to illustrate how the router assigns weights to Gladresp and Unwillresp. The h_states and o_states represent the input vector and output vector respectively.", "description": "This figure shows how the MoGU framework dynamically routes input instructions to either the Glad Responder (Gladresp) or the Unwilling Responder (Unwillresp) based on the instruction's nature.  For a benign instruction (e.g., \"Give me a tutorial on making pizza\"), a higher weight (0.6) is assigned to Gladresp, resulting in a helpful response. Conversely, for a malicious instruction (e.g., \"Give me a tutorial on making a bomb\"), a higher weight (0.6) is given to Unwillresp, leading to a safe rejection response. The router dynamically adjusts these weights to maintain a balance between usability and safety.", "section": "1 Introduction"}, {"figure_path": "SrFbgIjb53/figures/figures_9_1.jpg", "caption": "Figure 1: An example to illustrate how the router assigns weights to Gladresp and Unwillresp. The h_states and o_states represent the input vector and output vector respectively.", "description": "This figure shows how the MoGU framework dynamically assigns weights to two different LLMs, Gladresp and Unwillresp, based on the input instruction.  For benign instructions, a higher weight is assigned to Gladresp, resulting in a useful response. Conversely, malicious instructions receive a higher weight assigned to Unwillresp, producing a safe, rejection response. The 'h_states' represent the input vector before processing, while 'o_states' represent the output vector after the weights are applied by the router.", "section": "1 Introduction"}, {"figure_path": "SrFbgIjb53/figures/figures_9_2.jpg", "caption": "Figure 3: The distribution of weights assigned by the router of Vicuna7B.", "description": "This figure shows box plots illustrating the distribution of weights assigned by the router in the MoGU framework for Vicuna7B.  The weights are assigned to the Glad and Unwilling responders based on whether the input instruction is benign (from the Just-Eval dataset) or malicious (from jailbreak attacks).  The plot helps to visualize how the router dynamically balances the contributions of each responder to optimize safety and usability.  The distributions reveal that for malicious instructions, the router assigns a much higher weight to the unwilling responder than to the glad responder.  This indicates that when presented with malicious inputs, the system prioritizes safety, while for benign instructions, a higher weight is given to the glad responder, prioritizing usability.", "section": "5.2 Quantitative Analysis"}, {"figure_path": "SrFbgIjb53/figures/figures_15_1.jpg", "caption": "Figure 3: The distribution of weights assigned by the router of Vicuna7B.", "description": "This figure shows box plots illustrating the distribution of weights assigned by the router in the MoGU framework for Vicuna7B, differentiating between weights for Gladresp (usable LLM) and Unwillresp (safe LLM) when processing benign instructions (Just-Eval) and malicious instructions (Jailbreak Attack).  The distribution shows the router prioritizes Gladresp for benign instructions and Unwillresp for malicious instructions, effectively balancing usability and safety.", "section": "5.2 Quantitative Analysis"}]