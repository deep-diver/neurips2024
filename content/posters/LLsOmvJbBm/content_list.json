[{"type": "text", "text": "NeuralFluid : Nueral Fluidic System Design and Control with Differentiable Simulation ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Yifei Li Yuchen Sun Pingchuan Ma MIT CSAIL Georgia Institute of Technology MIT CSAIL ", "page_idx": 0}, {"type": "text", "text": "Eftychios Sifakis Tao Du University of Wisconsin-Madison Tsinghua University, Shanghai Qi Zhi Institute ", "page_idx": 0}, {"type": "text", "text": "Bo Zhu Wojciech Matusik Georgia Institute of Technology MIT CSAIL ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "We present NeuralFluid , a novel framework to explore neural control and design of complex fluidic systems with dynamic solid boundaries. Our system features a fast differentiable Navier-Stokes solver with solid-fluid interface handling, a lowdimensional differentiable parametric geometry representation, a control-shape co-design algorithm, and gym-like simulation environments to facilitate various fluidic control design applications. Additionally, we present a benchmark of design, control, and learning tasks on high-fidelity, high-resolution dynamic fluid environments that pose challenges for existing differentiable fluid simulators. These tasks include designing the control of artificial hearts, identifying robotic endeffector shapes, and controlling a fluid gate. By seamlessly incorporating our differentiable fluid simulator into a learning framework, we demonstrate successful design, control, and learning results that surpass gradient-free solutions in these benchmark tasks. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Complex fluidic systems play an important role in many engineering and scientific disciplines, encompassing applications at different length scales ranging from biomedical implants [1], microfluidic devices [2], hydraulic devices to and flying robots [3]. Understanding these fluid-solid coupling mechanisms in nature and mimicking their control strategies in artificial designs is essential for advancing our control and design capabilities to synthesize novel solid-fluid systems. ", "page_idx": 0}, {"type": "text", "text": "Devising neural control algorithms to accurately manipulate the behavior of a complex fluidic system and optimize its performance remains challenging due to the intricate interplay between device geometry, control policies, flow dynamics, and the inherent physical and optimization constraints unique to each fluidic system. On one hand, differentiable simulation fluid-system interactions are inherently difficult because simulation is dynamic, involving a sequence of forward and backward steps interleaved with control signals that are computationally expensive. On the other hand, naively employing traditional control algorithms, mainly derived from their solid counterparts, to control fluidic systems remains difficult due to characterizing the infinite degrees of freedom of fluid flows and their interactions with solid boundaries. The co-design of fluid-solid systems, involving both shape and control, is critical to exploring the optimal performance of these systems. ", "page_idx": 0}, {"type": "text", "text": "Currently, the machine learning community lacks a computational Gym-like [4] environment to facilitate the exploration of fluidic systems manifesting strong solid-fluid interactions and controllable dynamic boundaries. Recent literature in robotic learning (e.g., [5]) has established unified multiphysics differentiable simulation platforms to facilitate learning control policies for various fluid interactions in daily scenarios. Similar ideas can be observed in [6, 7, 8], where differentiable simulation plays a central role in accommodating various design and optimization tasks of dynamic systems involving fluid dynamics. However, despite these inspiring advances, learning the control policies and exploring the optimal performance of a dynamic fluidic system with complex boundary conditions remains difficult due to their inherent complexities in differentiating solid boundary behaviors and optimizing their fluidic consequences due to these boundary motions. ", "page_idx": 0}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/9f6eb42805539140487b4946fae550d44d8dd928293e579c76b8f6661abeaf68.jpg", "img_caption": ["Figure 1: Pipeline Overview. (1) Our pipeline starts with an initial parametric geometry and a neural network parameterized controller. (2) The fluid dynamics is then simulated using a dynamic Navier-Stokes solver. (3) The performance of the design and control is evaluated using a loss function, the gradients of which are then back-propagated through our end-to-end differentiable framework. (4) The gradient-based optimization iteratively improves the geometry and control to achieve the task goal. This pipeline allows for efficient geometry and control co-optimization. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "This paper presents a novel framework for a fully automated pipeline aimed at devising neural controls for complex fluidic systems with dynamic boundaries. Our framework is designed to robustly control complex fluidic systems that consist of externally driven soft boundaries and internal complex flow behaviors, such as those systems underpinning an artificial heart or a microfluidic device. ", "page_idx": 1}, {"type": "text", "text": "NeuralFluid consists of three critical components to enable neural control of a complex fluidic system. First, we devise a differentiable geometry representation to offer an expressive design space while remaining low-dimensional, enabling efficient exploration by the optimization algorithm. Second, we implement a differentiable fluid simulator with solid-fluid interface handling to accurately characterize the dynamic fluid behavior and predict its spatiotemporal impact on the moving boundaries. We back-propagate gradients at the solid-fluid interface to extend gradient computation to the geometry iso-surface. Last, we provided an optimization framework to efficiently search the design space, considering the underlying fluid dynamics and boundary conditions. ", "page_idx": 1}, {"type": "text", "text": "Our pipeline features a low-dimensional parametric geometry representation capable of expressing complex shapes and a differentiable Navier-Stokes simulator with geometry gradient computation for predicting dynamic fluid behavior in response to control signals. In addition, our pipeline leverages gradient-based optimization for efficient design space exploration, co-optimization of the device geometry and control, and accurate performance evaluation of the design under dynamic flows. To showcase the practical implications and versatility of our approach, we have established a suite of Gym-like [4] environments. These benchmarks are designed to test applications in robotics and engineering, facilitating advancements in system identification, optimization of end-effector shapes and controls, and the dynamic optimization of structures such as artificial hearts within a closed-loop control framework. We showcase the effectiveness of our pipeline in facilitating different design and control tasks, including amplifier, fluidic switch, flow modulator, shape and position identification, closed-loop control of water gate and artificial heart. ", "page_idx": 1}, {"type": "text", "text": "We summarize our main contributions as follows: ", "page_idx": 1}, {"type": "text", "text": "\u2022 Development of a fast differentiable Navior-Stokes simulator for optimization in 2D and 3D scenes. ", "page_idx": 1}, {"type": "text", "text": "\u2022 Development of a low-dimensional differentiable parametric geometry representation for complex shapes embedded into the differentiable simulation pipeline. \u2022 Gradient computation extension to geometry iso-surface to enable control and geometry co-design and iso-surface optimization. \u2022 Gym-like [4] environments and benchmarks to demonstrate applications in robotics and engineering, including the design of amplifier, fluidic switch, flow modulator, geometry system identification, and closed-loop control of a fluid gate and artificial heart. ", "page_idx": 2}, {"type": "text", "text": "2 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "2.1 Pipeline Overview ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We present an overview of our method in Fig. 1. Our pipeline defines the designs with a lowdimensional parametric geometry representation (Sec. 2.2). The behavior and performance of the design in the fluid environment are evaluated by a dynamic differentiable Navier-Stokes simulator (Sec. 2.3). Both components are embedded in a gradient-based optimization framework that cooptimizes both the geometric design and the control signal until convergence. ", "page_idx": 2}, {"type": "text", "text": "2.2 Geometry Representation ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We represent our geometry with a low-dimension representation. Take the illustration in the inset figure as an example, here we introduce the representation on a high level, and refer the readers to the appendix for the full details. We parameterize a closed 2D surface using its center c and a set of connected Bezier curves with their control points de", "page_idx": 2}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/f4f5854dd250789a6cd902684164a4b3fd19ac73635eb1fa5ee16a92c0a731ef.jpg", "img_caption": [], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "a) Closed 2D Surface b) Closed 3D Surface c) 3D Geometry fine in polar coordinates $\\rho_{i}$ for $i\\in[1,2,\\ldots,2N]$ , where every two control points define a 2D Bezier curve spanning 2N\u03c0 radians in the polar coordinate system. This representation offers a compact way of defining diverse geometries. We further parameterize a closed 3D surface using a list of 2D surfaces defining the key cross-sections of the geometry along an extrusion axis $z$ of the local object frame, where each 2D surface is parameterized as described above. The parameterization includes $z\\;=\\;z_{0}$ and $z_{1}$ , which determines the $Z$ plane of the first and last cross-section, along with the parameters for each key 2D cross-section, which are assumed to be evenly spaced between $z\\in[z_{0},\\bar{z}_{1}]$ .The continuous geometry interpolates the key cross-sections along the z-axis. Finally, we construct more complex 3D geometries using operations from Constructive Solid Geometry (CSG): Union and intersection, which allows us to define a 3D parametric heart model using the union of four sub-geometries. ", "page_idx": 2}, {"type": "text", "text": "2.3 Differentiable Navier-Stokes Simulation ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Our fluid dynamics is governed by the incompressible Navier-Stokes equations. These consist of the momentum equation (Eq. 1a), accounting for temporal changes in velocity $({\\pmb u})$ , advective acceleration, viscous dissipation, and pressure $(p)$ gradient forces for an incompressible fluid with fluid density $\\rho$ and kinematic viscosity $\\nu$ . The incompressibility condition (Eq. 1b) requires the divergence of the velocity field must be zero to enforce the conservation of mass: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l l}{\\displaystyle\\frac{\\partial{\\pmb u}}{\\partial t}=-({\\pmb u}\\cdot\\nabla){\\pmb u}+\\nu\\nabla^{2}{\\pmb u}-\\frac{1}{\\rho}\\nabla p,}\\\\ {\\nabla\\cdot{\\pmb u}=0}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "2.3.1 Numerical Simulation ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We build the fluid simulator by leveraging the operator-splitting method [9][10]. A single simulation step comprises three sub-steps: advection, viscosity, and projection. See the Appendix B for details on time discretization. The simulation domain is discretized on a standard Marker-and-Cell (MAC) grid [11], with pressures stored at cell centers and velocities at cell faces. By employing the finitedifference scheme on the MAC grid cells and faces, we construct the matrix $\\scriptstyle{\\frac{1}{\\Delta x}}{\\dot{\\mathbf{G}}}$ for gradient operator and its negative transpose $-\\frac{1}{\\Delta x}\\mathbf{G}^{T}$ for divergence operator. In the following sections, capital letters will refer to matrices or the flattened vectors induced by the fields denoted by the corresponding lowercase letters in Appendix B. ", "page_idx": 3}, {"type": "text", "text": "Advection We employ the semi-Lagrangian advection scheme, where the advected velocity field U\u02dcn+1is a line ar interpolation of the velocity field Un. The interpolation position function is a function of $\\mathbf{U}^{n}$ can be put into a matrix form B, which results in: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\tilde{\\mathbf{U}}^{n+1}=\\mathbf{B}(\\mathbf{U}^{n})\\mathbf{U}^{n}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Viscosity For incompressible fluid with a constant viscosity coefficient, the viscous force density is the product of the Laplacian of velocity and the viscosity coefficient. For each axis, the Laplacian of the corresponding velocity component is calculated on grid points using the finite difference method: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{\\mathbf{U}}^{n+1}=\\left(\\mathbf{I}-\\frac{\\nu\\Delta t}{\\Delta x^{2}}\\mathbf{G}^{T}\\mathbf{G}\\right)\\tilde{\\mathbf{U}}^{n+1}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Projection The projection step ensures the incompressibility of the fluid. Solid unaligned with the grid may intersect with grid faces, which can be captured with a cut-cell method [12]. We introduce $\\alpha^{n+1}$ to represent the fluid proportion of a grid face. The solid\u2019s signed distance function (SDF) $\\phi^{n+1}$ and the velocity $\\pmb{u}_{s}^{n+1}$ can derived from the solid geometry. We first use marching cube to compute the ", "page_idx": 3}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/2ed4889ed38f56770af4f4712f5895d3ca7f9b508f2af694f0137ccf67014ab6.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "geometry zero contour. Next, we identify the intersection points between this contour and the grid faces and compute $\\alpha^{n+1}$ based on $\\phi$ . For instance, in the inset figure, grid face $(i+\\textstyle\\frac{1}{2},j,k)$ is cut by the contour, then $\\begin{array}{r}{\\alpha_{i+\\frac{1}{2},j,k}^{n+1}=\\frac{S_{A E F}}{S_{A B C D}}=\\frac{1}{2}\\cdot\\frac{|A E|}{|A B|}\\cdot\\frac{|A F|}{|A D|}=\\frac{1}{2}\\cdot\\frac{\\phi_{A}^{n+1}}{\\phi_{A}^{n+1}-\\phi_{B}^{n+1}}\\cdot\\frac{\\phi_{A}^{n+1}}{\\phi_{A}^{n+1}-\\phi_{D}^{n+1}}.}\\end{array}$ ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "The volume change rates for fluid and solid at grid cell $(i,j,k)$ , denoted as $\\gamma_{f,i,j,k}^{n+1}$ and $\\gamma_{s,i,j,k}^{n+1}$ respectively, equal to the sum of flux on the cell\u2019s surrounding faces, which can be calculated using $\\alpha^{n+1}$ , fluid velocity $\\pmb{u}^{n+1}$ , and solid velocity $\\pmb{u}_{s}^{n+1}$ . ", "page_idx": 3}, {"type": "text", "text": "The incompressibility condition gives requires the sum of \u03b3f,i,j,k and \u03b3s $\\gamma_{s,i,j,k}^{n+1}$ to be zero, which gives ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\frac{\\Delta t}{\\rho\\Delta x}\\mathbf{G}^{T}\\mathbf{S}^{n+1}\\mathbf{G}\\mathbf{P}^{n+1}=\\mathbf{G}^{T}\\mathbf{S}^{n+1}\\hat{\\mathbf{U}}^{n+1}+\\mathbf{G}^{T}(\\mathbf{I}-\\mathbf{S}^{n+1})\\mathbf{U}_{s}^{n+1}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\mathbf S^{n+1}$ is a diagonal matrix induced by $\\alpha^{n+1}$ , and $\\mathbf{P}$ is the pressure. After solving the linear system, the fluid velocity is updated based on the pressure values: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\mathbf{U}^{n+1}=\\hat{\\mathbf{U}}^{n+1}-\\frac{\\Delta t}{\\rho\\Delta x}\\mathbf{G}\\mathbf{P}^{n+1},\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "2.3.2 Back-propagation through Time ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We construct our back-propagation algorithm to mirror the sequence of operations carried out in the forward pass but in a reversed order. ", "page_idx": 3}, {"type": "text", "text": "Given the gradients of the loss function $J$ with respect to the velocity field $\\textbf{\\em u}$ at time step $n+1$ , denoted by $\\frac{\\partial J}{\\partial\\mathbf{U}^{n+1}}$ , our goal is to compute the corresponding gradients at time step $n$ , $\\frac{\\partial J}{\\partial\\mathbf{U}^{n}}$ . ", "page_idx": 3}, {"type": "text", "text": "Projection We begin by reversing the projection step to back-propagate $\\frac{\\partial J}{\\partial\\mathbf{U}^{n+1}}$ to derive \u2202Pn+1 and \u2202U\u02c6\u2202nJ+1 . Back-propagating through Eq.5 gives ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\frac{\\partial J}{\\partial\\mathbf{P}^{n+1}}=-\\frac{\\Delta t}{\\rho\\Delta x}\\frac{\\partial J}{\\partial\\mathbf{U}^{n+1}}\\mathbf{G}.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "We can back-propagate the adjoint of Eq. 4 w.r.t \u02c6U by defining the adjoint variable $\\mathbf{y}$ and derive ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\frac{\\partial J}{\\partial\\hat{\\mathbf{U}}^{n+1}}=\\frac{\\partial J}{\\partial\\mathbf{U}^{n+1}}+\\mathbf{y}\\mathbf{G}^{T}\\mathbf{S}^{n+1},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\begin{array}{r}{\\mathbf{A}=\\frac{\\Delta t}{\\rho\\Delta x}\\mathbf{G}^{T}\\mathbf{S}^{n+1}\\mathbf{G},\\mathbf{b}=\\mathbf{G}^{T}\\mathbf{S}^{n+1}\\hat{\\mathbf{U}}^{n+1}+\\mathbf{G}^{T}(\\mathbf{I}-\\mathbf{S}^{n+1})\\mathbf{U}_{s}^{n+1}}\\end{array}$ , and $\\mathbf{y}$ is computed by solving the linear system $\\begin{array}{r}{\\mathbf{A}\\pmb{y}^{T}=\\big(\\frac{\\partial J}{\\partial\\mathbf{P}^{n+1}}\\big)^{T}}\\end{array}$ . ", "page_idx": 4}, {"type": "text", "text": "Viscosity and Advection Back-propagating through viscosity and advection simply involves backpropagating $\\frac{\\partial J}{\\partial\\hat{\\mathbf{U}}^{n+1}}$ through Eq. 3 and Eq. 2, which allows us to derive: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\frac{\\partial J}{\\partial\\mathbf{U}^{n}}=\\frac{\\partial J}{\\partial\\hat{\\mathbf{U}}^{n+1}}\\left(\\mathbf{I}-\\frac{\\nu\\Delta t}{\\Delta x^{2}}\\mathbf{G}^{T}\\mathbf{G}\\right)\\cdot(\\frac{\\partial\\mathbf{B}}{\\partial\\mathbf{U}^{n}}\\mathbf{U}^{n}+\\mathbf{B}(\\mathbf{U}^{n})).\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "The above equations provide the outline of the back-propagation process through a single time step of from time step $n+1$ to $n$ . To compute the gradients of the loss function $J$ at any time step, we iterate the back-propagation process over the full sequence of time steps. ", "page_idx": 4}, {"type": "text", "text": "2.3.3 Back-propagation through Geometry ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "The parametric geometry affects simulation through the solid-fluid boundary during the projection step in Eq. 4. Specifically, the SDF of the geometry $\\phi^{n+1}$ affects the volume matrix $\\mathbf S^{n+1}$ and the velocity (in the case of moving geometry) of the geometry ${\\bf U}_{s}^{n+1}$ affects the boundary condition. We can back-propagate $\\frac{\\partial J}{\\partial\\mathbf{P}^{n+1}}$ w.r.t these two parameters to derive ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l l}{\\displaystyle\\frac{\\partial J}{\\partial\\mathbf{S}^{n+1}}=\\pmb{y}\\mathbf{G}^{T}(\\hat{\\mathbf{U}}^{n+1}-\\mathbf{U}_{s}^{n+1})+\\pmb{y}\\frac{\\partial\\mathbf{A}}{\\partial\\mathbf{S}^{n+1}}\\mathbf{P}^{n+1},}\\\\ {\\displaystyle\\frac{\\partial J}{\\partial\\mathbf{U}_{s}^{n+1}}=-\\pmb{y}\\mathbf{G}^{T}\\mathbf{S}^{n+1}.}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Further back-propagating \u2202S\u2202nJ+1 first through the SDF \u03d5 then through the distance computation and $\\frac{\\partial J}{\\partial\\mathbf{U}_{s}^{n+1}}$ through geometry velocity function allows us to optimize through the geometry iso-surface. ", "page_idx": 4}, {"type": "text", "text": "2.3.4 Neural Fluid Control ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "We can train neural-network parameterized closed-loop fluid controllers with gradients fully computed at both geometry and velocity throughout time. We parameterize our controllers with a two-layer MLP. The controller takes as input the observation of the fluid velocity field at each frame and outputs dynamic control signals that affect the geometry through our parametric geometry presentation, which further affects the flow field. Our fully differentiable framework allows gradient-based methods to train the controller efficiently. We implemented the backbone of our code in $C++$ and CUDA for computational efficiency. We derived gradients for the geometry and simulation module analytically, then exposed the differentiable simulation framework through pybind11 [13] to enable seamless integration with deep learning libraries, which in our case is PyTorch [14]. ", "page_idx": 4}, {"type": "text", "text": "3 Benchmarks and Applications ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "In this section, we introduce our fluidic design benchmarks and environments. We warp our environments using the standard protocol in the gym to facilitate learning practices. We present six fluidic design and control tasks (Fig. 2) to assess the effectiveness of our computational pipeline for fluidic system design and learning. A comprehensive illustration of these design scenarios, including the visualization of the optimization process, is provided in Appendix Sec C and our supplemental video. Initial conditions are set for all optimizations using randomly sampled values. We use Adam as our optimizer. We summarize the simulation configuration and optimization configuration as well as relevant statistics in Table 1. ", "page_idx": 4}, {"type": "table", "img_path": "LLsOmvJbBm/tmp/a38148fce3d7a07109efcf74553f8bbee6d546b700d8a295f5f2621e392893c2.jpg", "table_caption": ["Table 1: Task Specifications. We summarize the simulation and optimization configuration for the design tasks shown in Sec. 3 and report the initial and optimized loss. We note that because our implementation adopts CFL condition for numerical stability during simulation, the actual steps simulated and back-propagated are higher than the numbers shown in \u201c# Frames\u201d. "], "table_footnote": [], "page_idx": 5}, {"type": "image", "img_path": "", "img_caption": ["Figure 2: Tasks Overview. In each task, the blue dashed line represents the inlet, the red dashed line indicates the outlet, the white arrows show the flow direction, and the orange shapes and arrows denote the geometry and its motion direction. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "3.1 Task Overview ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Amplifier This design problem aims to amplify a parallel horizontal inflow by three times from an initial velocity of 5 units to 15 units. The device boundaries are parameterized as two symmetrically placed cubic Bezier curves. The design variables are the control points and endpoints of the two curves. The loss function is defined as the last frame L2 norm of the difference between the target and optimized fluid velocity norm. We visualize the initial and optimized designs in Fig. 3a. We overlay the design and the corresponding velocity field (colored by the norm) for both iterations. ", "page_idx": 5}, {"type": "text", "text": "Shape Identifier This task provides an example of system identification in a fluid environment by identifying the shape and position of a geometry, given observations of the flow field. We randomly initialize the geometry in the domain. We define the loss function as the sum of the L2 norm of the velocity field difference to the observed ground-truth flow field across time. The optimization successfully reconstructs the shape and its position with random initialization (See Exp. 4.2). ", "page_idx": 5}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/f2cb57687b15df5502e63c7b07cc4a9288da316c289455d12c529d7e95876b7e.jpg", "img_caption": ["Figure 3: (a) Visualization of Amplifier. (b) Visualization of Flow Modulator. "], "img_footnote": [], "page_idx": 5}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/b8f63b16e82cbac0e75a0980b5c39db5eac121d19ad271a9872db0ad2af003a7.jpg", "img_caption": ["Figure 4: Artificial Heart. Left: visualization of the domain and the location of the muscles. Middle: Optimized control policy rollout visualization. Right: Optimization results visualization. The top and bottom diagrams visualize the cosine and the ECG target variants. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "Switch This task simultaneously optimizes the geometry and the constant rotational speed of a 2D switch, allowing dynamic regulation of outlet flow velocity. A horizontal inflow at the left interacts with the switch, splitting into two distinct streams towards the right side. The goal is to let the time-dependent average velocity norm of the upper stream align with a predetermined flow profile. We define the loss function as the sum of the L2 norm of the difference between the average velocity norm of the fluid and the target velocity at each frame. The optimized design and control successfully generate a linearly increasing upper stream velocity norm profile, matching the specified target. ", "page_idx": 6}, {"type": "text", "text": "Flow Modulator This task optimizes the geometry and control of a rotating 3D flow controller to achieve a target average outlet flow $k\\times$ inflow) at the domain\u2019s right boundary by the end of the simulation. The controller\u2019s geometry is parameterized by four 3D cross-sections, with rotation controlled by a sinusoidal function. We define the loss as the L2 norm of the difference between the average outlet and target velocity at the final frame. Fig. 3b illustrates the task: the top left shows initial parameters and task specification, bottom left shows optimization trajectories, and the right visualizes the optimized geometry and velocity streamline with two variants $[k=3,5]$ ). ", "page_idx": 6}, {"type": "text", "text": "Neural Gate Controller We learn a closed-loop controller for a 3D fluid gate moving horizontally. The controller is parameterized as a two-layer MLP. It observes the current outflow velocity through the gate and outputs the next frame motion offset to control the outflow velocity to match a target. ", "page_idx": 6}, {"type": "text", "text": "3.2 Scalability to Complex Fluid Fields: A Case Study of Artificial Heart ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We showcase the scalability of our method through an artificial heart design and control learning task (Fig. 4). Artificial heart development is difficult due to the complex blood flow movement within the heart. This case study provides a first step in studying the heart\u2019s control strategies. We train a closed-loop controller that outputs the per-time-step contraction signal of the four muscles of a simplified heart model so that the outlet velocity matches a pre-defined target proflie. The controller\u2019s states include temporal encoding of the current time step and the current outflow norm, and they are parameterized using a two-layer MLP. The heart\u2019s geometry is parameterized as the union of the two inlets, one outlet, and the heart chamber. In two variants of the task, one target flow profile is parameterized using a cosine curve (Fig 4 top), and one target flow profile mimics the shape of an electrocardiogram (Fig 4 bottom). We define the loss function as the sum of the L2 norm of the difference between the average velocity norm of the fluid and the target velocity at each frame. In both variants, the trained controller successfully outputs signals that generate blood flow that matches the target, demonstrating the effectiveness of our gradient-based optimization framework. We further visualize the rollouts of the trained controllers at Fig 4 left. ", "page_idx": 6}, {"type": "table", "img_path": "LLsOmvJbBm/tmp/66c752fe1595fe5b59c947df5494f68017bc1d52e4226a40135003d0a8ea8d3a.jpg", "table_caption": ["Table 2: Time Performance. Our method achieves one order of magnitude speedup across all resolutions compared to PhiFlow in both forward simulation and backward gradient propagation. "], "table_footnote": [], "page_idx": 7}, {"type": "table", "img_path": "LLsOmvJbBm/tmp/2c117c3b26a17cdfedb6ad8c0061a0b59421c4acd687ee1c4a3810c13fe97a4d.jpg", "table_caption": ["Table 3: Memory and time performance comparison with DiffTaichi "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "4.1 Effects of Initialization on Optimization ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "This experiment studies the effect of random initialization in our fluid optimization tasks. Specifically, we conduct an experiment on the 3D heart controller task, which utilizes a neural network with 7,100 parameters. For this task, we initialized the network parameters with five different random seeds, tracking convergence under each condition. In the accompanying figure, we plot an extended version of the training trajectory, scaled logarithmically for better visualization, to compare the convergence of different random initializations. However, in practice, our method achieves the objective driven by the loss within tens of iterations, as is evident from the steep initial descent in the optimization curve. As shown in Fig. 5 left, the optimization consistently converges across all seeds, despite variations in initial network behavior. This consistency indicates the robustness of our method to random initialization even in high-dimensional optimization spaces, supporting its application to complex tasks in differentiable physics. These curves offer valuable guidelines for practitioners using our method in their deployments: the gradients from our approach are robust to hyper-parameters and scalable to high-dimensional optimization problems. ", "page_idx": 7}, {"type": "text", "text": "4.2 Gradient-Based vs Gradient-Free Optimization ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We study the effectiveness of our gradient-based method against gradient-free optimization methods in the Neural Heart task (Fig. 5 right). We choose Proximal Policy Optimization (PPO) [15] as the baseline for reinforcement learning and CMA-ES [16] for evolution strategies. This environment is particular challenging due to the sensitivity of the bloodflow to the control signal changes across time, which could result in large flow field change if adjacent rollouts have large changes. We initialize all methods to output stochastic control signals of small noise for stable initial simulation. Our gradient-based method quickly converges to near zero after 60 epochs, while both gradient-free methods struggle in this environment. We argue that the rapid and successful convergence stems from the clear gradient provided by our method. Note that our differentiable optimization pipeline depends on the differentiability of the loss function (e.g., the imitation loss we used). This can be problematic if the objective is too complex to be characterized in a differentiable manner, in which case gradient-free methods are better alternatives. However, our framework will still excel due to its outstanding forward simulation speed, which we will elaborate next. ", "page_idx": 7}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/922df02c42b848c45187b4edd56a8db4ce7edbae9e6c5cd747a803689e6a0089.jpg", "img_caption": ["Figure 5: Ablation Studies. Left: Optimization trajectories for Neural Heart with 7100 parameters under different initialization. Iterations are visualized on a log scale. Right: Log scaled loss-iteration curves of our gradient-based method and other gradient-free optimization methods. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "4.3 Time Performance Profiling and Comparison with PhiFlow ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In this experiment, we demonstrate the performance efficiency of our framework through a comparison with PhiFlow. While PhiFlow operates with a TensorFlow-GPU backend, our framework is implemented in CUDA $C++$ and features a high-performance Geometric-Multigrid-PreconditionedConjugate-Gradient (MGPCG) Poisson solver [17]. To address the needs of differential operators and interpolations, which require access to neighboring cells in all directions, we divide the simulation domain into cubic blocks, each corresponding to a CUDA block. When launching a CUDA kernel, simulation data for each block is first loaded into shared memory, allowing efficient computation directly in shared memory and reducing global memory accesses. Additionally, to increase memory throughput, each block\u2019s data is stored consecutively in global memory. Our matrix-free MGPCG solver has a faster convergence rate than PhiFlow\u2019s Conjugate Gradient solver and uses a hierarchical grid data structure, with custom CUDA kernels for prolongation and restriction operations between coarse and fine grids. ", "page_idx": 8}, {"type": "text", "text": "We benchmark both the one-step forward simulation time and gradient back-propagation time at different resolutions, as shown in Table 2. The experiment runs on a workstation with an NVIDIA RTX A6000 GPU, where our framework consistently outperforms PhiFlow by an order of magnitude across all resolutions, beneftiing both gradient-based and gradient-free optimization techniques. This performance improvement is particularly advantageous in fluid simulation applications, including robotics and video generation. Additionally, our system\u2019s gym protocol compatibility [4] makes it straightforward for practitioners to integrate and test our library. We plan to release our code and documentation upon acceptance. ", "page_idx": 8}, {"type": "text", "text": "4.4 Memory and Time Performance Profiling and Comparison with DiffTaichi ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Here we compare our solver with DiffTaichi, a differentiable programming framework, to highlight the beneftis of our approach in terms of scalability and efficiency. Our method, designed specifically for differentiable fluid simulation, uses manually derived gradients, avoiding the need to store intermediate computational graph at each timestep, unlike DiffTaichi, which relies on automatic differentiation. Additionally, our adjoint derivation for the projection solve step is independent of solver iterations, making our approach well-suited for advection-projection fluid simulations. To demonstrate this, we implemented a Conjugate Gradient (CG) solver for the projection step in DiffTaichi and compared time and memory performance across four grid resolutions in a 3D optimization scenario (Table 3). Our results show that our solver requires substantially less memory, with up to 12 times less memory usage than DiffTaichi at $64\\times64\\times64$ resolution. This reduction in memory stems from eliminating the need to store intermediate values during each CG iteration, making our solver particularly suitable for high-resolution, long-term optimizations. ", "page_idx": 8}, {"type": "text", "text": "5 Related Work ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Flow Control and Optimization Beginning with the pioneering work of [18], a vast literature has been devoted to the optimization of fluid systems [19]. Given a predefined design domain with boundary conditions, a typical optimization objective is to maximize some performance functional of a fluid system (e.g., the power loss of the system) constrained by the physical equations. Similar to a conventional structural optimization problem, the design domain is discretized. The optimization algorithm decides for each element whether it should be fluid or solid to optimize some performance functions such as power loss. Examples of flow optimization applications include Stokes flow [18, 20, 21, 22], steady-state flow [23], weakly compressible flow [24], unsteady flow [25], channel flow [26], ducted flow [27], viscous flow [28], fluid-structure interaction (FSI) [29, 30, 31], fluidthermal interaction [32, 33], microfluidics [34], aeronautics [35, 36], and aerodynamics [37, 38], to name a few. [39] developed a dynamic differentiable fluid simulator and integrated the pipeline with neural networks for learning controllers. In computer graphics, [40] developed a differentiable framework to simulate and optimize flow systems governed by design specifications with different types of boundary conditions, while [8] developed an anisotropic material model to handle different boundary conditions using topology optimization framework. Both systems focus on the Stokes flow model and have not explored applications with a dynamic flow system. [41] adapted the adjoint method to control free-surface liquids. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Differentiable Physics Simulation Differentiable simulations emerge and boost as a powerful tool to accommodate various optimization applications crossing graphics and robotics. A typical example is DiffTaichi [42], which created a differentiable programming environment to compute the gradients of physics simulations. A variety of physics simulation algorithms stemming from graphical applications have been adapted to a differentiable framework to facilitate inverse design applications, including fluids [43, 44, 45], position-based dynamics [7], cloth [46, 47], deformable objects [48], articulated bodies [49], object control [50], and solid-fluid coupling systems [39, 51]. While [51] proposed a method to differentiate Lagrangian fluid simulation, optimization of rigid geometry is not discussed. Many applications across graphics and robotics have been explored, such as soft-body design and locomotion [52, 53] and fluid manipulation [5]. However, none of these approaches focused on enabling the inverse design of fluidic device systems in dynamic Navier-Stokes flow. ", "page_idx": 9}, {"type": "text", "text": "Computational Design The last decade has witnessed an increasing interest in the design of computational tools and algorithms targeting the digital fabrication of physical systems. A broad range of applications have been addressed, including the mechanical characters [54, 55, 56], inflatable thin shells [57], foldable structures [58, 59], Voronoi structures [60], joints and puzzles [61], spinning objects [62], buoyancy [63], gliders [64], multicopters [65], hydraulic walkers [66], origami robots [67], articulated robots [68], and multi-material jumpers [69], to name just a few. Among these applications, the problem of optimizing the shape and control of a 3D printable object to manifest specific mechanical properties and functionalities has drawn particular attention. Examples of designing mechanical properties by optimizing materials include optics [70, 71], mechanical stability [72], strength [73], rest shape [74], and desired deformation [75, 76]. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusions, Limitation and Future Work ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we proposed a fully differentiable pipeline for neural fluidic system control and design, addressing the challenges of complex geometry representation, differentiable fluid simulation, and co-design optimization processes. Our pipeline features a low-dimensional parametric geometry representation and a differentiable Navier-Stokes simulator for predicting fluid behavior. We demonstrate the effectiveness of our pipeline in a number of complex control design tasks, ranging from different fluidic functional controls to complex neural heart control. ", "page_idx": 9}, {"type": "text", "text": "There are certain limitations and avenues for future work. First, the current pipeline assumes the standard Navier-Stokes model, which limits its applicability to Newtonian flow. Extending the framework to handle non-Newtonian flows or multi-physics interactions would be an interesting direction for future research. Additionally, the pipeline relies on parametric representation, which may encounter challenges in navigating complex design spaces with high-dimensional or discontinuous parameterizations such as coupling control design with topology optimization. Exploring alternative optimization algorithms or incorporating surrogate models could enhance the efficiency and robustness of the optimization process. Furthermore, while we demonstrate the effectiveness of our pipeline in several control and design tasks, additional validation and bench-marking against real-world physical experiments would be valuable to establish the pipeline\u2019s reliability and generalizability. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] G. D. Ntouni, A. S. Lioumpas, and K. S. Nikita, \u201cReliable and energy-efficient communications for wireless biomedical implant systems,\u201d IEEE Journal of Biomedical and Health Informatics, vol. 18, no. 6, pp. 1848\u20131856, 2014.   \n[2] D. Erickson and D. Li, \u201cIntegrated microfluidic devices,\u201d Analytica Chimica Acta, vol. 507, no. 1, pp. 11\u201326, 2004.   \n[3] K. Nonami, F. Kendoul, S. Suzuki, W. Wang, and D. Nakazawa, Autonomous flying robots: unmanned aerial vehicles and micro aerial vehicles. Springer Science & Business Media, 2010.   \n[4] G. Brockman, V. Cheung, L. Pettersson, J. Schneider, J. Schulman, J. Tang, and W. Zaremba, \u201cOpenai gym,\u201d arXiv preprint arXiv:1606.01540, 2016.   \n[5] Z. Xian, B. Zhu, Z. Xu, H.-Y. Tung, A. Torralba, K. Fragkiadaki, and C. Gan, \u201cFluidlab: A differentiable environment for benchmarking complex fluid manipulation,\u201d ICLR, 2023.   \n[6] P. Ma, T. Du, J. Z. Zhang, K. Wu, A. Spielberg, R. K. Katzschmann, and W. Matusik, \u201cDiffaqua: A differentiable computational design pipeline for soft underwater swimmers with shape interpolation,\u201d ACM Transactions on Graphics (TOG), vol. 40, no. 4, p. 132, 2021.   \n[7] T. Du, K. Wu, P. Ma, S. Wah, A. Spielberg, D. Rus, and W. Matusik, \u201cDiffpd: Differentiable projective dynamics,\u201d ACM Trans. Graph., vol. 41, no. 2, nov 2021. [Online]. Available: https://doi.org/10.1145/3490168   \n[8] Y. Li, T. Du, S. Grama Srinivasan, K. Wu, B. Zhu, E. Sifakis, and W. Matusik, \u201cFluidic topology optimization with an anisotropic mixture model,\u201d ACM Trans. Graph., nov 2022. [Online]. Available: https://doi.org/10.1145/3550454.3555429   \n[9] J. Stam, \u201cStable fluids,\u201d Proceedings of the 26th Annual Conference on Computer Graphics and Interactive Techniques, p. 121\u2013128, 1999.   \n[10] R. Bridson, Fluid simulation for computer graphics, 2nd ed. Boca Raton, FL, USA: AK Peters/CRC Press, 2015.   \n[11] F. H. Harlow and J. E. Welch, \u201cNumerical calculation of time-dependent viscous incompressible flow of fluid with free surface,\u201d Physics of Fluids, vol. 8, pp. 2182\u20132189, 1965.   \n[12] Y. T. Ng, C. Min, and F. Gibou, \u201cAn efficient fluid\u2013solid coupling algorithm for single-phase flows,\u201d Journal of Computational Physics, vol. 228, no. 23, pp. 8807\u20138829, 2009.   \n[13] W. Jakob, J. Rhinelander, and D. Moldovan, \u201cpybind11 \u2014 seamless operability between $c{+}{+}11$ and python,\u201d 2016, https://github.com/pybind/pybind11.   \n[14] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga et al., \u201cPyTorch: An imperative style, high-performance deep learning library,\u201d in Neural Information Processing Systems, 2019.   \n[15] J. Schulman, F. Wolski, P. Dhariwal, A. Radford, and O. Klimov, \u201cProximal policy optimization algorithms,\u201d 2017.   \n[16] N. Hansen and S. Kern, \u201cEvaluating the cma evolution strategy on multimodal test functions,\u201d vol. 3242, 2004, pp. 282\u2013291.   \n[17] A. McAdams, E. Sifakis, and J. Teran, \u201cA parallel multigrid poisson solver for fluids simulation on large grids,\u201d ser. SCA \u201910, 2010, p. 65\u201374.   \n[18] T. Borrvall and J. Petersson, \u201cTopology optimization of fluids in stokes flow,\u201d International journal for numerical methods in fluids, vol. 41, no. 1, pp. 77\u2013107, 2003.   \n[19] J. Alexandersen and C. S. Andreasen, \u201cA review of topology optimisation for fluid-based problems,\u201d Fluids, vol. 5, no. 1, 2020. [Online]. Available: https: //www.mdpi.com/2311-5521/5/1/29   \n[20] J. K. Guest and J. H. Pr\u00e9vost, \u201cTopology optimization of creeping fluid flows using a darcy\u2013 stokes finite element,\u201d International Journal for Numerical Methods in Engineering, vol. 66, no. 3, pp. 461\u2013484, 2006.   \n[21] N. Aage, T. H. Poulsen, A. Gersborg-Hansen, and O. Sigmund, \u201cTopology optimization of large scale stokes flow problems,\u201d Structural and Multidisciplinary Optimization, vol. 35, no. 2, pp. 175\u2013180, 2008.   \n[22] V. J. Challis and J. K. Guest, \u201cLevel set topology optimization of fluids in stokes flow,\u201d International Journal for Numerical Methods in Engineering, vol. 79, no. 10, pp. 1284\u20131308, 2009.   \n[23] S. Zhou and Q. Li, \u201cA variational level set method for the topology optimization of steady-state navier-stokes flow,\u201d Journal of Computational Physics, vol. 227, no. 24, pp. 10 178\u201310 195, 2008.   \n[24] A. Evgrafov, \u201cTopology optimization of slightly compressible fluids,\u201d ZAMM-Journal of Applied Mathematics and Mechanics/Zeitschrift f\u00fcr Angewandte Mathematik und Mechanik: Applied Mathematics and Mechanics, vol. 86, no. 1, pp. 46\u201362, 2006.   \n[25] Y. Deng, Z. Liu, and Y. wu, \u201cTopology optimization of steady and unsteady incompressible navier\u2013stokes flows driven by body forces,\u201d Structural and Multidisciplinary Optimization, vol. 47, 11 2012.   \n[26] A. Gersborg-Hansen, O. Sigmund, and R. B. Haber, \u201cTopology optimization of channel flow problems,\u201d Structural and Multidisciplinary Optimization, vol. 30, no. 3, pp. 181\u2013192, 2005.   \n[27] C. Othmer, E. de Villiers, and H. Weller, \u201cImplementation of a continuous adjoint for topology optimization of ducted flows,\u201d in 18th AIAA Computational Fluid Dynamics Conference. Reston, VA, USA: the American Institute of Aeronautics and Astronautics, 2007, p. 3947.   \n[28] E. Kontoleontos, E. Papoutsis-Kiachagias, A. Zymaris, D. Papadimitriou, and K. Giannakoglou, \u201cAdjoint-based constrained topology optimization for viscous flows, including heat transfer,\u201d Engineering Optimization, vol. 45, no. 8, pp. 941\u2013961, 2013.   \n[29] G. H. Yoon, \u201cTopology optimization for stationary fluid-structure interaction problems using a new monolithic formulation,\u201d International Journal for Numerical Methods in Engineering, vol. 82, no. 5, pp. 591\u2013616, 2010.   \n[30] W. J. P. Casas and R. Pavanello, \u201cOptimization of fluid-structure systems by eigenvalues gap separation with sensitivity analysis,\u201d Applied Mathematical Modelling, vol. 42, pp. 269\u2013289, 2017.   \n[31] C. S. Andreasen and O. Sigmund, \u201cTopology optimization of fluid\u2013structure-interaction problems in poroelasticity,\u201d Computer Methods in Applied Mechanics and Engineering, vol. 258, pp. 55\u201362, 2013.   \n[32] T. Matsumori, T. Kondoh, A. Kawamoto, and T. Nomura, \u201cTopology optimization for fluid\u2013 thermal interaction problems under constant input power,\u201d Structural and Multidisciplinary Optimization, vol. 47, no. 4, pp. 571\u2013581, 2013.   \n[33] K. Yaji, T. Yamada, S. Kubo, K. Izui, and S. Nishiwaki, \u201cA topology optimization method for a coupled thermal\u2013fluid problem using level set boundary expressions,\u201d International Journal of Heat and Mass Transfer, vol. 81, pp. 878\u2013888, 2015.   \n[34] C. S. Andreasen, A. R. Gersborg, and O. Sigmund, \u201cTopology optimization of microfluidic mixers,\u201d International Journal for Numerical Methods in Fluids, vol. 61, no. 5, pp. 498\u2013513, 2009.   \n[35] M. Mangano, S. He, Y. Liao, D.-G. Caprace, A. Ning, and J. R. R. A. Martins, \u201cAeroelastic tailoring of wind turbine rotors using high-fidelity multidisciplinary design optimization,\u201d Wind Energy Science, Jan. 2023, (in review).   \n[36] Y. Yu, Z. Lyu, Z. Xu, and J. R. R. A. Martins, \u201cOn the influence of optimization algorithm and starting design on wing aerodynamic shape optimization,\u201d Aerospace Science and Technology, vol. 75, pp. 183\u2013199, Apr. 2018.   \n[37] A. Jameson, \u201cOptimum aerodynamic design using cfd and control theory,\u201d CFD Review, vol. 3, 06 1995.   \n[38] K. Maute and M. Allen, \u201cConceptual design of aeroelastic structures by topology optimization,\u201d Structural and Multidisciplinary Optimization, vol. 27, no. 1-2, pp. 27\u201342, 2004.   \n[39] T. Takahashi, J. Liang, Y.-L. Qiao, and M. C. Lin, \u201cDifferentiable fluids with solid coupling for learning and control,\u201d in AAAI, 2021.   \n[40] T. Du, K. Wu, A. Spielberg, W. Matusik, B. Zhu, and E. Sifakis, \u201cFunctional optimization of fluidic devices with differentiable stokes flow,\u201d ACM Trans. Graph., vol. 39, no. 6, Dec. 2020. [Online]. Available: https://doi.org/10.1145/3414685.3417795   \n[41] A. McNamara, A. Treuille, Z. Popovi\u00b4c, and J. Stam, \u201cFluid control using the adjoint method,\u201d ACM Trans. Graph., vol. 23, no. 3, p. 449\u2013456, aug 2004. [Online]. Available: https://doi.org/10.1145/1015706.1015744   \n[42] Y. Hu, L. Anderson, T.-M. Li, Q. Sun, N. Carr, J. Ragan-Kelley, and F. Durand, \u201cDiffTaichi: Differentiable programming for physical simulation,\u201d in ICLR, 2020.   \n[43] P. Holl, V. Koltun, K. Um, and N. Thuerey, \u201cphiflow: A differentiable pde solving framework for deep learning via physical simulations,\u201d in Advances in Neural Information Processing Systems (NeurIPS) Workshop, 2022.   \n[44] P. Holl, V. Koltun, and N. Thuerey, \u201cLearning to control pdes with differentiable physics,\u201d 2020.   \n[45] B. List, L.-W. Chen, and N. Thuerey, \u201cLearned turbulence modelling with differentiable fluid solvers: physics-based loss functions and optimisation horizons,\u201d Journal of Fluid Mechanics, vol. 949, Sep. 2022. [Online]. Available: http://dx.doi.org/10.1017/jfm.2022.738   \n[46] Y. Li, T. Du, K. Wu, J. Xu, and W. Matusik, \u201cDiffcloth: Differentiable cloth simulation with dry frictional contact,\u201d ACM Trans. Graph., mar 2022. [Online]. Available: https://doi.org/10.1145/3527660   \n[47] Y. Li, H.-y. Chen, E. Larionov, N. Sarafianos, W. Matusik, and T. Stuyck, \u201cDiffAvatar: Simulation-ready garment optimization with differentiable simulation,\u201d in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Los Alamitos, CA, USA: IEEE Computer Society, June 2024. [Online]. Available: https://doi.ieeecomputersociety.org/10.1109/CVPR52733.2024.00418   \n[48] Y. Qiao, J. Liang, V. Koltun, and M. Lin, \u201cDifferentiable simulation of soft multi-body systems,\u201d Advances in Neural Information Processing Systems, vol. 34, 2021.   \n[49] Y.-L. Qiao, J. Liang, V. Koltun, and M. C. Lin, \u201cEfficient differentiable simulation of articulated bodies,\u201d in International Conference on Machine Learning. PMLR, 2021, pp. 8661\u20138671.   \n[50] \u2014\u2014, \u201cScalable differentiable physics for learning and control,\u201d in ICML, 2020.   \n[51] Z. Li, Q. Xu, X. Ye, B. Ren, and L. Liu, \u201cDifffr: Differentiable sph-based fluid-rigid coupling for rigid body control,\u201d ACM Trans. Graph., vol. 42, no. 6, Dec 2023. [Online]. Available: https://doi.org/10.1145/3618318   \n[52] Y. Hu, J. Liu, A. Spielberg, J. B. Tenenbaum, W. T. Freeman, J. Wu, D. Rus, and W. Matusik, \u201cChainqueen: A real-time differentiable physical simulator for soft robotics,\u201d 2018. [Online]. Available: https://arxiv.org/abs/1810.01054   \n[53] A. Spielberg, A. Zhao, Y. Hu, T. Du, W. Matusik, and D. Rus, \u201cLearning-in-the-loop optimization: End-to-end control and co-design of soft robots through learned deep latent representations,\u201d in Neural Information Processing Systems, 2019.   \n[54] S. Coros, B. Thomaszewski, G. Noris, S. Sueda, M. Forberg, R. W. Sumner, W. Matusik, and B. Bickel, \u201cComputational design of mechanical characters,\u201d ACM Transactions on Graphics (TOG), vol. 32, no. 4, p. 83, 2013.   \n[55] B. Thomaszewski, S. Coros, D. Gauge, V. Megaro, E. Grinspun, and M. Gross, \u201cComputational design of linkage-based characters,\u201d ACM Transactions on Graphics (TOG), vol. 33, no. 4, p. 64, 2014.   \n[56] D. Ceylan, W. Li, N. J. Mitra, M. Agrawala, and M. Pauly, \u201cDesigning and fabricating mechanical automata from mocap sequences,\u201d ACM Transactions on Graphics (TOG), vol. 32, no. 6, p. 186, 2013.   \n[57] M. Skouras, B. Thomaszewski, P. Kaufmann, A. Garg, B. Bickel, E. Grinspun, and M. Gross, \u201cDesigning inflatable structures,\u201d ACM Transactions on Graphics (TOG), vol. 33, no. 4, p. 63, 2014.   \n[58] S. Felton, M. Tolley, E. Demaine, D. Rus, and R. Wood, \u201cA method for building self-folding machines,\u201d Science, vol. 345, no. 6197, pp. 644\u2013646, 2014.   \n[59] C. Sung and D. Rus, \u201cFoldable joints for foldable robots,\u201d Journal of Mechanisms and Robotics, vol. 7, no. 2, p. 021012, 2015.   \n[60] L. Lu, A. Sharf, H. Zhao, Y. Wei, Q. Fan, X. Chen, Y. Savoye, C. Tu, D. Cohen-Or, and B. Chen, \u201cBuild-to-last: strength to weight 3d printed objects,\u201d ACM Transactions on Graphics (TOG), vol. 33, no. 4, p. 97, 2014.   \n[61] T. Sun, C. Zheng, Y. Zhang, C. Yin, C. Zheng, K. Zhou, Y. Yue, B. Smith, C. Batty, Z. Xu et al., \u201cComputational design of twisty joints and puzzles.\u201d ACM Trans. Graph., vol. 34, no. 4, pp. 101\u20131, 2015.   \n[62] M. B\u00e4cher, E. Whiting, B. Bickel, and O. Sorkine-Hornung, \u201cSpin-it: optimizing moment of inertia for spinnable objects,\u201d ACM Transactions on Graphics (TOG), vol. 33, no. 4, p. 96, 2014.   \n[63] L. Wang and E. Whiting, \u201cBuoyancy optimization for computational fabrication,\u201d Computer Graphics Forum (Proceedings of Eurographics), vol. 35, no. 2, 2016.   \n[64] T. Martin, N. Umetani, and B. Bickel, \u201cOmniad: data-driven omni-directional aerodynamics,\u201d ACM Transactions on Graphics (TOG), vol. 34, no. 4, p. 113, 2015.   \n[65] T. Du, A. Schulz, B. Zhu, B. Bickel, and W. Matusik, \u201cComputational multicopter design,\u201d 2016.   \n[66] R. MacCurdy, R. Katzschmann, Y. Kim, and D. Rus, \u201cPrintable hydraulics: A method for fabricating robots by 3d co-printing solids and liquids,\u201d 2016.   \n[67] A. Schulz, C. Sung, A. Spielberg, W. Zhao, R. Cheng, E. Grinspun, D. Rus, and W. Matusik, \u201cInteractive robogami: An end-to-end system for design of robots with ground locomotion,\u201d The International Journal of Robotics Research, vol. 36, no. 10, pp. 1131\u20131147, 2017.   \n[68] A. Spielberg, B. Araki, C. R. Sung, R. Tedrake, and D. Rus, \u201cFunctional co-optimization of articulated robots,\u201d in ICRA. IEEE, 2017, pp. 5035\u20135042.   \n[69] D. Chen, D. I. Levin, W. Matusik, and D. M. Kaufman, \u201cDynamics-aware numerical coarsening for fabrication design,\u201d ACM Trans. Graph., vol. 34, no. 4, 2017.   \n[70] M. Ha\u0161an, M. Fuchs, W. Matusik, H. Pfister, and S. Rusinkiewicz, \u201cPhysical reproduction of materials with specified subsurface scattering,\u201d ACM Trans. Graph., vol. 29, no. 4, 2010.   \n[71] Y. Dong, J. Wang, F. Pellacini, X. Tong, and B. Guo, \u201cFabricating spatially-varying subsurface scattering,\u201d ACM Trans. Graph., vol. 29, no. 4, 2010.   \n[72] O. Stava, J. Vanek, B. Benes, N. Carr, and R. Me\u02c7ch, \u201cStress relief: improving structural strength of 3d printable objects,\u201d ACM Trans. Graph., vol. 31, no. 4, 2012. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "[73] Q. Zhou, J. Panetta, and D. Zorin, \u201cWorst-case structural analysis,\u201d ACM Trans. Graph., vol. 32, no. 4, 2013. ", "page_idx": 14}, {"type": "text", "text": "[74] X. Chen, C. Zheng, W. Xu, and K. Zhou, \u201cAn asymptotic numerical method for inverse elastic shape design,\u201d ACM Transactions on Graphics (Proceedings of SIGGRAPH 2014), vol. 33, no. 4, Aug. 2014.   \n[75] B. Bickel, M. B\u00e4cher, M. A. Otaduy, H. R. Lee, H. Pfister, M. Gross, and W. Matusik, \u201cDesign and fabrication of materials with desired deformation behavior,\u201d ACM Trans. Graph., vol. 29, no. 4, 2010.   \n[76] B. Zhu, M. Skouras, D. Chen, and W. Matusik, \u201cTwo-scale topology optimization with microstructures,\u201d ACM Trans. Graph., vol. 36, no. 4, jul 2017. ", "page_idx": 14}, {"type": "text", "text": "A Geometry Representation Implementation ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "2D Geometry We define a closed 2D surface using $N$ connected cubic Bezier curves parameterized in the polar coordinate frame. A point c is defined on the surface to establish the center of a polar coordinate frame. Each Bezier curve spans an arc of $\\frac{2\\pi}{N}$ radians on the polar coordinate plane, and its control points are symmetrically placed, each at an angular displacement of $\\frac{2\\pi}{3N}$ radians from their corresponding curve endpoint. The shape of each Bezier curve, and consequently the overall surface, is manipulated via two scalar parameters, $\\rho_{1}$ and $\\rho_{2}$ , dictating the polar coordinate distance of the two control points. The $i$ -th cubic Bezier curve is defined by two control points $\\mathbf{p}_{0}=(\\rho_{1}^{i}\\cos\\theta,\\rho_{1}^{i}s i n\\theta)+\\mathbf{c}$ and $\\mathbf{p}_{1}=(\\rho_{2}^{i}\\cos\\theta,\\rho_{2}^{i}s i n\\theta)+\\mathbf{c}$ , where c is the reference center point. The endpoints $\\mathbf{e}_{0},\\,\\mathbf{e}_{1}$ are computed by ensuring ${\\bf e}_{1}^{i}\\,=\\,{\\bf e}_{0}^{(i+1)\\%N}$ and colinearity of each pair of $\\mathbf{p}_{1}^{i},\\mathbf{e}_{1}^{i},\\mathbf{p}_{0}^{(i+1)\\%N}$ p(0i+1)%N. This representation offers a compact way of defining diverse geometries. ", "page_idx": 14}, {"type": "text", "text": "3D Geometry We parameterize a closed 3D surface using 2D surfaces defining the key crosssections of the geometry along the $z$ -axis of the local object frame, where each 2D surface is parameterized by $\\Nu$ cubic Bezier curves. The parametrization includes $z\\ =\\ z_{0}$ and $z_{1}$ , which determines the Z plane of the first and last cross-section and the parameters for each key cross-section. The $i-t h$ key cross-section is defined by the center $\\mathbf{c}^{i}$ and control point parameters $\\dot{\\rho}_{1}^{i},\\rho_{2}^{i}$ for each of $i\\in[1,2,\\dots,N]$ . The key cross-sections are assumed to be evenly spaced along the ${\\bf Z}$ -axis. Then, given $z_{0}\\le z\\le z_{1}$ , the cross-section of the closed surface at $Z=z$ is defined by interpolating the centers and control points of all key cross-sections using the interpolation scheme ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l l}{\\displaystyle\\mathbf{c}_{z}=\\sum_{i=1}^{n}\\mathbf{c}^{i}(\\frac{z-z_{0}}{z_{1}-z_{0}})^{i}}\\\\ {\\displaystyle\\rho_{j}=\\sum_{i=1}^{n}\\rho_{j}^{i}(\\frac{z-z_{0}}{z_{1}-z_{0}})^{i}}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "B Temporal Discretization of the Governing Equation ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We build the fluid simulator by leveraging the operator-splitting method [9][10]. Each simulation step comprises of advection, viscosity, and projection. ", "page_idx": 14}, {"type": "text", "text": "Advection We employ the semi-Lagrangian advection scheme specified in (Eqs. 11 and 12) to propagate velocity through the fluid domain: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\frac{\\tilde{\\pmb u}^{n+1/2}-\\pmb u^{n}}{\\Delta t/2}=-\\pmb u^{n}\\cdot\\nabla\\pmb u^{n},\n$$", "text_format": "latex", "page_idx": 14}, {"type": "equation", "text": "$$\n\\frac{\\tilde{\\pmb u}^{n+1}-\\pmb u^{n}}{\\Delta t}=-\\tilde{\\pmb u}^{n+1/2}\\cdot\\nabla\\pmb u^{n}.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Viscosity For incompressible fluid with a constant viscosity coefficient, the viscous force density is equivalent to the product of the Laplacian of velocity and the viscosity coefficient. We employ explicit time integration to update the fluid velocity in response to the viscous force. ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\frac{\\hat{\\pmb u}^{n+1}-\\tilde{\\pmb u}^{n+1}}{\\Delta t}=\\nu\\nabla^{2}\\tilde{\\pmb u}^{n+1}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Projection The projection step involves an update of the pressure and the velocity field (Eq. 14a) to ensure the satisfaction of the incompressibility condition (Eq. 14b). ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\left\\{\\frac{\\pmb{u}^{n+1}-\\hat{\\pmb u}^{n+1}}{\\Delta t}=-\\frac{1}{\\rho}\\nabla p^{n+1},\\pmb{\\triangleright}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "On boundaries, the pressure is regulated by two conditions: the Dirichlet boundary condition (Eq. 15a) and the non-penetrating Neumann boundary condition (Eq. 15b) given computed geometry velocity $\\pmb{u}_{s}^{n+1}$ : ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\left\\{\\begin{array}{l l}{p^{n+1}=0,\\ \\ \\ \\pmb{x}\\in\\partial\\Omega_{f}^{n+1},}\\\\ {\\pmb{u}^{n+1}\\cdot\\pmb{n}=\\pmb{u}_{s}^{n+1}\\cdot\\pmb{n},\\ \\ \\pmb{x}\\in\\partial\\Omega_{b}^{n+1}.}\\end{array}\\right.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "The pressure field for the subsequent time step $p^{n+1}$ is determined by solving the resultant Poisson equation (Eq. 16). ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\frac{\\Delta t}{\\rho}\\nabla^{2}p^{n+1}=\\nabla\\cdot\\hat{\\pmb u}^{n+1}.\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "C Additional Optimization Task Details and Visualization ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "C.1 Switch ", "page_idx": 15}, {"type": "text", "text": "We visualize the initial and optimized design for the amplifier task in Fig. 6. ", "page_idx": 15}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/222fe3fb20c594d51fe04e21db00a12e96deee9cdce8eb812813654042a6cb59.jpg", "img_caption": [], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Figure 6: Fluidic Switch. The switch rotates dynamically across time (dotted lines). The shape of the switch is parameterized as a 2D Polar Bezier, whose parameters, along with the parameters of the rotation signal are subject to optimization. The top and bottom of the illustration visualize information from the initial and optimized iteration respectively. For each iteration, we visualize the design geometry (left) and corresponding streamlines of the flow field (right) at 7 key-frames evenly sampled across time. We additionally plot the target (green) and outlet velocity norm proflie (orange) across time and visualize their difference in grey shaded area. ", "page_idx": 15}, {"type": "text", "text": "D Experiment on Fluid Solver Validation \u2013 K\u00e1rm\u00e1n Vortex Street ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "To further validate the performance of our solver, we conducted an additional experiment simulating the formation of a classic K\u00e1rm\u00e1n Vortex Street. This experiment was executed at a resolution of $512\\,\\times\\,1024$ and illustrates the capability of our solver in capturing complex fluid dynamics phenomena. As shown in Fig. 7, we simulate a horizontal flow passing around a cylindrical obstacle at three distinct kinematic viscosity values: inviscid ( $\\l^{\\nu}=0$ ), moderate viscosity ( $\\nu=0.01$ ), and high viscosity $(\\nu=0.1)$ ). ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "Each viscosity setting demonstrates the characteristic vortex shedding pattern associated with K\u00e1rm\u00e1n Vortex Street formation. These results confirm our solver\u2019s ability to replicate this well-known phenomenon and offer insights into the effect of varying viscosity on vortex behavior. This validation experiment supports the accuracy and versatility of the solver across different fluid conditions. ", "page_idx": 16}, {"type": "image", "img_path": "LLsOmvJbBm/tmp/015bd23088ae6ad1c902e5c03317914a5c5b0554e2428f296d43de2dfe561dd5.jpg", "img_caption": ["Figure 7: Solver Validation. Visualization of Karman Vortex Street under different viscosity conditions. Here, we illustrate the results of the classic Karman Vortex Street test for three different kinematic viscosity values (From top to down $\\nu=0.0$ , $\\nu=0.002$ and $\\nu=0.02)$ ), simulated using our differentiable simulator within a domain size $512\\times1024$ . Each figure visualizes the vortex patterns, and the results demonstrate how increased viscosity leads to a notable change in vortex formation and dissipation. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "E Gradient Stability and Solver Steps Statistics ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Gradient stability in differentiable physics is a well-known challenge, particularly given the potential for gradient explosion or vanishing when gradients are accumulated across numerous solver steps. In our approach, however, we have not encountered significant issues with gradient stability. This stability is likely due to the accuracy of the gradients produced by our framework and the robustness of our numerical solver. To illustrate this, we provide gradient norm statistics over the full course of optimization for three tasks of varying complexity in Table 4, demonstrating consistent gradient magnitudes without evidence of explosion or vanishing. For additional robustness, our implementation includes gradient clipping with a threshold of 1.0, which can mitigate gradient explosion in particularly challenging scenarios. This technique ensures gradients remain within manageable limits and contributes to the overall stability of our optimization pipeline. ", "page_idx": 16}, {"type": "text", "text": "Furthermore, the actual number of solver steps required to advance between frames in our solver depends on the Courant-Friedrichs-Lewy (CFL) condition, which is maintained to ensure numerical stability. Additional statistics on solver steps over one optimization cycle across various tasks are provided in the upper portion of Table 4, offering further insight into the computational demands and stability characteristics of our approach. ", "page_idx": 16}, {"type": "table", "img_path": "LLsOmvJbBm/tmp/38aa39d9ce37096ef1cd5396307bd065b5bb9b7c2ff08d72ed6c0f021d99596d.jpg", "table_caption": [], "table_footnote": ["Table 4: Statistics of the gradient norm and step count over the full course of optimization for three tasks of varying complexity. "], "page_idx": 17}, {"type": "table", "img_path": "LLsOmvJbBm/tmp/d214fd37c3d7eb5307423478c5b84340edeccd8c35c17744352bd69ea3d96bd0.jpg", "table_caption": ["Table 5: Gradient Validation for Shape Identifier Task "], "table_footnote": [], "page_idx": 17}, {"type": "text", "text": "F Experiment on Gradient Validation ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "To ensure the correctness of the gradients in our differentiable simulation framework, we validated the analytical gradients of all kernels, functions, and the entire simulation and optimization pipeline using finite difference approximations. Specifically, we employed the central difference method with a step size of $1.2\\times10^{\\bar{-5}}$ to approximate the gradients numerically and compared them with the analytical gradients calculated by our solver. ", "page_idx": 17}, {"type": "text", "text": "In this validation experiment, we consider the end-to-end gradients for the Shape Identifier Task, which involves optimizing over 11 parameters. The analytical gradients, finite difference gradients, their absolute differences, and element-wise errors are reported in Table 5. For this task, we observed a relative error of 0.0047 for the gradient vector, confirming the high accuracy of our analytical gradients. ", "page_idx": 17}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: The claim reflects paper\u2019s contribution and scope accurately. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 18}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Justification: We discussed the limitations of the work in Sec. 6. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 18}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 18}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 18}, {"type": "text", "text": "Justification: We did not include theoretical results. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 19}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 19}, {"type": "text", "text": "Answer:[Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: We discussed the experimental setup in details. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 19}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 19}, {"type": "text", "text": "Answer:[Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We are releasing the experiment data and code on github. Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 20}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We provide experimental setup in details. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 20}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Justification: We provide loss-iteration curves to report experiment details. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 21}, {"type": "text", "text": "Answer:[Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We discussed the experimental setup in the paper. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 21}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: The research conform to NeurIPS Code of Ethics. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 21}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: There is no societal impact of the work performed. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to ", "page_idx": 21}, {"type": "text", "text": "generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster. ", "page_idx": 22}, {"type": "text", "text": "\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology. \u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 22}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: The paper poses no such risks. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 22}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: The paper does not use existing assets. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 22}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: Our paper does not release new assets. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 23}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 23}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: The paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 23}]