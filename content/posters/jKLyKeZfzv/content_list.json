[{"type": "text", "text": "MOTE-NAS: Multi-Objective Training-based Estimate for Efficient Neural Architecture Search ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Yu-Ming Zhang1 Jun-Wei Hsieh2 Xin Li3 Ming-Ching Chang3 Chun-Chieh Lee1 Kuo-Chin Fan1 1National Central University 3University at Albany 2National Yang Ming Chiao Tung University 108522036@g.ncu.edu.tw; jwhsieh@nycu.edu.tw ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Neural Architecture Search (NAS) methods seek effective optimization toward performance metrics regarding model accuracy and generalization while facing challenges regarding search costs and GPU resources. Recent Neural Tangent Kernel (NTK) NAS methods achieve remarkable search efficiency based on a training-free model estimate. However, they overlook the non-convex nature of the DNNs in the search process. In this paper, we develop Multi-Objective Trainingbased Estimate (MOTE) for efficient NAS, retaining search effectiveness and achieving the new state-of-the-art in the accuracy and cost trade-off. To improve NTK and inspired by the Training Speed Estimation (TSE) method, MOTE is designed to model the actual performance of DNNs from macro to micro perspective by drawing the loss landscape and convergence speed simultaneously. Using two reduction strategies, the MOTE is generated based on a reduced architecture and a reduced dataset. Inspired by evolutionary search, our iterative ranking-based, coarse-to-fine architecture search is highly effective. Experiments on NASBench-201 show MOTE-NAS achieves $94.32\\%$ accuracy on CIFAR-10, $72.81\\%$ on CIFAR-100, and $46.38\\%$ on ImageNet-16-120, outperforming NTKbased NAS approaches. An evaluation-free (EF) version of MOTE-NAS delivers high efficiency in only 5 minutes, delivering a model more accurate than KNAS. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Neural Architecture Search (NAS) [52] tackles the challenge of automating the design and search for suitable neural network architectures in many applications. NAS approaches mainly comprise two stages: a model search stage dedicated to identifying promising candidates within the architecture search space, and an evaluation stage where candidate performance is assessed. In the search stage, the search space can be exponentially large. To reduce search complexity, the cell-based tabular search space [49, 10, 38] is widely considered. Reinforcement learning [52, 2, 39] and evolutionary algorithms [27, 31, 33, 46, 9] are also used to accelerate the search process. However, the primary cost of NAS lies in the evaluation stage, where candidate models must undergo intensive training until convergence to obtain a precise performance assessment. This incurs significant time costs (e.g., NASBench-201 requires 3-10K GPU seconds for convergence after 200 epochs). So, various proxy estimates (e.g., zero-cost proxy [1] and training speed estimation [34]) have been developed to rank candidates, mitigating computational demands for model evaluation. ", "page_idx": 0}, {"type": "text", "text": "Recently, several estimates based on NTK have been proposed, including TE-NAS [6], KNAS [47], and Eigen-NAS [51]. NTK-based estimates serve as condensed representations of gradients and their correlations. The NTK theory aims to macro-model the actual performance of Deep Neural Networks (DNNs). It assumes that the performance of an infinite-width DNN can be fully described by the ", "page_idx": 0}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/515ec567e6361bbf83f23730aaac212b2fe8c4fce5ed87f68b26207d99b3be8f.jpg", "img_caption": ["Figure 1: Post-training rank correlation for randomly chosen 1000 candidates on NASBench-201. The predictive performance of the proposed two terms gradually improves as epochs increase. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "NTK at initialization and that the NTK\u2019s value remains unchanged after training [19]. Consequently, NTK-based estimates can predict the actual performance of candidate architectures without training. However, real DNNs have limited width and exhibit a highly non-convex nature, leading the NTK to encounter significant nonlinear changes during training and resulting in limitations in accurately predicting the actual performance of candidates. Fig. 1 shows the NTK suffers unstable performance during training. ", "page_idx": 1}, {"type": "text", "text": "To address this macro-modeling issue, we propose a novel landscape term that leverages the idea from the study [12] to linearly combine the differences between the initial weights and the post-training weights of the candidate architectures, which allows us to capture the non-convex nature of these candidates by the landscape slice. If the landscape is flatter, the candidate\u2019s performance tends to be better, as it more readily converges to the global optima. Furthermore, studies from a microaspect have been conducted to model this issue, such as Snip [20], Grasp [41], and SynFlow [40, 1], which use gradient change to predict the performance of candidate architectures. As the gradient is integrated into the model training, it may reflect the current effectiveness of changes in the model training. Similarly, TSE [34] directly sums up the training loss to represent the convergence speed to predict candidate performance. In summary, these methods are more intuitive. Although they may not theoretically capture the macroscopic non-convex nature of DNNs, in practice, as shown in Fig. 1, the performance TSE even exceeds NTK. This observation inspired us to propose a speed term that sums the training loss per unit of time, providing a microscopic description of the convergence speed of candidates. ", "page_idx": 1}, {"type": "text", "text": "This paper introduces a Multi-Objective Training-based Estimate (MOTE) that considers landscape term for macroscopic view and speed term for microscopic view to predict the performance of candidates in a joint optimization. This dual perspective offers a comprehensive consideration and an accurate estimate for candidates. Furthermore, we introduce two reduction strategies to reduce the time costs by generating MOTE, which consists of landscape and speed terms. We also present MOTE by integrating the evolutionary algorithm [32], named MOTE-NAS. This design is based on a coarse-to-fine iterative procedure for architecture search. In the search stage of MOTE-NAS, we maintain several dozen to several hundred promising candidate architectures in the pool. In the evaluation stage, we first select the top- $K$ architectures based on the MOTE, then select the best architecture by the early stopping version of the test accuracy. We further develop a stripped-down, evaluation-free version named MOTE-NAS-EF, which achieves high efficiency and can finish a NAS run in merely eight minutes. ", "page_idx": 1}, {"type": "text", "text": "MOTE-NAS outperforms mainstream NTK-based NAS methods. Fig. 2 compares it with TENAS [6], KNAS [47], Eigen-NAS [51], and Label-Gradient Alignment (LGA) [30] on CIFAR-100 of NASBench-201. The accuracy of the final architecture discovered by MOTE-NAS is significantly superior to other methods. In our experiments, MOTE-NAS achieved $94.32\\%$ accuracy on CIFAR-10, $72.81\\%$ on CIFAR-100, and $46.38\\%$ on ImageNet-16-120. The evaluation-free version, MOTE-NASEF, achieves results comparable to KNAS\u2019s, where the search is completed in only eight minutes. The technical contributions of this work are summarized as follows: ", "page_idx": 1}, {"type": "text", "text": "\u2022 Our proposed NAS approach utilizes an efficient training-based estimate to optimize landscape view and convergence speed objectives jointly. This design comprehensively captures the nonconvex nature of DNNs from a macro perspective and monitors the convergence speed from a micro perspective, enabling precise actual performance predictions for desired architectures. ", "page_idx": 1}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/48d0da68ca2932879b9b7a0f16366b85eaabad44bb266008fcde8e87377f2899.jpg", "img_caption": ["", "(b) MOTE-NAS on NASBench-201 "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "Figure 2: (a) The landscape term draws the slice of loss landscape to capture its macroscopic non-convex nature of the candidate architecture. The speed term analyzes the training changes over the training time, providing microscopic insights into the candidate\u2019s convergence speed. (b) Comparison of MOTE-NAS and an Evaluation-Free version MOTE-NAS-EF against other recent efficient NAS methods on NASBench-201 (CIFAR-100). ", "page_idx": 2}, {"type": "text", "text": "\u2022 To enable lightweight training-based estimates, we introduce two reduction strategies for speeding up MOTE generation. Unlike other benchmarks, a readuced meta-architecture is used, and the proposed reduced dataset is built by selecting representative labels of CIFAR-100. \u2022 Our MOTE-NAS achieves a new state-of-the-art for NAS in the accuracy-cost plot (refer to Fig. 2(b)). A stripped-down, evaluation-free version of MOTE-NAS is highly efficient, with performance of the resulting model still outperforming some NTK-based methods, such as the KNAS. ", "page_idx": 2}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "DARTS. Instead of exploring a discrete set of architectures, the Differentiable ARchiTecture Search (DARTS) [26] transforms the combinatorial challenge of finding optimal operations into a continuous optimization problem within a differentiable search space. A notable challenge with DARTS is the potential dominance of easily optimized operators, such as skip-connections and pooling operations in the early stages. This issue impedes selecting more potent operations like convolutions with large kernels. In [7, 22], a robust prior is introduced to restrict the number of skip connections within a cell to a predefined value. The progressive search strategy employed in P-DARTS [7] gradually increases network depth and refines candidate operations based on mixed operation weight. DARTS methods are efficient when running with limited computational resources. However, the architecture found comes with stability and generalizability issues. Furthermore, DARTS algorithms often prefer shallow and wide structures [37]. ", "page_idx": 2}, {"type": "text", "text": "On the other hand, NAS methods generally comprise two stages: the search stage and the evaluation stage. The former focuses on collecting promising candidate architectures, while the latter involves assessing the performance of these candidate architectures. ", "page_idx": 2}, {"type": "text", "text": "Search Stage. Numerous studies have concentrated on the search stage. Some NAS methods leverage reinforcement learning [52, 2, 39], while others are rooted in evolutionary algorithms [27, 31, 33, 46, 9]. The cell-based tabular search space [49, 10, 38] is effective in reducing exhaustic search into a more manageable scale, using a meta-architecture with predefined operations, hyperparameters, fliters, and strides. The candidate architectures under consideration range from tens to hundreds of thousands of candidate architectures. Recently, predictor-based approaches [24, 28, 43, 11, 42, 45, 15] have gained popularity. These methods construct predictors trained with architecture-accuracy pairs to forecast the performance of a candidate architecture. These predictors encompass a range of models from graph convolutional networks [17] to MLPs and other regression models. However, obtaining a high-quality set of architecture-accuracy pairs for NAS is non-trivial. ", "page_idx": 2}, {"type": "text", "text": "Evaluation Stage. Compared with the cost of the search stage, the burden of NAS mainly resides in the time-consuming evaluation process. Various studies have proposed proxy estimates to reduce the need for a real performance evaluation. A prominent approach is zero/few-cost estimate [1, 34, ", "page_idx": 2}, {"type": "text", "text": "23, 29, 6, 47, 51, 30], which substitutes performance indicators such as accuracy with alternative estimates. The zero-cost proxy [1] introduces zero-cost performance estimates [20, 41, 40] and TSE [34] introduces a training speed estimate. More recently, Neural Tangent Kernel (NTK)-based estimates [6, 47, 51, 30] have gained popularity based on the assumption that DNNs can predict their convergence performance at initialization. However, it is experimentally found in [30] that NTKs cannot capture the non-linear characteristics of DNN training dynamic well. Recent NAS methods integrate multiple approaches to achieve remarkable performance. For instance, OMNI [44] and ProxyBO [36] propose few-cost NAS methods by combining zero-cost estimates with more resource-intensive techniques like Bayesian optimization and performance predictors. ", "page_idx": 3}, {"type": "text", "text": "3 MOTE-NAS ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "3.1 Multi-Objective Training-based Estimate ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "NTK theory tries to describe gradient change by a macro-perspective, but its fundamental assumption about infinite-width DNN cannot fti the real DNNs that have finite width. For example, in KNAS [47], GKH asserts the existence of a gradient feature that can serve as a coarse-grained proxy to support downstream training when evaluating randomly initialized architectures. However, this does not propose a concrete solution to identify such a non-linear gradient feature during training. LGA[30] finds that the sensitivity for weight initialization that leads to NTK cannot perform stably, demonstrating that the value of NTK does not change [19]. In addition, Fig. 1 shows that NTK do not accurately predict the actual performance of candidates in practice. Despite NTK-based estimates, there are estimates that make predictions by micro-perspective. Among them, TSE[34] sums up the training loss as a proxy estimate to represent the convergence speed. The convergence speed as an important factor for model performance has been extensively discussed in the literature [13, 16, 34]. Specifically, these studies inspired the proposal of MOTE. MOTE introduces a new landscape term to capture the non-convex nature of models by a macro-perspective through the linear combination between two weights to observe the loss landscape. Simultaneously, MOTE introduces another new speed term to measure the convergence speed of the model by a micro-perspective through calculating the unit time training loss. Incorporating the multi-objectives enables MOTE to comprehensively describe candidates\u2019 non-convex nature and convergence speed from a macro-to-micro perspective. ", "page_idx": 3}, {"type": "text", "text": "Landscape Term. In order to capture non-convexity of loss landscape by macro-perspective, we introduce landscape term that linearly combines the two weights before and after few-training to interpolate the weights for intermediate state, and then calculates the loss values (cross-entropy) of these weights, which means to cutting a section from loss landscape to observe its nature [12], so we sum these loss values to determine whether the loss landscape is smooth, detailed follows. ", "page_idx": 3}, {"type": "text", "text": "Let $\\theta$ denote the trained weights of the candidate. To macro-model the actual performance of candidate architectures, we linearly combine the initial weights with the trained weights $\\theta$ to obtain the combined weights, denoted $\\theta(g)$ , for describing the non-convex landscape of the candidates. Then,we obtain the combined weights $\\theta(g)$ in the form: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\theta(g)=(\\frac{g}{G})\\theta_{i n i t}+(1-\\frac{g}{G})\\theta,\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\theta_{i n i t}$ denotes the initial weights, and $G$ is the number represent how dense the linear combination and set to be 10 based on most of the experiments from [12]. Let $Y_{p d}^{\\theta(g)}$ denote the model prediction labels based on the weights $\\theta(g)$ , and $Y_{g t}$ be the ground-truth labels of the training data. Then, we use cross-entropy to measure the difference between $Y_{p d}^{\\theta\\left(g\\right)}$ and $Y_{g t}$ . After that, we sum the loss value of these middle weights as landscape term as follows. ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\sum_{g=0}^{G}\\mathcal{J}_{\\theta(g)}=\\sum_{g=0}^{G}C E(Y_{p d}^{\\theta(g)},Y_{g t}).\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The poposed landscape term can capture the non-convexity of models where a lower value indicates a flatter loss landscape, implying an efficient convergence of the candidate and avoiding the problem of sharp minimum [50]. ", "page_idx": 3}, {"type": "text", "text": "Speed Term. On the other hand, the idea to model the actual performance of candidates by microperspective, such as TSE, still perform strong and important, as shown in Fig. 1. Therefore, we are inspired by TSE [34] to introduce speed term. It first calculates training losses (cross-entropy) over an epoch, and divides it by the time cost of an epoch, converting it into a unit time training loss to measure convergence speed, which means that it observes the convergence speed of the candidates under standardized time expenditure, which helps to standardize the measurement of architectures of different sizes. It can also be seen from the Fig. 1 that the speed term performs better than the TSE [34]. The detailed speed term is defined: ", "page_idx": 3}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/5d22c782745b597373ca8427fa46a9c6423c1c314f835fc0100e59c40876e117.jpg", "img_caption": ["Figure 3: The generation pipelines of accuracy (upper part) and MOTE (bottom part). The proposed reduced architecture and dataset, MOTE, are colored red in their respective sections. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "equation", "text": "$$\n\\sum_{e=1}^{E}\\frac{l_{e}}{t_{e}}=\\sum_{e=1}^{E}\\frac{C E(Y_{p d}^{e},Y_{g t})}{t_{e}},\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $Y_{p d}^{e}$ denotes the model prediction labels in epoch $e$ , and $Y_{g t}$ means the ground truth labels of the training data. Then, we use cross-entropy to calculate the loss between $Y_{p d}^{e}$ and $Y_{g t}$ . After that, we divide the loss value by the time cost $t_{e}$ within epoch $e$ and then sum up all as speed term. Note that a lower value indicates faster convergence, which could imply better performance. ", "page_idx": 4}, {"type": "text", "text": "Now, MOTE integrates the landsacpe term and speed term to model actual performance of candidates from macro to micro perspective, and is defined as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\nM O T E=f(\\sum_{g=0}^{G}\\mathcal{I}_{\\theta(g)})+f(\\sum_{e=1}^{E}\\frac{l_{e}}{t_{e}}),\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where the first term is the proposed landscape term, the latter term is the proposed speed term, where $\\mathcal{I}_{\\theta}$ denotes the function used to determine whether the loss landscape is smooth by linear combining initial weights $\\theta_{i n i t}$ and trained weights $\\theta$ . $E$ is the number of maximum training epochs to search candidate architectures, $l_{e}$ is the training loss(usually measured by cross-entropy) for the eth epoch, $t_{e}$ denotes the time cost for the epoch $e$ , and the function $f$ denotes the non-linear transformation to restrict the range of values. ", "page_idx": 4}, {"type": "text", "text": "Due to the different ranges of landscape term and speed term, we use the box-cox transformation [3] to transform and normalize them; more comparisons of other transformation methods are detailed in Appendix A.1. MOTE can consider both objectives by adding transformed method to assess their combined impact. Since lower values for both landscape term and speed term suggest a potentially better performance of the models, a smaller MOTE value indicates a better performance in practical application. Fig. 2(a) illustrates the concepts of landscape term and speed term. ", "page_idx": 4}, {"type": "text", "text": "3.2 Reduction Strategies for MOTE Generation ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "MOTE requires little training to obtain landscape term and speed term, which makes it crucial to balance minimizing training time and ensuring adequate training change. Consequently, we introduce a more compact meta-architecture called the reduced architecture. We also propose the reduced dataset method, which involves a smaller dataset built by CIFAR-100. MOTE combines these reduction strategies and the training-based objectives introduced earlier to produce promising estimates with few costs. Fig. 3 depicts this process. ", "page_idx": 4}, {"type": "text", "text": "Reduced Architecture (RA). MOTE is not the actual performance of DNN after combining the cell with meta-architectures. Instead, MOTE is generated from the change in weight and loss acquired during training. The generation of MOTE relies on the proposed reduced architecture. The reduced architecture is designed to eliminate redundant layers from most meta-architectures[49, 10], resulting ", "page_idx": 4}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/fddb26a161998c8de1f2f58e71f390e4746dae44739acb619f00072189ac7961.jpg", "img_caption": [], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "Figure 4: After encoding the images of CIFAR-100 through VGG, the encodings for each label are obtained by averaging image embedding codes. Then we used K-Means and Farthest Point Sampling (FPS) to select a representative set of $r$ labels, forming the reduced dataset. ", "page_idx": 5}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/73e11006872b5832ee34a69be26f878eeb0cd15b98f5f611876e2ed3a4dad892.jpg", "img_caption": ["Figure 5: The proposed terms via aggressive reduction strategies on NASBench-101 and NASBench201. RA means reduced architecture, RD means reduced dataset "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "in a simplified network structure to save the time cost of each epoch. It only comprises a convolutional layer as the stem layer and two cell layers and employs aggressive downsampling through a pooling layer with a kernel size of $4\\times4$ . This architectural simplification significantly accelerates the training process and substantially reduces the cost of obtaining MOTE. The structure of the reduced architecture is shown at the bottom of Fig. 3. ", "page_idx": 5}, {"type": "text", "text": "Reduced Dataset (RD). To minimize the computational cost of MOTE generation, we propose a sub-dataset derived from CIFAR-100 [18], referred to as the reduced dataset. As shown in Fig. 4, the process of constructing the reduced dataset involves several steps: 1) We use a VGG-16 model pre-trained on ImageNet-1K [8] to extract logits from images; 2) Flattened the logits and averaged them according to specific label, resulting in label embedding codes; 3) K-Means to cluster the label embedding codes into $r$ groups; 4) Farthest Point Sampling (FPS) to select $r$ label embedding codes from $r$ group to represent the $r$ labels of the reduced dataset; 5) The images associated with the chosen $r$ labels are reserved for building the reduced dataset. The reduced dataset is a proxy dataset and a sub-dataset of CIFAR-100, containing a representative set of $r$ labels. When $r$ is set to 100, the reduced dataset is equivalent to CIFAR-100. As $r$ decreases, the reduced dataset becomes smaller and easier to fit for candidate models. However, regardless of the value of $r$ , the reduced dataset maintains the original image distribution for each label. The K-means and FPS techniques ensure that the reduced dataset represents a significant part of CIFAR-100 even when $r<100$ . The most important thing is MOTE generation that rely on a reduced dataset can save remarkable time cost. ", "page_idx": 5}, {"type": "text", "text": "Two Terms of MOTE with Reduction Stratigies. To further observe how reduction strategies work, we randomly selected 1K candidates of NASBench-201 as toy experimental subjects. As shown in Fig. 5, the early stop version of test accuracy (after 12 epochs) has a high correlation with test accuracy (after 200 epochs), but training then getting it required about $220\\;\\mathrm{gpu}$ seconds, which is still a remarkable cost. When RA is applied, the time cost decreases $60\\%$ , but the correlation also drops to about 0.5 from 0.65. After further RD is applied, as the extraction ratio $r$ gradually decreases (the further to the left the smaller $r$ is), the time cost is also greatly saved, but the correlation suffers intolerable losses. The correlation of the leftmost $\\boldsymbol{r}=10\\,\\$ ) is even less than 0.1. In contrast, the proposed landscape term and speed term always maintain a high correlation when applying RA and RD. As the extraction ratio $r$ gradually decreases, the time cost is reduced to about $10\\ \\mathrm{gpu}$ seconds from 220 seconds, and the correlation is still about 0.65. This is because the two proposed terms based on weight and loss changes do not rely on the excluded middle state of true or false. More comparisons between various reduction strategies refer to Appendix A.2. ", "page_idx": 5}, {"type": "text", "text": "3.3 Integrating MOTE with Evolutionary Search ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Although MOTE consistently maintains impressive performance under the influence of the reduction strategy, MOTE remains a proxy estimate. A comprehensive NAS method still requires the participation of accuracy to evaluate the actual performance of the candidates discovered in the evaluation ", "page_idx": 5}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/6fabdc58fa34e3ef24aa1031438c59f2eb4561398c98790aa0b14f5b0199d88e.jpg", "img_caption": [], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "Figure 6: The left side depicts MOTE-NAS\u2019s search stage, utilizing MOTE for architecture selection through an evolutionary loop, terminating at $10+k$ iterations. On the right side is the evaluation stage, where MOTE selects the top- $k$ architectures for evaluation. MOTE-NAS-EF simplifies this by relying solely on MOTE to choose the top-1 architecture without the evaluation stage. ", "page_idx": 6}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/d5b857d7a37732ed90bd4d6e44c869ea41c815fceccb1fed0aea9dfaf277edcf.jpg", "img_caption": ["Figure 7: The Kendall\u2019s Tau Correlation comparison of the proposed speed term, landscape term and MOTE with other estimates on NASBench-101 and NASBench-201. Note that the \"(s)\" is the GPU seconds per cell cost. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "stage, similar to previous NAS methods [6, 47, 51, 30]. However, as mentioned at the outset, the time cost of accuracy is exceedingly high, often demanding thousands of GPU seconds. Therefore, our proposed MOTE-NAS first employs MOTE to assist the evolutionary process in obtaining a small subset of promising candidates. Then, through the early stopping version of accuracy assessment, the best is identified. The entire procedure is illustrated in Fig. 6. ", "page_idx": 6}, {"type": "text", "text": "In the search stage, MOTE-NAS maintains a pool of promising candidates $P$ , with batch size $B$ initially set to 10. With the continuous evolution loop, every ten cycles, $B$ is incremented by 10. In each evolutionary process, MOTE is generated to sort $P$ and take the top $10\\%$ of the candidates to the mutation stage. For the mutation stage, we are inspired by predictor-based methods [43, 11, 45] to encode candidates into adjacency and operation matrices. Subsequently, we calculate the Euclidean distance between each pair of candidates to select up to $10\\times k$ mutated candidates, which are then added to $P$ . This evolutionary loop continues $m a x(k,10)$ times, then stops and enters the evaluation stage. For the evaluation stage, MOTE is used to select the top $k$ architectures of $P$ $(k=5,10,20)$ ), then select their best architecture based on the early topping version of the test accuracy. ", "page_idx": 6}, {"type": "text", "text": "4 Experimental Results ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Experimental Setup. We used NASBench-101 and NASBench-201, both cell-based search spaces. NASBench-101 has 423,621 candidates trained on CIFAR-10 for 108 epochs. NASBench-201 includes 15,625 candidates trained on CIFAR-10, CIFAR-100, and ImageNet-16-120 for 200 epochs each. Computation was on Tesla V100 GPUs, with MOTE or MOTE-NAS costs calculated specifically on V100. Our experiment had three parts: comparing MOTE with other estimates on NASBench101 and NASBench-201, evaluating MOTE-NAS against other NAS methods on NASBench-201, and using MOTE-NAS to search for a mobilenet-like architecture on ImageNet-1K. Further, we visualize the rankings of MOTE and KNAS to perceive their differences in Fig. 8. MOTE is generated from the proposed reduced architecture and dataset. We used reduced dataset with a sampling rate hyperparameter $r=10$ based on the results in Fig. 5. The hyperparameters are batch size 256, epochs 50, learning rate 0.001 with Adam optimizer, and cross-entropy loss function. MOTE generation per cell took about seven GPU seconds under these settings. ", "page_idx": 6}, {"type": "text", "text": "4.1 Comparison of MOTE and Other Estimates ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "To explore the performance gaps between MOTE and other relevant estimates, we compared NASBench-101 and NASBench-201. We ranked candidates using speed term, landscape term and MOTE or other estimates and compared the resulting rankings to the actual ranking, calculating Kendall\u2019s Tau correlation to gauge the performance of these estimates. The experimental results are presented in Fig. 7. ", "page_idx": 6}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/f03177c3783d5e7591a866cdf186c031f2fae441844e80250c7d5d35a8aad5c9.jpg", "img_caption": ["Figure 8: Comparison of the distribution of MOTE (red) and KNAS (green) on NASBench-201 (CIFAR-100). "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "NTK-based Estimates. MOTE leverages the landscape term to capture the non-convex nature from the candidate architectures, compensating for the shortcomings in NTK-based estimates. As shown in Fig. 7, MOTE achieves correlations of 0.68, 0.66, 0.62, and 0.47 in NASBench-101 and NASBench201. Compared to TE-NAS and KNAS, MOTE shows performance improvements ranging from $13\\%$ to $62\\%$ on NASBench-201. In addition, we observed poor performance of TE-NAS and KNAS in NASBench-101, with KNAS demonstrating a correlation of merely 0.09. This illustrates that NTKs struggle to adapt to larger search spaces and more diverse candidate architectures in environments like NASBench-101. In contrast, MOTE maintains a high correlation of 0.47, demonstrating a significant increase of $261\\%$ and $422\\%$ compared to TE-NAS and KNAS, respectively. Compared to the state-of-the-art ZICO, MOTE still performs better than it does on benchmarks. Remarkably, these MOTE performance gains were achieved with an average cost of only seven seconds per candidate. ", "page_idx": 7}, {"type": "text", "text": "Other Estimates. When comparing MOTE with other estimates such as SynFlow [40, 1] and TSE [34], MOTE maintains a significant advantage. Compared to SynFlow and TSE, MOTE shows performance gains of $11\\%$ to $45\\%$ on NASBench-201 and $96\\%$ and $104\\%$ on NASBench-101, respectively. It should be noted that both TSE and MOTE are training-based estimates, and MOTE accelerates $2\\times$ faster than TSE, outperforming it significantly.Additionally, we can see that the proposed speed term and landscape term also perform well in Fig. 7, both of which are essential components of MOTE. ", "page_idx": 7}, {"type": "text", "text": "4.2 Visualization of MOTE and NTK based Estimate ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We depicted the distribution of MOTE in comparison to KNAS to facilitate analysis regarding MOTE and NTK-based estimates. As shown in Fig. 8, the experimental results involve random selection of 1K candidate architectures from NASBench-201 (CIFAR-100). The ${\\bf X}$ -axis represents the estimate ranking based on MOTE or KNAS, while the y-axis represents the actual ranking based on the test accuracy after 200 epochs. Each node in the figure represents a candidate architecture, with its (x, y) coordinates indicating its position in the estimate and the actual rankings, respectively. Both the estimate ranking and the actual ranking are sorted from high to low scores. ", "page_idx": 7}, {"type": "text", "text": "In the left subfigure of Fig. 8, we present the distribution of KNAS, while the right subfigure displays the distribution of MOTE. In general, MOTE is more concentrated than KNAS, indicating that MOTE is closer to the actual ranking of the candidates than KNAS. This observation aligns with the superior performance of MOTE in Kendall\u2019s Tau correlation comparisons, as shown in Fig. 7. Further, focusing on the high-performance region (the blue circle in the lower left corner of the two sub-figures), MOTE exhibits a more concentrated trend compared to the chaotic distribution of KNAS. This suggests that MOTE outperforms KNAS in predicting promising architectures. Finally, examining the purple boxes in the lower right and upper left corners of the two subfigures reveals candidates for which the estimate indicates good. However, the actual performance is poor, or vice versa. In both cases, MOTE\u2019s misjudgments are significantly fewer than those of KNAS, visually confirming that MOTE is highly competitive compared to the mainstream NTK-based estimate. ", "page_idx": 7}, {"type": "text", "text": "Table 1: Comparison of the proposed MOTE-NAS and others on NASBench-201. Note that \u2018Cost (s)\u2019 indicates the cost in seconds calculated on Tesla V100. Entries in bold with underlines indicate the best performance, and those in bold alone represent the second-best performance. ", "page_idx": 8}, {"type": "table", "img_path": "jKLyKeZfzv/tmp/9dd3aab71620212069cf7a1186b96e66f8c5b1a722678fe8a720c164afd22766.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "4.3 Comparisons of MOTE-NAS and Other NAS ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "To compare the performance differences between MOTE-NAS and other NAS methods, we carried out experiments on NASBench-201. Tab. 1 presents the experimental results, where ${\\mathrm{}}^{\\bullet\\bullet}\\mathrm{Acc}({\\%})^{\\bullet}$ represents the accuracy of the final architecture discovered by the NAS methods on the test set of the respective dataset. At the same time, \u201cCost(s)\u201d indicates the total seconds used by NAS methods to discover this final architecture. ", "page_idx": 8}, {"type": "text", "text": "MOTE-NAS with Top- $k$ Evaluation. MOTE-NAS combines MOTE with an evolutionary algorithm to filter and mutate potential high-scoring candidates by MOTE. Ultimately, the top $k$ high-scoring candidates are selected using the early stopping version of the test accuracy (after 12 epochs), similar to the approaches in [47, 51]. The time consumption of MOTE-NAS lies in training candidates to obtain MOTE during the search stage and the early stopping accuracy obtained during the evaluation stage. However, the cost of each MOTE is only about seven gpu seconds, so primary consumption is still to evaluate the top- $k$ candidates. We have set the $k$ range from 5, 10, 20. When $k=5$ , the final architecture found by MOTE-NAS achieves significantly higher accuracy on three datasets of NASBench-201, compared to TE-NAS[6], KNAS[47], and Eigen-NAS[51], with speedups ranging from $1.9\\times$ to $6.9\\times$ . It only slightly lags behind $\\mathrm{REA}+\\mathrm{LGA}[30]$ in test accuracy. However, when $k=10$ or $k=20$ , with a time consumption of $8.5\\mathrm{K}$ gpu seconds, the final architecture discovered by MOTE-NAS achieves a remarkable accuracy of $94.32\\%$ on CIFAR-10 and $72.81\\%$ on CIFAR-100. Moreover, the MOTE-NAS discovered candidate architecture achieves $46.38\\%$ on ImageNet-16 with 11.3K seconds. Compared to NTK-based NAS (TE-NAS, KNAS, Eigen-NAS, LGA), the proposed MOTE-NAS consistently achieves the best accuracy with the lowest cost. ", "page_idx": 8}, {"type": "text", "text": "Assessing the Evaluation-Free Version of MOTE-NAS. The proposed MOTE-NAS has shown impressive performance in balancing time consumption and efficiency. The substantial time cost led us to consider omitting the evaluation stage to pursue a faster MOTE-NAS framework. Especially considering that MOTE, compared to other estimates, achieves a higher Kendall\u2019s Tau correlation, indicating a significant improvement in MOTE\u2019s predictive performance. Hence, omitting additional validation information became a viable option. To accomplish this, we removed the entire evaluation stage from MOTE-NAS. At the end of the search stage, we utilized MOTE to select top-1 as the final architecture. This variant is referred to as MOTE-NAS-EF in Tab. 1. ", "page_idx": 8}, {"type": "text", "text": "Although MOTE-NAS-EF experiences an accuracy loss, the search cost savings are notable. MOTENAS-EF achieved $93.54\\%$ accuracy on CIFAR-10, $71.59\\%$ on CIFAR-100, and $44.73\\%$ on ImageNet16-120 with the search cost of only about 0.6K gpu seconds. In contrast, KNAS requires 4.4K, 18.4K, and 20K seconds to achieve accuracies of $93.38\\%$ , $71.05\\%$ , and $44.63\\%$ , respectively. In particular, MOTE-NAS-EF matches KNAS in accuracy but accelerates the process by $4.8\\times$ to $22.2\\times$ , underscoring the superiority of MOTE-NAS-EF in speed. ", "page_idx": 8}, {"type": "table", "img_path": "jKLyKeZfzv/tmp/133653311a0100a9b16964e444f4318f72e3ffcc821cb1c821f5dbc0fd71c0ae.jpg", "table_caption": ["Table 2: This table shows the top-1 accuracy of architectures found on ImageNet using MOTE-NAS and other NAS methods. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "4.4 MOTE-NAS on ImageNet-1K ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Search Space. We search for a promising architecture based on the mobilenetV3 search space using MOTE, then train and evaluate it on imagenet-1K. The mobilenetV3 search space is a open search space that has five inverted residual blocks with the SE module. Every block has several hyperparameters, such as the expansion ratio for input channel expansion, kernel size, and SE module attached or not. Based on it, we restrict the selection range for each hyperparameter. We restrict the expansion ratio range from $2,4,6$ , kernel size range from 3, 5, 7, and the SE module used or not. ", "page_idx": 9}, {"type": "text", "text": "Rescaled Reduced Architecture for Macro-Search. Our study introduces a Rescaled Reduced Architecture for Macro-Search, where we modify the reduced architecture to accommodate the simultaneous assessment of five blocks and their collective performance. By expanding the cell layers from two to five and independently sampling the structure of each layer, our rescaled approach enables macro-search capabilities beyond single-cell exploration. Further technical specifics of this rescaled reduced architecture are outlined in Appendix A.5. Subsequently, employing MOTE-NAS with this modified architecture, we conducted a search within the mobilenetv3 space under approximately 400M FLOPs. Following 200 epochs of training using 10 GTX 2080Ti GPUs on the imagenet-1K dataset, the results (see Table 2) demonstrate the efficacy of our approach. While the accuracy of MOTE-NAS $76.2\\%$ and $77.1\\%$ ) trails slightly behind OFA\u2019s $77.7\\%$ , MOTE-NAS achieves this with a significantly reduced computational cost of 0.1 GPU days compared to OFA\u2019s 50 days, representing a $500\\mathrm{x}$ speed improvement. Furthermore, our retraining of ZICO\u2019s best architecture yielded a $75.8\\%$ accuracy on imagenet, surpassed by MOTE-NAS with its superior accuracies and a $4\\mathbf{x}$ faster search cost than the 0.4 day of ZICO. ", "page_idx": 9}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we design a novel training-based estimate for efficient Neural Architecture Search (NAS) from a multi-objective optimization perspective. The key idea is to use landscape terms to capture the non-convex nature of candidate architectures from a macro perspective, and use speed terms to monitor convergence speed from a micro perspective into the estimated design. The proposed MOTE efficiently generates the landscape and speed terms with two reduction strategies, which wisely trade-off the consideration of architecture and dataset. These designs can effectively capture the nonlinear characteristics of deep neural network training, address the drawbacks of NTK methods, and achieve a new state-of-the-art state. We extend our approach by iterative ranking-based evolutionary search, then deduce an evaluation-free version (MOTE-NAS-EF) that runs even faster. Extensive experimental results demonstrate the superiority of our new NAS methods over other frontier NAS methods, including KNAS, LGA, and ZICO, on NASBench-101, NASBench-201, and ImageNet-1K. Future works include expanding MOTE to other NAS frameworks, such as predictor-based methods, to pursue precise search results while exploring MOTE\u2019s generalization ability. Another line of extension is to work with the more challenging NASBench-301 benchmark dataset [38] that offers a much larger and more complex architecture space than both NASBench-101 and NASBench-201. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] Mohamed S Abdelfattah, Abhinav Mehrotra, \u0141ukasz Dudziak, and Nicholas D Lane. Zero-cost proxies for lightweight NAS. arXiv preprint arXiv:2101.08134, 2021. ", "page_idx": 9}, {"type": "text", "text": "[2] Bowen Baker, Otkrist Gupta, Nikhil Naik, and Ramesh Raskar. Designing neural network architectures using reinforcement learning. arXiv preprint arXiv:1611.02167, 2016. [3] George EP Box and David R Cox. An analysis of transformations. Journal of the Royal Statistical Society Series B: Statistical Methodology, 26(2):211\u2013243, 1964.   \n[4] Han Cai, Chuang Gan, Tianzhe Wang, Zhekai Zhang, and Song Han. Once-for-all: Train one network and specialize it for efficient deployment. arXiv preprint arXiv:1908.09791, 2019.   \n[5] Boyu Chen, Peixia Li, Baopu Li, Chen Lin, Chuming Li, Ming Sun, Junjie Yan, and Wanli Ouyang. BN-NAS: Neural architecture search with batch normalization. In Proceedings of the IEEE/CVF international conference on computer vision, pages 307\u2013316, 2021.   \n[6] Wuyang Chen, Xinyu Gong, and Zhangyang Wang. Neural architecture search on ImageNet in four GPU hours: A theoretically inspired perspective. arXiv preprint arXiv:2102.11535, 2021.   \n[7] Xin Chen, Lingxi Xie, Jun Wu, and Qi Tian. Progressive differentiable architecture search: Bridging the depth gap between search and evaluation. In ICCV, pages 1294\u20131303, 2019. [8] Patryk Chrabaszcz, Ilya Loshchilov, and Frank Hutter. A downsampled variant of ImageNet as an alternative to the CIFAR datasets. arXiv preprint arXiv:1707.08819, 2017.   \n[9] Xiaoliang Dai, Alvin Wan, Peizhao Zhang, Bichen Wu, Zijian He, Zhen Wei, Kan Chen, Yuandong Tian, Matthew Yu, Peter Vajda, et al. FBNetV3: Joint architecture-recipe search using predictor pretraining. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 16276\u201316285, 2021.   \n[10] Xuanyi Dong and Yi Yang. NAS-Bench-201: Extending the scope of reproducible neural architecture search. arXiv preprint arXiv:2001.00326, 2020.   \n[11] Lukasz Dudziak, Thomas Chau, Mohamed Abdelfattah, Royson Lee, Hyeji Kim, and Nicholas Lane. BRP-NAS: Prediction-based nas using GCNs. Advances in Neural Information Processing Systems, 33:10480\u201310490, 2020.   \n[12] Ian J Goodfellow, Oriol Vinyals, and Andrew M Saxe. Qualitatively characterizing neural network optimization problems. arXiv preprint arXiv:1412.6544, 2014.   \n[13] Moritz Hardt, Ben Recht, and Yoram Singer. Train faster, generalize better: Stability of stochastic gradient descent. In International conference on machine learning, pages 1225\u20131234. PMLR, 2016.   \n[14] Andrew Howard, Mark Sandler, Grace Chu, Liang-Chieh Chen, Bo Chen, Mingxing Tan, Weijun Wang, Yukun Zhu, Ruoming Pang, Vijay Vasudevan, et al. Searching for MobileNetv3. In Proceedings of the IEEE/CVF international conference on computer vision, pages 1314\u20131324, 2019.   \n[15] Minbin Huang, Zhijian Huang, Changlin Li, Xin Chen, Hang Xu, Zhenguo Li, and Xiaodan Liang. Arch-Graph: Acyclic architecture relation predictor for task-transferable neural architecture search. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 11881\u201311891, 2022.   \n[16] Yiding Jiang, Behnam Neyshabur, Hossein Mobahi, Dilip Krishnan, and Samy Bengio. Fantastic generalization measures and where to find them. arXiv preprint arXiv:1912.02178, 2019.   \n[17] Thomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks. arXiv preprint arXiv:1609.02907, 2016.   \n[18] Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images, 2009.   \n[19] Jaehoon Lee, Lechao Xiao, Samuel Schoenholz, Yasaman Bahri, Roman Novak, Jascha SohlDickstein, and Jeffrey Pennington. Wide neural networks of any depth evolve as linear models under gradient descent. Advances in neural information processing systems, 32, 2019.   \n[20] Namhoon Lee, Thalaiyasingam Ajanthan, and Philip HS Torr. SNIP: Single-shot network pruning based on connection sensitivity. arXiv preprint arXiv:1810.02340, 2018.   \n[21] Guihong Li, Yuedong Yang, Kartikeya Bhardwaj, and Radu Marculescu. ZiCo: Zero-shot NAS via inverse coefficient of variation on gradients. arXiv preprint arXiv:2301.11300, 2023.   \n[22] Hanwen Liang, Shifeng Zhang, Jiacheng Sun, Xingqiu He, Weiran Huang, Kechen Zhuang, and Zhenguo Li. DART $S+$ : Improved differentiable architecture search with early stopping. arXiv:1909.06035, 2019.   \n[23] Ming Lin, Pichao Wang, Zhenhong Sun, Hesen Chen, Xiuyu Sun, Qi Qian, Hao Li, and Rong Jin. Zen-NAS: A zero-shot NAS for high-performance image recognition. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 347\u2013356, 2021.   \n[24] Chenxi Liu, Barret Zoph, Maxim Neumann, Jonathon Shlens, Wei Hua, Li-Jia Li, Li Fei-Fei, Alan Yuille, Jonathan Huang, and Kevin Murphy. Progressive neural architecture search. In Proceedings of the European conference on computer vision (ECCV), pages 19\u201334, 2018.   \n[25] Hanxiao Liu, Karen Simonyan, and Yiming Yang. DARTS: Differentiable architecture search. arXiv preprint arXiv:1806.09055, 2018.   \n[26] Hanxiao Liu, Karen Simonyan, and Yiming Yang. DARTS: Differentiable architecture search. In ICLR, 2019.   \n[27] Zhichao Lu, Ian Whalen, Vishnu Boddeti, Yashesh Dhebar, Kalyanmoy Deb, Erik Goodman, and Wolfgang Banzhaf. NSGA-Net: neural architecture search using multi-objective genetic algorithm. In Proceedings of the genetic and evolutionary computation conference, pages 419\u2013427, 2019.   \n[28] Renqian Luo, Fei Tian, Tao Qin, Enhong Chen, and Tie-Yan Liu. Neural architecture optimization. Advances in neural information processing systems, 31, 2018.   \n[29] Joe Mellor, Jack Turner, Amos Storkey, and Elliot J Crowley. Neural architecture search without training. In International Conference on Machine Learning, pages 7588\u20137598. PMLR, 2021.   \n[30] Jisoo Mok, Byunggook Na, Ji-Hoon Kim, Dongyoon Han, and Sungroh Yoon. Demystifying the neural tangent kernel from a practical perspective: Can it be trusted for neural architecture search without training? In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 11861\u201311870, 2022.   \n[31] Esteban Real, Alok Aggarwal, Yanping Huang, and Quoc V Le. Regularized evolution for image classifier architecture search. In Proceedings of the aaai conference on artificial intelligence, volume 33, pages 4780\u20134789, 2019.   \n[32] Esteban Real, Alok Aggarwal, Yanping Huang, and Quoc V Le. Regularized evolution for image classifier architecture search. In Proceedings of the aaai conference on artificial intelligence, volume 33, pages 4780\u20134789, 2019.   \n[33] Esteban Real, Sherry Moore, Andrew Selle, Saurabh Saxena, Yutaka Leon Suematsu, Jie Tan, Quoc V Le, and Alexey Kurakin. Large-scale evolution of image classifiers. In International Conference on Machine Learning, pages 2902\u20132911. PMLR, 2017.   \n[34] Robin Ru, Clare Lyle, Lisa Schut, Miroslav Fil, Mark van der Wilk, and Yarin Gal. Speedy performance estimation for neural architecture search. Advances in Neural Information Processing Systems, 34:4079\u20134092, 2021.   \n[35] Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, and Liang-Chieh Chen. MobileNetv2: Inverted residuals and linear bottlenecks. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 4510\u20134520, 2018.   \n[36] Yu Shen, Yang Li, Jian Zheng, Wentao Zhang, Peng Yao, Jixiang Li, Sen Yang, Ji Liu, and Bin Cui. ProxyBO: Accelerating neural architecture search via Bayesian optimization with zero-cost proxies. arXiv preprint arXiv:2110.10423, 2021.   \n[37] Yao Shu, Wei Wang, and Shaofeng Cai. Understanding architectures learnt by cell-based neural architecture search. In ICLR, 2019.   \n[38] Julien Niklas Siems, Lucas Zimmer, Arber Zela, Jovita Lukasik, Margret Keuper, and Frank Hutter. NAS-Bench-301 and the case for surrogate benchmarks for neural architecture search, 2020.   \n[39] Mingxing Tan, Bo Chen, Ruoming Pang, Vijay Vasudevan, Mark Sandler, Andrew Howard, and Quoc V Le. MnasNet: Platform-aware neural architecture search for mobile. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 2820\u20132828, 2019.   \n[40] Hidenori Tanaka, Daniel Kunin, Daniel L Yamins, and Surya Ganguli. Pruning neural networks without any data by iteratively conserving synaptic flow. Advances in Neural Information Processing Systems, 33:6377\u20136389, 2020.   \n[41] Chaoqi Wang, Guodong Zhang, and Roger Grosse. Picking winning tickets before training by preserving gradient flow. arXiv preprint arXiv:2002.07376, 2020.   \n[42] Chen Wei, Chuang Niu, Yiping Tang, Yue Wang, Haihong Hu, and Jimin Liang. NPENAS: Neural predictor guided evolution for neural architecture search. IEEE Transactions on Neural Networks and Learning Systems, 2022.   \n[43] Wei Wen, Hanxiao Liu, Yiran Chen, Hai Li, Gabriel Bender, and Pieter-Jan Kindermans. Neural predictor for neural architecture search. In European Conference on Computer Vision, pages 660\u2013676. Springer, 2020.   \n[44] Colin White, Arber Zela, Robin Ru, Yang Liu, and Frank Hutter. How powerful are performance predictors in neural architecture search? Advances in Neural Information Processing Systems, 34:28454\u201328469, 2021.   \n[45] Junru Wu, Xiyang Dai, Dongdong Chen, Yinpeng Chen, Mengchen Liu, Ye Yu, Zhangyang Wang, Zicheng Liu, Mei Chen, and Lu Yuan. Stronger NAS with weaker predictors. Advances in Neural Information Processing Systems, 34:28904\u201328918, 2021.   \n[46] Lingxi Xie and Alan Yuille. Genetic CNN. In Proceedings of the IEEE international conference on computer vision, pages 1379\u20131388, 2017.   \n[47] Jingjing Xu, Liang Zhao, Junyang Lin, Rundong Gao, Xu Sun, and Hongxia Yang. KNAS: green neural architecture search. In International Conference on Machine Learning, pages 11613\u201311625. PMLR, 2021.   \n[48] Zhaohui Yang, Yunhe Wang, Xinghao Chen, Boxin Shi, Chao Xu, Chunjing Xu, Qi Tian, and Chang Xu. CARS: Continuous evolution for efficient neural architecture search. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 1829\u20131838, 2020.   \n[49] Chris Ying, Aaron Klein, Eric Christiansen, Esteban Real, Kevin Murphy, and Frank Hutter. NAS-Bench-101: Towards reproducible neural architecture search. In International Conference on Machine Learning, pages 7105\u20137114. PMLR, 2019.   \n[50] Arber Zela, Thomas Elsken, Tonmoy Saikia, Yassine Marrakchi, Thomas Brox, and Frank Hutter. Understanding and robustifying differentiable architecture search. In Proceedings of the International Conference on Learning Representations, 2020.   \n[51] Zhenyu Zhu, Fanghui Liu, Grigorios Chrysos, and Volkan Cevher. Generalization properties of NAS under activation and skip connection search. Advances in Neural Information Processing Systems, 35:23551\u201323565, 2022.   \n[52] Barret Zoph and Quoc V Le. Neural architecture search with reinforcement learning. arXiv preprint arXiv:1611.01578, 2016.   \n[53] Barret Zoph, Vijay Vasudevan, Jonathon Shlens, and Quoc V Le. Learning transferable architectures for scalable image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 8697\u20138710, 2018. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "A Appendix ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Table A1: Kendall\u2019s $\\tau$ correlation between the MOTE scoring output and the test accuracy(after 200 epochs). Experiments are performed to compare four versions of MOTE on three sub-datasets (CIFAR-10, CIFAR-100, ImgNet-16) of the NASBench-201. ", "page_idx": 13}, {"type": "table", "img_path": "jKLyKeZfzv/tmp/b7d735d297e1c89df74deaa231b73c0d642e8ad4d582b10b45747fec2043036d.jpg", "table_caption": [], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "A.1 Non-linear Transformation for MOTE ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "The proposed Multi-Objective Training-based Estimate (MOTE) achieves efficient Network Architecture Search (NAS) based on two essential components, namely the landscape and speed terms. These terms and their variants play a pivotal role in modeling the training dynamics and thus serve as a performance estimate for candidate architectures during the search. To address the considerable variability of these terms, in the main paper, we propose to incorporate the box-cox method in the MOTE design to constrain both terms. We next provide additional experimental results to support such a design by evaluating the influence of other designs and variants of these terms. Specifically, we compute kandall\u2019s correlation on NASBench-201 to compare four versions of MOTE that contain logarithm, reciprocal, box-cox, and the original. ", "page_idx": 13}, {"type": "text", "text": "Table A1 shows the comparative results of four versions of MOTE. MOTE w/ box-cox performs the best. The box-cox transformation leads to a notable improvement compared to the original in correlation: $2\\%$ improvement for CIFAR-10, $2\\%$ improvement for CIFAR-100, and $3\\%$ improvement for ImageNet-16-120. These improvements are attributed to the ability to contract outliers, bringing them closer to the normal data distribution and reducing the impact on MOTE. ", "page_idx": 13}, {"type": "text", "text": "A.2 Analysis of Two Reduction Strategies ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "Although the proposed MOTE-NAS approach can greatly reduce the required NAS cost in producing a suitable network architecture, the time cost of model training and evaluation is still the bottleneck and trade-off. We further analyze the two proposed reduction strategies and present the results of the ablation study regarding the computation time trade-off. Fig. 3 provides the MOTE generation pipeline that contains the reduced architecture and the reduced dataset. ", "page_idx": 13}, {"type": "text", "text": "Experiments setting. We conducted a random sampling of 1,000 candidate architectures from NASBench-101 and NASBench-201, respectively. Notably, these candidate architectures consist of their predefined meta-architecture and cells within their search spaces. Each cell shares identical hyperparameters and operations. Therefore, to obtain complete models, the candidate architectures (equivalent to candidate cells) must be assembled into either the meta-architecture or our reduced architecture. The proposed reduced architecture speeds up model search by retaining only a single convolutional layer as the stem layer and two cell layers, eliminating the majority of layers from the original meta-architecture of NASBench-101 and NASBench-201. The reduced dataset is a representative proxy subset of CIFAR-100, with the aim of accelerating the training process by reducing the number of training images, thus reducing the time needed for each training epoch. ", "page_idx": 13}, {"type": "text", "text": "Reduced Architecture vs. Meta-Architecture. Table A2 compares the model parameters and FLOPs of predefined meta-architecture and the peoposed reduced architecture, when evaluated on the NASBench-101 and NASBench-201 benchmarks. For the NASBench-101 case, the reduced architecture contains much fewer parameters of 34.4K, in contrast to the 2.3M parameters of the original meta-architecture. This is a significant reduction of $64\\times$ . Similarly, the FLOPs for the reduced architecture amount to $18.3\\mathrm{M}$ , while the original meta-architecture records 1.0G FLOPs, indicating an acceleration of $435\\times$ . In the case of NASBench-201 candidates, the reduced architecture exhibits reductions/accelerations of $15\\times$ and $4\\times$ compared to the original meta-architecture. These results indicate a superior advantage of the proposed reduction strategy in both memory requirements and computational speed on the two benchmarks. ", "page_idx": 13}, {"type": "table", "img_path": "jKLyKeZfzv/tmp/1bf3ffcc445a52933cfaaa8eb69d6b24a0e4d7f0807da3b81594461c8dcf05a7.jpg", "table_caption": ["Table A2: Comparisons of memory and computation requirements between our reduced architecture and original predefined meta-architecture of NASBench-101 and NASbench-201. "], "table_footnote": [], "page_idx": 14}, {"type": "table", "img_path": "jKLyKeZfzv/tmp/afdbbfb1f8ccedd15aa7365bfb1184ba200ba05ffba0b096437a13f9d6509bae.jpg", "table_caption": ["Table A3: Ablation study for three reduced strategies on NASBench-101. $r$ represents the number of selected labels in the reduced dataset. Cost(s) indicates the average seconds for each candidate to obtain the estimate. $\\tau(\\%)$ is the Kendall\u2019s $\\tau$ correlation. "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Ablation Study of Reduction Strategies. We outline the experimental setup for two reduction strategies: (1) a reduced architecture inspired by predefined meta-architecture of NASBench-101 and NASBench-201, (2) a reduced dataset for efficiently training. Evaluations are performed on the NASBench-101 benchmark. We rank 1,000 randomly selected candidate architectures under different reduction conditions. The $\\tau$ correlation measures MOTE and test accuracy obtained from model training after 108 epochs. The early stopping test accuracy after 4 epochs serves as the baseline. We incrementally introduce the reduced architecture and reduced dataset to assess the performance variations induced by the two strategies. Let $T$ denote the number of training images, $e$ denote the total epochs in search, and $f$ denote the FLOPs of the candidate architecture. The total FLOPs (T-FLOPs) required throughout the training process are calculated as: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\mathrm{T-FLOPs}=T\\times\\mathbf{e}\\times f.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Table A3 presents the results of the ablation study. In the table, \u201cAcc w/ MA\u201d denotes the early stopping test accuracy (after 4 epochs) from training on the original meta-architecture. When utilized it for candidate ranking, it achieves a correlation of $34.5\\%$ . However, owing to the complexity nature of the meta-architecture, it incurs substantial time costs, with T-FLOPs reaching 190.7B and a time cost of 88.2 seconds per candidate. In contrast, \u201cAcc w/ RA\u201d denotes the replacement of the meta-architecture with a reduced architecture, leading to a considerable reduction in time cost to 8.7B T-FLOPs and 29.2 seconds. However, this time reduction comes with a significant performance loss, as the correlation drops to $8.1\\%$ , primarily attributed to the sensitivity nature of the test accuracy. ", "page_idx": 14}, {"type": "text", "text": "Finally, $\\mathrm{^{\\star}M O T E+R A^{\\prime\\prime}}$ represents our proposed solution that addresses trade-off concerns. Using MOTE\u2019s dual objectives, it maintains the same time cost while elevating the correlation to $50.1\\%$ , even surpassing the baseline. Subsequently, $\\mathrm{^{\\cdot}M O T E+R A+R D^{\\ast}}$ indicates the further introduction of the reduced dataset, which reduces the number of training images used in the search. The time cost rapidly decreases with the smaller values of the hyperparameter $r$ . At $r=10$ , it requires only 872.6G T-FLOPs and 13.2 seconds, resulting in acceleration rates of $21.7\\times$ and $27.5\\times$ compared to the baseline, with a slight decrease in correlation to $46.6\\%$ . ", "page_idx": 14}, {"type": "text", "text": "A.3 Implementation Details of MOTE-NAS ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Despite MOTE consistently delivering impressive performance aided by reduction strategies, it remains only a proxy estimate. A comprehensive NAS method still requires the participation of ", "page_idx": 14}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/bf4cf82fe214866257ce8d2810695b3851592852e287f0dd4156ba73d9fe4b4c.jpg", "img_caption": ["Search Stage (total iters $=$ max(k,10)) "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Figure A1: The mutation step of the evolutionary process in the search. When the iteration count is 0, as opposed to being greater than 0, the number of samples taken from the search space varies. The sampling size $B$ , increases with the number of iterations. ", "page_idx": 15}, {"type": "image", "img_path": "jKLyKeZfzv/tmp/ce92051d725bc46db077052401d87d9e4dc6c45638cd365ccbb362bb62863684.jpg", "img_caption": ["Figure A2: Encoding a cell into the adjacency and operation matrix. This entire procedure closely resembles the predictor-based NAS. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "accuracy to evaluate the actual performance of the candidates discovered, similar to NTK-based NAS methods [6, 47, 51]. However, the time cost to obtain test accuracy is exceedingly high, often requiring thousands of GPU seconds. Hence, we employ MOTE to assist the evolutionary process in the search stage to obtain a small subset of potentially promising candidates, and then evaluate them by test accuracy. As illustrated in Fig. A1, throughout the iterative evolutionary process, MOTE-NAS relies on mutations to quickly transform known promising architectures (in pool $P$ ) into candidates for the next iteration. The detailed steps of the mutation process are outlined as follows: ", "page_idx": 15}, {"type": "text", "text": "1. Select the top $10\\%$ candidate architectures from the pool $P$ based on MOTE.   \n2. Encode candidate architectures $S$ into corresponding adjacency matrices $A$ and operation matrices $X$ .   \n3. Mutate $S$ to obtain the mutated architectures $S^{\\prime}$ . The encoded matrices $A^{\\prime}$ and $X^{\\prime}$ derived from S\u2032 satisfy (A\u2032\u2212A)2+ (X\u2032\u2212X)2 .   \n4. If the size of $S^{\\prime}$ exceeds $10\\times k$ , randomly select $10\\times k$ and add them to the pool $P$ . Otherwise, add $S^{\\prime}$ to $P$ . ", "page_idx": 15}, {"type": "text", "text": "Fig. A2 illustrates the methodology employed in Step 2 to encode candidate architectures. In the cellbased search space [25, 49, 10, 38], candidate architectures are decomposed into smaller cells with predefined hyperparameters, including the total number of nodes within a cell, the maximum number of edges, and the allowable operations for each node. The fixed nature of these hyperparameters ensures the consistent shape of each cell. This consistency allows to represent edge connections within the cell using an adjacency matrix, as well as using one-hot vectors to represent the selected operations of each node using an operation matrix. Generating these fixed-shape matrices for all candidates enables the representation of structural differences by calculating element-wise distances between corresponding matrices of two candidates and summing the results. ", "page_idx": 15}, {"type": "table", "img_path": "jKLyKeZfzv/tmp/1ac1cdc46fc1870fb78a7aeb7d0f94b4988c7a0b99ad5ef5524a35413251c771.jpg", "table_caption": ["Table A4: Comparison of the proposed MOTE-NAS and others on NASBench-201. Cost (s) indicates the cost in seconds calculated on Tesla V100. Acc $(\\%)$ represents the accuracy produced by the resulting network on respective datasets. Entries in bold with underlines indicate the best performance, and those in bold alone represent the second-best performance. "], "table_footnote": [], "page_idx": 16}, {"type": "image", "img_path": "", "img_caption": ["Figure A3: The bottom one is the proposed rescaled reduced architecture, it consists of five independent cells that have different structure than other four. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "A.4 MOTE-NAS with Random Sampling ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "We remove the evolutionary search stage in MOTE-NAS and apply Random Sampling (RS) to test the performance of MOTE under various sampling strategies. This hybrid approach, termed MOTE-NAS-RS, initially draws $100\\times k$ candidates from the search space by random sampling. The top- $k$ candidates are then selected based on MOTE, further refined to top-1 based on early stopping test accuracy (after 12 epochs). Our experiments on NASBench-201 involved 10 runs for each experiment, with the results averaged and presented in Table A4. ", "page_idx": 16}, {"type": "text", "text": "Although MOTE-NAS-RS naturally lags behind MOTE-NAS due to the inherent simplicity of random sampling compared to the evolutionary algorithm, MOTE-NAS-RS notably outperforms mainstream NTK-based NAS. Achieving a final architecture accuracy of $94.07\\%$ , MOTE-NAS-RS surpasses KNAS [47], Eigen-NAS [51], and ${\\mathrm{RS}}{+}{\\mathrm{LGA}}$ [30] on CIFAR-10. On CIFAR-100, it reaches an accuracy of $72.60\\%$ , even outpacing REA+LGA [30] at $72.42\\%$ . For ImgNet-16-120, it closely trails ${\\mathrm{RS}}{+}{\\mathrm{LGA}}$ . This highlights the effectiveness of MOTE, demonstrating superior performance even when paired with a basic sampling strategy. Future studies may explore the potential combination of MOTE with NTK-based NAS without training, as suggested by [30]. ", "page_idx": 16}, {"type": "text", "text": "A.5 Rescaled Reduced Architecture for MobileNetV3 Search Space ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "To analyze the performance of MOTE-NAS in the open search space, we used it to search for promising architectures in the mobilenetv3 search space. Mobilenetv3 search space contains five inverted residual blocks with the SE module, on the other word, the search targets are five different cells, but the proposed reduced architecture is only for single cell search. Therefore, we rescale the reduced architecture to achieve this new purpose, as shown in Fig. A3, the rescaled version consists of five different cells to fti five blocks while still maintaining a lightweight scale. It allows us to search an approximate open search space, and the architecture MOTE-NAS found has shown remarkable performance on imageNet-1K, the results refer to Tab. 2. ", "page_idx": 16}, {"type": "text", "text": "", "page_idx": 17}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: Our proposed methods and it\u2019s concept have been introduced in abstract and introduction sections. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 18}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Justification: We have shown in experiments that our method does not comprehensively outperform other advanced methods, and we have also illustrated the limitations of our method in experiments on imagenet. ", "page_idx": 18}, {"type": "text", "text": "Guidelines: ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 18}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 18}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "Justification: This paper does not contain any mathematical proofs, only mathematical demonstrations of relevant concepts. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 19}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "Justification: We conduct experiments using public benchmarks, such as NASBench-101, NASBench-201, and ImageNet-1K. And we fully describe all hyperparameters and details that reproduce MOTE. ", "page_idx": 19}, {"type": "text", "text": "Guidelines: ", "page_idx": 19}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 19}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We have described the experimental details in the paper and supplementary materials as much as possible, and we will make the code public on github. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 20}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Justification: As mentioned before, we have fully exposed the hyperparameters of all experiments, including those required for training models. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 20}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 20}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 20}, {"type": "text", "text": "Justification: We only use common statistical indicators, such as accuracy, kandall\u2019s correlation, and fully explain more special experiments. For example, the most experiments are the average of 10 runs. ", "page_idx": 20}, {"type": "text", "text": "Guidelines: ", "page_idx": 20}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper. ", "page_idx": 20}, {"type": "text", "text": "\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 21}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We disclosed the type and number of GPUs used, and recorded the time consumed by the entire algorithm in related experiments. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 21}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 21}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 21}, {"type": "text", "text": "Justification: We have read and follow nips rules. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: ", "page_idx": 21}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 21}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 21}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 21}, {"type": "text", "text": "Justification: There is no societal impact of the work performed. ", "page_idx": 21}, {"type": "text", "text": "Guidelines: \u2022 The answer NA means that there is no societal impact of the work performed. ", "page_idx": 21}, {"type": "text", "text": "\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 22}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 22}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 22}, {"type": "text", "text": "Justification: This paper poses no such risks. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 22}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 22}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 22}, {"type": "text", "text": "Justification: We have fully cited the public benchmarks used. ", "page_idx": 22}, {"type": "text", "text": "Guidelines: ", "page_idx": 22}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: This paper does not release new assets. ", "page_idx": 23}, {"type": "text", "text": "Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 23}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 23}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 23}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 23}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. Guidelines: ", "page_idx": 23}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 23}, {"type": "text", "text": "", "page_idx": 24}]