[{"type": "text", "text": "Stepping Forward on the Last Mile ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Chen Feng Qualcomm AI Research \u2217 Qualcomm Canada ULC chenf@qti.qualcomm.com ", "page_idx": 0}, {"type": "text", "text": "Shaojie Zhuo Qualcomm AI Research \u2217 Qualcomm Canada ULC shaojiez@qti.qualcomm.com ", "page_idx": 0}, {"type": "text", "text": "Xiaopeng Zhang Qualcomm AI Research \u2217 Qualcomm Canada ULC xiaopeng@qti.qualcomm.com ", "page_idx": 0}, {"type": "text", "text": "Ramchalam Kinattinkara Ramakrishnan Qualcomm AI Research \u2217 Qualcomm Canada ULC rkinatti@qti.qualcomm.com ", "page_idx": 0}, {"type": "text", "text": "Zhaocong Yuan Qualcomm AI Research \u2217 Qualcomm Canada ULC zhaocong@qti.qualcomm.com ", "page_idx": 0}, {"type": "text", "text": "Andrew Zou Li University of Toronto andrewzou.li@mail.utoronto.ca ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Continuously adapting pre-trained models to local data on resource constrained edge devices is the last mile for model deployment. However, as models increase in size and depth, backpropagation requires a large amount of memory, which becomes prohibitive for edge devices. In addition, most existing low power neural processing engines (e.g., NPUs, DSPs, MCUs, etc.) are designed as fixed-point inference accelerators, without training capabilities. Forward gradients, solely based on directional derivatives computed from two forward calls, have been recently used for model training, with substantial savings in computation and memory. However, the performance of quantized training with fixed-point forward gradients remains unclear. In this paper, we investigate the feasibility of ondevice training using fixed-point forward gradients, by conducting comprehensive experiments across a variety of deep learning benchmark tasks in both vision and audio domains. We propose a series of algorithm enhancements that further reduce the memory footprint, and the accuracy gap compared to backpropagation. An empirical study on how training with forward gradients navigates in the loss landscape is further explored. Our results demonstrate that on the last mile of model customization on edge devices, training with fixed-point forward gradients is a feasible and practical approach. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "On-device training allows pre-trained models to be continuously adapted to newly collected personal data after deployment. Moving model training from the cloud to local devices is essential for model customization and protecting users\u2019 privacy (Moon et al. [2024]). However, the constraint on power and memory makes training on edge devices extremely challenging (Dhar et al. [2019]). Traditional backpropagation involves a forward step, which computes activations given an input, and a backward step which computes the gradients. Intermediate activation values must be stored in memory prior to the gradient of a certain layer is computed (Baldi and Sadowski [2016]). As models increase in size and depth, this process requires a prohibitive amount of memory for most existing edge devices. ", "page_idx": 0}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/5d14160b5be50c9d4c72af37841365548a0fcdfb1f8a8f53b1be83e71ac1edd7.jpg", "img_caption": ["Figure 1: An overview of fixed-point forward gradient learning. The pipeline includes quantized weights perturbation, quantized forward gradient calculation through two forward calls with perturbed weights, and quantized weights update. Each process is explained in details in section 3.3. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "To avoid large memory consumption, recent studies have re-examined the procedure of computing Forward Gradients as an alternative to standard backpropagation (Fournier et al. [2023]). As introduced by Baydin et al. [2022], a forward gradient, computed through a random, isotropic directional derivative, is an unbiased approximation of a weight gradient. Forward gradients can be further estimated solely with two forward calls of a neural network (Liu et al. [2020]), which saves computation and memory substantially. The work of MeZO (Malladi et al. [2023]) applies forward gradients on fine-tuning Large Lanugage Models (LLMs), and shows a success on diverse downstream tasks, with the same memory footprint as inference. ", "page_idx": 1}, {"type": "text", "text": "Despite the aforementioned beneftis, forward gradients may encounter the curse of dimensionality as the size of trainable parameters increases. Gradient approaximations from two forward calls may be noisy and with large variance (Ren et al. [2023]), resulting in less effective training of large networks. Moreover, most existing low power neural processing engines (e.g., NPUs, DSPs, MCUs, etc.) are designed as efficient fixed-point inference accelerators. The feasibility of utilizing fixed-point forward gradients for quantized training remains uncertain. Our goal is to gain deeper insights into whether training with fixed-point forward gradients can still result in competitive models while preserving the memory and computation beneftis. To answer the question, we conduct comprehensive experiments across a variety of deep learning benchmark tasks in both vision and audio domains. A series of algorithm enhancements are proposed to further reduce the memory footprint, and accuracy gap compared to backpropagation. We believe our study to be of high interest in making model personalization happen locally on edge devices. ", "page_idx": 1}, {"type": "text", "text": "Contributions. (a) We formulate the computation of forward gradients in the quantized space. Weight perturbations and gradient calculations are all in fixed-point precision during model training or adaptation (see Figure 1 and Section 3). (b) We demonstrate the feasibility of on-device training with fixed-point forward gradients, through comprehensive experiments across a variety of deep learning benchmark tasks in both vision and audio domains. Although the method is model architecture agnostic, the experiments cover most typical model types (e.g., CNN, RNN, ViT-based) and parameter sizes (100K to 80M). (c) We propose a series of algorithm enhancements that further reduce the memory footprint and accuracy gap compared to backpropagation, leading to a practical solution for model adaptation on edge devices. (d) Finally, we visualize the neural loss landscape and trajectories of training with forward gradients, and show its dynamics and characteristics. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "2.1 Memory Efficient Training through Backpropagation ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "With an increasing number of applications using large neural networks on device, there is a demand of moving model training from the cloud to local devices. However, the key bottleneck for efficient ondevice training is the limitation of memory resources. For example, training a simple Convolutional Recurrent model (CRNN, Keren and Schuller [2017]) with a parameter size of $250\\mathrm{kB}$ , requires 11.5MB $(46\\times)$ memory to store activations. Training memory is primarily attributed to activations rather than parameters. Studies on algorithms to reduce resource consumption during training have been published, with a trade-off between memory usage and model accuracy. Parameter-efficient fine-tuning techniques such as LoRA (Hu et al. [2021]) and prefix tuning (Li and Liang [2021]) are proposed to train a model with reduced parameters. Dynamic sparse representation (Mostafa and Wang [2019]) is proposed to reduce memory requirements by making the weight and activation values sparse during training. Low precision training (Micikevicius et al. [2018]) reduces model sizes and computation requirements by adopting 16-bit float precision instead of 32-bit. The work of Lin et al. [2022] pushes conventional convolutional neural network training on devices with only 256kB by pruning the training graph during compilation time. These methods mainly focus on reducing the trainable parameters or activation sizes, thus reduce the peak memory required for training a neural network. However, due to the inherent nature of backpropagation, intermediate activations across all layers must be retained until loss is backpropagated and gradients are calculated. Therefore, as models increase in size and depth, parameter-efficient techniques do not fundamentally resolve the training memory problem. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "2.2 Forward Gradients through Zeroth-order Optimization ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Forward gradient has been recently brought to attention by Baydin et al. [2022] and Silver et al. [2022], which showed that gradients can be computed solely based on the directional derivatives using the forward mode of auto-differentiation only. The forward gradients can be estimated via two forward calls using zeroth-order optimization (Liu et al. [2020]) by incorporating random perturbations on weights, entirely eliminating the need for backpropagation in gradient descent. The work of Ren et al. [2023] shows that it is possible to substantially reduce the variance of the forward gradient estimation by applying perturbations to activations rather than weights. Considering the memory required for storage of intermediate activations, only weight-perturbed forward gradient estimator can be deployed on low resource constrained devices. While research by Belouze [2022] claimed shortcomings of forward gradients in high dimensions, the work of MeZO (Malladi et al. [2023]) proposes a contradictory perspective by showing the lower bounds of such zeroth-order optimization is conditioned on loss landscape instead of number of trainable parameters. MeZO further applies forward gradients on fine-tuning LLMs, and shows a success on diverse downstream tasks. ", "page_idx": 2}, {"type": "text", "text": "2.3 Quantized Training and Quantized Gradients ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "There is limited literature on gradient computation in the quantized space. Quantization-aware training (QAT Nagel et al. [2021]) has been widely used to simulate the potential quantization loss in the training stage. However, most existing low power neural processors (e.g., NPUs, DSPs, MCUs, etc.) are designed and optimized for fixed-point inference. Direct training in the quantized space will fundamentally bridge the gap between training and inference, thus being essential for model adaptation on edge devices. However, the work of Lin et al. [2022] observed that the quantization process distorts backward gradients, resulting in significantly lower accuracy in model training through backpropagation. Quantization-aware scaling (QAS) is proposed to address this problem. It remains uncertain whether training with quantized forward gradients through zeroth-order optimization can still lead to competitive models on device, while preserving the memory and computation benefits. ", "page_idx": 2}, {"type": "text", "text": "3 Quantized Forward Gradient Learning ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Forward gradients utilize directional derivatives to bypass backpropagation, while retaining unbiased estimations of true gradients. In the following, we first review the technique of forward-mode autodifferentiation (AD Baydin et al. [2022]), alongside a practical implementation known as Simultaneous Perturbation Stochastic Approximation (SPSA) for zeroth-order gradient estimation (Spall [1992]). We then propose sign-m-SPSA, a variant of SPSA to alleviate the noisy component of forward gradients estimated by SPSA, which leads to stable performance in many use cases. Once the gradients are estimated, optimizers such as SGD, Adam etc. can be applied to update the weights. Finally, we formulate the Quantized Zeroth-order Forward Gradient (QZO-FF) estimator, mapping the processes of weights perturbation, gradients estimation and weights update in the fixed-point space. An overview of the QZO-FF algorithm is illustrated in Algorithm 1. ", "page_idx": 2}, {"type": "text", "text": "3.1 Forward Gradients ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Definition 1 (Forward Gradients). Consider a machine learning function $f(w):\\mathbb{R}^{n}\\to\\mathbb{R}$ , where $w\\in\\mathbb{R}^{n}$ is the trainable parameters that the gradients are evaluated. Forward gradients $g:\\mathbb{R}^{n}\\rightarrow\\mathbb{R}^{n}$ is defined as: ", "page_idx": 3}, {"type": "equation", "text": "$$\ng(w)=(\\nabla f(w)\\cdot z)z\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $z\\in\\mathbb{R}^{n}$ is a perturbation vector taken as multivariate random variable $z\\sim p(z)$ such that $z^{\\prime}s$ scalar components $z_{i}$ are independent and have zero-mean and unit variance for all $i$ . $\\dot{\\nabla}f(w)\\cdot z\\in\\mathbb{R}$ , the Jacobian matrix-vector product, defines the directional derivative of $f$ at point $w$ in direction $z$ . ", "page_idx": 3}, {"type": "text", "text": "3.2 Zeroth-order Optimization ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In order to have runtime advantage over backpropagation, a classical zeroth-order estimator, SPSA can be used to estimate the forward gradients by evaluating $f$ in forward path $m$ times, where $m\\ll n$ . ", "page_idx": 3}, {"type": "text", "text": "Definition 2 (SPSA). Given a model $f$ with parameters $w\\in\\mathbb{R}^{n}$ and a loss function $\\mathbb{L}(w)$ , SPSA estimates the gradient as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{g}(w)=\\frac{\\mathbb{L}(w+\\epsilon z)-\\mathbb{L}(w-\\epsilon z)}{2\\epsilon}z\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $z\\sim\\mathbb{N}(0,\\mathbb{I}_{n})$ is a weighted vector over all parameter dimensions, randomly sampled from normal distribution with zero-mean and standard deviation. The perturbation scale $\\epsilon$ is a small constant value (e.g., $1e-3)$ . For each sampled $z$ , SPSA only requires two forward calls through the model, with positive and negative perturbed weights respectively, to estimate the gradients. ", "page_idx": 3}, {"type": "text", "text": "Gradient maganitude defined in (2) is determined by loss difference of two forward calls based on a random perturbation applied on weights, which easily becomes noisy. Inspired by many popular optimizers, such as sign-SGD and RMSProp (Bernstein et al. [2018]), updating weights through a sign-based method achieves good practical performance for many gradient compression use cases. In order to mitigate the noisy component of forward gradients estimated by SPSA, we propose sign-m-SPSA by only taking the direction of loss difference under a certain perturbation, while disregarding the magnitude component. The estimation can be improved by averaging ${\\hat{g}}(w)$ over $m$ randomly sampled $z$ $(m\\ll n)$ , with an increased number of training iterations. ", "page_idx": 3}, {"type": "text", "text": "Definition 3 (Sign-m-SPSA). ", "text_level": 1, "page_idx": 3}, {"type": "equation", "text": "$$\n\\hat{g}(w)=\\frac{1}{m}\\sum_{i=1}^{m}s i g n(\\mathbb{L}(w+\\epsilon z_{i})-\\mathbb{L}(w-\\epsilon z_{i}))z_{i}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The intuition behind sign-m-SPSA is that during the training, the estimator samples a random perturbation direction $\\bar{z_{i}},i\\in\\{1,..,m\\}$ , and tests how it aligns with the true gradient by examining the loss change, and then multiplies the alignment direction with the perturbation direction. Weights will be updated along the sampled direction that leads to a decrease in loss. This design is also quantization-friendly, constraining the range of gradient values to be the same as perturbation for static quantization. Our later experiments show that 8-bit quantization of perturbation and forward gradient is sufficient for preserving the model accuracy across many use cases. ", "page_idx": 3}, {"type": "text", "text": "Definition 4 (Sign-m-SPSA-SGD). With ${\\hat{g}}(w)$ as the forward gradients estimated through sign-mSPSA, similar to backpropagation, an optimizer such as SGD with learning rate $\\eta$ can be used to update model parameters: ", "page_idx": 3}, {"type": "equation", "text": "$$\nw_{t+1}=w_{t}-\\eta\\hat{g}(w)\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "3.3 Quantized Weights Perturbation and Forward Gradients ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Sign-m-SPSA in (3) estimates forward gradients through a minimum of two forward calls, with positive and negative perturbed weights in float precision, respectively. For low power devices with fixed-point computation engines, model weights are quantized in low bit precision. Therefore, the random perturbation needs to be quantized prior to apply on weights. ", "page_idx": 3}, {"type": "text", "text": "For a given model, consider $w$ as the floating point weights of a certain layer. Assume model is per-tensor quantized with symmetric quantization in $b$ -bit, the quantized weights can be represented by: ", "page_idx": 3}, {"type": "equation", "text": "$$\nw_{q}=\\lfloor\\frac{w}{\\Delta_{w}}\\rceil\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where $\\Delta_{w}$ , denoted as the quantization scaling factor, is calculated by $\\Delta_{w}\\,=\\,w_{m a x}/(2^{b-1}-1)$ , where $w_{m a x}$ is the maximum absolute value in $w$ found by a quantization method (i.e., TF, MSE, AdaRound, etc., Nagel et al. [2021]). $\\lfloor\\cdot\\rceil$ represents for the rounding operation. ", "page_idx": 4}, {"type": "text", "text": "Quantized Perturbation. With the given quantization method in 5, the quantized weights perturbation can be defined and calculated as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r c l}{{w\\pm\\epsilon z=w\\cdot1.0\\pm\\epsilon z}}\\\\ {{}}&{{}}&{{\\approx\\Delta_{w}w_{q}\\cdot\\Delta_{z}\\mathbf{1}_{q}\\pm\\Delta_{w}\\epsilon_{q}\\cdot\\Delta_{z}z_{q}}}\\\\ {{}}&{{}}&{{=\\Delta_{w}\\Delta_{z}(w_{q}\\cdot\\mathbf{1}_{q}\\pm\\epsilon_{q}\\cdot z_{q})\\stackrel{r e_{-q u a n t}}{\\longrightarrow}\\Delta_{w}\\cdot w_{q}\\pm}}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "Since weights $w$ and perturbation $z$ have different quantization scaling factors and possibly different bit-width used, we quantize 1.0 with the scaling factor of $z$ , and quantize $\\epsilon$ with the scaling factor of $w$ , prior to direct adding the quantized values in accumulator. $\\begin{array}{r}{\\mathbf{1}_{q}=\\left\\lfloor\\frac{1.0}{\\Delta_{z}}\\right\\rceil}\\end{array}$ , represents for the quantized value of floating point 1.0 with $\\Delta_{z}$ as its scaling factor. Similarly, $\\begin{array}{r}{\\tilde{\\epsilon_{q}}=\\left\\lfloor\\frac{\\epsilon}{\\Delta_{w}}\\right\\rceil}\\end{array}$ , represents for the quantized value of $\\epsilon$ with $\\Delta_{w}$ as its scaling factor. ", "page_idx": 4}, {"type": "text", "text": "The random perturbation vector $z$ is sampled from normal distribution with zero-mean and standard deviation $\\mathbb{N}(0,\\mathbb{I}_{n})$ , we can use static quantization with a pre-determined $z_{m a x}$ to pre-calculate $\\Delta_{z}$ . For example, in the case of $z_{m a x}\\,=\\,3.5$ , with 8-bit symmetric quantization, $\\Delta_{z}\\,=\\,0.0276$ , and $\\mathbf{1}_{q}\\,=\\,36$ . Similarly, $\\epsilon_{q}$ can be pre-calculated, if a pre-trained model with $w_{m a x}$ is given. It is noted that $\\epsilon$ is a very small value (e.g., $1e-3)$ . Therefore, we require 16-bit to be used for weight quantization, such that $\\epsilon$ can be properly represented by the minimum representation power of $\\Delta_{w}$ without clipping loss, and small perturbation can be reflected on the weights change in the quantized space. ", "page_idx": 4}, {"type": "text", "text": "In (6), two values with 16-bit and 8-bit are multiplied, and then fed to a quantized add/subtract operation. In hardware, a 32-bit accumulator is used to hold the result. The result is then re-quantized to 16-bit by a multiply and a shift operation through a post-processing block (Appendix A), using the original weight scaling factor $\\Delta_{w}$ . The quantized perturbed weights are denoted as $(\\Delta_{w},w_{q^{+}})$ and $(\\Delta_{w},w_{q^{-}})$ . The above formulation is derived under per-tensor quantization, however, per-channel quantization can be similarly derived with finer granularity. ", "page_idx": 4}, {"type": "text", "text": "Quantized Forward Gradients. Based on the quantization method in (5), quantized forward gradients, estimated from sign-m-SPSA, can be calculated as: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\hat{g}_{f}=\\frac{1}{m}\\sum_{i=1}^{m}s i g n(\\mathbb{L}(w+\\epsilon z_{i})-\\mathbb{L}(w-\\epsilon z_{i}))z_{i}}\\\\ &{\\quad\\approx\\displaystyle\\frac{1}{m}\\sum_{i=1}^{m}s i g n(\\mathbb{L}(w_{q^{+}})-\\mathbb{L}(w_{q^{-}}))\\Delta_{z}z_{q}}\\\\ &{\\quad=\\Delta_{z}g_{q}}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $g_{q}$ represents for the quantized gradients, and it is using the same quantization scaling factor and bit-width as perturbation vector $z$ . ", "page_idx": 4}, {"type": "text", "text": "Quantized Weights Update. We can further quantize the learning rate $\\eta$ to a quantized value of 1, using quantization scaling factor of $\\Delta_{\\eta}=\\eta$ . Finally, quantized weights update can be computed by: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\displaystyle w_{t+1}=w_{t}-\\eta\\hat{g}_{f}}}\\\\ {~~}\\\\ {{\\displaystyle\\approx\\Delta_{w}w_{q}-\\Delta_{\\eta}\\mathrm{1}\\Delta_{z}g_{q}}}\\\\ {~~}\\\\ {{\\displaystyle\\approx\\Delta_{w}w_{q}-\\Delta_{w}\\big\\lfloor\\frac{\\Delta_{\\eta}\\Delta_{z}}{\\Delta_{w}}g_{q}\\big\\rfloor}}\\\\ {~~}\\\\ {{\\displaystyle=\\Delta_{w}\\big(w_{q}-\\bar{w}_{q}\\big)}}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "where $\\bar{w}_{q}$ represents for the change of weights in the quantized space, with $\\Delta_{w}$ as the re-quantized scaling factor (Appendix A). $\\Delta_{\\eta}$ can be pre-calculated. In our experiments, we find that it is important to keep weights in 16-bit, while the perturbation $z$ and gradient $g$ can be in 8-bit representations. ", "page_idx": 4}, {"type": "text", "text": "3.4 QZO-FF enhancement ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "Momentum Guided Sampling. Besides naive SGD, quantized forward gradient learning can also be combined with other optimizers such as Adam or SGD with momentum, with slight overhead to store the gradient history. Similarly, by allocating additional memory to store the perturbation history, momentum can be used to guide the sampling process. Instead of sampling solely from a zero-centered Gaussian distribution, perturbations are computed from a combination of a momentum-centered and a zero-centered Gaussian distribution. Mathematically, $z_{1}\\sim\\mathbb{N}(0,\\mathbb{I}_{n}*\\sqrt{\\alpha})$ , $z_{2}\\sim\\mathbb{N}(z_{t},\\mathbb{I}_{n}*\\sqrt{1-\\alpha})$ , and $z_{t+1}=\\beta*z_{1}+(1-\\beta)*z_{2}$ . Here, $\\beta$ is a smoothing parameter; $\\alpha$ and $\\beta$ can be adaptively adjusted during training. For example, during the initial training stage, random perturbations are applied with $\\beta=1$ . As training progresses, a history of the momentum $z_{t}$ is incorporated to guide the new sampling process. ", "page_idx": 4}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/aeb9e20144f6c2b869c780302070e5add5150e95b794b72294dc13f9ea52fd04.jpg", "img_caption": [], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "Sharpness-aware Perturbation. Motivated by the connection between sharpness of the loss landscape and model generalization, we can perturb parameter values from its neighborhood location. This is done by performing an additional step of directional gradient ascent through parameter perturbation and loss evaluation, prior to QZO-FF, as illustrated in Figure 2. This process helps to prevent the model from converging to a sharp minimum. ", "page_idx": 5}, {"type": "text", "text": "Sparse Update. To further reduce memory consumption, the forward gradient learning can be combined with a sparsity algorithm such that only a subset of the weights are selected from the network for updating. Examples of sparsity algorithm may include pruning by top- $k$ magnitude, randomized pruning, pruning values beyond a specified threshold, to determine the importance of the weights. Our experiments show that incorporating sparsity with forward gradient learning allows for a $90\\%$ reduction in the size of trainable parameters, with only minor decrease in accuracy, as well as slight improvement in convergence speed. ", "page_idx": 5}, {"type": "text", "text": "Kernel-wise Normalization. In (3), forward gradients are estimated through sign-m-SPSA. In addition, we can also apply a kernel-wise normalization to scale the gradient adaptively. $z$ is normalized by the norm of $w$ in each layer. ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\hat{g}(w^{i})=s i g n(\\mathbb{L}(w+\\epsilon z)-\\mathbb{L}(w-\\epsilon z))z^{i}/\\|z^{i}\\|\\cdot\\|w^{i}\\|\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "4.1 Few-shot learning ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We first apply forward gradient learning in the setting of few-shot learning, targeting to adapt a base-learner to a new task for which only a few labeled samples are available. Experiments across a variety of challenging few-shot learning benchmarks in both vision and audio domains are explored. Models are trained for each dataset individually and then evaluated with the corresponding test split. ", "page_idx": 6}, {"type": "text", "text": "To address whether forward gradient learning (FF) could match the performance of backpropagation (BP), we explore classification tasks on training models with full fine-tuning (FT) and linear probing (LP), utilizing float16 (fp16) precision. Training accuracy with quantized FF (16-bit weights and 8-bit activations, 16w8a) is also evaluated and compared with that of fp16 precision. Details and analysis on memory usage during training are reported in Appendix B - E. ", "page_idx": 6}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/83ac33cee66f2c343f24f407a38cbce26e29684f93919d343650c2ce2a677eb0.jpg", "table_caption": ["Table 1: Vision datasets used for few-shot learning "], "table_footnote": [], "page_idx": 6}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/6ac2fbcd6c6fb9ba75168d625dae9c87d0ccea274d77a53e1caaacc666851afc.jpg", "table_caption": ["Table 2: Vision tasks: few-shot learning accuracy $(\\%)$ with Forward (FF) and Backward (BP) gradients. The averaged accuracy over 100 testing tasks is reported. FT: full fine-tuning; LP: linear probing; Quant: 16w8a with symmetric quantization. FF outperforms zero-shot across the board, and achieves comparable performance (accuracy within $5\\%$ to BP on 26 out of 30 tasks. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "Vision Benchmark. Image classification models are compared across commonly used 5 few-shot learning benchmark datasets (Table 1). Training methods are evaluated on 3 network backbones (modified Resnet12 Ye et al. [2020], Resnet18 He et al. [2015] and ViT tiny Dosovitskiy et al. [2020]), with ProtoNets Snell et al. [2017] as few-shot classifier. ", "page_idx": 6}, {"type": "text", "text": "Table 2 demonstrates the classification accuracy on vision benchmarks. We first show that FF significantly improves over zero-shot performance across model types and tasks. Given that FF solely utilizes directional derivatives for gradient estimation, it is expected that BP generally outperforms FF in most tasks. The accuracy gap between BP and FF can vary based on factors such as backbone architecture, dataset and task difficulty. The largest accuracy degradation is observed when training Resnet12 on Cifar-100 dataset with an input resolution of $32\\times32$ . However, using a stronger backbone such as ViT, can help bridge this accuracy gap. This indicates that while FF may show some degradation with smaller architectures and low-resolution inputs, performance improvements can be achieved with more advanced models. Overall, FF achieves comparable performance (accuracy within $5\\%$ ) to BP in 26 out of 30 comparable experiments. A minimal accuracy drop is observed in quantized FF training, when a strong backbone such as ViT tiny is used. These promising results indicate that FF can perform comparably to BP with only a slight degradation in accuracy, while significantly reducing the memory cost (see analysis in Appendix B.1). With the same memory footprint as inference, model training with FF is feasible on low memory devices where BP cannot be afforded. ", "page_idx": 6}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/b8f7b7f985ff757e5d611765803d5048e919cd99bb39213f63c158406a5423fb.jpg", "table_caption": ["Table 3: Audio datasets used for few-shot learning. The ESC-50 dataset includes a labeled collection of 2000 environmental audio recordings, and FSDKaggle2018 is an audio dataset containing 11,073 audio flies annotated with 41 labels of the AudioSet Ontology. Both datasets are used for benchmarking methods of environmental sound classification. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Audio Benchmark. Two audio benchmark datasets (ESC-50 and FSDKaggle18) are selected (Table 3) for sound classification use cases using few-shot learning. Similar to vision, training methods are evaluated on 2 representative architectures CRNN (Heggan et al. [2022]) and Audio Spectrogram Transformer (AST Gong et al. [2021]), with SimpleShot (Wang et al. [2019]) and ProtoNets (Snell et al. [2017]) as few-shot classifiers. ", "page_idx": 7}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/5ff89e059a2b841b1f0f3229498de93c49031213a57cbdcee562738bf9b80235.jpg", "table_caption": ["Table 4: Audio tasks: few-shot learning accuracy $(\\%)$ with Forward (FF) and Backward (BP) gradients. FF achieves comparable (accuracy within $5\\%,$ ) or better performance to BP on 11 out of 16 tasks. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Table 4 reports classification accuracy on audio benchmarks. Compared to vision tasks, the accuracy gap is larger, ranging from $-11.39\\dot{\\%}$ to $+11.66\\%$ . This may be due to the extremely challenging training setting of 5-way 1-shot, where only 1 example of each class is seen in each task. Additionally, we found that the pretrained model from AudioSet (AST) does not produce a good zero-shot performance across all tasks. This indicates that a good initial baseline is critical for model adaptation. Overall, FF achieves comparable (accuracy within $5\\%$ ) or better performance to BP on 11 out of 16 tasks. Training with quantized FF (16w8a) maintains similar accuracy level as fp16. From memory analysis in Appendix B.2, training an AST model with quantized forward gradients combined with sparse update, requires only 0.19MB scratch memory, which fits into most existing edge devices. ", "page_idx": 7}, {"type": "text", "text": "4.2 Cross-domain Adaptation ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We further conduct experiments on model adaptation to cross-domain datasets, in which a models is fine-tuned on tasks with data distribution significantly different from those of the pre-trained model. For ablation studies on various impacts on the training accuracy, we take ViT tiny (5.5M parameters) as backbone for feature extractor, and apply a randomly initialized linear layer as the decoder for binary classifier. The model is pretrained on ImageNet-1k through DeiT (Touvron et al. [2021]), and adapted for Visual Wake Word (VWW) task (Chowdhery et al. [2019]) through linear probing (LP), where only the decoder layer is fine-tuned, and visual-prompt tuning with deep prompts (D-VPT, Jia et al. [2022]), where prompts in each Encoder layer are also fine-tuned. Testing accuracy is reported in Figure 2, and detailed training hyper-parameters are listed in Appendix C. ", "page_idx": 7}, {"type": "text", "text": "Effectiveness of Quantized FF. With LP, quantized forward gradient learning is capable of training the model to an accuracy of $87.30\\%$ from $\\bar{4}8.50\\%$ , with an accuracy gap of $\\bar{0}.63\\%$ compared to BP in fp16. ", "page_idx": 7}, {"type": "text", "text": "Gradient averaging in FF. A larger $m$ , used to average forward gradients, helps to smooth the noisy estimation and increases the model accuracy. With D-VPT training in fp16, simply increasing $m$ to 3 boosts the accuracy by $1.22\\%$ . However, there is a trade-off between model accuracy and training efficiency. ", "page_idx": 7}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/7f71226bcef4c3976ef060d9ed87a7c72cf044e8371ca143cbc396f2c1684666.jpg", "img_caption": ["Figure 2: Ablation studies on cross-domain adaptation. The accuracy numbers (with standard deviation) are averaged over 5 runs. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Quantization bit-width. Experiments show that 8-bit weights quantization (8w8a) does not lead to model convergence. Therefore, 16-bit weights quantization is necessary to capture the small perturbation, while the perturbation $z$ and gradients can use 8-bit. ", "page_idx": 8}, {"type": "text", "text": "Perturbation sampling. The random perturbation $z$ in Equation (2) is sampled from a normal distribution with zero-mean and standard deviation $\\mathbb{N}(0,\\mathbb{I}_{n})$ . Other distibutions, such as Binomial distribution, also works well for forward gradient learning. ", "page_idx": 8}, {"type": "text", "text": "QZO-FF enhancement. FF can be extended with sharpness-aware scheme, where a perturbation is performed at a neighborhood location through an extra step of gradient ascent. Together with kernel-wise normalization, this technique results in the closest performance to BP in both training methods. Although obtaining the norm of weights involves a trade-off between computation and accuracy, efficient implementations using gemm and sqrt operations can minimize the overhead on hardware. ", "page_idx": 8}, {"type": "text", "text": "Loss landscape. It is believed that the convergence and generalization property of perturbation-based learning, such as forward gradient learning, depends on the loss landscape instead of number of parameters. Visualization of loss landscape has the potential to help us answer several important questions about how a neural network is trained, and why do the resulting minima generalize under certain training approach. Utilizing the tool provided in Li et al. [2018], we show the 2D contours of loss landscape of ViT tiny network under the task of cross-domain adaptation, together with the loss trajectory during training, providing an empirical characterization of neural loss functions, and exploring how training with forward gradients navigates in the loss landscape (See Appendix E). ", "page_idx": 8}, {"type": "text", "text": "4.3 In-domain OOD Adaptation ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "On-device model adaptation often involves fine-tuning on data that is out-of-distribution (OOD). To evaluate the performance of FF, we pretrain a ViT tiny backbone on Cifar10, and fine-tune the decoder on Cifar10-C (Hendrycks and Dietterich [2019]), where 15 types of corruptions, such as Gaussian noise or pixelation, of varying severity are applied. We take the lowest (easy), middle (medium), and highest (hard) corruption severity from the dataset as separate benchmarks for fine-tuning. Finetuning techniques include LP with 1 linear decoder layer, LP with 3 linear decoder layers, and D-VPT (Jia et al. [2022]). Additionally, we explore the impact of sparsity by pruning $90\\%$ of the trainable parameters using a zero-order method (Chen et al. [2024]). Table 5 shows a comparison of accuracy on the test set between BP, FF, quantized FF and Sparsed FF, alongside different fine-tuning methods. Detailed training hyper-parameters are listed in Appendix D. ", "page_idx": 8}, {"type": "text", "text": "As the number of trainable parameters increases, forward gradient learning improves the model accuracy on OOD dataset. Even with a sparsity level of $\\bar{90\\%}$ , FF can still achieve comparable accuracy levels to those of BP. The largest accuracy disparity between the two is $6.98\\%$ , observed on the Cifar10-C (hard) category using the LP method for 3 decoder layers. As corruption intensifies, the loss surface becomes less smooth, potentially causing FF to be impacted more from the noisy gradient estimation. ", "page_idx": 8}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/4f750e19a93c821aab23242e158ae1c1c63de4db8fa396b6a1d2bb43c744d783.jpg", "table_caption": ["Table 5: Accuracy $(\\%)$ of model adaptation to in-domain OOD dataset with Forward (FF) and Backward (BP) gradients. 1 LN: 1 linear layer of decoder; 3 LN: 3 linear layer of decoder. Quant: 16w8a, Sparse: $90\\%$ weights pruned. The accuracy numbers (with standard deviation) are averaged over 5 runs. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "5 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Continuously updating pre-trained models to local data on the edge is the last mile for model adaptation and customization. To overcome the memory limitation of most existing low power devices, forward gradients are used for model adaptation. We have formulated the forward gradient learning in the quantized space, where weight perturbations and gradient calculations are all in fixed-point during model training. To investigate the feasibility of on-device training with fixed-point forward gradients, we have extensively conducted experiments across a variety of deep learning benchmark tasks in both vision and audio domains. Model adaptation to cross-domain dataset and in-domain OOD datasets are further evaluated and analyzed.We further explore 2D contours of loss landscape, together with loss trajectory during training, providing an empirical explanation on how the model is trained. We have shown that quantized forward gradient learning with 16w8a can effectively adapt most typical model architectures (e.g., Resnet, ViT-tiny, CRNN, AST) and scales. With minimum accuracy reduction, fixed-point forward gradients allows model adaptation using the same memory footprint and operation support as inference, as opposed to backpropagation. Therefore, it has the potential to enable model fine-tuning on existing edge devices with limited memory and backpropagation support, without requiring additional hardware adaptation. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] AST. Pretrained ast checkpoint. URL https://github.com/YuanGongND/ast/tree/ master.   \n[2] P. Baldi and P.J. Sadowski. A theory of local learning, the learning channel, and the optimality of backpropagation. 83:51\u201374, 2016. doi: 10.1016/j.neunet.2016.07.006.   \n[3] A. G. Baydin, B. A. Pearlmutter, D. Syme, F. Wood, and P Torr. Gradients without backpropagation. 2022. URL https://arxiv.org/pdf/2202.08587.   \n[4] G. Belouze. Optimization without backpropagation. 2022. URL https://arxiv.org/pdf/ 2209.06302.   \n[5] J. Bernstein, Y. Wang, K. Azizzadenesheli, and A. Anandkumar. Signsgd: Compressed optimisation for non-convex problems. Proceedings of the 35th International Conference on Machine Learning, 2018. URL https://arxiv.org/pdf/1802.04434.   \n[6] L. Bertinetto, J.F. Henriques, P.H.S. Torr, and A. Vedaldi. Meta-learning with differentiable closed-form solvers. ICLR, 2019. URL https://arxiv.org/pdf/1805.08136.   \n[7] A. Chen, Y. Zhang, J. Jia, J. Diffenderfer, J. Liu, K. Parasyris, Y. Zhang, Z. Zhang, B. Kailkhura, and S. Liu. Deepzero: Scaling up zeroth-order optimization for deep model training. ICLR, 2024. URL https://arxiv.org/pdf/2310.02025.   \n[8] A. Chowdhery, P. Warden, J. Shlens, A. Howard, and R. Rhodes. Visual wake words dataset. 2019. URL https://arxiv.org/pdf/1906.05721.   \n[9] S. Dhar, J. Guo, J. Liu, S. Tripathi, U. Kurup, and M. Shah. On-device machine learning: An algorithms and learning theory perspective. 2019. URL https://arxiv.org/pdf/1911. 00623v1.   \n[10] A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani, M. Minderer, G. Heigold, S. Gelly, J. Uszkoreit, and N. Houlsby. An image is worth $16\\!\\times\\!16$ words: Transformers for image recognition at scale. CVPR, 2020. URL https://arxiv.org/ abs/2010.11929.   \n[11] E. Fonseca, M. Plakal, D. P. W. Ellis, F. Font, X. Favory, and X. Serra. Learning sound event classifiers from web audio with noisy labels. ICASSP, 2019. URL https://arxiv.org/abs/ 1901.01189.   \n[12] L. Fournier, S. Rivaud, E. Belilovsky, M. Eickenberg, and E. Oyallon. Can forward gradient match backpropagation? Proceedings of the 40 th International Conference on Machine Learning, 2023. URL https://arxiv.org/pdf/2306.06968.   \n[13] Y. Gong, Y. Chung, and J. Glass. Ast: Audio spectrogram transformer. Interspeech 2021, 2021. URL https://arxiv.org/abs/2104.01778.   \n[14] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In CVPR, 2015. URL https://arxiv.org/abs/1512.03385.   \n[15] C. Heggan, S. Budgett, T. Hospedales, and M. Yaghoobi. Metaaudio: A few-shot audio classification benchmark. ICANN, 2022. URL https://arxiv.org/pdf/2204.02121.   \n[16] D Hendrycks and T. Dietterich. Benchmarking neural network robustness to common corruptions and perturbations. Proceedings of the International Conference on Learning Representations, 2019.   \n[17] E.J. Hu, Y. Shen, P. Wallis, Z. Allen-Zhu, Y. Li, S. Wang, L. Wang, and W. Chen. Lora: Low-rank adaptation of large language models. 2021. URL https://arxiv.org/pdf/2106.09685.   \n[18] M. Jia, L. Tang, B. Chen, C. Cardie, S. Belongie, B. Hariharan, and S. Lim. Visual prompt tuning. In European Conference on Computer Vision (ECCV), 2022.   \n[19] G. Keren and B. Schuller. Convolutional rnn: an enhanced model for extracting features from sequential data. 2017. URL https://arxiv.org/pdf/1602.05875.   \n[20] B. M. Lake, R. Salakhutdinov, and J. B. Tenenbaum. Human-level concept learning through probabilistic program induction. Science, pages 1332\u20131338, 2015. URL https://doi.org/ 10.22002/D1.20098.   \n[21] H. Li, Z. Xu, G. Taylor, C. Studer, and T. Goldstein. Visualizing the loss landscape of neural nets. NeurIPS, 2018. URL https://arxiv.org/pdf/1712.09913.   \n[22] X. L. Li and P. Liang. Prefix-tuning: Optimizing continuous prompts for generation. 2021. URL https://arxiv.org/pdf/2101.00190.   \n[23] J. Lin, J. Zhu, W. Chen, W. Wang, C. Gan, and S. Han. On-device training under 256kb memory. NeurIPS, 2022. URL https://arxiv.org/pdf/2206.15472.   \n[24] S. Liu, P. Chen, B. Kailkhura, G. Zhang, A. Hero, and P.K. Varshney. A primer on zeroth-order optimization in signal processing and machine learning. IEEE Signal Processing Magazine, 2020. URL https://arxiv.org/pdf/2006.06224.   \n[25] S. Malladi, T. Gao, E. Nichani, A. Damian, J.D. Lee, D. Chen, and S. Arora. Fine-tuning language models with just forward passes. NeurIPS, 2023. URL https://arxiv.org/pdf/ 2305.17333.   \n[26] P. Micikevicius, S. Narang, J. Alben, G. Diamos, E. Elsen, D. Garcia, B. Ginsburg, M. Houston, O. Kuchaiev, G. Venkatesh, and H. Wu. Mixed precision training. ICLR, 2018. URL https: //arxiv.org/pdf/1710.03740.   \n[27] J. J. Moon, H.S. Lee, J. Chu, D. Park, S. Hong, H. Seo, D. Jeong, S. Kong, and M. Ham. A new frontier of ai: On-device ai training and personalization. ICSE, 2024. URL https: //arxiv.org/pdf/2206.04688.   \n[28] H. Mostafa and X. Wang. Parameter efficient training of deep convolutional neural networks by dynamic sparse reparameterization. Proceedings of the 36th International Conference on Machine Learning, 2019. URL https://arxiv.org/pdf/1902.05967.   \n[29] M. Nagel, M. Fournarakis, R.A. Amjad, Y. Bondarenko, M.V. Baalen, and T. Blankevoort. A white paper on neural network quantization. CVPR, 2021. URL https://arxiv.org/pdf/ 2106.08295.   \n[30] K. J. Piczak. Dataset for environmental sound classification. Proceedings of the 23rd ACM international conference on Multimedia, 2015. URL https://dl.acm.org/doi/pdf/10. 1145/2733373.2806390.   \n[31] M. Ren, E. Triantafillou, S. Ravi, J. Snell, K. Swersky, J. B. Tenenbaum, H. Larochelle, and R.S. Zemel. Meta-learning for semi-supervised few-shot classification. ICLR, 2018. URL https://arxiv.org/abs/1803.00676.   \n[32] M. Ren, S. Kornblith, R. Liao, and G. Hinton. Scaling forward gradient with local losses. ICLR, 2023. URL https://arxiv.org/pdf/2210.03310.   \n[33] resnet12. Pretrained resnet12 checkpoint download. URL https://drive.google.com/ file/d/1M93jdOjAn8IihICPKJg8Mb4B-eYDSZfE/view.   \n[34] resnet18. Pretrained resnet18 checkpoint download. URL https://download.pytorch. org/models/resnet18-f37072fd.pth.   \n[35] D. Silver, A. Goyal, I. Danihelka, M. Hessel, and H.V. Hasselt. Learning by directional gradient descent. ICLR, 2022. URL https://openreview.net/pdf?id $\\equiv$ 5i7lJLuhTm.   \n[36] J. Snell, K. Swersky, and R. Zemel. Prototypical networks for few-shot learning. In Advances in Neural Information Processing Systems, 2017.   \n[37] J.C. Spall. Multivariate stochastic approximation using a simultaneous perturbation gradient approximation. IEEE Transactions on Automatic Control, pages 332\u2013341, 1992.   \n[38] ViT tiny. Pretrained vit tiny checkpoint download. URL https://dl.fbaipublicfiles. com/deit/deit_tiny_patch16_224-a1311bcf.pth.   \n[39] H. Touvron, M. Cord, M. Douze, F. Massa, A. Sablayrolles, and H. Jegou. Training data-efficient image transformers & distillation through attention. In International Conference on Machine Learning, volume 139, pages 10347\u201310357, July 2021.   \n[40] O. Vinyals, C. Blundell, T. Lillicrap, K. Kavukcuoglu, and D. Wierstra. Matching networks for one shot learning. 2016. URL https://arxiv.org/abs/1606.04080.   \n[41] C. Wah, S. Branson, P. Welinder, P. Perona, and S. Belongie. Caltech-ucsd birds dataset. 2022. URL https://doi.org/10.22002/D1.20098.   \n[42] Y. Wang, W. Chao, K. Q. Weinberger, and L. Maaten. Simpleshot: Revisiting nearest-neighbor classification for few-shot learning. CVPR, 2019. URL https://arxiv.org/abs/1911. 04623.   \n[43] H. Ye, H. Hu, D. Zhan, and F. Sha. Few-shot learning via embedding adaptation with set-to-set functions. CVPR, 2020. URL https://arxiv.org/abs/1812.03664. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "A Fixed-point re-quantization ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "The process of quantized perturbation (Equation 6) and gradient calculation (Equation 8) involves a re-quantization process. In fixed-point engines, this is approximated by a multiply and a shift operation through a post-processing block. ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{w_{q}}=\\Delta_{z}(w_{q}\\cdot\\mathbf{1}_{q}+\\epsilon_{q}\\cdot z_{q})}\\\\ {{=(w_{q}\\cdot\\mathbf{1}_{q}+\\epsilon_{q}\\cdot z_{q})\\cdot m\\gg k}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "where $m$ and $k$ are integer numbers, and $\\frac{m}{2^{k}}\\approx\\Delta_{z}$ . ", "page_idx": 13}, {"type": "text", "text": "B Few-shot learning experiments ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In our experiments, the number of forward-forward calls performed $(m)$ for averaging gradients is 3 unless specified. All our experiments are running on single Nvidia Tesla V100 GPU. It is noted that our experiments do not aim to beat the benchmark state-of-the-art (SOTA) performance, but to compare the performance gap between forward and backward gradient learning across datasets and tasks. Due to the limited tuning performed, it is possible to obtain a specific result marginally better than those presented. However, this does not undermine the comparision investigated in this work. ", "page_idx": 13}, {"type": "text", "text": "B.1 Vision Tasks ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In vision benchmark, five common few-shot learning datasets are explored: CUB ([41]), Omniglot ([20]), Cifar100_fs ([6]), miniImageNet ([40]) and tieredImageNet ([31]). Each dataset is split into three parts based on different non-overlapping sets of classes, for model training, validation, and testing. All recognition tasks across datasets are using 5-way 5-shot setting. ", "page_idx": 13}, {"type": "text", "text": "Table 6: The hyper-parameters used in our few-shot learning experiments for vision tasks. For fair comparisons, FF and BP are using the same hyper-parameters. Model architectures of Resnet18, modified Resnet12 and ViT tiny are based on [14], [43], and [39]. Pre-trained models used for zero-shot evaluation can be found at [33], [34] and [38]. Different learning rate grids are explored, and the best accuracy is reported. ", "page_idx": 13}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/276a9df4716da7399323583fc70b4458b2a86dd40bcfd8c9604c45155b18c21c.jpg", "table_caption": [], "table_footnote": [], "page_idx": 13}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/d2d9b1bf302de45e7f88da42a854cfcfb5657f5bb49cb2f7a88c8b589f67bfa9.jpg", "img_caption": ["(a) Total Memory Usage (MB) "], "img_footnote": [], "page_idx": 13}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/3d909f40619a544c856fe2a548c300c203f50268af2f65ffee2d197a2f28948c.jpg", "img_caption": ["(b) Scratch Memory Usage (MB) "], "img_footnote": [], "page_idx": 13}, {"type": "text", "text": "Figure 3: Comparison of Memory Usage during Training. BP: backpropagation, FF: forward gradient learning, fp16: 16-bit float point, Quant: 16w8a, FT: full fine-tuning, LP: linear probing. ", "page_idx": 13}, {"type": "text", "text": "Figure 3 shows the memory usage of BP and FF during the training. The total memory usage during training is composed of two parts, a scratch buffer used for input and output activation tensors for gradient calculation and storage, and allocated memory for weights storage. Without storing the activation tensors, forward gradient learning has a significant reduction on the scratch memory usage. For example, in the case of full fine-tuning on ViT Tiny network, under the same precision of fp16, FF reduces the scratch memory from 31.64MB to 11.43MB $(2.8\\times)$ . When sparse update and fixed-point training are enabled, only 0.40MB of scratch memory is needed for model fine-tuning. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "The extent of memory saving with FF depends on the number of layers being fine-tuned, and their positions within the network. When applied to methods such as full fine-tuning, LoRA ([17]) and other parameter-efficient fine-tuning approaches, FF shows significant memory reduction because it eliminates the need to store intermediate activations. In the case of LP, where only the last few layers are updated, the difference of memory usage between BP and FF will get smaller. As the number of trainable layers increases, FF benefits more in memory savings. These promising results indicate that FF can perform comparably to BP with only a slight degradation in accuracy, while significantly reducing the memory cost. With the same memory footprint as inference, model training with FF is feasible on low memory devices where BP cannot be afforded. ", "page_idx": 14}, {"type": "text", "text": "B.2 Audio Tasks ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In audio use cases, two few-shot audio classification benchmark datasets are selected: ESC-50 ([30]) and FSDKaggle18 ([11]). Prior to adaptation, publicly available pretrained models based on AudioSet are adopted ([1]). The averaged accuracy after 200 epochs over 10, 000 tasks drawn from the test set is reported. ", "page_idx": 14}, {"type": "text", "text": "Table 7: The hyper-parameters used in our few-shot learning experiments for audio tasks. Both datasets are using 5-way 1-shot setting. For fair comparisons, FF and BP are using the same hyperparameters except that FF uses a smaller learning rate. Model architectures of CRNN and AST are based on [15] and [13]. Pre-trained models used for zero-shot evaluation can be found at [15] and [1]. Different learning rate grids are explored, and the best accuracy is reported. ", "page_idx": 14}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/466e84f254fbf361d1d0ea8d4449ab79be96fa4c86edc50d2f24ef41253baebf.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Figure 4 compares the memory usage of BP and FF during the training. For a small model such as CRNN, there is at least $4\\times$ reduction in total memory when full fine-tuning is used. In the case of AST architecture, model training with quantized forward gradient combined with sparse update only requires 0.19MB scratch memory, which fits into most existing edge devices. ", "page_idx": 14}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/28acecb6a8922d5a277f6473fcc2cc9c3340cd729da379d4bf2c945979f71e38.jpg", "img_caption": ["(a) Total Memory Usage (MB) "], "img_footnote": [], "page_idx": 14}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/dbcc1265c0cd9abe4d57d8af0bf0e0d4256ffa4af414a1a8790169b2896b0e90.jpg", "img_caption": ["(b) Scratch Memory Usage (MB) "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Figure 4: Comparison of Memory Usage during Training. BP: backpropagation, FF: forward gradient learning, fp16: 16-bit float point, Quant: 16w8a, FT: full fine-tuning, LP: linear probing. ", "page_idx": 14}, {"type": "text", "text": "C Cross-domain adaptation ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Cross-domain adaptation is performed on VWW dataset. Table 8 lists all hyper-parameters used in training. ", "page_idx": 15}, {"type": "text", "text": "Table 8: The hyper-parameters used in our experiments for cross-domain adaptation. All hyperparameters for FF and BP are the same except that FF uses a smaller learning rate. Model architectures of ViT tiny, and the associated pre-trained weights can be found at [39]. Different learning rate grids are explored, and the best accuracy is reported. ", "page_idx": 15}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/17b815e4740f612bb9e3c397ef8e2b5d92e65abe4298908f9debbf45e74da1e6.jpg", "table_caption": [], "table_footnote": [], "page_idx": 15}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/07e02eed5d53cddfdfc88a3d635135404a76ab67e2f3c4757071e6e74aa586c7.jpg", "img_caption": ["Figure 5: Training convergence curves. BP: backpropagation, FF: forward gradient learning, fp16: 16-bit float point, Quant: 16w8a, LP: linear probing, D-VPT: visual-prompt tuning with deep prompts. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Figure 5 shows the training curves of BP and FF under various settings. In general, FF requires a smaller learning rate, resulting more training iterations to converge than BP. However, for a single iteration, BP performs one forward pass and one backward pass, while FF needs two forward passes. The FLOPs of a backward pass are $\\sim2\\times$ of that of a forward pass (e.g., for both Convolutional and Linear layers). Therefore, FF has a $1.5\\times$ speedup in one iteration of the training. The total training time depends on the number of iterations required for model convergence and the time taken to complete each iteration. ", "page_idx": 15}, {"type": "text", "text": "D In-domain OOD adaptation ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Cifar10-C provides 5 levels of corruption severity, from which we take the lowest (easy), middle (medium), and highest (hard) corruption severity as separate benchmarks for fine-tuning, randomly partitioning each section into a $90\\%{-}10\\%$ train-test split. ", "page_idx": 15}, {"type": "text", "text": "E Empirical Studies, Discussions and Limitations ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "The convergence and generalization property of perturbation-based learning, such as forward gradient learning, depends on the loss landscape instead of number of parameters. Visualization of loss landscape has the potential to help us answer several important questions about how a neural network is trained, and why do the resulting minima generalize under certain training approaches. ", "page_idx": 15}, {"type": "table", "img_path": "yCh1z6Dcto/tmp/e5cddf15a558240d99d318722fd4f6ea12ce46ee706a0240a5f0630c7522a8a5.jpg", "table_caption": ["Table 9: The hyper-parameters used in our experiments for in-domain OOD adaptation. All hyperparameters for FF and BP are the same, except that FF uses a smaller learning rate. Model architectures of ViT tiny, and the associated pre-trained weights can be found at [39]. Different learning rate grids are explored, and the best accuracy is reported. "], "table_footnote": [], "page_idx": 16}, {"type": "text", "text": "Figure 6 compares the 2D contour of loss landscape and loss trajectory during training under BP and QZO-FF. Both forward and backward learning shows a locally smooth loss contour, and the trajectory follows the gradient descent direction, with forward gradient learning taking a more conservative step after each epoch, resulting in slower convergence. We also observed that a good initialization (e.g., pre-trained model) is critical for forward gradient learning. Therefore, the convergence may not be guranteed if a model is trained from scratch. However, it is still promising that quantized forward gradients to be used for model adaptation on low resource devices, in which a general pre-trained model has been deployed. ", "page_idx": 16}, {"type": "text", "text": "In our experiments, it is also observed that 8-bit quantization of weights does not lead to model convergence. This is because the small perturbation of $\\epsilon$ is quantized using the scaling factor of weights $(\\Delta_{w})$ . It requires higher bits to be properly represented without clipping loss, thus the weights change can be reflected in the quantized space. In future, techniques for ultra low bit (i.e., 8-bit, 4-bit) forward gradient learning can be explored. In addition, experiments beyond classification and across multiple modalities can be conducted for further evaluations. ", "page_idx": 16}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/bc7cecac1f7b012647ddf8d3c222af4b63e5cbb82f165f9b602e281d71b756fa.jpg", "img_caption": ["(a) BP, LP, test error $12.13\\%$ . "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/71bd8cfd5e32df7e468bcc4368c1464342ffebba36cae885edf829bc7c6aca70.jpg", "img_caption": ["(b) BP, D-VPT, test error $7.02\\%$ . "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/a3386b9c09fba6d5c07d4893f36d9e78dcb3b2bbcad46be83b148c8e9ee7cf66.jpg", "img_caption": ["(c) FF, LP, test error $12.49\\%$ "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/01da55b84e719beb385e1baab5c1a114e9795620d985afc2c542031f90c15b7f.jpg", "img_caption": ["(d) FF, D-VPT, test error $11.06\\%$ . "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/d8b9bc77e1df1a82ad238cb32f10b7156a749fdf39f7c52a80afab9cb5f0a3a9.jpg", "img_caption": ["(e) FF Quant (16w8a), LP, test error $12.74\\%$ . "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/56b6e626309e4c10a7c90adbc7ca47fbca8bd264570cda54afc8a5449189b206.jpg", "img_caption": ["(f) FF Quant (16w8a), D-VPT, test error $11.38\\%$ . "], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/197e4d6a70d920731205424fc8bd9a8cbbd2bde5779452a0909267395b83f24f.jpg", "img_caption": [], "img_footnote": [], "page_idx": 17}, {"type": "image", "img_path": "yCh1z6Dcto/tmp/ea332be75514c2a3946671868d9e0e43c79a926d3a6b6588a9b3ce4e5b6bac92.jpg", "img_caption": [], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "(g) FF Quant (8w8a), LP, test error $51.35\\%$ , not con-(h) FF Quant (8w8a), D-VPT, test error $52.98\\%$ , not verged. converged. ", "page_idx": 17}, {"type": "text", "text": "Figure 6: 2D visualization of loss landscape and loss trajectory during training. All hyper-parameters used in this experiment is listed in Appendix D. LP: linear probing, D-VPT: visual-prompt tuning with deep prompts. Both forward and backward learning shows a locally smooth 2D loss contour, and the trajectory follows the gradient descent direction, with FF taking a more conservative step after each epoch. It is observed that 8-bit quantization of weights does not lead to model convergence. Therefore, 16-bit weights quantization is necessary for QZO-FF. ", "page_idx": 17}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: Definitions are cross-referenced. Equations and formulas are derived in details. ", "page_idx": 18}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: Model architectures and pretrained checkpoints are all from publicly available sites, which are referenced. Experimental hyper-parameters are all listed in Appendix. ", "page_idx": 18}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 18}, {"type": "text", "text": "Answer: [No] ", "page_idx": 18}, {"type": "text", "text": "Justification: We use public dataset, known model architectures, and publicly available pretrained model checkpoints for further experiments. Links are all provided, and crossreferenced. All experimental hyper-parameters are given in Appendix. We can also provide instructions to reproduce the results. However, we cannot open source the code. ", "page_idx": 18}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: All results are explained in text about how the accuracy is reported. ", "page_idx": 18}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: All our experiments are based on single Nvidia Tesla V100 GPU. Since our experiments mainly focus the performance of quantized forward gradient learning, training computation is not the bottleneck. Most experiments in the paper only requires a few hours of training on a single GPU. ", "page_idx": 18}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 19}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "Justification: A foundamental training approach is discussed in the paper for potential model personalization in the future. This aims to bring model adaptation to local devices, thus protect users\u2019 privacy. We do not see any negative societal impacts of this work. ", "page_idx": 19}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "Justification: We conduct experiments on commonly used public dataset. ", "page_idx": 19}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 19}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 19}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 19}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 19}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 19}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 19}]