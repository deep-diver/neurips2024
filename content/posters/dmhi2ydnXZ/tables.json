[{"figure_path": "dmhi2ydnXZ/tables/tables_2_1.jpg", "caption": "Table 1: AMI on the best \u03b5 \u2208 [0.1, 0.2] and running time of 64-thread scikit-learn vs. 1-thread DBSCAN variants using cosine distance on Mnist. 64-thread sDBSCAN runs in 0.9 seconds.", "description": "The table compares the Adjusted Mutual Information (AMI) scores and running times of different DBSCAN variants on the MNIST dataset using cosine distance.  The best epsilon (\u03b5) value within the range of 0.1 to 0.2 was used for each algorithm.  The results highlight that sDBSCAN achieves comparable AMI to other methods but with significantly faster running times, especially when using multiple threads (64 threads for sDBSCAN vs. 1 thread for others).", "section": "4 Experiment"}, {"figure_path": "dmhi2ydnXZ/tables/tables_4_1.jpg", "caption": "Table 1: AMI on the best \u03b5 \u2208 [0.1, 0.2] and running time of 64-thread scikit-learn vs. 1-thread DBSCAN variants using cosine distance on Mnist. 64-thread sDBSCAN runs in 0.9 seconds.", "description": "This table compares the Adjusted Mutual Information (AMI) scores and running times of different DBSCAN variants on the MNIST dataset using cosine distance.  The best epsilon (\u03b5) value within the range of [0.1, 0.2] was used for each algorithm.  The table highlights that the proposed sDBSCAN algorithm achieves comparable accuracy to other methods while being significantly faster, especially when multi-threading is enabled.", "section": "4 Experiment"}, {"figure_path": "dmhi2ydnXZ/tables/tables_4_2.jpg", "caption": "Table 1: AMI on the best \u03b5 \u2208 [0.1, 0.2] and running time of 64-thread scikit-learn vs. 1-thread DBSCAN variants using cosine distance on Mnist. 64-thread sDBSCAN runs in 0.9 seconds.", "description": "This table compares the Adjusted Mutual Information (AMI) scores and running times of different DBSCAN variants on the MNIST dataset using cosine distance.  The best epsilon (\u03b5) value within the range of [0.1, 0.2] was used for each algorithm.  The comparison includes the scikit-learn DBSCAN implementation (using 64 threads), and several scalable DBSCAN variants: sDBSCAN, uDBSCAN++, kDBSCAN++, and sngDBSCAN (all using 1 thread except sDBSCAN, which uses 64 threads).  The results highlight sDBSCAN's superior speed and competitive accuracy compared to other methods.", "section": "4 Experiment"}, {"figure_path": "dmhi2ydnXZ/tables/tables_4_3.jpg", "caption": "Table 1: AMI on the best \u025b \u2208 [0.1, 0.2] and running time of 64-thread scikit-learn vs. 1-thread DBSCAN variants using cosine distance on Mnist. 64-thread sDBSCAN runs in 0.9 seconds.", "description": "This table presents a comparison of the Adjusted Mutual Information (AMI) scores and running times for different DBSCAN variants on the MNIST dataset using cosine distance. The best epsilon (\u025b) value within the range of [0.1, 0.2] was selected for each algorithm.  The results show that sDBSCAN achieves comparable AMI to other algorithms while being significantly faster, especially when using 64 threads.  The scikit-learn DBSCAN implementation is shown for comparison but is significantly slower.", "section": "4 Experiment"}, {"figure_path": "dmhi2ydnXZ/tables/tables_8_1.jpg", "caption": "Table 1: AMI on the best \u03b5 \u2208 [0.1, 0.2] and running time of 64-thread scikit-learn vs. 1-thread DBSCAN variants using cosine distance on Mnist. 64-thread sDBSCAN runs in 0.9 seconds.", "description": "This table compares the Adjusted Mutual Information (AMI) score and running time of different DBSCAN algorithms on the MNIST dataset using cosine distance.  The algorithms compared include the scikit-learn implementation, sDBSCAN, uDBSCAN++, kDBSCAN++, sngDBSCAN, and pDBSCAN.  The best epsilon (\u03b5) value for each algorithm within the range of [0.1, 0.2] is also reported.  The results show that sDBSCAN achieves comparable AMI to the scikit-learn and pDBSCAN implementations while being significantly faster.", "section": "4 Experiment"}, {"figure_path": "dmhi2ydnXZ/tables/tables_16_1.jpg", "caption": "Table 2: The data sets", "description": "This table presents the characteristics of three datasets used in the experiments: Mnist, Pamap2, and Mnist8m.  For each dataset, it lists the number of data points (n), the dimensionality (d), and the number of clusters.", "section": "4 Experiment"}, {"figure_path": "dmhi2ydnXZ/tables/tables_17_1.jpg", "caption": "Table 3: Comparison of sDBSCAN with the DBSCAN's output on cosine distance with \u03b5 = 0.11, minPts = 50 over different k and m on Mnist. The scikit-learn DBSCAN runs in 71 seconds.", "description": "This table compares the accuracy (NMI) and efficiency (Time in seconds) of sDBSCAN with different combinations of parameters k and m against the original DBSCAN's output (using cosine distance) on the MNIST dataset.  It shows how increasing m (number of points considered) improves the NMI score, but also increases the runtime.  The scikit-learn DBSCAN runtime of 71 seconds serves as a baseline for comparison.", "section": "C.2 SDBSCAN vs. scikit-learn DBSCAN on Mnist over cosine"}, {"figure_path": "dmhi2ydnXZ/tables/tables_17_2.jpg", "caption": "Table 4: Running time of sDBSCAN components in seconds with D = 1,024, k = 5, m = minPts = 50, \u03b5 = 0.11 on Mnist.", "description": "This table shows the running time of different components of the sDBSCAN algorithm on the Mnist dataset with specific parameter settings. The components include preprocessing, finding core points, and clustering. The table compares the running time for both 1 thread and 64 threads, highlighting the impact of multi-threading on the efficiency of the algorithm.", "section": "C.3 SOPTICS graphs on Pamap2 and Mnist8m"}, {"figure_path": "dmhi2ydnXZ/tables/tables_18_1.jpg", "caption": "Table 5: The NMI on the best \u03b5 and running time comparison on cosine and L1 distances on Pamap2. The upper 3 algorithms run in multi-threading with 10x speedup compared to 1 thread while the lower ones use 1 thread.", "description": "This table compares the performance of various DBSCAN algorithms (DBSCAN, sDBSCAN, sngDBSCAN, uDBSCAN++, kDBSCAN++, and k-means++) on the Pamap2 dataset using cosine and L1 distances.  The table shows the Normalized Mutual Information (NMI) score, which measures the accuracy of the clustering, and the running time for each algorithm.  Note that the top three algorithms utilized multi-threading, resulting in significantly faster execution times compared to the single-threaded algorithms shown below.", "section": "C.4 Detailed comparison on Pamap2"}, {"figure_path": "dmhi2ydnXZ/tables/tables_18_2.jpg", "caption": "Table 6: The NMI on the best \u03b5 and running time comparison of multi-threading DBSCAN variants on L2 and cosine on Mnist8m. Kernel k-means (k = 10) [21] runs in 15 minutes on a supercomputer of 32 nodes and achieves NMI 41%.", "description": "This table compares the performance of different DBSCAN variants (sDBSCAN-1NN, sDBSCAN, sngDBSCAN) and kernel k-means on the Mnist8m dataset using L2 and cosine distance.  It shows the Normalized Mutual Information (NMI) achieved by each algorithm at their best epsilon (\u03b5) value, along with their corresponding running times. The results highlight the superior speed of sDBSCAN and sDBSCAN-1NN compared to other methods, while demonstrating the competitiveness of sDBSCAN-1NN with the accuracy of the kernel k-means algorithm, which ran on a significantly more powerful supercomputer.", "section": "C.4 Detailed comparison on Pamap2"}, {"figure_path": "dmhi2ydnXZ/tables/tables_19_1.jpg", "caption": "Table 6: The NMI on the best \u03b5 and running time comparison of multi-threading DBSCAN variants on L2 and cosine on Mnist8m. Kernel k-means (k = 10) [21] runs in 15 minutes on a supercomputer of 32 nodes and achieves NMI 41%.", "description": "This table compares the performance of different DBSCAN variants (sDBSCAN-1NN, sDBSCAN, sngDBSCAN) and kernel k-means on the Mnist8m dataset using L2 and cosine distance metrics.  It shows the Normalized Mutual Information (NMI) achieved by each algorithm at their optimal epsilon (\u03b5) value and the time taken for each run.  The results highlight sDBSCAN-1NN's superior performance in terms of accuracy, while sDBSCAN achieves competitive results with significantly faster computation times compared to sngDBSCAN and kernel k-means.", "section": "C.4 Detailed comparison on Mnist8m"}]