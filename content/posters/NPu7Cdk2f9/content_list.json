[{"type": "text", "text": "Adaptive Depth Networks with Skippable Sub-Paths ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Woochul Kang\u2217 ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Hyungseop Lee ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Department of Embedded Systems Incheon National University Yeonsu-gu, Incheon, South Korea, 22012 wchkang@inu.ac.kr ", "page_idx": 0}, {"type": "text", "text": "Department of Embedded Systems Incheon National University Yeonsu-gu, Incheon, South Korea, 22012 hhss0927@inu.ac.kr ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Predictable adaptation of network depths can be an effective way to control inference latency and meet the resource condition of various devices. However, previous adaptive depth networks do not provide general principles and a formal explanation on why and which layers can be skipped, and, hence, their approaches are hard to be generalized and require long and complex training steps. In this paper, we present a practical approach to adaptive depth networks that is applicable to both convolutional neural networks (CNNs) and transformers with minimal training effort. In our approach, every hierarchical residual stage is divided into two sub-paths, and they are trained to acquire different properties through a simple self-distillation strategy. While the first sub-path is essential for hierarchical feature learning, the second one is trained to refine the learned features and minimize performance degradation even if it is skipped. Unlike prior adaptive networks, our approach does not train every target sub-network exhaustively. At test time, however, we can connect these sub-paths in a combinatorial manner to select sub-networks of various accuracy-efficiency trade-offs from a single network. We provide a formal rationale for why the proposed training method can reduce overall prediction errors while minimizing the impact of skipping sub-paths. We demonstrate the generality and effectiveness of our approach with both CNNs and transformers. Source codes are available at https://github.com/wchkang/depth ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Modern deep neural networks such as CNNs and transformers [1] provide state-of-the-art performance at high computational costs, and, hence, lots of efforts have been made to leverage those inference capabilities in various resource-constrained devices. Those efforts include compact architectures [2, 3], network pruning [4, 5], weight/activation quantization [6], knowledge distillation [7], to name a few. However, those approaches provide static accuracy-efficiency trade-offs, and, hence, it is infeasible to deploy one single model to meet devices with all kinds of resource-constraints. ", "page_idx": 0}, {"type": "text", "text": "There have been some attempts to provide predictable adaptability to neural networks by exploiting the redundancy in either network depths [8, 9], widths [10, 11], or both [12, 13]. However, one major difficulty with prior adaptive networks is that they are hard to train and require significantly longer training time than non-adaptive networks. For example, most adaptive networks select a fixed number of sub-networks of varying depths or width, and train them iteratively, mostly through self-distilling knowledge from the largest sub-network (also referred to as the super-net) [10, 11, 13, 14]. However, this exhaustive self-distillation takes long time and can generate conflicting training objectives for different parameter-sharing sub-networks, potentially resulting in worse performance [15, 16]. Moreover, unlike width-adaptation networks, there is no established principle for adapting depths since the impact of skipping individual layers has not been formally investigated. ", "page_idx": 0}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/0336c4f4ee8a9fc0062e607a6eb1f88367225ecaba6dbe5e335c3d13f1f82a80.jpg", "img_caption": ["Figure 1: (a) During training, every residual stage of a network is divided into two sub-paths. The layers in every second (orange) sub-path are optimized to minimize performance degradation even if they are skipped. (b) At test time, these second sub-paths can be skipped in a combinatorial manner, allowing instant selection of various parameter sharing sub-networks. (c) The sub-networks selected from a single network form a better Pareto frontier than counterpart individual networks. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "In this work, we introduce an architectural pattern and training method for adaptive depth networks that is generally applicable to various networks, e.g., CNNs and transformers. In the proposed adaptive depth networks, every residual stage is divided into two sub-paths and the sub-paths are trained to have different properties. While the first sub-paths are mandatory for hierarchical feature learning, the second sub-paths are optimized to incur minimal performance degradation even if they are skipped. ", "page_idx": 1}, {"type": "text", "text": "In order to enforce this property of the second sub-paths, we propose a simple self-distillation strategy, in which only the largest sub-network (or, super-net) and the smallest sub-network (or, base-net) are exclusively used as a teacher and a student, respectively, as shown in Figure-1-(a). The proposed self-distillation strategy does not require exhaustive training of every target sub-network, resulting in significantly shorter training time than prior adaptive networks. However, at test time, sub-networks with various depths can be selected instantly from a single network by connecting these sub-paths in a combinatorial manner, as shown in Figure 1-(b). Further, these sub-networks with varying depths outperform individually trained non-adaptive networks due to the regularization effect, as shown in Figure 1-(c). ", "page_idx": 1}, {"type": "text", "text": "In Section 3, we discuss the details of our architectural pattern and training algorithm, and show formally that the selected sub-paths trained with our self-distillation strategy are optimized to reduce prediction errors while minimally changing the level of input features. In Section 4, we empirically demonstrate that our adaptive depth networks outperform counterpart individual networks, both in CNNs and vision transformers, and achieve actual inference acceleration and energy-saving. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Adaptive Networks: In most adaptive networks, parameter-sharing sub-networks are instantly selected by adjusting either widths, depths, or resolutions [8, 10, 11, 17, 13, 15, 18, 12, 19]. For example, slimmable neural networks adjust channel widths of CNN models on the fly for accuracyefficiency trade-offs and they exploit switchable batch normalization to handle multiple sub-networks [10, 20, 11]. Transformer-based adaptive depth networks have been proposed for language models to dynamically skip some of the layers during inference [13, 9]. However, in these adaptive networks, every target sub-network with varying widths or depths need to be trained explicitly, incurring significant training overheads and potential conflicts between sub-networks. ", "page_idx": 1}, {"type": "text", "text": "Dynamic Networks: Dynamic networks [21] are another class of adaptive networks that exploit additional control networks or decision gates for input-dependent adaptation of CNN models [22, 23, 24, 25, 26] and transformers [27, 28, 29, 30]. In particular, most dynamic networks for depthadaptation have some kinds of decision gates at every layer (or block) that determine if the layer can be skipped [31, 22, 32, 33]. These approaches are based on the thought that some layers can be skipped on \u2018easy\u2019 inputs. However, the learned policy for skipping layers is opaque to users and does not provide a formal description of which layers can be skipped for a given input. Therefore, the network depth cannot be controlled by users in a predictable manner to meet the resource condition of target devices. ", "page_idx": 1}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/44b5bfb37330e551e65a7d3be0d462a1c5689595e91a1bd13b5e2b393cb02868.jpg", "img_caption": ["Figure 2: Illustration of a residual stage with two sub-paths. While the first (blue) sub-path is mandatory for hierarchical feature learning, the second (orange) sub-path can be skipped for efficiency. The layers in the skippable sub-path are trained to preserve the feature distribution from $\\mathbf{h}_{b a s e}^{s}$ to $\\mathbf{h}_{s u p e r}^{s}$ using the proposed self-disst illation strategy. Having similar distributions, either $\\mathbf{h}_{b a s e}^{s}$ or $\\mathbf{h}_{s u p e r}^{s}$ can be provided as input to the next residual stage. In the mandatory sub-path, another set of batch normalization operators, called skip-aware BNs, is exploited if the second sub-path is skipped. These sub-paths are building blocks to construct sub-networks of varying depths. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "Residual Blocks with Shortcuts: Since the introduction of ResNets [34], residual blocks with identity shortcuts have received extensive attention because of their ability to train very deep networks, and have been chosen by many CNNs [35, 36] and transformers [1, 37, 38]. Veit et al. [39] argue that identity shortcuts make exponential paths and results in an ensemble of shallower sub-networks. This thought is supported by the fact that removing individual residual blocks at test time does not significantly affect performance, and it has been further exploited to train deep networks [40, 41]. Other works argue that identity shortcuts enable residual blocks to perform iterative feature refinement, where each block improves slightly but keeps the semantic of the representation of the previous layer [42, 43]. Our work build upon those views on residual blocks with shortcuts and further extend them for adaptive depth networks by introducing a training method that enforces the properties of residual blocks more explicitly for skippable sub-paths. ", "page_idx": 2}, {"type": "text", "text": "3 Adaptive Depth Networks ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "We first present the architecture and training details of adaptive depth networks. Then, we discuss the theoretic rationale for how depth adaptation can be achieved with minimal performance degradation. ", "page_idx": 2}, {"type": "text", "text": "3.1 Architectural Pattern for Depth Adaptation ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "In modern hierarchical networks, such as ResNets [34] and Swin transformers [38], there are typically 4 to 7 consecutive residual stages.2 In a network with $N_{r}$ stages, the $s$ -th $(s=1,...,N_{r})$ stage consists of $L$ (typically $L\\in[3,6]$ ) identical residual blocks that transform input features $\\mathbf{h}_{1}^{s}$ additively to produce the output features $\\mathbf{h}^{s}$ , as follows: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\underbrace{\\mathbf{h}_{1}^{s}}_{=\\mathbf{h}^{s-1}}+\\underbrace{F_{1}(\\mathbf{h}_{1}^{s})+\\ldots+F_{L/2}^{s}(\\mathbf{h}_{L/2}^{s})}_{\\mathbf{F}_{b a s e}^{s}}+\\underbrace{F_{L/2+1}(\\mathbf{h}_{L/2+1}^{s})\\ldots+F_{L}(\\mathbf{h}_{L}^{s})}_{\\mathbf{F}_{s k i p p a b l e}^{s}}=\\mathbf{h}^{s}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "While a block with a residual function $F_{\\ell}$ $(\\ell=1,...,L)$ learns hierarchical features as traditional compositional networks [44], previous literature [43, 42] demonstrates that a residual function also tend to learn a function that refines already learned features at the same feature level. If a residual block mostly performs feature refinement while not changing the level of input features, the performance of the residual network is not significantly affected by dropping the block at test time [40, 41]. However, in typical residual networks, most residual blocks tend to refine features while learning new level features as well, and, hence, random dropping of residual blocks at test time degrades inference performance significantly. Therefore, we hypothesize that if some selected residual blocks can be encouraged explicitly during training to focus more on feature refinement, then these blocks can be skipped to save computation at marginal loss of prediction accuracy at test time. ", "page_idx": 2}, {"type": "text", "text": "To this end, we propose an architectural pattern for adaptive depth networks, in which every residual stage is divided into two sub-paths, or $\\mathbf{F}_{b a s e}^{s}$ and Fsskippable as in Equation 1 and Figure 2. We train these two sub-paths to have different properties (Section 3.2). While ${\\bf F}_{b a s e}^{s}$ is trained to learn feature representation $\\mathbf{h}_{b a s e}^{s}$ $(=\\mathbf{h}_{L/2+1}^{s})$ with no constraint, the second sub-path $\\mathbf{F}_{s k i p p a b l e}^{s}$ is constrained to preserve the feature level of $\\mathbf{h}_{b a s e}^{s}$ and only refine it to produce $\\mathbf{h}_{s u p e r}^{s}(=\\mathbf{h}_{L+1}^{s})$ . Since layers in $\\mathbf{F}_{b a s e}^{s}$ perform essential transformations for hierarchical feature learning, they cannot be bypassed during inference. In contrast, layers in $\\mathbf{F}_{s k i p p a b l e}^{s}$ can be skipped for efficiency since they only refine $\\mathbf{h}_{b a s e}^{s}$ . If $\\mathbf{F}_{s k i p p a b l e}^{s}$ is skipped, then $\\mathbf{h}_{b a s e}^{s}$ becomes the input to the next residual stage. Therefore, $\\begin{array}{r}{2^{N_{r}}\\;(=\\!\\sum_{k=0}^{N_{r}}C(N_{r},k))}\\end{array}$ sub-networks with varying accuracy-efficiency trade-offs can be selected from a single network by choosing whether to skip ${\\bf F}_{s k i p p a b l e}^{s}(s=1,...,N_{r})$ or not (Table 6). ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "This architectural pattern is agnostic to the type of residual blocks. The residual function $F$ can be convolution layers for CNNs and self-attention $+\\,\\mathrm{MLP}$ layers for transformers. Table 5 in Appendix A.1 provides details on how this pattern is applied to both CNNs and transformers. ", "page_idx": 3}, {"type": "text", "text": "3.2 Training Sub-Paths with Self-Distillation ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Preserving the feature level of $\\mathbf{h}_{b a s e}^{s}$ in $\\mathbf{F}_{s k i p p a b l e}^{s}$ implies, more specifically, that two feature representations $\\mathbf{h}_{b a s e}^{s}$ and $\\mathbf{h}_{s u p e r}^{s}$ have similar distributions over training input $\\mathbf{X}$ . Algorithm 1 shows our training method, in which $\\mathbf{h}_{b a s e}^{s}$ and $\\mathbf{h}_{s u p e r}^{s}$ are encouraged to have similar distributions by including Kullback-Leibler (KL) divergence between them, or $D_{K L}(\\mathbf{h}_{s u p e r}^{s}||\\mathbf{h}_{b a s e}^{s})$ , in the loss function. ", "page_idx": 3}, {"type": "text", "text": "Algorithm 1 Training algorithm for an adaptive depth network M. The forward function of $\\overline{{\\mathbf{M}}}$ accepts an extra argument, $\\cdot_{s}k i p^{\\prime}$ , which controls the residual stages where their skippable sub-paths are skipped. For example, the smallest sub-network, or base-net, of $\\mathbf{M}$ is selected by passing $\\scriptstyle{s k i p=}[T r u e$ , True, True, True]\u2019 when the total number of residual stages, denoted by $N_{r}$ , is 4. ", "page_idx": 3}, {"type": "text", "text": "1: Initialize an adaptive depth network M   \n2: for $i=1$ to $n_{i t e r s}$ do   \n3: Get next mini-batch of data $\\mathbf{x}$ and label y   \n4: optimizer.zero_grad()   \n5: y\u02c6super, $\\mathbf{h}_{s u p e r}=\\mathbf{M}.$ .forward(x, skip=[False, ..., False]) \u25b7forward pass for super-net   \n6: $\\begin{array}{r}{l o s s_{s u p e r}=c r i t e r i o n(\\mathbf{y},\\hat{\\mathbf{y}}_{s u p e r})}\\end{array}$   \n7: losssuper.backward()   \n8: y\u02c6base, $\\mathbf{\\bar{h}}_{b a s e}=\\mathbf{M}.$ forward(x, skip=[True, ..., True]) $\\triangleright$ forward pass for base-net   \n9: lossbase = [ sN=r1 DKL(hssuper\u2225hbsase)]\u2217+ DKL(y\u02c6super\u2225y\u02c6base) $\\mathsf{P}\\left[\\,\\right]^{*}$ is optional   \n10: lossbase.backward() $\\triangleright$ self-distillation of skippable sub-paths   \n11: optimizer.step()   \n12: end for ", "page_idx": 3}, {"type": "text", "text": "In Algorithm 1, the largest and the smallest sub-networks of M, which are called super-net and the base-net, respectively, are exploited. In steps 9-10, the hierarchical features (and outputs) from the super-net and the base-net are encouraged to have similar distributions through self-distillation. Self-distillation has been extensively used in prior adaptive networks [11, 10, 13]. However, their primary goal is to train every target sub-network. For example, on each iteration, sub-networks are randomly sampled from a large search space to act as either teachers or students [11], which takes significantly longer training time and can generate conflicting training objectives for different parameter-sharing sub-networks [15, 16]. In contrast, our method in Algorithm 1 focuses on training sub-paths by exclusively using the super-net as a teacher and the base-net as a student. By focusing on sub-paths, the training procedure in Algorithm 1 is significantly simplified and avoids potential conflicts among sub-networks. At test time, however, various sub-networks can be selected by connecting these sub-paths. The effect of this self-distillation strategy is investigated in Section 4.4. ", "page_idx": 3}, {"type": "text", "text": "Lastly, due to the architectural pattern of interleaving the mandatory and the skippable sub-paths, minimizing $D_{K L}(\\hat{\\mathbf{y}}_{s u p e r}||\\hat{\\mathbf{y}}_{b a s e})$ also minimizes $D_{K L}(\\mathbf{h}_{s u p e r}||\\mathbf{h}_{b a s e})$ implicitly. The ablation study in Section 4.4 shows that omitting the term $\\begin{array}{r}{\\sum_{s=1}^{N_{r}}D_{K L}(\\mathbf{h}_{s u p e r}^{s}\\|\\mathbf{h}_{b a s e}^{s})}\\end{array}$ in $l o s s_{b a s e}$ has a minor effect on the performance. This implicit approach is useful when the extraction of intermediate features is tricky. ", "page_idx": 3}, {"type": "text", "text": "3.3 Analysis of Skippable Sub-Paths ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Formal Analysis: $D_{K L}(\\mathbf{h}_{s u p e r}^{s}||\\mathbf{h}_{b a s e}^{s})$ in the loss function $l o s s_{b a s e}$ can be trivially minimized if residual blocks in $\\mathbf{F}_{s k i p p a b l e}^{s}$ learn identity functions, or $\\mathbf{h}_{b a s e}^{s}+\\mathbf{F}_{s k i p p a b l e}^{s}(\\mathbf{h}_{b a s e}^{s})\\;=\\;\\mathbf{h}_{b a s e}^{s}$ ", "page_idx": 3}, {"type": "text", "text": "However, since the super-net is jointly trained with the loss function $l o s s_{s u p e r}$ , the residual functions in $\\mathbf{F}_{s k i p p a b l e}^{s}$ cannot simply be an identity function. Then, what do the residual functions in $\\mathbf{F}_{s k i p p a b l e}^{s}$ learn during training? This can be further investigated through Taylor expansion [43]. For our adaptive depth networks, a loss function $\\mathcal{L}$ used for training the super-net can be approximated with Taylor expansion as follows: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathcal{L}(\\mathbf{h}_{s u p e r}^{s})=\\mathcal{L}\\{\\mathbf{h}_{b a s e}^{s}+\\mathbf{F}_{s k i p p a b l e}^{s}(\\mathbf{h}_{b a s e}^{s})\\}}\\\\ &{=\\mathcal{L}\\{\\mathbf{h}_{b a s e}^{s}+F_{L/2+1}(\\mathbf{h}_{L/2+1}^{s})+...+F_{L-1}(\\mathbf{h}_{L-1}^{s})+F_{L}(\\mathbf{h}_{L}^{s})\\}}\\\\ &{\\approx\\mathcal{L}\\{\\mathbf{h}_{b a s e}^{s}+F_{L/2+1}(\\mathbf{h}_{L/2+1}^{s})+...+F_{L-1}(\\mathbf{h}_{L-1}^{s})\\}+F_{L}(\\mathbf{h}_{L}^{s})\\cdot\\frac{\\partial\\mathcal{L}(\\mathbf{h}_{L}^{s})}{\\partial\\mathbf{h}_{L}^{s}}+\\mathcal{O}(F_{L}(\\mathbf{h}_{L}^{s}))}\\end{array}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In Equation 4, the loss function is expanded around $\\mathbf{h}_{L}^{s}$ , or $\\mathbf{h}_{b a s e}^{s}+...+F_{L-1}(\\mathbf{h}_{L-1}^{s})$ . Only the first order term is left and all high order terms, such as $F_{L}(\\mathbf{h}_{L}^{s})^{2}\\cdot\\frac{\\partial^{2}\\mathcal{L}(\\mathbf{h}_{L}^{s})}{2\\partial(\\mathbf{h}_{L}^{s})^{2}}$ , are absorbed in $\\mathcal{O}(F_{L}({\\bf h}_{L}^{s}))$ ", "page_idx": 4}, {"type": "text", "text": "The high-order terms in $\\mathcal{O}(F_{L}({\\bf h}_{L}^{s}))$ can be ignored if $F_{L}(\\mathbf{h}_{L}^{s})$ has a small magnitude. In typical residual networks, however, every layer is trained to learn new features with no constraint, and, hence, there is no guarantee that $F_{L}(\\mathbf{h}_{L}^{s})$ have small magnitude. In contrast, in our adaptive depth networks, the residuals in $\\mathbf{F}_{s k i p p a b l e}^{s}$ are explicitly enforced to have small magnitude through the proposed selfdistillation strategy (refer to Figure 3 for empirical evidence). As a result, the terms in $\\mathcal{O}(F_{L}({\\bf h}_{L}^{s}))$ can be ignored for the approximation. If we similarly keep expanding the loss function around $\\mathbf{h}_{j}^{s}$ $(j=L/2+1,...,L)$ while ignoring high order terms, we obtain the following approximation: ", "page_idx": 4}, {"type": "equation", "text": "$$\n\\mathcal{L}(\\mathbf{h}_{s u p e r}^{s})\\approx\\mathcal{L}(\\mathbf{h}_{b a s e}^{s})+\\sum_{j=L/2+1}^{L}F_{j}(\\mathbf{h}_{j}^{s})\\cdot\\frac{\\partial\\mathcal{L}(\\mathbf{h}_{j}^{s})}{\\partial\\mathbf{h}_{j}^{s}}\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In Equation 5, minimizing the loss $\\mathcal{L}(\\mathbf{h}_{s u p e r}^{s})$ during training drives $F_{j}(\\mathbf{h}_{j}^{s})\\left(j=L/2+1,...,L\\right)$ in the negative half space of $\\frac{\\partial\\mathcal{L}(\\mathbf{h}_{j}^{s})}{\\partial\\mathbf{h}_{j}^{s}}$ to minimize the dot product between $F_{j}(\\mathbf{h}_{j}^{s})$ and \u2202L(hjs). This implies that every residual function in $\\mathbf{F}_{s k i p p a b l e}^{s}$ is optimized to learn a function that has a similar effect to gradient descent: ", "page_idx": 4}, {"type": "equation", "text": "$$\nF_{j}(\\mathbf{h}_{j}^{s})\\simeq-\\;\\frac{\\partial\\mathcal{L}(\\mathbf{h}_{j}^{s})}{\\partial\\mathbf{h}_{j}^{s}}\\;(j=L/2+1,...,L)\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "In other words, the residual functions in the skippable sub-paths reduce the loss $\\mathcal{L}(\\mathbf{h}_{b a s e}^{s})$ iteratively during inference while preserving the feature distribution of $\\mathbf{h}_{b a s e}^{s}$ . ", "page_idx": 4}, {"type": "text", "text": "Considering this result, we can conjecture that, with our architectural pattern and self-distillation strategy, layers in $\\mathbf{F}_{s k i p p a b l e}^{s}$ learn functions that refine input features $\\mathbf{h}_{b a s e}^{s}$ iteratively for better inference accuracy while minimally changing the distribution of $\\mathbf{h}_{b a s e}^{s}$ . ", "page_idx": 4}, {"type": "text", "text": "Empirical Analysis: We can estimate how much the distribution of input $\\mathbf{h}$ is transformed by residual function $F$ by measuring $||F(\\mathbf{h})||_{2}/||\\mathbf{h}||_{2}$ at each residual block. Figure 3 illustrates $||\\dot{F}(\\mathbf{h})||_{2}/||\\mathbf{h}||_{2}$ at every residual block in the baseline ResNet50 and our ResNet50-ADN that is trained according to Algorithm 1.3 Our ResNet50-ADN exhibits greater transformation than ResNet50 in the mandatory subpaths (blue areas) and less transformation in the skippable sub-paths (orange areas). This result demonstrates that our self-distillation strategy in Algorithm 1 effectively trains the skippable sub-paths to minimally change the input distribution. As a result, the blocks in skippable sub-paths can be skipped with less impact on performance. ", "page_idx": 4}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/7ea37ca7204838f9e5b00dce2d0858a9d487bab3baf58be9c12c6fadd51e5b2b.jpg", "img_caption": ["Figure 3: $||F({\\bf h})||_{2}/||{\\bf h}||_{2}$ at residual blocks. In ours, skippable sub-paths (orange areas) minimally change the distribution of input $\\mathbf{h}$ . "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "3.4 Skip-Aware Batch/Layer Normalization ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "Originally, batch normalization (BN) [45] was proposed to handle internal covariate shift during training non-adaptive networks by normalizing features. In our adaptive depth networks, however, internal covariate shifts can occur during inference in mandatory sub-paths if different sub-networks are selected. To handle potential internal covariate shifts, switchable BN operators, called skip-aware BNs, are used in mandatory sub-paths. For example, at each residual stage, two sets of BNs are available for the mandatory sub-path, and they are switched depending on whether its skippable sub-path is skipped or not. ", "page_idx": 5}, {"type": "text", "text": "The effectiveness of switchable BNs has been demonstrated in networks with adaptive widths [46, 11] and adaptive resolutions [47]. However, in previous adaptive networks, $N$ sets of switchable BNs are required in every layer to support $N$ parameter-sharing sub-networks. Such a large number of switchable BNs not only requires more parameters, but also makes the training process complicated since $N$ sets of switchable BNs need to be trained iteratively during training. In contrast, in our adaptive depth networks, every mandatory sub-path needs only two sets of switchable BNs, regardless of the number of supported sub-networks. This reduced number of switchable BNs significantly simplifies the training process as shown in Algorithm 1. Furthermore, the amount of parameters for skip-aware BNs is negligible. For instance, in ResNet50, skip-aware BNs increase the parameters by $0.07\\%$ . ", "page_idx": 5}, {"type": "text", "text": "Transformers [1, 38] exploit layer normalization (LN) instead of BNs and naive replacement of LNs to BNs incurs instability during training [48]. Therefore, for our adaptive depth transformers, we apply switchable LN operators in mandatory sub-paths instead of switchable BNs. ", "page_idx": 5}, {"type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We use networks both from CNNs and vision transformers as base models to apply the proposed architecture pattern: MobileNet V2 [35] is a lightweight CNN model, ResNet [34] is a larger CNN model, and ViT [37] and Swin-T [38] are representative vision transformers. All base models except ViT have hierarchical stages, each with $2\\sim6$ residual blocks. So, according to the proposed architectural pattern, every stage is evenly divided into 2 sub-paths for depth adaptation. ViT does not define hierarchical stages and all residual encoder blocks have same spatial dimensions. Therefore, we divide 12 encoder blocks into 4 groups, resembling other residual networks, and select the last encoder block of each group as a skippable sub-path. Details are in Table 5 in Appendix A.1. These models are trained according to Algorithm 1. For self-distillation, only the final outputs from the super-net and the base-net, or $\\hat{\\mathbf{y}}_{s u p e r}$ and $\\hat{\\mathbf{y}}_{b a s e}$ respectively, are used since exploiting intermediate features for explicit self-distillation has a marginal impact on performance (Section 4.4). ", "page_idx": 5}, {"type": "text", "text": "We use the suffix $\\mathbf{\\nabla}^{\\epsilon}{-}A D N^{\\star}$ to denote our adaptive depth networks. A series of boolean values in parentheses denotes a specific sub-network used for evaluation; each boolean value represents the residual stage where its skippable sub-path is skipped. For example, ResNet50-ADN (FFFF) and ResNet50-ADN (TTTT) correspond to the super-net and the base-net of ResNet50-ADN, respectively. ", "page_idx": 5}, {"type": "text", "text": "4.1 ImageNet Classification ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We evaluate our method on ILSVRC2012 dataset [49] that has 1000 classes. The dataset consists of 1.28M training and 50K validation images. For CNN models, we follow most training settings in the original papers [34, 35], except that ResNet models are trained for 150 epochs. ViT and Swin-T are trained for 300 epochs, following DeiT\u2019s training recipe [50, 51]. For Swin-T-ADN, we disable stochastic depths [40] for the mandatory sub-paths since the strategy of random dropping of residual blocks conflicts with our approach to skipping sub-paths. For fair comparison, our adaptive depth networks and corresponding individual networks are trained in the same training settings. ", "page_idx": 5}, {"type": "text", "text": "The results in Figure 4-(a) show that our adaptive depth networks outperform counterpart individual networks even though many sub-networks share parameters in a single model. Further, our results with vision transformers demonstrate that our approach is generally applicable and compatible with their state-of-the-art training techniques such as DeiT\u2019s training recipe [50]. We conjecture that this performance improvement results from effective distillation of knowledge from $\\mathbf{h}_{s u p e r}^{s}$ to $\\mathbf{h}_{b a s e}^{s}$ at each residual stage and the iterative feature refinement at skippable sub-paths, shown in Equation 6. ", "page_idx": 5}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/9cc047d8c233ff6e9a27249bae8981d506f4b246a3af80c4439df0a1a255edcb.jpg", "img_caption": ["(a) Results on ImageNet "], "img_footnote": [], "page_idx": 6}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/b71edf5129395304cd4bdc93e0585e4edf3ddcc7550a1ce07c987daa1b2c0488.jpg", "img_caption": ["(b) Pareto frontiers of our networks "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "Figure 4: (a) Results on ImageNet validation dataset. Networks with the suffix \u2018-Base\u2019 have the same depths as the base-nets of corresponding adaptive depth networks. (b) Pareto frontiers formed by the sub-networks of our adaptive depth networks. ResNet50 (individual) and ResNet50 (KD individual) are non-adaptive networks having same depths as the sub-networks of ResNet50-ADN. ", "page_idx": 6}, {"type": "text", "text": "Table 1: Our base-nets are compared with state-of-the-art efficient inference methods. $\\dagger$ denotes static pruning methods, $^*$ denotes width-adaptation networks, and $\\star$ denotes input-dependent dynamic networks. While these approaches exploit various non-canonical training techniques, such as iterative retraining, our base-nets are instantly selected from adaptive depth networks without fine-tuning. ", "page_idx": 6}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/f6269ebd7610ac736640941ebca99b30447b1d47a178a3731758801071eb1b4a.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "Figure 4-(b) shows Pareto frontiers formed by selected sub-networks of our adaptive depth networks; Table 6 in Appendix A.2 shows the performance of all sub-networks. In Figure 4-(b) and Table 1, several state-of-the-art efficient inference methods and dynamic networks are compared with our base-networks. The result demonstrates that our adaptive depth networks show comparable performance across a range of FLOPs. In Figure 4-(b), it should be noted that individual ResNets trained with knowledge distillation has worse performance than individual ResNets. As reported in previous works, successful knowledge distillation requires a patient and long training [52], and straightforward knowledge distillation using ImageNet does not improve the performance of student models [53, 54]. In contrast, our ResNet50-ADN trained with the proposed self-distillation strategy achieves better performance than counterpart ResNets. This demonstrates that the high performance of adaptive depth networks does not simply come from distillation effect. ", "page_idx": 6}, {"type": "text", "text": "4.2 Training Cost ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "One of the main advantages of our adaptive depth networks is the significantly lower training effort needed compared to previous adaptive networks. In Algorithm 1, only one additional forward and backward pass of the smallest sub-network, or the base-net, is required for self-distillation at each training iteration. For most CNNs and transformer networks, the original training settings, such as training schedules and hyperparameters, can be used with minimal changes. However, as shown in Figure 5, many sub-networks of varying depths become available from a single network by connecting sub-paths in a combinatorial manner even though they are not trained explicitly. ", "page_idx": 6}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/c3eea9a4ac63c4c54d25240983c2b435fe68fba8e2f97ad55012c43481c9b478.jpg", "img_caption": ["Figure 5: Validation accuracy of sub-networks of our adaptive depth networks during training. Many sub-networks of varying depths become available from a single network even though most of them are not explicitly trained. "], "img_footnote": [], "page_idx": 7}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/47e83cfb6d37e635e85e175a1d26d15f24f2d8ddeabb363d800de4c8349d8ada.jpg", "table_caption": ["Table 2: Training time (1 epoch), measured on Nvidia RTX 4090 (batch size: 128). AlphaNet\u2217is configured to have similar FLOPs to MbV2 and only adjusts its depth to select sub-networks. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Table 2 shows that, at every training epoch, our adaptive depth networks require a comparable amount of time as training two separate networks combined. This is because our training method trains sub-paths, rather than sub-networks, by exploiting only the super-net and the base-net. In contrast, the compared adaptive networks require much longer training time than ours since they have to explicitly apply self-distillation to all target sub-networks. For example, on every training iteration, AlphaNet [11] randomly samples sub-networks from its search space for self-distillation. Although the prior works we compared may seem outdated, they remain relevant and representative because there has been little progress in improving the training cost of adaptive networks. ", "page_idx": 7}, {"type": "text", "text": "While AlphaNet [11] supports a significantly larger number of sub-networks, our primary goal is not to maximize the number of sub-networks. Instead, our objective is to provide better performance Pareto with a few useful sub-networks, as illustrated in Figure 4-(b). Since the classification performance of sub-networks does not always scale proportionally with their FLOPS, most sub-networks end up being ineffective. For example, although ResNet50-ADN has $2^{4}$ sub-networks in its search space, Table 6 in Appendix A.2 shows that some shallower sub-networks outperform deeper sub-networks. ", "page_idx": 7}, {"type": "text", "text": "4.3 On-Device Performance ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "While the Pareto frontiers formed by sub-networks demonstrate theoretic performance, inference acceleration in actual devices is more important in practice for effective control of inference latency and energy consumption. ", "page_idx": 7}, {"type": "text", "text": "Figure 6-(a) shows the performance on Nvidia Jetson Orin Nano. The inference latency and energy consumption of ResNet50-ADN is compared to S-ResNet50, a representative width-adaptation network. The result shows that depth-adaptation of ResNet50-ADN is highly effective in accelerating inference speeds and reducing energy consumption. Although our ResNet50-ADN has a limited FLOPs adaptation range, reducing FLOPs by $38\\%$ through depth adaptation reduces both inference latency and energy consumption by $35\\%$ . In contrast, even though S-ResNet50 can reduce FLOPs by up to $93\\%$ by adjusting its width, it only achieves up to $9\\%$ acceleration in practice. ", "page_idx": 7}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/d9de1a7e086356a64c81f7aa667ad1fa7427658c4b5fc6c428002a1349368c2b.jpg", "img_caption": ["Figure 6: (a) Inference latency and energy consumption of adaptive networks, measured on Nvidia Jetson Orin Nano (batch size: 1) (b) Pareto frontiers of three ResNet50-ADNs, each trained with varying ratios between mandatory and skippable sub-paths. Total number of blocks remains unchanged. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "4.4 Ablation Study ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "Table 3: Ablation analysis with ResNet50-ADN and ViT-b/32-ADN. Applied components are checked. $\\downarrow$ and $\\uparrow$ in parentheses are comparisons to non-adaptive individual networks. By default, only the outputs, or $\\hat{\\mathbf{y}}_{s u p e r}$ and $\\hat{\\mathbf{y}}_{b a s e}$ , are used for self-distillation. The last row with double check marks shows the results when both intermediate features and outputs are used for self-distillation. ", "page_idx": 8}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/51d349d4f5f37049179d186aa891063870fd074f84fdcb824de58c03acab951c.jpg", "table_caption": [], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "We first investigate the influence of two key components of the proposed adaptive depth networks: (1) self-distillation of sub-paths and (2) skip-aware BNs/LNs. When our self-distillation method is not applied, the loss of the base-net, or $l o s s_{b a s e}$ , in Algorithm 1 is modified to criterion $(\\mathbf{y},\\hat{\\mathbf{y}}_{b a s e})$ . Table 3 shows the results. For ResNet50-ADN, when neither of them is applied, the inference accuracy of the super-net and the base-net is significantly lower than non-adaptive individual networks by $1.5\\%$ and $2.8\\%$ , respectively. This result shows the difficulty of joint training sub-networks for adaptive networks. When one of the two components is applied individually, the performance is still slightly worse than individual networks\u2019. When both self-distillation and skip-aware BNs are applied together, ResNet50-ADN achieves significantly better performance than individual networks, both in the super-net and the base-net. The last row, with double check marks, shows that exploiting intermediate features as well as softmax outputs for self-distillation has minor impact on performance. ", "page_idx": 8}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/b6c98c12eb70e62b80d55a2ab6ed883a054ee387517157d6191fee78449225b0.jpg", "table_caption": ["Table 4: Comparison of self-distillation strategies. Our approach (in bold) uses exclusively the super-net and the base-net as a teacher and a student, respectively. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "Self-Distillation Strategies: Our self-distillation approach in Algorithm 1 exploits only two subnetworks exclusively as a teacher and a student. Specifically, the super-nets, or FFFF, acts as the the teacher and the base-nets, or TTTT, becomes the student. The purpose of this strategy is not to train only those two sub-networks, but rather to train skippable sub-paths in a way that minimally modifies the feature distribution, as demonstrated in Figure 3. To investigate the effect of self-distillation strategies, we conduct an experiment in Table 4. In every training iteration, rather than exclusively using FFFF and TTTT sub-networks for self-distillation, we randomly sample either a teacher, a student, or both from $2^{4}$ sub-networks. These randomly sampled sub-networks are trained explicitly through self-distillation. However, as shown in Table 4, all sub-networks, both from ResNet50-ADN and ViT-b/32-ADN, perform significantly better when our self-distillation strategy is applied for training. Even though most of our sub-networks (such as TFFF, TTFF, and TTTF) are instantly constructed at test time without explicit training, they still outperform their counterpart sub-networks trained explicitly through random sampling. This result demonstrates that our method of training sub-paths is more effective than training target sub-networks themselves. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Lengths of Mandatory Sub-Paths: In Figure 6-(b), we investigate the impact of varying the ratio of lengths between the mandatory and the skippable sub-paths. (Details are in Table 7.) If mandatory sub-paths become shorter than skippable sub-paths, shallower sub-networks can be selected since more layers can be skipped. However, the result in Figure 6-(b) shows that this configuration (shown in blue line) significantly degrades the performance of all sub-networks. Since every sub-network shares parameters of mandatory sub-paths, low inference capability of shallow mandatory sub-paths affects all sub-networks. This implies that maintaining certain depths in mandatory sub-paths is crucial for effective inference. Conversely, further increasing the length of mandatory sub-paths (shown in green line) does not further improve performance and only reduces the range of depth adaptation. ", "page_idx": 9}, {"type": "text", "text": "5 Conclusions ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We propose a practical approach to adaptive depth networks that can be applied to both CNNs and transformers with minimal training effort. We provide a general principle and a formal explanation on how depth adaptation can be achieved with minimal performance degradation. Under this principle, our approach can avoid typical exhaustive training of target sub-networks and instead focus on optimizing the sub-paths of the network to have specific properties. At test time, these sub-paths can be connected in a combinatorial manner to construct sub-networks with various accuracy-efficiency trade-offs from a single network. Experimental results show that these sub-networks form a better Pareto frontier than non-adaptive baseline networks and achieve actual inference acceleration. We anticipate that these advances will facilitate the practical application of adaptive networks. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgments and Disclosure of Funding ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We thank the anonymous reviewers for their constructive comments and suggestions. This work was supported by the National Research Foundation of Korea (NRF) Grants Funded by the Ministry of Science and ICT under Grant NRF-2022R1F1A1074211. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "[1] Vaswani, A., N. Shazeer, N. Parmar, et al. Attention is all you need. In Conference on Neural Information Processing Systems (NeurIPS), vol. 30. 2017.   \n[2] Howard, A. G., M. Zhu, B. Chen, et al. Mobilenets: Efficient convolutional neural networks for mobile vision applications. arXiv preprint arXiv:1704.04861, 2017.   \n[3] Han, K., Y. Wang, Q. Tian, et al. Ghostnet: More features from cheap operations. In IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 2020.   \n[4] Han, S., H. Mao, W. J. Dally. Deep compression: Compressing deep neural network with pruning, trained quantization and huffman coding. In International Conference on Learning Representations (ICLR). 2016.   \n[5] Liu, Z., H. Mu, X. Zhang, et al. Metapruning: Meta learning for automatic neural network channel pruning. In International Conference on Computer Vision (ICCV), pages 3296\u20133305. 2019.   \n[6] Jacob, B., S. Kligys, B. Chen, et al. Quantization and training of neural networks for efficient integer-arithmetic-only inference. In Conference on Computer Vision and Pattern Recognition (CVPR). 2018.   \n[7] Hinton, G., O. Vinyals, J. Dean. Distilling the knowledge in a neural network. arXiv preprint arXiv:1503.02531, 2015.   \n[8] Huang, G., D. Chen, T. Li, et al. Multi-scale dense networks for resource efficient image classification. In International Conference on Learning Representations (ICLR). 2018.   \n[9] Fan, A., E. Grave, A. Joulin. Reducing transformer depth on demand with structured dropout. In International Conference on Learning Representations (ICLR). 2020.   \n[10] Yu, J., L. Yang, N. Xu, et al. Slimmable neural networks. In International Conference on Learning Representations (ICLR). 2019.   \n[11] Wang, D., C. Gong, M. Li, et al. Alphanet: Improved training of supernets with alpha-divergence. In M. Meila, T. Zhang, eds., International Conference on Machine Learning (ICML), vol. 139 of Proceedings of Machine Learning Research, pages 10760\u201310771. PMLR, 2021.   \n[12] Wan, C., H. Hoffmann, S. Lu, et al. Orthogonalized sgd and nested architectures for anytime neural networks. In International Conference on Machine Learning (ICML), pages 9807\u20139817. PMLR, 2020.   \n[13] Hou, L., Z. Huang, L. Shang, et al. Dynabert: Dynamic bert with adaptive width and depth. Conference on Neural Information Processing Systems (NeurIPS), 33, 2020.   \n[14] Touvron, H., M. Cord, M. Oquab, et al. Co-training 2l submodels for visual recognition. In Conference on Computer Vision and Pattern Recognition (CVPR). 2023.   \n[15] Li, H., H. Zhang, X. Qi, et al. Improved techniques for training adaptive deep networks. In International Conference on Computer Vision (ICCV), pages 1891\u20131900. 2019.   \n[16] Gong, C., D. Wang, M. Li, et al. NASVit: Neural architecture search for efficient vision transformers with gradient conflict aware supernet training. In International Conference on Learning Representations (ICLR). 2022.   \n[17] Hu, H., D. Dey, M. Hebert, et al. Learning anytime predictions in neural networks via adaptive loss balancing. In Proceedings of the AAAI Conference on Artificial Intelligence, vol. 33, pages 3812\u20133821. 2019.   \n[18] Zhang, L., J. Song, A. Gao, et al. Be your own teacher: Improve the performance of convolutional neural networks via self distillation. In International Conference on Computer Vision (ICCV), pages 3713\u20133722. 2019.   \n[19] Beyer, L., P. Izmailov, A. Kolesnikov, et al. Flexivit: One model for all patch sizes. In Conference on Computer Vision and Pattern Recognition (CVPR). 2023.   \n[20] Yu, J., T. S. Huang. Universally slimmable networks and improved training techniques. In International Conference on Computer Vision (ICCV), pages 1803\u20131811. 2019.   \n[21] Han, Y., G. Huang, S. Song, et al. Dynamic neural networks: A survey. IEEE Transactions on Pattern Analysis and Machine Intelligence, 44(11):7436\u20137456, 2022.   \n[22] Wu, Z., T. Nagarajan, A. Kumar, et al. Blockdrop: Dynamic inference paths in residual networks. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 8817\u20138826. 2018.   \n[23] Li, C., G. Wang, B. Wang, et al. Dynamic slimmable network. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 8607\u20138617. 2021.   \n[24] Guo, Q., Z. Yu, Y. Wu, et al. Dynamic recursive neural network. In 2019 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), pages 5142\u20135151. 2019.   \n[25] Li, Y., L. Song, Y. Chen, et al. Learning dynamic routing for semantic segmentation. In Conference on Computer Vision and Pattern Recognition (CVPR). 2020.   \n[26] Yang, L., Y. Han, X. Chen, et al. Resolution adaptive networks for efficient inference. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2020.   \n[27] Meng, L., H. Li, B. Chen, et al. Adavit: Adaptive vision transformers for efficient image recognition. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 12299\u2013 12308. 2022.   \n[28] Yin, H., A. Vahdat, J. M. Alvarez, et al. A-ViT: Adaptive tokens for efficient vision transformer. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 10809\u201310818. 2022.   \n[29] Fayyaz, M., S. A. Koohpayegani, F. R. Jafari, et al. Adaptive token sampling for efficient vision transformers. In S. Avidan, G. Brostow, M. Ciss\u00e9, G. M. Farinella, T. Hassner, eds., European Conference on Computer Vision (ECCV), pages 396\u2013414. 2022.   \n[30] Heo, B., S. Yun, D. Han, et al. Rethinking spatial dimensions of vision transformers. In International Conference on Computer Vision (ICCV). 2021.   \n[31] Figurnov, M., M. D. Collins, Y. Zhu, et al. Spatially adaptive computation time for residual networks. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 1039\u2013 1048. 2017.   \n[32] Veit, A., S. Belongie. Convolutional networks with adaptive inference graphs. In European Conference on Computer Vision (ECCV), pages 3\u201318. 2018.   \n[33] Wang, X., F. Yu, Z.-Y. Dou, et al. Skipnet: Learning dynamic routing in convolutional networks. In European Conference on Computer Vision (ECCV), pages 409\u2013424. 2018.   \n[34] He, K., X. Zhang, S. Ren, et al. Deep residual learning for image recognition. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 770\u2013778. 2016.   \n[35] Sandler, M., A. Howard, M. Zhu, et al. Mobilenetv2: Inverted residuals and linear bottlenecks. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 4510\u20134520. 2018.   \n[36] Tan, M., Q. Le. Efficientnet: Rethinking model scaling for convolutional neural networks. In International Conference on Machine Learning (ICML), pages 6105\u20136114. PMLR, 2019.   \n[37] Dosovitskiy, A., L. Beyer, A. Kolesnikov, et al. An image is worth 16x16 words: Transformers for image recognition at scale. In International Conference on Learning Representations (ICLR). 2021.   \n[38] Liu, Z., Y. Lin, Y. Cao, et al. Swin transformer: Hierarchical vision transformer using shifted windows. In International Conference on Computer Vision (ICCV). 2021.   \n[39] Veit, A., M. J. Wilber, S. Belongie. Residual networks behave like ensembles of relatively shallow networks. Conference on Neural Information Processing Systems (NeurIPS), 29:550\u2013 558, 2016.   \n[40] Huang, G., Y. Sun, Z. Liu, et al. Deep networks with stochastic depth. In European Conference on Computer Vision (ECCV), pages 646\u2013661. Springer, 2016.   \n[41] Xie, Q., M.-T. Luong, E. Hovy, et al. Self-training with noisy student improves imagenet classification. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 10687\u201310698. 2020.   \n[42] Greff, K., R. K. Srivastava, J. Schmidhuber. Highway and residual networks learn unrolled iterative estimation. In International Conference on Learning Representations (ICLR). 2016.   \n[43] Jastrzebski, S., D. Arpit, N. Ballas, et al. Residual connections encourage iterative inference. In International Conference on Learning Representations (ICLR). 2018.   \n[44] Simonyan, K., A. Zisserman. Very deep convolutional networks for large-scale image recognition. In 3th International Conference on Learning Representations (ICLR). 2015.   \n[45] Ioffe, S., C. Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In International Conference on Machine Learning (ICML), pages 448\u2013456. PMLR, 2015.   \n[46] Yu, J., T. Huang. Autoslim: Towards one-shot architecture search for channel numbers. arXiv preprint, 2019.   \n[47] Zhu, M., K. Han, E. Wu, et al. Dynamic resolution network. In Conference on Neural Information Processing Systems (NeurIPS), vol. 35, pages 10985\u201310998. 2021.   \n[48] Yao, Z., Y. Cao, Y. Lin, et al. Leveraging batch normalization for vision transformers. In 2021 IEEE/CVF International Conference on Computer Vision Workshops (ICCVW), pages 413\u2013422. 2021.   \n[49] Russakovsky, O., J. Deng, H. Su, et al. Imagenet large scale visual recognition challenge. International journal of computer vision, 115(3):211\u2013252, 2015.   \n[50] Touvron, H., M. Cord, M. Douze, et al. Training data-efficient image transformers & distillation through attention. arXiv preprint, 2020.   \n[51] PyTorch. Image classification reference training scripts in pytorch, 2023.   \n[52] Beyer, L., X. Zhai, A. Royer, et al. Knowledge distillation: A good teacher is patient and consistent. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 10925\u2013 10934. 2022.   \n[53] Zagoruyko, S., N. Komodakis. Paying more attention to attention: Improving the performance of convolutional neural networks via attention transfer. In 5th International Conference on Learning Representations, ICLR,. 2017.   \n[54] Cho, J. H., B. Hariharan. On the efficacy of knowledge distillation. In International Conference on Computer Vision (ICCV), pages 4794\u20134802. 2019.   \n[55] Wang, H., C. Qin, Y. Zhang, et al. Neural pruning via growing regularization. In International Conference on Learning Representations (ICLR). 2021.   \n[56] Fang, G., X. Ma, M. Song, et al. Depgraph: Towards any structural pruning. In Conference on Computer Vision and Pattern Recognition (CVPR), pages 16091\u201316101. 2023.   \n[57] Yu, F., K. Huang, M. Wang, et al. Width & depth pruning for vision transformers. Proceedings of the AAAI Conference on Artificial Intelligence, 36(3):3143\u20133151, 2022.   \n[58] Yu, L., W. Xiang. X-pruner: explainable pruning for vision transformers. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), pages 24355\u201324363. 2023.   \n[59] Kong, Z., P. Dong, X. Ma, et al. Spvit: Enabling faster vision transformers via latency-aware soft token pruning. In S. Avidan, G. Brostow, M. Ciss\u00e9, G. M. Farinella, T. Hassner, eds., European Conference on Computer Vision (ECCV), pages 620\u2013640. 2022.   \n[60] Ren, S., K. He, R. Girshick, et al. Faster r-cnn: Towards real-time object detection with region proposal networks. IEEE Transactions on Pattern Analysis and Machine Intelligence, 2017.   \n[61] He, K., G. Gkioxari, P. Doll\u00e1r, et al. Mask r-cnn. In International Conference on Computer Vision (ICCV), pages 2961\u20132969. 2017.   \n[62] Lin, T.-Y., P. Goyal, R. Girshick, et al. Focal loss for dense object detection. In International Conference on Computer Vision (ICCV). 2017.   \n[63] Lin, T.-Y., P. Dollar, R. Girshick, et al. Feature pyramid networks for object detection. In Conference on Computer Vision and Pattern Recognition (CVPR). 2017.   \n[64] Selvaraju, R. R., M. Cogswell, A. Das, et al. Grad-cam: Visual explanations from deep networks via gradient-based localization. In International Conference on Computer Vision (ICCV), pages 618\u2013626. 2017. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "A Appendix: Detailed Settings and Evaluation Results ", "text_level": 1, "page_idx": 13}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/61177cb9a58f952815086507c6d65fa1c03a6af03cbbd0a387b2dac7318cd01e.jpg", "table_caption": ["A.1 Detailed Architectures "], "table_footnote": [], "page_idx": 13}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/b78c09be019fd944f542eaed0603be9ab50398db58f64c5c716a261d26f7c94b.jpg", "table_caption": ["(b) Vit-b/16-ADN "], "table_footnote": [], "page_idx": 13}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/6fac5900f373ed304a01edc1ea7569f5c2cc066544a0749ae8a218fe651bb49d.jpg", "table_caption": ["(a) ResNet50-ADN "], "table_footnote": [], "page_idx": 13}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/804ba8e8bf121f7d94d5d05b236e7d5b265be7805809c1c038bcba8713426518.jpg", "img_caption": [], "img_footnote": [], "page_idx": 13}, {"type": "text", "text": "Table 5: Each stage of base models is evenly divided into two sub-paths; the first is mandatory and the other is skippable. Since ViT does not define hierarchical stages, 12 identical encoder blocks are divided into 4 stages, resembling other residual networks for vision tasks. ", "page_idx": 13}, {"type": "text", "text": "A.2 Performance of Sub-Networks ", "text_level": 1, "page_idx": 13}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/e7917335d922f80a200cb37f1564ebe850bee6c19fb3562febaa5b10fe7fd5b3.jpg", "table_caption": [], "table_footnote": [], "page_idx": 13}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/492bcb6eb72f75a09dac1e8ede8fb3bed346135936808b4bf597a8303ce13a80.jpg", "table_caption": ["sub-network FLOPs (G) Acc@1 (%) "], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "Table 6: FLOPs and ImageNet validation accuracy of sub-networks. Only super-net (or, FFFF) and base-net (or, TTTT) are trained explicitly. Sub-networks in the middle can be selected at test time without explicit training. The highest accuracy in each group is shown in bold. ", "page_idx": 13}, {"type": "text", "text": "A.3 Varying the Ratio of Sub-Path Lengths in ResNet50-ADN ", "text_level": 1, "page_idx": 14}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/48fc96b5bfd8d1d2ccad6f222971c7e0bb2410e575c2be4978568257376fa0c6.jpg", "table_caption": ["(a) # of mandatory $<$ # of skippable "], "table_footnote": [], "page_idx": 14}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/275215ba67ce111c8dd2cf18d61ba213c56ad348a98d334edba9ab1e91430b51.jpg", "table_caption": ["(b) # of mandatory $>\\#$ of skippable "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Table 7: The configurations of ResNet50-ADNs with different proportions between mandatory and skippable sub-paths. Total number of blocks at each stage remains unchanged. ", "page_idx": 14}, {"type": "text", "text": "A.4 Varying the Ratio of Sub-Path Lengths in Vit-b/16-ADN ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Each stage of Vit-b/16-ADN has 3 encoder blocks and, by default, we select every last encoder block as a skippable sub-path. Therefore every stage has two mandatory blocks and 1 skipable blocks as shown in Table 5-(b). Figure 7-(a) shows different configuration where every last two blocks of the stages become skippable. With this configuration in Figure 7-(a), we can select much smaller sub-networks. For example, the smallest sub-network, or the base-net, of Vit-b/15-ADN has only 4 mandatory blocks and it requires 5.82 GFLOPs. However, the result in Figure 7-(b) shows that this configuration significantly degrades performance of all sub-networks. As demonstrated with ResNet50-ADN in Figure 6-(b), the low inference capability of shallow mandatory sub-paths affects all sub-networks. This result again shows that maintaining certain depths in mandatory sub-paths is crucial for effective inference. ", "page_idx": 14}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/5be204a2e26c7ed1aa65c99f1cdd1f92d1c4406ede57bc7c38cc4d9181870267.jpg", "img_caption": ["(a) # of mandatory $<\\#$ of skippable "], "img_footnote": [], "page_idx": 14}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/27f1dfb3b3774c757c2b69de38671a3395158f3bf42f79a4ec8cf9390380044b.jpg", "img_caption": ["(b) Pareto frontiers of Vit-b/16-ADN "], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Figure 7: (a) The configuration of Vit-b/16-ADN with longer skippable sub-paths. (b) Pareto-frontier when different length ratios between the mandatory and the skippable sub-paths are applied. ", "page_idx": 14}, {"type": "text", "text": "B Appendix: More Experiments and Analysis ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "B.1 Object Detection and Instance Segmentation ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Table 8: Object detection and instance segmentation results on MS COCO dataset. ", "page_idx": 14}, {"type": "table", "img_path": "NPu7Cdk2f9/tmp/019bcaeed6bb35ee1017af10812d0e595ac8654e1410eb16d4bca59e607b0a49.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "In order to investigate the generalization ability of our approach, we use MS COCO 2017 datasets on object detection and instance segmentation tasks using representative detectors. We compare individual ResNet50 and our adaptive depth ResNet50-ADN as backbone networks of the detectors. For training of detectors, we use Algorithm 1 with slight adaptation. For object detection, the intermediate features $\\mathbf{h}_{b a s e}^{s}$ and $\\mathbf{h}_{s u p e r}^{s}(s=1..N_{r})$ can be obtained directly from backbone network\u2019s feature pyramid networks (FPN) [63], and, hence, a wrapper function is not required to extract intermediate features. All networks are trained on train2017 for 12 epochs from ImageNet pretrained weights, following the training settings suggested in [63]. Table 8 shows the results on val2017 containing 5000 images. Our adaptive depth backbone networks still outperform individual static backbone networks in terms of COCO\u2019s standard metric AP. ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "B.2 Visual Analysis of Sub-Paths ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "To investigate how our training method affects feature representations in the mandatory and the skippable sub-paths, we visualize the activation of 3rd residual stage of ResNet50-ADN using GradCAM [64]. The 3rd residual stage of ResNet50-ADN has 6 residual blocks and the last three blocks are skippable. In Figure 8-(a), the activation regions of original ResNet50 changes gradually across all consecutive blocks. In contrast, in Figure 8-(b), ResNet50-ADN(FFFF), or super-net, manifests very different activation regions in two sub-paths. In the first three residual blocks, we can observe lots of hot activation regions in wide areas, suggesting active learning of new level features. In contrast, significantly less activation regions are found in the skippable last three blocks and they are gradually concentrated around the target object, demonstrating the refinement of learned features. While ResNet50-ADN(TTTT), or base-net, shares the parameters with the super-net in the first 3 mandatory blocks, their activation regions are very different from the super-net\u2019s. This is because while the super-net and the base-net share parameters in the non-skippable mandatory blocks, they use different batch normalization operators in the mandatory sub-paths. Further, in Figure 8-(c), we can observe that the final activation map of the base-net is very similar to the super-net\u2019s final activation map in Figure 8-(b). This implies that they have similar distributions for the same inputs, as suggested in Section 3.3. ", "page_idx": 15}, {"type": "image", "img_path": "NPu7Cdk2f9/tmp/5282c70620456d58d5a6665ccf27f4f630b7ab851012383e777516cb0d99951d.jpg", "img_caption": [], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "Figure 8: Class Activation Maps of the 3rd residual stages of ResNet50s. (a) Original ResNet50\u2019s activation regions change gradually across all blocks. (b) In ResNet50-ADN (FFFF), the first 3 blocks have extensive hot activation regions, implying active learning of new level features. In contrast, the skippable last 3 blocks have far less activation regions and they are gradually refined around the target. (c) Even though parameters are shared, the activation map of base-net is very different from super-net\u2019s since they use different batch normalization operators. ", "page_idx": 15}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: In Section 4.3, Figure 6-(a) highlights both the advantage and a limitation of our approach. While the compared adaptation method, e.g., width scaling, provides a wider FLOPs adaptation range, our approach of adapting depths has a more limited adaptation range. As shown in Figure 6-(b), this limitation stems from the fact that maintaining certain depths in mandatory sub-paths is crucial for effective inference. To achieve further FLOPs scaling, we may need to explore synergies with other adaptation dimensions, such as adjusting network widths [10] and input resolutions [26], along with our depth adaptation method. We leave this as our future work. ", "page_idx": 16}, {"type": "text", "text": "In Section 4.2, we mention that the prior adaptive networks we selected for the comparison of training time may seem outdated. While we acknowledge the importance of recent literature, there are limited works that closely align with our specific approach. For instance, research on adaptive networks in the context of CNNs is not very active recently. Research specifically addressing the reduction of training time for adaptive networks is even further scarce. This scarcity of recent research may be attributed to the impracticality of prior adaptive networks, which is characterized by lengthy and complex training procedures and relatively low inference performance. This impracticality of prior adaptive networks is the major motivation for our research. For vision transformers, there are some studies on dynamic networks and our paper also cites some of these relevant studies in Table 1. However, their emphasis tends to be on improving accuracy rather than reducing training time. We believe that the scarcity of recent prior research in this area implies that our study introduces a novel direction in this field. ", "page_idx": 16}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: Section 3.3 provides formal analysis of our work. ", "page_idx": 16}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We provide source codes and pretrained weights as supplementary material.   \nThe source codes includes default settings, e.g., hyperameters, used in the evaluation.   \nFurther, we provide more detailed experiment settings in Appendix A.1. ", "page_idx": 16}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We provide source codes and pretrained weights as supplementary material.   \nThey will be available in github shortly for open access. ", "page_idx": 16}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: Section B.1 and Appendix A.1 provide details of the evaluation. Further the source codes includes default settings, e.g., hyperameters, used in the evaluation. ", "page_idx": 17}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 17}, {"type": "text", "text": "Answer: [No] ", "page_idx": 17}, {"type": "text", "text": "Justification: We use ImageNet and COCO datasets for experiments. Training models with these large datasets requires too much computing resources to obtain meaningful errorbars. ", "page_idx": 17}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: In the experiments, we mention what kinds of computing resource is used. For example, in Section 4, we mention that RTX 4090s, 3090s were used for training. In Section 4.3, we mention that Nvidia Jetson Orin Nano was used to evaluate on-device performance. ", "page_idx": 17}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 17}, {"type": "text", "text": "Justification: We can hardly think of negative societal impact of our work since the goal of this work is to make deep learning training and inference more energy-efficient. Our approach not only accelerates model development but also contributes to sustainability efforts. ", "page_idx": 17}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 17}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 17}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 17}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 18}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 18}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 18}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 18}]