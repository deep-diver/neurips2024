[{"type": "text", "text": "RL on Incorrect Synthetic Data Scales the Efficiency of LLM Math Reasoning by Eight-Fold ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Amrith Setlur\u2217,1 Saurabh Garg1 Xinyang (Young) Geng2 Naman Garg Virginia Smith1 Aviral Kumar1,2 1Carnegie Mellon University 2Google DeepMind 3MultiOn ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Training on model-generated synthetic data is a promising approach for finetuning LLMs, but it remains unclear when it helps or hurts. In this paper, we investigate this question for math reasoning via an empirical study, followed by building a conceptual understanding of our observations. First, we find that while the typical approach of finetuning a model on synthetic correct or positive problem-solution pairs generated by capable models offers modest performance gains, sampling more correct solutions from the finetuned learner itself followed by subsequent fine-tuning on this self-generated data doubles the efficiency of the same synthetic problems. At the same time, training on model-generated positives can amplify various spurious correlations, resulting in flat or even inverse scaling trends as the amount of data increases. Surprisingly, we find that several of these issues can be addressed if we also utilize negative responses, i.e., model-generated responses that are deemed incorrect by a final answer verifier. Crucially, these negatives must be constructed such that the training can appropriately recover the utility or advantage of each intermediate step in the negative response. With this per-step scheme, we are able to attain consistent gains over only positive data, attaining performance similar to amplifying the amount of synthetic data by $8\\times$ . We show that training on per-step negatives can help to unlearn spurious correlations in the positive data, and is equivalent to advantage-weighted reinforcement learning (RL), implying that it inherits robustness benefits of RL over imitating positive data alone. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Training large language models (LLMs) relies on the ability to train on large amounts of high-quality data. It is predicted that we will run out of high-quality internet data by 2026 [32, 58], necessitating training on model-generated data, or what is commonly referred to as synthetic data. Recent trends illustrate that scaling up synthetic data can lead to improvements [8, 29] on hard reasoning problems, while other results illustrate that training on synthetic data can steer the performance of the model into a downward spiral [3, 17, 51]\u2014amplying biases, misinformation, and undesired stylistic properties. Thus while in principle, synthetic data could potentially address data scarcity, it must be designed in an appropriate manner to be effective. However, this has been hard due to a lack of an understanding of how synthetic data contributes to LLM behavior. ", "page_idx": 0}, {"type": "text", "text": "To provide clarity on how synthetic data contributes to performance, we aim to understand its impact on LLM capabilities via a study on math reasoning, a prevalent scenario where synthetic data is used. Typically, in this setting, synthetic data corresponds to correct or positive model-generated responses for a novel set of initial problems synthesized by prompting capable models [29, 31]. The resulting model is then evaluated on a held-out set of problems drawn from a test set. Perhaps as expected, we find that performance improves when finetuning models on positive synthetic responses, though the scaling rates for performance improvement are often substantially slower than those observed during pretraining. Concretely, we find that under the scaling law of Zhang et al. [71], the error rate scales as \u2248D\u22120.05 to D\u22120.15 in the size $D$ of synthetic dataset. Second, we observe that not all types of positive synthetic data are equally effective: often positive responses self-generated by the learner itself are as effective as $2\\times$ synthetic data from bigger models in improving performance. This is because responses from a similar model are \u201ceasier-to-fit\u201d than those from a more capable model, resulting in reduced memorization [26, 56] during finetuning. We also observe that if the positive response contains incorrect/irrelevant intermediate steps, training on such data often incentivizes the model to overfit on spurious correlations, leading to a flat or even inverse scaling with more data. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "Perhaps surprisingly, we find that the aforementioned pathologies of training on positive data only can be addressed if we also utilize synthetic negative responses: responses generated by the model that do not result in obtaining a correct final answer. One way to utilize negative responses is via methods such as direct preference optimization (DPO) [41]. While performance of standard DPO [41] largely flatlines as the number of synthetic problems are scaled up (Figure 5), we are able ", "page_idx": 1}, {"type": "image", "img_path": "9m87e9Keq1/tmp/5675ade23e58c2878c64c4499f0b3b9e6523551a3a52b8fcc214b229840244c5.jpg", "img_caption": ["Figure 1: Positive and negative synthetic data: Pictorial representation of positive/negative synthetic data definitions we use and how they are fed to SFT, RFT and DPO. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "to attain consistent improvements if the negative data is generated appropriately. A solution trace for a math problem typically comprises of multiple reasoning steps corresponding to intermediate results. Our insight is that instead of contrasting arbitrary correct and incorrect responses, we should contrast those positive and negative responses that depict good and bad choices for the more \u201ccritical\u201d intermediate steps: steps that the model must carefully produce so as to succeed at the problem. In other words, critical steps are those which the model is unable to recover from, and hence, must be emphasized. With this scheme, we are able to attain consistent gains over only positive data, attaining performance similar to scaling up positive synthetic data by $8\\times$ . We show that training on this sort of negative data evades spurious steps amplified by training on positive data alone. ", "page_idx": 1}, {"type": "text", "text": "To theoretically understand our findings, we build a conceptual model of how training on this data benefits performance. Formally, we show that this construction of negative data, which emphasizes \u201ccritical\u201d tokens (Figure 6) enables us to perform credit assignment, and is equivalent to training the model with per-step advantage-weighted reinforcement learning (RL) [40] on a mixture of positive and negative synthetic data. Specifically, these advantage values are computed under an optimal value function induced by sampling multiple responses under the SFT policy obtained by training on only the positive data. This reduction of using negative data to advantage-weighted RL enables us to conceptually compare it to training on positive data, which corresponds to imitation learning (i.e., behavioral cloning) on positive data. First, we are able to argue for the generalization gains of advantage-weighted RL through the lens of distribution robust objectives. Second, building on theoretical results in RL [27], we are also able to show that when advantages can be estimated reliably, advantage-weighted RL will be significantly more sample-efficient compared to imitation. Overall, this model explains the utility of negative data over only positive data. ", "page_idx": 1}, {"type": "text", "text": "Our contribution is a study of the role of synthetic data in improving math reasoning capabilities of LLMs. We derive scaling laws for positive and negative data on common reasoning benchmarks and observe that: (a) training on positive synthetic data from capable models results in scaling rates that are significantly slower than standard empirical risk minimization; (b) training on model-generated positive synthetic data can improve sample efficiency by $2\\times$ but also amplifies spurious correlations; (c) appropriate ways of constructing learner-specific negative data with emphasis on critical steps, results in a performance boost equivalent to scaling up positive data $8\\times$ ; (d) training with negative data provides a mechanism to unlearn spurious correlations; and (e) we present a conceptual model inspired from RL to explain our observations on synthetic data and the generalization beneftis we see. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "A standard procedure to finetune a pretrained LLM is teacher-forcing on expert data, i.e., maximizing the likelihood of the next token given all previous tokens [7, 61]. In Appendix G we discuss some failure modes of this procedure for math reasoning that positive or negative synthetic data can address. ", "page_idx": 1}, {"type": "text", "text": "Positive synthetic data. Learning theory dictates that the SFT policy trained on more SFT data (e.g., 1.5M for DeepSeek-Math [5]) would have improved math reasoning capbabilities. Thus, a common goal for generating synthetic data as close as possible to the SFT data [29, 31, 32]. That said, generating high quality math data can be challenging, since verification can often be hard. When synthetic data is verified by larger models [50, 59], recent works [33, 66] observe scaling similar to finetuning LLMs on expert data [69, 71], while another work [14] notes the compositional gains from SFT data for code generation. Common sources of \u201cgood\u201d synthetic data include responses from stronger teachers [29, 30], or data generated by the SFT policy itself, in the framework of reinforced self-training (ReST) and STaR [8, 52, 69, 70]. In our work, we study and compare the performance scaling with positive synthetic data from bigger models like GPT-4 and Gemini 1.5 Pro with self-generated positive data. We connect our findings to evidence showing \u201cease of learning\u201d generalizable features on self-generated completions [26] which often prevents undesirable memorization [56]. Finally, our work also sheds light on several concerns about training on synthetic positive data amplifying biases [48, 63], and leading to model collapse [13, 17], especially due to overfitting on\u201cspurious\u201d intermediate steps. We conceptually explain this phenomenon and also discuss how negative model-generated responses can help identify and unlearn those spurious steps. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Benefits and nuances of negative synthetic data. While most works on synthetic data [29, 32, 66, 69] train only on correct answers, our work also studies complementary gains from incorrect completions generated by the SFT policy [23, 38, 39, 68]. To leverage sub-optimal negative data, we adopt the framework of offline preference optimization [16, 41, 73], where a preference pair is constructed using correct and incorrect responses for the same problem [38]. Despite numerous studies on preference data composition [8\u201310, 37, 54, 55, 60], its unclear how to pose a reasoning problem as a preference optimization problem. Randomly pairing correct and incorrect completions in a preference pair can lead to poor performance [21, 38, 39, 64] due to objective mismatch [55, 72] and requires auxilliary losses to perform well. Another option is to use negative data for training verifiers [22, 65] but this line of work still only trains the policy using positive data. We introduce a conceptual model of negative data, where we understand how certain choices of negative data can assign per-step credits, which we use to establish the equivalence of preference optimization to advantage weighted RL. Self-explore method in Hwang et al. [23] can be viewed as an special instance of our general framework. Other works [34, 59] exploit per-step credit assignment through tree-based sampling. They identify the reasoning subsequence that led to the most incorrect answers under the SFT policy for training a reward model. While this is related, our conceptual model and analysis also understands why assigning per-step credits can generalize better by unlearning spurious correlations, e.g., when the credits are given by the Q-function of the \u201cbest-of-K\u201d SFT policy. ", "page_idx": 2}, {"type": "text", "text": "3 Problem Setup and Synthetic Data Generation Pipeline ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "Building on the recipe of Li et al. [29], Liu et al. [31], we use GSM8K [11] and MATH [19] to collect synthetic data consisting of both novel problems designed by capable models such as GPT4 [1] and Gemini 1.5 Pro [44], and responses to these problems, obtained from the same models. ", "page_idx": 2}, {"type": "text", "text": "Synthetic data pipeline. First, given a dataset $\\mathcal{D}_{\\mathrm{real}}\\,=\\,\\{(\\mathbf{\\boldsymbol{x}}_{i}^{r},\\boldsymbol{y}_{i}^{r})\\}$ of problems $\\pmb{x}_{i}^{r}\\sim p_{\\mathrm{real}}(\\pmb{x})$ and solution traces $\\Bar{\\pmb{y}}_{i}^{r}\\hat{\\mathbf{\\alpha}}\\sim p_{\\mathrm{real}}(\\pmb{y}\\mid\\pmb{x}_{i}\\)$ , we prompt one of the highly-capable models with a uniformly random sample $(x_{i}^{r},y_{i}^{r})\\in\\mathcal{D}_{\\mathrm{real}}$ and ask the model to generate a new problem $\\pmb{x}_{i}$ such that it is similar to the real problem $\\pmb{x}_{i}^{r}$ , in a way that a feasible solution exists. Second, we ask the model to provide a solution trace answer $\\pmb{y}_{i}$ with step-by-step reasoning (exact prompts for $\\mathbf{\\boldsymbol{x}}_{i},\\mathbf{\\boldsymbol{y}}_{i}$ are borrowed from Li et al. [29], shown in Appendix H). We assume that the answers generated via this process are accurate, and perform lightweight flitering step to remove duplicates, badly-formatted answer traces, and model failures. Based on the above, for any synthetic problem and solution pair $(x,y)$ , we can define a binary reward function $r(\\boldsymbol{y},\\hat{\\boldsymbol{y}})\\mapsto\\{0,\\dot{1}\\}$ , which verifies if a new solution trace $\\hat{\\pmb y}$ is correct or not. This is implemented with a set of answer extraction and string matching tools borrowed from [29, 66]. We say that a new trace $\\hat{\\pmb y}$ is a positive trace if it produces the correct final answer $i.e.$ , $r(\\hat{\\b{y}},\\b{y})=1$ , and negative if it produces an incorrect final answer, i.e., $r(\\hat{\\pmb y},\\pmb y)=0$ . By definition, $r(\\b{y},\\b{y})=1$ , and the original trace $\\textit{\\textbf{y}}$ is always positive. ", "page_idx": 2}, {"type": "text", "text": "Positive and negative datasets. The above process induces a joint distribution $p_{\\mathrm{syn}}(x,y)$ , iid samples from which yields positive synthetic dataset $\\mathcal{D}_{\\mathrm{syn}}$ . We note that the sampling process for $\\mathcal{D}_{\\mathrm{syn}}$ is designed to ensure that the induced marginal distribution over synthetic problems $p_{\\mathrm{syn}}(x)$ is close to $p_{\\mathrm{real}}(x)$ . We will use $\\mathcal{D}_{\\pi}^{+}$ to denote the positive dataset of $(x,+\\hat{y})$ where $+\\hat{\\pmb{y}}$ is a positive solution trace generated from some policy $\\pi(\\cdot\\mid x)$ . For a positive $+\\hat{\\pmb{y}}$ and negative $-\\hat{\\pmb{y}}$ trace, sampled from the same policy $\\pi(\\cdot\\mid x)$ , we denote a dataset over problems and solution pairs: $({\\pmb x},+{\\hat{\\pmb y}},-{\\hat{\\pmb y}})$ as $\\mathcal{D}_{\\pi}^{\\pm}$ . ", "page_idx": 2}, {"type": "text", "text": "Reasoning steps. The trace $\\pmb{y}_{i}$ consists of several intermediate steps, $\\pmb{y}_{i}\\,=\\,\\left[\\pmb{y}_{i,1},\\dots,\\pmb{y}_{i,L}\\right]$ . We assume each trace has at most $L$ steps, and use $\\pmb{y}_{1:t}$ to denote the subsequence of first $t$ steps. Since mathematical reasoning problems require step-by-step computation, simply arriving at an incorrect final answer does not mean that all steps in a negative $\\hat{\\pmb y}$ are incorrect. Similarly, a positive $\\hat{\\pmb y}$ may also have incorrect reasoning steps. In fact, even the original answers generated by more capable models in $\\mathcal{D}_{\\mathrm{syn}}$ may also contain incorrect reasoning steps, and training on such traces may actually lead to unintended consequences (Section 5). ", "page_idx": 3}, {"type": "text", "text": "4 Learning from Synthetic Data ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we discuss various algorithms for learning from the synthetic dataset $\\mathcal{D}_{\\mathrm{syn}}$ discussed in the previous section, as well as positive and negative solution traces generated using a model. ", "page_idx": 3}, {"type": "text", "text": "Supervised and rejection finetuning (SFT and RFT). Given positive synthetic $\\mathcal{D}_{\\mathrm{syn}}$ , perhaps the most straightforward approach (and the most prevalent) is to learn $\\pi_{\\mathrm{sft}}$ on this data via supervised next-token prediction: $\\begin{array}{r}{\\bar{\\pi}_{\\mathrm{sft}}(\\cdot|x):=\\arg\\operatorname*{max}_{\\bar{\\pi}}\\mathbb{E}_{x,y\\sim\\mathcal{D}_{\\mathrm{svn}}}\\left[\\log\\pi(y|x)\\right],}\\end{array}$ . Another option is to train via supervised next-token prediction on problems in $\\bar{\\ensuremath \u1e0a \\mathcal \u1e0a D \u1e0c \u1e0c _{\\mathrm{syn}}}$ , but when using a positive solution trace $\\hat{\\pmb y}$ sampled from $\\pi_{\\mathrm{sft}}(\\cdot|x)$ , instead of positive synthetic responses from the capable models in $\\mathcal{D}_{\\mathrm{syn}}$ Akin to rejection finetuning (RFT [69] or STaR [70]), sampling from $\\pi_{\\mathrm{sft}}(\\cdot\\mid x)$ once is not guaranteed to give a positive response, and we instead sample $M$ times for each $\\textbf{\\em x}$ and construct the dataset $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ of SFT policy generated positive responses. Then, we apply the next-token prediction loss on $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ . ", "page_idx": 3}, {"type": "text", "text": "Preference optimization. Beyond positive data, we can also learn from negative synthetic data generated from the SFT policy, especially when contrasted with positive responses. However, learning from negative data presents multiple open design questions pertaining to the construction of negative traces, and the choice of the loss function, and simple supervised fine-tuning will not be a good choice since it will incentivize the model to produce more errors. Therefore, we use a contrastive training approach, direct preference optimization (DPO [41]) for incorporating negative data from $\\pi_{\\mathrm{sft}}$ . In a nutshell, DPO trains a policy using the following preference optimization objective: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\operatorname*{min}_{\\pi}\\ \\ \\mathcal{L}_{\\mathrm{DPO}}(\\pi):=\\mathbb{E}_{(x,+y,-y)\\sim\\mathcal{D}_{\\pi\\mathrm{sft}}^{\\pm}}\\left[\\sigma\\left(\\beta\\log\\frac{\\pi(+y\\mid x)}{\\pi_{\\mathrm{sft}}(+y\\mid x)}-\\beta\\log\\frac{\\pi(-y\\mid x)}{\\pi_{\\mathrm{sft}}(-y\\mid x)}\\right)\\right].\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "We consider two objectives that construct negative data and subsequently optimize Equation 1. The first variant is standard DPO [41], which samples negative data $-\\hat{\\pmb{y}}$ from the $\\pi_{\\mathrm{sft}}$ (with rejection sampling) and adds $(x,y,-\\hat{y})$ to $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}$ . The second variant is per-step DPO [23], which first samples a complete solution trace $\\hat{\\pmb y}_{1:L}$ from $\\pi_{\\mathrm{sft}}$ and then determines the \u201cfirst pit\u201d $\\hat{\\pmb y}_{c}$ . The first pit $\\hat{\\pmb y}_{c}$ is the step where any completion following the step: $\\hat{\\pmb{y}}_{c+1:L}\\sim\\pi_{\\mathrm{sft}}(\\cdot\\mid\\pmb{x},\\hat{\\pmb{y}}_{1:c})$ leads to incorrect answers in expectation under $\\pi_{\\mathrm{sft}}$ . The triplet $(x,y,\\hat{y}_{1:c})$ is added to the preference dataset $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}$ . ", "page_idx": 3}, {"type": "text", "text": "5 Positive Data Improves Coverage, But Amplifies Spurious Correlations ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We first analyze the influence of scaling up positive synthetic data on GSM8K and MATH. In this experiment, we fine-tune DeepSeek-Math-7B [5] and LLama2-7B [57] models (details in Appendix J) on varying sizes of $\\mathcal{D}_{\\mathrm{syn}}$ , constructed out of a 5:1 mixture of GPT-4-turbo [1] and Gemini-1.5 Pro [44]. We obtain a series of SFT policies on this data scaling ladder. We then train a series of models by running one iteration of RFT on data obtained from the SFT policies at each step. ", "page_idx": 3}, {"type": "text", "text": "Scaling results with positive synthetic data GPT-4 and Gemini $\\mathbf{1.5\\,Pro}$ . Since we assume that the more capable models generate correct solutions for new problems, by scaling $\\mathcal{D}_{\\mathrm{syn}}$ we are increasing coverage under $p_{\\mathrm{real}}$ , i.e., adding new $\\mathbf{\\boldsymbol{x}},\\mathbf{\\boldsymbol{y}}$ with non-zero probability under $p_{\\mathrm{real}}$ . In Figures 2(a,b), we plot the test error rate of the SFT policy as $\\mathcal{D}_{\\mathrm{syn}}$ is scaled. As expected, we observe that the test error rate on both GSM8K and MATH improves with more positive data. Further, by simply fitting the parametric scaling law from [71], for $D:=|\\mathcal{D}_{\\mathrm{syn}}|$ , we find that the scaling trends decay as \u2248D\u22120.15 on GSM8K and $\\approx\\!D^{-0.05}$ on the harder MATH dataset, with similar trends for the corresponding pass $@5$ error rates. Since these scaling trends are much more underwhelming than those for pre-training [20], this perhaps implies that samples in $\\mathcal{D}_{\\mathrm{syn}}$ are indeed improving coverage over samples in $\\bar{p}_{\\mathrm{real}}\\bar{(}x,y)$ , but maybe not as efficiently as sampling iid samples directly from it. ", "page_idx": 3}, {"type": "text", "text": "Scaling results with positive synthetic data from 7B SFT policy. Previously, we scaled problems in $\\mathcal{D}_{\\mathrm{syn}}$ by querying GPT-4 and Gemini-1.5. Now, for existing problems in $\\mathcal{D}_{\\mathrm{syn}}$ we generate new responses by sampling from the $\\pi_{\\mathrm{sft}}$ trained on problems+solutions in $\\mathcal{D}_{\\mathrm{syn}}$ . For any $({\\bar{x}},y)\\in{\\mathcal{D}}_{\\mathrm{syn}}$ we generate verified positive solution traces $\\hat{\\pmb y}\\sim\\pi_{\\mathrm{sft}}$ s.t. $r(\\hat{\\b{y}},\\pmb{y})=1$ . Following Yuan et al. [67], to ensure we sample enough correct responses, we sample 100 times from $\\pi_{\\mathrm{sft}}$ and generate RFT datasets $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ , where each problem has atmost 4 correct and diverse solutions. Next, we finetune the pretrained DeepSeek-Math-7B model on these new series of RFT datasets and plot the performance on GSM8K and MATH (Figure 2(a,b)). First, we observe that for any size of $\\mathcal{D}_{\\mathrm{syn}}.$ , the performance of the RFT model is better than the corresponding SFT model, and the difference remains consistent as we scale $\\mathcal{D}_{\\mathrm{syn}}$ . Surprisingly, this indicates that training on positive answer traces from the 7B $\\pi_{\\mathrm{sft}}(y\\mid x)$ can lead to better performing policies than capable models. ", "page_idx": 3}, {"type": "image", "img_path": "9m87e9Keq1/tmp/a132910c0f145c1bdacd4d598d648e8e59d048df08a5e0bd6e22a3c495d4a8d5.jpg", "img_caption": ["Figure 2: Positive data scaling laws: On GSM8K (a) and MATH (b), we evaluate SFT trained on $\\mathcal{D}_{\\mathrm{syn}}$ and RFT that uses SFT policy generated positives $(\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+})$ , as we scale $\\mathcal{D}_{\\mathrm{syn}}$ , observing $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ to be $2\\times$ as effective as $\\mathcal{D}_{\\mathrm{syn}}$ . In (c), we plot performance of RFT the number of correct solutions in $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ are scaled, for a fixed set of $8\\mathrm{k}/16\\mathrm{k}$ problems from $\\mathcal{D}_{\\mathrm{syn}}$ , observing that scaling model positives can amplify spurious correlations. "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "What is the value of positives from $\\pi_{\\mathrm{sft}}(y\\mid x)?$ If sampling from $\\pi_{\\mathrm{sft}}$ also improves coverage and performance, then should we scale problems and solutions in $\\mathcal{D}_{\\mathrm{syn}}$ , or just solutions in $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}?$ To answer this, we need to assign a value to the RFT dataset $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ in terms of $|\\mathcal{D}_{\\mathrm{syn}}|$ . We do this by training SFT policies on $\\mathcal{D}_{\\mathrm{syn}}$ of sizes $8\\mathbf{k}$ and $16\\mathrm{k}$ , and then generating RFT datasets from the corresponding SFT policies where we only add more correct solution traces (for the same problems) and scale RFT data from 10k to $128\\mathbf{k}$ (unlike RFT data in Figure 2(a,b) where both questions and answers scale). In Figure 2(c) we plot the error rate of DeepSeek-Math-7B finetuned on the different sizes of $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ . Comparing the lowest values of the curves in Figure 2(c) with $\\mathcal{D}_{\\mathrm{syn}}$ scaling in Figure 2(a,b), we note that performance from $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ is $2\\times$ the size of $\\mathcal{D}_{\\mathrm{syn}}$ used to train $\\pi_{\\mathrm{sft}}$ . We also note that performance can plateau (or worsen in the case of GSM8K) as we scale up $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ by a lot. This is because $r(\\cdot,y)$ is unable to verify the correctness of each step in the positive solution traces in D\u03c0+ . Later, we see how incorrect steps induce spurious correlations that get amplified as we scale positive data, explaining this drop. See Appendix C for more discussion. ", "page_idx": 4}, {"type": "text", "text": "Why is self-generated positive data more sample-efficient? ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "From our result above, we find that solutions sampled from $\\pi_{\\mathrm{sft}}$ (trained on $\\mathcal{D}_{\\mathrm{syn.}}$ ) yield better models, as good as those trained on $2\\times|\\mathcal{D}_{\\mathrm{syn}}|$ . This finding is surprising since one might expect more capable GPT-4/Gemini models to present better solutions, training on which should lead to good performance, akin to distillation [50], but this is not the case. Our results are consistent with the study of memorization in LLMs [18, 26, 56], which shows that pretrained (base) LLMs tend to memorize \u201chardto-fit\u201d and \u201cout-of-pretraining-distribution\u201d responses during finetuning, resulting in imperfect generalization. In contrast, correct response traces produced by $\\pi_{\\mathrm{sft}}$ on problems from $\\mathcal{D}_{\\mathrm{syn}}$ are not as hard-to-fit or as out-of-distribution, since they are obtained from a model that is \u201cclose\u201d to the base LLM. We confirm this hypothesis with a histogram of negative log-likelihood values of the SFT and RFT data under the base LLM (Figure 3). Hence, we expect STaR/RFT to alleviate the memorization problem on a large chunk of examples. This finding also corroborates Yuan et al. [69]\u2019s result that lower the perplexity of SFT data under the base model, the smaller the gap between SFT and RFT performance. Note that one may also attribute better performance of RFT to improved coverage from multiple answers in $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ for each question in $\\mathcal{D}_{\\mathrm{syn}}$ . But, we find that even when RFT data is restricted to one solution per question, LLM trained on it outperforms SFT consistently by $>1\\%$ . Since verification is cheap, we can sample more solutions and also benefit from coverage. ", "page_idx": 4}, {"type": "image", "img_path": "9m87e9Keq1/tmp/d13fb4ab1bcb8e0433e0851c6093b66476d722e072a92a73de19ba191f3ce211.jpg", "img_caption": ["hFiigghuerre  li3k: elUinhdoeord  btahsaen $\\mathcal{D}_{\\mathrm{syn}}$ $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ has "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "SFT/RFT policy suffers from spurious correlations in positive synthetic data. While RFT data maybe \u201ceasier-to-fit\u201d, in Figure 2(c) we also note that continuing to scale RFT data leads to test error saturation, or even worse test error. This is unlike scaling of problems and solutions in SFT data (in Figure 2(a,b)). This failure can be attributed to the presence of incorrect/irrelevant steps that are not detected by our verifier, since it only verifies the final answer (see Appendix J, K for examples). For a problem $\\textbf{\\em x}$ , when the LLM is trained with supervised next-token prediction on some positive sub-optimal $\\textit{\\textbf{y}}$ in the RFT data, with incorrect step $\\pmb{y}_{k}$ , it is likely to overfit on spurious correlations between the sub-optimal subsequence $\\pmb{y}_{1:k}$ , and the following valid step $\\pmb{y}_{k+1}$ , when trying to maximize $\\pi(y_{k+1}|\\pmb{y}_{1:k},\\pmb{x})$ . To verify this hypothesis, we amplify the presence of these spurious steps. Specifically, for each question in $\\mathcal{D}_{\\mathrm{syn}}$ we sample \u201cspurious steps\u201d from $\\pi_{\\mathrm{sft}}$ trained on it, i.e., steps which lead to the incorrect answer with high probability under $\\pi_{\\mathrm{sft}}$ (we sample multiple completions conditioned on the same spurious step to check how likely it leads to the correct final answer). Then, we interleave the solution traces in the RFT data with these spurious steps. Note, that all traces in the RFT data are still positive since, they all lead to the correct answer eventually. We find that the LLM trained on this sub-optimal spurious RFT data performs worse than the $\\pi_{\\mathrm{sft}}$ policy itself. ", "page_idx": 5}, {"type": "image", "img_path": "9m87e9Keq1/tmp/84fef37d34312271705480ab2bdc22738a46645f375683cbb1247031abc219ff.jpg", "img_caption": ["Figure 4: Spurious correlations in RFT data hurt performance. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "Takeaways for scaling positive synthetic data ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "\u2022 While positive data from GPT-4/Gemini-1.5 improves coverage over new problems and solutions, positive data from SFT policy trained on it is $2\\times$ more sample efficient. \u2022 Scaling positive data $(\\sim\\pi_{\\mathrm{sft}})$ that contains spurious steps, leads to worse test errors. ", "page_idx": 5}, {"type": "text", "text": "6 Negative Synthetic Data Enables Per-Step Credit Assignment ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "The spurious correlations from Section 5 correspond to intermediate irrelevant or incorrect steps that are able to still steer the model towards the correct response on some training problems, but derail it otherwise. In this section, we present a conceptual model for constructing negatives that enables us to perform per-step credit assignment, and show that this approach can help us address these failure modes of positive data. We show that per-step DPO from Section 3 is a variant of this more general approach. We will then analyze scaling laws with negative data and empirically demonstrate that carefully constructed negative data can address issues with memorization. Finally, we theoretically prove that negative data improves sample-efficiency of $\\mathcal{D}_{\\mathrm{syn}}$ . ", "page_idx": 5}, {"type": "text", "text": "6.1 Conceptual Model: Constructing Negatives to Enable Per-Step Credit Assignment ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "While na\u00efvely contrasing an entire positive response $+\\pmb{y}$ against an entire negative response $-\\pmb{y}$ will increase the likelihood of each step that appears in $+\\pmb{y}$ (even when incorrect or irrelevant) and reduce likelihood on each step appearing in $-\\pmb{y}$ (even when accurate and relevant), it does not account for the importance of each step. Formally, given a negative solution trace $-\\pmb{y}$ , we would want to identify the first critical step where the model introduces a flaw $-\\pmb{y}$ , and emphasize alternate correct completions from this step that the model could have still produced. Likewise, given a positive solution trace, $+\\pmb{y}$ , we would like to identify if a given step $+\\pmb{y}_{i}$ does not make progress towards the solution by identifying if there exist alternatives from its predecessor step, $+{\\pmb y}_{1:i-1}$ , which now presents a key decision-making point. What are these critical steps and how can we identify them procedurally? ", "page_idx": 5}, {"type": "text", "text": "Value functions. We can formalize this notion of a critical step under the notion of value functions from reinforcement learning (RL). Recall that both $+\\pmb{y}$ and $-\\pmb{y}$ are sampled from $\\pi_{\\mathrm{sft}}$ . For problem $\\textbf{\\em x}$ , with correct solution $\\textit{\\textbf{y}}$ , a response $\\hat{\\pmb y}$ with a sequence of steps $\\hat{\\pmb{y}}_{1:i-1}$ , and a candidate step $\\hat{\\pmb y}_{i}$ , we define the value function for step $\\pmb{y}_{i}$ , and previous steps under some policy $\\tilde{\\pi}$ as: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{Q_{\\tilde{\\pi}}(\\underbrace{x,\\hat{y}_{1:i-1}}_{\\forall},\\,\\underbrace{\\hat{y}_{i}}_{\\forall})=}&{\\underbrace{\\mathbb{E}_{y_{i+1:L}^{\\mathrm{new}}\\sim\\tilde{\\pi}(\\cdot|x,\\hat{y}_{1:i})}\\Big[r\\left(\\big[\\hat{y}_{1:i},y_{i+1:L}^{\\mathrm{new}}\\big],y\\right)\\Big]}_{\\forall}}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Intuitively, for any partial solution upto $i$ steps, this Q-function evaluates the probability of succeeding at solving the problem given the remaining budget of $L-i$ more steps, in expectation over all possible futures sampled from some policy $\\tilde{\\pi}$ . Our conceptual model treats the policy $\\tilde{\\pi}$ as an algorithmic design choice that can differ for algorithms using negative data. As we see later, choosing $\\tilde{\\pi}$ as the Best-of-K distribution around $\\pi_{\\mathrm{sft}}$ (denoted as $\\mathrm{BoK}(\\pi_{\\mathrm{sft}}))$ enables a particularly interesting tradeoff between $Q_{\\mathrm{{}}}$ -value estimation and policy improvement. Another common choice is $\\pi_{\\mathrm{sft}}$ itself. Now, for any given step $\\hat{\\pmb y}_{i}$ , we can define its advantage as the relative change in $Q_{\\tilde{\\pi}}$ when adding step $\\hat{\\pmb y}_{i}$ in comparison with other possible candidates for step $i$ as follows: ", "page_idx": 5}, {"type": "image", "img_path": "9m87e9Keq1/tmp/bb8dc98c77d286c2f9129362917a9f0a4b2e790b3b5c9fb24339a1b1f55618b3.jpg", "img_caption": ["Figure 5: Negative data scaling laws: We evaluate algorithms that consume negative data as we scale $\\mathcal{D}_{\\mathrm{syn}}$ , and compare them with only positive training (SFT) on $\\mathcal{D}_{\\mathrm{syn}}$ . On GSM8K (a) and MATH (b), we observe an $8\\times$ gain from per-step DPO (Section 4) which aligns with our model of negative data that enables per-step credit assignment. In (c) we compare different negative data construction algorithms, and particularly note that na\u00efvely pairing positives and negatives [41] leads to worse performance as we scale $\\mathcal{D}_{\\mathrm{syn}}$ . "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "equation", "text": "$$\nA_{\\tilde{\\pi}}(\\pmb{x},\\hat{\\pmb{y}}_{1:i-1};\\hat{\\pmb{y}}_{i})=Q_{\\tilde{\\pi}}(\\pmb{x},\\hat{\\pmb{y}}_{1:i-1},\\hat{\\pmb{y}}_{i})-Q_{\\tilde{\\pi}}(\\pmb{x},\\hat{\\pmb{y}}_{1:i-2},\\hat{\\pmb{y}}_{i-1}).\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "Equation 3 is identical to the definition of advantage of an action $(i.e.,\\hat{y}_{i})$ at a state $(\\pmb{x},\\hat{\\pmb{y}}_{1:i-1})$ from RL [53], in that it is the gap between the Q-value of a state-action pair and the value function of the state (which itself is equal to the Q-value of the previous step due to deterministic dynamics). ", "page_idx": 6}, {"type": "text", "text": "Critical steps, per-step DPO, and advantage-weighted RL. We can use advantages (Equation 3) to characterize critical steps. Steps that attain a higher advantage value than others are critical since they need to be generated more precisely to solve the problem. In contrast, steps that with very low advantage values are likely worse and must be unlearned. Our definition of the advantage function implies that one can calculate advantages for each step in a response via additional Monte Carlo rollouts starting from prefixes defined by partial solutions. One could then use these advantage estimates ", "page_idx": 6}, {"type": "image", "img_path": "9m87e9Keq1/tmp/e98d6fa84966a2679e1fb4b781c8256578039392494968665ba878b46a7a6a81.jpg", "img_caption": ["Figure 6: Illustration of advantage estimation from negative data on a didactic example in synthetic model generations. Critical steps are those with high advantage values. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "(Equation 3) for training the model, for example, by running advantage-weighted reinforcement learning [40]. An alternate option would be to skip the computation of advantage estimates but instead rely on implicit approaches that optimize the advantage-weighted objective without computing their values. Theorem 6.1 shows that DPO performed over a precise pair distribution contrasting positive and negative traces obtained via additional rollouts from $\\tilde{\\pi}$ , on prefixes of a response sampled from $\\pi_{\\mathrm{sft}}$ is equivalent to advantage-weighted RL. A proof of Theorem 6.1 is in Appendix E. Note that unlike the standard reduction of DPO to the RL objective under some reward function [41, 42], Theorem 6.1 is stronger in that it identifies the value function induced by per-step DPO. ", "page_idx": 6}, {"type": "text", "text": "Theorem 6.1 (Equivalence of advantage-weighted RL and DPO with per-step pairs). The optimal policy from Equation 1 with $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}$ given by $(\\pmb{x},[\\pmb{y}_{1:i},+\\pmb{y}_{i+1}],[\\pmb{y}_{1:i},-\\pmb{y}_{i+1}])$ where the positive and negative traces share prefix $\\pmb{y}_{\\mathrm{1:}i}\\,\\sim\\,\\pi_{\\mathrm{sft}},$ , and $-\\pmb{y}_{i+1}\\sim\\pi_{\\mathrm{sft}}(\\cdot|\\pmb{x},\\pmb{y}_{1:i})$ , $+{\\pmb{\\bar{y}}}_{i+1}\\sim\\sigma(A_{\\tilde{\\pi}}({\\pmb x},{\\pmb y}_{1:i};\\cdot)-$ $A_{\\tilde{\\pi}}(x,y_{1:i};-y_{i+1}))$ , is identical to the optima of the advantage-weighted $R L$ objective: ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{\\pi}\\ \\mathbb{E}_{x\\sim p_{\\mathrm{syn}}(x),y\\sim\\pi_{\\mathrm{sft}}(\\cdot|x)}\\left[\\sum_{i=1}^{L}\\log\\pi(y_{i}|x,y_{0:i-1})\\cdot\\exp\\left(A_{\\tilde{\\pi}}(x,y_{0:i-1};y_{i})/\\beta\\right)\\right].\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "Practical instantation of DPO with per-step pairs. In most of our experiments, we instantiate a practical version of the above framework, following the scheme in Hwang et al. [23]. This is a special case (Part 1) of the complete algorithm shown in Algorithm 1 (see Appendix B). Unless otherwise mentioned, we use \u201cper-step DPO\u201d to refer to this version (Part 1 only) in practice. We will also experiment with the complete version (parts 1 and 2) later in Section 6.3.3. Instead of computing advantage estimates for each step, and then sampling preference pairs, as described in Theorem 6.1, we approximate this by only $Q\\cdot$ -value estimates on 8 negative responses for each question in the synthetic dataset, with $\\tilde{\\pi}$ chosen to be the best-of-K policy, $\\mathrm{BoK}(\\pi_{\\mathrm{sft}})$ where $K=5$ . There are two beneftis associated with this choice of $\\tilde{\\pi}$ , especially a higher value of $K$ : (i) estimating the advantage in Equation 3 with Monte Carlo rollouts exhibits lower variance when $K$ is large, since a larger budget $K$ would lead most steps to have higher Q-values and the variance of Bernoulli reduces as Q-value $\\rightarrow1$ ; and (ii) $Q_{\\mathrm{BoK(\\pi_{\\mathrm{sft}})}}$ is a non-decreasing function in $K$ for any state-action, which implies that the solution of advantage-weighted RL objective, in principle, can now improve over a better policy $\\mathrm{BoK}(\\pi_{\\mathrm{sft}})$ , compared to $\\pi_{\\mathrm{sft}}$ . Next, we discuss scaling results for negative data, and then in Section 6.3 show how per-step credit assignment improves generalization and suppresses irrelevant and incorrect steps appearing in a response, extracting more gains from the same synthetic data. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "6.2 Scaling Results for Negative Data ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Observe in Figure 5(a,b), that for both DeepSeek-Math-7B and LLama2-7B models, per-step DPO improves performance beyond the SFT policy and the performance continues to scale favorably as data size increases. In fact, for any given size of $\\mathcal{D}_{\\mathrm{syn}}$ , per-step DPO also substantially improves over RFT (Figure 2) on both datasets, and overall, while RFT improved effective data size of $\\mathcal{D}_{\\mathrm{syn}}$ by $2\\times$ , additionally training on negative data extends the performance improvement to $8\\times$ the size of $\\mathcal{D}_{\\mathrm{syn}}.$ . Additionally, since per-step DPO estimates advantage of each step under the Best-of-5 policy, one might expect a saturation in the pass $@5$ performance of the per-step DPO solution. On the contrary, we find that pass $@5$ performance also improves consistently. In Appendix D we present results for a flitered version of RFT. Here, steps with high advantages from positive/negative data are cloned. This resolves the scaling issue seen when naively scaling positive data in Figure 2(c). ", "page_idx": 7}, {"type": "text", "text": "Choice of negative data matters. In Figure 5(c) we plot negative data scaling laws where the choice of negative data (thereby pairs for DPO in Equation 1) differs. Observe that standard pairing of positive and negative responses in $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}$ for DPO [41] does not improve over the SFT policy. As such, we tuned $\\beta$ in Equation 1 for DPO but could not fully avoid performance degradation. Our conceptual model explains this result: contrasting arbitrary positives and negatives would result in an incorrect induced advantage function, training with DPO will exacerbate spurious correlations that maximize this induced advantage function [39, 46, 64]. In fact, Pal et al. [38] also find similar concerns with random pairing and instead pair positives and negatives with highest edit distance, which leads to some improvement , but still performs poorer than per-step DPO that accounts for credit. ", "page_idx": 7}, {"type": "text", "text": "Takeaways for scaling negative synthetic data ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "\u2022 Negative data can identify high-advantage (critical) steps in model-generated responses.   \n\u2022 We can construct negative data distribution that equates DPO to advantage-weighted RL. Negative data used in this way improves the sample efficiency of synthetic data by $8\\times$ . ", "page_idx": 7}, {"type": "text", "text": "6.3 Why Does Credit Assignment from Negative Data Improve Model Generalization? ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Our conceptual model illustrates that per-step DPO can perform credit assignment, and identify critical steps over irrelevant ones via advantage estimates. We saw that this improves test performance and scaling. Now, we attempt to understand why per-step credit assignment should improve generalization by understanding the generalization properties of advantage-weighted RL. We present two empirical studies below, and a formal theoretical guarantee combining these insights is shown in Appendix F. ", "page_idx": 7}, {"type": "text", "text": "6.3.1 Advantage-Weighted RL De-Emphasizes Spurious Steps and Emphasizes Critical Steps ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "Our key insight is that spurious correlations emerge in monolithic SFT or RFT due to the well-known issue of causal confusion [12] in imitation learning: by memorizing incorrect or irrelevant steps and associating them with the correctness of the final answer, the model fails to generalize on novel problems, as we saw in Figure 4. We now explain how online model-specific interventions and advantage estimation would address this issue. Consider $\\tilde{\\pi}=\\pi_{\\mathrm{sft}}$ As we show later, in under-trained models memorized steps are imperfectly cloned under $\\pi_{\\mathrm{sft}}$ , implying that while teacher-forcing loss is low for some spurious, memorized step $\\pmb{y}_{s}$ , sampling paths from $\\pi_{\\mathrm{sft}}$ , conditioned on $\\pmb{y}_{1:s}$ is likely to generate incorrect responses. This means $\\pmb{y}_{s}$ attains a low advantage. On the other hand, for a correct step, whp estimated advantage is higher. Thus, training the model with advantage weighted RL would de-emphasize spurious steps and emphasize critical steps. Running per-step DPO on data generated by the RFT model that has overfit on spurious correlations improves accuracy by ${\\tt>}6\\%$ (Figure 4). We visualize advantages in Appendix K. In Figure 7, we plot the average Q-value of a step for different negative data schemes, and note that only per-step DPO improves over SFT at each step, as expected based on the connection to advantage-weighted RL (Theorem 6.1). Standard DPO fails to improve performance since it has poor success rate at earlier (critical) steps. ", "page_idx": 7}, {"type": "image", "img_path": "9m87e9Keq1/tmp/57239af8b8268fd774cc939754b3811dbfdcc16aceed18b46a3eaed046bf6dba.jpg", "img_caption": ["Figure 7: Per-step DPO improves $\\mathrm{Q}$ -values at each step, standard DPO only improves at irrelevant steps. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "6.3.2 Why Does Generalization Improve?: Connecting Advantage-Weighted RL to DRO ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In the previous section, we discussed how advantage-weighted RL preferentially weighs the nexttoken prediction loss at each step. Now, we attempt to conceptually understand why this could improve generalization. For this, we present an intuitive explanation by drawing a connection between advantage-weighted RL and a distributionally robust optimization (DRO) algorithm, named Group DRO, commonly used to improve worst-group robustness in supervised learning [43]. ", "page_idx": 8}, {"type": "text", "text": "Intuitive explanation. During inference, the SFT policy can fail even on training problems, especially in scenarios where the SFT policy has failed to perfectly clone the next step at each intermediate step in the SFT data. As previously discussed, these steps also present with low advantage values. One way to reduce the chance of compounding inference time errors [45] is to preferentially minimize the negative log-likelihood loss more for the critical step, i.e., those steps from where the model is more likely to arrive at a wrong answer. If we iteratively update the policy with gradient steps computed over a re-weighted next-step prediction objective where each step is weighted by its advantage estimate, then the resulting algorithm intuitively exhibits this characteristic similarly to distributionally robust optimizers (DRO) [28]. Similar to how DRO solutions guarantee that all subpopulations \u2013 both majority and minority subpopulations \u2013 in the training data achieve low loss values, the solution for the advantage-weighted RL objective guarantees that the negative log-likelihood of the critical steps with high advantage estimates under $\\tilde{\\pi}$ (which of per-step DPO is $\\mathrm{BoK}(\\pi_{\\mathrm{sft}}))$ is also low, to a similar extent as the other more prevalent non-critical steps. ", "page_idx": 8}, {"type": "text", "text": "In other words, our insight is that weighting steps using advantages in Equation 4 upweights the likelihood of the underrepresented critical states while down-weighting it for the spurious ones. The guarantees on the training data $(\\mathcal{D}_{\\mathrm{syn}})$ also translate to the population level objective when the weights for on-policy samples (advantage estimates) are accurate [49] and the policy is sufficiently regularized [47]. Since correct behavior at critical steps determine the correctness of the overall solution, an elevated degree of correctness at executing critical steps at the population level implies a higher test accuracy on the reasoning task. ", "page_idx": 8}, {"type": "text", "text": "6.3.3 But, Attaining Low Generalization Error Requires Low Advantage Estimation Error ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "The practical efficacy of algorithms that use negative data for credit assignment requires the advantage estimation error to be low with fewer rollouts from $\\tilde{\\pi}$ . For discussion, consider $\\tilde{\\pi}=\\pi_{\\mathrm{sft}}$ . When the initial advantage of a spurious step is incorrectly over-estimated, negative data algorithms up-weight the likelihood further. This only leads to further memorization. Hence, most Monte-Carlo rollouts from $\\pi_{\\mathrm{sft}}$ would rely upon the memorized feature. Since the model generates the correct answer from the memorized feature, it would estimate higher $A_{\\pi_{\\mathrm{sft}}}$ , and this downward spiral of training with increasing weights on the spurious step leads to test-time model collapse. On the other hand, when $\\tilde{\\pi}=\\mathrm{BoK}(\\pi_{\\mathrm{sft}})$ for a higher value of $K$ , the Monte-Carlo advantage estimator has a lower variance (and error). This discussion also justifies the choice of $K{=}5$ , an intermediate value, in per-step DPO. ", "page_idx": 8}, {"type": "text", "text": "6.3.4 Validating Claims About Generalization: Controlled Analysis on a Didactic Problem ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "With the above insights, we now study the influence of $\\pi_{\\mathrm{sft}}$ on the generalization effects of per-step DPO. For our analysis, we consider a didactic star graph problem (Appendix I) from Bachmann and Nagarajan [4], where given a graph in the shape of a star and a query (center/end node), the model is asked to output the full path between the start/end nodes. This task highlights the failure of SFT at planning problems (akin to math reasoning). They show that $\\pi_{\\mathrm{sft}}$ minimizes SFT loss by memorizing the \u201chard-to-predict\u201d node adjacent to the center, and copying the rest from the input graph. It is clear that the failure stems from not being able to identify the critical adjacent token. We will show how credit assignment with negative data accurately upweights the critical token and unlearns the memorized token. To vary the choice of $\\pi_{\\mathrm{sft}}$ , we choose several intermediate checkpoints obtained during supervised finetuning for synthetic negative data generation. We consider three initializations: (1) an under-trained SFT model with a large training and test loss, and (2) an SFT model obtained by early-stopping based on a held-out validation set, where the validation loss is the lowest, and (3) an over-trained SFT checkpoint, with a low training but high validation loss. ", "page_idx": 8}, {"type": "image", "img_path": "9m87e9Keq1/tmp/6ccee8795b7da6ec26155b12c239208c4fa70dc0b3a1dcbba1044cc70ca4faf0.jpg", "img_caption": ["Figure 8: Didactic analysis on star graph: In (a) we plot the SFT loss and Q-value of the critical token (adjacent node) for SFT and per-step DPO (starting from iter 60). Indicative of memorization SFT loss decreases at a slow rate, matching the slow rate of increase in the Q-value. In contrast per-step DPO loss sharply decreases during training. In (b) we notice a corresponding phase transition in the test error of per-step DPO starting from different under-trained SFT checkpoints, which does not happen for an over-trained SFT checkpoint in (c). "], "img_footnote": [], "page_idx": 9}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "(1) & (2): Training on negative data from an under-trained or early-stopped $\\pi_{\\mathrm{sft}}$ improves both training loss and test performance. As shown in Figure 8(a,b), we find that when training with negative data from iteration 60 (under-trained $\\pi_{\\mathrm{sft}}$ ) and iteration 200 (early-stopped $\\pi_{\\mathrm{sft}}$ ), utilizing per-step DPO reduces the training loss very aggresively. These benefits translate to test losses and performance as well (Figure 8(b), orange and green). In contrast, supervised finetuning exhibits a nearly-flat test loss landscape, although the train loss reduces slowly. Upon a closer inspection, we find that training on positive data via SFT only tends to memorize the critical token in the training data using non-generalizable features, and hence, the resulting model does not generalize to novel problems. More training with SFT is unable to \u201cunlearn\u201d this spurious correlation and does not reduce the loss function. On the other hand, per-step DPO with negative data is able to unlearn this spurious feature and drives improvement, as evident by the drastic improvement on train and test. ", "page_idx": 9}, {"type": "text", "text": "(3) Training on negative data from an over-trained SFT initialization leads to model collapse. When training with negative data on an over-trained $\\pi_{\\mathrm{sft}}$ (iteration 580) in Figure 8(c), we observe that both SFT and per-step DPO exhibit identical test errors since training with more negative data simply exacerbates the model\u2019s dependence on memorizing the critical token, which manifests in the form of lower test losses. This is also an example where Monte-Carlo samples from the over-trained checkpoint estimates a high advantage since Q-value is already high at iteration 500 (in (a)). This means that when the SFT policy has sufficiently memorized the training data using a spurious feature, training further is unable to unlearn this dependence. Hence, we find that in this regime, negative data leads to no improvement, capping performance at what was attained by fine-tuning on positive data. ", "page_idx": 9}, {"type": "text", "text": "Takeaways for generalization and spurious correlations with negative data ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Advantage-weighted RL unlearns spurious steps and improves generalization when: (i) advantage estimation error is low; and (ii) the model is under-trained enough that imperfectly cloned spurious steps have low advantage, which can then be estimated with negative data. ", "page_idx": 9}, {"type": "text", "text": "7 Discussion and Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Our work studies the role of synthetic data for improving math reasoning capabilities of LLMs. We find that while the typical approach of collecting new questions and corresponding positive (correct) solutions from capable models like GPT-4/Gemini-1.5 presents underwhelming data scaling. The sample efficiency of the same data can be improved up to $2\\times$ by sampling more positive traces from the 7B sized models SFT-ed on the original data. However, training on positive self-generated synthetic data alone often amplifies the model\u2019s dependence on spurious steps, that erroneously appear to lead to a good solution but do not generalize to novel problems and hurt test performance. That said, surprisingly, we show that negative (incorrect) traces sampled from the same SFT model can be used to address the failure modes of training on only positive data. In particular, negative data can be used to estimate advantage values for every step, and using these advantage estimates via RL enables us to address this problem. We show how the advantages can be used implicitly by preference optimization objectives. We show how training on an instance of this objective leads to $8\\times$ improvements in sample efficiency of the synthetic data used. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "This work was done at CMU. We thank Vaishnavh Nagarajan, Yi Su, Aleksandra Faust, Hyeonbin Hwang, Christina Baek, Charlie Snell, Seohong Park, Gaurav Ghosal, Aditi Raghunathan, Katie Kang, Don Dennis, Dhruv Malik, and Pratiksha Thaker for informative discussions and feedback on an earlier version of this paper. This work was supported by compute donations from Google Cloud (TRC) and MultiOn. AS thanks OpenAI and Google respectively for providing GPT4-Turbo and Gemini-1.5 Pro credits for academic use. AK and YG thank Tianhe Yu for feedback on the paper. This work was supported in part by the National Science Foundation grants IIS2145670 and CCF2107024, and funding from Amazon, Apple, Google, Intel, Meta, and the CyLab Security and Privacy Institute. Any opinions, findings and conclusions expressed in this material are those of the author(s) and do not necessarily reflect the views of any of these funding agencies. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Josh Achiam, Steven Adler, Sandhini Agarwal, Lama Ahmad, Ilge Akkaya, Florencia Leoni Aleman, Diogo Almeida, Janko Altenschmidt, Sam Altman, Shyamal Anadkat, et al. Gpt-4 technical report. arXiv preprint arXiv:2303.08774, 2023. [2] Alekh Agarwal, Nan Jiang, Sham M Kakade, and Wen Sun. Reinforcement learning: Theory and algorithms. CS Dept., UW Seattle, Seattle, WA, USA, Tech. Rep, 2019. [3] Sina Alemohammad, Josue Casco-Rodriguez, Lorenzo Luzi, Ahmed Imtiaz Humayun, Hossein Babaei, Daniel LeJeune, Ali Siahkoohi, and Richard G Baraniuk. Self-consuming generative models go mad. arXiv preprint arXiv:2307.01850, 2023. [4] Gregor Bachmann and Vaishnavh Nagarajan. The pitfalls of next-token prediction, 2024. [5] Xiao Bi, Deli Chen, Guanting Chen, Shanhuang Chen, Damai Dai, Chengqi Deng, Honghui Ding, Kai Dong, Qiushi Du, Zhe Fu, et al. Deepseek llm: Scaling open-source language models with longtermism. arXiv preprint arXiv:2401.02954, 2024. [6] Ralph Allan Bradley and Milton E Terry. Rank analysis of incomplete block designs: I. the method of paired comparisons. Biometrika, 39(3/4):324\u2013345, 1952. [7] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:1877\u20131901, 2020. [8] Zixiang Chen, Yihe Deng, Huizhuo Yuan, Kaixuan Ji, and Quanquan Gu. Self-play fine-tuning converts weak language models to strong language models. arXiv preprint arXiv:2401.01335, 2024. [9] Pengyu Cheng, Yifan Yang, Jian Li, Yong Dai, and Nan Du. Adversarial preference optimization. arXiv preprint arXiv:2311.08045, 2023.   \n[10] Wei-Lin Chiang, Zhuohan Li, Zi Lin, Ying Sheng, Zhanghao Wu, Hao Zhang, Lianmin Zheng, Siyuan Zhuang, Yonghao Zhuang, Joseph E. Gonzalez, Ion Stoica, and Eric P. Xing. Vicuna: An open-source chatbot impressing gpt-4 with $90\\%^{*}$ chatgpt quality, March 2023. URL https://lmsys.org/blog/2023-03-30-vicuna/.   \n[11] Karl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Mark Chen, Heewoo Jun, Lukasz Kaiser, Matthias Plappert, Jerry Tworek, Jacob Hilton, Reiichiro Nakano, Christopher Hesse, and John Schulman. Training verifiers to solve math word problems. arXiv preprint arXiv:2110.14168, 2021.   \n[12] Pim De Haan, Dinesh Jayaraman, and Sergey Levine. Causal confusion in imitation learning. Advances in neural information processing systems, 32, 2019.   \n[13] Elvis Dohmatob, Yunzhen Feng, and Julia Kempe. Model collapse demystified: The case of regression, 2024.   \n[14] Guanting Dong, Hongyi Yuan, Keming Lu, Chengpeng Li, Mingfeng Xue, Dayiheng Liu, Wei Wang, Zheng Yuan, Chang Zhou, and Jingren Zhou. How abilities in large language models are affected by supervised fine-tuning data composition. arXiv preprint arXiv:2310.05492, 2023.   \n[15] Nouha Dziri, Ximing Lu, Melanie Sclar, Xiang Lorraine Li, Liwei Jiang, Bill Yuchen Lin, Sean Welleck, Peter West, Chandra Bhagavatula, Ronan Le Bras, et al. Faith and fate: Limits of transformers on compositionality. Advances in Neural Information Processing Systems, 36, 2024.   \n[16] Kawin Ethayarajh, Winnie Xu, Niklas Muennighoff, Dan Jurafsky, and Douwe Kiela. Kto: Model alignment as prospect theoretic optimization. arXiv preprint arXiv:2402.01306, 2024.   \n[17] Matthias Gerstgrasser, Rylan Schaeffer, Apratim Dey, Rafael Rafailov, Henry Sleight, John Hughes, Tomasz Korbak, Rajashree Agrawal, Dhruv Pai, Andrey Gromov, Daniel A. Roberts, Diyi Yang, David L. Donoho, and Sanmi Koyejo. Is model collapse inevitable? breaking the curse of recursion by accumulating real and synthetic data, 2024.   \n[18] Valentin Hartmann, Anshuman Suri, Vincent Bindschaedler, David Evans, Shruti Tople, and Robert West. Sok: Memorization in general-purpose large language models, 2023.   \n[19] Dan Hendrycks, Collin Burns, Saurav Kadavath, Akul Arora, Steven Basart, Eric Tang, Dawn Song, and Jacob Steinhardt. Measuring mathematical problem solving with the math dataset. NeurIPS, 2021.   \n[20] Jordan Hoffmann, Sebastian Borgeaud, Arthur Mensch, Elena Buchatskaya, Trevor Cai, Eliza Rutherford, Diego de Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, et al. Training compute-optimal large language models. arXiv preprint arXiv:2203.15556, 2022.   \n[21] Jiwoo Hong, Noah Lee, and James Thorne. Reference-free monolithic preference optimization with odds ratio. arXiv preprint arXiv:2403.07691, 2024.   \n[22] Arian Hosseini, Xingdi Yuan, Nikolay Malkin, Aaron Courville, Alessandro Sordoni, and Rishabh Agarwal. V-star: Training verifiers for self-taught reasoners. arXiv preprint arXiv:2402.06457, 2024.   \n[23] Hyeonbin Hwang, Doyoung Kim, Seungone Kim, Seonghyeon Ye, and Minjoon Seo. Selfexplore to avoid the pit: Improving the reasoning capabilities of language models with finegrained rewards. arXiv preprint arXiv:2404.10346, 2024.   \n[24] Matti K\u00e4\u00e4ri\u00e4inen. Lower bounds for reductions. In Atomic Learning Workshop, 2006.   \n[25] Sham Kakade and John Langford. Approximately optimal approximate reinforcement learning. In International Conference on Machine Learning (ICML), volume 2, 2002.   \n[26] Katie Kang, Eric Wallace, Claire Tomlin, Aviral Kumar, and Sergey Levine. Unfamiliar finetuning examples control how language models hallucinate, 2024.   \n[27] Aviral Kumar, Joey Hong, Anikait Singh, and Sergey Levine. When Should We Prefer Offilne Reinforcement Learning over Behavioral Cloning? ICLR, 2022.   \n[28] Daniel Levy, Yair Carmon, John C Duchi, and Aaron Sidford. Large-scale methods for distributionally robust optimization. Advances in Neural Information Processing Systems, 33: 8847\u20138860, 2020.   \n[29] Chen Li, Weiqi Wang, Jingcheng Hu, Yixuan Wei, Nanning Zheng, Han Hu, Zheng Zhang, and Houwen Peng. Common 7b language models already possess strong math capabilities. arXiv preprint arXiv:2403.04706, 2024.   \n[30] Hunter Lightman, Vineet Kosaraju, Yura Burda, Harri Edwards, Bowen Baker, Teddy Lee, Jan Leike, John Schulman, Ilya Sutskever, and Karl Cobbe. Let\u2019s verify step by step, 2023.   \n[31] Hao Liu, Matei Zaharia, and Pieter Abbeel. Exploration with principles for diverse ai supervision. arXiv preprint arXiv:2310.08899, 2023.   \n[32] Ruibo Liu, Jerry Wei, Fangyu Liu, Chenglei Si, Yanzhe Zhang, Jinmeng Rao, Steven Zheng, Daiyi Peng, Diyi Yang, Denny Zhou, and Andrew M. Dai. Best practices and lessons learned on synthetic data for language models, 2024.   \n[33] Haipeng Luo, Qingfeng Sun, Can Xu, Pu Zhao, Jianguang Lou, Chongyang Tao, Xiubo Geng, Qingwei Lin, Shifeng Chen, and Dongmei Zhang. Wizardmath: Empowering mathematical reasoning for large language models via reinforced evol-instruct, 2023.   \n[34] Liangchen Luo, Yinxiao Liu, Rosanne Liu, Samrat Phatale, Harsh Lara, Yunxuan Li, Lei Shu, Yun Zhu, Lei Meng, Jiao Sun, et al. Improve mathematical reasoning in language models by automated process supervision. arXiv preprint arXiv:2406.06592, 2024.   \n[35] R Thomas McCoy, Shunyu Yao, Dan Friedman, Matthew Hardy, and Thomas L Griffiths. Embers of autoregression: Understanding large language models through the problem they are trained to solve. arXiv preprint arXiv:2309.13638, 2023.   \n[36] Ida Momennejad, Hosein Hasanbeig, Felipe Vieira Frujeri, Hiteshi Sharma, Nebojsa Jojic, Hamid Palangi, Robert Ness, and Jonathan Larson. Evaluating cognitive maps and planning in large language models with cogeval. Advances in Neural Information Processing Systems, 36, 2024.   \n[37] R\u00e9mi Munos, Michal Valko, Daniele Calandriello, Mohammad Gheshlaghi Azar, Mark Rowland, Zhaohan Daniel Guo, Yunhao Tang, Matthieu Geist, Thomas Mesnard, Andrea Michi, et al. Nash learning from human feedback. arXiv preprint arXiv:2312.00886, 2023.   \n[38] Arka Pal, Deep Karkhanis, Samuel Dooley, Manley Roberts, Siddartha Naidu, and Colin White. Smaug: Fixing failure modes of preference optimisation with dpo-positive. arXiv preprint arXiv:2402.13228, 2024.   \n[39] Richard Yuanzhe Pang, Weizhe Yuan, Kyunghyun Cho, He He, Sainbayar Sukhbaatar, and Jason Weston. Iterative reasoning preference optimization. arXiv preprint arXiv:2404.19733, 2024.   \n[40] Xue Bin Peng, Aviral Kumar, Grace Zhang, and Sergey Levine. Advantage-weighted regression: Simple and scalable off-policy reinforcement learning. arXiv preprint arXiv:1910.00177, 2019.   \n[41] Rafael Rafailov, Archit Sharma, Eric Mitchell, Stefano Ermon, Christopher D Manning, and Chelsea Finn. Direct preference optimization: Your language model is secretly a reward model. arXiv preprint arXiv:2305.18290, 2023.   \n[42] Rafael Rafailov, Joey Hejna, Ryan Park, and Chelsea Finn. From $r$ to $q^{*}$ : Your language model is secretly a $\\boldsymbol{\\mathrm{q}}$ -function, 2024.   \n[43] Hamed Rahimian and Sanjay Mehrotra. Distributionally robust optimization: A review. arXiv preprint arXiv:1908.05659, 2019.   \n[44] Machel Reid, Nikolay Savinov, Denis Teplyashin, Dmitry Lepikhin, Timothy Lillicrap, Jeanbaptiste Alayrac, Radu Soricut, Angeliki Lazaridou, Orhan Firat, Julian Schrittwieser, et al. Gemini 1.5: Unlocking multimodal understanding across millions of tokens of context. arXiv preprint arXiv:2403.05530, 2024.   \n[45] St\u00e9phane Ross and Drew Bagnell. Efficient reductions for imitation learning. In International Conference on Artificial Intelligence and Statistics (AISTATS), pages 661\u2013668, 2010.   \n[46] Amir Saeidi, Shivanshu Verma, and Chitta Baral. Insights into alignment: Evaluating dpo and its variants across multiple tasks. arXiv preprint arXiv:2404.14723, 2024.   \n[47] Shiori Sagawa, Pang Wei Koh, Tatsunori B Hashimoto, and Percy Liang. Distributionally robust neural networks. In International Conference on Learning Representations, 2019.   \n[48] Mohamed El Amine Seddik, Suei-Wen Chen, Soufiane Hayou, Pierre Youssef, and Merouane Debbah. How bad is training on synthetic data? a statistical analysis of language model collapse, 2024.   \n[49] Amrith Setlur, Don Dennis, Benjamin Eysenbach, Aditi Raghunathan, Chelsea Finn, Virginia Smith, and Sergey Levine. Bitrate-constrained dro: Beyond worst case robustness to unknown group shifts. arXiv preprint arXiv:2302.02931, 2023.   \n[50] Archit Sharma, Sedrick Keh, Eric Mitchell, Chelsea Finn, Kushal Arora, and Thomas Kollar. A critical evaluation of ai feedback for aligning large language models, 2024.   \n[51] Ilia Shumailov, Zakhar Shumaylov, Yiren Zhao, Yarin Gal, Nicolas Papernot, and Ross Anderson. The curse of recursion: Training on generated data makes models forget. arXiv preprint arXiv:2305.17493, 2023.   \n[52] Avi Singh, John D. Co-Reyes, Rishabh Agarwal, Ankesh Anand, Piyush Patil, Xavier Garcia, Peter J. Liu, James Harrison, Jaehoon Lee, Kelvin Xu, Aaron Parisi, Abhishek Kumar, Alex Alemi, Alex Rizkowsky, Azade Nova, Ben Adlam, Bernd Bohnet, Gamaleldin Elsayed, Hanie Sedghi, Igor Mordatch, Isabelle Simpson, Izzeddin Gur, Jasper Snoek, Jeffrey Pennington, Jiri Hron, Kathleen Kenealy, Kevin Swersky, Kshiteej Mahajan, Laura Culp, Lechao Xiao, Maxwell L. Bileschi, Noah Constant, Roman Novak, Rosanne Liu, Tris Warkentin, Yundi Qian, Yamini Bansal, Ethan Dyer, Behnam Neyshabur, Jascha Sohl-Dickstein, and Noah Fiedel. Beyond human data: Scaling self-training for problem-solving with language models, 2024.   \n[53] Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. The MIT Press, second edition, 2018.   \n[54] Gokul Swamy, Christoph Dann, Rahul Kidambi, Zhiwei Steven Wu, and Alekh Agarwal. A minimaximalist approach to reinforcement learning from human feedback. arXiv preprint arXiv:2401.04056, 2024.   \n[55] Fahim Tajwar, Anikait Singh, Archit Sharma, Rafael Rafailov, Jeff Schneider, Tengyang Xie, Stefano Ermon, Chelsea Finn, and Aviral Kumar. Preference Fine-Tuning of LLMs Should Leverage Suboptimal, On-Policy Data, ICML 2024.   \n[56] Kushal Tirumala, Aram Markosyan, Luke Zettlemoyer, and Armen Aghajanyan. Memorization without overfitting: Analyzing the training dynamics of large language models. Advances in Neural Information Processing Systems, 35:38274\u201338290, 2022.   \n[57] Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288, 2023.   \n[58] Pablo Villalobos, Jaime Sevilla, Lennart Heim, Tamay Besiroglu, Marius Hobbhahn, and Anson Ho. Will we run out of data? an analysis of the limits of scaling datasets in machine learning. arXiv preprint arXiv:2211.04325, 2022.   \n[59] Peiyi Wang, Lei Li, Zhihong Shao, R. X. Xu, Damai Dai, Yifei Li, Deli Chen, Y. Wu, and Zhifang Sui. Math-shepherd: Verify and reinforce llms step-by-step without human annotations, 2024.   \n[60] Yuanhao Wang, Qinghua Liu, and Chi Jin. Is rlhf more difficult than standard rl? arXiv preprint arXiv:2306.14111, 2023.   \n[61] Ronald J Williams and David Zipser. A learning algorithm for continually running fully recurrent neural networks. Neural computation, 1(2):270\u2013280, 1989.   \n[62] Tianhao Wu, Banghua Zhu, Ruoyu Zhang, Zhaojin Wen, Kannan Ramchandran, and Jiantao Jiao. Pairwise proximal policy optimization: Harnessing relative feedback for llm alignment. arXiv preprint arXiv:2310.00212, 2023.   \n[63] Sierra Wyllie, Ilia Shumailov, and Nicolas Papernot. Fairness feedback loops: Training on synthetic data amplifies bias, 2024.   \n[64] Haoran Xu, Amr Sharaf, Yunmo Chen, Weiting Tan, Lingfeng Shen, Benjamin Van Durme, Kenton Murray, and Young Jin Kim. Contrastive preference optimization: Pushing the boundaries of llm performance in machine translation. arXiv preprint arXiv:2401.08417, 2024.   \n[65] Fei Yu, Anningzhe Gao, and Benyou Wang. Outcome-supervised verifiers for planning in mathematical reasoning. arXiv preprint arXiv:2311.09724, 2023.   \n[66] Longhui Yu, Weisen Jiang, Han Shi, Jincheng Yu, Zhengying Liu, Yu Zhang, James T. Kwok, Zhenguo Li, Adrian Weller, and Weiyang Liu. Metamath: Bootstrap your own mathematical questions for large language models, 2024.   \n[67] Lifan Yuan, Ganqu Cui, Hanbin Wang, Ning Ding, Xingyao Wang, Jia Deng, Boji Shan, Huimin Chen, Ruobing Xie, Yankai Lin, et al. Advancing llm reasoning generalists with preference trees. arXiv preprint arXiv:2404.02078, 2024.   \n[68] Weizhe Yuan, Richard Yuanzhe Pang, Kyunghyun Cho, Sainbayar Sukhbaatar, Jing Xu, and Jason Weston. Self-rewarding language models. arXiv preprint arXiv:2401.10020, 2024.   \n[69] Zheng Yuan, Hongyi Yuan, Chengpeng Li, Guanting Dong, Chuanqi Tan, and Chang Zhou. Scaling relationship on learning mathematical reasoning with large language models. arXiv preprint arXiv:2308.01825, 2023.   \n[70] Eric Zelikman, Yuhuai Wu, Jesse Mu, and Noah Goodman. Star: Bootstrapping reasoning with reasoning. Advances in Neural Information Processing Systems, 35:15476\u201315488, 2022.   \n[71] Biao Zhang, Zhongtao Liu, Colin Cherry, and Orhan Firat. When scaling meets llm finetuning: The effect of data, model and finetuning method, 2024.   \n[72] Ruiqi Zhang, Licong Lin, Yu Bai, and Song Mei. Negative preference optimization: From catastrophic collapse to effective unlearning. arXiv preprint arXiv:2404.05868, 2024.   \n[73] Yao Zhao, Mikhail Khalman, Rishabh Joshi, Shashi Narayan, Mohammad Saleh, and Peter J Liu. Calibrating sequence likelihood improves conditional language generation. In The Eleventh International Conference on Learning Representations, 2022. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 14}, {"type": "text", "text": "Appendices ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "A Limitations of our Work ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "While our work provides some results and conceptual models to understand the role of synthetic data for reasoning, there are still many open questions that need to be answered to fully understand its utility. While synthetic data from LLMs like Gemini and GPT-4 holds great potential, for more complex reasoning problems (more complicated than the datasets evaluated in our work), synthetic data generated from more capable models can contain errors. Generating negative/positive data by referencing synthetic data answers can reinforce unwanted spurious correlations highlighted in our work. This means that novel recipes for generating synthetic problems may be utilized in the future, and our analysis might need to be re-done. That said, we believe that our insights about algorithmic behavior with synthetic data are still quite general and should transfer to these novel settings as well. Ultimately, we would want that training on synthetic data improves transfer and generalization abilities of the model in general reasoning scenarios, and to this end, an evaluation of transfer capabilities is an important avenue that future work should focus on. ", "page_idx": 15}, {"type": "text", "text": "B Per-step DPO Algorithm ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Algorithm 1 Per-step DPO (Part 1: Practical version for most experiments; Parts $1+2$ : Complete version) ", "page_idx": 15}, {"type": "text", "text": "Require: Synthetic dataset: $\\mathcal{D}_{\\mathrm{syn}}$ , SFT policy finetuned on $\\mathcal{D}_{\\mathrm{syn}}\\colon\\pi_{\\mathrm{sft}}$ , sampling policy $\\tilde{\\pi}$ .   \n1: Initialize per-step DPO dataset $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}\\leftarrow\\{\\}$ .   \n2: for $(x,y)\\in\\mathcal{D}_{\\mathrm{syn}}\\cup\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ do   \n3: # Part 1: Identify critical steps in incorrect responses   \n4: Sample multiple incorrect answers $-\\hat{y}\\sim\\pi_{\\mathrm{sft}}(\\bar{\\cdot}\\mid x)$ , and collect them in set ${\\mathcal{C}}(x)$ .   \n5: for $\\bar{-\\pmb{y}}:=[-\\hat{\\pmb{y}}_{1},\\dots,-\\hat{\\pmb{y}}_{L}]\\in\\mathcal{C}(\\pmb{x})$ do   \n6: Compute the Monte Carlo estimate for $Q_{\\tilde{\\pi}}(\\pmb{x},-\\hat{\\pmb{y}}_{1:i-1};-\\hat{\\pmb{y}}_{i})$ for each step $-\\hat{\\pmb{y}}_{i}$ .   \n7: If $-\\hat{\\pmb{y}}_{c}$ is the first step with least $Q_{\\tilde{\\pi}}(\\pmb{x},-\\hat{\\pmb{y}}_{1:i-1};-\\hat{\\pmb{y}}_{i})$ , then $\\begin{array}{r l r}{\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}}&{{}\\leftarrow}&{\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}\\ \\cup}\\end{array}$   \n$\\{(x,y,-\\hat{y}_{1:c})\\}$ .   \n8: end for   \n9: # Part 2: Identify spurious steps in correct responses   \n10: Sample multiple correct answers $+{\\hat{y}}\\sim\\pi_{\\mathrm{sft}}(\\cdot\\mid x)$ , and collect them in set ${\\mathcal{C}}^{\\prime}(x)$ .   \n11: for $+{\\hat{\\pmb{y}}}:={\\left[+{\\hat{\\pmb{y}}}_{1},\\dots,+{\\hat{\\pmb{y}}}_{L}\\right]}\\in{\\mathcal{C}}^{\\prime}({\\pmb{x}})$ do   \n12: Compute the Monte Carlo estimate for $Q_{\\tilde{\\pi}}(x,+\\hat{y}_{1:i-1};+\\hat{y}_{i})$ for each step $+\\hat{\\pmb{y}}_{i}$ .   \n13: If $+\\hat{\\pmb{y}}_{c}$ is the first step with least $Q_{\\tilde{\\pi}}(x,+\\hat{y}_{1:i-1};+\\hat{y}_{i})$ , then $\\begin{array}{r l r}{\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}}&{{}\\leftarrow}&{\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}}\\end{array}$ \u222a   \n$\\{(x,y,+\\hat{y}_{1:c})\\}$ .   \n14: end for   \n15: end for   \n16: Optimize DPO loss in Equation (1) on $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}$ with $\\pi_{\\mathrm{sft}}$ as the reference policy. ", "page_idx": 15}, {"type": "text", "text": "C Additional Experiments using Positive Synthetic Data (Section 5) ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "Recall from Section 5 we observed a $2\\times$ boost in sample efficiency (over $\\pi_{\\mathrm{sft}}$ ) of the question/answer pairs in the synthetic data when we cloned positive solutions sampled from $\\pi_{\\mathrm{sft}}$ . Note that one may also attribute better performance of RFT to improved coverage from multiple responses in $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ for each question in $\\mathcal{D}_{\\mathrm{syn}}$ . We find that even when RFT data is restricted to one solution per question, base LLMs finetuned on it outperform SFT consistently by $>1\\%$ . In Figure 9, we plot the performance of DeepSeek-Math-7B finetuned on SFT data $\\mathcal{D}_{\\mathrm{syn}}$ and RFT data $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ where $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{+}$ has the same questions as $\\mathcal{D}_{\\mathrm{syn}}$ , and only one positive solution per question, sampled from $\\pi_{\\mathrm{sft}}$ finetuned on $\\mathcal{D}_{\\mathrm{syn}}$ . Thus, both SFT and RFT datasets are of the same size. This means that a significant portion of the $2\\times$ sample efficiency gains we observe for RFT in Figure 2(a,b) can be attributed to RFT data from $\\pi_{\\mathrm{sft}}$ being easier-to-fit, and not purely because RFT data improves coverage by finetuning on multiple solution traces per question. ", "page_idx": 15}, {"type": "image", "img_path": "9m87e9Keq1/tmp/eccbfffcf9ab4fb0f0ba35b3485084143af9f2ac6cd7da275a5afc7eeb660003.jpg", "img_caption": ["Figure 9: RFT data with a single (self-generated) correct solution per problem outperforms SFT data (from highly-capable models) of the same size. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "D Additional Experiments using Negative Synthetic Data (Section 6) ", "text_level": 1, "page_idx": 16}, {"type": "image", "img_path": "9m87e9Keq1/tmp/0ae24dc7c7c3976c65cc0a72bc5dcf5bf7ece98763af820bd3b20d6d2cab21d6.jpg", "img_caption": ["Figure 10: On MATH, improving advantage estimates by computing advantages over both positive and negative traces sampled from $\\pi_{\\mathrm{sft}}$ improves estimation error and final performance for per-step DPO. "], "img_footnote": [], "page_idx": 16}, {"type": "text", "text": "Improving per-step DPO [23] with a closer approximation of advantage-weighted RL (Parts $\\hphantom{0}1+2$ in Algorithm 1). Now, we discuss an experiment that improves the performance of per-step DPO [23] by running the full version of Algorithm 1. In particular, we add new preference pairs to the dataset of per-step DPO algorithm starting from positive samples. Recall from Section 4 and Algorithm 1, that for a problem $\\textbf{\\em x}$ , with correct answer $\\textit{\\textbf{y}}$ given by SFT or RFT data, Part 1 of per-step DPO estimates the expected accuracy (Q-value) of each step in a negative rollout $-\\hat{\\pmb{y}}\\sim\\pi_{\\mathrm{sft}}\\bar{(\\cdot\\mid\\pmb{x})}$ sampled from the SFT policy. For each step $-\\hat{\\pmb{y}}_{c}$ the $\\mathrm{^Q}$ -value is computed conditioned on $\\textbf{\\em x}$ and previous steps $-\\hat{\\pmb{y}}_{1:c-1}$ . It then adds the triplet $(x,y,-\\hat{y}_{1:c})$ to the DPO dataset. We improve the coverage and accuracy of advantage estimates via Part 2, i.e., repeating this process for steps appearing on a positive trace $+{\\hat{y}}\\sim\\pi_{\\mathrm{sft}}(\\cdot\\mid x)$ as well. Specifically, we add $(\\bar{x},y,+\\bar{y}_{1:c})$ to the DPO dataset, where the step $+\\hat{\\pmb{y}}_{c}$ is the first step in the positive trace to have a low $\\mathrm{^Q}$ -value (as dicated by a relative threshold on the Q-value), which indicates that $+\\hat{\\pmb{y}}_{c}$ is likely a spurious step that the SFT model generated. For individual steps that are more likely to occur in either positive or negative traces we improve coverage of alternate possible steps, and for steps that occur in both positive and negative traces, we lower the variance (and error) of the advantage estimate. In Figure 10, we compare the performance of per-step DPO runs with the datasets constructed from only negative vs. both positive and negative traces, and find that the latter has a lower test error for all sizes of $\\mathcal{D}_{\\mathrm{syn}}$ . ", "page_idx": 16}, {"type": "text", "text": "Advantage filtered per-step RFT. We ran an experiment with advantage filtering on all the steps present in both positive and negative data from the SFT policy and cloned the filtered data. For this, we cloned responses with high advantage steps from positive and negative responses sampled from the SFT policy. We filter all steps where the minimum advantage across all steps is in the bottom $50\\%$ percentile. This \u201cper-step RFT\u201d outperforms standard RFT (Figure 11), indicating that training on useful steps from negative data can improve beyond only training on positive data alone. While per-step RFT is worse than per-step DPO, we believe that this only further hints at the point that even using low advantage steps (that per-step RFT filters) for training, can further improve. ", "page_idx": 16}, {"type": "image", "img_path": "9m87e9Keq1/tmp/64a1170c5594d9c68f2259e7d9fa58527935ecbcfb9dc74e32d6c864c3912b55.jpg", "img_caption": ["Figure 11: Advantage flitered RFT: We clone responses with high advantage steps from positive and negative responses sampled from the SFT policy. We fliter all responses where the minimum advantage across all steps is in the bottom $50\\%$ percentile. "], "img_footnote": [], "page_idx": 17}, {"type": "text", "text": "E Proof of Theorem 6.1 ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "We first restate the theorem statement and then provide a proof for this below. Our main goal in this theorem is to show that training with per-step DPO is equivalent to running advantage-weighted RL shown in the theoretical result. ", "page_idx": 17}, {"type": "text", "text": "Theorem E.1 (Equivalence of advantage-weighted RL and DPO with per-step pairs). The optimal policy from Equation 1 with $\\mathcal{D}_{\\pi_{\\mathrm{sft}}}^{\\pm}$ given by $(\\pmb{x},[\\pmb{y}_{1:i},+\\pmb{y}_{i+1}],[\\pmb{y}_{1:i},-\\pmb{y}_{i+1}])$ where the positive and negative traces share prefix $y_{1:i}\\,\\sim\\,\\pi_{\\mathrm{sft}}$ , and $-y_{i+1}\\,\\sim\\,\\pi_{\\mathrm{sft}}(\\,\\cdot\\,|\\,x,y_{1:i}),\\,+y_{i+1}\\,\\sim\\,\\sigma\\bigl(A_{\\tilde{\\pi}}\\bigl(x,y_{1:i};\\cdot\\,\\bigr)-$ $A_{\\tilde{\\pi}}(x,y_{1:i};-y_{i+1}))$ , is identical to the optima of the advantage-weighted $R L$ objective: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{\\pi}\\ \\mathbb{E}_{x\\sim p_{\\mathrm{syn}}(x),y\\sim\\pi_{\\mathrm{sft}}(\\cdot|x)}\\left[\\sum_{i=1}^{L}\\log\\pi(y_{i}|x,y_{0:i-1})\\cdot\\exp\\left(A_{\\tilde{\\pi}}(x,y_{0:i-1},y_{i})/\\beta\\right)\\right].\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Proof. To prove this statement, we make the following observation: DPO [41] is equivalent to optimizing a KL-divergence penalized expected reward objective in an induced Bradly-Terry model of preferences defined by the reward function. That is, for any reward function $r(x,y)$ over contexts $x\\sim\\mu$ and responses $\\textit{\\textbf{y}}$ , the optimal solution to the following RL objective: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\operatorname*{max}_{\\pi}~\\mathbb{E}_{\\boldsymbol{x}\\sim\\mu,\\boldsymbol{y}\\sim\\pi(\\cdot|\\boldsymbol{x})}\\left[r(\\boldsymbol{x},\\boldsymbol{y})\\right]-\\beta D_{\\mathrm{KL}}(\\pi(\\cdot|\\boldsymbol{x})||\\pi_{\\mathrm{sft}}(\\cdot|\\boldsymbol{x})),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "is given by the following advantage-weighted optimal policy, $\\pi^{*}(\\cdot|\\cdot)$ : ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\forall x,y,\\ \\pi^{*}(y|x)\\propto\\pi_{\\mathrm{sft}}(y|x)\\cdot\\exp\\left(\\frac{r(x,y)}{\\beta}\\right),\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "and one can learn this optimal policy by running DPO on preference tuples $(x,y_{1},y_{2})$ sampled by the Bradly-Terry model [6] induced by the reward function $r$ : ", "page_idx": 17}, {"type": "equation", "text": "$$\np\\left(\\pmb{y}_{1}\\geqslant\\pmb{y}_{2}|\\pmb{x}\\right)=\\frac{\\exp\\!\\left(r\\big(\\pmb{x},\\pmb{y}_{1}\\big)\\right)}{\\exp\\!\\left(r\\big(\\pmb{x},\\pmb{y}_{1}\\big)\\right)+\\exp\\!\\left(r\\big(\\pmb{x},\\pmb{y}_{2}\\big)\\right)}.\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Given this background information, we know that the optimal advantage-weighted RL policy optimizing Equation 5 is given by: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\forall x,y_{0:i},\\,\\,\\,\\pi(y_{i}|x,y_{0:i-1})\\propto\\pi_{\\mathrm{sft}}(y_{i}|x,y_{0:i-1})\\cdot\\exp\\left(\\frac{A_{\\tilde{\\pi}}(x,y_{0:i-1},y_{i})}{\\beta}\\right).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Combining Equation 9 with the equivalence between Equation 7 and the Bradly-Terry model (Equation 8), we obtain that, if preference pairs $(\\pmb{x},[\\pmb{y}_{1:i},\\mp\\pmb{y}_{i+1}],[\\pmb{y}_{1:i},-\\pmb{y}_{i+1}])$ were sampled from the SFT policy: $+\\pmb{y}_{i+1}\\;\\sim\\;\\pi_{\\mathrm{sft}}(\\cdot|\\pmb{x},\\pmb{y}_{0:i})$ and $-\\pmb{y}_{i+1}\\;\\sim\\;\\pi_{\\mathrm{sft}}(\\cdot|\\pmb{x},\\pmb{y}_{0:i})$ , and labeled according to Equation 8 applied on advantage estimates, then we obtain the desired equivalence result. \u53e3 ", "page_idx": 17}, {"type": "text", "text": "F Theory: Why Does Negative Data Improve Generalization? ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "We saw in Section 6.3 that collecting negative data from an appropriate SFT policy $\\pi_{\\mathrm{sft}}$ and an appropriate $K$ , and training on this data improves generalization performance of the resulting model. In this section, building on the equivalence to advantage-weighted RL (Theorem 6.1), we attempt to formalize this observation into a performance guarantee. In particular, we show below that training on negative data implies that we are able to improve over the SFT policy, especially via the detection of critical steps, that attain high advantages, $A_{\\tilde{\\pi}}(x,y_{0:i-1},y_{i})$ , that are otherwise not prioritized by training on positive data alone. Our theoretical result extends guarantees from the RL literature [27] comparing RL with imitation learning to show that indeed the use of RL (and hence negative data) improves over imitation alone. ", "page_idx": 18}, {"type": "text", "text": "Notation and setup. Define the policy obtained after advantage-weighted RL training as \u03c0neg. Concretely, $\\pi_{\\mathrm{neg}}(y|x)$ is given as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\forall x,y_{0:j+1},\\pi_{\\mathrm{neg}}(y_{j+1}|x,y_{0:j})=\\frac{1}{\\widehat{Z}(x,y_{0:j})}\\pi_{\\mathrm{sft}}(y_{j+1}|x,y_{0:j})\\cdot\\exp\\left(\\frac{\\hat{A}_{\\widetilde{\\pi}}(x,y_{0:j},y_{j+1})}{\\beta}\\right),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where the normalization factoris given by $\\mathbb{Z}(x,y_{0:j})$ for each of the per-step policy distributions. This normalization factor is a critical factor that will drive the core of the theoretical result. We also note that the normalization factor in Equation 10 is derived from empirical advantage estimates and not from the expected estimates for the advantage value. Following Agarwal et al. [2], Kumar et al. [27], we operate in a tabular setting with a discrete (but combinatorially-large and variable-length) action space of responses, and our proof follows Theorem 4.4 in Kumar et al. [27]. ", "page_idx": 18}, {"type": "text", "text": "Theorem F.1 (Utility of negative data over positive data.). Let $\\pi_{n e g}$ denote the policy obtained after advantage-weighted RL (Equation 10) under an empirical distribution $\\hat{\\mu}$ over prompts $\\textbf{\\em x}$ . Then the difference between the expected reward (i.e., task success rate), $J(\\cdot)$ , attained by $\\pi_{n e g}$ and $\\pi_{\\mathrm{sft}}$ is lower-bounded as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{J(\\pi_{n e g})-J(\\pi_{\\mathrm{sft}})\\gtrsim}&{\\beta\\cdot\\mathbb{E}_{x_{i}\\sim\\hat{\\mu},y_{i,0;L}\\sim\\pi_{n e g}(\\cdot|x_{i})}\\Biggl[\\sum_{j=1}^{L}\\log\\mathbb{Z}(x_{i},y_{i,0;j})\\Biggr]}\\\\ &{\\qquad\\quad-\\;(o\\nu e r e s t i m a t i o n\\;i n\\;\\hat{A}_{\\pi}(x,y_{0;i-1},y_{i}))+\\frac{c_{0}}{\\sqrt{|{\\mathcal D}_{\\mathrm{syn}}|}},}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\mathbb{Z}(\\clubsuit,\\circ)$ denotes the sum over exponentiated differences of the advantage and log likelihood values under $\\pi_{\\mathrm{sft}}$ for all possible candidate steps given a problem $\\clubsuit$ and a partial solution \u25e6. That is, ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathbb{Z}(\\pmb{\\spadesuit},\\circ):=\\sum_{\\pmb{\\ast}\\in\\mathrm{~}s t e p\\mathrm{~}c a n d i d a t e s}\\exp\\left(\\frac{A_{\\tilde{\\pi}}(\\pmb{\\ast},\\circ;\\pmb{\\ast})}{\\beta}+\\log\\pi_{\\mathrm{sft}}(\\pmb{\\ast}|\\pmb{\\ast},\\circ)\\right),\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "$c_{0}$ is a constant depending upon the Rademacher complexity of the space of policies $\\pi_{n e g}$ close to the SFT policy under the KL-divergence, $|\\mathcal{D}_{\\mathrm{syn}}|$ denotes the size of synthetic training prompts. ", "page_idx": 18}, {"type": "text", "text": "Proof. To begin the proof, we recall that we are operating in a discrete action space of steps $\\pmb{y}_{i}$ , although this space is exponentially large. Since we operate in discrete action spaces, we invoke Lemma 5 from Agarwal et al. [2] for analyzing softmax policy gradient methods (this Lemma was extended by Lemma B.11 from Kumar et al. [27] for comparing BC vs offilne RL). Denote by $\\hat{J}(\\pi)$ , the reward attained by policy $\\pi$ in expectation over the empirical distribution $\\textstyle{\\widehat{\\mu}}$ : ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\hat{J}(\\pi_{\\mathrm{neg}})-\\hat{J}(\\pi_{\\mathrm{sft}}):=\\mathbb{E}_{x\\sim\\hat{\\mu}}\\left[\\widehat{V}^{\\pi_{\\mathrm{neg}}}(x)\\right]-\\mathbb{E}_{x\\sim\\hat{\\mu}}\\left[\\widehat{V}^{\\pi_{\\mathrm{sft}}}(x)\\right]\\geq\\beta\\mathbb{E}_{x\\sim\\hat{\\mu}}\\left[\\log\\widehat{\\mathbb{Z}}(x)\\right].\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "We utilize the performance difference lemma [25] on the MDP induced by the set of initial problems in the training distribution $\\textstyle{\\widehat{\\mu}}$ , and the model induced deterministic dynamics distribution: ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\hat{J}(\\pi_{n g})-\\hat{J}(\\pi_{g_{i}\\phi_{i}})=\\displaystyle\\sum_{j=1}^{L}\\mathbb{E}_{\\pi_{x}\\sim\\hat{\\mu}_{g_{i},y_{i},\\sigma_{i}-1}}\\pi_{n g_{j},\\sigma_{i}}\\mathrm{1}\\omega\\left[\\sum_{p_{j}}\\pi_{n g_{i}}(y_{j}|x,y_{0(j-1)})\\hat{A}_{\\bar{x}}(x,y_{0(j-1)},y_{i})\\right]}\\\\ &{\\qquad=\\displaystyle\\sum_{j=1}^{L}\\mathbb{E}_{\\pi_{x}\\sim\\hat{\\mu}_{g_{i},y_{0(j-1)}}\\pi_{n g_{i}}(\\cdot|x)}\\left[\\sum_{p_{j}}\\pi_{n g_{i}}(y_{j}|x,y_{0(j-1)})\\log\\frac{\\pi_{n g_{i}}(y_{j}|x,y_{0(j-1)})\\cdot\\hat{Z}(x,y_{0(j)})}{\\pi_{n g_{i}}(y_{j}|x,y_{0(j-1)})}\\right]}\\\\ &{\\qquad=\\beta\\displaystyle\\sum_{j=1}^{L}\\mathbb{E}_{\\pi_{x}\\sim\\hat{\\mu}_{g_{i},y_{0(j-1)}}\\pi_{n g_{i}}(\\cdot|x)}\\left[D_{\\mathbb{K}\\mathbf{L}}\\left(\\pi_{n g_{i}}(\\cdot|x,y_{0(j-1)},\\pi_{n g_{i}}(\\cdot|x,y_{0(j-1)})\\right)+\\log\\hat{Z}(x,y_{0(j-1)},\\pi_{n g_{i}}(\\cdot|x,y_{0(j-1)}))\\right]}\\\\ &{\\qquad\\geq\\beta\\displaystyle\\sum_{j=1}^{L}\\mathbb{E}_{\\pi_{x}\\sim\\hat{\\mu}_{g_{i},y_{0(j-1)}}\\pi_{n g_{i}}(\\cdot|x)}\\left[\\log\\hat{Z}(x,y_{0(j)})\\right]}\\\\ &{\\qquad=\\beta\\cdot\\mathbb{E}_{\\pi_{x}\\sim\\hat{\\mu}_{g_{i},y_{0(j-1)}}\\pi_{n g_{i}}(\\cdot|x)}\\left[\\sum_{p_{j}}\\log Z(x,y_{0(j-1)})\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Now, we can prove the desired result by accounting for the gap in the success rate between the actual distribution over $x\\sim\\mu$ and the empirical distribution induced by problems in the dataset $\\textstyle{\\widehat{\\mu}}$ : ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{J(\\pi_{\\mathrm{neg}})-J(\\pi_{\\mathrm{sft}})\\geq\\underbrace{J(\\pi_{\\mathrm{neg}})-\\hat{J}(\\pi_{\\mathrm{neg}})}_{\\mathrm{(a)}}+\\underbrace{\\hat{J}(\\pi_{\\mathrm{neg}})-\\hat{J}(\\pi_{\\mathrm{sft}})}_{\\mathrm{(b)}}-\\underbrace{J(\\pi_{\\mathrm{sft}})-\\hat{J}(\\pi_{\\mathrm{sft}})}_{\\mathrm{(c)}}}&{}\\\\ {\\geq\\beta\\cdot\\mathbb{E}_{\\boldsymbol{x}\\sim\\hat{\\mu},\\boldsymbol{y}_{i,0;L}\\sim\\pi_{\\mathrm{neg}}(\\cdot|\\boldsymbol{x})}\\left[\\displaystyle\\sum_{j=1}^{L}\\log\\hat{\\mathbb{Z}}(\\boldsymbol{x},\\boldsymbol{y}_{0;j})\\right]-\\frac{c_{0}}{\\sqrt{|\\mathcal{D}_{\\mathrm{syn}}|}}}&{}\\\\ {\\geq\\beta\\cdot\\mathbb{E}_{\\boldsymbol{x}\\sim\\hat{\\mu},\\boldsymbol{y}_{i,0;L}\\sim\\pi_{\\mathrm{neg}}(\\cdot|\\boldsymbol{x})}\\left[\\displaystyle\\sum_{j=1}^{L}\\log\\mathbb{Z}(\\boldsymbol{x},\\boldsymbol{y}_{0;j})\\right]-\\frac{c_{0}}{\\sqrt{|\\mathcal{D}_{\\mathrm{syn}}|}}+\\Delta,}&{}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "where $c_{0}$ is a constant that depends on the Rademacher complexity of the function class of policie $\\pi_{\\mathrm{neg}}$ (coming from a uniform bound that we invokve to bound term $(a)$ , since $\\pi_{\\mathrm{neg}}$ depends on the dataset samples), and this term arises since the empirical distribution over prompts is not the same as the true population. This concentration term decays as the size of the synthetic data (number of problems) are scaled up. The term $\\Delta$ denotes the overestimation error between the estimated advantages $\\hat{A}_{\\tilde{\\pi}}(x,y_{0:i-1},y_{i})$ and the true advantages $A_{\\tilde{\\pi}}(x,y_{0:i-1},y_{i})$ , in expectation under the distribution of the learned policy. The estimation error $\\Delta$ depends on $\\pi_{\\mathrm{sft}}$ and the value of $K$ used if the rollout policy $\\tilde{\\pi}$ corresponds to the $\\mathrm{BoK}(\\pi_{\\mathrm{sft}})$ policy. This proves the theorem. \u53e3 ", "page_idx": 19}, {"type": "text", "text": "Interpretation $\\pmb{\\&}$ perspectives. Also note that the improvement in performance between $\\pi_{\\mathrm{neg}}$ and $\\pi_{\\mathrm{sft}}$ depends on the advantage estimate: if the advantage estimates are high, then this term is large, meaning that the more the fraction of high-advantage critical states, the higher the improvement. In addition, the bound also says that if the over-estimation $\\Delta$ in the advantage estimate is large, the performance improvement is small. This is perhaps expected: consider the scenario when the $\\mathrm{BoK}(\\pi_{\\mathrm{sft}})$ policy is used to collect data, for a large $K$ . In this scenario, the divergence between the empirical advantage estimate $\\hat{A}_{\\tilde{\\pi}}$ and the expected estimate $A_{\\tilde{\\pi}}$ is likely large. In the worst case, the estimate $\\hat{A}_{\\tilde{\\pi}}$ can arbitrarily overestimate $A_{\\tilde{\\pi}}$ , as it would take on a high value even if there is just one sequence among the $K$ rollouts that successfully solves the problem. For example, a spurious step may be labeled incorrectly as critical in this case and training on negative data may not improve (consistent with running per-step DPO on an over-trained SFT checkpoint in Figure 8). On the other hand, if advantages are more accurate, training on negative data should improve performance. ", "page_idx": 19}, {"type": "text", "text": "G Additional Related Work ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Failure modes for supervised finetuning (SFT). First, since SFT induces an open-loop [62] nexttoken prediction loss, prediction errors on even a single token can snowball during inference, leading to poor performance on the prompts appearing in the dataitself [24, 45]. Second, even when an LLM has perfectly cloned the SFT data, it is prone to memorize \u201chard to learn\u201d tokens [56], especially in planning and lookahead tasks [35, 36], which is critical for math reasoning. This leads to poor generalization [4, 15] and hallucination on new novel, test-tim prompts [26]. In this work, we study how synthetic data methods can address these failures via: (i) maximizing likelihood on positive data generated from both the SFT policy and a stronger teacher that enjoys improved coverage over new states, and (ii) preference optimization using the negative data generated from the SFT policy. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "H Synthetic Data Generation ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "Prompt used f   \nPlease act as a professional math teacher. Your goal is to create high quality math problems to help students learn math. You will be given a math question. Please create a new question based on the Given Question and following instructions.   \nTo achieve the goal, you have one job.   \n# Please generate a similar but new question according to the Given Question.   \nYou have four principles to do this. # Ensure the new question only asks for one thing, be reasonable, be based on the Given Question, and can be answered with only a number(float or integer). For example, DO NOT ask, \u2018what is the amount of A, B and C?\u2019.   \n# Ensure the new question is in line with common sense of life. For example, the amount someone has or pays must be a positive number, and the number of people must be an integer. # Ensure your student can answer the new question without the given question. If you want to use some numbers, conditions or background in the given question, please restate them to ensure no information is omitted in your new question.   \n# You only need to create the new question. Please DO NOT solve it.   \nGiven Question: <insert question from original dataset here>   \nYour output should be in the following format:   \nCREATED QUESTION: <your created question> ", "page_idx": 20}, {"type": "text", "text": "For GSM8K, we replace the phrase \u201cYour goal is to create high quality math problems to help students learn math.\u201d with \u201cYour goal is to create high quality math word problems to help students learn math.\u201d, as we found this to produce problems that were closer to GSM-style problems. ", "page_idx": 20}, {"type": "text", "text": "To generate the synthetic data, we used OpenAI credits worth approximately 3000 US dollars. ", "page_idx": 20}, {"type": "text", "text": "I Details on Star Graph Problem ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "The star graph problem we study is borrowed from Bachmann and Nagarajan [4], where given a graph in the shape of a star and a query (center/end node pair), the model is asked to output the full path between the start/end nodes. ", "page_idx": 20}, {"type": "text", "text": "Goal. Bachmann and Nagarajan [4] show that $\\pi_{\\mathrm{sft}}$ minimizes SFT loss by memorizing the \u201chard-topredict\u201d node adjacent to the center, and copying the rest of the path from the input graph. This task is highlights the failure of SFT at planning problems (akin to math reasoning). Thus, we use this as a case study to understand: ", "page_idx": 20}, {"type": "text", "text": "\u2022 when accurate advantage estimation is possible with few negative samples from the $\\pi_{\\mathrm{sft}}$ model. \u2022 whether there are generalization benefits of advantage-weighted RL when advantage estimates are accurate \u2022 when advantage-weighted RL can unlearn the memorized feature that causes $\\pi_{\\mathrm{sft}}$ to fail. ", "page_idx": 20}, {"type": "text", "text": "SFT dataset. The data we use for supervised fine-tuning consists of 30000 of random star graphs (see examples below) where each graph has a centre node with out degree 2. Hence, there are two paths that originate from the centre node. Each path from the center to one of the end nodes is of length 4. Each node on the path is denoted with a randomly sampled number from 0 to 20. For example, in the sample \u201c8,3|3,10|14,13|10,1|17,14|8,17/8,13=8,17,14,13\u201d. The graph is given by the adjacency list \u201c8,3|3,10|14,13|10,1|17,14|8,17/8,13\u201d, the query is denoted by $^{\\bullet\\bullet}8,13^{\\circ}$ , and the correct path is given by $\\cdot8{,}17{,}14{,}13^{\\circ}$ . ", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "Test-time inference from the model. At test time, the input to the LLM is only thw graph and the query: \u201c8,3|3,10|14,13|10,1|17,14|8,17/8,13=\u201d and the model is expected to generate the full path from start node 8 to end node 13. When evaluating the test performance of an LLM, we calculate $0/1$ accuracy averaged over 1000 test star graphs (that are different from train star graphs). The accuracy on a sample is 1 when the LLM accurately predicts all nodes in the graph. ", "page_idx": 21}, {"type": "text", "text": "Failure models of the SFT model, $\\pi_{\\mathrm{sft}}$ . A model with perfect accuracy (0 error) would be the one that has accurately learned the correct feature of backtracking the path from the end node to the start node, and then producing it in reverse. This computation is precisely what makes the adjacent token \u201chard-to-fit\u201d. On the other hand, if the LLM minimizes next-token prediction loss during SFT by instead memorizing the hard-to-fti adjacent token by overftiting on the random input graph instance, at test time the accuracy would be zero. An intermediate solution that SFT model instead learns is to output a path that is adjacent to the node. At training time, it only needs to memorize which of the two possible path to predict. Note that even this solution does not require the model to backtrack, and is thus easier to quickly learn with a few samples. This would quickly minimize the loss on all but the adjacent node, which the model memorizes as training progresses. On the test set, this model would then have $50\\%$ test accuracy. Note, that as we increase the size of the graph or the node vocabulary size it becomes easier for the model to overfit on the hard to predict adjacent token given random combinations of the input graph. Thus, we choose the vocabulary size to be 20, which is higher than what is needed to represent any input graph of this size. ", "page_idx": 21}, {"type": "text", "text": "Below we provide examples from degree two, path length 4, node 20 problem, where ", "page_idx": 21}, {"type": "table", "img_path": "9m87e9Keq1/tmp/46737d09c7adb33d520369dd60d0535e7e64c8f1d5b09e2763943af379c03be6.jpg", "table_caption": [], "table_footnote": [], "page_idx": 21}, {"type": "text", "text": "SFT Training details. We finetune a pretrained GPT-2 model with 125 million parameters. We train with a batch size of 128, Adam without any weight decay, and a constant learning rate of $1e-5$ . ", "page_idx": 21}, {"type": "text", "text": "Advantage estimation and per-step DPO training equivalent to advantage-weighted RL. For a sample from $\\pi_{\\mathrm{sft}}$ , we estimate the advantage of each step by sampling 5 rollouts conditioned on the subsequence uptill the step. We then pair subsequences with shared prefix, $\\pmb{y}_{1:i}$ differing in the last step $+\\pmb{y}_{i+1}$ vs. $-{\\pmb y}_{i+1}$ , where the former is the one with the highest estimated advantage and the latter is the one with the lowest estimated advantage. Note that this preference pair construction, closely approximates the preference pair distribution in Theorem 6.1, which would imply that the DPO objective being optimized closely approximates advantage weighred RL in Equation 4. ", "page_idx": 21}, {"type": "text", "text": "Given these pairs for a batch of star graph problems in SFT data, we update the model with a single gradient step on the DPO objective in Equation 1. In the next iteration, advantage is estimated and pairs are constructed on a fresh batch of star graphs. We set $\\beta=0.1$ in the DPO objective and use the same batch size (one preference pair per star graph). Starting from an SFT checkpoint we train in the above manner for at least 200 iterations. The SFT model is trained for over 600 iterations. ", "page_idx": 21}, {"type": "text", "text": "J Implementation Details ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Datasets and pretrained LLMs. We run all our experiments on GSM8K and MATH datasets. Each dataset has about $7.5\\mathrm{k}$ training examples. The GSM8K has about $1.3\\mathbf{k}$ and MATH has $5\\mathrm{k}$ test examples. We conduct experiments with DeepSeek-Math-7B pretrained LLM and LLama2-7B, both of which have pretrained weights publicly available on Huggingface. ", "page_idx": 21}, {"type": "text", "text": "Details for SFT/RFT training. For our positive data scaling results, the SFT model is trained for 5 epochs with a learning rate of $1e-5$ , and a batch size of 64 for all sizes of $\\mathcal{D}_{\\mathrm{syn}}$ . We use a holdout validation set to choose the checkpoint and report the performance of the best performing checkpoint across the five epochs. To generate RFT data we only train the SFT model for 2 epochs (under-trained checkpoint). For each question we sample $M=100$ times, with a temperature of 0.7 and following ", "page_idx": 21}, {"type": "text", "text": "Yuan et al. [67] we retain at most 4 most diverse (based on edit distance) and correct completions. This is for our results in Figure 2(a,b). For Figure 2(c), we sample more than 4 correct solutions and keep sampling responses until we have a dataset of size $10\\mathbf{k}$ , 20k, ..., 50k, when questions are given by the $\\mathcal{D}_{\\mathrm{syn}}$ of size $8\\mathbf{k}$ and $16\\mathrm{k}$ . For our experiment on the RFT dataset with purposely inserted spurious steps, as we describe in the main paper, we obtain spurious steps by computing which intermediate steps in a negative response lead to most incorrect solutions and randomly insert this in between reasoning steps for a positive solution in RFT data. See examples below. ", "page_idx": 22}, {"type": "text", "text": "Details for per-step DPO training. Training data for DPO is generated in the procedure outlined in [23]. The value of $K$ is 5 for the $\\mathrm{BoK}(\\tau_{\\mathrm{sft}})$ policy used to estimate the advantage, and a single rollout from the best-of-K policy is used to estimate the advantage of each step in \u201crejected\u201d response, where the \u201cchosen\u201d and \u201crejected\u201d pairs for each question are generated from the RFT data, using the method in [38]. We train per-step DPO with $\\beta=0.3$ for all $\\mathcal{D}_{\\mathrm{syn}}$ from GSM8K, and $\\beta=0.1$ for all $\\mathcal{D}_{\\mathrm{syn}}$ from MATH. We train for three epochs, with a learning rate of $1e-6$ and a batch size of 64 prompts. We use the rmsprop optimizer and a cosine learning rate decay with a warmpup ratio of 0.1. ", "page_idx": 22}, {"type": "text", "text": "Overall, to replicate our experiments, we need approximately 1000 hours of compute on H100 clusters with 8 GPUs. ", "page_idx": 22}, {"type": "text", "text": "RFT data with spurious steps highlighted ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Prompt: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Karen\u2019s work tote bag is twice the weight of her husband Kevin\u2019s briefcase when the briefcase is empty. When Kevin puts his laptop and work papers in his briefcase, it is twice the weight of Karen\u2019s tote. Kevin\u2019s work papers are a sixth of the weight of the contents of his full briefcase. If Karen\u2019s tote weighs 8 pounds, how many more pounds does Kevin\u2019s laptop weigh than Karen\u2019s tote? ", "page_idx": 22}, {"type": "text", "text": "Response: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "If Karen\u2019s tote weighs 8 pounds, and it is twice the weight of Kevin\u2019s empty briefcase, then Kevin\u2019s empty briefcase weighs $8/2={\\ll}8/2{=}4{\\gg}4$ pounds. In words, \u201cKaren\u2019s tote weighs 8 pounds\u201d is $\\mathrm{^{6}T=8\\mathrm{^{\\circ}}}$ , so thus Keven is 2 pounds. When Kevin puts his laptop and work papers in his briefcase, it is twice the weight of Karen\u2019s tote at 8 pounds, so the briefcase now weighs $8\\!+\\!4=\\!\\ll\\!8\\!+\\!4\\!=\\!12\\!\\gg\\!12$ pounds. Kevin\u2019s work papers are a sixth of the weight of the contents of his full briefcase, which weighs 12 pounds, so the work papers weigh $12/6=\\ll12/6{=}2{\\gg}2$ pounds. If Kevin\u2019s laptop and work papers weigh 12 pounds in total, and the work papers weigh 2 pounds, then the laptop weighs $12{\\cdot}2={\\ll}12{\\cdot}2{=}10{\\gg}10$ pounds. Thus, Kevin\u2019s laptop is $10{-8}={\\ll}10{-}8{=}2{\\gg}2$ pounds heavier than Karen\u2019s tote. The answer is 2. ", "page_idx": 22}, {"type": "text", "text": "RFT data with spurious steps highlighted ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Prompt: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "Carl has a jar full of marbles. He takes out 12 marbles to play a game with, but he accidentally drops them and 1/2 the marbles get lost. So Carl takes out 10 more marbles. While he is playing his game his mother comes home with another bag of marbles for him, which has 25 marbles in it. If Carl can\u2019t find his lost marbles, then how many marbles is he going to put in the jar after he plays his game, from both his original marbles and the new ones? ", "page_idx": 22}, {"type": "text", "text": "Response: ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "First find out how many marbles Carl loses: 12 marbles $\\ast{}~1/2=\\ast{}12^{\\ast}{}1/2{=}6\\gg6$ marbles Then add that number to the number of marbles Carl takes out of the jar to play his game to find out how many total marbles he takes out: 6 marbles $+\\,10$ marbles $={\\ll}6{+}10{=}16{\\gg}16$ marble. Now add that number to the number of marbles in the jar to find out how many marbles are left: 16 marbles $+~12$ marbles $={\\ll}16{+}12{=}28{\\gg}28$ marbles. Then add in the marbles Carl gets from his mother to find out how many marbles he has in total: 16 marbles $+\\,25$ marbles $=$ $\\ll16\\!+\\!25\\!=\\!41\\!\\times\\!41$ marbles. The answer is 41. ", "page_idx": 22}, {"type": "text", "text": "K Negative Data Identifies Spurious Steps with Advantage Estimates ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "In this section, we present several examples from the GSM8K and MATH synthetic datasets of model-generated (from $\\pi_{\\mathrm{sft}}$ ) positive data with spurious steps. Then, we show how computing advantage values accurately identify the spurious steps. We highlight the steps that were deemed to be low or high advantage based on the estimated advantage value. The darker the intensity of the color, the lower the advantage of that step. With this qualitative probe, we see that the steps that are darkest are indeed either incorrect or correct but involve a reasoning step that is irrelevant for solving the problem at hand. ", "page_idx": 22}, {"type": "text", "text": "", "page_idx": 23}, {"type": "text", "text": "Spurious step identified by negative data ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Ken created a care package to send to his brother, who was away at boarding school. Ken placed a box on a scale, and then he poured into the box enough jelly beans to bring the weight to 2 pounds. Then, he added enough brownies to cause the weight to triple. Next, he added another 2 pounds of jelly beans. And finally, he added enough gummy worms to double the weight once again. What was the final weight of the box of goodies, in pounds? ", "page_idx": 23}, {"type": "text", "text": "Positive response with identified spurious step: ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "When the weight was originally on the scale, the box weighed 0 pounds. After Ken added the jelly beans to the box, its weight was 2 pounds - 0 pounds $=\\ll2{-}0{=}2{\\gg}2$ pounds. Then Ken added the brownies to the box, which caused the box to weigh 2 pounds $*3=*2^{*}3{=}6*6$ pounds. The next step was to add 2 pounds of jelly beans, which caused the box to weigh 6 pounds $+\\,2$ pounds $={\\ll}6{+}2{=}8{\\gg}8$ pounds. First, we need to figure out what the weight of the box was when Ken put the jelly beans in it. 2 pounds of jelly beans was enough to triple the weight, so the box was at 2 pounds $7\\,3={\\ll}2/3{=}.6666666666666667{\\gg}.666666666666667$ pounds. Finally, Ken added the gummy worms, causing the box to weigh 8 pounds $\\;\\mp\\;2=$ $\\overline{{{\\ll}8^{\\ast}{\\rrangle}2{=}16{\\gg}16}}$ pounds. The answer is 16 ", "page_idx": 23}, {"type": "text", "text": "Spurious step identified by negative data ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: Betty is saving money for a new wallet which costs $\\mathbb{S}100$ . Betty has only half of the money she needs. Her parents decided to give her $\\mathbb{S}15$ for that purpose, and her grandparents twice as much as her parents. How much more money does Betty need to buy the wallet? ", "page_idx": 23}, {"type": "text", "text": "Positive response with identified spurious step: ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Betty\u2019s parents gave her 15, so her grandparents gave her $2*15=*15^{*}2{=}30{\\gg}30$ . In total, Betty received $30+15=\\ll30+15=45\\times45$ . The total amount of money Betty needs is $100\\,^{\\ast}2$ $=\\times100^{*}2{=}200{\\gg}200.$ Betty needs $100\\mid2\\equiv{\\ll}100/2{=}50{\\gg}50$ in total. Betty still needs to save $50-45=\\ll50-45=5\\times5$ . The answer is 5 ", "page_idx": 23}, {"type": "text", "text": "Spurious step identified by negative data ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Question: To make pizza, together with other ingredients, Kimber needs 10 cups of water, 16 cups of flour, and 1/2 times as many teaspoons of salt as the number of cups of flour. Calculate the combined total number of cups of water, flour, and teaspoons of salt that she needs to make the pizza. ", "page_idx": 23}, {"type": "text", "text": "Positive response with identified spurious step: ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Since 1 cup is equal to 16 teaspoons, then Kimber needs $128/16=\\ll128/16{=}8\\gg8$ cups of salt. So in total, she needs $10\\substack{+16\\,+8}=\\ll10\\substack{+16\\substack{+8=34\\,\\gg\\,34}}$ cups of water, flour, and salt. In cups, the amount of salt is 128/6 = \u00ab128/6=21.33\u00bb21.33 cups The answer is 34 ", "page_idx": 23}, {"type": "text", "text": "Spurious step identified by negative data ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: Eight friends compete in a pie eating contest. The chart displays the number of pies each person consumed. Emily ate the most pies, and Mike ate the least. How many more pies did Emily eat compared to Mike? ", "page_idx": 24}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\mathrm{(asypl~indetatirpent~threalith~threalizeontsize~10tept);}}\\\\ &{\\mathrm{~supaird~ind~threalize~}}\\\\ &{\\left\\{\\mathrm{vabarabil~parakis~}=\\mathrm{neq~paird~|0,~indent~(\\varphi^{\\top}a n c~i n d~i n~+\\varphi^{\\top}a n~;\\varphi^{\\top}~+~i n~+~i n~\\varphi~;~+~i n~)~}\\right\\}}\\\\ &{\\mathrm{(vabarabili~of~\\varphi^{\\top}a n)~i n d~c o u p l~i n d~c o u p l e n t~o f~\\varphi^{\\top}a n c~i n d~|0~}}\\\\ &{\\mathrm{~subard~ind~(\\varphi^{\\top}a,\\varphi^{\\top}~-~(2,\\varphi)~;~i n d u c~o u p l e n t~o f~\\varphi^a n c~i n d~\\varphi^{\\top}~-~i n\\varphi~i n~\\varphi~)~};}\\\\ &{\\mathrm{(asuplind~}(\\varphi^{\\top}a,0)-(4,\\varphi)-(4,\\varphi)-(2,\\varphi)~\\mathrm{-~opt~}\\varphi^{\\top}a n~;\\varphi^{\\top}~}\\\\ &{\\mathrm{~wfill~}((5,0)-(5,3)-(6,3)-(6,\\varphi)-\\mathrm{(cycle~gep)~};}\\\\ &{\\mathrm{~wfill~}((6,0)-(6,3)-(6,0)-(7)\\varphi+~6\\varphi^{\\top}~);}\\\\ &{\\mathrm{(winbalent~the~parakis~\\varphi^{\\top}~)~i n~d u c~b y~|0~}}\\\\ &{\\mathrm{~widubel~(\\varphi^{\\top}a,\\varphi^{\\top}a n c~i n~|0,~b i r)~;}\\;\\mathrm{(und~\\varphi^{\\top}a^{2},\\varphi a x i s~[2]~,u)~};}\\\\ &{\\mathrm{~widubel~(\\varphi^{\\top}a,\\varphi^{\\top}a x i s~[5]~,\\varphi)~\\langle0~\\rangle~i n d u e l~(\\varphi^{\\top}a,\\varphi a n c~i n~\\varphi^{\\top}~)~};}\\\\ &{\\mathrm{~widubel~(\\varphi^{\\top}n,\\varphi^{\\top}a x i s~[7]~,\\forall~\\varphi~i n~d u e l~(\\varphi^{\\top}a^{3},\\varphi a x i s~[8]~,\\varphi)~}}\\\\ &{\\mathrm{~widubel~(\\varphi^{\\top}r~i n d s/\\varphi^{\\top}a r t i c~i n\\varphi~i s~\\varphi(8,\\varphi),\\varphi~a n c~\\varphi^{ \n$$", "text_format": "latex", "page_idx": 24}, {"type": "text", "text": "Positive response with identified spurious step: ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "To solve this problem, we need to identify the number of pies Emily and Mike consumed, and then find the difference between their consumption. From the chart provided: - Emily: Consumed 8 pies. - Mike: Consumed 1 pie. To determine how many more pies Emily ate compared to Mike, we first identify how many pies each person ate. - Emily ate 5 pies. Mike ate 1 pie. Now, calculating the difference between Emily\u2019s and Mike\u2019s consumption: Difference $=$ Emily\u2019s consumption - Mike\u2019s consumption $=8-1=7.1$ Therefore, Emily ate 7 more pies than Mike. The answer is $\\mathbb{Z}$ ", "page_idx": 24}, {"type": "text", "text": "Spurious step identified by negative data ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Question: When the base-16 number $1A B3_{16}$ is written in base 2, how many base-2 digits (bits) does it have? ", "page_idx": 24}, {"type": "text", "text": "Positive response with identified spurious step: To solve this problem, we first need to convert the base-16 number 1AB3_{16} to base-2. Step 1: Convert each digit of the number from base-16 to base-2. The number 1AB3_{16} consists of the digits 1, A, B, and 3. Step 2: Convert each digit individually to base-2 representation. - ${\\bar{1}}_{-}\\{16\\}\\,=\\,0001_{-}2\\,+\\,\\mathrm{A}_{-}\\{16\\}\\,=\\,1010_{-}2\\,\\div\\,{\\bar{1}}\\,{\\bar{1}}6\\}\\,=\\,1011_{-}2\\,-\\,3_{-}\\{16\\}$ $=0011\\_2$ Step 3: Combine the base-2 representations of each digit. Concatenating the individual base-2 representations, we get: $1{\\mathrm{AB}}3_{-}\\{16\\}\\,=\\,0001101010110011_{-}2$ Step 4: Count the total number of digits in the base-2 representation. The base-2 representation of 1AB3_{16} is: 0001101010110011_2 The base-16 number (1AB3_{16} ) can be written in base 10 (decimal) as: [ 1 times 163\u02c6 + A times 162\u02c6 + B times 16 + 3 ] where (A ) and (B ) are decimal digits. This sequence of digits has a total of 16 digits. The answer is boxed{16} ", "page_idx": 24}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: Claims from the introduction and abstract are reflected in the paper. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 25}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Justification: Appendix A. ", "page_idx": 25}, {"type": "text", "text": "Guidelines: ", "page_idx": 25}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 25}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 25}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 25}, {"type": "text", "text": "Justification: Theorem statements are included in the main paper and detailed proofs are included in Appendix F and Appendix E. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 26}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: Experimental details are included in the main paper and in Appendix H and Appendix J ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 26}, {"type": "text", "text": "5. Open access to data and code ", "page_idx": 26}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 27}, {"type": "text", "text": "Answer: [No] ", "page_idx": 27}, {"type": "text", "text": "Justification: While the code and dataset generated are not yet ready for anonymous open sourcing, we plan to open-source the code with appropriate licensing and the generated synthetic data with the updated version of the paper. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 27}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Justification: Experimental details are included in the main paper and in Appendix H and Appendix J ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. \u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 27}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 27}, {"type": "text", "text": "Answer: [No] ", "page_idx": 27}, {"type": "text", "text": "Justification: For experiments that were bottlenecked by computational resources, we were unable to run multiple experiments. However, since we perform experiments on wellestablished benchmarks, we could make comparisons with existing work to understand the significance of our performance. And hence, whenever needed we make sure to discuss observed performances and significance with existing work. Moreover, since we run experiments at different scales and dataset sizes, the trends observed implicitly normalize for error bars. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 28}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: We have added computational resources needed in the Appendix. Overall, to replicate our experiments, we need approximately 1000 hours of compute on H100 clusters with 8 GPUs. To generate our synthetic data, we need approximately 3000 USD worth of credits with the current pricing of GPT-4 model. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 28}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: Our work is to study reasoning in large language models and it doesn\u2019t violate any code of Ethics. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 28}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Justification: We discuss limitations of our work in Appendix A. Since our work is about empirical and theoretical study of reasoning in LLMs, we do not believe that there are any direct negative implications. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 29}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Justification: Our work is not focused towards releasing novel pretrained language models, image generators or scraped datasets. For the synthetic dataset obtained for reasoning tasks by prompting large models, we believe there are no risks of misuse. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 29}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: We make sure to cite relevant and related work. Our code base builds on top of open-source code repositories that allow free access for research purposes. When we open-source our code with the updated version, we will make sure that all the credits are appropriately attributed. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 30}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: We do not release any new assets. For the dataset generated in our work, we include prompts mentioned in Appendix H. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 30}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: We do not do any crowdsourcing experiments. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 30}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 30}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: We do not do any experiments with human subjects. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 31}]