[{"type": "text", "text": "Retentive Network ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Anonymous Author(s)   \nAffiliation   \nAddress   \nemail ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "1 In this work, we propose Retentive Network (RETNET) as a foundation architecture   \n2 for large language models, simultaneously achieving training parallelism, low-cost   \n3 inference, and good performance. We theoretically derive the connection between   \n4 recurrence and attention. Then we propose the retention mechanism for sequence   \n5 modeling, which supports three computation paradigms, i.e., parallel, recurrent,   \n6 and chunkwise recurrent. Specifically, the parallel representation allows for training   \n7 parallelism. The recurrent representation enables low-cost $O(1)$ inference, which   \n8 improves decoding throughput, latency, and GPU memory without sacrificing   \n9 performance. The chunkwise recurrent representation facilitates efficient long  \n10 sequence modeling with linear complexity, where each chunk is encoded parallelly   \n11 while recurrently summarizing the chunks. Experimental results on language   \n12 modeling show that RETNET achieves favorable scaling results, parallel training,   \n13 low-cost deployment, and efficient inference. ", "page_idx": 0}, {"type": "text", "text": "14 1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "15 Transformer [51] has become the de facto architecture for large language models, which was initially   \n16 proposed to overcome the sequential training issue of recurrent models [25]. However, training   \n17 parallelism of Transformers is at the cost of inefficient inference, because of the $O(N)$ complexity per   \n18 step and memory-bound key-value cache [42], which renders Transformers unfriendly to deployment.   \n19 The growing sequence length increases GPU memory consumption as well as latency and reduces   \n20 inference speed. Numerous efforts have continued to develop the next-generation architecture, aiming   \n21 at retaining training parallelism and competitive performance as Transformers while having efficient   \n22 $O(1)$ inference. It is challenging to achieve the above goals simultaneously.   \n23 There have been three main strands of research. First, linearized attention [27, 37] approximates   \n24 standard attention scores $\\exp(\\pmb q\\cdot\\pmb k)$ with kernels $\\phi(\\pmb q)\\cdot\\phi(\\pmb k)$ , so that autoregressive inference can   \n25 be rewritten in a recurrent form. However, the modeling capability and performance are worse than   \n26 Transformers, which hinders the method\u2019s popularity. The second strand returns to recurrent models   \n27 for efficient inference while sacrificing training parallelism. As a remedy, element-wise operators [36]   \n28 are used for acceleration, however, representation capacity and performance are harmed. The third   \n29 line explores replacing attention with other mechanisms, such as S4 [20], and its variants [11, 38].   \n30 None of the previous work can achieve strong performance and efficient inference at the same time   \n31 compared to Transformers.   \n32 In this work, we propose retentive networks (RetNet), achieving low-cost inference, efficient long  \n33 sequence modeling, Transformer-comparable performance, and parallel model training simultane  \n34 ously. Specifically, we introduce a multi-scale retention mechanism to substitute multi-head attention,   \n35 which has three computation paradigms, i.e., parallel, recurrent, and chunkwise recurrent repre  \n36 sentations. First, the parallel representation empowers training parallelism to utilize GPU devices   \n37 fully. Second, the recurrent representation enables efficient $O(1)$ inference in terms of memory   \n38 and computation. The deployment cost and latency can be significantly reduced. Moreover, the   \n39 implementation is greatly simplified without key-value cache tricks. Third, the chunkwise recurrent   \n40 representation can perform efficient long-sequence modeling. We parallelly encode each local block   \n41 for computation speed while recurrently encoding the global blocks to save GPU memory.   \n42 We compare RetNet with Transformer and its variants. Experimental results on language modeling   \n43 show that RetNet is consistently competitive in terms of both scaling curves and in-context learning.   \n44 Moreover, the inference cost of RetNet is length-invariant. For a 7B model and $8\\mathbf{k}$ sequence   \n45 length, RetNet decodes $8.4\\times$ faster and saves $70\\%$ of memory than Transformers with key-value   \n46 caches. During training, RetNet also achieves $3\\times$ acceleration than standard Transformer with   \n47 highly-optimized FlashAttention-2 [10]. Besides, RetNet\u2019s inference latency is insensitive to batch   \n48 size, allowing enormous throughput. The intriguing properties make RetNet a potential candidate to   \n49 replace Transformer for large language models. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "50 2 Retentive Network ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "51 Retentive network (RetNet) is stacked with $L$ identical blocks, which follows a similar layout (i.e.,   \n52 residual connection, and pre-LayerNorm) as in Transformer [51]. Each RetNet block contains two   \n53 modules: a multi-scale retention (MSR) module, and a feed-forward network (FFN) module. We   \n54 introduce the MSR module in the following sections. Given an input sequence $x\\,=\\,x_{1}\\cdot\\cdot\\cdot x_{|x|}$ ,   \n55 RetNet encodes the sequence in an autoregressive way. The input vectors $\\{\\pmb{x}_{i}\\}_{i=1}^{|x|}$ is first packed   \n56 into $X^{0}\\;=\\;[{\\pmb x}_{1},\\cdot\\cdot\\cdot\\cdot,{\\pmb x}_{|x|}]\\;\\in\\;\\mathbb{R}^{|x|\\times d_{\\mathrm{model}}}$ , where $d_{\\mathrm{model}}$ is hidden dimension. Then we compute   \n57 contextualized vector representations $X^{l}=\\mathrm{RetNet}_{l}(X^{l-1}),l\\in[1,L]$ . ", "page_idx": 1}, {"type": "text", "text": "58 2.1 Retention ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "59 In this section, we introduce the retention mechanism that has a dual form of recurrence and   \n60 parallelism. So we can train the models in a parallel way while recurrently conducting inference.   \n61 Consider a sequence modeling problem that maps $v(n)\\mapsto o(n)$ through states $s_{n}$ . Let $v_{n},o_{n}$ denote   \n62 $v(n),o(n)$ for simplicity. We formulate the mapping in a recurrent manner: ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle s_{n}=A s_{n-1}+K_{n}^{\\mathsf{T}}v_{n},\\quad A\\in\\mathbb{R}^{d\\times d},\\quad K_{n}\\in\\mathbb{R}^{1\\times d}}\\\\ &{o_{n}=Q_{n}s_{n}=\\displaystyle\\sum_{m=1}^{n}Q_{n}A^{n-m}K_{m}^{\\mathsf{T}}v_{m},\\quad Q_{n}\\in\\mathbb{R}^{1\\times d}}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "63 where we map $v_{n}$ to the state vector $s_{n}$ , and then implement a linear transform to encode sequence   \n64 information recurrently. Next, we make the projection $Q_{n},K_{n}$ content-aware: ", "page_idx": 1}, {"type": "equation", "text": "$$\nQ=X W_{Q},\\quad K=X W_{K}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "65 where $W_{Q},W_{K}\\in\\mathbb{R}^{d\\times d}$ are learnable matrices. ", "page_idx": 1}, {"type": "text", "text": "66 We diagonalize the matrix $A~=~\\Lambda(\\gamma e^{i\\theta})\\Lambda^{-1}$ , where $\\gamma,\\theta~\\in~\\mathbb{R}^{d}$ . Then we obtain $A^{n-m}\\;=\\;$   \n67 $\\Lambda(\\gamma e^{i\\theta})^{\\underline{{\\bullet}}_{n-m}}\\Lambda^{-1}$ . By absorbing $\\Lambda$ into $W_{Q}$ and $W_{K}$ , we can rewrite Equation (1) as: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle{o_{n}=\\sum_{m=1}^{n}Q_{n}(\\gamma e^{i\\theta})^{n-m}K_{m}^{\\sf T}v_{m}}}\\\\ {\\displaystyle{\\quad=\\sum_{m=1}^{n}(Q_{n}(\\gamma e^{i\\theta})^{n})(K_{m}(\\gamma e^{i\\theta})^{-m})^{\\sf T}v_{m}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "68 where $Q_{n}(\\gamma e^{i\\theta})^{n},K_{m}(\\gamma e^{i\\theta})^{-m}$ is known as xPos [45], i.e., a relative position embedding proposed   \n69 for Transformer. We further simplify $\\gamma$ as a scalar, Equation (3) becomes: ", "page_idx": 1}, {"type": "equation", "text": "$$\no_{n}=\\sum_{m=1}^{n}\\gamma^{n-m}(Q_{n}e^{i n\\theta})(K_{m}e^{i m\\theta})^{\\dagger}v_{m}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "70 where $\\dagger$ is the conjugate transpose. The formulation is easily parallelizable within training instances. ", "page_idx": 1}, {"type": "text", "text": "71 In summary, we start with recurrent modeling as shown in Equation (1), and then derive its parallel   \n72 formulation in Equation (4). We consider the original mapping $v(n)\\mapsto o(n)$ as vectors and obtain   \n73 the retention mechanism as follows. ", "page_idx": 1}, {"type": "image", "img_path": "sxZlp9ZoHD/tmp/f2d0e54f85f7e690c79a1b7ed992c7352b8c8a51ff3b9bd6f20d4a52c15568be.jpg", "img_caption": ["(a) Parallel representation. "], "img_footnote": [], "page_idx": 2}, {"type": "image", "img_path": "sxZlp9ZoHD/tmp/0734d0723ab8c1d73f98c64eadb43ea8a7e0706f520ce6d9712ceb49f8d9c4ff.jpg", "img_caption": ["(b) Recurrent representation. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "Figure 1: RetNet has three equivalent computation paradigms, i.e., parallel, recurrent, and chunkwise recurrent representations. Given the same input, three paradigms obtain the same output. \u201cGN\u201d is short for GroupNorm. ", "page_idx": 2}, {"type": "text", "text": "74 The Parallel Representation of Retention As shown in Figure 1a, the retention layer is defined as: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{c c}{{Q=(X W_{Q})\\odot\\Theta,}}&{{K=(X W_{K})\\odot\\overline{{{\\Theta}}},\\quad V=X W_{V}}}\\\\ {{}}&{{\\qquad\\Theta_{n}=e^{i n\\theta},\\;\\;\\;D_{n m}=\\left\\{\\!\\!\\begin{array}{l l}{{\\gamma^{n-m},}}&{{n\\geq m}}\\\\ {{0,}}&{{n<m}}\\end{array}\\!\\right.}}\\\\ {{}}&{{\\qquad\\mathrm{Retention}(X)=(Q K^{\\intercal}\\odot D)V}}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "75 where $D\\in\\mathbb{R}^{|x|\\times|x|}$ combines causal masking and exponential decay along relative distance as one   \n76 matrix, and $\\overline{{\\Theta}}$ is the complex conjugate of $\\Theta$ . In practice, we map $Q,K\\in\\mathbb{R}^{d}\\to\\mathbb{C}^{d/2}$ , add the   \n77 complex position embedding $\\Theta$ , then map them back to $\\mathbb{R}^{d}$ , following the implementation trick as in   \n78 LLaMA [48, 44]. Similar to self-attention, the parallel representation enables us to train the models   \n79 with GPUs efficiently.   \n80 The Recurrent Representation of Retention As shown in Figure 1b, the proposed mechanism can   \n81 also be written as recurrent neural networks (RNNs), which is favorable for inference. For the $n$ -th   \n82 timestep, we recurrently obtain the output as: ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{S_{n}=\\gamma S_{n-1}+K_{n}^{\\intercal}V_{n}}\\\\ &{\\mathrm{Retention}(X_{n})=Q_{n}S_{n},\\quad n=1,\\cdots\\,,|x|}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "83 where $Q,K,V,\\gamma$ are the same as in Equation (5). ", "page_idx": 2}, {"type": "text", "text": "84 The Chunkwise Recurrent Representation of Retention A hybrid form of parallel representation   \n85 and recurrent representation is available to accelerate training, especially for long sequences. We   \n86 divide the input sequences into chunks. Within each chunk, we follow the parallel representation   \n87 (Equation (5)) to conduct computation. In contrast, cross-chunk information is passed following the   \n88 recurrent representation (Equation (6)). Specifically, let $B$ denote the chunk length. We compute the   \n89 retention output of the $i$ -th chunk via: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{Q_{[i]}=Q_{B i:B(i+1)},\\quad K_{[i]}=K_{B i:B(i+1)},\\quad V_{[i]}=V_{B i:B(i+1)}}\\\\ &{\\qquad\\qquad\\qquad R_{i}=K_{[i]}^{\\intercal}(V_{[i]}\\odot\\zeta)+\\gamma^{B}R_{i-1},\\quad\\zeta_{i j}=\\gamma^{B-i-1}}\\\\ &{\\mathrm{Retention}(X_{[i]})=\\underbrace{(Q_{[i]}K_{[i]}^{\\intercal}\\odot D)V_{[i]}}_{\\mathrm{Inner-Chunk}}+\\underbrace{(Q_{[i]}R_{i-1})\\odot\\xi}_{\\mathrm{Cross-Chunk}},\\quad\\xi_{i j}=\\gamma^{i+1}}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "90 where $[i]$ indicates the $i$ -th chunk, i.e., $x_{[i]}=[x_{(i-1)B+1},\\cdot\\cdot\\cdot\\,,x_{i B}]$ . The proof of the equivalence   \n91 between recurrent representation and chunkwise recurrent representation is described in Appendix B. ", "page_idx": 2}, {"type": "text", "text": "92 2.2 Gated Multi-Scale Retention ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "93 We use $h=\\left.d_{\\mathrm{model}}\\right/d$ retention heads in each layer, where $d$ is the head dimension. The heads use   \n94 different parameter matrices $W_{Q},W_{K},W_{V}\\in\\mathbb{R}^{d\\times d}$ . Moreover, multi-scale retention (MSR) assigns ", "page_idx": 2}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/ae5397c91a64e3eefd81966a4f09e87c2b966f404b98b58b1cd81b12c1586b98.jpg", "table_caption": [], "table_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 2: Pseudocode for the three computation paradigms of retention. Parallel implementation enables training parallelism to fully utilize GPUs. Recurrent paradigm enables low-cost inference. Chunkwise retention combines the above advantages (i.e., parallel within each chunk and recurrent across chunks), which has linear memory complexity for long sequences. ", "page_idx": 3}, {"type": "text", "text": "95 different $\\gamma$ for each head. For simplicity, we set $\\gamma$ identical among different layers and keep them   \n96 fixed. In addition, we add a swish gate [23, 40] to increase the non-linearity of retention layers.   \n97 Formally, given input $X$ , we define the layer as: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\qquad\\gamma=1-2^{-5-\\operatorname{arange}(0,h)}\\in\\mathbb{R}^{h}}\\\\ &{\\qquad\\mathrm{head}_{i}=\\operatorname{Retention}(X,\\gamma_{i})}\\\\ &{\\qquad Y=\\operatorname{GroupNorm}_{h}(\\operatorname{Concat}(\\mathrm{head}_{1},\\cdot\\cdot\\cdot\\cdot,\\mathrm{head}_{h}))}\\\\ &{\\operatorname{MSR}(X)=(\\operatorname{swish}(X W_{G})\\odot Y)W_{O}}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "98 where $W_{G},W_{O}\\;\\in\\;\\mathbb{R}^{d_{\\mathrm{model}}\\times d_{\\mathrm{model}}}$ are learnable parameters, and GroupNorm [53] normalizes the   \n99 output of each head, following SubLN proposed in [43]. Notice that the heads use multiple $\\gamma$ scales,   \n100 which results in different variance statistics. So we normalize the head outputs separately. ", "page_idx": 3}, {"type": "text", "text": "101 The pseudocode of retention is summarized in Figure 2. ", "page_idx": 3}, {"type": "text", "text": "102 Retention Score Normalization We utilize the scale-invariant nature of GroupNorm to improve the   \n103 numerical precision of retention layers. Specifically, multiplying a scalar value within GroupNorm   \n104 does not affect outputs and backward gradients, i.e., $\\mathrm{GroupNorm}(\\alpha\\ast\\mathrm{head}_{i})=\\mathrm{GroupNorm}(\\mathrm{head}_{i})$ .   \n105 We implement three normalization factors in Equation (5). First, we normalize $Q K^{\\intercal}$ as $Q K^{\\top}/\\sqrt{d}$ .   \n106 Second, we replace $D$ with $\\tilde{D}_{n m}\\,=\\,{\\cal D}_{n m}\\Big/\\sqrt{\\sum_{i=1}^{n}D_{n i}}$ . Third, let $R$ denote the retention scores   \n107 ${R}\\,=\\,Q{K}^{\\intercal}\\odot D$ , we normalize it as $\\begin{array}{r}{\\tilde{R}_{n m}\\,=\\,R_{n m}\\big/\\mathrm{max}(\\sum_{i=1}^{n}|R_{n i}|,1)}\\end{array}$ . Then the retention output   \n108 becomes $\\mathrm{Retention}(X)={\\tilde{R}}V$ . The above tricks do not affect the final results while stabilizing the   \n109 numerical flow of both forward and backward passes, because of the scale-invariant property. ", "page_idx": 3}, {"type": "text", "text": "110 2.3 Overall Architecture of Retention Networks ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "111 For an $L$ -layer retention network, we stack multi-scale retention (MSR) and feed-forward network   \n112 (FFN) to build the model. Formally, the input sequence $\\{x_{i}\\}_{i=1}^{|x|}$ is transformed into vectors by a   \n113 word embedding layer. We use the packed embeddings $X^{0}\\,=\\,[{\\pmb x}_{1},\\cdot\\cdot\\cdot\\cdot\\,,{\\pmb x}_{|x|}]\\,\\in\\,\\mathbb{R}^{|x|\\times d_{\\mathrm{model}}}$ as the   \n114 input and compute the model output $X^{L}$ : ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{Y^{l}=\\mathrm{MSR}(\\mathrm{LN}(X^{l}))+X^{l}}\\\\ {X^{l+1}=\\mathrm{FFN}(\\mathrm{LN}(Y^{l}))+Y^{l}}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "115 where $\\mathrm{LN}(\\cdot)$ is LayerNorm [3]. The FFN part is computed as $\\mathrm{FFN}(X)=\\operatorname{gelu}(X W_{1})W_{2}$ , where   \n116 $W_{1},W_{2}$ are parameter matrices.   \n117 Training We use the parallel (Equation (5)) and chunkwise recurrent (Equation (7)) representations   \n118 during the training process. The parallelization within sequences or chunks efficiently utilizes   \n119 GPUs to accelerate computation. More favorably, chunkwise recurrence is especially useful for   \n120 long-sequence training, which is efficient in terms of both FLOPs and memory consumption.   \n121 Inference The recurrent representation (Equation (6)) is employed during inference, which nicely   \n122 fits autoregressive decoding. The $O(1)$ complexity reduces memory and inference latency while   \n123 achieving equivalent results. ", "page_idx": 3}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "124 3 Experiments ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "125 We perform language modeling experiments to evaluate RetNet. First, we present the scaling curves   \n126 of Transformer and RetNet. Second, we follow the training settings of StableLM-4E1T [50] to   \n127 compare with open-source Transformer models in downstream benchmarks. Moreover, for training   \n128 and inference, we compare speed, memory consumption, and latency. The training corpus is a curated   \n129 compilation of The Pile [16], C4 [14], and The Stack [29]. ", "page_idx": 4}, {"type": "text", "text": "130 3.1 Comparison with Transformer Variants ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "131 We compare RetNet with various efficient Transformer variants, including RWKV [36], H3 [11],   \n132 Hyena [38], and Mamba [19]. We use LLaMA [48] architecture, including RMSNorm [59] and   \n133 SwiGLU [40, 7] module, as the Transformer backbone, which shows better performance and stability.   \n134 Consequently, other variants follow these settings. Specifically, Mamba does not have FFN layers so   \n135 we only implement RMSNorm. For RetNet, the FFN intermediate dimension is ${\\frac{5}{3}}d$ and the value   \n136 dimensions in $W_{G},W_{V},W_{O}$ are also $\\textstyle{\\frac{5}{3}}d$ , where the overall parameters are still $12d^{2}$ . All models   \n137 have 400M parameters with 24 layers and a hidden dimension of 1024. For H3, we set the head   \n138 dimension to 8. For RWKV, we use the TimeMix module to substitute self-attention layers while   \n139 keeping FFN layers consistent with other models for fair comparisons. We train the models with $40\\mathrm{k}$   \n140 steps with a batch size of 0.25M tokens.   \n141 Fine-Grained Language Modeling Evaluation As shown in Table 1, we first report the language   \n142 modeling perplexity of validation sets. Besides the overall validation set, following [2], we divide   \n143 perplexity into \u201cAR-Hit\u201d and \u201cFirst Occur\u201d. Specifically, AR-Hit contains the predicted tokens that   \n144 are previously seen bigrams in the previous context, which evaluates the associative recall ability.   \n145 \u201cFirst Occur\u201d has the predicted tokens that can not be recalled from the context. Among various   \n146 Transformer variants, RetNet outperforms previous methods on both \u201cAR-Hit\u201d and \u201cFirst Occur\u201d   \n147 splits, which is important for real-world use cases.   \n148 Knowledge-Intensive Tasks We also evaluate Massive Multitask Language Understanding   \n149 (MMLU; [24]) answer perplexity to evaluate models on knowledge-intensive tasks. We report   \n150 the average perplexity of the correct answers, i.e., given input [Question, \u201cAnswer:\u201d, Correct   \n151 Answer], we calculate the perplexity of the \u201cCorrect Answer\u201d part. RetNet achieves competitive   \n152 results among the architectures. ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/368e592ce8403e6fd9555d31615430013e854edf55819e45b4fcd79361a7c48e.jpg", "table_caption": [], "table_footnote": [], "page_idx": 4}, {"type": "text", "text": "Table 1: Perplexity results on language modeling and MMLU [24] answers. We use the augmented Transformer architecture proposed in LLaMA [48] for reference. For language modeling, we report perplexity on both the overall validation set and fine-grained diagnosis sets [2], i.e., \u201cAR-Hit\u201d evaluates the associative recall capability, and \u201cFirst-Occur\u201d indicates the regular language modeling performance. Besides, we evaluate the answer perplexity of MMLU subsets. ", "page_idx": 4}, {"type": "text", "text": "153 3.2 Language Modeling Evaluation with Various Model Sizes ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "154 We train language models with various sizes (i.e., 1.3B,   \n155 2.7B, and 6.7B) from scratch. The training batch size   \n156 is 4M tokens with 2048 maximal length. We train the   \n157 models with $25\\mathbf{k}$ steps. The detailed hyper-parameters are   \n158 described in Appendix E. We train the models with 512   \n159 AMD MI200 GPUs.   \n160 Figure 3 reports perplexity on the validation set for the   \n161 language models based on Transformer and RetNet. We   \n162 present the scaling curves with three model sizes, i.e.,   \n163 1.3B, 2.7B, and 6.7B. RetNet achieves comparable results   \n164 with Transformers. More importantly, the results indicate   \n165 that RetNet is favorable in terms of size scaling. In addi  \n166 tion to performance, RetNet training is quite stable in our   \n167 experiments. Experimental results show that RetNet is a   \n168 strong competitor to Transformer for large language mod  \n169 els. Empirically, we find that RetNet starts to outperform   \n170 Transformer when the model size is larger than 2B. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "image", "img_path": "sxZlp9ZoHD/tmp/a19095a9bbbf5e3ee01b0c26107e2aab478b586a7f6d522e3e4004e1b10fd0af.jpg", "img_caption": ["Figure 3: Validation perplexity (PPL) decreases along with scaling up the model size. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "171 3.3 Long-Context Evaluation ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "172 We evaluate long-context modeling on the ZeroSCROLLS [41] benchmark. We train a hybrid model   \n173 of size 2.7B, RetNet+, which stacks the attention and retention layers. Specifically, we insert one   \n174 attention layer after every 3 retention layers. We follow most configurations of the 2.7B model as in   \n175 Section 3.2. We scale the number of training tokens to 420B tokens. The batch size is 4M tokens.   \n176 We first train the model with 4K length and then extend the sequence length to 16K for the last 50B   \n177 training tokens. The rotation base scaling [55] is used for length extension.   \n178 Figure 4 reports the answer perplexity given various lengths of input document. It shows that both   \n179 Transformer and RetNet+ perform better with longer input documents. The results indicate that the   \n180 language models successfully utilize the long-distance context. Notice that the 12K and 16K results   \n181 in Qasper are similar because the lengths of most documents are shorter than 16K. Moreover, RetNet+   \n182 obtains competitive results compared with Transformer for long-context modeling. Meanwhile,   \n183 retention has better training and inference efficiency. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "image", "img_path": "sxZlp9ZoHD/tmp/4e2a93bd6bd270fc42df08ea688ff196682be949bedd90f3250d84948799b4a8.jpg", "img_caption": ["Figure 4: Answer perplexity decreases along with longer input documents. Transformer and RetNet+ obtain comparable performance for long-context modeling on the ZeroSCROLLS [41] benchmark. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "184 3.4 Inference Cost ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "185 As shown in Figure 5, we compare memory cost, throughput, and latency of Transformer and RetNet   \n186 during inference. Transformers reuse KV caches of previously decoded tokens. RetNet uses the   \n187 recurrent representation as described in Equation (6). We evaluate the 6.7B model on the A100-80GB   \n188 GPU. Figure 5 shows that RetNet outperforms Transformer in terms of inference cost.   \n189 Memory As shown in Figure 5a, the memory cost of Transformer increases linearly due to KV   \n190 caches. In contrast, the memory consumption of RetNet remains consistent even for long sequences,   \n191 requiring much less GPU memory to host RetNet. The additional memory consumption of RetNet is   \n192 almost negligible (i.e., about $3\\%$ ) while the model weights occupy $97\\%$ .   \n193 Throughput As presented in Figure 5b, the throughput of Transformer drops along with the   \n194 decoding length increases. In comparison, RetNet has higher and length-invariant throughput during   \n195 decoding, by utilizing the recurrent representation of retention.   \n196 Latency Latency is an important metric in deployment that greatly affects the user experience.   \n197 We report the decoding latency in Figure 5c. Experimental results show that increasing batch size   \n198 renders the Transformer\u2019s latency larger. Moreover, the latency of Transformers grows faster with   \n199 longer input. In order to make latency acceptable, we have to restrict the batch size, which harms the   \n200 overall inference throughput of Transformers. By contrast, RetNet\u2019s decoding latency outperforms   \n201 Transformers and stays almost the same across different batch sizes and input lengths. ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "image", "img_path": "sxZlp9ZoHD/tmp/3d4b1d3d39b2d42eae42ae1f4d9dc9ae774297a70a1f2c3f65ccf62bc3950f96.jpg", "img_caption": ["(a) GPU memory cost with varying (b) Inference throughput with vary-(c) Inference latency with different sequence length. ing sequence length. batch sizes. ", "Figure 5: Inference cost of Transformer and RetNet with a model size of 6.7B. RetNet outperforms Transformers in terms of memory consumption, throughput, and latency. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "202 3.5 Training Throughput ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "203 Figure 6 compares the training throughput of Trans  \n204 former and RetNet, where the training sequence lengths   \n205 range from 8192 to 65536. The model size is 3.5B,   \n206 where the hidden dimension is 3072 and the layer size   \n207 is 28. We use highly optimized FlashAttention-2 [10]   \n208 for Transformers. In comparison, we implement chunk   \n209 recurrent representation (Equation (7)) using Triton [46],   \n210 where the computation is both memory-friendly and   \n211 computationally efficient. The chunk size is set to 256.   \n212 We evaluate the results with eight Nvidia H100-80GB   \n213 GPUs because FlashAttention-2 is highly optimized for   \n214 H100 cards.   \n215 Experimental results show that RetNet has higher train  \n216 ing throughput than Transformers. The acceleration ratio increases as the sequence length is longer. ", "page_idx": 6}, {"type": "text", "text": "", "page_idx": 6}, {"type": "image", "img_path": "sxZlp9ZoHD/tmp/38978f5f554bb4c35658714b93351a46680453be0bc9c8b0dfc6a8e42dc79c24.jpg", "img_caption": ["Figure 6: Training throughput (word per second; wps) of Transformer with FlashAttention-2 [10] and RetNet. "], "img_footnote": [], "page_idx": 6}, {"type": "text", "text": "217 When the training length is 64k, RetNet\u2019s throughput is about 3 times than Transformer\u2019s. ", "page_idx": 6}, {"type": "text", "text": "218 3.6 Zero-Shot and Few-Shot Evaluation on Downstream Tasks ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "219 We also compare the language models on a wide range of downstream tasks. We evaluate zero-shot   \n220 and 4-shot learning with the 6.7B models. As shown in Table 2, the datasets include HellaSwag   \n221 (HS; [57]), BoolQ [8], COPA [52], PIQA [6], Winograd, Winogrande [30], and StoryCloze (SC; [34]).   \n222 The accuracy numbers are consistent with language modeling perplexity presented in Figure 3. RetNet   \n223 achieves comparable performance with Transformer on zero-shot and in-context learning settings. ", "page_idx": 6}, {"type": "text", "text": "224 3.7 Ablation Studies ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "225 We ablate various design choices of RetNet and report the language modeling results in Table 3. The   \n226 evaluation settings and metrics are the same as in Section 3.1.   \n227 Architecture We ablate the swish gate and GroupNorm as described in Equation (8). Table 3   \n228 shows that the above two components improve performance. First, the gating module is essential   \n229 for enhancing non-linearity and improving model capability. Notice that we use the same parameter   \n230 allocation as in Transformers after removing the gate. Second, group normalization in retention   \n231 balances the variances of multi-head outputs, which improves training stability and language modeling   \n232 results.   \n233 Multi-Scale Decay Equation (8) shows that we use different $\\gamma$ as the decay rates for the retention   \n234 heads. In the ablation studies, we examine removing $\\gamma$ decay (i.e., $\\c^{\\leftarrow}-\\gamma$ decay\u201d) and applying the   \n235 same decay rate across heads (i.e., \u201c\u2212multi-scale decay\u201d). Specifically, ablating $\\gamma$ decay is equivalent   \n236 to $\\gamma=1$ . In the second setting, we set $\\gamma=1-2^{-6.\\bar{5}}$ for all heads. Table 3 indicates that both the   \n237 decay mechanism and using multiple decay rates can improve the language modeling performance.   \n238 Head Dimension As indicated by the recurrent perspective of Equation (1), the head dimension   \n239 implies the memory capacity of hidden states. In ablation, we reduce the default head dimension from   \n240 256 to 64, i.e., 64 for queries and keys, and $\\textstyle{\\left\\lfloor{\\frac{5}{3}}\\times64\\right\\rfloor}\\approx108$ for values. We keep the hidden dimension   \n241 $d_{\\mathrm{model}}$ the same. Accordingly, we adjust the multi-scale decay as $\\gamma=1-2^{-5-a r a n g e(0,h)/4}$ to keep   \n242 the same decay range. Table 3 shows that the larger head dimension achieves better performance. ", "page_idx": 6}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/7be2313712597cb770cc253295876f6811182cbd51fb200d551aa7ab92c0eb42.jpg", "table_caption": ["Table 2: Zero-shot and few-shot learning performance. The language model size is 6.7B. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/821da35150d289eeb5a994101a983c8c0dbe33b655e27402cedbde420157940a.jpg", "table_caption": [], "table_footnote": ["Table 3: Perplexity results on language modeling and MMLU [24] answers. For language modeling, we report perplexity on both the overall validation set and fine-grained diagnosis sets [2], i.e., \u201cAR-Hit\u201d evaluates the associative recall capability, and \u201cFirst-Occur\u201d indicates the regular language modeling performance. Besides, we evaluate the answer perplexity of the MMLU subsets. "], "page_idx": 7}, {"type": "text", "text": "243 3.8 Results on Vision Tasks ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "244 We also compare RetNet with vision Transformers [15, 47] in Table 4, where bidirectional en  \n245 coders are evaluated. Unlike causal language models, the vision encoders do not require recurrent   \n246 representations. Specifically, we use retention as follows: ", "page_idx": 7}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{Q=(X W_{Q})\\odot\\Theta,\\ \\ \\ K=(X W_{K})\\odot\\overline{{{\\Theta}}},\\ \\ \\ V=X W_{V}}}\\\\ {{\\mathrm{Retention}(X)=(Q K^{\\intercal})V=Q(K^{\\intercal}V)}}\\end{array}\n$$", "text_format": "latex", "page_idx": 7}, {"type": "text", "text": "247 where multi-scale decay is removed in bidirectional computation. Notice that we can compute   \n248 retention in different orders. Similar to linear attention [27], the $Q(K^{\\intercal}V)$ paradigm is an efficient   \n249 operator in bidirectional settings, especially for high-resolution images.   \n250 We perform experiments on ImageNet-1K classification [13], COCO object detection [32], and   \n251 ADE20K semantic segmentation [60]. We compare RetNet with DeiT [47] which is a well-tuned   \n252 vision Transformer. Besides, we follow [21] and plug in a depth-wise convolution in experiments.   \n253 We adopt the DeiT-M size, which has about 38M parameters. For ImageNet-1K image classification,   \n254 we use AdamW [33] for 300 epochs, and 20 epochs of linear warm-up. The learning rate is $1\\times10^{-3}$ ,   \n255 the batch size is 1024, and the weight decay is 0.05. For COCO object detection, we use Mask   \n256 R-CNN [22] as the task head, and the above models pre-trained on ImageNet as the backbone with   \n257 3x schedules. In ADE20K experiments, we use UperNet [54] as the segmentation head. The detailed   \n258 configuration can be found in Appendix H.   \n259 Table 4 shows the results across various vision tasks. RetNet is competitive compared with DeiT.   \n260 For classification and segmentation, RetNet is slightly better than DeiT, where RetNet achieves   \n261 $0.81\\%$ accuracy improvement on ImageNet and $0.61\\%$ mIoU improvement on ADE20K. For object   \n262 detection, the results are comparable. ", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/f4922fbcb9170137726dedcfc8b6947ccdff41210f57b883bf5bab25b01f1983.jpg", "table_caption": ["Table 4: Results on vision tasks, i.e., image classification (ImageNet), object detection (COCO), and semantic segmentation (ADE20K). RetNet achieves competitive performance with DeiT, which is a well-tuned vision Transformer. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "263 4 Related Work ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "264 Numerous efforts are focused on reducing the quadratic complexity of attention mechanisms. Linear   \n265 attention [27] uses various kernels $\\begin{array}{r}{\\phi(q_{i})\\phi(k_{j})\\Bigl/\\sum_{n=1}^{|x|}\\phi(q_{i})\\phi(k_{n})}\\end{array}$ to replace the softmax function. In   \n266 contrast, we reexamine sequence modeling from scratch, rather than aiming at approximating   \n267 softmax. AFT [58] simplifies dot-product attention to element-wise and moves softmax to key   \n268 vectors. RWKV [36] replaces AFT\u2019s position embeddings with exponential decay and runs the   \n269 models recurrently for training and inference. In comparison, retention preserves high-dimensional   \n270 states to encode sequence information, which contributes to expressive ability and better performance.   \n271 S4 [20] unifies convolution and recurrence format and achieves $O(N\\log N)$ training complexity   \n272 leveraging the FFT kernel. Unlike Equation (2), if $Q_{n}$ and $K_{n}$ are content-unaware, the formulation   \n273 can be degenerated to S4 [20]. Hyena [38] generates the convolution kernels, achieving sub-quadratic   \n274 training efficiency but keeping $O(N)$ complexity in single-step inference. Recently, most related   \n275 work has focused on modifying $\\gamma$ in Equation (6) as a data-dependent variable, such as Mamba [19],   \n276 GLA [56], Gateloop [28], and xLSTM [4]. Another strand explores hybrid architectures [31, 12] that   \n277 interleave the above components with attention layers.   \n278 In addition, we discuss the training and inference efficiency of some related methods. Let $D$ denote   \n279 the hidden dimension, $H$ the head dimension, and $N$ the sequence length. For training, RWKV\u2019s   \n280 token-mixing complexity is $O(D N)$ , and Mamba\u2019s complexity is $O(D\\bar{H}N)$ with optimized CUDA   \n281 kernels. Hyena\u2019s is $O(D N\\log N)$ with Fast Fourier Transform acceleration. In comparison, the   \n282 chunk-wise recurrent representation is $O(D N(B+H))$ , where $B$ is the chunk size, and we usually   \n283 set $H=256,B\\leq512$ . However, chunk-wise computation is highly parallelized, enabling efficient   \n284 hardware usage. For large model size (i.e., larger $D$ ) or sequence length, the additional $b+h$ has   \n285 negligible effects. For inference, among the efficient architectures compared, Hyena has the same   \n286 complexity (i.e., $O(N)$ per step) as Transformer, while the others can perform $O(1)$ decoding. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "287 5 Conclusion ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "288 We propose retentive networks (RetNet) for sequence modeling, which enables various representa  \n289 tions, i.e., parallel, recurrent, and chunkwise recurrent. RetNet achieves significantly better inference   \n290 efficiency (in terms of memory, speed, and latency), favorable training parallelization, and competitive   \n291 performance compared with Transformers. The above advantages make RetNet an ideal successor to   \n292 Transformers for large language models, especially considering the deployment benefits brought by   \n293 the $O(1)$ inference complexity. In the future, we are interested in deploying RetNet on various edge   \n294 devices, such as mobile phones. ", "page_idx": 8}, {"type": "text", "text": "295 References ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "296 [1] J. Ainslie, J. Lee-Thorp, M. de Jong, Y. Zemlyanskiy, F. Lebr\u00f3n, and S. Sanghai. GQA: Training   \n297 generalized multi-query Transformer models from multi-head checkpoints. arXiv preprint   \n298 arXiv:2305.13245, 2023.   \n299 [2] S. Arora, S. Eyuboglu, A. Timalsina, I. Johnson, M. Poli, J. Zou, A. Rudra, and C. R\u00e9. Zoology:   \n300 Measuring and improving recall in efficient language models. arXiv preprint arXiv:2312.04927,   \n301 2023.   \n302 [3] J. L. Ba, J. R. Kiros, and G. E. Hinton. Layer normalization. arXiv preprint arXiv:1607.06450,   \n303 2016.   \n304 [4] M. Beck, K. P\u00f6ppel, M. Spanring, A. Auer, O. Prudnikova, M. Kopp, G. Klambauer, J. Brand  \n305 stetter, and S. Hochreiter. xLSTM: Extended long short-term memory. arXiv preprint   \n306 arXiv:2405.04517, 2024.   \n307 [5] J. Berant, A. Chou, R. Frostig, and P. Liang. Semantic parsing on Freebase from question  \n308 answer pairs. In Proceedings of the 2013 Conference on Empirical Methods in Natural   \n309 Language Processing, pages 1533\u20131544, Seattle, Washington, USA, Oct. 2013. Association for   \n310 Computational Linguistics.   \n311 [6] Y. Bisk, R. Zellers, R. L. Bras, J. Gao, and Y. Choi. Piqa: Reasoning about physical com  \n312 monsense in natural language. In Thirty-Fourth AAAI Conference on Artificial Intelligence,   \n313 2020.   \n314 [7] A. Chowdhery, S. Narang, J. Devlin, M. Bosma, G. Mishra, A. Roberts, P. Barham, H. W.   \n315 Chung, C. Sutton, S. Gehrmann, P. Schuh, K. Shi, S. Tsvyashchenko, J. Maynez, A. B. Rao,   \n316 P. Barnes, Y. Tay, N. M. Shazeer, V. Prabhakaran, E. Reif, N. Du, B. C. Hutchinson, R. Pope,   \n317 J. Bradbury, J. Austin, M. Isard, G. Gur-Ari, P. Yin, T. Duke, A. Levskaya, S. Ghemawat,   \n318 S. Dev, H. Michalewski, X. Garc\u00eda, V. Misra, K. Robinson, L. Fedus, D. Zhou, D. Ippolito,   \n319 D. Luan, H. Lim, B. Zoph, A. Spiridonov, R. Sepassi, D. Dohan, S. Agrawal, M. Omernick,   \n320 A. M. Dai, T. S. Pillai, M. Pellat, A. Lewkowycz, E. O. Moreira, R. Child, O. Polozov, K. Lee,   \n321 Z. Zhou, X. Wang, B. Saeta, M. D\u00edaz, O. Firat, M. Catasta, J. Wei, K. S. Meier-Hellstern,   \n322 D. Eck, J. Dean, S. Petrov, and N. Fiedel. PaLM: Scaling language modeling with pathways.   \n323 ArXiv, abs/2204.02311, 2022.   \n324 [8] C. Clark, K. Lee, M.-W. Chang, T. Kwiatkowski, M. Collins, and K. Toutanova. BoolQ:   \n325 Exploring the surprising difficulty of natural yes/no questions. In Proceedings of the 2019   \n326 Conference of the North American Chapter of the Association for Computational Linguistics,   \n327 pages 2924\u20132936, 2019.   \n328 [9] T. Computer. Redpajama-data: An open source recipe to reproduce llama training dataset, 2023.   \n329 URL https://github.com/togethercomputer/RedPajama-Data.   \n330 [10] T. Dao. FlashAttention-2: Faster attention with better parallelism and work partitioning. arXiv   \n331 preprint arXiv:2307.08691, 2023.   \n332 [11] T. Dao, D. Y. Fu, K. K. Saab, A. W. Thomas, A. Rudra, and C. R\u00e9. Hungry hungry hippos:   \n333 Towards language modeling with state space models. arXiv preprint arXiv:2212.14052, 2022.   \n334 [12] S. De, S. L. Smith, A. Fernando, A. Botev, G. Cristian-Muraru, A. Gu, R. Haroun, L. Berrada,   \n335 Y. Chen, S. Srinivasan, G. Desjardins, A. Doucet, D. Budden, Y. W. Teh, R. Pascanu, N. D.   \n336 Freitas, and C. Gulcehre. Griffin: Mixing gated linear recurrences with local attention for   \n337 efficient language models. 2024.   \n338 [13] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei. Imagenet: A large-scale hierarchical   \n339 image database. In 2009 IEEE conference on computer vision and pattern recognition, pages   \n340 248\u2013255. Ieee, 2009.   \n341 [14] J. Dodge, A. Marasovic\u00b4, G. Ilharco, D. Groeneveld, M. Mitchell, and M. Gardner. Documenting   \n342 large webtext corpora: A case study on the colossal clean crawled corpus. In Conference on   \n343 Empirical Methods in Natural Language Processing, 2021.   \n344 [15] A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani,   \n345 M. Minderer, G. Heigold, S. Gelly, et al. An image is worth 16x16 words: Transformers for   \n346 image recognition at scale. arXiv preprint arXiv:2010.11929, 2020.   \n347 [16] L. Gao, S. Biderman, S. Black, L. Golding, T. Hoppe, C. Foster, J. Phang, H. He, A. Thite,   \n348 N. Nabeshima, et al. The Pile: An 800GB dataset of diverse text for language modeling. arXiv   \n349 preprint arXiv:2101.00027, 2020.   \n350 [17] L. Gao, J. Tow, B. Abbasi, S. Biderman, S. Black, A. DiPof,i C. Foster, L. Golding, J. Hsu,   \n351 A. Le Noac\u2019h, H. Li, K. McDonell, N. Muennighoff, C. Ociepa, J. Phang, L. Reynolds,   \n352 H. Schoelkopf, A. Skowron, L. Sutawika, E. Tang, A. Thite, B. Wang, K. Wang, and A. Zou. A   \n353 framework for few-shot language model evaluation, 12 2023. URL https://zenodo.org/   \n354 records/10256836.   \n355 [18] X. Geng and H. Liu. Openllama: An open reproduction of llama, May 2023. URL https:   \n356 //github.com/openlm-research/open_llama.   \n357 [19] A. Gu and T. Dao. Mamba: Linear-time sequence modeling with selective state spaces. arXiv   \n358 preprint arXiv:2312.00752, 2023.   \n359 [20] A. Gu, K. Goel, and C. R\u00e9. Efficiently modeling long sequences with structured state spaces.   \n360 arXiv preprint arXiv:2111.00396, 2021.   \n361 [21] D. Han, X. Pan, Y. Han, S. Song, and G. Huang. Flatten Transformer: Vision Transformer   \n362 using focused linear attention. In Proceedings of the IEEE/CVF International Conference on   \n363 Computer Vision, pages 5961\u20135971, 2023.   \n364 [22] K. He, G. Gkioxari, P. Doll\u00e1r, and R. Girshick. Mask r-cnn. In Proceedings of the IEEE   \n365 international conference on computer vision, pages 2961\u20132969, 2017.   \n366 [23] D. Hendrycks and K. Gimpel. Gaussian error linear units (GELUs). arXiv: Learning, 2016.   \n367 [24] D. Hendrycks, C. Burns, S. Basart, A. Zou, M. Mazeika, D. Song, and J. Steinhardt. Measuring   \n368 massive multitask language understanding. arXiv preprint arXiv:2009.03300, 2020.   \n369 [25] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Computation, 9:1735\u20131780,   \n370 Nov. 1997.   \n371 [26] W. Hua, Z. Dai, H. Liu, and Q. Le. Transformer quality in linear time. In International   \n372 Conference on Machine Learning, pages 9099\u20139117. PMLR, 2022.   \n373 [27] A. Katharopoulos, A. Vyas, N. Pappas, and F. Fleuret. Transformers are rnns: Fast autoregressive   \n374 transformers with linear attention. In International Conference on Machine Learning, pages   \n375 5156\u20135165. PMLR, 2020.   \n376 [28] T. Katsch. Gateloop: Fully data-controlled linear recurrence for sequence modeling. arXiv   \n377 preprint arXiv:2311.01927, 2023.   \n378 [29] D. Kocetkov, R. Li, L. Ben Allal, J. Li, C. Mou, C. Mu\u00f1oz Ferrandis, Y. Jernite, M. Mitchell,   \n379 S. Hughes, T. Wolf, D. Bahdanau, L. von Werra, and H. de Vries. The Stack: 3TB of permissively   \n380 licensed source code. Preprint, 2022.   \n381 [30] H. Levesque, E. Davis, and L. Morgenstern. The winograd schema challenge. In Thirteenth   \n382 International Conference on the Principles of Knowledge Representation and Reasoning, 2012.   \n383 [31] O. Lieber, B. Lenz, H. Bata, G. Cohen, J. Osin, I. Dalmedigos, E. Safahi, S. Meirom, Y. Belinkov,   \n384 S. Shalev-Shwartz, et al. Jamba: A hybrid Transformer-Mamba language model. arXiv preprint   \n385 arXiv:2403.19887, 2024.   \n386 [32] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan, P. Doll\u00e1r, and C. L. Zitnick.   \n387 Microsoft COCO: Common objects in context. In Computer Vision\u2013ECCV 2014: 13th European   \n388 Conference, Zurich, Switzerland, September 6-12, 2014, Proceedings, Part V 13, pages 740\u2013755.   \n389 Springer, 2014.   \n390 [33] I. Loshchilov and F. Hutter. Decoupled weight decay regularization. In International Conference   \n391 on Learning Representations, 2019.   \n392 [34] N. Mostafazadeh, M. Roth, A. Louis, N. Chambers, and J. Allen. Lsdsem 2017 shared task: The   \n393 story cloze test. In Proceedings of the 2nd Workshop on Linking Models of Lexical, Sentential   \n394 and Discourse-level Semantics, pages 46\u201351, 2017.   \n395 [35] A. Orvieto, S. L. Smith, A. Gu, A. Fernando, C. Gulcehre, R. Pascanu, and S. De. Resurrecting   \n396 recurrent neural networks for long sequences. ArXiv, abs/2303.06349, 2023.   \n397 [36] B. Peng, E. Alcaide, Q. G. Anthony, A. Albalak, S. Arcadinho, H. Cao, X. Cheng, M. Chung,   \n398 M. Grella, G. Kranthikiran, X. He, H. Hou, et al. RWKV: Reinventing RNNs for the Transformer   \n399 era. ArXiv, abs/2305.13048, 2023.   \n400 [37] H. Peng, N. Pappas, D. Yogatama, R. Schwartz, N. A. Smith, and L. Kong. Random feature   \n401 attention. arXiv preprint arXiv:2103.02143, 2021.   \n402 [38] M. Poli, S. Massaroli, E. Nguyen, D. Y. Fu, T. Dao, S. Baccus, Y. Bengio, S. Ermon, and   \n403 C. R\u00e9. Hyena hierarchy: Towards larger convolutional language models. arXiv preprint   \n404 arXiv:2302.10866, 2023.   \n405 [39] P. Rajpurkar, J. Zhang, K. Lopyrev, and P. Liang. SQuAD: $100{,}000+$ questions for machine   \n406 comprehension of text. In Proceedings of the 2016 Conference on Empirical Methods in   \n407 Natural Language Processing, pages 2383\u20132392, Austin, Texas, Nov. 2016. Association for   \n408 Computational Linguistics. doi: 10.18653/v1/D16-1264.   \n409 [40] P. Ramachandran, B. Zoph, and Q. V. Le. Swish: a self-gated activation function. arXiv: Neural   \n410 and Evolutionary Computing, 2017.   \n411 [41] U. Shaham, M. Ivgi, A. Efrat, J. Berant, and O. Levy. ZeroSCROLLS: A zero-shot benchmark   \n412 for long text understanding. arXiv preprint arXiv:2305.14196, 2023.   \n413 [42] N. M. Shazeer. Fast Transformer decoding: One write-head is all you need. ArXiv,   \n414 abs/1911.02150, 2019.   \n415 [43] M. Shoeybi, M. Patwary, R. Puri, P. LeGresley, J. Casper, and B. Catanzaro. Megatron-LM:   \n416 Training multi-billion parameter language models using model parallelism. arXiv preprint   \n417 arXiv:1909.08053, 2019.   \n418 [44] J. Su, Y. Lu, S. Pan, B. Wen, and Y. Liu. Roformer: Enhanced transformer with rotary position   \n419 embedding. arXiv preprint arXiv:2104.09864, 2021.   \n420 [45] Y. Sun, L. Dong, B. Patra, S. Ma, S. Huang, A. Benhaim, V. Chaudhary, X. Song, and F. Wei. A   \n421 length-extrapolatable transformer. In Proceedings of the 61st Annual Meeting of the Association   \n422 for Computational Linguistics (Volume 1: Long Papers), pages 14590\u201314604, Toronto, Canada,   \n423 July 2023. Association for Computational Linguistics.   \n424 [46] P. Tillet and D. Cox. Triton: An intermediate language and compiler for tiled neural network   \n425 computations. In Proceedings of the 3rd ACM SIGPLAN International Workshop on Machine   \n426 Learning and Programming Languages, pages 10\u201319, 2019.   \n427 [47] H. Touvron, M. Cord, M. Douze, F. Massa, A. Sablayrolles, and H. J\u00e9gou. Training data-efficient   \n428 image transformers & distillation through attention. In International conference on machine   \n429 learning, pages 10347\u201310357. PMLR, 2021.   \n430 [48] H. Touvron, T. Lavril, G. Izacard, X. Martinet, M.-A. Lachaux, T. Lacroix, B. Rozi\u00e8re, N. Goyal,   \n431 E. Hambro, F. Azhar, et al. LLaMA: Open and efficient foundation language models. arXiv   \n432 preprint arXiv:2302.13971, 2023.   \n433 [49] H. Touvron, L. Martin, K. Stone, P. Albert, A. Almahairi, Y. Babaei, N. Bashlykov, S. Batra,   \n434 P. Bhargava, S. Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv   \n435 preprint arXiv:2307.09288, 2023.   \n436 [50] J. Tow, M. Bellagente, D. Mahan, and C. Riquelme. StableLM 3B 4E1T. https://aka.ms/   \n437 StableLM-3B-4E1T, 2023.   \n438 [51] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and   \n439 I. Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems   \n440 30: Annual Conference on Neural Information Processing Systems 2017, 4-9 December 2017,   \n441 Long Beach, CA, USA, pages 6000\u20136010, 2017.   \n442 [52] A. Wang, Y. Pruksachatkun, N. Nangia, A. Singh, J. Michael, F. Hill, O. Levy, and S. R.   \n443 Bowman. SuperGLUE: A stickier benchmark for general-purpose language understanding   \n444 systems. arXiv preprint arXiv:1905.00537, 2019.   \n445 [53] Y. Wu and K. He. Group normalization. In Proceedings of the European conference on computer   \n446 vision (ECCV), pages 3\u201319, 2018.   \n447 [54] T. Xiao, Y. Liu, B. Zhou, Y. Jiang, and J. Sun. Unified perceptual parsing for scene understanding.   \n448 In Proceedings of the European conference on computer vision (ECCV), pages 418\u2013434, 2018.   \n449 [55] W. Xiong, J. Liu, I. Molybog, H. Zhang, P. Bhargava, R. Hou, L. Martin, R. Rungta, K. A.   \n450 Sankararaman, B. Oguz, et al. Effective long-context scaling of foundation models. arXiv   \n451 preprint arXiv:2309.16039, 2023.   \n452 [56] S. Yang, B. Wang, Y. Shen, R. Panda, and Y. Kim. Gated linear attention transformers with   \n453 hardware-efficient training. arXiv preprint arXiv:2312.06635, 2023.   \n454 [57] R. Zellers, A. Holtzman, Y. Bisk, A. Farhadi, and Y. Choi. Hellaswag: Can a machine really   \n455 finish your sentence? In Proceedings of the 57th Annual Meeting of the Association for   \n456 Computational Linguistics, 2019.   \n457 [58] S. Zhai, W. Talbott, N. Srivastava, C. Huang, H. Goh, R. Zhang, and J. Susskind. An attention   \n458 free transformer. arXiv preprint arXiv:2105.14103, 2021.   \n459 [59] B. Zhang and R. Sennrich. Root mean square layer normalization. Advances in Neural   \n460 Information Processing Systems, 32, 2019.   \n461 [60] B. Zhou, H. Zhao, X. Puig, T. Xiao, S. Fidler, A. Barriuso, and A. Torralba. Semantic   \n462 understanding of scenes through the ADE20k dataset. International Journal of Computer Vision,   \n463 127:302\u2013321, 2019. ", "page_idx": 9}, {"type": "text", "text": "", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "464 A Scaling Up Number of Training Tokens ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "465 We scale up the number of training tokens to 350B for the 3B-size models. We compare with strong   \n466 Transformer checkpoints including OpenLLaMA [18] and StableLM [50]. Moreover, we reproduce a   \n467 Transformer language model (named TransformerRepro) for apple-to-apple comparison.   \n468 Our model RetNet+ follows the same configuration as in Section 3.3, which is a hybrid model. The   \n469 model\u2019s hidden size is 3072, and the number of layers is 28. Without vocabulary embedding, the total   \n470 number of parameters is 3.17B, which is between StableLM-3B-4E1T (2.7B) and OpenLLaMA-3B  \n471 v1 (3.19B). The batch size is 4M tokens. The training length is 4k. The learning rate is $3.2\\times10^{-4}$   \n472 with 1000 warm-up steps and linear learning rate decay. The training corpus includes The Pile [16]   \n473 and RedPajama [9]. TransformerRepro follows the exact same setting.   \n474 Table 5 reports accuracy numbers on the Harness-Eval benchmark [17]. We directly follow the evalua  \n475 tion protocol. The results show that RetNet+ achieves a performance comparable to TransformerRepro   \n476 on language tasks. Notice that OpenLLaMA-3B-v1 and StableLM-3B use different learning rate   \n477 schedules. The results of these two models are used for reference purposes. ", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "", "page_idx": 13}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/c1ebd024ff0e90113154ee1c7a937cd793238d383c11a98da9becf0636ec6bc9.jpg", "table_caption": [], "table_footnote": ["Table 5: Accuracy on the Harness-Eval benchmark. All models are trained with 350B tokens with a batch size of 4M tokens. The results of OpenLLaMA-3B-v1 are taken from their official repository (https://bit.ly/openllama-350b-results), and StableLM-3B from their technical report (https://bit.ly/StableLM-3B-4E1T). "], "page_idx": 13}, {"type": "text", "text": "478 B Equivalence Between Chunk-wise Recurrent Representation and 479 Recurrent Representation ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "480 We illustrate the equivalence between the recurrent representation and the chunk-wise recurrent   \n481 representation. Specifically, let $B$ denote the chunk length. For the output $O_{n}$ , $n$ can be divided as   \n482 $n=k B+r$ where $B$ is the chunk size. Following Equation 6, we have: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{O_{n}=\\displaystyle\\sum_{m=1}^{n}\\gamma^{n-m}Q_{n}K_{m}^{\\intercal}V_{m}}\\\\ &{\\quad=\\displaystyle(Q_{n}K_{k B+1:n}^{\\intercal}\\odot\\Gamma)V_{k B+1:n}+(Q_{n}\\gamma^{r})\\sum_{c=0}^{k-1}\\sum_{m=1}^{B}(K_{m+c B}^{\\intercal}V_{m+c B}\\gamma^{B-m})\\gamma^{(k-1-c)B}}\\\\ &{\\quad=(Q_{n}K_{k B+1:n}^{\\intercal}\\odot\\Gamma)V_{k B+1:n}+(Q_{n}\\gamma^{r})\\sum_{c=1}^{k}(K_{[c]}^{\\intercal}(V_{[c]}\\odot\\zeta))\\gamma^{(k-c)B}}\\\\ &{\\quad=(Q_{n}K_{k B+1:n}^{\\intercal}\\odot\\Gamma)V_{k B+1:n}+(Q_{n}\\gamma^{r})R_{i-1}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "483 where $\\Gamma_{i}=\\gamma^{n-i}$ , $\\zeta_{i j}=\\gamma^{B-m}$ , and $[i]$ indicates the $i$ -th chunk, i.e., $x_{[i]}=[x_{(i-1)B+1},\\cdot\\cdot\\cdot\\,,x_{i B}]$ .   \n484 Then we write $R_{n}$ as a recurrent function and compute the retention output of the $i$ -th chunk via: ", "page_idx": 13}, {"type": "equation", "text": "$$\n\\begin{array}{r}{R_{i}=\\!\\!K_{[i]}^{\\mathsf{T}}(V_{[i]}\\odot\\zeta)+\\gamma^{B}R_{i-1}\\qquad\\qquad\\qquad}\\\\ {\\zeta_{i j}=\\gamma^{B-i},\\quad\\xi_{i j}=\\gamma^{i}\\qquad\\qquad\\qquad}\\\\ {\\mathrm{Retention}(X_{[i]})=\\!\\underbrace{(Q_{[i]}K_{[i]}^{\\mathsf{T}}\\odot D)V_{[i]}}_{\\mathrm{Inner-Chunk}}+\\underbrace{(Q_{[i]}\\odot\\xi)R_{i-1}}_{\\mathrm{Cross-Chunk}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 13}, {"type": "text", "text": "486 C Results with Different Context Lengths ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "487 As shown in Table 6, we report the results of language modeling with different context lengths. In   \n488 order to make the numbers comparable, we use 2048 text chunks as evaluation data and only compute   \n489 the perplexity for the last 128 tokens. Experimental results show that RetNet performs comparably   \n490 with Transformer in different context lengths. ", "page_idx": 14}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/d0bd97b96aae3583a6524b065e85e65cd6a279be8a459f065b7bba03e1c61af1.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "Table 6: Language modeling perplexity of RetNet and Transformer with different context length. The results show that RetNet has a consistent advantage across sequence length. ", "page_idx": 14}, {"type": "text", "text": "491 D Hyperparameters Used in Section 3.1 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "492 We use LLaMA [48] architecture, including RMSNorm [59] and SwiGLU [40, 7] module, as   \n493 the Transformer backbone, which shows better performance and stability. The weights of word   \n494 embedding and softmax projection are shared. Consequently, other variants follow these settings.   \n495 For RetNet, the FFN intermediate dimension is $\\textstyle{\\frac{5}{3}}d$ and the value dimensions in $W_{G},W_{V},W_{O}$ are   \n496 also ${\\frac{5}{3}}d$ , where the overall parameters are still $12d^{2}$ .   \n497 For H3, we set the head dimension to 8. For RWKV, we use the TimeMix module to substitute   \n498 self-attention layers while keeping FFN layers consistent with other models for fair comparisons.   \n499 For Mamba, we follow all the details in the paper [19], where double-SSM layers are implemented   \n500 instead of $^{\\bullet\\bullet}\\mathrm{SM}+\\mathrm{S}$ wiGLU\u201d. In addition to RetNet and Mamba, the FFN intermediate dimension is   \n501 all ${\\frac{8}{3}}d\\,$ . All models have 400M parameters, 24 layers, and a hidden dimension of 1024. We train the   \n502 models with 40k steps and a batch size of 0.25M tokens. ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 14}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/246dfdbb2a8f8067601224e7364d9836d1461c1e74f0d3c3edfc5161f644028f.jpg", "table_caption": ["Table 7: Hyperparamters used for the architecture comparison in Section 3.1. "], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "503 E Hyperparameters Used in Section 3.2 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "504 We re-allocate the parameters in MSR and FFN for fair comparisons. Let $d$ denote $d_{\\mathrm{model}}$ for simplicity   \n505 here. In Transformers, there are about $4d^{2}$ parameters in self-attention where $W_{Q},W_{K},W_{V},W_{O}\\in$   \n506 $\\mathbb{R}^{d\\times d}$ , and $8d^{2}$ parameters in FFN where the intermediate dimension is $4d$ . In comparison, RetNet   \n507 has $8d^{2}$ parameters in retention, where $W_{Q}$ , $W_{K}\\in\\mathbb{R}^{d\\times d}$ , $W_{G},W_{V}\\in\\mathbb{R}^{d\\times2d}$ , $W_{O}\\in\\mathbb{R}^{2d\\times d}$ . Notice   \n508 that the head dimension of $V$ is twice $Q,K$ , similar to GAU [26]. The widened dimension is   \n509 projected back to $d$ by $W_{O}$ . In order to keep the parameter number the same as Transformer, the FFN   \n510 intermediate dimension in RetNet is $2d$ . Meanwhile, we set the head dimension to 256, i.e., 256 for   \n511 queries and keys, and 512 for values. For fair comparison, we keep $\\gamma$ identical among different model   \n512 sizes, where $\\dot{\\gamma}=1-e^{\\mathrm{linspace}(\\log{1}/\\mathfrak{a}2,\\log{1}/\\mathfrak{s}12,h)}\\in\\mathbb{R}^{h}$ instead of the default value in Equation (8). ", "page_idx": 14}, {"type": "text", "text": "", "page_idx": 15}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/fa33c0cdfe61b6f8b757b5e6f9e95e5b0c5afaff0b63a16812c812a77635a95a.jpg", "table_caption": ["Table 8: Hyperparamters used for language modeling in Section 3.2. "], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "513 F Results on Open-Ended Generation Tasks ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "514 Table 9 presents one-shot performance on two open-ended question-answering tasks, including   \n515 SQUAD [39] and WebQS [5], with 6.7B models as follows. We report the recall metric in the table,   \n516 i.e., whether the answers are contained in the generated response. ", "page_idx": 15}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/599a5c9d61abfb302b7193a2dae046fd65ac0bd68a33abf5b7bd1242bc80fad6.jpg", "table_caption": ["Table 9: Answer recall of RetNet and Transformer on open-ended question answering. "], "table_footnote": [], "page_idx": 15}, {"type": "text", "text": "517 G Inference Cost of Grouped-Query Retention ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "518 We compare with grouped-query attention [1] and evaluate the method in the context of RetNet.   \n519 Grouped-query attention makes a trade-off between performance and efficiency, which has been   \n520 successfully verified in LLaMA2 34B/70B [49]. The method reduces the overhead of key/value cache   \n521 during inference. Moreover, the performance of grouped-query attention is better than multi-query   \n522 attention [42], overcoming the quality degradation brought by using one-head key value.   \n523 As shown in Table 10, we compare the inference cost with grouped-query attention and apply the   \n524 method for RetNet. For the LLaMA2 70B model, the number of key/value heads is reduced by $8\\times$ ,   \n525 where the query head number is 64 while the key/value head number is 8. For RetNet-70B, the   \n526 parameter allocation is identical to LLaMA [48], where the dimension is 8192, and the head number   \n527 is 32 for RetNet. For RetNet-70B-GQ2, the key-value head number is 16, where grouped-query   \n528 retention is applied. We run the inference with four A100 GPUs without quantization.   \n529 When the batch size is 256, LLaMA2 runs out of memory while RetNet without group query still   \n530 has a high throughput. When equipped with grouped-query retention, RetNet-70B achieves $38\\%$   \n531 acceleration and saves $30\\%$ memory.   \n532 We evaluate LLaMA2 under $2\\mathbf{k}$ and 8k lengths separately. The batch size is reduced to 8 so that   \n533 LLaMA2 can run without out of memory. Table 10 shows that the inference cost of Transformers   \n534 increases with the sequence length. In contrast, RetNet is length-invariant. Moreover, RetNet-70B  \n535 GQ2 achieves better latency, throughput, and GPU memory than LLaMA2-70B-2k/8k equipped   \n536 with grouped-query attention. Notice that the evaluation metrics are averaged over positions of   \n537 different sequence lengths for a fair comparison, rather than only considering the inference cost of   \n538 the maximum length. ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/d551ddf161e0bce6c8dec9d104c7850c4bdff4d1d486d21f2c70908287f54bdb.jpg", "table_caption": [], "table_footnote": ["Table 10: Inference cost of RetNet and LLaMA2-70B with difference batch size and length. LLaMA2- 70B is equipped with grouped-query attention, reducing key/value heads by $8\\times$ . \u201c-GQ2\u201d means grouped-query retention, which reduces half of key/value heads. $\".2\\mathbf{k}\"$ and $\\mathbf{\\hat{\\Pi}}^{*}\\mathbf{-}\\mathbf{8k}^{\\bullet\\bullet}$ indicate sequence length for LLaMA2, while RetNet is length-invariant. RetNet is capable of large-batch inference and is favourable in terms of latency, throughput, and GPU memory. "], "page_idx": 16}, {"type": "text", "text": "539 H Hyperparameters Used in Section 3.8 ", "text_level": 1, "page_idx": 16}, {"type": "table", "img_path": "sxZlp9ZoHD/tmp/37d7d0a54c536a2c95cf862bf16b86abaf8a43b841ed607dbf873f9f0c1d4255.jpg", "table_caption": [], "table_footnote": ["Table 11: Hyperparamters used for the ImageNet experiments in Section 3.8. "], "page_idx": 16}, {"type": "text", "text": "540 NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "541 1. Claims   \n542 Question: Do the main claims made in the abstract and introduction accurately reflect the   \n543 paper\u2019s contributions and scope?   \n544 Answer: [Yes]   \n545 Justification: The abstract and introduction is carefully written.   \n546 Guidelines:   \n547 \u2022 The answer NA means that the abstract and introduction do not include the claims   \n548 made in the paper.   \n549 \u2022 The abstract and/or introduction should clearly state the claims made, including the   \n550 contributions made in the paper and important assumptions and limitations. A No or   \n551 NA answer to this question will not be perceived well by the reviewers.   \n552 \u2022 The claims made should match theoretical and experimental results, and reflect how   \n553 much the results can be expected to generalize to other settings.   \n554 \u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals   \n555 are not attained by the paper.   \n556 2. Limitations   \n557 Question: Does the paper discuss the limitations of the work performed by the authors?   \n558 Answer: [Yes]   \n559 Justification: Limitations are discussed in the paper.   \n560 Guidelines:   \n561 \u2022 The answer NA means that the paper has no limitation while the answer No means that   \n562 the paper has limitations, but those are not discussed in the paper.   \n563 \u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n564 \u2022 The paper should point out any strong assumptions and how robust the results are to   \n565 violations of these assumptions (e.g., independence assumptions, noiseless settings,   \n566 model well-specification, asymptotic approximations only holding locally). The authors   \n567 should reflect on how these assumptions might be violated in practice and what the   \n568 implications would be.   \n569 \u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was   \n570 only tested on a few datasets or with a few runs. In general, empirical results often   \n571 depend on implicit assumptions, which should be articulated.   \n572 \u2022 The authors should reflect on the factors that influence the performance of the approach.   \n573 For example, a facial recognition algorithm may perform poorly when image resolution   \n574 is low or images are taken in low lighting. Or a speech-to-text system might not be   \n575 used reliably to provide closed captions for online lectures because it fails to handle   \n576 technical jargon.   \n577 \u2022 The authors should discuss the computational efficiency of the proposed algorithms   \n578 and how they scale with dataset size.   \n579 \u2022 If applicable, the authors should discuss possible limitations of their approach to   \n580 address problems of privacy and fairness.   \n581 \u2022 While the authors might fear that complete honesty about limitations might be used by   \n582 reviewers as grounds for rejection, a worse outcome might be that reviewers discover   \n583 limitations that aren\u2019t acknowledged in the paper. The authors should use their best   \n584 judgment and recognize that individual actions in favor of transparency play an impor  \n585 tant role in developing norms that preserve the integrity of the community. Reviewers   \n586 will be specifically instructed to not penalize honesty concerning limitations.   \n587 3. Theory Assumptions and Proofs   \nQuestion: For each theoretical result, does the paper provide the full set of assumptions and   \n88   \n89 a complete (and correct) proof? ", "page_idx": 17}, {"type": "text", "text": "", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 17}, {"type": "text", "text": "91 Justification: There is no theoretical result in this paper.   \n92 Guidelines: ", "page_idx": 18}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 18}, {"type": "text", "text": "603 4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 18}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 18}, {"type": "text", "text": "Justification: The experiment can be easily reproduced based on the model description, hyperparameter, and any well-known pre-training corpus.   \nGuidelines:   \n\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \n\u2022 While NeurIPS does not require releasing code, the conference does require all submissions to provide some reasonable avenue for reproducibility, which may depend on the nature of the contribution. For example (a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm. (b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully. (c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset). (d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 18}, {"type": "text", "text": "", "page_idx": 18}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 18}, {"type": "text", "text": "646 Answer: [Yes]   \n647 Justification: Code will be released in camera-ready version. All of the data we use is   \n648 public-available.   \n649 Guidelines:   \n650 \u2022 The answer NA means that paper does not include experiments requiring code.   \n651 \u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/   \n652 public/guides/CodeSubmissionPolicy) for more details.   \n653 \u2022 While we encourage the release of code and data, we understand that this might not be   \n654 possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not   \n655 including code, unless this is central to the contribution (e.g., for a new open-source   \n656 benchmark).   \n657 \u2022 The instructions should contain the exact command and environment needed to run to   \n658 reproduce the results. See the NeurIPS code and data submission guidelines (https:   \n659 //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n660 \u2022 The authors should provide instructions on data access and preparation, including how   \n661 to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n662 \u2022 The authors should provide scripts to reproduce all experimental results for the new   \n663 proposed method and baselines. If only a subset of experiments are reproducible, they   \n664 should state which ones are omitted from the script and why.   \n665 \u2022 At submission time, to preserve anonymity, the authors should release anonymized   \n666 versions (if applicable).   \n667 \u2022 Providing as much information as possible in supplemental material (appended to the   \n668 paper) is recommended, but including URLs to data and code is permitted.   \n669 6. Experimental Setting/Details   \n670 Question: Does the paper specify all the training and test details (e.g., data splits, hyper  \n671 parameters, how they were chosen, type of optimizer, etc.) necessary to understand the   \n672 results?   \n673 Answer: [Yes]   \n674 Justification: Hyperparameters are attached in the appendix.   \n675 Guidelines:   \n676 \u2022 The answer NA means that the paper does not include experiments.   \n677 \u2022 The experimental setting should be presented in the core of the paper to a level of detail   \n678 that is necessary to appreciate the results and make sense of them.   \n679 \u2022 The full details can be provided either with the code, in appendix, or as supplemental   \n680 material.   \n681 7. Experiment Statistical Significance   \n682 Question: Does the paper report error bars suitably and correctly defined or other appropriate   \n683 information about the statistical significance of the experiments?   \n684 Answer: [No]   \n685 Justification: For large language models, the variance between different runs is negligible.   \n686 Moreover, the evaluation pipeline is deterministic.   \n687 Guidelines:   \n688 \u2022 The answer NA means that the paper does not include experiments.   \n689 \u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confi  \n690 dence intervals, or statistical significance tests, at least for the experiments that support   \n691 the main claims of the paper.   \n692 \u2022 The factors of variability that the error bars are capturing should be clearly stated (for   \n693 example, train/test split, initialization, random drawing of some parameter, or overall   \n694 run with given experimental conditions).   \n695 \u2022 The method for calculating the error bars should be explained (closed form formula,   \n696 call to a library function, bootstrap, etc.)   \n697 \u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n698 \u2022 It should be clear whether the error bar is the standard deviation or the standard error   \n699 of the mean.   \n700 \u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should   \n701 preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis   \n702 of Normality of errors is not verified.   \n703 \u2022 For asymmetric distributions, the authors should be careful not to show in tables or   \n704 figures symmetric error bars that would yield results that are out of range (e.g. negative   \n705 error rates).   \n706 \u2022 If error bars are reported in tables or plots, The authors should explain in the text how   \n707 they were calculated and reference the corresponding figures or tables in the text.   \n708 8. Experiments Compute Resources   \n709 Question: For each experiment, does the paper provide sufficient information on the com  \n710 puter resources (type of compute workers, memory, time of execution) needed to reproduce   \n711 the experiments?   \n712 Answer: [Yes]   \n713 Justification: The corresponding resources are stated in the paper.   \n714 Guidelines:   \n715 \u2022 The answer NA means that the paper does not include experiments.   \n716 \u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster,   \n717 or cloud provider, including relevant memory and storage.   \n718 \u2022 The paper should provide the amount of compute required for each of the individual   \n719 experimental runs as well as estimate the total compute.   \n720 \u2022 The paper should disclose whether the full research project required more compute   \n721 than the experiments reported in the paper (e.g., preliminary or failed experiments that   \n722 didn\u2019t make it into the paper).   \n723 9. Code Of Ethics   \n724 Question: Does the research conducted in the paper conform, in every respect, with the   \n725 NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines?   \n726 Answer: [Yes]   \n727 Justification: We follow the NeurIPS Code of Ethics in the research.   \n728 Guidelines:   \n729 \u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n730 \u2022 If the authors answer No, they should explain the special circumstances that require a   \n731 deviation from the Code of Ethics.   \n732 \u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consid  \n733 eration due to laws or regulations in their jurisdiction).   \n734 10. Broader Impacts   \n735 Question: Does the paper discuss both potential positive societal impacts and negative   \n736 societal impacts of the work performed?   \n737 Answer: [NA]   \n738 Justification: We work on fundamental research that has no direct societal impact.   \n739 Guidelines:   \n740 \u2022 The answer NA means that there is no societal impact of the work performed.   \n741 \u2022 If the authors answer NA or No, they should explain why their work has no societal   \n742 impact or why the paper does not address societal impact.   \n743 \u2022 Examples of negative societal impacts include potential malicious or unintended uses   \n744 (e.g., disinformation, generating fake profiles, surveillance), fairness considerations   \n745 (e.g., deployment of technologies that could make decisions that unfairly impact specific   \n746 groups), privacy considerations, and security considerations.   \n747 \u2022 The conference expects that many papers will be foundational research and not tied   \n748 to particular applications, let alone deployments. However, if there is a direct path to   \n749 any negative applications, the authors should point it out. For example, it is legitimate   \n750 to point out that an improvement in the quality of generative models could be used to   \n751 generate deepfakes for disinformation. On the other hand, it is not needed to point out   \n752 that a generic algorithm for optimizing neural networks could enable people to train   \n753 models that generate Deepfakes faster.   \n754 \u2022 The authors should consider possible harms that could arise when the technology is   \n755 being used as intended and functioning correctly, harms that could arise when the   \n756 technology is being used as intended but gives incorrect results, and harms following   \n757 from (intentional or unintentional) misuse of the technology.   \n758 \u2022 If there are negative societal impacts, the authors could also discuss possible mitigation   \n759 strategies (e.g., gated release of models, providing defenses in addition to attacks,   \n760 mechanisms for monitoring misuse, mechanisms to monitor how a system learns from   \n761 feedback over time, improving the efficiency and accessibility of ML).   \n762 11. Safeguards   \n763 Question: Does the paper describe safeguards that have been put in place for responsible   \n764 release of data or models that have a high risk for misuse (e.g., pretrained language models,   \n765 image generators, or scraped datasets)?   \n766 Answer: [NA]   \n767 Justification: The paper does not pose safety risks.   \n768 Guidelines:   \n769 \u2022 The answer NA means that the paper poses no such risks.   \n770 \u2022 Released models that have a high risk for misuse or dual-use should be released with   \n771 necessary safeguards to allow for controlled use of the model, for example by requiring   \n772 that users adhere to usage guidelines or restrictions to access the model or implementing   \n773 safety filters.   \n774 \u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors   \n775 should describe how they avoided releasing unsafe images.   \n776 \u2022 We recognize that providing effective safeguards is challenging, and many papers do   \n777 not require this, but we encourage authors to take this into account and make a best   \n778 faith effort.   \n779 12. Licenses for existing assets   \n780 Question: Are the creators or original owners of assets (e.g., code, data, models), used in   \n781 the paper, properly credited and are the license and terms of use explicitly mentioned and   \n782 properly respected?   \n783 Answer: [Yes]   \n784 Justification: We carefully follow the licenses of open-source code, data, and models.   \n785 Guidelines:   \n786 \u2022 The answer NA means that the paper does not use existing assets.   \n787 \u2022 The authors should cite the original paper that produced the code package or dataset.   \n788 \u2022 The authors should state which version of the asset is used and, if possible, include a   \n789 URL.   \n790 \u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n791 \u2022 For scraped data from a particular source (e.g., website), the copyright and terms of   \n792 service of that source should be provided.   \n793 \u2022 If assets are released, the license, copyright information, and terms of use in the   \n794 package should be provided. For popular datasets, paperswithcode.com/datasets   \n795 has curated licenses for some datasets. Their licensing guide can help determine the   \n796 license of a dataset.   \n797 \u2022 For existing datasets that are re-packaged, both the original license and the license of   \n798 the derived asset (if it has changed) should be provided.   \n799 \u2022 If this information is not available online, the authors are encouraged to reach out to   \n800 the asset\u2019s creators.   \n801 13. New Assets   \n802 Question: Are new assets introduced in the paper well documented and is the documentation   \n803 provided alongside the assets?   \n804 Answer: [NA]   \n805 Justification: The paper does not release new assets.   \n806 Guidelines:   \n807 \u2022 The answer NA means that the paper does not release new assets.   \n808 \u2022 Researchers should communicate the details of the dataset/code/model as part of their   \n809 submissions via structured templates. This includes details about training, license,   \n810 limitations, etc.   \n811 \u2022 The paper should discuss whether and how consent was obtained from people whose   \n812 asset is used.   \n813 \u2022 At submission time, remember to anonymize your assets (if applicable). You can either   \n814 create an anonymized URL or include an anonymized zip file.   \n815 14. Crowdsourcing and Research with Human Subjects   \n816 Question: For crowdsourcing experiments and research with human subjects, does the paper   \n817 include the full text of instructions given to participants and screenshots, if applicable, as   \n818 well as details about compensation (if any)?   \n819 Answer: [NA]   \n820 Justification: The paper does not involve crowdsourcing nor research with human subjects.   \n821 Guidelines:   \n822 \u2022 The answer NA means that the paper does not involve crowdsourcing nor research with   \n823 human subjects.   \n824 \u2022 Including this information in the supplemental material is fine, but if the main contribu  \n825 tion of the paper involves human subjects, then as much detail as possible should be   \n826 included in the main paper.   \n827 \u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation,   \n828 or other labor should be paid at least the minimum wage in the country of the data   \n829 collector.   \n830 15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human   \n831 Subjects   \n832 Question: Does the paper describe potential risks incurred by study participants, whether   \n833 such risks were disclosed to the subjects, and whether Institutional Review Board (IRB)   \n834 approvals (or an equivalent approval/review based on the requirements of your country or   \n835 institution) were obtained?   \n836 Answer: [NA]   \n837 Justification: The paper does not involve crowdsourcing nor research with human subjects.   \n838 Guidelines:   \n839 \u2022 The answer NA means that the paper does not involve crowdsourcing nor research with   \n840 human subjects.   \n841 \u2022 Depending on the country in which research is conducted, IRB approval (or equivalent)   \n842 may be required for any human subjects research. If you obtained IRB approval, you   \n843 should clearly state this in the paper.   \n844 \u2022 We recognize that the procedures for this may vary significantly between institutions   \n845 and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the   \n846 guidelines for their institution.   \n847 \u2022 For initial submissions, do not include any information that would break anonymity (if   \n848 applicable), such as the institution conducting the review. ", "page_idx": 19}, {"type": "text", "text": "", "page_idx": 20}, {"type": "text", "text": "", "page_idx": 21}, {"type": "text", "text": "", "page_idx": 22}]