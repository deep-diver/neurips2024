[{"type": "text", "text": "A Combinatorial Algorithm for the Semi-Discrete Optimal Transport Problem ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Pankaj K. Agarwal1, Sharath Raghvendra2, Pouyan Shirzadian3, and Keegan Yao1 ", "page_idx": 0}, {"type": "text", "text": "1Duke University, 2North Carolina State University, 3Virginia Tech ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Optimal Transport (OT, also known as the Wasserstein distance) is a popular metric for comparing probability distributions and has been successfully used in many machine-learning applications. In the semi-discrete 2-Wasserstein problem, we wish to compute the cheapest way to transport all the mass from a continuous distribution $\\mu$ to a discrete distribution $\\nu$ in $\\mathbb{R}^{d}$ for $d\\,\\geq\\,1$ , where the cost of transporting unit mass between points $a$ and $b$ is $d(a,b)=\\lVert a-b\\rVert^{2}$ . When both distributions are discrete, a simple combinatorial framework has been used to find the exact solution (see e.g. [Orlin, STOC 1988]). In this paper, we propose a combinatorial framework for the semi-discrete OT, which can be viewed as an extension of the combinatorial framework for the discrete OT but requires several new ideas. We present a new algorithm that given $\\mu$ and $\\nu$ in $\\mathbb{R}^{\\frac{\\star}{2}}$ and a parameter $\\varepsilon>0$ , computes an $\\varepsilon$ -additive approximate semi-discrete transport plan in $O(n^{4}\\log n\\log{\\frac{1}{\\varepsilon}})$ time (in the worst case), where $n$ is the support-size of the discrete distribution $\\nu$ and we assume that the mass of $\\mu$ inside a triangle can be computed in $O(1)$ time. Our algorithm is significantly faster than the known algorithms, and unlike many numerical algorithms, it does not make any assumptions on the smoothness of $\\mu$ . As an application of our algorithm, we describe a data structure to store a large discrete distribution $\\mu$ (with support size $N$ ) using $O(N)$ space so that, given a query discrete distribution $\\nu$ (with suppo\u221art size $k$ ), an $\\varepsilon$ -additive approximate transport plan can be computed in $O(k^{3}\\sqrt{N}\\log\\frac{1}{\\varepsilon})$ time in 2 dimensions. Our algorithm and data structure extend to higher dimensions as well as to $p$ -Wasserstein problem for any $p\\geq1$ . ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Optimal Transport (OT) is a powerful metric for comparing probability distributions and is used in many machine-learning applications. The semi-discrete optimal transport problem asks for the cheapest transport plan to transport mass from (a possibly continuous) distribution $\\mu$ that is stored compactly (say, using a deep neural network) to a discrete distribution $\\nu$ . In recent years, the semidiscrete OT has been used in data mining [31], image processing [28, 29, 33, 40], computational biology [53], variational inference [7], blue noise generation [21, 51], optics [46], solving PDEs [30, 34], and generative models [8, 9, 19]. ", "page_idx": 0}, {"type": "text", "text": "More formally, a semi-discrete transport plan $\\tau$ between a continuous probability distribution $\\mu$ defined over a compact support $A\\subset\\ensuremath{\\mathbb{R}}^{d}$ and a discrete distribution $\\nu$ with a support set $B$ of $n$ points in $\\mathbb{R}^{d}$ is a distribution over $A\\!\\times\\!B$ whose marginals are dominated by $\\mu$ and $\\nu$ , i.e., $\\tau\\colon A\\!\\times\\!B\\rightarrow\\mathbb{R}_{>0}$ is a transport plan between $\\mu$ and $\\nu$ where $\\begin{array}{r}{\\sum_{b\\in B}\\tau(a,b)\\le\\mu(a)}\\end{array}$ for all $a\\subseteq A$ and $\\begin{array}{r}{\\int_{A}\\tau(a,b)\\,d a\\leq\\bar{\\nu}(b)}\\end{array}$ for all $b\\in B$ . A transport plan $\\tau$ is complete if $\\tau$ transports all mass of $\\mu$ to $\\nu$ . For any fixed $p\\geq1$ , the $p$ -Wasserstein cost of $\\tau$ is given by $\\begin{array}{r}{\\mathfrak{E}(\\tau):=\\left(\\int_{A}\\sum_{b\\in B}\\|a-b\\|^{p}\\tau(a,b)\\,d a\\right)^{1/p}}\\end{array}$ . In the semi-discrete $p$ -Wasserstein problem, the goal is to compute a complete transport plan between $\\mu$ and $\\nu$ of the minimum cost. An optimal plan is referred to as the $W_{p}$ -OT plan and its cost is referred to as the $W_{p}$ -distance. For any parameter $\\varepsilon>0$ , a transport plan $\\tau$ is called an $\\varepsilon$ -close $W_{p}$ -OT plan if $\\mathfrak{C}(\\tau)\\leq\\mathfrak{C}(\\tau^{*})+\\varepsilon.$ , where $\\tau^{*}$ is a $W_{p}$ -OT plan. ", "page_idx": 0}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "An optimal solution for the semi-discrete OT problem can be compactly represented as the weighted Voronoi diagram (also called the Laguerre diagram) with respect to a weight assignment $y(b)$ on every point $b\\in B$ [12]. The choice of weights guarantees that mass at $b$ is equal to the mass of $\\mu$ inside the Voronoi cell (also called the Laguerre cell) of $b$ and the optimal transport plan simply transports the mass at $b$ to the mass inside its Voronoi cell. For 2 dimensions, the weighted Voronoi diagram under the squared Euclidean distance (also known as the power diagram) can be constructed in $O(n\\log n)$ time [24, 57]. For higher dimensions $d>2$ , the construction time would be $O(n^{\\lceil(d+1)/2\\rceil})$ [11]. ", "page_idx": 1}, {"type": "text", "text": "The compact and connected nature of the semi-discrete optimal transport plans makes them attractive for many ML applications; for instance, they can help achieve stability in training GANs and avoid issues such as discontinuities and mode collapse [10, 19, 55], they improve the mapping between continuous latent spaces and discrete data in Variational Autoencoders (VAEs) [9], and also have been used in diffusion-based generative models [42]. However, there are no known exact algorithms for computing semi-discrete optimal transport. Additionally, computing an $\\varepsilon$ -close transport plan is known to be $\\#P$ -Hard with respect to $d$ and $\\log{1/\\varepsilon}$ , i.e., an algorithm with an execution time that is polynomial in $d$ and $\\log{1/\\varepsilon}$ seems unlikely [58]. Due to the intractability of the semi-discrete optimal transport in high dimensions, researchers have considered taking $n$ samples from the model, which is a continuous distribution $\\mu$ , and computing an optimal discrete transport plan between the empirical distribution $\\mu_{n}$ defined on the $n$ samples and $\\nu$ [43]. It has been shown that this empirical $p$ -Wasserstein distance converges to the true semi-discrete $p$ -Wasserstein distance at a rate of $\\bar{n}^{-1/2p}$ [22, 35, 50]; note that the rate of convergence does not depend on the dimension. However, the optimal transport plan from samples is not necessarily a good approximation of the semi-discrete transport plan and may cause biased gradients [14, 19]. ", "page_idx": 1}, {"type": "text", "text": "For the discrete OT problem, there are several near-optimal scalable exact and approximation algorithms [1, 4, 5, 20, 25, 26, 36, 39, 52, 54], some of which extend to very high dimensions. For the semi-discrete OT in low dimensions, despite extensive work, scalable algorithms to find optimal semidiscrete transport plans remain elusive. There are algorithms to compute an $\\varepsilon$ -close semi-discrete transport plan using numerical solvers [12, 15, 17, 21, 37, 38, 41, 48], entropic regularization [6, 16, 32], and multiscale approaches [40, 44]. The execution time of all these algorithms is exponential in both $d$ and $\\log{1/\\varepsilon}$ . Furthermore, their convergence relies on a smoothness parameter of $\\mu$ . For instance, a notable numerical algorithm by Oliker and Prussner [48] assumes that for a point $b\\in B$ , a small change in $y(b)$ will change the mass of $\\mu$ inside the Voronoi cell of $b$ by a proportionately small amount [45, Remark 22]. Under this assumption, their algorithm executes $\\mathrm{poly}(n,1/\\varepsilon)$ iterations, where each iteration requires the computation of a weighted Voronoi diagram which takes $n^{O(d)}$ time. Their algorithm slows down when $\\mu$ is non-smooth and does not even converge when $\\mu$ is a discrete distribution. Furthermore, these methods approximate the transport cost but the transport plan that they compute may not be an approximation of the optimal weighted Voronoi diagram. ", "page_idx": 1}, {"type": "text", "text": "Recently, Agarwal et al. [5] described a cost-scaling paradigm to compute an $\\varepsilon$ -close semi-discrete transport plan. Their algorithm executes $\\log{\\frac{\\Delta}{\\varepsilon}}$ scales, where $\\Delta$ is the diameter of $A\\cup B$ . Within each scale, they create an instance of the discrete OT problem of size $O(n^{5})$ in $\\mathbb{R}^{2}$ (and $n^{O(d)}$ in $\\mathbb{R}^{d}.$ ). Using any existing strongly polynomial primal-dual discrete OT solver, such as the algorithm by Orlin [49], their algorithm computes an exact discrete OT plan for each instance and updates the weights for $B$ . The OT plan computed in the final scale is an $\\varepsilon$ -close transport plan. They show that the weight assigned to any point $b\\in B$ is $\\varepsilon$ away from the optimal weight assignment. The overall execution time of this algorithm is $O(n^{9}\\log{\\frac{\\Delta}{\\varepsilon}})$ in $\\mathbb{R}^{2}$ and $\\begin{array}{r}{n^{O(d)}\\log\\frac{\\Delta}{\\varepsilon}}\\end{array}$ in $d_{\\cdot}$ -dimensions. Furthermore, in the limit, the transport plan of their algorithm converges to the optimal weighted Voronoi diagram. Note that their algorithm does not make any assumptions on $\\mu$ . ", "page_idx": 1}, {"type": "text", "text": "Our Contributions. The following theorem states our main result. ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Theorem 1.1. Let $\\mu$ be a continuous probability distribution defined on a compact set $A\\subset\\mathbb{R}^{2}$ , \u03bd a discrete probability distribution with a support $B\\subset\\mathbb{R}^{2}$ of size $n_{i}$ , and $\\varepsilon>0$ a parameter. Suppose there exists an oracle that, given a triangle $\\varphi$ , returns the mass of $\\mu$ inside $\\varphi$ in $\\Phi$ time. Then, an $\\varepsilon$ -close $W_{2}$ -OT plan between $\\mu$ and $\\nu$ can be computed in $\\begin{array}{r}{O(n^{3}(\\Phi+n\\log n)\\log\\frac{\\Delta}{\\varepsilon})}\\end{array}$ ) time in the worst-case, where $\\Delta$ is the diameter of $A\\cup B$ . ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Similar to the algorithm by Agarwal et al. [5], our algorithm is also based on a cost-scaling approach and executes $O(\\log{\\frac{\\Delta}{\\varepsilon}})$ scales. However, the algorithm within each scale is different. Agarwal et al. create a discrete OT instance with $n^{4}$ vertices and $n^{5}$ edges and use an exact discrete OT algorithm to solve this instance. Instead, we extend the combinatorial primal-dual framework of discrete OT to the continuous space and present an algorithm to find the desired semi-discrete transport plan in $O(n^{4}\\log{n})$ time in the worst case. There are several challenges in extending the combinatorial framework to semi-discrete settings, and overcoming these challenges is one of the main technical contributions of the paper. ", "page_idx": 2}, {"type": "text", "text": "In more detail, in each scale, our algorithm maintains a (partial) transport plan, iteratively computes a set of augmenting paths, and augments the transport plan along such paths until all of the mass is transported. In order to assist in finding augmenting paths, we define a residual graph of size $O(n^{3})$ in the continuous space. Algorithms for discrete OT maintain dual weights for all points in $A\\cup B$ . Unlike in the discrete setting where the vertex set is fixed, the vertex set of our residual graph includes \u201ccontinuous regions\", which evolve over time, and the vertex set of the residual graph changes. Therefore, we are able to maintain weights only for points in $B$ and not for the regions in $A$ Our primal-dual framework (especially the definition of admissibility in Section 2), as well as our algorithm (in particular Sections 3.2 and 3.4) contain a number of novel ideas, carefully designed to address various challenges that arise due to the dynamically changing continuous regions of the residual graph. Like all existing algorithms, our algorithm also requires access to an oracle that, given a query triangle, returns the mass of $\\mu$ inside the triangle. We note that Dijkstra\u2019s shortest path algorithm has been extended to continuous space [47], but we are not aware of any previous work that extends a combinatorial discrete OT framework to continuous space. ", "page_idx": 2}, {"type": "text", "text": "Our algorithm extends to any dimension $d\\geq2$ and any $p\\geq1$ in a straightforward way. For $d>2$ , the algorithm in Theorem 1.1 can be shown to have an execution time of $\\begin{array}{r}{\\bar{O}(n^{d+1}(\\Phi\\!+\\!n\\log n)\\log\\frac{\\Delta}{\\varepsilon})}\\end{array}$ . Note that the runtime of Oliker-Prussner\u2019s algorithm has a factor $1/\\varepsilon$ while ours has only $\\log{17}\\dot{\\varepsilon}$ . Unlike their algorithm, ours does not make any assumptions on the smoothness of $\\mu$ . Furthermore, similar to Agarwal et al. [5], our transport plan approximates an optimal weighted Voronoi diagram within a small additive factor. ", "page_idx": 2}, {"type": "text", "text": "One consequence of our algorithm is that we can use it to design a data structure that answers $\\varepsilon$ -close optimal transport queries efficiently. More precisely, consider a large distribution $\\mu$ with support of size $N$ . We can preprocess this distribution into a data structure that can return the total weight of points inside a query triangle in $O(N^{1-1/d})$ time [59]. By using Theorem 1.1, we can report an $\\varepsilon$ -additive approximate transport plan to any query distribution $\\nu$ with support of size $k$ in $\\begin{array}{r}{\\bar{O(k^{d+1}N^{1-1/d}\\log\\frac{\\bar{\\Delta}}{\\varepsilon})}}\\end{array}$ time. Note that this query time is sub-linear in $N$ . There has been some work on computing 1-Wasserstein distance approximately in sub-linear time and for answering nearest neighbor queries under 1-Wasserstein distance [13], but these algorithms have larger error and do not extend to 2-Wasserstein distance. ", "page_idx": 2}, {"type": "text", "text": "Theorem 1.2. Let $\\mu$ be a discrete probability distribution with a support $A\\subset\\ensuremath{\\mathbb{R}}^{d}$ of size $N$ . The distribution $\\mu$ can be preprocessed, in $O(N\\log N)$ time, into an $O(N)$ size data structure so that for a discrete probability distribution $\\nu$ with a support $B\\subset\\mathbb{R}^{d}$ of size $k$ , and a parameter $\\varepsilon>0$ , an $\\varepsilon$ -close $W_{2}$ -OT plan between $\\mu$ and $\\nu$ can be computed in $\\begin{array}{r}{O(\\mathring{k}^{d+1}(N^{1-1/d}+k\\log k)\\log\\frac{\\Delta}{\\varepsilon})}\\end{array}$ ) time, where $\\Delta$ is the diameter of $A\\cup B$ . ", "page_idx": 2}, {"type": "text", "text": "If the points in the supports of $\\mu$ and $\\nu$ have integer coordinates and the masses on them are rational numbers, we can adapt our data structure in Theorem 1.2 to compute an exact $W_{p}$ -OT plan between $\\mu$ and $\\nu$ in $\\begin{array}{r}{O(k^{d+1}(N^{1-1/d}+k\\log k)\\log\\frac{\\Delta}{\\varepsilon})}\\end{array}$ time for any fixed even value of $p$ . ", "page_idx": 2}, {"type": "text", "text": "We also note that in 2-dimensions, for $k<N^{1/4}$ , we can use the data structure to compute an exact discrete OT plan for any distribution $\\nu$ in $O(k^{3}N^{1/2}\\log\\Delta)$ time that is faster than any existing OT algorithm that takes $(N k)^{1+o(1)}$ time [3, 18]. ", "page_idx": 2}, {"type": "text", "text": "For simplicity in presentation, we restrict our presentation to $d=2$ and $p=2$ . ", "page_idx": 2}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/cdee8394a71aa6ebdb47f456705d92bab4f9ebad8ba7ef9daa6195742e1dcf35.jpg", "img_caption": ["Figure 1: (left) The $\\delta$ -expanded Voronoi cell $V_{b}^{\\delta}$ of $b$ (green shaded area), (middle) the partitioning $\\mathcal{X}_{\\delta}$ , and (right) the green region shows the mass of $\\mu$ that is transported to $b$ , the red points show the representative points of regions, and the purple segments show the compressed transport plan $\\hat{\\tau}$ . "], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "2 Combinatorial Framework ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "In this section, we extend the combinatorial framework used by discrete OT algorithms to the semidiscrete settings. Let $\\mu$ be a continuous probability distribution defined over a compact support $A\\subset\\mathbb{R}^{2}$ and $\\nu$ be a discrete distribution with a support set $B$ of $n$ points in $\\mathbb{R}^{2}$ . ", "page_idx": 3}, {"type": "text", "text": "Weighted Voronoi diagram. For any pair of points $a,b\\in\\mathbb{R}^{2}$ , let $\\mathrm{d}(a,b)\\,=\\,\\|a-b\\|^{2}$ . Given a weight function $y:B\\to\\mathbb{R}_{\\geq0}$ on the points in $B$ , the weighted distance $d_{y}(a,b)$ from a point $b\\in B$ to any point $a\\in\\mathbb{R}^{2}$ is defined as $\\mathrm{d}_{y}(a,b)=\\mathrm{d}(a,b)-y(b)$ . For a point $b\\in B$ , the Voronoi cell of $b$ is the locus of all points with $b$ as their weighted nearest neighbor; more formally, ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\operatorname{Vor}_{y}(b)=\\{a\\in\\mathbb{R}^{2}\\mid\\mathrm{d}_{y}(a,b)\\leq\\mathrm{d}_{y}(a,b^{\\prime}),\\forall b^{\\prime}\\in B\\}.\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The weighted Voronoi diagram $\\mathrm{VD}_{y}(B)$ of the points $B$ with weights $y(\\cdot)$ is the decomposition of $\\mathbb{R}^{2}$ induced by Voronoi cells. There exists a weight function $y(\\cdot)$ for $B$ such that $\\mu(\\operatorname{Vor}_{y}(b))=\\nu(b)$ for every point $b\\in B$ , and an optimal semi-discrete transport plan transports the mass of $\\nu$ at each point $b\\in B$ to the mass of $\\mu$ in $\\operatorname{Vor}_{y}(b)\\cap A$ [12]. ", "page_idx": 3}, {"type": "text", "text": "$\\delta$ -expanded Voronoi cell. Consider a weight function $y(\\cdot)$ for the points in $B$ . For any point $b\\in B$ and a parameter $\\delta>0$ , consider the following weight function $y_{b}^{\\delta}$ . ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{y_{b}^{\\delta}(b^{\\prime})=\\left\\{y(b^{\\prime})+\\delta,\\qquad b^{\\prime}=b,\\right.}\\\\ {y(b^{\\prime}),\\qquad\\qquad b^{\\prime}\\neq b.}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "The $\\delta$ -expanded Voronoi cell of $b$ , denoted by $V_{b}^{\\delta}$ , is simply the Voronoi cell of $b$ in the weighted Voronoi diagram $\\mathrm{VD}_{y_{b}^{\\delta}}(B)$ of the point set $B$ with weights $y_{b}^{\\delta}(\\cdot)$ . See Figure 1 (left). ", "page_idx": 3}, {"type": "text", "text": "$\\delta$ -feasibility. Any (possibly partial) transport plan $\\tau$ between $\\mu$ and $\\nu$ along with a weight function $y(\\cdot)$ for the points in $B$ is $\\delta$ -feasible if ", "page_idx": 3}, {"type": "text", "text": "(F1) fcoerl l .air $(a,b)\\in A\\!\\times\\!B$ with $\\tau(a,b)>0$ , the point $a$ lies inside the $2\\delta$ -expanded Voronoi $V_{b}^{2\\delta}$ ", "page_idx": 3}, {"type": "text", "text": "For any $\\delta$ -feasible transport plan $\\tau,y(\\cdot)$ , if $\\tau$ is a complete transport plan between $\\mu$ and $\\nu$ , then $\\tau,y(\\cdot)$ is called a $\\delta$ -optimal transport plan. Recall that any optimal transport plan transports the mass at $b$ to its weighted Voronoi cell. In a $\\delta$ -optimal transport plan, however, the mass of each point $b\\in B$ is transported inside a $2\\delta$ -expansion of the Voronoi cell of $b$ . This introduces an additive increase of at most $2\\delta$ in the cost of the transport plan. ", "page_idx": 3}, {"type": "text", "text": "Lemma 2.1. Any $\\delta$ -optimal transport plan $\\tau,y(\\cdot)$ between $\\mu$ and $\\nu$ is $2\\delta$ -close. ", "page_idx": 3}, {"type": "text", "text": "See Appendix A for a proof. Next, given a $\\delta$ -feasible transport plan $\\tau,y(\\cdot)$ , we define a residual graph and an augmenting path. We also introduce the process of augmenting $\\tau$ along an augmenting path, which allows us to increase the mass transported by $\\tau$ . ", "page_idx": 3}, {"type": "text", "text": "Residual graph. Given a $\\delta$ -feasible (possibly partial) transport plan $\\tau,y(\\cdot)$ , we construct a residual graph $\\mathcal{G}_{\\delta}$ by first partitioning the support $A$ of $\\mu$ into regions to form the vertex set of $\\mathcal{G}_{\\delta}:=\\mathcal{G}(\\tau,y,\\delta)$ and then defining a set of directed edges. ", "page_idx": 4}, {"type": "text", "text": "Vertex set. For each point $b\\in B$ , consider the Voronoi cell of $b$ and its $\\delta$ - and $2\\delta$ -expansions $V_{b}^{\\delta}$ and $V_{b}^{2\\delta}$ . Let $\\mathcal{X}_{\\delta}$ denote the arrangement [2] of these $3n$ cells across all $n$ points of $B$ . See Figure 1 (middle). For each region $\\varphi$ in this arrangement, pick an arbitrary representative point $r_{\\varphi}$ inside $\\varphi$ and assign it a mass of $\\mu_{r_{\\varphi}}:=\\mu(\\varphi)$ , where $\\textstyle\\mu(\\varphi)=\\int_{\\varphi}\\mu(a)\\,d a$ denotes the mass of $\\mu$ inside $\\varphi$ . Let $A_{\\delta}$ denote the set of representative points of all regions in $\\boldsymbol{\\mathcal{X}}_{\\delta}$ . The vertex set of $\\mathcal{G}_{\\delta}$ is the point set $A_{\\delta}\\cup B$ along with a source vertex $s$ and a sink vertex $t$ . We refer to any point $b\\in B$ whose mass is not fully transported by $\\tau$ as a free point and define its excess as the amount of mass of $b$ that is not transported by $\\tau$ , i.e., $\\begin{array}{r}{\\mathrm{ex}\\dot{(}b\\mathbf{)}=\\nu\\dot{(}b\\mathbf{)}\\stackrel{\\scriptscriptstyle{-}}{-}\\int_{a\\in A}\\tau(a,b)\\,d a}\\end{array}$ . Similarly, any point $r_{\\varphi}\\in A_{\\delta}$ is free if $\\tau$ does not fully transport the mass into the region $\\varphi$ , and its excess is defined as $\\begin{array}{r}{\\mathrm{ex}(r_{\\varphi})=\\mu_{r_{\\varphi}}-\\sum_{b^{\\prime}\\in B}\\tau(\\varphi,b^{\\prime})}\\end{array}$ . ", "page_idx": 4}, {"type": "text", "text": "Edge set. For each pair $(r_{\\varphi},b)\\in A_{\\delta}\\times B.$ , if $\\tau(\\varphi,b)>0$ , we add a backward edge directed from $r_{\\varphi}$ to $b$ in the residual graph. Furthermore, if $r_{\\varphi}\\in V_{b}^{2\\delta}$ , we add a forward edge directed from $b$ to $r_{\\varphi}$ in $\\mathcal{G}_{\\delta}$ . Additionally, we add a forward edge from the source $s$ to every free point $b\\in B$ and a backward edge directed from every free vertex $r_{\\varphi}$ to $t$ . This completes the description of the residual graph. ", "page_idx": 4}, {"type": "text", "text": "Lemma 2.2. For any $\\delta>0$ and a $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ , the residual graph $\\mathcal{G}_{\\delta}$ has $O(n^{2})$ vertices and $O(n^{3})$ edges. ", "page_idx": 4}, {"type": "text", "text": "While describing our algorithm, it is useful to have the definition of weighted distance for all the backward edges, including those incident on $t$ . Therefore, we extend the definition of weighted distance to any edge $(r_{\\varphi},t)$ as follows. Let $b_{\\varphi}$ denote the weighted nearest neighbor of $r_{\\varphi}$ in $B$ , i.e., $\\begin{array}{r}{b_{\\varphi}:=\\operatorname*{min}_{b\\in B}d_{y}(r_{\\varphi},b)}\\end{array}$ . Define $d_{y}(r_{\\varphi},t):=d_{y}(r_{\\varphi},b_{\\varphi})+\\delta$ . ", "page_idx": 4}, {"type": "text", "text": "Compressing a semi-discrete transport plan. Given a semi-discrete transport plan $\\tau$ that transports mass from $B$ to $A$ , we construct a transport plan $\\hat{\\tau}$ from $B$ to $A_{\\delta}$ as follows. For each pair $(r_{\\varphi},b)\\in$ $A{\\boldsymbol{\\delta}}\\times B$ , let $\\hat{\\tau}(r_{\\varphi},b):=\\tau(\\varphi,b)$ , i.e., we assign the entire mass transported from $b$ to $\\varphi$ to the pair $(r_{\\varphi},b)$ (Figure 1 (right)). We refer to the transport plan $\\hat{\\tau}$ as the compressed transport plan. ", "page_idx": 4}, {"type": "text", "text": "Lemma 2.3. For any $\\delta$ -feasible semi-discrete transport plan $\\tau,y(\\cdot)$ , the compressed transport plan $\\hat{\\tau}$ along with weights $y(\\cdot)$ is also $\\delta$ -feasible. ", "page_idx": 4}, {"type": "text", "text": "Conversely, consider a transport plan $\\hat{\\tau},y(\\cdot)$ from $B$ to $A_{\\delta}$ . One can compute a semi-discrete transport plan $\\tau$ that, given a pair $(r_{\\varphi},b)\\in A_{\\delta}\\times B$ , arbitrarily transports a mass of $\\hat{\\tau}(r_{\\varphi},b)$ from $b$ to $\\varphi$ . ", "page_idx": 4}, {"type": "text", "text": "Lemma 2.4. Any $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ from $B$ to $A_{\\delta}$ can be converted into a $\\delta$ -feasible semi-discrete transport plan $\\tau$ from $B$ to $A$ . ", "page_idx": 4}, {"type": "text", "text": "We say that any compressed transport plan $\\hat{\\tau}$ is a forest if the edges transporting a positive mass in $\\hat{\\tau}$ do not create an undirected cycle. ", "page_idx": 4}, {"type": "text", "text": "Augmentation. Given the residual graph $\\mathcal{G}_{\\delta}$ for a $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ , an alternating path (resp. alternating cycle) is a directed path (resp. directed cycle) in $\\mathcal{G}_{\\delta}$ . Note that, in any directed path (resp. cycle) in the residual graph, the edges alternate between forward and backward edges. An augmenting path $P\\,=\\,\\langle s,b_{1},r_{1},\\ldots,r_{k},t\\,=\\,b_{k+1}\\rangle$ is a directed path from the source vertex $s$ to the sink vertex $t$ in the residual graph. By construction, the vertex $b_{1}$ and the vertex $r_{k}$ are free vertices in the residual graph. One can augment $\\hat{\\tau}$ along $P$ as follows. Define the bottleneck capacity of the augmenting path $P$ as $\\begin{array}{r}{\\mathrm{bc}(P):=\\mathrm{min}\\{\\mathrm{ex}(b_{1}),\\mathrm{ex}(r_{k}),\\mathrm{min}_{i\\in[1,k-1]}\\,\\hat{\\tau}(r_{i},b_{i+1})\\}}\\end{array}$ . To augment $\\hat{\\tau}$ along $P$ , set $\\hat{\\tau}(r_{i},b_{i})\\,\\gets\\,\\hat{\\tau}(r_{i},b_{i})\\,+\\,\\mathrm{bc}(P)$ for each forward edge $(b_{i},r_{i})\\,\\in\\,P$ and $\\hat{\\tau}(r_{i},b_{i+1})\\gets\\hat{\\tau}(r_{i},b_{i+1})-\\mathrm{bc}(\\cal P)$ for each backward edge $(r_{i},b_{i+1})\\in P$ . ", "page_idx": 4}, {"type": "text", "text": "Lemma 2.5. The transport plan obtained after augmenting a $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ along any augmenting path $P$ in the residual graph is $\\delta$ -feasible. ", "page_idx": 4}, {"type": "text", "text": "Consider the following straightforward way to augment a semi-discrete transport plan. Given a $\\delta$ -feasible semi-discrete transport plan $\\tau$ , $y(\\cdot)$ , we can compute an augmenting path $P$ in the residual graph and augment the compressed transport plan $\\hat{\\tau}$ along $P$ . From Lemmas 2.3 and 2.5, $\\hat{\\tau}$ remains $\\delta$ - feasible and from Lemma 2.4, the updated $\\delta$ -feasible transport plan $\\hat{\\tau}$ can be converted to a $\\delta\\!\\cdot$ -feasible semi-discrete transport plan as desired. To obtain a complete transport plan, one can iteratively apply this procedure until there are no augmenting paths in the residual graph; however, this may result in an unbounded number of iterations. To obtain an efficient algorithm, we iteratively compute a set of special augmenting paths called the \u201cadmissible\" augmenting paths and augment the transport plan along these paths. By doing so, we can reduce the number of iterations to $O(n)$ . ", "page_idx": 4}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/6c04aaf4794091c3035e587506054dafb567988f5547d9bfff4598342d85bb7c.jpg", "img_caption": ["Figure 2: (left) Three admissible triples $(b_{1},r_{1},b_{2}),(b_{1},r_{2},b_{2})$ , and $(b_{1},r_{3},b_{2})$ , where solid (resp. dashed) lines show backward (resp. forward) edges, and (right) an admissible augmenting path. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "", "page_idx": 5}, {"type": "text", "text": "Admissibility. Suppose $\\hat{\\tau},y(\\cdot)$ is a $\\delta\\!\\cdot$ -feasible transport plan between $\\mu$ and $\\nu$ . For any pair of points $b_{1},b_{2}\\in B$ and any region $\\varphi\\in\\mathcal X_{\\delta}$ such that $\\hat{\\tau}(r_{\\varphi},b_{2})>0$ , the triple $(b_{1},r_{\\varphi},b_{2})$ is admissible if $d_{y}(r_{\\varphi},b_{1})<d_{y}(r_{\\varphi},b_{2})^{1}$ . See Figure 2 (left). Note that an admissible triple $\\left(b_{1},r_{\\varphi},b_{2}\\right)$ forms by a forward edge followed by a backward edge in the residual graph satisfying $d_{y}(r_{\\varphi},b_{1})<d_{y}(r_{\\varphi},b_{2})$ Intuitively, for any admissible triple $\\langle b_{1},r_{\\varphi},b_{2}\\rangle$ , the mass of $\\mu$ inside $r_{\\varphi}$ is transported from $b_{2}$ but $b_{1}$ is nearer to $r_{\\varphi}$ than $b_{2}$ (with respect to the weighted distances). ", "page_idx": 5}, {"type": "text", "text": "We extend the definition of admissibility to augmenting paths and alternating cycles as follows. Any augmenting path (resp. alternating cycle) $P\\ {\\stackrel{\\lbrack}{=}}\\ \\langle b_{1},r_{1},{\\bar{b}}_{2},\\ldots,r_{k},b_{k+1}\\rangle$ is admissible if all triples $(\\bar{b_{i}},\\bar{r_{i}},\\bar{b_{i+1}}\\bar{)}$ , $i\\,\\in\\,[1,k]$ , are admissible. In Figure 2(right), $b_{2}$ transports mass to $r_{1}$ , and $b_{1}$ is its weighted nearest neighbor. By augmenting along this admissible path, we increase $\\hat{\\tau}(r_{1},b_{1})$ and reduce $\\hat{\\tau}(r_{1},b_{2})$ , thereby transporting more mass to $r_{1}$ from its weighted nearest neighbor. ", "page_idx": 5}, {"type": "text", "text": "3 Algorithm ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "In this section, we present our cost-scaling algorithm that uses the combinatorial framework from Section 2 to compute an $\\varepsilon$ -close semi-discrete OT plan. Classical discrete OT algorithms assign weights to points in $A\\cup B$ and use them to identify a large set of augmenting paths. Their efficiency critically relies on the acyclicity of the \u201csearch\u201d graph. In contrast, during the execution of our algorithm, a change in the weights of $B$ creates a new weighted Voronoi diagram, which in turn changes $A_{\\delta}$ , the discrete representation of $A$ , and thus the vertex set of the residual graph. Since $A_{\\delta}$ may change significantly in each iteration during the execution of our algorithm, we cannot maintain weights for them. This creates significant challenges as the algorithm searches for augmenting paths (See Section 3.2 for details). Furthermore, the updated residual graph may have cycles. We introduce additional steps in our algorithm to eliminate these cycles (See Section 3.4 for details). First, we present an overview of our algorithm and then present the details. ", "page_idx": 5}, {"type": "text", "text": "3.1 Overview ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "The algorithm runs for $O(\\log{\\frac{\\Delta}{\\varepsilon}})$ scales, where $\\Delta$ is the diameter of $A\\cup B$ . In each scale $\\delta$ , our algorithm maintains a transport plan $\\hat{\\tau}_{\\delta}$ and a weight $y(b)$ for every point $b\\in B$ . Initially, set $\\delta=\\Delta^{2}$ and define $y(b)=0$ for all $b\\in B$ . In each scale $\\delta$ , execute the following steps. ", "page_idx": 5}, {"type": "text", "text": "1. Initialization: Set $\\tau_{\\delta}$ to be an empty transport plan. Compute the residual graph $\\mathcal{G}_{\\delta}$ and the compressed transport plan $\\hat{\\tau}_{\\delta}$ with respect to $\\tau_{\\delta},y(\\cdot)$ .   \n2. Iterations: While $\\hat{\\tau}_{\\delta}$ is not a complete transport plan:   \n(i) Compute a set of admissible augmenting paths in the residual graph $\\mathcal{G}_{\\delta}$ and augment $\\hat{\\tau}_{\\delta}$ along these paths using the SEARCHANDAUGMENT procedure described in Section 3.2. At the end of this step, there are no admissible augmenting paths in the residual graph.   \n(ii) Adjust the weights of all points of $B$ that are reachable from the source by admissible paths by $\\delta$ and recompute the set $A_{\\delta}$ , the residual graph $\\mathcal{G}_{\\delta}$ , and the compressed transport plan $\\hat{\\tau}_{\\delta}$ using the INCREASEWEIGHTS procedure described in Section 3.3.   \n(iii) Update the compressed transport plan $\\hat{\\tau}_{\\delta}$ and the residual graph using the ACYCLIFY procedure described in Section 3.4, so that the transport plan $\\hat{\\tau}_{\\delta}$ is a forest and the residual graph does not have any admissible cycles. Set ", "page_idx": 5}, {"type": "text", "text": "", "page_idx": 6}, {"type": "text", "text": "After the execution of a scale $\\delta\\leq\\varepsilon/2$ , our algorithm terminates by returning a complete semi-discrete transport plan $\\tau_{\\delta}$ obtained from the compressed complete transport plan $\\hat{\\tau}_{\\delta}$ (using Lemma 2.4). ", "page_idx": 6}, {"type": "text", "text": "Invariants. As shown in Section 4 below, our algorithm iteratively updates the weights $y(\\cdot)$ and the transport plan $\\hat{\\tau}_{\\delta}$ while maintaining the following invariants: ", "page_idx": 6}, {"type": "text", "text": "(I1) The transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ is $\\delta$ -feasible, and   \n(I2) At the start of each iteration, the transport plan $\\hat{\\tau}_{\\delta}$ is a forest and there are no admissible cycles in the residual graphs. ", "page_idx": 6}, {"type": "text", "text": "Remark. The algorithm by Agarwal et al. [5] creates a discrete instance in each scale of the algorithm by computing the arrangement of the $\\delta\\!\\cdot$ -, $2\\delta.$ , . . ., and $(4n+1)\\delta$ -expanded Voronoi cells of each point $b\\in B$ . Instead of using such a fine partition to create a discrete instance with $O(n^{5})$ edges, we work directly with the continuous space, maintain a much smaller residual graph with $O^{\\stackrel{.}{(}n^{3}{\\bar{)}}}$ edges, and use our semi-discrete combinatorial framework to find a transport plan. ", "page_idx": 6}, {"type": "text", "text": "3.2 SEARCHANDAUGMENT Procedure ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The SEARCHANDAUGMENT procedure executes a partial DFS-style search to identify a set of admissible augmenting paths and augments the transport plan along these paths. The SEARCHANDAUGMENT procedure is somewhat similar in style to the blocking flow procedure in Dinic\u2019s max-flow algorithm [23] or the partial-DFS procedure in Gabow-Tarjan\u2019s algorithm [27], both of which rely on the property that there are no admissible cycles in the residual graph. Unlike these algorithms, in our case, if we augment along an arbitrary admissible augmenting path, we may create an admissible cycle. See Figure 3. ", "page_idx": 6}, {"type": "text", "text": "We overcome this challenge by carefully calibrating the search algorithm in two ways. First, we begin our search from the free regions instead of the free points of $B$ . Thus, we reverse the direction of all the edges of the residual graph and begin our search from the sink $t$ . Second, we explore all forward edges incident on a region in the increasing order of their weighted distance. This order of processing edges ensures that no admissible cycles are created and that there are no more admissible augmenting paths in the residual graph after the SEARCHANDAUGMENT procedure terminates. We provide the details below. ", "page_idx": 6}, {"type": "text", "text": "Let $\\left\\{\\overleftarrow{\\boldsymbol{\\mathscr{G}}_{\\delta}}\\right.$ be the graph formed by reversing the direction of all the edges of $\\mathcal{G}_{\\delta}$ . We conduct our search starting from the sink $t$ in the graph $\\overleftarrow{\\bar{\\mathcal{G}}_{\\delta}}$ . Initially, mark all points of $B$ and all backward edges as unvisited, define $U:=B$ as the set of unvisited points of $B$ , and $Q=\\langle t=b_{0}\\rangle$ as the search path that the procedure grows. Execute the following steps until the search path $Q$ becomes empty. ", "page_idx": 6}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "1. If $Q=\\langle t=b_{0},r_{1},b_{1},\\ldots,r_{i},b_{i}\\rangle{\\mathrm{~for~some~}}i\\geq0,$ (a) If there is an edge from $b_{i}$ to $s$ in $\\left\\{\\overline{{\\mathcal{G}_{\\delta}}}\\right.$ (i.e., $b_{i}$ is a free point), then ${\\cal P}\\;=\\;$ $\\langle s,b_{i},r_{i},\\ldots,r_{1},t\\rangle$ is an augmenting path in $\\mathcal{G}_{\\delta}$ . Augment $\\hat{\\tau}_{\\delta}$ along $P$ and set $Q=\\langle t=b_{0}\\rangle$ . (b) Assume there is not edge from $b_{i}$ to $s$ . If there is an unvisited edge $(b_{i},r)$ in $\\left\\{{\\overline{{\\mathcal{G}_{\\delta}}}}\\right.$ , then add $r=r_{i+1}$ to $Q$ . Otherwise, mark $b_{i}$ as visited and remove $b_{i}$ from $U$ and $Q$ . ", "page_idx": 6}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/62aabb7e9f92f2d02aff4a40f4fb13ca62a7cda8abfa3d7771c1d3a565474a0f.jpg", "img_caption": [], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "Figure 3: (left) An arbitrary admissible augmenting path $\\langle s,b_{1},r_{\\varphi_{1}},b_{2}\\rangle$ (blue path), and (right) an admissible cycle $\\langle b_{1},r_{\\varphi_{2}},b_{3},r_{\\varphi_{3}},b_{4},r_{\\varphi_{1}}\\rangle$ (red cycle) formed after augmentation. ", "page_idx": 7}, {"type": "text", "text": "2. If $Q\\,=\\,\\left<t\\,=\\,b_{0},r_{1},b_{1},\\ldots,b_{i},r_{i+1}\\right>$ for some $i\\,\\geq\\,0$ , let $\\begin{array}{r}{b\\,:=\\,\\arg\\operatorname*{min}_{b^{\\prime}\\in U}d_{y}(r_{i+1},b^{\\prime})}\\end{array}$ denote the unvisited point with the minimum weighted distance to ${r_{i+1}}^{2}$ . (a) If $(b,r_{i+1},b_{i})$ is admissible, i.e., $d_{y}(r_{i+1},b)<d_{y}(r_{i+1},b_{i})$ , then add $b$ as $b_{i+1}$ to $Q$ . (b) Otherwise, remove $r_{i+1}$ from $Q$ and mark the edge $(b_{i},r_{i+1})$ as visited. ", "page_idx": 7}, {"type": "text", "text": "The algorithm terminates when the search path $Q$ becomes empty, i.e., the procedure marked $t$ as visited and removed it from $Q$ . The following lemma shows the properties of the SEARCHANDAUGMENT procedure. ", "page_idx": 7}, {"type": "text", "text": "Lemma 3.1. Suppose invariants $(I I)$ and $(I2)$ hold at the start of the SEARCHANDAUGMENT procedure. Then, during the execution of the SEARCHANDAUGMENT procedure, ", "page_idx": 7}, {"type": "text", "text": "(S1) the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remains \u03b4-feasible,   \n(S2) any point $b\\in B$ (resp. backward edge $(r,b),$ ) marked as visited will not form an admissible augmenting path during the execution of the procedure, and   \n(S3) there are no admissible cycles in the residual graph. ", "page_idx": 7}, {"type": "text", "text": "3.3 INCREASEWEIGHTS Procedure ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "The INCREASEWEIGHTS procedure adjusts the weights of $B$ leading to the formation of admissible augmenting paths. The INCREASEWEIGHTS procedure performs a DFS on the residual graph $\\mathcal{G}_{\\delta}$ to compute a set $\\kappa$ of all vertices of $B$ that are reachable from the source vertex $s$ by admissible paths. It increases the weights of all points in $\\kappa$ by $\\delta$ (expand their Voronoi cells). Recall that the set $A_{\\delta}$ , and thus $\\mathcal{G}_{\\delta}$ as well as the compressed transport plan $\\hat{\\tau}_{\\delta}$ depend on the weights of $B$ . The procedure then recomputes $A_{\\delta}$ , $\\mathcal{G}_{\\delta}$ , and $\\hat{\\tau}_{\\delta}$ from $\\tau_{\\delta}$ . See Appendix B.2 for complete details of the INCREASEWEIGHTS procedure. The following lemma states the properties of the INCREASEWEIGHTS procedure. ", "page_idx": 7}, {"type": "text", "text": "Lemma 3.2. Suppose invariant $(I I)$ holds at the start of the INCREASEWEIGHTS procedure. Then, during the execution of the INCREASEWEIGHTS procedure, ", "page_idx": 7}, {"type": "text", "text": "(W1) the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remain $\\delta$ -feasible,   \n(W2) the weight of each free point $b\\in B$ increases by $\\delta$ , and   \n(W3) the weight of each point $b\\in B$ with free regions inside $V_{b}^{\\delta}$ remains unchanged. ", "page_idx": 7}, {"type": "text", "text": "3.4 ACYCLIFY Procedure ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "The change in the weights of $B$ in the INCREASEWEIGHTS procedure requires us to recompute the residual graph and the compressed transport plan. This recomputation may potentially create a cycle in the transport plan or an admissible cycle in $\\mathcal{G}_{\\delta}$ . The ACYCLIFY procedure eliminates such cycles and ensures that the invariant (I2) holds at the start of the next iteration. Converting the transport plan into a forest is critical for the efficiency of the SEARCHANDAUGMENT procedure while eliminating admissible cycles is essential for the correctness of the SEARCHANDAUGMENT procedure. The procedure executes the following steps. First, use the dynamic tree structure by Sleator and Tarjan [56] to make the transport plan $\\hat{\\tau}_{\\delta}$ a forest. Then, execute a partial DFS search from each unvisited point $b\\in B$ similar to the one described in the SEARCHANDAUGMENT procedure to detect admissible cycles. Upon finding an admissible cycle, cancel the cycle right away, remove the vertices of the cycle from the search path, and continue the search. When all vertices are visited, no admissible cycles are remaining in the residual graph. Since canceling admissible cycles could have introduced new cycles in the transport plan, repeat the first step to update $\\hat{\\tau}_{\\delta}$ and make it a forest. See Appendix B.3 for details. The following lemma shows the properties of the ACYCLIFY procedure. ", "page_idx": 7}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "Lemma 3.3. Suppose invariant $(I I)$ holds at the start of the ACYCLIFY procedure. Then, during the   \nexecution of the ACYCLIFY procedure, (A1) the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remains $\\delta$ -feasible, and (A2) the transport plan $\\hat{\\tau}_{\\delta}$ is a forest and there are no admissible cycles in the residual graph. ", "page_idx": 8}, {"type": "text", "text": "This completes the description of our algorithm. ", "page_idx": 8}, {"type": "text", "text": "4 Algorithm Analysis ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In this section, we first prove the correctness of our algorithm and then analyze its runtime. ", "page_idx": 8}, {"type": "text", "text": "Proof of invariants $(\\mathbf{I1})$ and (I2). For any scale $\\delta$ , the initial transport plan $\\hat{\\tau}_{\\delta}$ is empty. Therefore, $\\hat{\\tau}_{\\delta}$ along with the weights $y(\\cdot)$ is $\\delta$ -feasible. By properties (S1), (W1), and (A1), the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remains $\\delta$ -feasible in each iteration of our algorithm, and therefore, invariant (I1) holds. The invariant (I2) is a direct consequence of property (A2) in Lemma 3.3. ", "page_idx": 8}, {"type": "text", "text": "Proof of Correctness. From Invariant (I1), in each scale $\\delta$ , our algorithm maintains a $\\delta$ -feasible transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ during its execution. The while loop in Step 2 breaks when $\\hat{\\tau}_{\\delta}$ is a complete transport plan. Therefore, $\\hat{\\tau}_{\\delta}$ along with weights $y(\\cdot)$ is $\\delta$ -optimal. From Lemma 2.4, one can convert $\\hat{\\tau}_{\\delta}$ into a $\\delta$ -optimal semi-discrete transport plan $\\tau_{\\delta}$ . Given that our algorithm terminates when $\\delta\\leq\\varepsilon/2$ , from Lemma 2.1, the transport plan returned by our algorithm is $\\varepsilon$ -close, as desired. ", "page_idx": 8}, {"type": "text", "text": "Efficiency of the algorithm. The SEARCHANDAUGMENT procedure runs a partial DFS on the residual graph with $\\breve{O}(n^{3})$ edges. Upon finding an augmenting path $P$ , the procedure augments the transport plan along $P$ in $O(|P|)$ time. In Lemma C.1, we use invariant (I2) to show that the total length of all augmenting paths found by the procedure is $O(n^{3})$ . Hence, the running time of the SEARCHANDAUGMENT procedure is $\\dot{O}(n^{3})$ . The INCREASEWEIGHTS procedure stores a sorted list of neighbors for each region and executes a DFS procedure in the residual graph, which takes $O(n^{3}\\log{\\bar{n}})$ time. After increasing the weight of a subset of points of $B$ , the procedure recomputes the residual graph $\\mathcal{G}_{\\delta}$ and the transport plan $\\hat{\\tau}_{\\delta}$ , which can be done in $O(n^{2}(\\dot{\\Phi^{+}}+n\\log n))$ time. See Lemma C.2 in the appendix for details. In the ACYCLIFY procedure, converting a transport plan into a forest can be done using a dynamic tree data structure [56] in $O(n^{3}\\log{n})$ time. To eliminate the admissible cycles, the ACYCLIFY procedure relies on a partial DFS that runs in $O(n^{3})$ time. Therefore, the total time by the ACYCLIFY procedure is $O(n^{\\frac{5}{3}}\\log{n})$ (see Lemma C.3 for details). Combining the running times of all three procedures, each iteration of step 2 of our algorithm takes $O(n^{2}(\\Phi+n\\log n))$ time. In the following lemma, we show that in each scale, the total number of iterations of step 2 of our algorithm is at most $O(n)$ . ", "page_idx": 8}, {"type": "text", "text": "Lemma 4.1. For each scale $\\delta$ , the total number of iterations of step 2 of our algorithm is $O(n)$ . ", "page_idx": 8}, {"type": "text", "text": "Proof Sketch. Let $\\tau_{2\\delta}$ , $y_{2\\delta}(\\cdot)$ denote the $2\\delta$ -feasible semi-discrete transport plan computed by our algorithm for scale $2\\delta$ , and let $\\tau_{\\delta}$ , $y_{\\delta}(\\cdot)$ denote a partial semi-discrete transport plan maintained during the execution of step 2 of our algorithm. Let $\\chi_{2\\delta}$ (resp. $\\mathcal{X}_{\\delta}$ ) denote the partitioning of the set $A$ with respect to weights $\\bar{y}_{2\\delta}(\\cdot)$ (resp. $y_{\\delta}(\\cdot))$ ). Let $\\boldsymbol{\\wp}$ be the arrangement of all $3n$ cells used to construct $\\chi_{2\\delta}$ with all $3n$ cells used to construct $\\mathcal{X}_{\\delta}$ . Let $\\hat{\\tau}_{2\\delta}$ (resp. $\\hat{\\tau}_{\\delta}$ ) denote the compressed transport plan for $\\tau_{2\\delta}$ (resp. $\\tau_{\\delta}$ ) using the partitioning $\\boldsymbol{\\wp}$ . It is well-known that one can transform $\\hat{\\tau}_{\\delta}$ to $\\hat{\\tau}_{2\\delta}$ by augmenting $\\hat{\\tau}_{\\delta}$ along a set of augmenting paths $\\mathcal{P}$ on $y\\times B$ and rearrange the transported mass along a set of cycles $\\mathcal{C}$ on $y\\times B$ . Consider an augmenting path $P=\\langle r_{1},b_{1},\\dots,r_{k},b_{k}\\rangle$ in $\\mathcal{P}$ . Since $P$ is a simple path, it contains each point of $B$ at most once and therefore, it has a length at most $2n-1$ . Additionally, for all $i\\in[1,k]$ , $\\hat{\\tau}_{2\\delta}(r_{i},b_{i})>0$ and for each $i\\in[2,k]$ , $\\hat{\\tau}_{\\delta}(r_{i},b_{i-1})>0$ . For each edge $(r_{i},b_{i})$ , since $\\hat{\\tau}_{2\\delta}(r_{i},b_{i})>0$ , by $2\\delta$ -feasibility of $\\tau_{2\\delta},y_{2\\delta}(\\cdot)$ (condition (F1)), the point $b_{i}$ is a $4\\delta$ -weighted nearest neighbor of $r_{i}$ with respect to weights $y_{2\\delta}(\\cdot)$ . Similarly, for each edge $(b_{i-1},r_{i})$ , since $\\hat{\\tau}_{\\delta}(r_{i},b_{i-1})>0$ , by $\\delta$ -feasibility of $\\tau_{\\delta},y_{\\delta}(\\cdot)$ (condition (F1)), the point $b_{i-1}$ is a $2\\delta$ -weighted nearest neighbor of $r_{i}$ with respect to weights $y_{\\delta}(\\cdot)$ . Since the length of $P$ is at most $2n-1$ and the weight of $b_{1}$ does not change (by property (W3) in Lemma 3.3), we show that for the free point $b_{k}$ in $P$ , $\\bar{y}_{\\delta}(b_{k})-y_{2\\delta}(b_{k})\\leq6n\\bar{\\delta}$ . Our algorithm increases the weight of $b_{k}$ by $\\delta$ in each iteration (property (W2) in Lemma 3.3), and therefore after $6n$ iterations, the point $b_{k}$ cannot be free, i.e., after $O(n)$ iterations, all points of $B$ are fully transported in $\\hat{\\tau}_{\\delta}$ . We provide the full proof in Section C.4. ", "page_idx": 8}, {"type": "text", "text": "", "page_idx": 9}, {"type": "text", "text": "Using Lemma 4.1, the total time spent in step 2 in each scale of our algorithm is $O(n^{3}(\\Phi+n\\log n))$ . Since there are $O(\\log{\\frac{\\Delta}{\\varepsilon}})$ scales, the overall runtime is $O(n^{3}(\\Phi+n\\log n)\\log{\\frac{\\Delta}{\\varepsilon}})$ , thereby proving Theorem 1.1. ", "page_idx": 9}, {"type": "text", "text": "5 Applications to the Discrete Optimal Transport Problem ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this section, we extend our combinatorial semi-discrete OT algorithm to the discrete OT problem and design a data structure that preprocesses and stores a large discrete distribution $\\mu$ and efficiently computes an $\\varepsilon$ -close OT plan between $\\mu$ and any query distribution $\\nu$ in sub-linear time relative to the support size of $\\mu$ . More precisely, given a discrete distribution $\\mu$ with a (possibly large) support $A$ of $N$ points in $\\mathbb{R}^{2}$ , we design a data structure that, given a query discrete distr\u221aibution $\\nu$ with a support $B$ of $k$ points, computes an $\\varepsilon$ -close transport plan between $\\mu$ and $\\nu$ in $O(k^{3}(\\sqrt{N}+k\\log k)\\log\\frac{\\Delta}{\\varepsilon})$ time. Additionally, we show that if the support points have bounded integer coordinates and the masses are rational numbers, our data structure can efficiently compute an exact discrete OT plan. ", "page_idx": 9}, {"type": "text", "text": "At a high level, our data structure interprets the large discrete distribution $\\mu$ as a continuous distribution and uses a simplex range-searching data structure as an oracle to compute the mass of $\\mu$ inside a query triangle. In this way, for any query distribution $\\nu$ , one can execute the steps of our combinatorial semi-discrete algorithm to compute an $\\varepsilon$ -close transport plan between $\\mu$ and $\\nu$ . More formally, our data structure preprocesses the distribution $\\mu$ into a simplex range-searching data structure RS-DS, which takes $O(N)$ s\u221apace, can be built in $O(N\\log N)$ time, and returns the mass of $\\mu$ inside a query triangle in $\\Phi={\\cal O}(\\sqrt{N})$ time [59]. Given a query discrete distribution $\\nu$ , one can use our algorithm from Secti\u221aon 3 in conjunction with the RS-DS to compute an $\\varepsilon$ -close transport plan between $\\mu$ and $\\nu$ in $O(k^{3}(\\sqrt{N}+k\\log k)\\log\\frac{\\Delta}{\\varepsilon})$ time leading to Theorem 1.2. ", "page_idx": 9}, {"type": "text", "text": "Consider the special case where the points in $A\\cup B$ have positive integer coordinates bounded by $\\lambda$ , the mass of $\\mu$ (resp. $\\nu$ ) on each point $a\\in A$ (resp. $b\\in B$ ) is a rational number of form $\\frac{x_{a}}{T}$ (resp. $\\textstyle{\\frac{x_{b}}{T}}$ ) for positive integers $T$ and $x_{a}$ (resp. $x_{b}$ ), and $p$ is an even number. In this case, the $p_{\\|}$ -Wasserstein cost of any transport plan between $\\mu$ and $\\nu$ is an integer multiple of $\\textstyle{\\frac{1}{T}}$ , and therefore, any $\\textstyle{\\frac{1}{2T}}$ -close transport plan between $\\mu$ and $\\nu$ would have a minimum cost. Thus, one can compute an exact discrete OT pla\u221an between $\\mu$ and $\\nu$ by setting $\\begin{array}{r}{\\varepsilon=\\frac{1}{2T}}\\end{array}$ in our data structure, which would have a query time of $O(k^{3}(\\sqrt{N}+k\\log k)\\log(\\lambda T))$ , leading to the following corollary. ", "page_idx": 9}, {"type": "text", "text": "Corollary 5.1. When the points in the supports of the distributions $\\mu$ and $\\nu$ have integer coordinates bounded by $\\lambda$ and the mass on each point is a rational number of form $\\frac{x}{T}$ , our data structure computes, fo\u221ar any even number $p$ , an optimal solution for the $p$ -Wasserstein problem between $\\mu$ and $\\nu$ in $O(k^{3}(\\sqrt{N}+k\\log k)\\log(\\lambda T))$ time. ", "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this paper, we designed a novel combinatorial framework for the semi-discrete optimal transport problem and used it to compute an $\\varepsilon$ -close semi-discrete transport plan. We also used this framework to design a data structure that stores a discrete distribution $\\mu$ over a large support of size $N$ and can compute $\\varepsilon$ -close OT cost between $\\mu$ and a query discrete distribution $\\nu$ in a time that is sub-linear in $N$ . We conclude with the following question: Can we use our combinatorial framework to compute an $\\varepsilon$ -close semi-discrete transport plan between high dimensional distributions in p $\\mathrm{{)}}\\mathrm{{y}}(n,d,\\mathrm{{\\bar{1}/}}\\varepsilon)$ time. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgement ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Work by P.A. and K.Y. was supported by NSF grants CCF-22-23870 and IIS-24-02823 and by BSF grant 2022131. Work by S.R. and P.S. was supported by NSF grant CCF-2223871. We thank the anonymous reviewers for their useful comments. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] Pankaj K. Agarwal and R. Sharathkumar. Approximation algorithms for bipartite matching with metric and geometric costs. In Proc. 46th Annual ACM Sympos. on Theory of Computing, STOC \u201914, pages 555\u2013564, 2014.   \n[2] Pankaj K Agarwal and Micha Sharir. Arrangements and their applications. In Handbook of Computational Geometry, pages 49\u2013119. Elsevier, 2000.   \n[3] Pankaj K Agarwal, Kyle Fox, Debmalya Panigrahi, Kasturi R Varadarajan, and Allen Xiao. Faster algorithms for the geometric transportation problem. In 33rd Internat. Symposium on Computational Geometry, 2017. [4] Pankaj K Agarwal, Sharath Raghvendra, Pouyan Shirzadian, and Rachita Sowle. A higher precision algorithm for computing the 1-Wasserstein distance. In Proc. 11th Internat. Conference on Learning Representations, 2023. [5] Pankaj K Agarwal, Sharath Raghvendra, Pouyan Shirzadian, and Keegan Yao. Fast and accurate approximations of the optimal transport in semi-discrete and discrete settings. In Proc. 2024 Annual ACM-SIAM Sympos. on Discrete Algorithms, pages 4514\u20134529. SIAM, 2024. [6] Jason M Altschuler, Jonathan Niles-Weed, and Austin J Stromme. Asymptotics for semidiscrete entropic optimal transport. SIAM Journal of Mathematical Analysis, 54(2):1718\u20131741, 2022. [7] Luca Ambrogioni, Umut Guclu, and Marcel van Gerven. Wasserstein variational gradient descent: From semi-discrete optimal transport to ensemble variational inference. arXiv preprint arXiv:1811.02827, 2018. [8] Luca Ambrogioni, Umut G\u00fc\u00e7l\u00fc, and Marcel van Gerven. k-gans: Ensemble of generative models with semi-discrete optimal transport. arXiv preprint arXiv:1907.04050, 2019.   \n[9] Dongsheng An, Yang Guo, Na Lei, Zhongxuan Luo, Shing-Tung Yau, and Xianfeng Gu. AE-OT: A new generative model based on extended semi-discrete optimal transport. In Proc. 32nd Internat. Conference on Learning Representations, 2019.   \n[10] Dongsheng An, Yang Guo, Min Zhang, Xin Qi, Na Lei, and Xianfang Gu. AE-OT-GAN: Training gans from data specific latent distribution. In Proc. 16th European Conference on Computer Vision, pages 548\u2013564. Springer, 2020.   \n[11] Franz Aurenhammer. Power diagrams: properties, algorithms and applications. SIAM journal on computing, 16(1):78\u201396, 1987.   \n[12] Franz Aurenhammer, Friedrich Hoffmann, and Boris Aronov. Minkowski-type theorems and least-squares clustering. Algorithmica, 20(1):61\u201376, 1998.   \n[13] Arturs Backurs, Yihe Dong, Piotr Indyk, Ilya Razenshteyn, and Tal Wagner. Scalable nearest neighbor search for optimal transport. In Internat. Conference on machine learning, pages 497\u2013506. PMLR, 2020.   \n[14] Marc G Bellemare, Ivo Danihelka, Will Dabney, Shakir Mohamed, Balaji Lakshminarayanan, Stephan Hoyer, and R\u00e9mi Munos. The cramer distance as a solution to biased Wasserstein gradients. arXiv preprint arXiv:1705.10743, 2017.   \n[15] Jean-David Benamou and Yann Brenier. A computational fluid mechanics solution to the Monge-Kantorovich mass transfer problem. Numerische Mathematik, 84(3):375\u2013393, 2000.   \n[16] Bernard Bercu and J\u00e9r\u00e9mie Bigot. Asymptotic distribution and convergence rates of stochastic algorithms for entropic optimal transportation between probability measures. Annals of Statistics, 49(2):968\u2013987, 2021.   \n[17] Rick Chartrand, Brendt Wohlberg, Kevin Vixie, and Erik Bollt. A gradient descent solution to the Monge-Kantorovich problem. Applied Math. Sci., 3(22):1071\u20131080, 2009.   \n[18] Li Chen, Rasmus Kyng, Yang P Liu, Richard Peng, Maximilian Probst Gutenberg, and Sushant Sachdeva. Maximum flow and minimum-cost flow in almost-linear time. In Proc. 63rd IEEE Annual Sympos. Foundations of Computer Science, pages 612\u2013623. IEEE, 2022.   \n[19] Yucheng Chen, Matus Telgarsky, Chao Zhang, Bolton Bailey, Daniel Hsu, and Jian Peng. A gradual, semi-discrete approach to generative network training via explicit Wasserstein minimization. In Internat. Conference on Machine Learning, pages 1071\u20131080. PMLR, 2019.   \n[20] Marco Cuturi. Sinkhorn distances: Lightspeed computation of optimal transport. In Advances in Neural Information Processing Systems, pages 2292\u20132300, 2013.   \n[21] Fernando De Goes, Katherine Breeden, Victor Ostromoukhov, and Mathieu Desbrun. Blue noise through optimal transport. ACM Transactions of Graphics, 31(6):1\u201311, 2012.   \n[22] Eustasio Del Barrio, Alberto Gonz\u00e1lez Sanz, and Jean-Michel Loubes. Central limit theorems for semi-discrete Wasserstein distances. Bernoulli, 30(1):554\u2013580, 2024.   \n[23] Efim A Dinic. Algorithm for solution of a problem of maximum flow in networks with power estimation. In Soviet Math. Doklady, volume 11, pages 1277\u20131280, 1970.   \n[24] Steven Fortune. Voronoi diagrams and delaunay triangulations. Comput. in Euclidean Geom., pages 225\u2013265, 1995.   \n[25] Emily Fox and Jiashuai Lu. A deterministic near-linear time approximation scheme for geometric transportation. In Proc. 64th IEEE Annual Sympos. on Foundations of Computer Science, pages 1301\u20131315. IEEE, 2023.   \n[26] Kyle Fox and Jiashuai Lu. A near-linear time approximation scheme for geometric transportation with arbitrary supplies and spread. In Proc. 36th Annual Sympos. on Computational Geometry, pages 45:1\u201345:18, 2020.   \n[27] H. N. Gabow and R. E. Tarjan. Faster scaling algorithms for network problems. SIAM Journal of Computing, 18(5):1013\u20131036, October 1989. ISSN 0097-5397.   \n[28] Bruno Galerne, Arthur Leclaire, and Julien Rabin. Semi-discrete optimal transport in patch space for enriching gaussian textures. In Proc. 3rd Internat. Conference on Geometric Science of Information, pages 100\u2013108, 2017.   \n[29] Bruno Galerne, Arthur Leclaire, and Julien Rabin. A texture synthesis model based on semidiscrete optimal transport in patch space. SIAM Journal of Imaging Sciences, 11(4):2456\u20132493, 2018.   \n[30] Thomas O Gallou\u00ebt and Quentin M\u00e9rigot. A Lagrangian scheme \u00e0 la Brenier for the incompressible Euler equations. Foundations of Computational Mathematics, 18(4):835\u2013865, 2018.   \n[31] Jing Gao, Peng Li, Asif Ali Laghari, Gautam Srivastava, Thippa Reddy Gadekallu, Sidra Abbas, and Jianing Zhang. Incomplete multiview clustering via semidiscrete optimal transport for multimedia data mining in IoT. ACM Transactions of Multimedia Computing, Communications and Applications, 20(6):1\u201320, 2024.   \n[32] Aude Genevay, Marco Cuturi, Gabriel Peyr\u00e9, and Francis Bach. Stochastic optimization for large-scale optimal transport. Advances in Neural Information Processing Systems, 29, 2016.   \n[33] Antoine Houdard, Arthur Leclaire, Nicolas Papadakis, and Julien Rabin. A generative model for texture synthesis based on optimal transport between feature distributions. Journal of Mathematical Imaging and Vision, 65(1):4\u201328, 2023.   \n[34] MARTIN HUESMANN and KARL-THEODOR STURM. Optimal transport from Lebesgue to poisson. The Annals of Probability, 41(4):2426\u20132478, 2013.   \n[35] Shayan Hundrieser, Thomas Staudt, and Axel Munk. Empirical optimal transport between different measures adapts to lower complexity. In Annales de l\u2019Institut Henri Poincare $(B)$ Probabilites et statistiques, volume 60, pages 824\u2013846, 2024.   \n[36] Andrey Boris Khesin, Aleksandar Nikolov, and Dmitry Paramonov. Preconditioning for the geometric transportation problem. arXiv preprint arXiv:1902.08384, 2019.   \n[37] Jun Kitagawa. An iterative scheme for solving the optimal transportation problem. Calculus of Variations and Partial Differential Equations, 51(1):243\u2013263, 2014.   \n[38] Jun Kitagawa, Quentin M\u00e9rigot, and Boris Thibert. Convergence of a Newton algorithm for semi-discrete optimal transport. Journal of European Math. Society, 21(9):2603\u20132651, 2019.   \n[39] Nathaniel Lahn, Deepika Mulchandani, and Sharath Raghvendra. A graph theoretic additive approximation of optimal transport. Advances in Neural Information Processing Systems, 32, 2019.   \n[40] Arthur Leclaire and Julien Rabin. A stochastic multi-layer algorithm for semi-discrete optimal transport with applications to texture synthesis and style transfer. Journal of Mathematical Imaging and Vision, 63(2):282\u2013308, 2021.   \n[41] Bruno L\u00e9vy and Erica L Schwindt. Notions of optimal transport theory and how to implement them on a computer. Computers & Graphics, 72:135\u2013148, 2018.   \n[42] Zezeng Li, Shenghao Li, Zhanpeng Wang, Na Lei, Zhongxuan Luo, and David Xianfeng Gu. DPM-OT: a new diffusion probabilistic model based on optimal transport. In Proc. IEEE/CVF Internat. Conference on Computer Vision, pages 22624\u201322633, 2023.   \n[43] Huidong Liu, GU Xianfeng, and Dimitris Samaras. A two-step computation of the exact GAN Wasserstein distance. In Internat. Conference on Machine Learning, pages 3159\u20133168, 2018.   \n[44] Quentin M\u00e9rigot. A multiscale approach to optimal transport. Computer Graphics Forum, 30 (5):1583\u20131592, 2011.   \n[45] Quentin Merigot and Boris Thibert. Optimal transport: discretization and algorithms. In Handbook of Numerical Analysis, volume 22, pages 133\u2013212. Elsevier, 2021.   \n[46] Jocelyn Meyron. Initialization procedures for discrete and semi-discrete optimal transport. Computer-Aided Design, 115:13\u201322, 2019.   \n[47] Joseph SB Mitchell, David M Mount, and Christos H Papadimitriou. The discrete geodesic problem. SIAM Journal of Computing, 16(4):647\u2013668, 1987.   \n[48] Vladimir I Oliker and Laird D Prussner. On the numerical solution of the equation $\\begin{array}{r l r}{\\lefteqn{\\frac{\\partial^{2}z}{\\partial x^{2}}\\frac{\\partial^{2}z}{\\partial y^{2}}-}}\\end{array}$ $\\begin{array}{r}{\\left(\\frac{\\partial^{2}z}{\\partial x\\partial y}\\right)=f}\\end{array}$ and its discretizations, i. Numerische Mathematik, 54(3):271\u2013293, 1989.   \n[49] James Orlin. A faster strongly polynomial minimum cost flow algorithm. In Proc. 20th Annual ACM Sympos. Theory of Computing, pages 377\u2013387, 1988.   \n[50] Aram-Alexandre Pooladian, Vincent Divol, and Jonathan Niles-Weed. Minimax estimation of discontinuous optimal transport maps: The semi-discrete case. In Internat. Conference on Machine Learning, pages 28128\u201328150. PMLR, 2023.   \n[51] Hongxing Qin, Yi Chen, Jinlong He, and Baoquan Chen. Wasserstein blue noise sampling. ACM Transactions of Graphics, 36(5):1\u201313, 2017.   \n[52] Sharath Raghvendra and Pankaj K Agarwal. A near-linear time $\\varepsilon$ -approximation algorithm for geometric bipartite matching. Journal of the ACM, 67(3):1\u201319, 2020.   \n[53] Nathan A Seifert, Kirill Prozument, and Michael J Davis. Computational optimal transport for molecular spectra: The semi-discrete case. The Journal of Chemical Physics, 156(13), 2022.   \n[54] R Sharathkumar and Pankaj K Agarwal. Algorithms for the transportation problem in geometric settings. In Proc. 23rd Annual ACM-SIAM Sympos. on Discrete Algorithms, pages 306\u2013317, 2012.   \n[55] Ilia Shumailov, Zakhar Shumaylov, Yiren Zhao, Nicolas Papernot, Ross Anderson, and Yarin Gal. Ai models collapse when trained on recursively generated data. Nature, 631(8022): 755\u2013759, 2024.   \n[56] Daniel D Sleator and Robert Endre Tarjan. A data structure for dynamic trees. In Proc. 13th Annual ACM Sympos. on Theory of Computing, pages 114\u2013122, 1981.   \n[57] Kokichi Sugihara. Laguerre voronoi diagram on the sphere. Journal for Geometry and Graphics, 6(1):69\u201381, 2002.   \n[58] Bahar Ta\u00b8skesen, Soroosh Shafieezadeh-Abadeh, and Daniel Kuhn. Semi-discrete optimal transport: Hardness, regularization and numerical solution. Mathematical Programming, 199 (1):1033\u20131106, 2023.   \n[59] Emo Welzl. Partition trees for triangle counting and other range searching problems. In Proc. 4th Annual Sympos. Computational Geometry, pages 23\u201333, 1988. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Missing Proofs of Section 2 ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "In this section, we present the missing proofs and details of our combinatorial framework described in Section 2. ", "page_idx": 14}, {"type": "text", "text": "Lemma 2.1. Any $\\delta$ -optimal transport plan $\\tau,y(\\cdot)$ between $\\mu$ and $\\nu$ is $2\\delta$ -close. ", "page_idx": 14}, {"type": "text", "text": "Proof. Define the weighted cost of a transport plan $\\tau^{\\prime}$ as $\\begin{array}{r}{\\mathfrak{E}_{y}(\\tau^{\\prime}):=\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b)\\tau^{\\prime}(a,b)\\,d a.}\\end{array}$ For any complete transport plan $\\tau^{\\prime}$ , ", "page_idx": 14}, {"type": "equation", "text": "$$\n:_{y}(\\tau^{\\prime})=\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b)\\tau^{\\prime}(a,b)\\,d a=\\sum_{b\\in B}\\int_{A}\\big(\\mathrm{d}(a,b)-y(b)\\big)\\tau^{\\prime}(a,b)\\,d a=\\varepsilon(\\tau^{\\prime})-\\sum_{b\\in B}y(b)\\nu(b).\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "For any point $a\\in A$ , let $b_{a}$ denote the weighted nearest neighbor of $a$ , i.e., $b_{a}:=\\arg\\operatorname*{min}_{b\\in B}\\mathrm{d}_{y}(a,b)$ . By property (F1) in the definition of $\\delta$ -feasibility, ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\mathfrak{E}_{y}(\\tau)=\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b)\\tau(a,b)\\,d a\\leq\\sum_{b\\in B}\\int_{A}\\big(\\mathrm{d}_{y}(a,b_{a})+2\\delta\\big)\\tau(a,b)\\,d a}\\\\ {\\displaystyle\\qquad=\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b_{a})\\tau(a,b)\\,d a+2\\delta.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Let $\\tau^{*}$ denote an optimal transport plan from $\\mu$ to $\\nu$ . Then, ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\phi_{y}(\\tau^{*})=\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b)\\tau^{*}(a,b)\\,d a\\geq\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b_{a})\\tau^{*}(a,b)\\,d a.\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Combining Equations (3) and (4) and plugging $\\tau$ and $\\tau^{*}$ in Equation (2), ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\displaystyle\\mathfrak{e}(\\tau)=\\mathfrak{e}_{y}(\\tau)+\\sum_{b\\in B}y(b)\\nu(b)\\leq\\bigg[\\sum_{b\\in B}\\int_{A}\\mathrm{d}_{y}(a,b_{a})\\tau(a,b)\\,d a+2\\delta\\bigg]+\\sum_{b\\in B}y(b)\\nu(b)}\\\\ &{\\qquad\\leq\\mathfrak{e}_{y}(\\tau^{*})+2\\delta+\\displaystyle\\sum_{b\\in B}y(b)\\nu(b)=\\mathfrak{e}(\\tau^{*})+2\\delta.}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Therefore, $\\mathfrak{c}(\\tau)\\leq\\mathfrak{c}(\\tau^{*})+2\\delta$ and $\\tau$ is $2\\delta$ -close. ", "page_idx": 14}, {"type": "text", "text": "Residual graph. Next, we show that for any $\\delta>0$ and any $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ , the residual graph $\\mathcal{G}_{\\delta}$ has $O(n^{2})$ vertices and $O(n^{3})$ edges, leading to Lemma 2.2. To do so, we show below that the partitioning $\\boldsymbol{\\mathcal{X}}_{\\delta}$ consists of $O(n^{2})$ regions. We then conclude that the number of vertices of $\\boldsymbol{\\mathcal{G}}_{\\delta}$ is $O(n^{2})$ . Furthermore, since the residual graph is a bipartite graph between set $B$ of size $n$ and set $A_{\\delta}$ of size $O(n^{2})$ , the number of edges of $\\mathcal{G}_{\\delta}$ would be at most $\\bar{O}(n^{3})$ . ", "page_idx": 14}, {"type": "text", "text": "Recall that the partitioning $\\mathcal{X}_{\\delta}$ is constructed as the arrangement of all Voronoi cells, $\\delta$ -expansions, and $2\\delta$ -expansions of the Voronoi cells of all points in $B$ . Let $\\mathcal{V}$ denote the set of vertices of this arrangement. Since the arrangement is a planar graph, the number of faces (i.e., regions) in $\\mathcal{X}_{\\delta}$ is $O(|\\nu|)$ . Therefore, to show that $\\mathcal{X}_{\\delta}$ has $O^{2}(n^{2})$ regions, we show that the number of vertices of this arrangement is $O(n^{2})$ . ", "page_idx": 14}, {"type": "text", "text": "For each point $b\\in B$ , let $V_{b}^{0}$ (resp. $V_{b}^{\\delta},V_{b}^{2\\delta})$ denote the Voronoi cell (resp. $\\delta$ -expanded Voronoi cell, $2\\delta$ -expanded Voronoi cell) of $b$ , and let $y_{b}^{0}$ (resp. $y_{b}^{\\delta},y_{b}^{2\\delta})$ denote the weights of $B$ used to compute the cell. Note that each Voronoi cell $V_{b}^{i}$ for each $b\\in B$ and $i\\in\\{0,\\delta,2\\delta\\}$ has at most $n$ vertices. Hence, the total number of Voronoi vertices in the arrangement $\\mathcal{X}_{\\delta}$ is $O(n^{2})$ . Next, we count the number of intersection points of these Voronoi cells. For each pair of points $b_{1},b_{2}\\in B$ , consider the pair of cells $V_{b_{\\frac{1}{2}}}^{i}$ and V , for some $i,j\\in\\{0,\\delta,2\\delta\\}$ . We show that $V_{b_{1}}^{i}$ and $V_{b_{2}}^{j}$ intersect each other in at most two points. ", "page_idx": 14}, {"type": "text", "text": "Define the weighted bisector of two points $b$ and $b^{\\prime}$ with respect to weights $y(\\cdot)$ as the locus of points that have the same weighted distance to $b$ and $b^{\\prime}$ , i.e., all points $x\\in\\mathbb{R}^{2}$ such that $\\mathrm{d}_{y}(x,b)=\\mathrm{d}_{y}\\bar{(x,b^{\\prime})}$ . Note that under the squared Euclidean distances, the weighted bisector of two points is a straight line. Let $v$ denote an intersection point of $V_{b_{1}}^{i}$ and $V_{b_{2}}^{j}$ , and suppose $v$ lies on the segment of $V_{b_{1}}^{i}$ corresponding to the weighted bisector of $b_{1}$ and a point $b_{3}\\in B$ (See Figure 4). Note that if $b_{3}=b_{2}$ , then $V_{b_{1}}^{i}$ and $\\bar{V}_{b_{2}}^{j}$ share a segment containing $v$ , which means that ", "page_idx": 14}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/f32761756a66fd2bc30220cfad558423c292c0c2e08f91bbc66d1f1fbc5380f6.jpg", "img_caption": ["Figure 4: For two cells $V_{b_{1}}^{i}$ (green cell) and $V_{b_{2}}^{j}$ (orange cell), any intersection point $v$ lies on their weighted bisector. "], "img_footnote": [], "page_idx": 15}, {"type": "text", "text": "", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(v,b_{1})-i=\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{1})=\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{2})=\\mathrm{d}_{y}(v,b_{2}),\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "and also ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(v,b_{2})-j=\\mathrm{d}_{y_{b_{2}}^{j}}(v,b_{2})=\\mathrm{d}_{y_{b_{2}}^{j}}(v,b_{1})=\\mathrm{d}_{y}(v,b_{1}).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Therefore, in this case, $i=j=0$ , and the two endpoints of the shared segment is counted toward the number of Voronoi vertices of the arrangement. Hence, we assume $b_{3}\\neq b_{2}$ . In this case, ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{1})=\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{3})=\\operatorname*{min}_{b\\in B}\\mathrm{d}_{y_{b_{1}}^{i}}(v,b).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "By the construction of the weight function $y_{b_{1}}^{i}(\\cdot)$ in Equation (1), for any point $b\\in B\\setminus\\{b_{1},b_{2}\\}$ , $y_{b_{1}}^{i}(b)=y_{b_{2}}^{j}(b)=y(b)$ ; thus, using Equation (5), ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y_{b_{2}}^{j}}(v,b_{3})=\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{3})=\\operatorname*{min}_{b\\in B\\backslash\\{b_{1},b_{2}\\}}\\mathrm{d}_{y_{b_{1}}^{i}}(v,b)=\\operatorname*{min}_{b\\in B\\backslash\\{b_{1},b_{2}\\}}\\mathrm{d}_{y_{b_{2}}^{j}}(v,b).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Using Equation (6), the point $v$ also lies in the segment of $V_{b_{2}}^{j}$ that corresponds to the weighted bisector of $b_{2}$ and $b_{3}$ with respect to weights $y_{b_{2}}^{j}$ . Thus, ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{1})=\\mathrm{d}_{y_{b_{1}}^{i}}(v,b_{3})=\\mathrm{d}_{y_{b_{2}}^{j}}(v,b_{3})=\\mathrm{d}_{y_{b_{2}}^{j}}(v,b_{2}).\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "In other words, the point $v$ satisfies ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\mathrm{d}(v,b_{1})-(y(b_{1})+i)=\\mathrm{d}(v,b_{2})-(y(b_{2})+j),\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "i.e., the point $v$ lies on the weighted bisector of $b_{1}$ and $b_{2}$ (the blue dashed line in Figure 4). Since the weighted bisector is a straight line, it intersects the convex polygon $V_{b_{1}}^{i}$ in at most 2 points; hence, the two Voronoi cells $V_{b_{1}}^{i}$ and $V_{b_{2}}^{j}$ intersect each other in at most 2 points. Since the are $O(n^{2})$ pairs of such Voronoi cells, each intersecting each other in at most 2 points, the total number of intersection points is at most $O(n^{2})$ , as claimed. ", "page_idx": 15}, {"type": "text", "text": "Lemma 2.2. For any $\\delta>0$ and a $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ , the residual graph $\\mathcal{G}_{\\delta}$ has $O(n^{2})$ vertices and $O(n^{3})$ edges. ", "page_idx": 15}, {"type": "text", "text": "Next, we extend our bounds for the number of vertices and edges of the residual graph in Lemma 2.2 to any dimension $d\\geq3$ and show that for any pair of $d$ -dimensional distributions $\\mu$ and $\\nu$ and any $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ , the residual graph $\\mathcal{G}_{\\delta}$ has $O(n^{d})$ vertices and $O({\\partial}^{d+1})$ edges. We prove our bounds by showing that the number of vertices of the arrangement $\\mathcal{X}_{\\delta}$ is $O(n^{d})$ . Using this bound, we get that the number of regions in the arrangement is upper-bounded by $O(n^{d})$ ; therefore, $\\left|A_{\\delta}\\right|=O(n^{d})$ and the residual graph has $O(n^{d})$ vertices. Furthermore, since $\\mathcal{G}_{\\delta}$ is a bipartite graph between set $B$ with $n$ points and set $A_{\\delta}$ with $O(n^{d})$ points, the number of edges would be bounded by $O(n^{d+1})$ . ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "For each point $b\\in B$ and each $i\\in\\{0,\\delta,2\\delta\\}$ , the Voronoi cell $V_{b}^{i}$ has $O(n^{\\lceil d/2\\rceil})$ vertices; since $3n$ such cells are used in the construction of the arrangement, the total number of Voronoi vertices in the arrangement is $O(n^{\\lceil d/2\\rceil+1})$ . Next, we bound the number of intersection points of these Voronoi cells. For each $d$ -tuple $(V_{b_{1}}^{i_{1}},V_{b_{2}}^{i_{2}},\\cdot\\cdot\\cdot,V_{b_{d}}^{i_{d}})$ of Voronoi cells, for $d$ distinct points $b_{1},\\ldots,b_{d}$ and $d$ values $i_{1},\\dots,i_{d}\\in\\{0,\\delta,2\\bar{\\delta}\\}$ , let $v$ denote a point in the intersection of these cells. Similar to our analysis for 2-dimensional distributions, we show that $v$ lies on the weighted bisector of $b_{1},\\ldots,b_{d}$ , where the weight of each point $b_{j}$ is $y(b_{j})+i_{j}$ . Since this weighted bisector is a straight line, and since a straight line intersects a convex polytope in at most 2 points, each $d$ -tuple of Voronoi cells intersect in at most 2 points, where the number of such $d_{\\cdot}$ -tuples are $O(n^{d})^{3}$ . Therefore, we conclude that the number of intersection points is $O(n^{d})$ , as desired. ", "page_idx": 16}, {"type": "text", "text": "Let $v$ be an intersection point of the $d$ Voronoi cells $V_{b_{1}}^{i_{1}},V_{b_{2}}^{i_{2}},\\ldots;$ , and $V_{b_{d}}^{i_{d}}$ . Suppose $v$ lies on the $(d-1)$ -dimensional hyperplane of $V_{b_{1}}^{i_{1}}$ that is shared between $b_{1}$ and a point $b_{d+1}\\in B$ . In this case, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b_{1})=\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b_{d+1})=\\operatorname*{min}_{b\\in B}\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b).\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "We claim that for any $k\\in\\{1,\\ldots,d\\}$ , $y_{b_{k}}^{i_{k}}(b_{d+1})=y(b_{d+1})$ . Consider the following two cases: ", "page_idx": 16}, {"type": "text", "text": "\u2022 If $b_{d+1}=b_{j}$ for some $j\\in\\{2,\\ldots,d\\}$ , then ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathrm{d}_{y}(v,b_{1})-i_{1}=\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b_{1})=\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b_{j})=\\mathrm{d}_{y}(v,b_{j}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "and also ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(v,b_{j})-i_{j}=\\mathrm{d}_{y_{b_{j}}^{i_{j}}}(v,b_{j})=\\mathrm{d}_{y_{b_{j}}^{i_{j}}}(v,b_{1})=\\mathrm{d}_{y}(v,b_{1}).\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Therefore, $i_{1}=i_{j}=0$ and for any $k\\in\\{1,\\ldots,d\\}$ , $y_{b_{k}}^{i_{k}}(b_{d+1})=y(b_{d+1})$ . ", "page_idx": 16}, {"type": "text", "text": "\u2022 Otherwise, $b_{d+1}\\notin\\{b_{1},\\ldots,b_{d}\\}$ and by the construction of $y_{b_{k}}^{i_{k}}(\\cdot)$ , for any $k\\in\\{1,\\ldots,d\\}$ , $y_{b_{k}}^{i_{k}}(b_{d+1})=y(b_{d+1})$ . ", "page_idx": 16}, {"type": "text", "text": "Therefore, from Equation (7), ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(v,b_{d+1})=\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b_{d+1})=\\operatorname*{min}_{b\\in B}\\mathrm{d}_{y_{b_{1}}^{i_{1}}}(v,b)=\\operatorname*{min}_{b\\in B}\\mathrm{d}_{y}(v,b),\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "and for any $k\\in\\{1,\\ldots,d\\}$ , since $v$ lies on a $(d-1)$ -dimensional hyperplane of $V_{b_{k}}^{i_{k}}$ , it has to lie on the hyperplane of $V_{b_{k}}^{i_{k}}$ that is shared between $b_{k}$ and $b_{d+1}$ ; therefore, $\\mathrm{d}(v,b_{d+1})-y(b_{d+1})=$ $\\mathrm{d}(v,b_{k})-\\left(y(b_{k})+i_{k}\\right)$ . Thus, ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\mathrm{d}(v,b_{1})-(y(b_{1})+i_{1})=\\mathrm{d}(v,b_{2})-(y(b_{2})+i_{2})=.\\ldots=\\mathrm{d}(v,b_{d})-(y(b_{d})+i_{d}).\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": ", and the -t $v$ le intersect e $b_{1},\\ldots,b_{d}$ n at most 2 poi $y(b_{1})+$ $i_{1},\\ldots,y(b_{d})+i_{d}$ $d_{\\cdot}$ $(V_{b_{1}}^{i_{1}},V_{b_{2}}^{i_{2}},\\cdot\\cdot\\cdot,V_{b_{d}}^{i_{d}})$ ", "page_idx": 16}, {"type": "text", "text": "Lemma A.1. For any dimension $d\\geq2$ , a parameter $\\delta>0$ , and a $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ , the residual graph $\\mathcal{G}_{\\delta}$ has $O(n^{d})$ vertices and $O(n^{d+1})$ edges. ", "page_idx": 16}, {"type": "text", "text": "Compressing the transport plan. Recall that for any semi-discrete transport plan $\\tau$ from $B$ to $A$ , a set of weights $y(\\cdot)$ , and a parameter $\\delta>0$ , the compressed transport plan $\\hat{\\tau}$ is a discrete transport plan from $B$ to $A_{\\delta}$ . Note that the definition of $\\delta$ -feasibility (and more precisely, condition (F1)) is applicable for the discrete OT as well; the discrete transport plan $\\hat{\\tau}$ along with weights $y(\\cdot)$ for $B$ is $\\delta$ -feasible if $\\hat{\\tau}$ transports the mass of each point $b\\in B$ to points of $A_{\\delta}$ within its $2\\delta$ -expanded Voronoi cell. Any complete transport plan $\\hat{\\tau}$ from $B$ to $A_{\\delta}$ that is $\\delta$ -feasible along with weights $y(\\cdot)$ is called $\\delta$ -optimal. ", "page_idx": 16}, {"type": "text", "text": "Proof. For any transport plan $\\tau^{\\prime}$ from $B$ to $A_{\\delta}$ define $\\begin{array}{r}{\\mathfrak{C}_{y}(\\tau^{\\prime}):=\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b)\\tau^{\\prime}(r,b)}\\end{array}$ . Then, ", "page_idx": 17}, {"type": "equation", "text": "$$\n:_{y}(\\tau^{\\prime})=\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b)\\tau^{\\prime}(r,b)=\\sum_{(r,b)\\in A_{\\delta}\\times B}\\big(\\mathrm{d}(r,b)-y(b)\\big)\\tau^{\\prime}(r,b)=\\notin(\\tau^{\\prime})-\\sum_{b\\in B}y(b)\\nu(b).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "For any point $r\\in A_{\\delta}$ , let $b_{r}$ denote the weighted nearest neighbor of $r$ , i.e., $b_{r}:=\\arg\\operatorname*{min}_{b\\in B}$ $\\mathrm{d}_{y}(r,b)$ . By the definition of $\\delta$ -feasibility, for any pair $(r,b)$ with $\\bar{\\tau}(r,\\bar{b})>0$ , we have $\\mathrm{d}_{y}(r,b)\\leq\\mathrm{d}_{y}(r,b_{r}){+}2\\delta$ . Therefore, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\pounds_{y}(\\hat{\\tau})=\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b)\\hat{\\tau}(r,b)\\leq\\sum_{(r,b)\\in A_{\\delta}\\times B}\\big(\\mathrm{d}_{y}(r,b_{r})+2\\delta\\big)\\hat{\\tau}(r,b)}\\\\ {\\displaystyle\\qquad=\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b_{r})\\hat{\\tau}(a,b)+2\\delta.}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Let $\\tau^{*}$ denote an optimal transport plan from $B$ to $A_{\\delta}$ . Then, ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\epsilon_{y}(\\tau^{*})=\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b)\\tau^{*}(r,b)\\geq\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b_{r})\\tau^{*}(r,b).\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Combining Equations (11) and (12) and plugging $\\hat{\\tau}$ and $\\tau^{*}$ in Equation (10), ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\mathcal{E}(\\hat{\\tau})=\\mathcal{E}_{y}(\\hat{\\tau})+\\sum_{b\\in B}y(b)\\nu(b)\\leq\\bigg[\\sum_{(r,b)\\in A_{\\delta}\\times B}\\mathrm{d}_{y}(r,b_{r})\\hat{\\tau}(r,b)+2\\delta\\bigg]+\\sum_{b\\in B}y(b)\\nu(b)}\\\\ {\\leq\\displaystyle\\mathcal{E}_{y}(\\tau^{*})+2\\delta+\\sum_{b\\in B}y(b)\\nu(b)=\\mathcal{E}(\\tau^{*})+2\\delta.}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Therefore, $\\mathfrak{C}(\\hat{\\tau})\\leq\\mathfrak{C}(\\tau^{*})+2\\delta$ and $\\hat{\\tau}$ is $2\\delta$ -close. ", "page_idx": 17}, {"type": "text", "text": "The following observation, which is straightforward from the construction of the partitioning $\\mathcal{X}_{\\delta}$ , helps in proving Lemmas 2.3 and 2.4. ", "page_idx": 17}, {"type": "text", "text": "Observation A.3. For any region $\\varphi\\in\\mathcal{X}_{\\delta}$ and any point $b\\in B$ , the region $\\varphi$ either completely lies inside $V_{b}^{2\\delta}$ or it is completely outside $V_{b}^{2\\delta}$ . ", "page_idx": 17}, {"type": "text", "text": "Lemma 2.3. For any $\\delta$ -feasible semi-discrete transport plan $\\tau,y(\\cdot)$ , the compressed transport plan $\\hat{\\tau}$ along with weights $y(\\cdot)$ is also $\\delta$ -feasible. ", "page_idx": 17}, {"type": "text", "text": "Proof. Consider any point $b\\in B$ and any region $\\varphi\\in\\mathcal{X}_{\\delta}$ such that $\\tau(\\varphi,b)>0$ , i.e., in the compressed graph, $\\hat{\\tau}(r_{\\varphi},b)>0$ . To prove this lemma, we show that $r_{\\varphi}\\in V_{b}^{2\\delta}$ . Since $\\tau(\\varphi,b)>0$ , there exists a point $a\\in\\varphi$ such that $\\tau(a,b)>0$ , and by the $\\delta$ -feasibility of $\\tau,y(\\cdot)$ , we have $a\\in V_{b}^{2\\delta}$ ; therefore, using Observation A.3, the region $\\varphi$ has to completely lie inside $V_{b}^{2\\delta}$ , and the representative point $r_{\\varphi}$ , which is a point inside $\\varphi$ also lies inside $V_{b}^{2\\delta}$ . Hence, $\\hat{\\tau},y(\\cdot)$ is $\\delta$ -feasible. \u53e3 ", "page_idx": 17}, {"type": "text", "text": "Lemma 2.4. Any $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ from $B$ to $A_{\\delta}$ can be converted into a $\\delta$ -feasible semi-discrete transport plan $\\tau$ from $B$ to $A$ . ", "page_idx": 17}, {"type": "text", "text": "Proof. Consider any transport plan $\\tau$ from $B$ to $A$ such that for any point $b\\in B$ and any region $\\varphi\\,\\in\\,\\mathcal{X}_{\\delta}$ , transports a mass of $\\hat{\\tau}(r_{\\varphi},b)$ from $b$ to the mass of $\\mu$ inside the region $\\varphi$ . One such construction is to assign $\\begin{array}{r}{\\tau(a,b)=\\frac{\\hat{\\tau}(r_{\\varphi},b)}{\\mu(\\varphi)}\\mu(a)}\\end{array}$ \u03c4\u02c6(\u00b5r(\u03c6\u03c6,)b )\u00b5(a) for each point a \u2208\u03c6. We next show that the transport plan $\\tau$ is $\\delta$ -feasible. ", "page_idx": 17}, {"type": "text", "text": "Consider any point $b\\in B$ and any point $a\\in A$ such that $\\tau(a,b)>0$ . We prove this lemma by showing that $a\\in V_{b}^{2\\delta}$ . Suppose $\\varphi\\in\\mathcal{X}_{\\delta}$ is the region containing the point $a$ . Since $\\tau(a,b)>0$ , we should have $\\hat{\\tau}(r_{\\varphi},b)>0$ , and by the $\\delta$ -feasibility of $\\hat{\\tau},y(\\cdot)$ , we have $r_{\\varphi}\\in V_{b}^{2\\delta}$ . By Observation A.3, the whole region $\\varphi$ has to lies inside $V_{b}^{2\\delta}$ and therefore, the point $a$ also lies inside $V_{b}^{2\\delta}$ . Hence, $\\tau,y(\\cdot)$ is $\\delta$ -feasible. \u53e3 ", "page_idx": 17}, {"type": "text", "text": "Augmentation. In this section, we first show that upon augmenting a transport plan $\\hat{\\tau}$ along an augmenting path $P$ , the transport plan remains valid. We then show that upon augmentation, either a backward edge gets removed from the transport plan or a free point will become fully transported. We finally prove Lemma 2.5. ", "page_idx": 18}, {"type": "text", "text": "For an augmenting path $P=\\langle s,b_{1},r_{1},\\ldots,r_{k},t\\rangle$ from a free point $b_{1}$ to a free point $r_{k}$ , recall that the bottleneck capacity of $P$ is defined as ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\mathrm{bc}(P):=\\operatorname*{min}\\{\\mathrm{ex}(b_{1}),\\mathrm{ex}(r_{k}),\\operatorname*{min}_{i\\in[1,k-1]}\\hat{\\tau}(r_{i},b_{i+1})\\},\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $\\mathrm{ex}(b_{1})$ (resp. $\\exp({r_{k}}),$ ) denotes the excess mass of $b_{1}$ (resp. $r_{k}$ ). To show that the transport plan after augmentation is a valid one, we show that no point $v$ in $\\mathcal{G}_{\\delta}$ transports more mass than the mass at $v$ and that each edge transports a non-negative amount of mass. ", "page_idx": 18}, {"type": "text", "text": "In the augmentation process, for any $i\\in\\{1,\\ldots,k-1\\}$ , we decrease $\\hat{\\tau}(r_{i},b_{i+1})$ by $\\mathrm{bc}(P)$ , where by definition, $\\mathrm{bc}(P)\\sp{\\sp{\\bullet}}\\leq\\,\\hat{\\tau}(r_{i},b_{i+1})$ ; hence, $\\hat{\\tau}(r_{i},b_{i+1})\\ge0$ after augmentation. Furthermore, for any forward edge $(b_{i},r_{i})$ , $i\\in\\{1,\\ldots,k\\}$ , we increases $\\hat{\\tau}(r_{i},b_{i})$ by ${\\mathrm{bc}}(P)$ , and $\\hat{\\tau}(r_{i},b_{i})$ remains non-negative. ", "page_idx": 18}, {"type": "text", "text": "For any $i\\in\\{2,\\ldots,k\\}$ , we increase $\\hat{\\tau}(b_{i},r_{i})$ (resp. decrease $\\hat{\\tau}(r_{i-1},b_{i}))$ by $\\mathrm{bc}(P)$ ; hence, the total amount of mass transported from $b_{i}$ remains unchanged. Similarly, for each $i\\in\\{1,\\ldots,k-1\\}$ , we increase $\\hat{\\tau}(b_{i},r_{i})$ (resp. decrease $\\hat{\\tau}(r_{i},b_{i+1}))$ by $\\mathrm{bc}(P)$ and the total amount of mass transported into $r_{i}$ remains unchanged. For the endpoint $b_{1}$ (resp. $r_{k}$ ), we only increase the amount of mass transported from $b_{1}$ (resp. into $r_{k}$ ) by $\\mathrm{bc}(P)$ , where by definition, $\\mathrm{bic}(P)\\leq\\mathrm{ex}(b_{1})$ (resp. $\\mathrm{bc}(P)\\leq\\mathrm{e}\\bar{\\mathrm{x}}(r_{k}))$ . Therefore, the total mass transport from $b_{1}$ (resp. into $r_{k}$ ) after augmentation is at most $\\nu(b)$ (resp. $\\mu_{r_{k}},$ ), as desired. ", "page_idx": 18}, {"type": "text", "text": "Note that if a backward edge $(r,b)\\in P$ determines the bottleneck capacity of the augmenting path $P$ , then $\\hat{\\tau}(r,b)=0$ after augmentation and the backward edge is removed from the residual graph. Otherwise, if the endpoint $b_{1}$ (reps. $r_{k}$ ) determines the bottleneck capacity of $P$ , then $b_{1}$ (resp. $r_{k}$ ) will be fully transported after augmentation. ", "page_idx": 18}, {"type": "text", "text": "Lemma 2.5. The transport plan obtained after augmenting a $\\delta$ -feasible transport plan $\\hat{\\tau},y(\\cdot)$ along any augmenting path $P$ in the residual graph is $\\delta$ -feasible. ", "page_idx": 18}, {"type": "text", "text": "Proof. Let $P\\,=\\,\\langle s,b_{1},r_{1},\\dots,b_{k},r_{k},t\\rangle$ denote an augmenting path in the residual graph. When augmenting the transport plan along $P$ , we increase the mass transportation on forward edges $(b_{i},r_{i})$ for each $i\\in[1,k]$ and decrease the mass transportation on the backward edges $(r_{i},b_{i+1})$ for each $i\\in[1,k-1]$ . Therefore, any pair $(r,b)$ that transports mass after augmentation but was not transporting mass before augmentation has to be a forward edge of $P$ . Since we only add forward edges from the point $b$ to the representative points in $V_{b}^{2\\delta}\\cap A_{\\delta}$ , the edge $(r,b)$ satisfies the $\\delta$ -feasibility condition (F1), and $\\hat{\\tau},y(\\cdot)$ remains feasible after augmentation. \u53e3 ", "page_idx": 18}, {"type": "text", "text": "B Missing Details of Section 3 ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "In this section, we provide the missing details of the implementation of the INCREASEWEIGHTS and ACYCLIFY procedures and also prove the properties of the three procedures. ", "page_idx": 18}, {"type": "text", "text": "B.1 Missing Proofs of the SEARCHANDAUGMENT Procedure ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Lemma 3.1. Suppose invariants $(I I)$ and $(I2)$ hold at the start of the SEARCHANDAUGMENT procedure. Then, during the execution of the SEARCHANDAUGMENT procedure, ", "page_idx": 18}, {"type": "text", "text": "(S1) the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remains $\\delta$ -feasible,   \n(S2) any point $b\\in B$ (resp. backward edge $(r,b).$ ) marked as visited will not form an admissible augmenting path during the execution of the procedure, and   \n(S3) there are no admissible cycles in the residual graph. ", "page_idx": 18}, {"type": "text", "text": "Proof. We prove the properties separately in the following. ", "page_idx": 18}, {"type": "text", "text": "Property $(S l)$ ). By the construction of the search path, any augmenting path computed by the SEARCHANDAUGMENT procedure is an admissible augmenting path. From Lemma 2.5, augmenting $\\hat{\\tau}_{\\delta}$ along an admissible augmenting path does not violate the $\\delta$ -feasibility condition; hence, the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ is a $\\delta$ -feasible transport plan during the execution of the SEARCHANDAUGMENT procedure and (S1) holds. ", "page_idx": 18}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/ce34a7a705e73128c8cbc76826a52d4f5667b32af7d42a77c54d819dbf3200b5.jpg", "img_caption": ["Figure 5: (left) An augmenting path found by the SEARCHANDAUGMENT procedure (blue path), and (right) two admissible triples (highlighted in pink) formed after augmentation. "], "img_footnote": [], "page_idx": 19}, {"type": "text", "text": "", "page_idx": 19}, {"type": "text", "text": "Next, we present an overview of a new property of the SEARCHANDAUGMENT procedure, which we formally state and prove in Lemma B.1 below. Using that, we first prove (S3) and then prove (S2). ", "page_idx": 19}, {"type": "text", "text": "In Figure 5 (left), suppose the blue edges show an admissible augmenting path found by the SEARCHANDAUGMENT procedure, and suppose the green (resp. red) points show the unvisited (resp. visited) points of $B$ . For the region $\\varphi$ , suppose $\\langle b_{1},b_{2},\\dots,b_{6}\\rangle$ denote the set of neighbors of $r_{\\varphi}$ in $\\mathcal{G}_{\\delta}$ , sorted in increasing order of their weighted distance to $r_{\\varphi}$ . When the partial DFS procedure processes $r_{\\varphi}$ , the two weighted nearest neighbors of $\\varphi$ (i.e., $b_{1}$ and $b_{2}$ ) are already marked as visited, leading the procedure to add $b_{3}$ to the search path. After augmentation (Figure 5 (right)), for the newly created backward edge $(r_{\\varphi},b_{3})$ , the only admissible triples containing $(r_{\\varphi},b_{3})$ are $\\left(b_{1},r_{\\varphi},b_{3}\\right)$ and $\\left(b_{2},r_{\\varphi},b_{3}\\right)$ (the triples highlighted in pink), where $b_{3}$ is unvisited and both $b_{1}$ and $b_{2}$ are visited. More formally, as shown in Lemma B.1, for an augmenting path $P$ found by the procedure, assuming that (S3) holds before augmentation along $P$ , for any newly created admissible triples $(b,r_{\\varphi},b^{\\prime})$ after augmenting the transport plan along $P$ , the point $b$ (resp. $b^{\\prime}$ ) is marked as visited (resp. unvisited). ", "page_idx": 19}, {"type": "text", "text": "Property (S3). We begin by presenting an overview of our proof. Consider any augmenting path $P$ found by the SEARCHANDAUGMENT procedure. Assuming that (S3) holds before augmentation along $P$ , all vertices that are reachable from a visited point $b$ by an admissible path in the procedure are also visited, since those points were also added to the search path, did not lead to an admissible augmenting path, marked as visited and removed from the search path. Hence, all points having an admissible path to the visited points (i.e., all points that are reachable from the visited points in our backward DFS) are also visited. Therefore, there are no admissible paths from an unvisited point to a visited point in the residual graph. After augmenting along $P$ , by Lemma B.1, for any newly formed admissible triple $(b,r_{\\varphi},b^{\\prime})$ , the point $b$ (resp. $b^{\\prime}$ ) is visited (resp. unvisited), and since there are no admissible paths from any unvisited point to any visited point, the newly formed admissible triple $(b,r_{\\varphi},b^{\\prime})$ does not form a cycle of admissible triples. Hence, (S3) holds after augmentation as well. We provide the details of the proof below. ", "page_idx": 19}, {"type": "text", "text": "Let $P^{1},\\ldots,P^{k}$ denote the sequence of augmenting paths computed by the SEARCHANDAUGMENT procedure, and let $\\hat{\\tau}_{\\delta}^{0},\\hat{\\tau}_{\\delta}^{1},\\dots,\\hat{\\tau}_{\\delta}^{k}$ denote the sequence of transport plans computed by the procedure, i.e., $\\hat{\\tau}_{\\delta}^{0}$ is the transport plan computed in the previous iteration, and for each $i\\in[1,k]$ , $\\hat{\\tau}_{\\delta}^{i}$ is obtained by augmenting $\\hat{\\tau}_{\\delta}^{i-1}$ along $P^{i}$ . Let $\\mathcal{G}^{i}$ denote the residual graph corresponding to $\\hat{\\tau}_{\\delta}^{i}$ for each $i\\in[0,k]$ . Let $V^{i}$ (resp. $U^{i}$ ) denote the set of visited (resp. unvisited) points in $B$ when the procedure augments $\\hat{\\tau}_{\\delta}^{i-1}$ along $P^{i}$ . ", "page_idx": 19}, {"type": "text", "text": "Initially, from invariant (I2), there are no cycles of admissible triples in the residual graph, and (S3) holds for $\\mathcal{G}^{0}$ . For any $i\\in[1,k]$ , assuming $\\dot{\\boldsymbol{g}}^{0},\\ldots,\\boldsymbol{g}^{i-1}$ satisfies (S3), we show that $\\mathcal{G}^{i}$ also satisfies (S3). Suppose $(b,r,b^{\\prime})$ is any admissible triple in $\\mathcal{G}^{i}$ formed after augmenting $\\hat{\\tau}_{\\delta}^{i-1}$ along $P^{i}$ , i.e., the triple $(b,r,b^{\\prime})$ is admissible in $\\mathcal{G}^{i}$ but not in $\\mathcal{G}^{i-1}$ . We show that the triple $(b,r,b^{\\prime})$ does not participate in any admissible cycles; hence, using property (S3) on $\\mathcal{G}^{i-1}$ , there are no admissible cycles in $\\mathcal{G}^{i}$ and property (S3) holds for $\\mathcal{G}^{i}$ as well. ", "page_idx": 19}, {"type": "text", "text": "Since (S3) holds for $\\mathcal{G}^{0},\\ldots,\\mathcal{G}^{i-1}$ , for any visited point $b\\in V^{i-1}$ , the point $b$ has been added to the search path $Q$ by the SEARCHANDAUGMENT procedure, did not lead to the computation of an augmenting path, marked as visited and removed from the path. In this case, any point $b^{\\prime\\prime}$ that is reachable from $b$ by an admissible path inGi\u22121 (and therefore, is reachable by our partial DFS procedure from $b$ ) would have also been added to the path, marked as visited and removed from $Q$ , i.e., any point $b^{\\prime\\prime}\\in B$ that has an admissible path to the visited point $b$ in the residual graph $\\mathcal{G}^{i-1}$ is also visited. By this observation, there are no admissible paths from any unvisited point in $B$ to any visited point in $\\mathcal{G}^{i-1}$ . From Lemma B.1, for any newly formed admissible triple $(b,r,b^{\\prime})$ , we have $b\\in V^{i-1}$ and $b^{\\prime}\\in U^{i-1}$ . Thus, all admissible triples formed after augmenting $\\hat{\\tau}_{\\delta}^{i-1}$ along $P^{i}$ are from a visited point to an unvisited point, while there are no admissible paths from any unvisited point to any visited point; therefore, the newly formed admissible triples do not form any admissible cycles and (S3) holds for $\\mathcal{G}^{i}$ as well. ", "page_idx": 20}, {"type": "text", "text": "Property (S2). We use the property (S3) to show that (S2) holds. For any point $b\\in B$ that is marked as visited, as discussed above, if (S3) holds, all vertices that are reachable from $b$ by an admissible path in our backward DFS (i.e., all points having an admissible path to $b$ in the residual graph) are also visited. Since any free point $b_{f}\\in B$ is unvisited, $b_{f}$ does not have an admissible path to any visited point $b\\in B$ and therefore, the visited points do not participate in an admissible augmenting path. Furthermore, the procedure marks a backward edge $(r,b)$ as visited if, for each admissible triple $\\bar{(b^{\\prime},r,b)}$ , the point $b^{\\prime}$ is visited. Since the point $b^{\\prime}$ cannot be included in an admissible augmenting path, the visited backward edge $(r,b)$ also does not form an admissible augmenting path. ", "page_idx": 20}, {"type": "text", "text": "Lemma B.1. During the execution of the SEARCHANDAUGMENT procedure, suppose $P$ is an admissible augmenting path found by the procedure, and let $\\mathcal{G}$ (resp. $\\mathcal{G}^{\\prime}$ ) denote the residual graph before (resp. after) augmenting the transport plan along $P$ . Let $(b,r,b^{\\prime})$ denote an admissible triple in $\\mathcal{G}^{\\prime}$ that is not admissible in $\\mathcal{G}$ . Assuming that (S3) holds prior to augmentation along $P$ , the point $b$ is marked as visited, and $b^{\\prime}$ is marked as unvisited. ", "page_idx": 20}, {"type": "text", "text": "Proof. Consider any triple $(b,r,b^{\\prime})$ that is admissible in $\\mathcal{G}^{\\prime}$ but not in $\\mathcal{G}$ . Recall that by the definition of the admissible triples, $(r,b^{\\prime})$ is a backward edge in $\\mathcal{G}^{\\prime}$ and $\\mathrm{d}_{y}(r,b)\\;>\\;\\mathrm{d}_{y}(r,b^{\\prime})$ . Since the SEARCHANDAUGMENT procedure does not change the weights $y(\\cdot)$ , the only case where $(b,r,b^{\\prime})$ is not admissible in $\\mathcal{G}$ is when $(r,b^{\\prime})$ is not a backward edge in $\\mathcal{G}$ , i.e., the pair $(b^{\\prime},r)$ is in $P$ as a forward edge, and augmenting $\\hat{\\tau}_{\\delta}$ along $P$ results in transporting mass from $b^{\\prime}$ to $r$ . On the other hand, by step 2(a) of the SEARCHANDAUGMENT procedure, a forward edge $(b^{\\prime},r)$ will be added to the search path only if $b^{\\prime}$ is the weighted nearest unvisited neighbor of $r$ ; in other words, since $\\mathrm{d}_{y}(r,b)>\\tilde{\\mathrm{d}_{y}(r,b^{\\prime})}$ and the procedure added $b^{\\prime}$ to the search path (instead of $b$ ), the point $b$ was marked as visited by the procedure. Therefore, for any newly formed admissible triple $(\\bar{b_{,}}\\,r,\\bar{b^{\\prime}})$ , point $b$ (resp. $b^{\\prime}$ ) is marked as visited (resp. unvisited). \u53e3 ", "page_idx": 20}, {"type": "text", "text": "B.2 Missing Details and Proofs of the INCREASEWEIGHTS Procedure ", "text_level": 1, "page_idx": 20}, {"type": "text", "text": "After the execution of the SEARCHANDAUGMENT procedure, no admissible augmenting paths remain in the residual graph, i.e., there are no admissible paths from the source vertex $s$ to the sink vertex $t$ . The INCREASEWEIGHTS procedure increases the weights of the subset of points in $B$ that are reachable from $s$ by admissible paths to expand their Voronoi cells and to create new admissible triples in the residual graph. For instance, in Figure 6 (left), the path from $s$ to $t$ is not admissible (the triple $\\left(b_{2},r_{2},b_{3}\\right)$ is not admissible, as $b_{3}$ has a lower weighted distance to $r_{2}$ than $b_{2}$ ). As shown in Figure 6 (right), the INCREASEWEIGHTS procedure then increases the weight of the points $b_{1}$ and $b_{2}$ (which are reachable from $s$ ), leading to the formation of an admissible augmenting path (note that upon updating the weights, the regions corresponding to $r_{1}$ and $r_{2}$ have slightly changed). The details of the INCREASEWEIGHTS procedure are described below. ", "page_idx": 20}, {"type": "text", "text": "For each point $r\\,\\in\\,A_{\\delta}$ , let $\\mathcal{N}(r)\\subseteq B$ denote the set of points $b\\in B$ with $\\hat{\\tau}_{\\delta}(r,b)>0$ , sorted in decreasing order of their weighted distance to $r$ , i.e., $\\bar{\\mathcal{N}}(r)=\\{b_{1},\\ldots,b_{k}\\}$ where $\\mathrm{d}_{y}(r,b_{1})\\ge$ $\\mathrm{d}_{y}(r,b_{2})\\geq\\bar{\\mathscr{p}}\\,.\\,.\\,\\mathrm{d}_{y}(r,b_{k})$ . Mark all points $b\\in B$ and all forward edges $(b,r)$ as unvisited and set $\\bar{\\kappa}=\\emptyset$ , let $U=B$ denote the set of unvisited points of $B$ , and define $Q:=\\langle s\\rangle$ as the search path that the algorithm grows. Execute the following steps until $Q$ becomes empty. ", "page_idx": 20}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/149ce1b0e2e06100dede35644626e84609e4a7081f8cf1bffca4d546834fef46.jpg", "img_caption": ["Figure 6: (left) After the execution of the SEARCHANDAUGMENT procedure, there are no admissible augmenting paths in $\\mathcal{G}_{\\delta}$ , and (right) by increasing the weights of the points that are reachable from $s$ by augmenting paths (points $b_{1}$ and $b_{2}$ ), new admissible triples are created (e.g. $(b_{2},r_{2},b_{3}))$ , which might lead to the formation of admissible augmenting paths. "], "img_footnote": [], "page_idx": 21}, {"type": "text", "text": "1. If $Q=\\langle s\\rangle$ , then if there exists an unvisited point $b\\in U$ such that $(s,b)\\in\\mathcal{G}_{\\delta}$ , then add $b$ to $Q$ as $b_{1}$ . Otherwise, remove $s$ from $Q$ .   \n2. If $Q=\\langle s,b_{1},r_{1},\\ldots,b_{i}\\rangle$ for some $i\\geq1$ , (a) If there exists an unvisited forward edge $(b_{i},r)$ in $\\mathcal{G}_{\\delta}$ , add $r$ to $Q$ as $r_{i+1}$ . (b) Otherwise, mark $b_{i}$ as visited, remove $b_{i}$ from $U$ , add $b_{i}$ to $\\kappa$ , and remove $b_{i}$ from $Q$ .   \n3. If $Q=\\langle s,b_{1},r_{1},\\ldots,b_{i},r_{i}\\rangle$ for some $i\\geq1$ , let $\\begin{array}{r}{b:=\\arg\\operatorname*{min}_{b^{\\prime}\\in U\\cap N(r)}\\mathrm{d}_{y}(r_{i},b^{\\prime})}\\end{array}$ denote the unvisited point of $b$ with the minimum weighted distance to $r$ among all points of $B$ that transport mass to $r$ . (a) If $(b_{i},r_{i},b)$ is admissible, i.e., $\\mathrm{d}_{y}(r_{i},b)>\\mathrm{d}_{y}(r_{i},b_{i})$ , then add $b$ as $b_{i+1}$ to $Q$ . (b) Otherwise, remove $r_{i}$ from $Q$ and mark $(b_{i},r_{i})$ as visited. ", "page_idx": 21}, {"type": "text", "text": "After the DFS procedure terminates, for each point $b\\in\\mathcal{K}$ , set $y(b)\\gets y(b)+\\delta$ . This completes the description of the DFS step. We next describe how to recompute the residual graph and the compressed transport plan with respect to the updated weights. ", "page_idx": 21}, {"type": "text", "text": "Let $y(\\cdot)$ (resp. $y^{\\prime}(\\cdot))$ denote the weights of the points in $B$ after (resp. before) the weight updates, let $\\mathcal{X}_{\\delta}$ (resp. $\\mathcal{X}_{\\delta.}^{\\prime}$ ) denote the partitioning of the set $A$ with respect to weights $y(\\cdot)$ (resp. $y^{\\prime}(\\bar{\\cdot}))$ , and let $A_{\\delta}$ (resp. $A_{\\delta}^{\\prime}$ ) denote the set of representative points of the regions in $\\mathcal{X}_{\\delta}$ (resp. $\\mathcal{X}_{\\delta.}^{\\prime}$ ). Furthermore, let $\\hat{\\tau}_{\\delta}^{\\prime}$ denote the transport plan maintained by the algorithm for partitioning $\\mathcal{X}_{\\delta}^{\\prime}$ . To compute the new transport plan $\\hat{\\tau}_{\\delta}$ for the point set $A_{\\delta}$ , the INCREASEWEIGHTS procedure first computes the arrangement $\\boldsymbol{\\wp}$ of all $3n$ cells used to construct $\\mathcal{X}_{\\delta}^{\\prime}$ with all $3n$ cells used to construct $\\mathcal{X}_{\\delta}$ , i.e., $\\boldsymbol{\\wp}$ is the arrangement of Voronoi cell, $\\delta\\cdot$ -expanded Voronoi cell, and $2\\delta$ -expanded Voronoi cell of each point $b\\in B$ both before and after weight updates. See Figure 7. For each region $\\varphi\\in\\mathcal{X}_{\\delta}^{\\prime}\\cup\\mathcal{X}_{\\delta}$ , let $\\mathcal{C}(\\varphi)\\subseteq\\mathcal{Y}$ denote the set of regions of $\\boldsymbol{\\wp}$ that lie inside $\\varphi$ . For each region $\\varrho\\in\\mathcal{V}$ , pick an arbitrary representative point $r_{\\varrho}$ inside $\\varrho$ . We denote the set of all representative points of the regions in $\\boldsymbol{\\wp}$ by $Y$ . ", "page_idx": 21}, {"type": "text", "text": "The INCREASEWEIGHTS procedure first converts $\\hat{\\tau}_{\\delta}^{\\prime}$ to a transport plan $\\hat{\\tau}$ over the finer partitioning $Y\\times B$ by simply splitting each region $\\varphi^{\\prime}$ in $\\mathbf{\\mathcal{X}}_{\\delta}^{\\prime}$ (and its mass transportation) to fine regions of $\\boldsymbol{\\wp}$ inside $\\varphi^{\\prime}$ . The procedure then uses $\\hat{\\tau}$ to construct a transport plan $\\hat{\\tau}_{\\delta}$ over $A_{\\delta}\\times B$ by merging the regions of $\\boldsymbol{\\wp}$ (and their mass transportation) to regions of $\\mathcal{X}_{\\delta}$ . The details are provided next. ", "page_idx": 21}, {"type": "text", "text": "For each point $b~\\in~B$ , each region $\\varphi^{\\prime}\\;\\in\\;\\mathcal{X}_{\\delta}^{\\prime}$ with $\\hat{\\tau}_{\\delta}^{\\prime}(r_{\\varphi^{\\prime}},b)\\;>\\;0$ , and each $\\varrho^{\\prime}\\;\\in\\;\\mathcal{C}(\\varphi^{\\prime})$ , set $\\begin{array}{r}{\\hat{\\tau}(\\varrho^{\\prime},b)=\\frac{\\mu(\\varrho^{\\prime})}{\\mu(\\varphi^{\\prime})}\\hat{\\tau}_{\\delta}^{\\prime}(r_{\\varphi^{\\prime}},b)}\\end{array}$ . This completes the description of the split step and the construction of $\\hat{\\tau}$ . Next, the procedure constructs $\\hat{\\tau}_{\\delta}$ by setting, for each point $b\\in B$ and each region $\\varphi\\in\\mathcal{X}_{\\delta}$ , $\\begin{array}{r}{\\hat{\\tau}_{\\delta}(r_{\\varphi},b):=\\bar{\\sum}_{\\varrho\\in\\mathcal{C}(\\varphi)}\\,\\hat{\\tau}(\\varrho,b)}\\end{array}$ . The transport plan $\\hat{\\tau}_{\\delta}$ is defined over $A{\\boldsymbol{\\delta}}\\times B$ . ", "page_idx": 21}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/74024a9f06c19b78258cabcdc92ced54f3fb921f80e9c21c0b4866ddfb08fe29.jpg", "img_caption": ["Figure 7: (left) The partitioning $\\mathcal{X}_{\\delta}^{\\prime}$ before updating weights, (middle) the partitioning $\\mathcal{X}_{\\delta}$ after updating the weights of the points of $B$ that are reachable from $s$ by admissible paths (the blue cross points), and (right) the combined partitioning $\\boldsymbol{\\wp}$ . "], "img_footnote": [], "page_idx": 22}, {"type": "text", "text": "Finally, for each region $\\varphi\\in\\mathcal{X}_{\\delta}$ , our algorithm stores a list $\\mathcal{N}(\\boldsymbol{r}_{\\varphi})$ of all points $b\\in B$ with $r_{\\varphi}\\in V_{b}^{2\\delta}$ , sorted in increasing order of their weights distance to $r_{\\varphi}$ , i.e., $\\mathcal{N}(r_{\\varphi})=\\left\\langle b_{1},\\dots,b_{k}\\right\\rangle$ , $r_{\\varphi}\\in V_{b_{i}}^{2}\\delta$ for each $i\\in[1,k]$ , and $\\mathrm{d}_{y}(r_{\\varphi},b_{i})\\leq\\mathrm{d}_{y}(r_{\\varphi},b_{j})$ for each $1\\leq i<j\\leq k$ . This completes the description of the INCREASEWEIGHTS procedure. ", "page_idx": 22}, {"type": "text", "text": "Lemma 3.2. Suppose invariant $(I I)$ holds at the start of the INCREASEWEIGHTS procedure. Then, during the execution of the INCREASEWEIGHTS procedure, ", "page_idx": 22}, {"type": "text", "text": "(W1) the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remain $\\delta$ -feasible,   \n(W2) the weight of each free point $b\\in B$ increases by $\\delta$ , and   \n(W3) the weight of each point $b\\in B$ with free regions inside $V_{b}^{\\delta}$ remains unchanged. ", "page_idx": 22}, {"type": "text", "text": "Proof. Let $y(\\cdot)$ (resp. $y^{\\prime}(\\cdot)\\rangle$ ) denote the weights of the points after (resp. before) the execution of the INCREASEWEIGHTS procedure, and let $\\mathcal{X}_{\\delta}$ (resp. $\\mathbf{\\mathcal{X}}_{\\delta}^{\\prime}$ ) be the partitioning with respect to weights $y(\\cdot)$ (resp. $y^{\\prime}(\\cdot))$ . For any point $a\\in A$ , let $\\varphi_{a}$ (resp. $\\varphi_{a}^{\\prime}$ ) be the region in $\\mathcal{X}_{\\delta}$ (resp. $\\mathcal{X}_{\\delta.}^{\\prime}$ ) that contains $a$ , and let $b_{a}$ (resp. $b_{a}^{\\prime}$ ) denote the weighted nearest neighbor of $a$ in $B$ with respect to weights $y(\\cdot)$ (resp. $y^{\\prime}(\\cdot))$ . For any pair of points $(a,b)\\in A\\times B$ with $\\bar{\\tau}_{\\delta}^{\\prime}(a,b)>0$ , by the $\\delta$ -feasibility of $\\tau_{\\delta}^{\\prime},y^{\\prime}(\\cdot)$ , we have $\\mathrm{d}_{y^{\\prime}}(a,b)-2\\delta\\leq\\mathrm{d}_{y^{\\prime}}(a,b_{a}^{\\prime})$ . To prove property (W1), we show that $\\mathrm{d}_{y}(a,b)-2\\delta\\leq\\mathrm{d}_{y}(a,b_{a})$ . ", "page_idx": 22}, {"type": "text", "text": "Recall that the INCREASEWEIGHTS procedure finds the subset $\\kappa\\subset B$ of points that have admissible paths from the source vertex $s$ of the residual graph and increases the weights of all points in $\\kappa$ by $\\delta$ . Consider the following cases: ", "page_idx": 22}, {"type": "text", "text": "\u2022 If $b\\in\\kappa$ is among the points whose weights are increased by the procedure, then ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(a,b)=\\mathrm{d}_{y^{\\prime}}(a,b)-\\delta\\leq\\mathrm{d}_{y^{\\prime}}(a,b_{a}^{\\prime})+\\delta\\leq\\mathrm{d}_{y^{\\prime}}(a,b_{a})+\\delta\\leq\\mathrm{d}_{y}(a,b_{a})+2\\delta,\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where the second inequality holds from $\\delta$ -feasibility of $\\tau_{\\delta}^{\\prime},y^{\\prime}(\\cdot)$ , the third inequality holds since $b_{a}$ is the weighted nearest neighbor of $a$ with respect to $\\overset{\\cdot}{y^{\\prime}}(\\cdot)$ , and the last inequality holds since $y(b_{a})\\leq y^{\\prime}(b_{a})+\\delta$ . Consequently, $\\mathrm{d}_{y}(a,b)-2\\delta\\leq\\mathrm{d}_{y}(a,b_{a})$ . ", "page_idx": 22}, {"type": "text", "text": "\u2013 If $b_{a}\\in\\mathcal{K}$ , then $\\mathrm{d}_{y^{\\prime}}(r_{\\varphi_{a}},b)\\,\\le\\,\\mathrm{d}_{y^{\\prime}}(r_{\\varphi_{a}},b_{a})$ (since otherwise, the triple $(b_{a},r_{\\varphi_{a}},b)$ would have been an admissible triple and $b_{a}\\in\\mathcal{K}$ would have resulted in $b\\in\\kappa$ ). In this case, since the weighted nearest neighbor of $a$ and $r_{\\varphi_{a}}$ are the same, ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathrm{d}_{y^{\\prime}}(r_{\\varphi_{a}},b_{a}^{\\prime})\\leq\\mathrm{d}_{y^{\\prime}}(r_{\\varphi_{a}},b)\\leq\\mathrm{d}_{y^{\\prime}}(r_{\\varphi_{a}},b_{a})\\leq\\mathrm{d}_{y^{\\prime}}(r_{\\varphi_{a}},b_{a}^{\\prime})+\\delta,}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where the last inequality holds since increasing the weight of $b_{a}^{\\prime}$ by $\\delta$ made it the weighted nearest neighbor of $a$ . Therefore, the region $\\varphi_{a}$ and consequently, the point $a$ lie inside $V_{b}^{\\delta}$ and $V_{b_{a}}^{\\delta}$ . Thus, ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(a,b)=\\mathrm{d}_{y^{\\prime}}(a,b)\\leq\\mathrm{d}_{y^{\\prime}}(a,b_{a})+\\delta=\\mathrm{d}_{y}(a,b_{a})+2\\delta.\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "\u2013 Otherwise, if $b_{a}$ is also not in $\\kappa$ , then $\\mathrm{d}_{y}(a,b_{a})=\\mathrm{d}_{y^{\\prime}}(a,b_{a})$ and, ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\mathrm{d}_{y}(a,b)-2\\delta=\\mathrm{d}_{y^{\\prime}}(a,b)-2\\delta\\leq\\mathrm{d}_{y^{\\prime}}(a,b_{a})=\\mathrm{d}_{y}(a,b_{a}).\n$$", "text_format": "latex", "page_idx": 22}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/9ac068d8e730d529c96cbe79843024c00856e34afd3e12dfd34e4390c3af76a0.jpg", "img_caption": ["Figure 8: An example of a cycle in a transport plan that is created while increasing weights: (left) a transport plan that is a forest, (middle) the new Voronoi diagram and partitioning (red dashed lines) after increasing the weight of $b_{1},b_{2}$ , and $b_{3}$ , and (right) a cycle formed in the new residual graph. "], "img_footnote": [], "page_idx": 23}, {"type": "text", "text": "As a result, the transport plan $\\tau_{\\delta}$ along with the updated weights $y(\\cdot)$ is $\\delta$ -feasible and property (W1) holds. ", "page_idx": 23}, {"type": "text", "text": "Note that each free point $b_{f}\\in\\mathit{B}$ has an edge from the source vertex $s$ ; therefore, $b_{f}\\in\\mathcal{K}$ and the INCREASEWEIGHTS increases the weight of $b_{f}$ by $\\delta$ , proving (W2). Furthermore, for each point $b\\in B$ with a free region $\\varphi\\in V_{b}^{\\delta}$ , since we defined $\\begin{array}{r}{\\mathrm{d}_{y}(r_{\\varphi},t)=\\operatorname*{min}_{b^{\\prime}\\in B}\\mathrm{d}_{y}(r_{\\varphi},b^{\\prime})}\\end{array}$ , the triple $(b,r_{\\varphi},t)$ is admissible. Therefore, the SEARCHANDAUGMENT procedure should have added $r_{\\varphi}$ and $b$ to the search path, not found an admissible augmenting path, and marked $b$ (resp. $(r,t))$ as visited. Therefore, there are no admissible paths from the source to $b$ , or equivalently $b\\not\\in\\mathcal{K}$ , and the weight of $b$ remains unchanged, leading to (W3). \u53e3 ", "page_idx": 23}, {"type": "text", "text": "B.3 Missing Details of the ACYCLIFY Procedure ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "The goal of the ACYCLIFY procedure is to ensure that the invariant (I2) holds, i.e., that at the beginning of each iteration of our algorithm, the transport plan is a forest and there are no admissible cycles in the residual graph. The procedure runs in three steps: (1) make $\\hat{\\tau}_{\\delta}$ a forest, as described in Section B.3.1, (2) cancel any admissible cycles from the residual graph, as described in Section B.3.2, and (3) acyclify the transport plan again, as described in Section B.3.1. Note that our procedure acyclifies the transport plan (to make it a forest) twice, in steps (1) and (3). Making the transport plan a forest in the first step is essential for the efficiency of the second step, and making it a forest in the third step is essential for invariant (I2), as canceling admissible cycles might introduce cycles in the transport plan. ", "page_idx": 23}, {"type": "text", "text": "B.3.1 Acyclifying the Transport Plan ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "Similar to the Acyclify procedure introduced in [54, Section 3.3], we use a dynamic tree structure to make $\\hat{\\tau}_{\\delta}$ a forest as follows. Let $\\mathcal{E}=\\langle e_{1},e_{2},\\ldots,e_{u}\\rangle$ denote the set of all edges $e=(r,b)\\in A_{\\delta}\\times B$ with $\\hat{\\tau}_{\\delta}(r,b)>0$ . For any $k\\leq u$ , let $\\mathcal{E}_{k}:=\\left<e_{1},e_{2},\\dots,e_{k}\\right>$ . Define $F_{0}:=\\varnothing$ as an empty forest and $\\hat{\\tau}_{0}^{\\prime}(r,b)=0$ for all pairs $(r,b)\\in A_{\\delta}\\times B$ . Starting from $k=1$ , for any $k\\leq u$ , the algorithm computes a forest $F_{k}$ and a transport plan $\\hat{\\tau}_{k}^{\\prime}$ defined over $F_{k}$ using $F_{k-1}$ and $\\hat{\\tau}_{k-1}^{\\prime}$ as follows. If adding the edge $e_{k}$ to $F_{k-1}$ does not create a cycle, then the algorithm simply sets $F_{k}\\gets F_{k-1}\\cup\\{e_{k}\\}$ , $\\hat{\\tau}_{k}^{\\prime}(e_{k})\\gets\\hat{\\tau}_{\\delta}(e_{k})$ and $\\hat{\\tau}_{k}^{\\prime}(e)\\gets\\tau_{k-1}^{\\prime}(e)$ for all edges $e\\in F_{k-1}$ . Otherwise, adding $e_{k}$ to $F_{k-1}$ results in the creation of an even-length cycle $\\mathcal{C}$ . Let $c$ denote the minimum capacity of the edges in $\\mathcal{C}$ , and let $e^{*}$ denote the edge with the minimum capacity. Consider an ordering of the edges of the cycle $\\mathcal{C}$ that starts with $e^{*}$ , i.e., $\\mathcal{C}=\\langle e^{*}=e_{1}^{\\prime},e_{2}^{\\prime},\\ldots,e_{2j}^{\\prime}\\rangle$ . The algorithm increases (resp. reduces) the mass transported along the edge $e_{2i}^{\\prime}$ (resp. $e_{2i-1}^{\\prime})$ by $c$ for each $i\\in[1,j]$ . Finally, the algorithm sets $F_{k}\\gets F_{k-1}\\cup\\{e_{k}\\}\\setminus\\{e^{*}\\}$ . This completes the description of step 1. Using the dynamic tree structure by Sleator and Tarjan [56], each operation takes $O(\\log n)$ amortized time, and since $|{\\mathcal{E}}|=O(n^{3})$ , this process takes a total of $O(n^{3}\\log{n})$ time. ", "page_idx": 23}, {"type": "image", "img_path": "Xq0Jwbczkn/tmp/658fca932fc75a86ab4227ec6902d0d13815d46055d653f31ad63b9b4d2d440b.jpg", "img_caption": ["Figure 9: An example of the formation of admissible cycles due to updating the weights and the residual graph: (left) a transport plan with no admissible cycles in the corresponding residual graph, (middle) the new Voronoi diagram and partitioning (red lines) after increasing the weights of $b_{3}$ and $b_{2}$ , and (right) an admissible cycle $\\left\\langle b_{1},r_{1},b_{2},r_{2},b_{3},r_{3}\\right\\rangle$ formed in the new residual graph. "], "img_footnote": [], "page_idx": 24}, {"type": "text", "text": "B.3.2 Acyclifying the Admissible Triples ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "To remove all admissible cycles from the residual graph, we use a partial DFS similar to the one described in the SEARCHANDAUGMENT procedure. Let $\\left\\{\\overline{{\\mathcal{G}_{\\delta}}}\\right.$ be the graph formed by reversing the direction of all the edges of $\\mathcal{G}_{\\delta}$ . The procedure first marks all points of $B$ and all backward edges as unvisited and defines $U:=B$ as the set of unvisited points. While there exists an unvisited point $b\\in B$ , the procedure initializes a partial DFS by setting $Q=\\left<b=b_{1}\\right>$ and searches as follows until $Q$ becomes empty. ", "page_idx": 24}, {"type": "text", "text": "1. If $Q=\\langle b_{1},r_{1},\\ldots,b_{i}\\rangle$ for some $i\\geq1$ , (a) If there are no unvisited backward edges $(b_{i},r)$ in $\\left\\{\\overline{{\\mathcal{G}_{\\delta}}}\\right.$ , then mark $b_{i}$ as visited and remove $b_{i}$ from $Q$ and $U$ . (b) Otherwise, there exists an unvisited backward edge $\\left(b_{i},r_{\\varphi}\\right)$ . Add $r_{\\varphi}$ to $Q$ as $r_{i+1}$ .   \n2. If $Q=\\langle b_{1},r_{1},\\ldots,b_{i},r_{i}\\rangle$ for some $i\\geq1$ , let $b:=\\arg\\operatorname*{min}_{b^{\\prime}\\in U}\\mathrm{d}_{y}(r_{i},b^{\\prime})$ be the unvisited point with the minimum weighted distance to $r_{i}$ . (a) If $(b,r_{i},b_{i})$ is admissible, i.e., $\\mathrm{d}_{y}(r_{i},b)<\\mathrm{d}_{y}(r_{i},b_{i})$ , \u2013 If $b$ already exists in the path $Q$ as $b_{j}$ , then $C=\\langle b_{j},r_{j},\\ldots,b_{i},r_{i},b_{i+1}=b=b_{j}\\rangle$ is an admissible cycle. Cancel the cycle $C$ (as described below) and set $Q\\,=$ $\\langle b_{1},r_{1},\\ldots,b_{j}\\rangle$ . \u2013 Otherwise, add $b$ as $b_{i+1}$ to $Q$ . (b) Otherwise, remove $r_{i}$ from $Q$ and mark the backward edge $(r_{i},b_{i})$ as visited. ", "page_idx": 24}, {"type": "text", "text": "Given an admissible cycle $C=\\langle b_{j},r_{j},\\ldots,b_{i},r_{i},b_{i+1}=b_{j}\\rangle$ , the procedure cancels the cycle as follows. Let $\\begin{array}{r}{b c(C):=\\operatorname*{min}_{t\\in[j,i]}\\dot{\\tau}_{\\delta}(r_{t},b_{t})}\\end{array}$ denote the bottleneck capacity of the cycle $C$ . For any forward edge $\\left(b_{t+1},r_{t}\\right)$ (resp. backward edge $(r_{t},b_{t}))$ in $C$ , set $\\hat{\\tau}_{\\delta}(r_{t},b_{t+1})\\gets\\hat{\\tau}_{\\delta}(r_{t},b_{t+1})+b c(C)$ (resp. $\\hat{\\tau}_{\\delta}(r_{t},b_{t})\\gets\\hat{\\tau}_{\\delta}(r_{t},b_{t})-b c(C))$ . In this way, at least one of the backward edges of the cycle $C$ is removed from the residual graph and the cycle has vanished. ", "page_idx": 24}, {"type": "text", "text": "Lemma 3.3. Suppose invariant $(I I)$ holds at the start of the ACYCLIFY procedure. Then, during the execution of the ACYCLIFY procedure, ", "page_idx": 24}, {"type": "text", "text": "(A1) the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ remains $\\delta$ -feasible, and (A2) the transport plan $\\hat{\\tau}_{\\delta}$ is $a$ forest and there are no admissible cycles in the residual graph. ", "page_idx": 24}, {"type": "text", "text": "Proof. In the first step of the ACYCLIFY procedure, the algorithm makes the transportation network to be a DAG. Note that the resulting transportation network is a subset of the transportation network before the ACYCLIFY procedure, and therefore, for any transporting edge $(r,b)\\in A_{\\delta}\\times B$ , the point $b$ is a $2\\delta$ -weighted nearest neighbor of $r$ , i.e., the transport plan obtained after the first step of the ACYCLIFY procedure is $\\delta$ -feasible. ", "page_idx": 24}, {"type": "text", "text": "Next, we show property (A1) and (A2) for the second step of the procedure. By construction, all triples on the search path maintained by the procedure are admissible, and therefore, any cycle computed by the second step of ACYCLIFY procedure is admissible. Since all forward edges on the computed cycles are from points $b\\in B$ to regions in $V_{b}^{2\\delta}$ , canceling a cycle $C$ does not violate the $\\delta$ -feasibility condition (F1); hence, the transport plan $\\hat{\\tau}_{\\delta},y(\\cdot)$ is a $\\delta$ -feasible transport plan during the execution of the second step of the ACYCLIFY procedure and (A1) holds. ", "page_idx": 24}, {"type": "text", "text": "", "page_idx": 25}, {"type": "text", "text": "To prove property (A2), we show that ", "page_idx": 25}, {"type": "text", "text": "(A3) any point $b\\in B$ (resp. backward edge $(r,b),$ ) marked as visited will not form an admissible cycle during the execution of the procedure, and   \n(A4) during the execution of the second step of the ACYCLIFY procedure, the subgraph of the residual graph induced by visited vertices and their neighboring regions does not have any cycles of admissible triples. Furthermore, there are no admissible paths from an unvisited point to a visited point. ", "page_idx": 25}, {"type": "text", "text": "Assuming property (A3) holds, any point $b\\in B$ that is marked as visited does not participate in an admissible cycle. Since the ACYCLIFY procedure stops when all points in $B$ are visited, there are no admissible cycles in the residual graph. Furthermore, since the transport plan is maintained by a dynamic tree structure the transport plan is a forest. Therefore, to prove property (A2), we show that (A3) holds. ", "page_idx": 25}, {"type": "text", "text": "Furthermore, the property (A3) is a direct corollary of property (A4), as explained next: For each visited point $b\\in B$ , all points $b^{\\prime}\\in B$ having admissible paths to $b$ are also visited (note that the ACYCLIFY procedure searches on the residual graph in the reverse direction of the edges), and if (A4) holds, there are no admissible cycles solely formed by visited vertices; hence, $b$ does not form admissible cycles. Furthermore, the procedure marks a backward edge $(r,b)$ as visited if, for each admissible triple $(b^{\\prime},r,b)$ , the point $b^{\\prime}$ is visited. Since $b^{\\prime}$ is not a part of any admissible cycles (assuming (A4) holds), the triple $(b^{\\prime},r,b)$ also cannot be a part of an admissible cycle. Therefore, to prove property (A3), we prove that (A4) holds in the following. ", "page_idx": 25}, {"type": "text", "text": "We use an inductive argument to prove (A4). Let $C^{1},\\ldots,C^{k}$ denote the sequence of admissible cycles found by the procedure, and let $\\hat{\\tau}_{\\delta}^{0},\\dots,\\hat{\\tau}_{\\delta}^{k}$ denote the sequence of transport plans, where $\\hat{\\tau}_{\\delta}^{0}$ is the transport plan maintained by the algorithm at the beginning of the second step of the procedure and $\\hat{\\tau}_{\\delta}^{i}$ is obtained by canceling $\\hat{\\tau}_{\\delta}^{i-1}$ along $C^{i}$ . The property (A4) trivially holds at the beginning of the execution of the second step of the ACYCLIFY procedure. ", "page_idx": 25}, {"type": "text", "text": "Note that the ACYCLIFY procedure marks a point $b\\in B$ as visited only if the search from $b$ did not lead to finding an admissible cycle, i.e., for all pairs $(b^{\\prime},r)\\in B\\times A_{\\delta}$ such that $(b^{\\prime},r,b)$ is admissible, the point $b^{\\prime}$ is marked as visited and the backward edge $(r,b)$ is marked as visited. Hence, all points having an admissible path to the visited points (i.e., all points that are reachable from the visited points in our backward DFS) are also visited. Therefore, Assuming that property (A4) holds before marking $b$ as visited, property (A4) holds after marking $b$ as visited as well. Next, we show the same when we cancel a cycle ${\\bar{C}}^{i}$ . ", "page_idx": 25}, {"type": "text", "text": "First, note that all points of $B$ that are on the search path are unvisited. Therefore, for any admissible cycle found by the procedure, the points of $B$ on the cycle are unvisited. Using an identical proof as in Lemma B.1, one can show that after canceling a cycle, for any newly formed admissible triple $(b,r,b^{\\prime})$ , the point $b$ is visited and the point $b^{\\prime}$ is unvisited. In other words, canceling a cycle $\\overline{{C}}^{i}$ only creates additional admissible paths from visited points to unvisited points. Assuming that (A4) holds before canceling $C^{i}$ , since no new admissible triples are created from a visited point to another visited point, the subgraph induced by visited points and their neighboring regions remain free of admissible cycles after canceling $C^{i}$ . Furthermore, since no new admissible triples are created from an unvisited point to a visited point upon canceling $C^{i}$ , there will be no admissible paths from an unvisited point to a visited point after cancellation; hence, (A4) remains satisfied. \u53e3 ", "page_idx": 25}, {"type": "text", "text": "C Missing Details of Section 4 ", "text_level": 1, "page_idx": 25}, {"type": "text", "text": "In this section, we analyze the efficiency of the three procedures SEARCHANDAUGMENT, INCREASEWEIGHTS, and ACYCLIFY. ", "page_idx": 25}, {"type": "text", "text": "The SEARCHANDAUGMENT procedure runs a partial DFS on the residual graph to find a set of admissible augmenting paths. The partial DFS procedure, upon backtracking from a point $b\\in B$ (resp. $r\\in A_{\\delta}$ ), marks the point $b$ (resp. the backward edge $(b^{\\prime},r)$ used to reach $r$ ) as visited and does not visit the point $b$ (resp. the backward edge $(b^{\\prime},r))$ again in the same execution. Upon finding an augmenting path $P$ , the procedure augments the transport plan along $P$ in $O(|P|)$ time. Let $\\langle P_{1},\\ldots,P_{k}\\rangle$ denote the set of all augmenting paths found by the SEARCHANDAUGMENT procedure. In 2 dimensions (resp. $d$ dimensions), since the residual graph has $O(n^{3})$ edges (resp. $O(n^{d+1}))$ ), the running time of the procedure would be $\\begin{array}{r}{O(n^{3}+\\sum_{i=1}^{k}|P_{i}|)}\\end{array}$ (resp. $\\begin{array}{r}{O(n^{d+1}+\\sum_{i=1}^{k}|P_{i}|))}\\end{array}$ . In Lemma C.1, we show that $\\textstyle\\sum_{i=1}^{k}|P_{i}|=O(n^{3})$ (resp. $\\textstyle\\sum_{i=1}^{k}|P_{i}|=O(n^{d+1}))$ . Hence, each execution of the SEARCHANDAUGMENT procedure takes $O(n^{3})$ (resp. $O(n^{d+1});$ time. ", "page_idx": 26}, {"type": "text", "text": "Lemma C.1. The total length of augmenting paths computed during the execution of the SEARCHANDAUGMENT procedure is $O(n^{3})$ in 2 dimensions and $O(n^{d+1})$ in d dimensions. ", "page_idx": 26}, {"type": "text", "text": "Proof. Let $\\hat{\\tau}_{\\delta}^{0}$ denote the transport plan maintained by the algorithm at the beginning of execution of the SEARCHANDAUGMENT procedure. To prove this lemma, we categorize the augmenting paths found by the procedure based on the source of their bottleneck capacity, namely (1) set $\\mathcal{P}_{v}$ consisting of augmenting paths whose bottleneck capacity is determined based on the residual capacity of its endpoints, and (2) set $\\mathcal{P}_{e}$ consisting of augmenting paths whose bottleneck capacity is determined based on mass transportation over its backward edges. We first show that $\\left|\\bar{\\mathcal{P}_{v}}\\right|=\\dot{O}(n^{2})$ and then show the same bound for $\\mathcal{P}_{e}$ . Since each augmenting path has a length of at most $2n$ , we then conclude that the total length of all augmenting paths is $\\hat{O}(n^{3})$ . ", "page_idx": 26}, {"type": "text", "text": "Let $P$ be an augmenting path in ${\\mathcal P}_{v}$ . If the bottleneck capacity of $P$ is determined by a free point $b\\in B$ (resp. free region $r\\,\\in\\,A_{\\delta}^{\\phantom{\\,}},$ , then the mass of $b$ (resp. $r)$ will be fully transported after augmentation; therefore, since $|A_{\\delta}\\cup B|\\,=\\,O(n^{2})$ , we have $|{\\mathcal P}_{v}|\\,=\\,O(n^{2})$ . Next, let $P$ be an augmenting path in $\\mathcal{P}_{e}$ ; in this case, the backward edge $(r,b)$ determining the bottleneck capacity of $P$ will be removed from the transport plan after augmentation. Note that by Lemma B.1, for any newly formed admissible triples $(b^{\\prime},\\bar{r},\\bar{b})$ , the point $b^{\\prime}$ is already marked as visited. By property (S2) in Lemma 3.1, the point $b^{\\prime}$ cannot form an admissible augmenting path during the same execution of the SEARCHANDAUGMENT procedure. Hence, the edge $(r,b)$ determining the bottleneck capacity of $P$ was a backward edge of the initial transport plan $\\bar{\\hat{\\tau}_{\\delta}^{0}}$ and augmentation along each path $P\\in\\mathcal{P}_{e}$ removes one of the transporting edges of the transport plan $\\hat{\\tau}_{\\delta}^{0}$ . Using invariant (I2), $|\\mathcal{P}_{e}|=O(n^{2})$ , as claimed. Hence, the total number of augmenting paths found by the procedure is $O(n^{2})\\,$ , and since each augmenting path has a length of at most $2n$ , their total length is $\\dot{O}(n^{3})$ . ", "page_idx": 26}, {"type": "text", "text": "Next, we extend our analysis to $d$ dimensional space, for any $d\\geq2$ . Note that in $d$ dimensions, the residual graph has $O(n^{d})$ vertices and $O(n^{d+1})$ edges. Hence, $|\\mathcal{P}_{v}|=O(n^{d})$ . Since the transport plan $\\hat{\\tau}_{\\delta}^{0}$ is a forest over the point set $A_{\\delta}\\cup B$ , the total number of edges transporting a positive mass in $\\hat{\\tau}_{\\delta}^{0}$ would be $O(n^{d})$ ; since augmenting the transport plan along each augmenting path in $\\mathcal{P}_{e}$ eliminates one of the edges transporting positive mass in $\\hat{\\tau}_{\\delta}^{0}$ , $|\\mathcal{P}_{e}|=O(n^{d})$ . Finally, since each augmenting path has a length of at most $2n$ , the total length of all augmenting paths found by the SEARCHANDAUGMENT procedure would be $O(n^{d+1})$ . \u53e3 ", "page_idx": 26}, {"type": "text", "text": "C.2 Efficiency of the INCREASEWEIGHTS Procedure ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "In this section, we show that for 2-dimensional (resp. $d$ -dimensional) distributions, the INCREASEWEIGHTS procedure runs in $O(n^{2}(\\Phi+n\\log\\bar{n}))$ (resp. $O(n^{d}(\\Phi+n\\log n))$ ) time. The INCREASEWEIGHTS procedure runs a DFS that visits each edge of the residual graph at most once and has a total running time of $O(n^{3})$ (resp. $O(n^{d+1}))$ . Furthermore, in the arrangement used to construct partitioning $\\boldsymbol{\\wp}$ , each point $b\\in B$ has at most 6 Voronoi cells (three cells that are used in the construction of $\\mathcal{X}_{\\delta}$ and three that are used in the construction of $\\mathcal{X}_{\\delta.}^{\\prime}$ ). Using a similar discussion as Section A, one can show that the total number of vertices in the arrangement used to construct $\\boldsymbol{\\wp}$ is $O(n^{2})$ (resp. $O(n^{d}))$ , and the number of regions in $\\boldsymbol{\\wp}$ is at most $O\\overline{{(n^{2})}}$ (resp. $O(n^{d}))$ . The construction of the transport plan $\\hat{\\tau}$ can be done in $O(n^{2}(\\Phi+n))$ (resp. $O(n^{d}(\\Phi+n))$ ) time since (1) the mass of all regions in $\\boldsymbol{\\wp}$ can be determined in $O(n^{2}\\Phi)$ (resp. $O(n^{d}\\Phi))$ time (partitioning the regions in $\\boldsymbol{\\wp}$ into simplices remains an arrangement with $O(n^{2})$ (resp. $O(n^{d});$ ) vertices and therefore, have $O(n^{2})$ (resp. $O(n^{d}))$ regions), and (2) the mass transported on each pair $(\\varrho,b)\\in\\mathcal{y}\\times B$ can be determined in $O(1)$ time. Converting $\\hat{\\tau}$ to $\\hat{\\tau}_{\\delta}$ , as is done in the merge step, also takes $O(n^{3})$ (resp. $O(n^{d+1}))$ time, given that the total complexity of $\\hat{\\tau}$ is $O(n^{3})$ (resp. $O(n^{d+1}))$ . Finally, storing a sorted list of neighbors for each region $r\\,\\in\\,A_{\\delta}$ takes $O(n^{3}\\log{n})$ (resp. $O(n^{d+1})\\log n)$ time in total. Hence, the execution of the INCREASEWEIGHTS procedure takes $O(n^{2}(\\Phi+n\\log n))$ (resp. $O(n^{d}(\\Phi+n\\log n))$ ) time. ", "page_idx": 26}, {"type": "text", "text": "", "page_idx": 27}, {"type": "text", "text": "Lemma C.2. Each execution of the INCREASEWEIGHTS procedure takes $O(n^{2}(\\Phi+n\\log n))$ time in 2 dimensions and $O(n^{d}(\\Phi+n\\log n))$ time in $d$ dimensions. ", "page_idx": 27}, {"type": "text", "text": "C.3 Efficiency of the ACYCLIFY Procedure ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "The first step of this procedure uses a dynamic tree structure to acyclify the transport plan $\\hat{\\tau}_{\\delta}$ . Using the dynamic tree structure by Sleator and Tarjan [56], since the total number of edges of the graph is $\\mathrm{\\Delta}O(n^{3})$ in 2 dimensions (resp. $O(n^{d+1})$ in $d$ dimensions), the running time of this step would be $O(n^{3}\\log{n})$ (resp. $O(n^{d+1}\\log{n}))$ . In the second step, the procedure runs a partial DFS procedure on the residual graph and cancels the admissible cycles. The partial DFS procedure, upon backtracking from a point $b\\in B$ (resp. $r\\in A_{\\delta}$ ), marks the point $b$ (resp. the backward edge $(b^{\\prime},r)$ used to reach $r$ ) as visited and does not visit the point $b$ (resp. the edge $(b^{\\prime},r))$ again in the same execution. Furthermore, upon finding an admissible cycle $C$ , it cancels the cycle in $O(|C|)$ time. Let $\\langle C_{1},\\ldots,C_{k}\\rangle$ denote the set of all cycles found in the execution of the ACYCLIFY procedure. In Lemma C.4, we show that $\\textstyle\\sum_{i=1}^{k}|C_{i}|=O(n^{3})$ in 2 dimensions (resp. $\\textstyle\\sum_{i=1}^{k}|C_{i}|=O(n^{d+1})$ in $d$ dimensions). Given that the size of the residual graph is at most $O(n^{3})$ (resp. $O(n^{d+1}))$ , the second step of the ACYCLIFY procedure takes a total of $\\begin{array}{r}{O(n^{3}+\\sum_{i=1}^{k}|C_{i}|)=O(n^{3})}\\end{array}$ (resp. $O(n^{d+1}))$ time, leading to the following lemma. ", "page_idx": 27}, {"type": "text", "text": "Lemma C.3. Each execution of the ACYCLIFY procedure takes $O(n^{3}\\log{n})$ time in 2 dimensions and $O(n^{d+1}\\log{n})$ time in d dimensions. ", "page_idx": 27}, {"type": "text", "text": "Lemma C.4. The total length of admissible cycles computed during the execution of the second step of the ACYCLIFY procedure is $O(n^{3})$ in 2 dimensions and $O(n^{d+\\widetilde{1}})$ time in $d$ dimensions. ", "page_idx": 27}, {"type": "text", "text": "Proof. Let $\\hat{\\tau}_{\\delta}^{0}$ denote the transport plan maintained by the algorithm at the beginning of execution of the ACYCLIFY procedure. To prove this lemma, we show that the ACYCLIFY procedure finds $O(n^{2})$ admissible cycles, where each cycle has a length of at most $2n$ ; hence, the total length of all cycles found by the procedure would be $O(n^{3})$ . ", "page_idx": 27}, {"type": "text", "text": "Let $C$ be an admissible cycle found by the procedure; in this case, the backward edge determining the bottleneck capacity of $C$ will be removed from the transport plan after cancellation. For any admissible triple $(b,r,b^{\\prime})$ formed after canceling $C$ , using an identical argument as in Lemma B.1, one can show that the edge $(r,b^{\\prime})$ is a backward edge that was on the cycle $C$ as a forward edge, and the point $b$ is marked as visited; hence, by Lemma 3.3, the point $b$ does not form an admissible cycle in the same execution of the ACYCLIFY procedure and therefore, the newly formed backward edge $(r,b^{\\prime})$ cannot be included in any admissible cycles. Therefore, each cycle cancellation removes one of the backward edges of $\\hat{\\tau}_{\\delta}^{0}$ , which is the transport plan obtained after the first step of the ACYCLIFY procedure, i.e., the transportation network of $\\hat{\\tau}_{\\delta}^{0}$ is a forest and the number of its transporting edges is $O(n^{2})$ . Therefore, the total number of cycles found by the ACYCLIFY procedure is $O(n^{2})$ , and their total length is $O(n^{3})$ , as claimed. ", "page_idx": 27}, {"type": "text", "text": "We next show that the total length of admissible cycles in $d$ dimensions is $O(n^{d+1})$ in $d$ dimensions, for any $d\\geq2$ . Note that in $d$ dimensions, the residual graph has $O(n^{d+1})$ edges. Since the transport plan $\\boldsymbol{\\hat{\\tau}}_{\\delta}^{0}$ is a forest over the point set $A_{\\delta}\\cup B$ , the total number of edges transporting a positive mass in $\\hat{\\tau}_{\\delta}^{0}$ would be $O(n^{d})$ ; since canceling each admissible cycle eliminates one of the edges transporting positive mass in $\\hat{\\tau}_{\\delta}^{0}$ , $|{\\mathcal{C}}|=O(n^{d})$ . Since each admissible cycle has a length of at most $2n$ , the total length of all admissible cycles found by the INCREASEWEIGHTS procedure would be $O(n^{d+1})$ . ", "page_idx": 27}, {"type": "text", "text": "C.4 Number of Iterations ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Lemma 4.1. For each scale $\\delta$ , the total number of iterations of step 2 of our algorithm is $O(n)$ . ", "page_idx": 27}, {"type": "text", "text": "Proof. Let $\\tau_{2\\delta},y_{2\\delta}(\\cdot)$ denote the $2\\delta$ -feasible transport plan computed by our algorithm for scale $2\\delta$ , and let $\\tau_{\\delta},y_{\\delta}(\\cdot)$ denote a partial transport plan maintained during the execution of step 2 of our algorithm. Let $\\chi_{2\\delta}$ (resp. $\\mathcal{X}_{\\delta}$ ) denote the partitioning of the set $A$ with respect to weights $y_{2\\delta}(\\cdot)$ (resp. $y_{\\delta}(\\cdot))$ . Let $\\boldsymbol{\\wp}$ be the arrangement of all $3n$ cells used to construct $\\chi_{2\\delta}$ with all $3n$ cells used to construct $\\mathcal{X}_{\\delta}$ , i.e., $\\boldsymbol{\\wp}$ is the arrangement of Voronoi cell, $\\delta$ -expanded Voronoi cell, and $2\\delta$ -expanded Voronoi cell of each point $b\\in B$ with respect to weights $y_{\\delta}(\\cdot)$ along with the Voronoi cell, $2\\delta$ -expanded Voronoi cell, and $4\\delta$ -expanded Voronoi cell of each point $b\\in B$ with respect to weights $y_{2\\delta}(\\cdot)$ . For each region $\\varrho\\in\\mathcal{V}$ , pick an arbitrary representative point $r_{\\varrho}$ inside $\\varrho$ . We denote the set of all representative points of the regions in $\\boldsymbol{\\wp}$ by $Y$ . Let $\\hat{\\tau}_{2\\delta}$ (resp. $\\hat{\\tau}_{\\delta}$ ) denote the compressed transport plan for $\\tau_{2\\delta}$ (resp. $\\tau_{\\delta}$ ) using the partitioning $\\boldsymbol{\\wp}$ . Note that the partitioning $\\boldsymbol{\\wp}$ is a refinement of both partitionings $\\mathcal{X}_{\\delta}$ and $\\chi_{2\\delta}$ . Define $\\tau^{\\prime}:=\\hat{\\tau}_{2\\delta}-\\hat{\\tau}_{\\delta}$ . ", "page_idx": 28}, {"type": "text", "text": "We construct a bipartite graph $\\mathcal{G}^{\\prime}$ over $Y\\times B$ , where for any pair $(r,b)\\in Y\\times B$ , there exists an edge directed from $r$ to $b$ if $\\tau^{\\prime}(r,b)<0$ and directed from $b$ to $r$ if $\\tau^{\\prime}(r,b)>0$ . Consider any directed path $P=\\left\\langle r_{1},b_{1},\\ldots,r_{k},b_{k}\\right\\rangle$ from a free region $r\\,\\in\\,Y$ to a free point $b\\in B$ (with respect to $\\hat{\\tau}_{\\delta}$ ). The path $P$ is an augmenting path in the residual graph corresponding to $\\hat{\\tau}_{\\delta},y_{\\delta}(\\cdot)$ . ", "page_idx": 28}, {"type": "text", "text": "Similar to the standard graph algorithms, we define the net-cost of the path $P$ as $\\phi(P)\\;:=\\;$ $\\begin{array}{r}{\\sum_{i=1}^{k}d(r_{k},b_{k})-\\sum_{i=1}^{k-1}\\bar{d}(\\bar{r_{k}},b_{k+1})}\\end{array}$ . Let $b_{0}:=b_{r_{1}}$ be the weighted nearest neighbor of $r_{1}$ . Then, we can rewrite the net-cost of $P$ as ", "page_idx": 28}, {"type": "equation", "text": "$$\n\\begin{array}{l}{\\displaystyle\\phi({\\cal P})=\\mathrm{d}(r_{1},b_{0})+\\sum_{i=1}^{k}\\left[\\mathrm{d}(r_{i},b_{i})-\\mathrm{d}(r_{i},b_{i-1})\\right]}\\\\ {\\displaystyle=\\mathrm{d}_{y_{\\delta}}(r_{1},b_{0})+\\sum_{i=1}^{k}\\left[\\mathrm{d}_{y_{\\delta}}(r_{i},b_{i})-\\mathrm{d}_{y_{\\delta}}(r_{i},b_{i-1})\\right]+y_{\\delta}(b_{k}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "Due to $\\delta$ -feasibility of the transport plan $\\hat{\\tau}_{\\delta},y_{\\delta}(\\cdot)$ , for all edges $(r_{i},b_{i-1}),i\\in[1,k]$ , the point $b_{i-1}$ is a $2\\delta$ -weighted nearest neighbor of $r_{i}$ ; hence, $\\mathrm{d}_{y_{\\delta}}(r_{i},b_{i})-\\mathrm{d}_{y_{\\delta}}(r_{i},b_{i-1})\\geq-{\\bar{2}}\\delta$ . Since the length of $P$ is at most $2n-1$ , ", "page_idx": 28}, {"type": "equation", "text": "$$\n\\phi(P)=\\ensuremath{\\mathrm{d}}_{y_{\\delta}}(r_{1},b_{0})+\\sum_{i=1}^{k}\\left[\\ensuremath{\\mathrm{d}}_{y_{\\delta}}(r_{i},b_{i})-\\ensuremath{\\mathrm{d}}_{y_{\\delta}}(r_{i},b_{i-1})\\right]+y_{\\delta}(b_{k})\\geq\\ensuremath{\\mathrm{d}}_{y_{\\delta}}(r_{1},b_{0})+y_{\\delta}(b_{k})-2n\\delta.\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "Similarly, we can rewrite the net-cost of $P$ using weights $y_{2\\delta}$ as follows. ", "page_idx": 28}, {"type": "equation", "text": "$$\n\\phi(P)=\\ensuremath{\\mathrm{d}}_{y_{2\\delta}}(r_{1},b_{0})+\\sum_{i=1}^{k}\\left[\\ensuremath{\\mathrm{d}}_{y_{2\\delta}}(r_{i},b_{i})-\\ensuremath{\\mathrm{d}}_{y_{2\\delta}}(r_{i},b_{i-1})\\right]+y_{2\\delta}(b_{k}).\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "According to the $2\\delta$ -feasibility of $\\hat{\\tau}_{2\\delta},y_{2\\delta}(\\cdot)$ , for all edges $(r_{i},b_{i})$ , $i\\in[1,k]$ , the point $b_{i}$ is a $4\\delta$ - weighted nearest neighbor of $r_{i}$ (with respect to weights $y_{2\\delta}(\\cdot))$ ); hence, $\\mathrm{d}_{y_{2\\delta}}(r_{i},b_{i})\\!-\\!\\mathrm{d}_{y_{2\\delta}}(r_{i},b_{i-1})\\leq$ $4\\delta$ . Since the length of $P$ is at most $2n-1$ , ", "page_idx": 28}, {"type": "equation", "text": "$$\n\\boldsymbol{\\mathrm{:}}\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "By property (W3) in Lemma 3.3, during the execution of step 2 of our algorithm, the weights of the points in $B$ with free regions in their $\\delta$ -expansion remain unchanged; therefore, since $b_{0}$ contains free regions inside its $\\delta$ -expanded Voronoi cell, $y_{2\\delta}(b_{0})=y_{\\delta}(b_{0})$ and $\\mathrm{d}_{y_{2\\delta}}(r_{1},b_{0})=\\mathrm{d}_{y_{\\delta}}(r_{1},b_{0})$ . Combining with Equations (13) and (14), ", "page_idx": 28}, {"type": "equation", "text": "$$\ny_{\\delta}(b_{k})-2n\\delta\\leq\\phi(P)-\\mathrm{d}_{y_{\\delta}}(r_{1},b_{0})=\\phi(P)-\\mathrm{d}_{y_{2\\delta}}(r_{1},b_{0})\\leq y_{2\\delta}(b_{k})+4n\\delta.\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "Equivalently, ", "page_idx": 28}, {"type": "equation", "text": "$$\ny_{\\delta}(b_{k})-y_{2\\delta}(b_{k})\\leq6n\\delta.\n$$", "text_format": "latex", "page_idx": 28}, {"type": "text", "text": "By property (W2) in Lemma 3.3, our algorithm increases the weight of the point $b_{k}$ by $\\delta$ in each iteration while its mass is not fully transported by $\\hat{\\tau}_{\\delta}$ ; therefore, the point $b_{k}$ cannot remain free after $6n$ iterations, i.e., after $O(n)$ iterations, there cannot be any remaining free points in $B$ and the step 2 of our algorithm terminates after $O(n)$ iterations. \u53e3 ", "page_idx": 28}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: This paper presents a new combinatorial framework for the semi-discrete OT problem. It is used to design an algorithm for computing a $\\varepsilon$ -close semi-discrete transport plan, as well as a data structure for the discrete OT problem. Our main results are stated in Theorems 1.1 and 1.2 in the introduction and are summarized in the abstract. ", "page_idx": 29}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: Our semi-discrete OT algorithm relies on the existence of an oracle that computes the mass of $\\mu$ inside a triangle, which is common in existing algorithms for the semi-discrete optimal transport problem. We clearly state this assumption in the abstract and Theorem 1.1. ", "page_idx": 29}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 29}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 29}, {"type": "text", "text": "Justification: All theorems and lemmas contain the full set of assumptions, and their proofs are either provided in the main text or the appendix. ", "page_idx": 29}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 29}, {"type": "text", "text": "Justification: This paper does not include experiments. ", "page_idx": 29}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 29}, {"type": "text", "text": "Justification: This paper does not include experiments. ", "page_idx": 29}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 29}, {"type": "text", "text": "Justification: This paper does not include experiments. ", "page_idx": 29}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 29}, {"type": "text", "text": "Justification: This paper does not include experiments. ", "page_idx": 29}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: This paper does not include experiments. ", "page_idx": 30}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 30}, {"type": "text", "text": "Justification: There are no data or human subjects involved in the research process of this paper and there are no known societal impacts and potentially harmful consequences associated with the research conducted in this paper. ", "page_idx": 30}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: None of the categories described by the NeurIPS Code of Ethics, namely, safety, security, discrimination, surveillance, deception and harassment, environment, human rights, and bias and fairness is impacted by the research conducted in this paper. ", "page_idx": 30}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: The paper poses no such risks. ", "page_idx": 30}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: The paper does not use existing assets. ", "page_idx": 30}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: The paper does not release new assets. ", "page_idx": 30}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 30}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "page_idx": 30}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: This paper does not involve crowdsourcing nor research with human subjects. ", "page_idx": 30}]