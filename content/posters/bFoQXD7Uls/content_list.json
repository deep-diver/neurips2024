[{"type": "text", "text": "VeLoRA: Memory Efficient Training using Rank-1 Sub-Token Projections ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Roy Miles\u2020 Pradyumna Reddy Ismail Elezi\u2020 Jiankang Deng Huawei Noah\u2019s Ark Lab ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large language models (LLMs) have recently emerged as powerful tools for tackling many language-processing tasks. Despite their success, training and finetuning these models is still far too computationally and memory intensive. In this paper, we identify and characterise the important components needed for effective model convergence using gradient descent. In doing so we find that the intermediate activations used to implement backpropagation can be excessively compressed without incurring any degradation in performance. This result leads us to a cheap and memory-efficient algorithm for both fine-tuning and pre-training LLMs. The proposed algorithm simply divides the tokens up into smaller sub-tokens before projecting them onto a fixed 1-dimensional subspace during the forward pass. These features are then coarsely reconstructed during the backward pass to implement the update rules. We confirm the effectiveness of our algorithm as being complimentary to many state-of-the-art PEFT methods on the VTAB-1k fine-tuning benchmark. Furthermore, we outperform QLoRA for fine-tuning LLaMA and show competitive performance against other memory-efficient pre-training methods on the large-scale C4 dataset. Code: https://github.com/roymiles/VeLoRA ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Large language models (LLMs) have achieved remarkable success on a wide range of natural language processing tasks [31, 47, 2]. However, training these massive deep learning models remains computationally expensive, requiring vast amounts of data, compute, and memory resources. A key bottleneck for training or adapting these models is the large memory needed to store all the intermediate features required to compute the gradients for optimization. This makes it challenging to fully leverage the scalability and performance gains promised by larger models on currently available hardware. ", "page_idx": 0}, {"type": "text", "text": "Several techniques have been proposed to reduce the memory requirements, such as GaLore [54], gradient checkpointing [8], reversible backpropagation [14], parameter-efficient finetuning [18, 7], quantization [11] and activation offloading [30]. GaLore uses a low-rank projection of the gradients during training to reduce the memory footprint. Gradient checkpointing reduces the activation memory demands by recomputing the activations in the backward pass instead of storing them. While these methods are promising and lower the memory cost, they also might introduce a substantial computational overhead, are limited in their memory savings, or require specialized hardware [11]. Knowing that compute is the primary mover for the advancements in machine learning [46], it is to be expected that the LLM sizes will continue growing exponentially. Thus, it is imperative to develop more efficient and scalable methods that allow better utilization of compute power and training data. ", "page_idx": 0}, {"type": "text", "text": "In this work, we present a novel approach for efficient training and finetuning, which we name Vector projected LoRA (VeLoRA). Our approach is based on a key observation that the intermediate activations produced during the forward propagation of deep neural networks, and kept in memory for computing the gradients during backpropagation, can be effectively represented and reconstructed from a single and fixed one-dimensional vector without losing any accuracy. This compressed representation can be made very memory efficient, with a controllable hyperparameter that provides a trade-off between the compression ratio and the model\u2019s performance. By compressing and then reconstructing the activations on the fly, our method reduces the peak activation memory footprint to a tiny fraction of what is required to store the original activations. This enables fitting much larger models into limited GPU memory compared to approaches like GaLore or gradient checkpointing. ", "page_idx": 0}, {"type": "image", "img_path": "bFoQXD7Uls/tmp/74d9e559c194babe77d86d23b6294720caef0ad4850abf7c3692d3c5270ca06b.jpg", "img_caption": ["Figure 1: The memory overhead for backpropagation on a single layer consists of storing the intermediate activations and the weights. (a) demonstrates that PEFT methods can reduce the memory by using cheap low-rank adapters. (b) VeLoRA additionally compresses the saved intermediate activations to further reduce the memory usage. "], "img_footnote": [], "page_idx": 1}, {"type": "text", "text": "", "page_idx": 1}, {"type": "text", "text": "More concretely, during the forward pass, we propose to divide each input token into a set of much smaller sub-tokens. Using a single projection vector, we then project these individual sub-tokens onto a one-dimensional subspace. Importantly, we notice that we can initialize this projection vector cheaply using first-order batch statistics and then keep it fixed throughout training. We then reconstruct the original tokens using the same vector during the backward pass. Although this reconstruction loses the original gradient properties such as the direction or magnitude, we find that it jointly encourages sparsity and locally preserves the gradient similarity, which we attribute to the overall effectiveness of the algorithm. By storing these compact representations, we can substantially reduce the memory footprint of the network during training, enabling the accommodation of larger models on hardware with limited memory capacity. ", "page_idx": 1}, {"type": "text", "text": "Our contributions are the following: ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "\u2022 We propose a novel compression method that reduces the memory requirement for gradient computation during training and fine-tuning of large neural network models like LLMs.   \n\u2022 We show that, unlike other methods, our compression method does not need expensive operations such as SVD and gradient checkpointing.   \n\u2022 We achieve state-of-the-art results in various benchmarks while requiring lower GPU memory compared to the baseline methods. ", "page_idx": 1}, {"type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Memory-Efficient Training. The increase in model size has necessitated the development of smart methods that make training more memory efficient. Gradient checkpointing [8] significantly lowers the memory requirements during model training by recomputing activations for the backward pass instead of storing them during the forward pass. However, doing so increases the training time from the need to re-compute gradients. Adafactor [41] and its followup [1] lowers the memory by working with the row-column outer-product factorized moments of adaptive optimizers. LOMO [30] was developed for large models and works by fusing the gradient computation and the parameter update in one step to reduce memory usage, effectively only saving the current layer gradients in memory. Recently, GaLore [54] proposed projecting the gradients onto a lower-dimensional space [9, 6], and can reduce the memory during both pre-training and finetuning. However, they store all the full intermediate activations to compute gradient updates. Their memory advantage is derived from computing the first and second-order statistics of the gradients in a lower-dimensional space, thus limiting it to second-order optimizers only. Furthermore, GaLore needs an expensive SVD operation that introduces some significant overheads in terms of both memory and computation costs. Unlike these methods, VeLoRA does not introduce any large computation overhead while at the same time comes with a significant memory reduction. Furthermore, VeLoRA is in principle independent of the underlying optimizer. ", "page_idx": 1}, {"type": "text", "text": "", "page_idx": 2}, {"type": "text", "text": "Parameter-Efficient Fine-Tuning (PEFT) is an emerging field that focuses on fine-tuning a large model with a minimal number of trainable parameters. This typically involves freezing and then augmenting the original model with adapter modules. LoRA (Low-Rank Adaptation) [18] is a technique that optimizes a few rank-decomposed weight matrices during fine-tuning, rather than updating the entire set of pre-trained weights for each attention layer. This approach substantially reduces the number of trainable parameters, thereby accelerating the fine-tuning process and making it more memory-efficient. The method was later extended to also work with multi-layer perceptrons in Transformers [21, 13]. Several other methods built upon these works improving the capacity or performance of the model [21, 27, 7, 42, 35, 52, 49, 26, 45, 17]. These works can be wellcomplemented with quantization, further reducing the memory while keeping the performance [10, 11, 24]. Our memory-efficient algorithm is complementary to PEFT and can be used to provide additional memory efficiency in the fine-tuning regime. ", "page_idx": 2}, {"type": "text", "text": "Subspace training In [22, 15], the authors show that most of the learning process occurs within a significantly low-rank parameter space and that model weights can be effectively optimized within this lower-dimensional subspace. These subspace learning techniques have been widely adopted in various machine learning domains, including meta-learning [23] and continual learning [5]. However, unlike VeLoRA, resource-efficient training/fine-tuning is not the focus of these methods, therefore, often resulting in an overhead to meet other requirements. ", "page_idx": 2}, {"type": "text", "text": "Gradient Sparsification. Recently, there has been a surge in interest for memory-efficient training methods. In [50] only a sparse subset of the gradient vector components are stored zeroing out the remaining components. Different criteria have been proposed for selecting which gradient components to retain, such as Top-K SGD [43] which keeps only the top- $\\cdot\\mathbf{k}$ largest components, Sparsified-SGD [44] and various other sparsification methods [37, 38, 40, 25, 28, 16]. More recently, techniques combining quantization and sparsification have been proposed for resource-efficient training. Examples include TernGrad [51], Qsparse-local-SGD [3], sparse ternary compression [39], and the sparse-signSGD [32] method which combine sparsity with quantizing gradients to just the sign. A key difference is how VeLoRA compresses the intermediate activations that are used to compute gradients. Our compression algorithm is fully dense-to-dense without any pruning or sparsification of the activations. This prevents accuracy degradation issues associated with sparse updates and facilitates memory-efficient training. ", "page_idx": 2}, {"type": "image", "img_path": "bFoQXD7Uls/tmp/99894a17dbbc7f4fc2701449d38bf898577cef11e1ea967d464d54ad96035e59.jpg", "img_caption": ["Figure 2: (a) Stable rank for the input activations using a different number of groups, with $=\\,1$ indicating no sub-division of the tokens into smaller sub-tokens. (b) Approximate probability of the feature similarity diverging by at least $k$ . (c) visualisation the rank-1 projection of sub-tokens. "], "img_footnote": [], "page_idx": 2}, {"type": "text", "text": "3 Method ", "text_level": 1, "page_idx": 2}, {"type": "text", "text": "The task. In this work, we propose a memory-efficient modification to the back-propagation algorithm. Our primary motivation is to reduce the GPU memory footprint during training without resorting to any hardware-specific quantization schemes [11] and without trading compute for memory as is done with gradient checkpointing [8]. ", "page_idx": 2}, {"type": "text", "text": "", "page_idx": 3}, {"type": "text", "text": "To formalize the problem statement, let us take a step back and look at the components needed to implement back-propagation. Firstly, during the forward pass, each trainable layer in the neural network needs to store two key tensors in memory - the input activations received by that layer, and the layer\u2019s trainable weight parameters. Retaining these tensors is required for performing the parameter update rules and computing the input gradients. More specifically, during the backward pass, the previously stored input activations and model weights are used to calculate the gradients with respect to the weights and the input via the chain rule of differentiation (see Fig. 1). Storing both these sets of tensors comes with a significant memory overhead which scales with the model size. We focus on optimizing the cost of storing the input activations. We do this by compressing intermediate activation vectors and then reconstructing them when the original activations are needed for gradient calculations. This is orthogonal to PEFT [18] methods which address the overhead of saving the full-precision weights in memory by introducing cheaper trainable adapters. Further, in Section 4, we show how to combine our method with PEFT methods to achieve state-of-the-art results. ", "page_idx": 3}, {"type": "text", "text": "3.1 VeLoRA ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "Overview. Here we address the challenge of compressing intermediate activations tensors while preserving the necessary training dynamics for model convergence. Our memory-efficient algorithm consists of two components: (i) The grouping strategy to divide the original high-dimensional tokens into much smaller sub-tokens; and (ii) Fixed rank-1 projections of these sub-tokens using cheap heuristically initialized principal components. Given a large pre-trained model, we apply these steps to compress the intermediate activations saved during training while preserving most of the original model\u2019s training dynamics. We illustrate the general overview of this pipeline in Fig 1 and show PyTorch-like pseudo-code in Algorithm 1. ", "page_idx": 3}, {"type": "text", "text": "Consider a set of input activations that need to be saved in GPU memory during the forward pass. We denote an element in this set as $\\mathbf{Z}_{i}=\\nabla_{w}f(\\mathbf{x}_{i};w)\\in\\mathbb{R}^{N\\times D}$ , where $N$ is the number of tokens, and $D$ is the feature depth. We propose to introduce a simple grouping (reshape) operation that partitions the tokens across the depth dimension: $g r o u p(\\cdot):{\\mathbf{Z}}\\in\\mathbb{R}^{B\\times N\\times D}\\rightarrow\\mathbb{R}^{B\\times N D/M\\times M}$ with $M$ being the new size of each token, now coined a sub-token. This operation can be described as partitioning a batch of $N$ tokens into a collection of these much smaller non-overlapping $N D/M$ sub-tokens. Then we project each of the sub-tokens onto a rank-1 subspace. The idea is that this grouping operation enables a much lower-dimensional fixed subspace to be used throughout training without any degradation in model convergence or performance. We describe the compression steps concisely as follows: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{Z}\\xrightarrow[]{g r o u p(\\cdot)}\\mathbf{z}\\in\\mathbb{R}^{B\\times N D/M\\times M}\\xrightarrow[]{c o m p r e s s(\\cdot\\,;\\,\\mathbf{v})}\\mathbf{z}_{p}\\in\\mathbb{R}^{B\\times N D/M\\times1},}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "where ${\\bf z}$ is used to denote the sub-tokens of $\\mathbf{Z}$ and $\\mathbf{z}_{p}$ are the compressed sub-tokens. This compression is achieved using the function compres $\\mathfrak{z}(\\mathbf{z}\\;;\\;\\mathbf{v})=\\mathbf{z}\\cdot\\mathbf{v}$ , which projects each sub-token onto a onedimensional sub-space before saving them in memory. Since $M<<D$ it is more memory efficient to store $\\mathbf{z}_{p}$ instead of $\\mathbf{Z}$ . The initialization strategy for $\\mathbf{v}$ is important for the performance of the model, however we later show that a simple and cheap average over the first batch of sub-tokens can be very effective. Finally, the compressed sub-tokens $\\mathbf{z}_{p}$ are reconstructed for the gradient calculation during backward pass as follows: ", "page_idx": 3}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{z}_{p}\\xrightarrow{r e c o n s t r u c t(\\cdot\\,;\\,\\mathbf{v})}\\hat{\\mathbf{z}}\\in\\mathbb{R}^{B\\times N D/M\\times M}\\xrightarrow{u n g r o u p(\\cdot)}\\hat{\\mathbf{Z}}\\in\\mathbb{R}^{B\\times N\\times D},}\\end{array}\n$$", "text_format": "latex", "page_idx": 3}, {"type": "text", "text": "Here $\\hat{\\bf z}$ and $\\hat{\\textbf{Z}}$ refer to the reconstructed sub-tokens and tokens of ${\\bf z}$ and $\\mathbf{Z}$ respectively. The reconstruct function projects the sub-tokens $\\mathbf{z}_{p}$ back onto the vector $\\mathbf{v}$ as a very coarse reconstruction of ${\\bf z}$ and it is defined as reconstruct $\\mathbf{\\Psi}\\mathbf{\\:}(\\mathbf{z}_{p}\\,\\,;\\,\\mathbf{v})\\,=\\,\\mathbf{z}_{p}\\,\\cdot\\,\\mathbf{v}^{T}$ . The overall compression and reconstruction operation is given as $p r o j_{\\mathbf{v}}(\\mathbf{z})=(\\mathbf{z}\\cdot\\mathbf{v})\\cdot\\mathbf{v}^{T}$ , where $\\mathbf{v}\\in\\mathbb{R}^{M\\times1}$ is a fixed vector of unit length. ", "page_idx": 3}, {"type": "text", "text": "To summarize, during the forward pass, we compress the intermediate activation tensor $\\mathbf{Z}$ into a compact representation $\\mathbf{z_{p}}$ using $\\mathbf{v}$ . Then, in the backward pass when the original activation $\\mathbf{Z}$ is needed for gradient computation, we reconstruct an approximation \u02c6Z by projecting $\\mathbf{z}_{p}$ back onto $\\mathbf{v}$ . ", "page_idx": 3}, {"type": "text", "text": "These steps are fundamentally different and complementary to recent works that leverage the low-rank property of gradients like GaLore [54] in two ways: Firstly, they store the uncompressed intermediate activations in memory for the gradient computation. In contrast, we compress these activations explicitly during the forward pass. Secondly, GaLore relies on periodically computing the principal components with SVD to optimally capture the underlying gradient subspace. Our compression method avoids such costly operations, making it much more efficient and scalable. ", "page_idx": 4}, {"type": "text", "text": "3.2 Insights and properties of VeLoRA ", "text_level": 1, "page_idx": 4}, {"type": "text", "text": "On the importance of compressing subtokens. Computing the optimal low-rank subspace of the gradients using SVD is very computationally and memory intensive and often needs offloading the operation to a CPU [54]. Moreover, periodically updating the projection may be necessary to track any shift in the gradient distribution [54]. This is why dividing the tokens up into smaller sub-tokens is necessary. By doing so, it allows us to use a cheap surrogate rank-1 projective map that is initialised and frozen throughout training. Finally, one surprising observation of this grouping operation is that the sub-tokens will naturally lie on a higher-dimensional subspace than the original tokens (see figure 2a). Thus, our method cannot be faithfully explained through a better reconstruction of the gradients, but instead by a suppression of the inherently larger eigenvalues that can in turn help reduce overfitting. ", "page_idx": 4}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/384bfa01d1cdf225bcea9954ec54973667332012cf39e11701795e182b7e0c8c.jpg", "table_caption": [], "table_footnote": [], "page_idx": 4}, {"type": "text", "text": "Why does a vector projection make sense? Using a fixed vector projection throughout training fails to capture any shift in the gradients\u2019 distribution. Under the assumption that preserving the original gradient reconstruction is important, this may seem like an undesirable trait. However, quite surprisingly, we find that this shift does not hinder the model\u2019s convergence or performance at all. An explanation behind this phenomenon can be twofold: (i) The gradients become more sparse as they shift away from the initial distribution and this helps prevent the model from overfitting to the fine-tuned dataset; (ii) Although the vector projection destroys the original gradients\u2019 magnitudes and directions, it still locally preserves the gradient similarity and this similarity will govern the model\u2019s training dynamics [19]. ", "page_idx": 4}, {"type": "text", "text": "Consider a rank-1 decomposition of two sub-tokens: $z_{i}$ and $z_{j}$ . We will use the dot-product as the similarity measure $s i m(\\cdot)$ for which we wish to locally preserve. Let us assume that both $\\mathbf{z}_{i}$ and $\\mathbf{z}_{j}$ are distributed such that the angles between them and the vector $\\mathbf{v}$ are normally distributed with a mean of 0 and a standard deviation $\\sigma$ . With a first-order approximation, the probability of the projection and reconstruction scaling the gradient similarity by at least $k$ is given as follows (see the Appendix for the full derivation): ", "page_idx": 4}, {"type": "equation", "text": "$$\nP r\\left(|s i m(p r o j_{\\mathbf{v}}(\\mathbf{z}_{i}),p r o j_{\\mathbf{v}}(\\mathbf{z}_{j}))-s i m(\\mathbf{z}_{i},\\mathbf{z}_{j})|>k\\right)\\approx2\\left(1-\\Phi\\left(\\frac{\\sqrt{k}}{\\sigma}\\right)\\right)\n$$", "text_format": "latex", "page_idx": 4}, {"type": "text", "text": "With $k>0$ and $\\sigma>0$ , this probability is bounded by $[0,1]$ . Here we can see that similarity is trivially preserved in the limit as $\\sigma\\rightarrow0$ . This indicates that the sub-tokens already lie on a 1-dimensional subspace spanned by $\\mathbf{v}$ . To further see how these gradient similarities diverge for various values of $k$ and $\\sigma$ , we plot equation 11 in Fig. 2c. We empirically observe that although the gradient similarity is very dependent on the distribution of features, this non-linear relationship does not hinder the model\u2019s ability to converge and generalise. Finally, we also provide an illustrative visualisation in Fig. 1 (right) that shows the locality sensitivity for preserving gradient similarity and the sparsification of gradients when they are orthogonal to the vector v. Both of these components are important properties that we attribute to the effectiveness of VeLoRA. ", "page_idx": 4}, {"type": "text", "text": "Connection to parameter efficient fine-tuning. Although VeLoRA is complimentary to LoRA, it can indeed be viewed under the same umbrella. First let us consider LoRA, which will freeze the original weights and only update a low-rank adapter: ", "page_idx": 4}, {"type": "text", "text": "", "page_idx": 5}, {"type": "equation", "text": "$$\ny=W x+A B x=(W+A B)x\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "Following the same analysis from FLoRA [17], we will freeze $A$ and initialise $B$ with all zeroes. i.e. $A=A_{0}$ and $B_{0}=0$ . The weight update rule can then be given as follows: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathrm{LoRA}\\quad W^{\\prime}=W+A_{0}\\left(B_{0}-\\eta\\frac{d L}{d B}\\right)\\approx\\left[W-\\eta\\tilde{g}A_{0}A_{0}^{T}\\right]\\!,\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "with learning rate \u03b7 and g\u02dc \u201c ddyL \u00a8ddWy - see FLoRA [17] for the original full derivation under the small learning rate assumption. In contrast, VeLoRA (with i.e. no sub-tokens) will update the original weights directly but with compressed gradients: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\frac{d L}{d W}\\approx\\frac{d L}{d y}\\cdot\\left(\\left(\\frac{d y}{d W}\\cdot v\\right)v^{T}\\right)=\\left(\\frac{d L}{d y}\\cdot\\frac{d y}{d W}\\right)v v^{T},\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "which leads to the following similar weight update rule to equation 5: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\mathrm{VeLoRA}\\quad W^{\\prime}=W-\\eta\\frac{d L}{d W}=\\boxed{W-\\eta\\tilde{g}v v^{T}}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "This result highlights that VeLoRA is a special case of LoRA with a data-driven initialisation for $A_{0}$ . Furthermore, due its construction, VeLoRA is implemented using a custom forward and backward operation rather than by modifying the architecture and fusing weights after training. Finally, VeLoRA also provides additional compression through having a smaller shared projection $v$ for each sub-token. This would resemble reshaping the input tensor before and after the LoRA adapter to enable smaller projection matrices. ", "page_idx": 5}, {"type": "text", "text": "Cheap initialisation strategies. GaLore [54] proposes to use the periodically updated SVD principle components to track any shifts in the underlying sub-space of the gradients. Unfortunately, this SVD operation can be very expensive both in terms of memory and compute. Another limitation is that SVD may fail to converge, and it requires casting the features back to 32-bit for numerical stability [33]. For this reason, we propose a cheap initialisation strategy. We relax the constraint on tracking the feature distribution. For all of our experiments, we use a rank-1 decomposition of sub-tokens and propose to initialize the vector v using the average of sub-tokens from the first batch. ", "page_idx": 5}, {"type": "text", "text": "4 Comparison with the state-of-the-art ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "In this section, we thoroughly evaluate VeLoRA and its individual components. In section 4.2 we demonstrate the complementary nature of VeLoRA in conjunction with many other existing PEFT methods. Section 4.4 then scales up these results to the LLaMA models, whereby we achieve a significant memory reduction when coupled with 4-bit scalar quantisation. Finally, section 4.5 extends VeLoRA to the pre-training setting where we see competitive performance alongside a real reduction for the on-device GPU memory usage. ", "page_idx": 5}, {"type": "text", "text": "For the VTAB-1k experiments, we applied VeLoRA to all the down projections in the trainable adapters, while for SSF we applied it to the input scale and shift layers only. For all the other experiments we simply applied VeLoRA to the value projection layer and the down projection layer of the MLP blocks. ", "page_idx": 5}, {"type": "text", "text": "4.1 Implementation details ", "text_level": 1, "page_idx": 5}, {"type": "text", "text": "We performed all the vision experiments on a subset of the VTAB-1k [53] benchmark for a combination of 16 different vision datasets. We finetuned a ViT-B [12] model pre-trained on ImageNet-21K using the AdamW optimizer with a learning rate of 5e-4 and a weight decay of 1e-4. We performed ", "page_idx": 5}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/8ab617d24fbd3d8f60a4fde836421fdefdd378b7ba389c4160b749dfa2d5e1a7.jpg", "table_caption": ["Table 1: Results on a subset of the VTAB-1k benchmark. All methods use a ViT-Base-224/16 model pre-trained on ImageNet-21k. The batch sizes and ranks are the same across all tasks. "], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "Table 2: Comparison of our method with full fine-tuning, GaLore and LORA on GLUE benchmark using pre-trained RoBERTa-Base. Our method reaches the best overall results while showing significant memory improvements, especially compared to GaLore. We bold the best results from the considered PEFT methods. The GPU memory is measured on-device. ", "page_idx": 6}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/4195b5ec7f6503fb4e2d0550e94995501624fb02cebbc2a095aca7fa9214d93d.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "the language models experiments on the GLUE [48] benchmark using the encoder-decoder RoBERTa transformer [29]. We then scaled our model to large language models causal transformers using the LLama [2] family of models, finetuned in Alpaca dataset [36] and reported results on the MMLU benchmark [36]. We finally applied our method to the pre-training stage using some smaller LLama [2] models on the C4 dataset [34]. All our models were trained using the AdamW optimizer with a learning rate of 1e-3 and a weight decay of 0. We give all the other major hyper-parameters to replicate these experiments in the Appendix and also in the code. ", "page_idx": 6}, {"type": "text", "text": "4.2 Vision experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We conduct experiments evaluating the performance of VeLoRA for full-tuning and how it complements other PEFT methods. In Tab. 1 we reproduce a large set of results for LoRA [18], SSF [27], and Hydra [21] on a subset of the VTAB-1K benchmark, where the sub-token size for each experiment is given in the Appendix. Unlike what is more common in the PEFT literature [20, 21], we do not perform any task-specific hyperparameter tuning that would change the memory, such as batch size and rank, and to also avoid any potential overftiting to the specific task. For all experiments we used the authors provided implementations for the adapters and integrated them into the same training framework for a fair comparison. We observe that VeLoRA improves the performance compared to full-tuning by 1.5 percentage points $(p p)$ , while lowering the memory requirements. We also observe that when combined with PEFT methods, VeLoRA can come with improvement in memory and performance. VeLoRA lowers the memory requirement of SSF [27] by $16\\%$ with only a minor degradation $_{(0.1p p)}$ in accuracy. It lowers the memory requirement of Hydra [21] by $7\\%$ while improving the accuracy by $0.1p p$ . Finally, it lowers the memory requirements of LoRA [18] by $4\\%$ while improving the accuracy by $0.6p p$ . ", "page_idx": 6}, {"type": "text", "text": "4.3 Roberta experiments ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We now evaluate our method with $M=16$ on various language tasks, using RoBERTa-Base [29] in the GLUE benchmark, and compare it with full fine-tuning, LoRA [18] and GaLore [54], presenting the results in Tab. 2. We observe that both GaLore and LoRA lower the memory requirements compared to fine-tuning from 4.64GB to 4.04GB, respectively to 2.71GB, at a cost of accuracy degradation with GaLore performance lowered by $0.39\\,p p$ , while LoRA accuracy drops by $0.67\\,p p$ . ", "page_idx": 6}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/39b7482376fe7bd89721890d84ab0dcd93c31847a28afd65d41a2ef7cd85c9d1.jpg", "table_caption": ["Table 3: Mean 5-shot MMLU test accuracy for LLaMA models finetuned with adapters on Alpaca. The GPU memory estimate consists of the frozen weights, trainable adapters, and input activations. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "Our method further reduces the memory needed for training to 2.23GB, an improvement of $18\\%$ compared to LoRA, and $45\\%$ compared to GaLore, while still reaching higher results than either of them. More impressively, VeLoRA reduces the memory by half compared to full fine-tuning with an accuracy degradation of only $0.37\\,p p$ , reaching the best tradeoff between memory and accuracy. ", "page_idx": 7}, {"type": "text", "text": "4.4 Scaling up to LLaMA ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We now scale our method to large language models, demonstrating the effectiveness of VeLoRA in finetuning them. We do comparisons with LoRA on both BFloat16 and Float4, in addition to the recent method of QLoRA [11] which is widely used for fine-tuning LLMs with very low memory budget. We aim to further lower this budget, showing in the process that VeLoRA is also complementary to QLoRA, resulting in a much lower memory consumption. We present the results in Tab. 4.4 using $M\\,=\\,32$ for 7B and $M\\,=\\,128$ for 13B. We can see that our method outperforms QLoRA by $0.5p p$ in the Llama model, while reaching a massive performance increase compared to LoRA models. Fur", "page_idx": 7}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/3bd2ee3516b5f01f50299932ddbcbbb9211f4b99b5c90628d0980c4877f62fc1.jpg", "table_caption": ["Table 4: Comparison with low-rank algorithms on pre-training various sizes of LLaMA models on C4 dataset. Validation perplexity is reported, along with the on-device GPU memory usage. "], "table_footnote": [], "page_idx": 7}, {"type": "text", "text": "thermore, we reach this performance improvement, while at the same time further reducing the memory. In particular, we reduce the memory for $0.89\\mathrm{GB}$ , a relative improvement of $15.4\\%$ from QLoRA. We observe that this performance improvement is maintained on the larger model of 13B parameters, where again our method outperforms QLoRA by $0.5p p$ and lowers the memory requirements by 1.43GB, a relative improvement of $14.4\\%$ . ", "page_idx": 7}, {"type": "text", "text": "4.5 Pre-training on C4 ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We now perform an experiment where we use VeLoRA to train language models from scratch in the large C4-English dataset, presenting the results in Tab. 4. We use $M=128$ for both the 60M and 130M, while following the same training pipeline and evaluation as GaLore and comparison with LoRA. However, unlike in the GaLore paper [54], which estimates the memory usage using the optimizer weights and memory alone, we choose to compute the real on-device memory. This quantity would take into account the cost of additionally storing the intermediate activations and also highlight the benefits of LoRA in terms of memory since the base weights will be frozen. In contrast to other experiments, our use of VeLoRA here is not with any additional adapters and is simply compressing the input activations for the original trainable base layers. We observe that our method significantly outperforms the other methods, reaching $1.08\\:p p$ lower perplexity than GaLore. We observe that our method outperforms GaLore in Llama-130M too. ", "page_idx": 7}, {"type": "text", "text": "5 Ablations Studies ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "5.1 Convergence properties ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "We observed that the rank-1 projections would encourage much higher levels of gradient sparsity (see Fig. 2b). A natural question to ask from this observation is if the gradient sparsity will come at the cost ", "page_idx": 7}, {"type": "text", "text": "Table 5: All three ablations are done using LLama-7B model. (a) VeLoRA has no loss in performance when trained for fewer or more training epochs than QLoRA despite both reducing the memory footprint. (b) Importance in choosing the correct number of sub-token size to find an optimal memory v.s. accuracy trade-off. Using a GPU memory estimate for the input activations only. (c) Ablating various initialisation strategies for a rank-1 projection and with $M=D\\,/\\,32$ . ", "page_idx": 8}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/1e447b25a161492ff5f04dc8559e8c4e713843da67d4abf652bc7dd3d8651177.jpg", "table_caption": [], "table_footnote": ["(a) training convergence (b) sub-token size (c) initialisation strategy "], "page_idx": 8}, {"type": "text", "text": "of the model\u2019s convergence. In other words, we want to verify if our model needs to be trained longer to compensate for the gradient compression. To do so, we evaluate the performance of our model at the end of each epoch and compare it with the performance of a competing model, the QLoRA. As shown in Tab. 5a, VeLoRA and QLoRA improve at the same rate. Our model outperforms QLoRA by $0.3p p$ by the end of the first epoch, and keeps this improvement rate, outperforming QLoRA by $0.4p p$ at the end of the training. In this way, we verify that the additional compression of input activations does not affect the model\u2019s convergence. ", "page_idx": 8}, {"type": "text", "text": "5.2 Sub-token size ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "We provide an ablation on the impact on the size of each sub-token and the model\u2019s performance, showing the results in Tab. 5b. We can see that there is a sweet spot for which the rank-1 projections of sub-tokens using an average initialisation is very effective both in terms of memory and accuracy. However, if the size of the sub-tokens is too large (i.e. when $M=D/8)$ ), the gradients will become too sparse, which will hinder performance (see also figure 2b). In contrast, if the size of each sub-token is too small, for example with $D/64$ , there is a more significant memory compression but at the cost of model performance. ", "page_idx": 8}, {"type": "text", "text": "5.3 Initialisation strategy ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "In Tab. 5c, we show the performance after training with various ways of initialising the vectors for each group. To avoid exceeding memory requirements we sub-sampled the tokens for SVD and we also consider the case of instance-wise initialisation. Although we would have expected better performance since the vector will always align with each incoming batch, we found that it did not lead to any performance improvement. In contrast, doing SVD initialization comes with a drop in performance. This result further confirms that the performance improvement from VeLoRA is not specifically correlated with a lower reconstruction error of the input activations. ", "page_idx": 8}, {"type": "text", "text": "5.4 Choice of layers ", "text_level": 1, "page_idx": 8}, {"type": "text", "text": "A key design decision for many Parameter-Efficient Fine-Tuning (PEFT) methods, including LoRA, is where to insert the adapters within the model layers. Since VeLoRA shares this core architectural choice, we aim to provide stronger intuition on VeLoRA\u2019s suitability by performing a thorough ablation study analyzing the trade-offs between memory consumption and accuracy when considering different layer placements. We present the results in Tab. 6. We observe that we achieve memory improvement in all cases where we adopt VeLoRA. However, to improve the accuracy, VeLoRA ", "page_idx": 8}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/0bdc937d62a448d00afc528eeb6d436fdcab7f2040102c47d521f6acb8cd3c08.jpg", "table_caption": ["Table 6: Memory v.s. accuracy trade-off for VeLoRA on different layers. We use a LLaMA-7B trained on alpaca and evaluated on MMLU. We report the GPU memory estimate from the input activations only. "], "table_footnote": [], "page_idx": 8}, {"type": "text", "text": "must be used in the MLP down-projection. A possible explanation is that this layer might suffer from overftiting on the training data or forgetting [4] from the pre-trained data. Overall, we conclude that applying VeLoRA to the value and down projection appears to be the best choice. We strengthen this claim by using this setting for all other experiments. ", "page_idx": 9}, {"type": "text", "text": "5.5 Comparison with gradient checkpointing ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We compare VeLoRA to gradient checkpointing, another widely used technique to reduce the memory consumption during training. While both methods aim to minimize memory overhead, gradient checkpointing achieves this by recomputing the original activations during the backward pass, leading to a reduced memory consumption at the cost of additional compute. In contrast, VeLoRA uses a lossy compression of the activations during the forward pass and then reconstructs them in a coarser manner during the backwards, thus avoiding the need for any expensive recomputation. Our results in table 7 show that VeLoRA not only offers a comparable reduction in memory usage but also leads to faster training times compared to gradient checkpointing, as it reduces the recomputation burden and overhead. ", "page_idx": 9}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/7e2f4f835e4879670b4c1e8e68fe98c993befcc188f457961113a0675ad67917.jpg", "table_caption": ["Table 7: On-device training time and memory costs for pre-training LLaMA. Unlike VeLoRA, gradient checkpointing incurs a much more significant training time overhead. Batch size of 1. Our method is $17\\%$ , $30\\%$ , $30\\%$ , $47\\%$ faster than gradient checkpointing in LLama 60M, 130M, 7B and 13B. We see that the larger the model, the larger the time performance gain. "], "table_footnote": [], "page_idx": 9}, {"type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "In this work, we proposed VeLoRA, a novel framework that enables the training of networks, including large language models in a highly memory-efficient manner. Our approach compresses intermediate activations during the forward pass and coarsely reconstructs them during backpropagation. VeLoRA complements PEFT methods and is able to significantly reduce memory requirements while improving the performance. VeLoRA is effective when tested in both moderately-sized vision transformers as well as in large language models. We performed experiments to demonstrate the method\u2019s effectiveness on VTAB-1K, MMLU, GLUE, and C4 benchmarks outperforming state-of-the-art methods such as LoRA, QLoRA or GaLore. ", "page_idx": 9}, {"type": "text", "text": "Limitations and Broader Impact ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Limitations. We performed all experiments on Transformer models. Although Transformers have become dominant in machine learning and computer vision, there are other important deep learning networks such as CNNs, RNNs and SSMs. It remains unclear whether our methods can be extended to non-Transformer-based models and how such an extension could be accomplished. Moreover, although our method is computationally more efficient than competing methods, its primary advantage lies in the substantial reduction of GPU memory. However, the issue of training time still persists. ", "page_idx": 9}, {"type": "text", "text": "Broader Impact. As compute power grows exponentially, model sizes grow even faster, making it challenging for smaller institutions, especially academic ones, to conduct high-quality research. This work aims to democratize AI research, particularly in large language models, by significantly reducing the memory needed for training, enabling researchers with limited compute resources to train networks and contribute to their research. However, the democratization of AI is controversial, with leading institutions like OpenAI, Anthropic, and Google DeepMind becoming more closed due to the potential risks of LLMs in the wrong hands. We acknowledge this concern and do not endorse misuse of our research. ", "page_idx": 9}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "[1] R. Anil, V. Gupta, T. Koren, and Y. Singer. Memory efficient adaptive optimization. In NeurIPS, 2019.   \n[2] R. Anil, S. Borgeaud, Y. Wu, J. Alayrac, J. Yu, R. Soricut, J. Schalkwyk, A. M. Dai, A. Hauth, K. Millican, D. Silver, S. Petrov, M. Johnson, I. Antonoglou, J. Schrittwieser, A. Glaese, J. Chen, E. Pitler, T. P. Lillicrap, A. Lazaridou, O. Firat, J. Molloy, M. Isard, P. R. Barham, T. Hennigan, B. Lee, F. Viola, M. Reynolds, Y. Xu, R. Doherty, E. Collins, C. Meyer, E. Rutherford, E. Moreira, K. Ayoub, M. Goel, G. Tucker, E. Piqueras, M. Krikun, I. Barr, N. Savinov, I. Danihelka, B. Roelofs, A. White, A. Andreassen, T. von Glehn, L. Yagati, M. Kazemi, L. Gonzalez, M. Khalman, J. Sygnowski, and et al. Gemini: A family of highly capable multimodal models. CoRR, 2023.   \n[3] D. Basu, D. Data, C. Karakus, and S. Diggavi. Qsparse-local-sgd: Distributed sgd with quantization, sparsification and local computations. In NeurIPS, 2019.   \n[4] D. Biderman, J. G. Ortiz, J. Portes, M. Paul, P. Greengard, C. Jennings, D. King, S. Havens, V. Chiley, J. Frankle, C. Blakeney, and J. P. Cunningham. Lora learns less and forgets less. TMLR, 2024.   \n[5] A. Chaudhry, N. Khan, P. Dokania, and P. Torr. Continual learning in low-rank orthogonal subspaces. In NeurIPS, 2020.   \n[6] H. Chen, G. Raskutti, and M. Yuan. Non-convex projected gradient descent for generalized low-rank tensor regression. J. Mach. Learn. Res., 2019.   \n[7] S. Chen, C. Ge, Z. Tong, J. Wang, Y. Song, J. Wang, and P. Luo. Adaptformer: Adapting vision transformers for scalable visual recognition. In NeurIPS, 2022.   \n[8] T. Chen, B. Xu, C. Zhang, and C. Guestrin. Training deep nets with sublinear memory cost. CoRR, abs/1604.06174, 2016.   \n[9] Y. Chen and M. J. Wainwright. Fast low-rank estimation by projected gradient descent: General statistical and algorithmic guarantees. CoRR, 2015.   \n[10] T. Dettmers, M. Lewis, S. Shleifer, and L. Zettlemoyer. 8-bit optimizers via block-wise quantization. In ICLR, 2022.   \n[11] T. Dettmers, A. Pagnoni, A. Holtzman, and L. Zettlemoyer. Qlora: Efficient finetuning of quantized llms. In NeurIPS, 2023.   \n[12] A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani, M. Minderer, G. Heigold, S. Gelly, J. Uszkoreit, and N. Houlsby. An image is worth 16x16 words: Transformers for image recognition at scale, 2021.   \n[13] V. Fomenko, H. Yu, J. Lee, S. Hsieh, and W. Chen. A note on lora. CoRR, 2024.   \n[14] A. N. Gomez, M. Ren, R. Urtasun, and R. B. Grosse. The reversible residual network: Backpropagation without storing activations. In NeurIPS, 2017.   \n[15] G. Gur-Ari, D. A. Roberts, and E. Dyer. Gradient descent happens in a tiny subspace. arXiv preprint, 2018.   \n[16] P. Han, S. Wang, and K. K. Leung. Adaptive gradient sparsification for efficient federated learning: An online learning approach. In Conference on distributed computing systems (ICDCS), 2020.   \n[17] Y. Hao, Y. Cao, and L. Mou. Flora: Low-rank adapters are secretly gradient compressors, 2024.   \n[18] E. J. Hu, Y. Shen, P. Wallis, Z. Allen-Zhu, Y. Li, S. Wang, L. Wang, and W. Chen. Lora: Low-rank adaptation of large language models. In ICLR, 2022.   \n[19] A. Jacot, F. Gabriel, and C. Hongler. Neural tangent kernel: Convergence and generalization in neural networks. In NeurIPS, 2020.   \n[20] S. Jie and Z.-H. Deng. Fact: Factor-tuning for lightweight adaptation on vision transformer. AAAI, 2023.   \n[21] S. Kim, H. Yang, Y. Kim, Y. Hong, and E. Park. Hydra: Multi-head low-rank adaptation for parameter efficient fine-tuning. arXiv preprint, 2023.   \n[22] B. W. Larsen, S. Fort, N. Becker, and S. Ganguli. How many degrees of freedom do we need to train deep networks: a loss landscape perspective. In ICLR, 2022.   \n[23] Y. Lee and S. Choi. Gradient-based meta-learning with learned layerwise metric and subspace. In ICML, 2018.   \n[24] B. Li, J. Chen, and J. Zhu. Memory efficient optimizers with 4-bit states. In ICLR, 2023.   \n[25] S. Li and T. Hoefler. Near-optimal sparse allreduce for distributed deep learning. In Symposium on Principles and Practice of Parallel Programming, 2022.   \n[26] V. Lialin, N. Shivagunde, S. Muckatira, and A. Rumshisky. Relora: High-rank training through low-rank updates. ICLR, 2024.   \n[27] D. Lian, D. Zhou, J. Feng, and X. Wang. Scaling & shifting your features: A new baseline for efficient model tuning. In NeurIPS, 2022.   \n[28] Y. Lin, S. Han, H. Mao, Y. Wang, and B. Dally. Deep gradient compression: Reducing the communication bandwidth for distributed training. In ICLR, 2018.   \n[29] Y. Liu, M. Ott, N. Goyal, J. Du, M. Joshi, D. Chen, O. Levy, M. Lewis, L. Zettlemoyer, and V. Stoyanov. Roberta: A robustly optimized BERT pretraining approach. arXiv preprint, 2019.   \n[30] K. Lv, Y. Yang, T. Liu, Q. Gao, Q. Guo, and X. Qiu. Full parameter fine-tuning for large language models with limited resources. CoRR, abs/2306.09782, 2023.   \n[31] OpenAI. GPT-4 technical report. CoRR, 2023.   \n[32] C. Park and N. Lee. $\\mathrm{s}^{3}\\mathrm{gd-mv}$ : Sparse-signsgd with majority vote for communication-efficient distributed learning. In IEEE International Symposium on Information Theory, ISIT, 2023.   \n[33] A. Paszke, S. Gross, S. Chintala, G. Chanan, E. Yang, Z. DeVito, Z. Lin, A. Desmaison, L. Antiga, and A. Lerer. Automatic differentiation in PyTorch. 2017.   \n[34] C. Raffel, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. J. Mach. Learn. Res., 2020.   \n[35] A. Renduchintala, T. Konuk, and O. Kuchaiev. Tied-lora: Enhacing parameter efficiency of lora with weight tying. ACL, 2024.   \n[36] T. Rohan, I. Gulrajani, T. Zhang, Y. Dubois, X. Li, C. Guestrin, P. Liang, and T. B. Hashimoto. Stanford alpaca: An instruction-following llama model. Technical report, 2023.   \n[37] D. Rothchild, A. Panda, E. Ullah, N. Ivkin, I. Stoica, V. Braverman, J. Gonzalez, and R. Arora. Fetchsgd: Communication-efficient federated learning with sketching. In ICLR, 2020.   \n[38] A. Sahu, A. Dutta, A. M Abdelmoniem, T. Banerjee, M. Canini, and P. Kalnis. Rethinking gradient sparsification as total error minimization. In NeurIPS, 2021.   \n[39] F. Sattler, S. Wiedemann, K.-R. M\u00fcller, and W. Samek. Robust and communication-efficient federated learning from non-iid data. IEEE transactions on neural networks and learning systems, 2019.   \n[40] A. Shanbhag, H. Pirk, and S. Madden. Efficient top-k query processing on massively parallel hardware. In International Conference on Management of Data, 2018.   \n[41] N. Shazeer and M. Stern. Adafactor: Adaptive learning rates with sublinear memory cost. In ICML, 2018.   \n[42] Y. Sheng, S. Cao, D. Li, C. Hooper, N. Lee, S. Yang, C. Chou, B. Zhu, L. Zheng, K. Keutzer, J. E. Gonzalez, and I. Stoica. S-lora: Serving thousands of concurrent lora adapters. arXiv preprint, 2023.   \n[43] S. Shi, X. Chu, K. C. Cheung, and S. See. Understanding top- $\\cdot\\mathbf{k}$ sparsification in distributed deep learning. arXiv preprint, 2019.   \n[44] S. U. Stich, J.-B. Cordonnier, and M. Jaggi. Sparsified sgd with memory. In NeurIPS, 2018.   \n[45] Y. Sung, J. Cho, and M. Bansal. VL-ADAPTER: parameter-efficient transfer learning for vision-and-language tasks. In CVPR, 2022.   \n[46] R. Sutton. The bitter lesson. https://blog.biocomm.ai/2019/03/13/the-bitter-lesson-rich-suttonmarch-13-2019/, 2019.   \n[47] H. Touvron, T. Lavril, G. Izacard, X. Martinet, M. Lachaux, T. Lacroix, B. Rozi\u00e8re, N. Goyal, E. Hambro, F. Azhar, A. Rodriguez, A. Joulin, E. Grave, and G. Lample. Llama: Open and efficient foundation language models. CoRR, 2023.   \n[48] A. Wang, A. Singh, J. Michael, F. Hill, O. Levy, and S. R. Bowman. GLUE: A multi-task benchmark and analysis platform for natural language understanding. In ICLR, 2019.   \n[49] Y. Wang, Y. Lin, X. Zeng, and G. Zhang. Multilora: Democratizing lora for better multi-task learning. CoRR, 2023.   \n[50] J. Wangni, J. Wang, J. Liu, and T. Zhang. Gradient sparsification for communication-efficient distributed optimization. In NeurIPS, 2018.   \n[51] W. Wen, C. Xu, F. Yan, C. Wu, Y. Wang, Y. Chen, and H. Li. Terngrad: Ternary gradients to reduce communication in distributed deep learning. In NeurIPS, 2017.   \n[52] W. Xia, C. Qin, and E. Hazan. Chain of lora: Efficient fine-tuning of language models via residual learning. CoRR, 2024.   \n[53] X. Zhai, J. Puigcerver, A. Kolesnikov, P. Ruyssen, C. Riquelme, M. Lucic, J. Djolonga, A. S. Pinto, M. Neumann, A. Dosovitskiy, L. Beyer, O. Bachem, M. Tschannen, M. Michalski, O. Bousquet, S. Gelly, and N. Houlsby. The visual task adaptation benchmark. CoRR, 2019.   \n[54] J. Zhao, Z. Zhang, B. Chen, Z. Wang, A. Anandkumar, and Y. Tian. Galore: Memory-efficient llm training by gradient low-rank projection. In ICML, 2024. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "7 Supplementary Material ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "7.1 Memory Estimates ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "In this section, we provide a detailed explanation of the memory estimates presented in the paper. For the ablation experiments in Tables 5b and 6, we only estimate the memory consumption allocated for storing the intermediate activations. We do this because all the other memory allocations (weights, optimizer states, etc.) would be the same for each experiment. The reported memory estimates will highlight the impact of each design choice or parameter on the memory of the intermediate activations, which is one of the focuses of this paper. ", "page_idx": 13}, {"type": "text", "text": "Additionally, for the QLoRA Llama experiments in Tab. 3, we also use the estimated memory, but we compute this from three components: (i) Saving the frozen base weights in memory, these weights are what are quantized; (ii) The trainable adapter weights, which are stored in fp16 format for all methods; and (iii) The memory cost of storing the input features for each trainable layer. We acknowledge that an efficient implementation of our method with 4-bit quantization is left for future work. However, for all other experiments using fp16, we want to highlight that we report the real on-device GPU memory usage. ", "page_idx": 13}, {"type": "text", "text": "7.2 Roberta Experiments ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "We fine-tune the pre-trained RoBERTa-Base model on the GLUE benchmark. For the training parameters, we follow the same settings as GaLore [54], which is given in table 8. ", "page_idx": 13}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/838609aa98648c9dec2fe91e7bb941c50e271c73844e4b0febe360ba1ffc1c60.jpg", "table_caption": ["Table 8: Hyperparameters of fine-tuning RoBERTa base. "], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "7.3 VTAB-1K Experiments ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "We reproduce all the reported PEFT methods under a fixed rank and batch-size setting across all tasks. This is to ensure that the memory usage is fixed for all the tasks. However, for Hydra [21] we do use the optimal scale and dropout parameters provided the authors (see table 9). The rank v.s. memory for each reported training run is provided in table 10. Here we were able to use a higher rank for LoRA to get better performance, while also reducing the total memory. We found that Hydra did not noticeably improve performance when increasing the rank and so for these we maintained the same rank for with and without the addition of VeLoRA. ", "page_idx": 13}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/2804de77cbf3cc26ef6032007f0f01205222a74c11a33d0dfc4f5766184db431.jpg", "table_caption": ["Table 9: The optimal task-specific hyper-parameters proposed for the Hydra method [21]. "], "table_footnote": [], "page_idx": 13}, {"type": "text", "text": "7.4 Implementation Details ", "text_level": 1, "page_idx": 13}, {"type": "text", "text": "All of the experiments in sections 4.2 and 4.5 were performed using 8 NVIDIA V100 GPUs with the fp16 data type. For the LLaMA experiments in section 4.4, we trained on 4 NVIDIA A100 GPUs ", "page_idx": 13}, {"type": "text", "text": "Table 10: The hyper-parameters in VTAB-1K experiments. These parameters are the same for all tasks to avoid any potential overfitting to a specific task and to maintain a constant memory usage. ", "page_idx": 14}, {"type": "table", "img_path": "bFoQXD7Uls/tmp/fca9e510338734b150a1ce58483f122a13d6825db2f1fcf3a8fbc7411cd88f92.jpg", "table_caption": [], "table_footnote": [], "page_idx": 14}, {"type": "text", "text": "using the QLoRA nf4 data type. The LLaMA experiments were based on the alpaca-lora repository 1, while the RoBERTa and C4 experiments was based on the GaLore repository 2. ", "page_idx": 14}, {"type": "text", "text": "7.5 Gradient Similarity ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "Using $s i m(\\mathbf{z}_{i},\\mathbf{z}_{j})=\\left|\\mathbf{z}_{i}\\right|\\left|\\mathbf{z}_{j}\\right|$ cos $\\theta_{i j}$ and $p r o j_{\\mathbf{v}}(\\mathbf{z}_{i})=|\\mathbf{z}_{i}|$ cos $\\theta_{i v}$ we wish to see how much the gradient similarity is being preserved under various assumptions about the distributions of both $\\mathbf{z}_{i}$ and $\\mathbf{z}_{j}$ . We can introduce a measure for this divergence as follows: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r}{d(\\mathbf{z}_{i},\\mathbf{z}_{j};\\mathbf{v})=|s i m(p r o j\\mathbf{_{v}}(\\mathbf{z}_{i}),\\,p r o j\\mathbf{_{v}}(\\mathbf{z}_{j}))-s i m(\\mathbf{z}_{i},\\mathbf{z}_{j})|\\,\\,}\\\\ {=|s i m\\left((\\mathbf{v}\\cdot\\mathbf{z}_{i})\\mathbf{v},\\,(\\mathbf{v}\\cdot\\mathbf{z}_{j})\\mathbf{v}\\right)-|\\mathbf{z}_{i}|\\,\\,|\\mathbf{z}_{j}|\\,c o s\\,\\theta_{i j}|}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Since $\\theta_{v v}=0$ and $|\\mathbf{v}|=1$ , we can simplify this expression as follows: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{\\bf\\Delta}=||{\\bf z}_{i}||c o s\\,\\theta_{i v}||{\\bf z}_{j}||c o s\\,\\theta_{j v}|-|{\\bf z}_{i}|\\,|{\\bf z}_{j}|\\,c o s\\,\\theta_{i j}|}\\\\ {{\\bf\\Delta}=||{\\bf z}_{i}||{\\bf z}_{j}|(|c o s\\,\\theta_{i v}\\,c o s\\,\\theta_{j v}|-c o s\\,\\theta_{i j})|}\\end{array}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Without loss in generality, we can assume $\\vert\\theta_{j v}\\vert>\\vert\\theta_{i v}\\vert$ and use $\\theta_{i j}=\\theta_{j v}-\\theta_{i v}$ . ", "page_idx": 14}, {"type": "equation", "text": "$$\n=||\\mathbf{z}_{i}||\\mathbf{z}_{j}|(|c o s\\;\\theta_{i v}\\;c o s\\;\\theta_{j v}|-c o s\\;(\\theta_{j v}-\\theta_{i v}))|\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "For simplicity, consider the case where both the input activations $\\mathbf{z}_{i}$ and $\\mathbf{z}_{j}$ are also normalised to unit length. In practise, these magnitudes will simply be scaling the divergence linearly. ", "page_idx": 14}, {"type": "text", "text": "Let both $\\theta_{i}$ and $\\theta_{j}$ be normally distributed with standard deviation $\\sigma$ and have the vector $v$ be appropriately initialised such that their means are 0. To understand how our projection degrades the gradient similarity, we will consider the probability of $d(\\cdot)$ exceeding some scalar $k$ , i.e: ", "page_idx": 14}, {"type": "equation", "text": "$$\nP r(|s i m(p r o j_{v}(\\mathbf{z}_{i}),\\,p r o j_{v}(\\mathbf{z}_{j}))-s i m(\\mathbf{z}_{i},\\mathbf{z}_{j})|>k)\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Small $\\sigma$ approximation For normally distributed $\\theta_{i}$ and $\\theta_{j}$ , $c o s(\\theta_{i})$ and $c o s(\\theta_{j})$ will not be uniformly distributed and instead follow a distribution that is more concentrated around their mean values. Thus, we can use a first-order approximation of $c o s(\\cdot)$ : ", "page_idx": 14}, {"type": "equation", "text": "$$\nc o s(\\theta_{i})\\approx1,\\quad c o s(\\theta_{j})\\approx1,\\quad c o s(\\theta_{i}-\\theta_{j})\\approx1-\\frac{(\\theta_{i}-\\theta_{j})^{2}}{2}\n$$", "text_format": "latex", "page_idx": 14}, {"type": "text", "text": "Therefore, we can express $d(\\cdot)$ and $P r(d(\\cdot)>k)$ as follows: ", "page_idx": 14}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}&{}&{d(\\mathbf{z}_{i},\\mathbf{z}_{j};\\mathbf{v})\\approx\\frac{(\\theta_{i}-\\theta_{j})^{2}}{2}\\qquad\\qquad}\\\\ &{}&{\\rightarrow P r(d(\\mathbf{z}_{i},\\mathbf{z}_{j};\\mathbf{v})>k)\\approx P r(\\frac{(\\theta_{i}-\\theta_{j})^{2}}{2}>k)\\qquad\\qquad}\\\\ &{}&{=P r((\\theta_{i}-\\theta_{j})^{2}>2k)}\\\\ &{}&{=P r(|\\theta_{i}-\\theta_{j}|>\\sqrt{2k})}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Since $\\theta_{j}-\\theta_{i}$ is normally distributed with variance $2\\sigma^{2}$ we have: ", "page_idx": 15}, {"type": "equation", "text": "$$\n=2P r(\\theta_{j}-\\theta_{i}>\\sqrt{2k})\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "Finally, using the cumulative distribution function (CDF) of the normal distribution: ", "page_idx": 15}, {"type": "equation", "text": "$$\n\\begin{array}{r l}{{P r}(\\theta_{j}-\\theta_{i}>\\sqrt{2k})-1-\\Phi\\left(\\frac{\\sqrt{2k}}{\\sqrt{2}\\sigma}\\right)=1-\\Phi\\left(\\frac{\\sqrt{k}}{\\sigma}\\right)}&{{}}\\\\ {\\to{P r}(d(\\mathbf{z}_{i},\\mathbf{z}_{j};\\mathbf{v})>k)\\approx2\\left(1-\\Phi\\left(\\frac{\\sqrt{k}}{\\sigma}\\right)\\right)}&{{}=0}\\end{array}\n$$", "text_format": "latex", "page_idx": 15}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "1. Claims ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: The abstract reflects the paper\u2019s contributions. ", "page_idx": 16}, {"type": "text", "text": "2. Limitations ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We have a section names Limitations where we discuss the limitations of our paper. ", "page_idx": 16}, {"type": "text", "text": "3. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We provide the full derivation showing the divergence of gradient similarities between the original activations and our proposed representation. In this derivation we provide all the assumptions and show the full steps in the supplementary. For the connection to LoRA we use one of the main results given in FLoRA, while showing all the other steps in the main paper. ", "page_idx": 16}, {"type": "text", "text": "4. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We provide the code and dataset information to make the paper reproducible.   \nIn addition, we explain our approach and give the hyperparameters. ", "page_idx": 16}, {"type": "text", "text": "5. Open access to data and code ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: We provide the code, and explain the datasets we used. All datasets are public. ", "page_idx": 16}, {"type": "text", "text": "6. Experimental Setting/Details ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 16}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 16}, {"type": "text", "text": "Justification: Yes, we give all the training details of the method. ", "page_idx": 16}, {"type": "text", "text": "7. Experiment Statistical Significance ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 16}, {"type": "text", "text": "Answer: [No] ", "page_idx": 16}, {"type": "text", "text": "Justification: Most of our experiments are on large-scale datasets and tasks. Each model is trained until convergence and we have observed very little variation in performance across multiple runs. ", "page_idx": 16}, {"type": "text", "text": "8. Experiments Compute Resources ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: We discuss the compute resources used in section 4.1 and provide the code and checkpoints to reproduce all of the main experiments. ", "page_idx": 17}, {"type": "text", "text": "Guidelines: ", "page_idx": 17}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 17}, {"type": "text", "text": "9. Code Of Ethics ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: Yes, we obey NeurIPS\u2019 code of ethics. ", "page_idx": 17}, {"type": "text", "text": "10. Broader Impacts ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: We discuss both the potential positive and negative societal impacts of our method in a section called Broader Impact. ", "page_idx": 17}, {"type": "text", "text": "11. Safeguards ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 17}, {"type": "text", "text": "Answer: [No] ", "page_idx": 17}, {"type": "text", "text": "Justification: Unfortunately, safeguarding against negative usage of LLMs is an openproblem. While we do not endorse any inappropriate usage of our method, we acknowledge that malicious people might benefti from training large networks with limited computational resources. ", "page_idx": 17}, {"type": "text", "text": "12. Licenses for existing assets ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: We cite all the datasets and code (e.g., LLama) we use in the paper ", "page_idx": 17}, {"type": "text", "text": "13. New Assets ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 17}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 17}, {"type": "text", "text": "Justification: We have released the code under an MIT license. ", "page_idx": 17}, {"type": "text", "text": "14. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 17}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 18}, {"type": "text", "text": "Justification: We do not use any experiments that require crowdsourcing or human subjects. ", "page_idx": 18}, {"type": "text", "text": "15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 18}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 18}, {"type": "text", "text": "Justification: We do not use any experiments that require crowdsourcing or human subjects. ", "page_idx": 18}]