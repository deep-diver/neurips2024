[{"figure_path": "UkxJd64mki/figures/figures_1_1.jpg", "caption": "Figure 1: Comparison of specific solutions and strategy-based solutions.", "description": "This figure compares two approaches to solving a system of linear equations: using specific solutions and using strategy-based solutions. The left side shows two different specific solutions for two different instances of the problem, highlighting the lack of consistency and generalizability in this approach.  The right side demonstrates the use of a general strategy (Gaussian Elimination Method), applying it consistently across different problem instances. This strategy-based approach provides a more consistent and generalizable solution method for LLMs.", "section": "1 Introduction"}, {"figure_path": "UkxJd64mki/figures/figures_2_1.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure illustrates the workflow of the StrategyLLM framework.  It starts with a strategy generator creating a pool of strategies, which are then tested by a strategy executor.  Qualified strategies (those meeting a performance threshold) are cached; unqualified strategies are optimized and retested. This iterative process continues until enough qualified strategies are found. Finally, a strategy evaluator ranks the strategies and evaluates the top performers using a validation set.", "section": "2 Strategy LLM"}, {"figure_path": "UkxJd64mki/figures/figures_3_1.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure presents a flowchart that illustrates the workflow of the StrategyLLM framework.  It begins with a strategy generator creating a pool of strategies.  These strategies are then tested by a strategy executor, and qualified strategies are cached.  If there aren't enough qualified strategies, the unqualified strategies are sent to a strategy optimizer to improve their performance. Then the strategies are ranked and evaluated by a strategy evaluator. This iterative process continues until enough qualified strategies are obtained or a maximum iteration limit is reached.", "section": "2 Strategy LLM"}, {"figure_path": "UkxJd64mki/figures/figures_3_2.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure presents a flowchart illustrating the workflow of the StrategyLLM framework. It starts with a strategy generator producing a pool of strategies. These strategies are then evaluated by an executor, with successful strategies cached.  Unsuccessful strategies proceed to an optimizer, and then are reevaluated. This iterative process continues until a sufficient number of qualified strategies are obtained or a maximum iteration count is reached. Finally, the top k strategies (based on accuracy) are used for the inference phase.", "section": "2 Strategy LLM"}, {"figure_path": "UkxJd64mki/figures/figures_8_1.jpg", "caption": "Figure 6: Comparison of CoT-SC and StrategyLLM-SC performance on the MATH benchmark across various difficulty levels.", "description": "This bar chart compares the performance of two methods, CoT-SC and StrategyLLM-SC, across five difficulty levels of the MATH benchmark dataset. Each bar represents the average performance of each method at a given difficulty level. The chart shows that StrategyLLM-SC outperforms CoT-SC consistently across all difficulty levels, demonstrating StrategyLLM's effectiveness on complex reasoning tasks.", "section": "4.2 Main Results"}, {"figure_path": "UkxJd64mki/figures/figures_15_1.jpg", "caption": "Figure 7: Performance of StrategyLLM-SC and CoT-SC on the CP, StrategyQA, and MA datasets.", "description": "This figure displays the performance of both StrategyLLM-SC and CoT-SC across three different datasets (CP, StrategyQA, and MA) as the number of solutions used increases from 1 to 9.  Each subplot shows the accuracy (percentage of correctly solved examples) for both methods across a range of solution counts. The purpose of the figure is to demonstrate the impact of using multiple solutions (strategies) on accuracy and how StrategyLLM consistently outperforms CoT-SC in all cases.  The x-axis represents the number of solutions used, while the y-axis indicates the resulting accuracy. Note that StrategyLLM-SC consistently surpasses CoT-SC across all three datasets and solution counts.", "section": "4 Experiments"}, {"figure_path": "UkxJd64mki/figures/figures_16_1.jpg", "caption": "Figure 8: Coverage and accuracy of StrategyLLM using multiple strategies on the CP, StrategyQA, and MA datasets.", "description": "This figure displays the performance of StrategyLLM-SC and CoT-SC across three different datasets (CP, StrategyQA, and MA) when employing varying numbers of solutions (1, 3, 5, 7, and 9).  Each sub-figure shows two lines: one for the coverage (the percentage of examples correctly solved by at least one strategy) and another for the accuracy (the overall accuracy achieved by selecting the majority vote from all solutions generated by multiple strategies).  The figure visually demonstrates that using multiple strategies generally increases coverage but does not always lead to a significant improvement in accuracy, indicating there might be a limit to how much accuracy can be gained by simply combining more strategies.", "section": "Analysis"}, {"figure_path": "UkxJd64mki/figures/figures_19_1.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure presents a flowchart illustrating the StrategyLLM framework's operation.  The framework uses four agents: a strategy generator, an executor, an optimizer, and an evaluator. The generator creates strategies, which the executor tests on examples.  Successful strategies are cached; unsuccessful ones are optimized and retested.  Finally, top-performing strategies are chosen for inference.", "section": "2 StrategyLLM"}, {"figure_path": "UkxJd64mki/figures/figures_19_2.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure illustrates the workflow of the StrategyLLM framework. It starts with a strategy generator creating a pool of strategies.  These strategies are then tested by a strategy executor on example tasks and evaluated for accuracy. Strategies meeting a certain accuracy threshold are cached. Those that don't meet the threshold are sent to a strategy optimizer for improvement, and the cycle repeats.  Finally, the top performing strategies are selected and further evaluated using a validation set.", "section": "2 StrategyLLM"}, {"figure_path": "UkxJd64mki/figures/figures_19_3.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure illustrates the workflow of the StrategyLLM framework.  It starts with a strategy generator creating a pool of strategies. These are then tested by the strategy executor on examples; successful strategies (above a certain accuracy threshold) are cached. Unsuccessful strategies are sent to the strategy optimizer to be refined and retested. This cycle continues until enough successful strategies are obtained or a maximum number of iterations is reached. Finally, the top k strategies are ranked and evaluated on a validation set to determine the best strategies for use in generating the final prompt.", "section": "2 StrategyLLM"}, {"figure_path": "UkxJd64mki/figures/figures_20_1.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure presents a flowchart illustrating the workflow of the StrategyLLM framework.  It begins with a strategy generator creating a pool of strategies. These are then executed by a strategy executor on task examples to assess accuracy. Strategies exceeding a defined threshold are cached; otherwise, they're optimized and re-evaluated. This iterative process continues until enough qualified strategies are obtained or a set number of iterations are reached. Finally, the top-performing strategies are ranked and evaluated on a validation set.", "section": "2 StrategyLLM"}, {"figure_path": "UkxJd64mki/figures/figures_20_2.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure shows the workflow of the StrategyLLM framework.  It starts with a strategy generator creating multiple strategies. The strategy executor then tests these strategies on sample problems, saving only those that meet a performance threshold.  If not enough strategies are successful, the strategy optimizer refines the unsuccessful ones. This cycle repeats until enough strategies pass the performance test. Finally, the best-performing strategies are evaluated on a separate validation set, and the top performing ones are used for inference.", "section": "2 StrategyLLM"}, {"figure_path": "UkxJd64mki/figures/figures_20_3.jpg", "caption": "Figure 2: Overview of StrategyLLM. Initially, the strategy generator creates a pool of strategies, which are then applied by the strategy executor to task examples to calculate execution accuracy. Qualified strategies meeting a pre-defined threshold are cached, and if necessary, unqualified strategies are optimized and re-evaluated in iterative cycles. Once a sufficient number of qualified strategies are obtained or the maximum iteration number is reached, the top k strategies are ranked by execution accuracy and evaluated using a validation set.", "description": "This figure presents a flowchart of the StrategyLLM framework, illustrating the interaction between four LLM-based agents: strategy generator, executor, optimizer, and evaluator.  The process begins with the strategy generator creating a pool of strategies. The executor then applies these strategies to examples and evaluates their accuracy. Qualified strategies are cached, while unqualified strategies are iteratively optimized and re-evaluated. The process continues until a sufficient number of qualified strategies are obtained, after which the top performing strategies are selected using a validation set.", "section": "2 StrategyLLM"}, {"figure_path": "UkxJd64mki/figures/figures_22_1.jpg", "caption": "Figure 1: Comparison of specific solutions and strategy-based solutions.", "description": "The figure demonstrates two different approaches to solving a system of linear equations: using specific solutions and using a strategy-based solution. The left side shows two specific solutions, which are based on different approaches (substitution vs. equation subtraction) and may not generalize well to other instances.  The right side shows a strategy-based solution (Gaussian Elimination Method), which provides a generalizable and consistent approach applicable to various systems of linear equations. This highlights the limitations of relying on instance-specific solutions for few-shot prompting and the advantages of incorporating generalizable strategies in few-shot prompts.", "section": "1 Introduction"}, {"figure_path": "UkxJd64mki/figures/figures_24_1.jpg", "caption": "Figure 1: Comparison of specific solutions and strategy-based solutions.", "description": "The figure compares two approaches to solving a system of linear equations.  The left side shows two example solutions using different methods (substitution and elimination), highlighting the lack of consistency and generalizability that can be problematic for LLMs.  The right side demonstrates a consistent strategy-based approach (Gaussian Elimination Method) which provides a generalizable, step-by-step solution applicable across multiple instances of the problem. This helps illustrate the core idea of the paper \u2013 using a strategy-based approach to few-shot prompting instead of individual examples to improve LLM performance and consistency.", "section": "1 Introduction"}, {"figure_path": "UkxJd64mki/figures/figures_30_1.jpg", "caption": "Figure 1: Comparison of specific solutions and strategy-based solutions.", "description": "This figure illustrates the core difference between the StrategyLLM approach and traditional prompting methods.  The left side shows how existing methods rely on instance-specific solutions (Solution 1 and Solution 2) that are not easily generalizable to new problems.  Each solution uses a different problem-solving technique, hindering the LLM's ability to consistently apply a method. The right side demonstrates the StrategyLLM approach, using a general strategy (Gaussian Elimination Method) that is applied consistently across various instances. This approach leverages inductive and deductive reasoning by the LLMs to create generalizable and consistent few-shot prompts, leading to improved performance.", "section": "1 Introduction"}]