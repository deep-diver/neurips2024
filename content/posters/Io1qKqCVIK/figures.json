[{"figure_path": "Io1qKqCVIK/figures/figures_0_1.jpg", "caption": "Figure 1: (\u2192) Optimization process. We can optimize our mesh starting from either (a) random state or (b) initialization based on sample points for faster convergence. Mesh connectivity changes dynamically during the optimization. To make this topology change possible, we compute existence probability for an arbitrary set of faces in a differentiable manner.", "description": "This figure shows the optimization process of DMesh.  The left panel (a) demonstrates optimization starting from a random initialization of points, gradually forming a coherent mesh over iterations (steps 30 and 2000 shown). The right panel (b) shows optimization starting from an initialization based on sample points, leading to faster convergence to a refined mesh.  The sequence of steps (0, 2, 5, 7) illustrates the dynamic changes in mesh connectivity during the optimization process, enabled by the differentiable computation of face existence probabilities.", "section": "Introduction"}, {"figure_path": "Io1qKqCVIK/figures/figures_0_2.jpg", "caption": "Figure 2: Versatility of DMesh. DMesh can represent diverse geometry in differentiable manner, including (a) non-convex polyhedra of different Euler characteristics, (b) non-orientable geometries (M\u00f6bius strip, Klein bottle), and (c) complex protein structure (colored for aesthetic purpose).", "description": "This figure demonstrates the versatility of the DMesh representation by showcasing its ability to represent various 3D shapes, including non-convex polyhedra with different topological properties, non-orientable surfaces like the M\u00f6bius strip and Klein bottle, and a complex protein structure.  The image visually confirms that DMesh can handle a wide range of geometric complexities and topological features.", "section": "Abstract"}, {"figure_path": "Io1qKqCVIK/figures/figures_2_1.jpg", "caption": "Figure 3: Our overall framework to optimize mesh according to the given observations. (a): Each point is defined by a 5-dimensional feature vector: position, weight, and real value. Points with larger real values are rendered in red. (b): Given a set of points, we gather possibly existing faces in the mesh and evaluate their probability in differentiable manner. (c): We can compute reconstruction loss based on given observations, such as mesh, point cloud, or multi-view images. (d): To facilitate the optimization process and enhance the mesh quality, we can use additional regularizations.", "description": "This figure illustrates the overall framework for optimizing a mesh based on given observations.  It breaks down the process into four stages:\n(a) Point representation: Each point has a 5D feature vector (position, weight, real value).\n(b) Face probability:  The system identifies potentially existing faces and calculates their probability.\n(c) Loss computation: Reconstruction loss is calculated based on the input (mesh, point cloud, or images).\n(d) Regularization: Additional regularization terms are added to improve mesh quality.", "section": "3 Preliminary"}, {"figure_path": "Io1qKqCVIK/figures/figures_3_1.jpg", "caption": "Figure 4: Illustration of our mesh representation for 2D and 3D cases. (a): Our representation in 2D for a letter \"A\". (b): Our representation in 3D for a dragon model. Blue faces are \u201creal part\u201d and yellow ones are \u201cimaginary part\u201d.", "description": "This figure shows two examples of how the DMesh representation works. In 2D, a letter 'A' is constructed from a set of points and their connections. The blue faces represent faces that belong to the final mesh, while the yellow ones are auxiliary faces that aid in constructing the mesh but are not part of it. In 3D, a dragon model is shown, where again, the blue faces represent the final mesh, and the yellow ones are auxiliary faces. The figure illustrates how the DMesh approach represents complex shapes probabilistically, handling both geometric and topological details of the mesh.", "section": "3 Preliminary"}, {"figure_path": "Io1qKqCVIK/figures/figures_3_2.jpg", "caption": "Figure 5: Renderings of A<sub>k</sub><sup>d</sup> for different pairs of (d, k). Different A<sub>k</sub><sup>d</sup> are rendered in different colors.", "description": "This figure illustrates the concept of k-simplex (\u0394<sup>k</sup>) in d-dimensional space.  It shows different renderings of A<sub>k</sub><sup>d</sup>, which represents the existence probability of a k-simplex in a d-dimensional space.  The figure visually represents how the probability calculation changes depending on the dimensionality (d) and the number of vertices in the simplex (k). Different colors are used to distinguish different A<sub>k</sub><sup>d</sup> values.", "section": "3.2 Basic Principles"}, {"figure_path": "Io1qKqCVIK/figures/figures_4_1.jpg", "caption": "Figure 6: Basic concepts to compute existence probability of given 1-simplex (\u2206\u00b9) when d = 2. (a): WDT and PD of given set of weighted vertices are rendered in solid and dotted lines. The size of a vertex represents its weight. (b): Power cell of p1 (Cp\u2081) is rendered in grey. Also, \u2206\u00b9 is rendered in black line, of which dual line (D\u25b31) is rendered in red. (c), (d): For given \u2206\u00b9, reduced power cell of p1 for the A\u00b9 (Rp1|\u25b31) is rendered in blue, with the original power cell (grey). We can evaluate the existence of A\u00b9 in WDT by computing the signed distance from D\u25b31 to Rp1|\u25b31.", "description": "This figure illustrates the core concepts behind computing the existence probability of a 1-simplex (a line segment between two weighted points) within a Weighted Delaunay Triangulation (WDT).  Panel (a) shows the WDT and its dual, the Power Diagram (PD). Panel (b) highlights the power cell (Cp1) of a point p1, illustrating its relationship with the 1-simplex (\u2206\u00b9) and its dual line (D\u25b31). Panels (c) and (d) introduce the concept of a \"reduced\" power cell (Rp1|\u25b31), which excludes a specific point from the WDT, allowing for a differentiable measure of simplex existence based on the distance between the dual line and the reduced power cell.", "section": "3.2 Basic Principles"}, {"figure_path": "Io1qKqCVIK/figures/figures_6_1.jpg", "caption": "Figure 7: Results with different \u03bbweight.", "description": "This figure shows the results of the weight regularization with different hyperparameters (\u03bbweight).  The images illustrate how varying \u03bbweight influences the complexity of the mesh.  A smaller \u03bbweight (10\u207b\u2078) results in a more complex mesh, while larger values (10\u207b\u2075 and 10\u207b\u2074) produce simpler meshes. This demonstrates the effect of the weight regularization on mesh simplification.", "section": "4.3.2 Regularizations"}, {"figure_path": "Io1qKqCVIK/figures/figures_7_1.jpg", "caption": "Figure 8: Point cloud and multi-view reconstruction results. (a): Ground truth mesh. (b), (f): Our method restores the original shape without losing much detail. (c), (d), (g), (h): PSR (Kazhdan und Hoppe, 2013), VoroMesh (Maruani et al., 2023), FlexiCube (Shen et al., 2023), and NIE (Mehta et al., 2022) fail for open and mixed surfaces. (e): NDC (Chen et al., 2022b) exhibits artifacts from grids.", "description": "This figure compares the results of point cloud and multi-view reconstruction using the proposed DMesh method with several other state-of-the-art methods.  It demonstrates the ability of DMesh to accurately reconstruct meshes, particularly those with open or mixed surfaces, where other methods struggle.  The ground truth meshes are shown for comparison, highlighting DMesh's superior performance in detail preservation and handling of surface complexity.", "section": "5 Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_8_1.jpg", "caption": "Figure 9: (\u2192) Shape interpolation using DMesh exhibiting topology change. After fitting DMesh to a torus (upper left), we optimize it again to reconstruct a double torus (lower right), which has a different genus. We use multi-view images for the optimization.", "description": "This figure shows the process of shape interpolation using DMesh. Starting with a torus, the model is optimized using multi-view images to gradually transform it into a double torus, demonstrating DMesh's ability to handle topology changes during optimization.", "section": "Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_9_1.jpg", "caption": "Figure 10: Analysis of computational cost for computing face existence probabilities (\u039b(F)). The computational cost rises sharply beyond 20K points, with most of the time spent on WDT construction (\"WDT\"), while the probability computation (\"Prob\") requires significantly less time.", "description": "This bar chart visualizes the computational cost breakdown for calculating face existence probabilities in the DMesh method, categorized into WDT construction and probability computation.  It reveals a significant increase in computation time beyond 20,000 points, primarily driven by the WDT construction.  The probability computation remains relatively efficient.", "section": "6.1 Limitations"}, {"figure_path": "Io1qKqCVIK/figures/figures_19_1.jpg", "caption": "Figure 11: FB uses tessellation structure to efficiently render overlapped faces in the correct order.", "description": "This figure illustrates the tessellation structure used in the second differentiable renderer (FB).  A ray tracing through the scene intersects a sequence of triangles (tetrahedra in 3D).  The structure ensures that when a ray enters a triangle through one edge, it proceeds to the next adjacent triangle only through a different edge of the current triangle. This allows efficient depth sorting without explicit depth testing, reducing computational cost and memory usage. The green line in the figure represents a sample ray tracing across the triangles.", "section": "C.3.1 FA"}, {"figure_path": "Io1qKqCVIK/figures/figures_20_1.jpg", "caption": "Figure 12: Rendered images from two differentiable renderers, F<sub>A</sub> and F<sub>B</sub>. Left and right image corresponds to diffuse and depth rendering, respectively. (a) F<sub>A</sub> is our (partially) differentiable renderer based on tile-based approach. (b) Since F<sub>A</sub> does not produce visibility-related gradients, we additionally use F<sub>A</sub>' (Laine et al., 2020) to render images and integrate with ours.", "description": "This figure shows the results of rendering using two different renderers, F<sub>A</sub> and F<sub>B</sub>.  Renderer F<sub>A</sub> is a partially differentiable tile-based approach, while F<sub>B</sub>, based on Laine et al. (2020), is used to supplement F<sub>A</sub> because F<sub>A</sub> lacks visibility-related gradients needed for accurate results.  The comparison highlights the strengths and weaknesses of each rendering method for producing diffuse and depth images.", "section": "C.3 Multi-View Reconstruction"}, {"figure_path": "Io1qKqCVIK/figures/figures_21_1.jpg", "caption": "Figure 15: Initialized DMesh using sample points from ground truth mesh. (a) From ground truth mesh, we uniformly sample 10K points to initialize DMesh. (b) In the left figure, sample points from the ground truth mesh (Psample) are rendered in red. The points that correspond to Pvoronoi are rendered in blue. In the right figure, we render the initial mesh we can get from the points, which has a lot of holes.", "description": "This figure shows how the authors initialize DMesh using sample points from a ground truth mesh.  The left image (a) illustrates the uniform sampling of 10,000 points from the ground truth mesh. The right image (b) displays two different point sets: the sampled points (red) and the Voronoi vertices (blue). The initial mesh generated from these points is also shown (right image, right side), which has holes.  The figure demonstrates one of the methods to initialize the parameters of the DMesh.", "section": "D.2 Point cloud & Multi-view Reconstruction"}, {"figure_path": "Io1qKqCVIK/figures/figures_21_2.jpg", "caption": "Figure 13: Reconstructed mesh from multi-view images, rendered in MeshLab's (Cignoni et al., 2008) x-ray mode to see inner structure. In multi-view reconstruction, we divide each epoch in two phases. (a) After the first phase ends, where we do inaccurate depth testing, lots of false inner faces are created. (b) To remove these inner faces, we require a renderer that does the exact depth testing, which we use in the second phase. Also see Appendix D.2 for details about post-processing step to remove the inner structure.", "description": "This figure shows the results of multi-view reconstruction using DMesh.  It highlights a two-phase optimization process. The first phase uses a fast, but less precise, renderer leading to some incorrect inner faces. The second phase employs a more accurate renderer to refine the mesh and remove these artifacts.  The x-ray rendering in MeshLab reveals the inner structure.", "section": "D Optimization Process"}, {"figure_path": "Io1qKqCVIK/figures/figures_23_1.jpg", "caption": "Figure 14: Intermediate results in converting bunny model to DMesh. For given ground truth mesh in (a), we initialize our point attributes using the mesh vertices. (b) Then, the initial mesh becomes convex hull of the original mesh. (c) To remove undesirable faces that were not in the original mesh, we insert additional points on the undesirable faces. Then, some of them disappear because of the inserted points. (d) After optimizing 5000 steps, just before another point insertion, DMesh recovers most of the ground truth connectivity.", "description": "This figure shows the intermediate steps of converting a bunny model into DMesh representation.  (a) shows the ground truth bunny mesh. (b) shows the initialization step where the initial DMesh is a convex hull around the bunny. (c) shows the point insertion step where additional points are added to problematic regions of the mesh. (d) shows the result after 5000 optimization steps, demonstrating that the model has largely recovered the connectivity of the original mesh.", "section": "D.1 Mesh to DMesh"}, {"figure_path": "Io1qKqCVIK/figures/figures_25_1.jpg", "caption": "Figure 15: Initialized DMesh using sample points from ground truth mesh. (a) From ground truth mesh, we uniformly sample 10K points to initialize DMesh. (b) In the left figure, sample points from the ground truth mesh (Psample) are rendered in red. The points that correspond to Pvoronoi are rendered in blue. In the right figure, we render the initial mesh we can get from the points, which has a lot of holes.", "description": "This figure shows the initialization of DMesh using sample points from a ground truth mesh.  Subfigure (a) illustrates the uniform sampling of 10,000 points from the ground truth mesh. Subfigure (b) presents two visualizations: one showing the sampled points in red and the Voronoi vertices in blue, and another depicting the initial, incomplete mesh generated from these points, highlighting its many holes. This initialization technique leverages the proximity of Voronoi vertices to the medial axis of the shape.", "section": "D.2 Point cloud & Multi-view Reconstruction"}, {"figure_path": "Io1qKqCVIK/figures/figures_26_1.jpg", "caption": "Figure 16: Optimization process for multi-view reconstruction for Plant model. At each row, we present the initial state (left) and the last state (right) of each epoch. For each figure, the left rendering shows the point attributes color coded based on real values, while the right one shows the extracted mesh. (a), (b) In the first epoch, we initialize DMesh without sample points. At the end of each epoch, we sample points from the current mesh, and use them for initialization in the next epoch.", "description": "This figure shows the optimization process of DMesh for multi-view reconstruction of a plant model over four epochs. Each epoch starts with an initial state (left column) and ends with a last state (right column).  The left images display the initial point distribution with colors representing the real values of the points, while the right images show the resulting 3D mesh after optimization.  The first epoch begins without pre-existing sample points, and subsequent epochs utilize sampled points from the previous epoch's mesh for initialization, refining the mesh iteratively.", "section": "5 Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_28_1.jpg", "caption": "Figure 17: Reconstruction results for mesh to DMesh experiment. From Left: Bunny, Dragon, and Buddha. We can observe that most of the edge connectivity is perserved in the reconstruction, even though the appearance is slightly different from the ground truth mesh because of small perturbations of vertex positions.", "description": "This figure shows the results of converting three different meshes (Bunny, Dragon, and Buddha) into DMesh.  The left column shows the original meshes, while the right column shows the corresponding DMesh reconstructions. The results demonstrate the method's ability to accurately preserve the connectivity of the original mesh, with only minor differences in appearance due to small positional adjustments during optimization.", "section": "E.1 Mesh to DMesh"}, {"figure_path": "Io1qKqCVIK/figures/figures_29_1.jpg", "caption": "Figure 18: Reconstruction results for a closed surface model in Thingi32 dataset. Flexicube (Shen u. a., 2023) can generate internal structures, while our approach removes them through post-processing.", "description": "This figure compares the reconstruction results of a closed surface model from the Thingi32 dataset using three different methods: the ground truth mesh, the Flexicube method, and the DMesh method proposed in the paper. The Flexicube method produces a mesh with some internal structures, while the DMesh method produces a cleaner mesh without these internal structures. This comparison highlights one of the advantages of the DMesh method, which is its ability to produce cleaner meshes by removing internal structures during post-processing.", "section": "5 Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_29_2.jpg", "caption": "Figure 19: Reconstruction results for the Plant model. Flexicube (Shen u. a., 2023) can generate redundant, self-intersecting faces for open surfaces, in this case, leaves. To better capture the redundant faces, we rendered the models from upper side, which is shown in the bottom right figures.", "description": "This figure compares the reconstruction results of the Plant model using the proposed DMesh method and the Flexicube method.  It highlights that Flexicube tends to produce redundant and self-intersecting faces, particularly for open surfaces like the leaves of the plant.  The DMesh method avoids this issue.", "section": "E.2.3 Visual Renderings"}, {"figure_path": "Io1qKqCVIK/figures/figures_30_1.jpg", "caption": "Figure 16: Optimization process for multi-view reconstruction for Plant model. At each row, we present the initial state (left) and the last state (right) of each epoch. For each figure, the left rendering shows the point attributes color coded based on real values, while the right one shows the extracted mesh. (a), (b) In the first epoch, we initialize DMesh without sample points. At the end of each epoch, we sample points from the current mesh, and use them for initialization in the next epoch.", "description": "This figure shows the optimization process of DMesh for multi-view reconstruction of a plant model across four epochs. Each epoch starts with an initialization, either from scratch or using samples from the previous epoch's results. The left side displays the initial point attributes color-coded by real values, while the right shows the mesh extracted at each epoch's end.  The process demonstrates how the mesh progressively refines over epochs, incorporating more points, and more accurately representing the target object.", "section": "5 Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_31_1.jpg", "caption": "Figure 16: Optimization process for multi-view reconstruction for Plant model. At each row, we present the initial state (left) and the last state (right) of each epoch. For each figure, the left rendering shows the point attributes color coded based on real values, while the right one shows the extracted mesh. (a), (b) In the first epoch, we initialize DMesh without sample points. At the end of each epoch, we sample points from the current mesh, and use them for initialization in the next epoch.", "description": "This figure shows the optimization process of DMesh for multi-view reconstruction of a plant model. Each row displays the initial and final states of the model in each epoch.  The left column shows the point attributes color-coded by their real values, while the right column shows the extracted mesh. The first epoch starts without sample points, and subsequent epochs utilize sample points from the previous epoch's mesh for initialization. This illustrates the iterative refinement process of the DMesh optimization.", "section": "Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_33_1.jpg", "caption": "Figure 22: Point cloud and Multi-view Reconstruction results for open surface models. From Left: Ground truth mesh, sample point cloud, point cloud reconstruction results, diffuse rendering, multi-view reconstruction results.", "description": "This figure shows the results of point cloud and multi-view reconstruction experiments on four different open-surface models. For each model, it displays (from left to right): the ground truth mesh, the sampled point cloud used as input, the reconstructed mesh from the point cloud, the diffuse rendering of the reconstructed mesh, and finally, the reconstructed mesh from multi-view images.  The figure demonstrates the capability of DMesh to reconstruct open surfaces from both point cloud and multi-view data.", "section": "5 Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_34_1.jpg", "caption": "Figure 23: Point cloud and Multi-view Reconstruction results for closed surface models. From Left: Ground truth mesh, sample point cloud, point cloud reconstruction results, diffuse rendering, multi-view reconstruction results.", "description": "This figure shows the results of applying the DMesh method to reconstruct 3D models from point cloud and multi-view image data.  The figure presents four different closed-surface models. For each model, it displays: (a) the ground truth mesh, (b) a sample point cloud used as input for reconstruction, (c) the mesh reconstructed from the point cloud, (d) a diffuse rendering of the reconstructed mesh, and (e) the mesh reconstructed from multi-view images. The results demonstrate the method's ability to accurately reconstruct 3D shapes from different input data types.", "section": "5 Experiments and Applications"}, {"figure_path": "Io1qKqCVIK/figures/figures_35_1.jpg", "caption": "Figure 8: Point cloud and multi-view reconstruction results. (a): Ground truth mesh. (b), (f): Our method restores the original shape without losing much detail. (c), (d), (g), (h): PSR (Kazhdan und Hoppe, 2013), VoroMesh (Maruani et al., 2023), FlexiCube (Shen et al., 2023), and NIE (Mehta et al., 2022) fail for open and mixed surfaces. (e): NDC (Chen et al., 2022b) exhibits artifacts from grids.", "description": "This figure compares the results of point cloud and multi-view reconstruction using the proposed DMesh method with other state-of-the-art methods. The results show that DMesh effectively reconstructs the original shapes without losing much detail, unlike other methods that often fail to reconstruct open and mixed surfaces or exhibit artifacts.  The ground truth mesh is displayed, followed by the results from DMesh, PSR, VoroMesh, NDC, FlexiCube, and NIE.", "section": "5 Experiments and Applications"}]