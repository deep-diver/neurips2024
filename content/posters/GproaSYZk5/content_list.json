[{"type": "text", "text": "Universal In-Context Approximation By Prompting Fully Recurrent Models ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Aleksandar Petrov, Tom A. Lamb, Alasdair Paren, Philip H.S. Torr, Adel Bibi Department of Engineering Science University of Oxford aleks@robots.ox.ac.uk ", "page_idx": 0}, {"type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Zero-shot and in-context learning enable solving tasks without model fine-tuning, making them essential for developing generative model solutions. Therefore, it is crucial to understand whether a pretrained model can be prompted to approximate any function, i.e., whether it is a universal in-context approximator. While it was recently shown that transformer models do possess this property, these results rely on their attention mechanism. Hence, these findings do not apply to fully recurrent architectures like RNNs, LSTMs, and the increasingly popular SSMs. We demonstrate that RNNs, LSTMs, GRUs, Linear RNNs, and linear gated architectures such as Mamba and Hawk/Griffin can also serve as universal in-context approximators. To streamline our argument, we introduce a programming language called LSRL that compiles to these fully recurrent architectures. LSRL may be of independent interest for further studies of fully recurrent models, such as constructing interpretability benchmarks. We also study the role of multiplicative gating and observe that architectures incorporating such gating (e.g., LSTMs, GRUs, Hawk/Griffin) can implement certain operations more stably, making them more viable candidates for practical in-context universal approximation. ", "page_idx": 0}, {"type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0}, {"type": "text", "text": "Until recently, solving a task with machine learning required training or fine-tuning a model on a dataset matching the task at hand. However, large foundation models exhibit the ability to solve new tasks without being specifically fine-tuned or trained for them: often it is sufficient to simply prompt them in the right way. Prompting has been especially successful because of in-context learning: the ability to modify the model\u2019s behavior with information provided within the input sequence, without changing the underlying model parameters (Brown et al., 2020). Yet, we know little about the theoretical properties of prompting. It is not even clear if there are limits to what can be achieved with prompting or, conversely, whether it is possible to prompt your way into any behaviour or task. ", "page_idx": 0}, {"type": "text", "text": "This can be framed as a universal approximation question. Classically, universal approximation results show how a class of tractable functions, such as neural networks, approximates another class of concept functions, e.g., all continuous functions on a bounded domain, with arbitrary accuracy. This is often done by showing that one can choose model parameters that approximate the target function. However, in-context learning poses a different challenge as the model parameters are fixed. Instead, a part of the input (the prompt) is modified to cause the model to approximate the target function. Hence, we define universal in-context approximation to be the property that there exist fixed weights such that the resulting model can be prompted to approximate any function from a concept class. Understanding whether a model can be a universal in-context approximator is especially important as most commercial models are accessible exclusively via a prompting interface (La Malfa et al., 2023). ", "page_idx": 0}, {"type": "text", "text": "In-context learning has been almost exclusively studied in conjunction with the transformer architecture (Vaswani et al., 2017). This is likely because in-context abilities appear once the models are large enough (Wei et al., 2021) and most large models have been transformer-based. On the subject of universal in-context approximation, Wang et al. (2023) were first to show that a transformer possesses this property by discretising and memorising all possible functions in the model weights. Memorisation is not needed, though, and even small transformers can be universal approximators when prompted Petrov et al. (2024). Both results, however, critically depend on the attention mechanism of the transformer architecture (Bahdanau et al., 2015). ", "page_idx": 1}, {"type": "text", "text": "Still, generative models are not restricted to attention-based architectures: there are the \u201cclassic\u201d recurrent neural networks (RNNs, Amari, 1972), long short-term memory models (LSTMs, Hochreiter and Schmidhuber, 1997) and gated recurrent units (GRUs, Cho et al., 2014). Recently, Linear RNN models (also known as state-space models or SSMs) were proposed as a scalable alternative to the transformer architecture (Orvieto et al., 2023; Fu et al., 2023a) and have started to outperform similarly-sized transformers when multiplicative gating is added (Gu and Dao, 2023; De et al., 2024; Botev et al., 2024). Furthermore, despite in-context learning being associated with the transformer, recent empirical results show in-context learning in SSMs, RNNs, LSTMs and even convolutional models (Xie et al., 2022; Aky\u00fcrek et al., 2024; Lee et al., 2024). ", "page_idx": 1}, {"type": "text", "text": "Yet, despite their ability to be in-context learners, there is little known about the theoretical properties of these fully recurrent architectures. As these architectures become more and more widely used, understanding their in-context approximation abilities is increasingly more important for their safety, security and alignment. We show that, in fact, many of these architectures, similarly to transformers, can be universal in-context approximators. Concretely, our contributions are as follows: ", "page_idx": 1}, {"type": "text", "text": "i. We develop Linear State Recurrent Language (LSRL): a programming language that compiles to different fully recurrent models. Programming in LSRL is akin to \u201cthinking like a recurrent model\u201d. LSRL programs can then be implemented exactly as model weights.   \nii. Using LSRL, we construct Linear RNN models that can be prompted to act as any tokento-token function over finite token sequences, or to approximate any continuous function. These results also hold for RNNs, LSTMs, GRUs and Hawk/Griffin models (De et al., 2024).   \niii. We present constructions with and without multiplicative gating. However, we observe that the constructions without these gates depend on numerically unstable conditional logic.   \niv. Nevertheless, we show that multiplicative gates lead to more compact and numerically stable models, making it more likely that universal in-context approximation properties arise in models utilising them, such as LSTMs, GRUs and the latest generation of Linear RNNs. ", "page_idx": 1}, {"type": "text", "text": "2 Preliminaries ", "text_level": 1, "page_idx": 1}, {"type": "text", "text": "Fully recurrent architectures. In this work, we focus exclusively on fully recurrent neural network architectures. Recurrent models operate over sequences. Concretely, consider an input sequence $(\\pmb{x}_{1},\\dots,\\pmb{x}_{N})$ with $\\mathbf{\\boldsymbol{x}}_{t}\\in\\mathcal{X}$ , $\\mathcal{X}$ being some input space. We will refer to the elements of the input sequence as tokens even if they are real-valued vectors. A recurrent model $g:\\mathcal{X}^{\\star}\\rightarrow\\mathcal{Y}$ maps a sequence of inputs to an output in some output space $\\boldsymbol{\\wp}$ . These models are always causal, namely: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\pmb{{y}}_{t}=g(\\pmb{{x}}_{1},\\ldots,\\pmb{{x}}_{t}).\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "We will abuse the notation and refer to $({\\pmb y}_{1},...,{\\pmb y}_{t}){=}({g}({\\pmb x}_{1}),...,{g}({\\pmb x}_{1},...,{\\pmb x}_{t}))$ as simply $g(\\pmb{x}_{1},...,\\pmb{x}_{t})$ We will also separate the input sequence into a query $(\\pmb{q}_{1},...,\\pmb{q}_{n})$ and a prompt $(p_{1},...,p_{N})$ . The prompt specifies the target function $f$ that we approximate while the query designates the input at which we evaluate it. Contrary to the typical setting, we will place the query before the prompt.1 ", "page_idx": 1}, {"type": "text", "text": "There are various neural network architectures that fall under the general framework of Eq. (1). The quintessential one is the RNN. It processes inputs one by one with only a non-linear state being passed from one time step to the other. A model $g$ can thus be stacked RNN layers, each one being: ", "page_idx": 1}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\pmb{s}_{t}=\\sigma(\\mathbf A\\pmb{s}_{t-1}+B\\pmb{x}_{t}+\\pmb{b}),}\\\\ &{\\pmb{y}_{t}=\\phi(\\pmb{s}_{t}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 1}, {"type": "text", "text": "with $A,B,b$ and the initial state value $s_{\\mathrm{0}}$ being model parameters, $\\sigma$ a non-linear activation function and $\\phi$ a multi-layer perceptron (MLP) with ReLU activations. We assume that $\\sigma$ is always a ReLU to keep the analysis simpler. The non-linearity in the state update can make the model difficult to train (vanishing and exploding gradients, Bengio et al., 1994). Therefore, Linear RNNs have been proposed as regularizing the eigenvalues of $\\pmb{A}$ can stabilise the training dynamics (Orvieto et al., 2023). Linear RNNs also admit a convolutional representation, making them trainable in parallel (Gu et al., 2021; Fu et al., 2023a). Linear RNNs drop the non-linearity from the state update in Eq. (2): ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\pmb{\\mathscr{s}}_{t}=\\pmb{A}\\pmb{\\mathscr{s}}_{t-1}+\\pmb{B}\\pmb{\\mathscr{x}}_{t}+\\pmb{b},}\\\\ &{\\pmb{\\mathscr{y}}_{t}=\\phi(\\pmb{\\mathscr{s}}_{t}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "The fully linear state updates do not affect the expressivity of the models, as non-linear activations are nevertheless present in the MLP layers $\\phi$ between the linear state update layers (Wang and Xue, 2023; Boyd and Chua, 1985). The state-of-the-art Linear RNN models also utilise some form of multiplicative gating (Gu and Dao, 2023; De et al., 2024; Botev et al., 2024). While specific implementations can differ, we can abstract it as the following Gated Linear RNN architecture: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\pmb{s}_{t}=\\pmb{A}\\pmb{s}_{t-1}+\\pmb{B}\\pmb{x}_{t}+\\pmb{b},}\\\\ &{\\pmb{y}_{t}=\\gamma(\\pmb{x}_{t})\\odot\\phi(\\pmb{s}_{t}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "with $\\gamma$ being another MLP and $\\odot$ being the element-wise multiplication operation (Hadamard product). Eq. (4) encompasses a range of recently proposed models. For example, one can show that any model consisting of $L$ stacked Gated Linear RNN layers, with $\\gamma$ and $\\phi$ with $k$ layers, can be represented as a $L(k{+}2\\bar{)}$ -layer Hawk or Griffin model (De et al., 2024). The conversions are described in detail in App. E. We can similarly add multiplicative gating to the classic RNN architecture: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\pmb{s}_{t}=\\sigma(\\mathbf{A}\\pmb{s}_{t-1}+B\\pmb{x}_{t}+\\pmb{b}),}\\\\ &{\\pmb{y}_{t}=\\gamma(\\pmb{x}_{t})\\odot\\phi(\\pmb{s}_{t}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 2}, {"type": "text", "text": "Eq. (5) may appear unusual but it is related to the well-known GRU (Cho et al., 2014) and LSTM (Hochreiter and Schmidhuber, 1997) architectures. Same as the case with Griffin/Hawk, any Gated RNN can be represented as a $L(k{+}2)$ -layer GRU or LSTM model (details in Apps. C and D). As a result, if there exists a Gated RNN model that is a universal in-context approximator (which we later show to be the case), then there also exist GRU and LSTM models with the same property. ", "page_idx": 2}, {"type": "text", "text": "Theoretical understanding of in-context learning. Beyond the question of universal in-context approximation, there have been attempts to theoretically understand in-context learning from various perspectives. The ability to learn linear functions and perform optimization in-context has been extensively explored in the context of linear regression (Garg et al., 2022; Aky\u00fcrek et al., 2022; von Oswald et al., $2023\\mathrm{a}$ ; Fu et al., 2023b; Zhang et al., 2023; Ahn et al., 2023), kernel regression (Han et al., 2023) and dynamical systems (Li et al., 2023). Furthermore, studies have explored how in-context learning identifies and applies the appropriate pretraining skill (Xie et al., 2022; Coda-Forno et al., 2023; Bai et al., 2023). It has also been shown that transformers can construct internal learning objectives and optimize them during the forward pass (von Oswald et al., 2023b; Dai et al., 2023). However, these studies almost exclusively focus on the transformer architecture, and the applicability of their findings to fully recurrent models remains unclear. ", "page_idx": 2}, {"type": "text", "text": "Approximation theory. Let $\\mathcal{X}$ and $\\boldsymbol{\\wp}$ be normed vector spaces. Take a set of functions ${\\mathcal{C}}\\subseteq{\\mathcal{V}}^{{\\mathcal{X}}}$ from $\\mathcal{X}$ to $\\boldsymbol{\\wp}$ called a concept space. Take also a set of nicely behaved functions $\\mathcal{H}\\subset\\mathcal{V}^{\\mathcal{X}}$ , called hypothesis space. $\\mathcal{H}$ could be any set that we have tools to construct and analyse, e.g., all polynomials or all neural networks of a particular architectural type. Approximation theory is concerned with how well functions in $\\mathcal{H}$ approximate functions in $\\mathcal{C}$ . We say that $\\mathcal{H}$ universally approximates $\\mathcal{C}$ over a compact domain $\\mathcal{D}$ (or that $\\mathcal{H}$ is dense in $\\mathcal{C}$ ) if for every $f\\!\\in\\!\\mathcal{C}$ and $\\epsilon{>}0$ there exist a $h{\\in}\\ H$ such that $\\operatorname*{sup}_{\\pmb{x}\\in\\mathcal{D}}|f(\\pmb{x})-h(\\pmb{x})|\\!\\leq\\!\\epsilon.$ . There is a long history of studying the concept class of continuous functions and hypothesis classes of single hidden layer neural networks (Cybenko, 1989; Barron, 1993) or deeper models (Hornik et al., 1989; Telgarsky, 2015). The concept class of sequence-to-sequence functions has been shown to be universally approximated with the hypothesis classes of transformers (Yun et al., 2019), RNNs (Sch\u00e4fer and Zimmermann, 2006) and Linear RNNs (Wang and Xue, 2023). ", "page_idx": 2}, {"type": "text", "text": "The hypothesis spaces in this work are different. The model is fixed and only the prompt part of the input is changed, i.e., all learnable parameters are in the prompt. Take a recurrent model $g$ as in Eq. (1) with fixed model parameters and a query length $n$ . The hypothesis class is all functions that result by calling $g$ on the user query followed by the prompt and taking the last $n^{\\prime}$ outputs: ", "page_idx": 2}, {"type": "equation", "text": "$$\n\\mathcal{H}_{g}^{\\mathcal{D}^{n}}=\\{(q_{1},\\dotsc,q_{n})\\mapsto g(q_{1},\\dotsc,q_{n},p_{1},\\dotsc,p_{N})[-n^{\\prime}\\colon]\\ |\\ \\forall p_{i}\\in\\mathcal{D},N>0\\}.\n$$", "text_format": "latex", "page_idx": 2}, {"type": "image", "img_path": "GproaSYZk5/tmp/92519f2c5f3acf9517a08621bf5449ee82bc9e46ec71eb20449b0446da3e29a0.jpg", "img_caption": [], "img_footnote": [], "page_idx": 3}, {"type": "text", "text": "Figure 1: Compilation of an LSRL program to a Linear RNN. An example of a simple LSRL program that takes a sequence of 0s and 1s as an input and outputs 1 if there have been more 1s than 0s and 0 otherwise. The LSRL compiler follows the rules in App. A to simplify the computation DAG into a path graph. The resulting path graph can be represented as a Linear RNN with one layer. ", "page_idx": 3}, {"type": "text", "text": "The domain $\\mathcal{D}$ of $\\textstyle p_{i}$ and $\\mathbf{\\mathit{q}}_{i}$ can be continuous embeddings in $\\mathbb{R}^{d}$ or discrete tokens $\\mathcal{V}=\\{1,...,V\\}$ . ", "page_idx": 3}, {"type": "text", "text": "Note that each $h{\\in}\\mathcal{H}_{g}$ is identified by a prompt $(p_{1},...,p_{N})$ but is a function with domain all possible queries $(\\pmb q_{1},...,\\pmb q_{n})$ . Therefore, finding a hypothesis $h{\\in}\\mathcal{H}_{g}$ that approximates a target function $f$ is equivalent to finding the prompt of that hypothesis. The approximation properties of $\\mathcal{H}_{g}$ in Eq. (6) depend on the architecture of $g$ , as well as its specific parameters. ", "page_idx": 3}, {"type": "text", "text": "We study the recurrent architectures in Eqs. (2) to (5) and their ability to approximate continuous functions over real-valued vectors and to represent discrete maps over tokens (which corresponds to how language models are used in practice). We consider the following classes of functions. Cvec=(Rdout)[0,1]din c ontains all continuous functions from the unit hypercube to $\\mathbb{R}^{d_{\\mathrm{out}}}$ , while $\\mathcal{C}^{\\mathrm{tok}}{=}\\{h{\\in}(\\mathcal{V}^{l})^{\\mathcal{V}^{l}}\\;\\vert\\;h\\;\\mathrm{causal}\\}$ all causal functions from $l$ tokens to $l$ tokens. The hypothesis classes are $\\mathcal{H}^{\\mathrm{vec}}(g)$ corresponding to Eq. (6) with $D{=}[0,1]d_{\\mathrm{in}}$ , $n{=}n^{\\prime}{=}1$ and $g$ some fixed model of one of the four architectures in Eqs. (2) to (5), and $\\mathcal{H}^{\\mathrm{tok}}(g)$ with $D{=}\\mathcal{V}$ and $n{=}n^{\\prime}{=}l$ . ", "page_idx": 3}, {"type": "text", "text": "3 Linear State Recurrent Language (LSRL) ", "text_level": 1, "page_idx": 3}, {"type": "text", "text": "We can construct the weights for universal in-context models with the architectures in Eqs. (2) to (5) by hand but this is labour-intensive, error-prone, difficult to interpret, and the specific weights would be architecture-dependent. Working at such a low level of abstraction can also obfuscate common mechanisms and design patterns, making it more difficult to appreciate both the capabilities and the constraints of fully recurrent architectures. Instead, we propose a new programming language: Linear State Recurrent Language (LSRL).2 LSRL programs compile to the four architectures in Eqs. (2) to (5). Conversely, any Linear RNN can be represented as an LSRL program, making LSRL a versatile tool for studying the capabilities of recurrent models. Later, in Secs. 4 to 6 we make use of LSRL to develop programs that are universal approximators for $\\mathcal{C}^{\\mathrm{vec}}$ and $\\mathcal{C^{\\mathrm{{tok}}}}$ , thus showing that all four architectures can be universal in-context approximators. ", "page_idx": 3}, {"type": "text", "text": "LSRL syntax. An LSRL program specifies how a single element is processed and how the recurrent states are updated for the next element. LSRL programs always start with an $\\operatorname{Input}(x)\\,=\\,x$ with an $\\textbf{\\em x}$ of a fixed dimension. Only one Input can be declared in a program. Linear layers and ReLUs are also supported: $\\lfloor\\sin[A,b](x)\\,:=\\,A x\\,+\\,b$ , $\\mathtt{R e L U}(\\mathbf{\\emx})\\,:=\\,\\operatorname*{inax}(\\mathbf{0},\\mathbf{\\emx})$ . The unique component of LSRL, however, is its LinState operation implementing the linear state update in Linear RNNs (Eq. (3)): LinState $\\colon[A,B,b,s_{0}](\\pmb{x}_{t}):=A\\pmb{s}_{t-1}+B\\pmb{x}_{t}+b$ , where the state $s_{t-1}$ is the output of the call this node at step $t-1$ . LinState is the only way information can be passed from previous tokens to the current one. We also provide a Concat operation that combines variables: Conca $\\mathbf{\\Phi}:=(\\pmb{x}_{1},...,\\pmb{x}_{|x|},\\pmb{y}_{1},...,\\pmb{y}_{|y|})$ . Finally, to support gating architectures we also implement a rudimentary Multi operation that splits its input into two sub-arrays and returns their element-wise multiplication: $\\mathsf{M u l t i}(x):=x[\\mathbf{\\nabla}:|\\mathbf{\\bar{x}}|/2]\\odot x[|\\mathbf{x}|/2:]$ . Naturally, Multi requires that $\\textbf{\\em x}$ has even length. These six operations can be composed into a direct acyclic graph (DAG) with a single source node (the Input variable) and a single sink node (marked with a return statement). ", "page_idx": 3}, {"type": "image", "img_path": "GproaSYZk5/tmp/feb4cd9e79acae9106e8026e2f45ce1ecbf44e133f9624258136aac04edf682e.jpg", "img_caption": ["Listing 1: LSRL program for universal approximation in-context for continuous functions. The inputs are $\\pmb{q}=[\\pmb{q}^{\\bar{\\prime}\\top},\\pmb{\\bar{0}}_{d_{\\mathrm{out}}+1}^{\\top}]^{\\top}$ with $\\pmb q^{\\prime}\\in[0,\\bar{1}]^{d_{\\mathrm{in}}}$ being the query value at which we want to evaluate the function, then followed by prompts describing the target function as in Eq. (8). "], "img_footnote": [], "page_idx": 4}, {"type": "text", "text": "", "page_idx": 4}, {"type": "text", "text": "Such a program operates over a single token $\\pmb{x}_{t}$ passed to Input, while a recurrent model needs to operate over sequences. Thus, we wrap the program into a ForEach loop that passes each element individually for the DAG to output a variable denoted by a return clause. Each element is processed by the exact same program, with the only difference being that the state of the LinState variables is changing between iterations. You can see an example of a small LSRL program in Fig. 1. ", "page_idx": 4}, {"type": "text", "text": "Expressiveness limitations. ForEach does not behave like the typical for loop: only the states are accessible between iterations, i.e., you cannot use the output of a linear layer at step $t$ in any computation at step $t+1$ . Furthermore, as the program is a DAG and only states of LinState nodes are passed between iterations, variables computed in latter operations of a previous time step are not accessible as inputs in earlier layers (with respect to the topological sorting of the computation graph). This leads to a key programming paradigm in LSRL: a LinState update cannot depend non-linearly on its own state. That includes it depending on a variable that depends on the LinState itself and conditional updates to the state. Such a dependency would break the DAG property of the program.3 This poses serious limitations on what algorithms can be expressed in a Linear RNN and makes programming them challenging. Still, in Sec. 4 we show how carefully constructing state updates and auxiliary variables can nevertheless allow to program some limited conditional behaviours. ", "page_idx": 4}, {"type": "text", "text": "Compilation. Any LSRL program without Multi nodes can be compiled to a Linear RNN (Eq. (3)) or to a Gated Linear RNN (Eq. (4)). If the program has Multi nodes, then it cannot be compiled to a Linear RNN as the multiplicative gating cannot be implemented exactly. However, it can be compiled to a Gated Linear RNN. To compile an LSRL program to a Linear (Gated) RNN, we first parse the program to build a computation graph. This is a DAG with a single source (the Input node) and a single sink (the return statement of the ForEach loop). At the same time, a Linear (Gated) RNN can be represented as a path graph (no branching) with the six basic operations as nodes. Therefore, the compilation step needs to transform this DAG into a path graph. We achieve that by iterativly collapsing the first branching point into a single node. The exact rules that achieve that are described in App. A. Later, in Sec. 6, we will show how any Linear (Gated) RNN can be converted into a non-linear (Gated) RNN, hence, how we can compile LSRL programs to these architectures as well. ", "page_idx": 4}, {"type": "image", "img_path": "GproaSYZk5/tmp/7b0d520921ef5680a40ad57a3658386572d72c96c2d1be667a8abad27b8367b1.jpg", "img_caption": ["Figure 2: Intuition behind the LSRL program for universal in-context approximation for continuous functions in Lst. 1. Our target function $f$ has input dimension $d_{\\mathrm{in}}\\,=\\,2$ and output dimension $d_{\\mathrm{out}}=1$ . Each input dimension is split into two parts, hence $\\delta={}^{1}\\!/2$ . We illustrated an example input sequence of length 5: one for the query and four for the prompt tokens corresponding to each of the discretisation cells. The query $(q_{1},q_{2})$ falls in the cell corresponding to the third prompt token. We show how the two LinState variables in the program are updated after each step. Most notably, how the state holding the output $\\mathsf{y}$ is updated after $\\mathbf{\\mathit{p}_{3}}$ is processed. "], "img_footnote": [], "page_idx": 5}, {"type": "text", "text": "Syntactic sugar. To make programming easier, we define several convenience functions. For instance, we can Slice variables $\\pmb{x}[l;u]$ via sparse Lin layers. We can also sum variables and elementwise multiplication with scalars (implemented as Lin layers). For logical operations we also need step functions which can be approximated with ReLUs: $\\mathsf{f}_{-}\\mathsf{\\bar{s}t e p}[\\mu](\\pmb{x}):=\\mathsf{R e L U}(\\mu\\pmb{x})-\\mu\\mathsf{R e L U}(\\pmb{x}-1/\\mu)$ , where $\\mu$ is a positive constant controlling the quality of the approximation. We can also approximate bump functions (1 between $l$ and $u$ and 0 otherwise): f_b $\\bar{\\mathsf{u m p}}[l,u,\\mu](\\pmb{x}):=\\mathsf{f}_{-}\\mathsf{s t e p}[\\mu](\\pmb{x}-l)-$ $\\mathsf{f}_{-\\mathsf{S t e p}[\\mu](\\pmb{x}-\\pmb{u})}$ . Similarly, we can approximate conjunction (f_and), disjunction $(\\mathsf{f}_{-}\\mathsf{o r})$ , negation (f_not), and comparison operators (f_larger and f_smaller). See App. F for the definitions. ", "page_idx": 5}, {"type": "text", "text": "Critically, we need also a conditional operator that assigns a value $\\sf t(\\pmb{x})$ if a certain condition is met and another value $\\mathsf{f}(x)$ otherwise. One way to implement this is: ", "page_idx": 5}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{f}_{-}\\mathbf{i}\\,\\mathsf{f}\\,\\mathsf{e l s e}[\\mathrm{cond},\\mathbf{t},\\mathbf{f},\\lambda](x):=\\mathsf{R e L U}(-\\lambda\\,\\mathsf{c o n d}(x)\\!+\\!\\mathsf{f}(x))+\\mathsf{R e L U}(-\\lambda\\,\\mathsf{f}_{-}\\mathsf{n o t}(\\mathrm{cond}(x))\\!+\\!\\mathsf{t}(x))\\,}\\\\ {-\\,\\mathsf{R e L U}(-\\lambda\\,\\mathsf{c o n d}(x)\\!-\\!\\mathsf{f}(x))-\\mathsf{R e L U}(-\\lambda\\,\\mathsf{f}_{-}\\mathsf{n o t}(\\mathrm{cond}(x))\\!-\\!\\mathsf{t}(x)),}\\end{array}\n$$", "text_format": "latex", "page_idx": 5}, {"type": "text", "text": "where $\\lambda$ is a constant that is larger than any absolute value that $\\operatorname{t}(x)$ and $\\mathsf{f}(\\ensuremath{\\mathbf{{x}}})$ can attain. This construction, however, is not numerically stable and we will study alternatives in Sec. 5. We provide both numerical (SciPy.sparse, Virtanen et al. 2020) and symbolic (SymPy, Meurer et al. 2017) backends with the second being crucial for programs that are not numerically stable. ", "page_idx": 5}, {"type": "text", "text": "Prior work on encoding algorithms in model weights. A similar approach to developing a programming language that compiles to model weights was already done for the transformer architecture with the RASP language (Weiss et al., 2021) and the Tracr compiler (Lindner et al., 2023). They were predominantly created as a tool for interpretability research. In a sense, RASP is to a transformer as LSRL is to a (Linear) (Gated) RNN. Hence, can be used to develop benchmarks for interpretability methods for fully-recurrent architectures. However, while RASP can only express a subset of transformer models, LSRL is isomorphic to the set of all (Gated) Linear RNNs (though not to the non-linear ones). That means that any (Gated) Linear RNN can be represented and analysed as an LSRL program and vice versa. Hence, the limitations of what you can express in LSRL are also limitations of what a Linear (Gated) RNN can do. Namely: (i) we cannot have exact multiplicative interactions between inputs without multiplicative gates, and (ii) we cannot have state variable updates depending non-linearly on their previous iterations or in any way on a variable that depends on them. ", "page_idx": 5}, {"type": "table", "img_path": "GproaSYZk5/tmp/ccb2e592f248de6566fe351c237db5f599330af05f23311e7c931a074c2ca02b.jpg", "table_caption": [], "table_footnote": [], "page_idx": 6}, {"type": "text", "text": "4 Universal In-Context Approximation with Linear RNNs ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "We proceed with building LSRL programs that are universal in-context approximators: one for approximating continuous functions $\\left(\\mathcal{C}^{\\mathrm{vec}}\\right)$ , and one for maps between token sequences $(\\mathcal{C}^{\\mathrm{tok}})$ . ", "page_idx": 6}, {"type": "text", "text": "4.1 Approximating continuous functions in $\\mathcal{C}^{\\mathrm{vec}}$ ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "The idea behind the approximation for continuous functions is to discretise the domain into a grid and approximate the function as constant in each cell of the grid. This technique is commonly used for showing universal approximation using the step activation function (Blum and Li, 1991; Scarselli and Tsoi, 1998). However, it is not obvious how to implement this approach in-context when information across input tokens can be only combined linearly. Consider a target function $f:[0,1]^{d_{\\mathrm{in}}}{\\rightarrow}[0,1]^{d_{\\mathrm{out}}}$ and a discretization step $\\delta$ . Our approach is to describe the value of $f$ in each of the discretization cells as a single prompt token. For the cell with lower bounds $l_{1},\\ldots,l_{d_{\\mathrm{in}}}$ and their respective upper bounds $l_{1}{+}\\delta,...,l_{d_{\\mathrm{in}}}{+}\\delta$ , the corresponding prompt token is a $\\left(d_{\\mathrm{in}}{+}d_{\\mathrm{out}}{+}1\\right)$ -dimensional vector: ", "page_idx": 6}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{p}=[\\delta,l_{1},\\dots,l_{d_{\\mathrm{in}}},\\bar{y}_{1},\\dots.\\bar{y}_{d_{\\mathrm{out}}}]^{\\top},}\\end{array}\n$$", "text_format": "latex", "page_idx": 6}, {"type": "text", "text": "where $\\bar{\\pmb{y}}$ is the value of $f$ at the centre of that cell: $\\pmb{\\bar{y}}=f(l_{1}{+}\\delta/2,...,l_{d_{\\mathrm{in}}}{+}\\delta/2)$ . Each prompt token describes the size of the cell (the discretisation step $\\delta$ ), its starting lower bound, and the value of the target function at the centre of the cell. Thus, $\\left\\lceil1/\\delta\\right\\rceil^{d_{\\mathrm{in}}}$ such tokens, one for each cell, are sufficient to describe the piece-wise constant approximation of $f$ . A query $\\pmb q^{\\prime}\\in[0,1]^{d_{\\mathrm{in}}}$ can fall in only one of the cells. We pad it with zeros and encode it as the first input element: $\\pmb{q}=[\\pmb{q}^{\\prime\\top},\\mathbf{0}_{d_{\\mathrm{out}}+1}^{\\top}]^{\\top}$ , followed by the prompt. Our program will extract and save $\\boldsymbol{q}^{\\prime}$ to a state and then process the prompt tokens one at a time until it finds the one whose cell contains $\\ensuremath{\\boldsymbol{q}}^{\\prime}$ . The target function value for this cell will be added to an accumulator state. If the current cell does not contain $\\ensuremath{\\boldsymbol{q}}^{\\prime}$ , then 0 is instead added.Hence, the accumulator\u2019s final value corresponds to the value of $f$ at the centre of the cell containing $\\ensuremath{\\boldsymbol{q}}^{\\prime}$ . The full LSRL program is provided in Lst. 1 and an illustration for $d_{\\mathrm{in}}=2,d_{\\mathrm{out}}=1,\\delta=1/2$ is shown in Fig. 2. The prompt length required to approximate an $L$ -Lipschitz function $f$ (w.r.t. the $\\ell_{2}$ norm) to precision $\\epsilon$ is $N\\dot{=}\\,(2\\epsilon\\bar{/}L\\sqrt{d_{\\mathrm{in}}}\\dot{)}^{-d_{\\mathrm{in}}}=\\mathcal{O}(\\dot{\\epsilon}^{-d_{\\mathrm{in}}})$ (see App. B for the proof). Asymptotically, this is as good as one can hope without further assumptions on the target function. This is also better than the best known result for the same problem for transformers: $\\bar{\\mathcal{O}}\\bar{(\\epsilon^{-10-14d_{\\mathrm{in}}-4d_{\\mathrm{in}}^{2}})}$ in Petrov et al. 2024. ", "page_idx": 6}, {"type": "text", "text": "4.2 Approximating functions over token sequences in $\\mathcal{C^{\\mathrm{tok}}}$ ", "text_level": 1, "page_idx": 6}, {"type": "text", "text": "Sec. 4.1 focused on continuous functions but recurrent architectures are often used to model natural language whose domain is tokens. Thus, we also look at modelling maps over a discrete domain. Any function from $n$ tokens to $n$ tokens taking values in $\\mathcal{V}\\,=\\,\\{1,\\dotsc,V\\}$ can be represented as a dictionary whose keys and values are in $\\mathcal{V}^{n}$ . Therefore, a simple way to represent this function in-context is to first provide the $n$ tokens corresponding to the query and then a sequence of $2n$ tokens corresponding to key and value pairs (see Fig. 3 for an illustration of the setup). The model stores the query in a state and processes the key-value pairs one by one by comparing the key (the first $n$ tokens) with the query. If they match, then the value (the next $n$ tokens) is copied into a state that keeps it and repeatedly outputs it. This continues until the end of the prompt, at which point the last $n$ outputted tokens will be the value corresponding to the key matching the query. This is essentially a dictionary lookup. However, as shown in Lst. 2, implementing dictionary lookup in a linear recurrent model is much less straightforward than executing dict[key] in a general-purpose programming language. ", "page_idx": 6}, {"type": "image", "img_path": "GproaSYZk5/tmp/e902cf140c8b9c67cae5ed7c3659009220cdb17716ec23cdbb85b96f6be504eb.jpg", "img_caption": ["Listing 2: LSRL program for universal in-context approximation of discrete functions. The inputs are $\\displaystyle q_{1},...,q_{n}$ (the query tokens), followed by pairs of keys and values from the map we are approximating. The last $n$ outputs are the value corresponding to the key matching the query. "], "img_footnote": [], "page_idx": 7}, {"type": "text", "text": "", "page_idx": 7}, {"type": "text", "text": "Lst. 2 can appear daunting at first so we would like to clarify the non-trivial aspects. First, we need to count how far we are into every set of $n$ or $2n$ tokens. This can be done with mod $n$ and mod $2n$ operations but implementing modulo for arbitrary large inputs is not possible with ReLU MLPs (Ziyin et al., 2020). Therefore, we implement this with LinState as f_modulo_counter which has a unit-length state that is rotated $^{1}\\!/n$ or $^{1}\\!/\\!2n$ revolutions per iteration, with the angle corresponding to the modulo value (App. F.7). Second, we need to do dynamic indexing to copy the $i$ -th input in a subsequence to the $i$ -th element of a state and vice-versa. Dynamic indexing, however, cannot be succinctly represented in a Linear RNN. We work around this with temporary variables that are non-zero only at the $i$ -th coordinates (see Lines 16, 17, 19, 20, 32 to 35, 37 and 38). Finally, in order to compare whether all $n$ elements in the query and the key match, we need to remember whether the previous $n$ pairs were matching. As RNNs do not have attention, we implement this short-term memory buffer as a LinState with a shift matrix (Line 23). ", "page_idx": 7}, {"type": "text", "text": "5 Stable Universal In-Context Approximation with Gated Linear RNNs ", "text_level": 1, "page_idx": 7}, {"type": "text", "text": "The ReLU-based conditional operator is not numerically stable. The LSRL programs in Lsts. 1 and 2 for approximating functions in respectively $\\mathcal{C}^{\\mathrm{vec}}$ and $\\mathcal{C^{\\mathrm{{tok}}}}$ rely on the f_ifelse conditional assignment operator in Eq. (7) in order to implement different behaviours depending on whether we are processing the query or specific parts of the prompt. This operator is not numerically stable. The first term in Eq. (7) relies on cond $(x)$ being exactly zero if the condition is not met. In this way, multiplying it with $-\\lambda$ would be 0 and $\\mathsf{f}(x)$ would be returned. However, if cond $(x)$ is not identically 0 but has a small positive value, then $-\\lambda\\mathsf{c o n d}(\\pmb{x})$ can \u201coverpower\u201d $\\mathsf{f}(\\ensuremath{\\mathbf{{x}}})$ resulting in the ReLU output being 0. In our experience, this is not a problem when processing inputs through the LSRL program step-by-step. However, de-branching the DAG into a path graph \u2014which is necessary in order to uncover the equivalent Linear RNN\u2014 appears to introduce such numerical instabilities which occasionally result in wrong outputs as conditional assignments will be 0 when they should not. This problem is more prominent in Lst. 2 which is longer (more debranching steps) and has more f_ifelse operations: it gets most tokens wrong because of that instability (see Original, No noise in Fig. 4). To this end, we support LSRL with a symbolic backend (based on SymPy) that performs the debranching steps exactly. Using it, both programs always produce the correct output. ", "page_idx": 7}, {"type": "image", "img_path": "GproaSYZk5/tmp/4925d32af510095819c5f0f61547785f42e7e87b58e1a507e38cec6e3cf10bcb.jpg", "img_caption": ["Figure 4: Robustness of the various f_ifelse implementations to model parameter noise. We show how the performance of the two universal approximation programs in Lsts. 1 and 2 deteriorates as we add Gaussian noise of various magnitudes to the non-zero weights of the resulting compiled models. As expected, the original f_ifelse implementation in Eq. (7) exhibits numerical precision errors at the lowest noise magnitude. For the token sequence case, numerical precision errors are present in all samples even in the no-noise setting. Hence, the original f_ifelse implementation is less numerically robust while the implementations with multiplicative gating are the most robust. For Lst. 1 (approximating $\\mathcal{C}^{\\mathrm{vec}}$ ) we report the Euclidean distance between the target function value and the estimated one over 10 queries for 25 target functions. For Lst. 2 we report the percentage of wrong token predictions over 5 queries for 25 dictionary maps. Lower values are better in both cases. "], "img_footnote": [], "page_idx": 8}, {"type": "text", "text": "", "page_idx": 8}, {"type": "text", "text": "This numerical instability highlights a critical practical limitations of the universal approximation results in Sec. 4: if the models are not numerically stable, it is unlikely that they occur in practice by training models using gradient descent. This section shows how to improve the numerical stability of Eq. (7) and obtain more realistic recurrent models that are universal approximators in-context. ", "page_idx": 8}, {"type": "text", "text": "Removing unnecessary terms in Eq. (7). Eq. (7) has 4 separate ReLU terms. The first two handle the cases when $\\sf t(\\pmb{x})$ and $\\mathsf{f}(\\ensuremath{\\mathbf{{x}}})$ are positive and the second two when they are negative. Therefore, if we know that one or both of these will always be non-negative, we can drop the corresponding terms. Additionally, if $\\mathsf{f}(\\ensuremath{\\mathbf{{x}}})$ is always 0, then the first and third terms can be safely dropped. Similarly, the second and fourth are unnecessary if $\\mathbf{f}\\left({\\boldsymbol{x}}\\right)\\equiv0$ . All f_ifelse in Lsts. 1 and 2 fall in this case and hence can be simplified. We will refer to this f_ifelse implementation that is aware of the attainable values of $\\mathsf{t}(\\bar{\\pmb{x}})$ and $\\mathsf{f}(\\ensuremath{\\mathbf{{x}}})$ as optimized. As it reduces the number of numerically unstable ReLU operations in the model, we expect that it will improve the stability of the compiled models. We experimented with adding various levels of noise to the non-zero model parameters, and, as the results in Fig. 4 show, optimized is indeed more numerically robust than original. ", "page_idx": 8}, {"type": "text", "text": "Step-based implementation. We can get rid of the input sensitivity of Eq. (7) using f_step: ", "page_idx": 8}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathrm{,~t,f,}\\lambda](x):=\\mathsf{R e L U}(-\\lambda\\!+\\!\\lambda\\mathsf{f}_{-}\\mathsf{s t e p}(1/2\\!-\\!\\mathsf{c o n d}(x))\\!+\\!\\mathsf{f}(x))+\\mathsf{R e L U}(-\\lambda\\!+\\!\\lambda\\mathsf{f}_{-}\\mathsf{s t e p}(\\mathsf{c o n d}(x)\\!-\\!1/2)\\!+\\!\\mathsf{t}(x))}\\\\ {-\\,\\mathsf{R e L U}(-\\lambda\\!+\\!\\lambda\\mathsf{f}_{-}\\mathsf{s t e p}(1/2\\!-\\!\\mathsf{c o n d}(x))\\!-\\!\\mathsf{f}(x))-\\mathsf{R e L U}(-\\lambda\\!+\\!\\lambda\\mathsf{f}_{-}\\mathsf{s t e p}(\\mathsf{c o n d}(x)\\!-\\!1/2)\\!-\\!\\mathsf{t}(x)).}\\end{array}\n$$", "text_format": "latex", "page_idx": 8}, {"type": "text", "text": "We can also apply the optimisation strategy here. While this implementation is robust to noise in the input it appears to be more sensitive to parameter noise, as shown in Fig. 4. ", "page_idx": 8}, {"type": "text", "text": "Numerically stable f_ifelse with multiplicative gates. Removing the unused ReLU terms in the original f_ifelse reduces the opportunities for numerical precision issues to creep in but does not solve the underlying problem. The multiplicative gating present in the Linear Gated RNN (Eq. (4)) and Gated RNN models (Eq. (5)) can help via implementing a numerically stable conditional operator: ", "page_idx": 9}, {"type": "equation", "text": "$$\n\\mathbf{f}_{-}\\mathrm{i}\\,\\mathsf{f e l}\\,\\mathsf{s e}[\\mathsf{c o n d},\\mathbf{t},\\mathsf{f}](\\boldsymbol{x}):=\\mathsf{c o n d}(\\boldsymbol{x})\\odot\\mathsf{t}(\\boldsymbol{x})+\\mathsf{f}_{-}\\mathsf{n o t}(\\mathsf{c o n d}(\\boldsymbol{x}))\\odot\\mathsf{f}(\\boldsymbol{x}),\n$$", "text_format": "latex", "page_idx": 9}, {"type": "text", "text": "where the element-wise product is implemented in LSRL with Concat and Multi. We will refer to the implementation of f_ifelse in Eq. (10) as multiplicative. Similarly to original implementation of f_ifelse in Eq. (7), we can drop the $\\sf t(\\pmb{x})$ and $\\mathsf{f}(x)$ term if they are equal to zero (multiplicative optimized). If $\\mathsf{c o n d}(x)$ is not exactly zero, $\\mathsf{c o n d}(\\bar{\\mathbf{x}})\\odot\\mathbf{t}(\\pmb{x})$ will result in a small error to the output but, in contrast to the original implementation, is not going to cause a discontinuity in the output of the operation. Therefore, Eq. (10) should be more robust to numerical precision issues than Eq. (7). Fig. 4 shows that this is the case in practice with Lsts. 1 and 2 being more robust to parameter noise when using multiplicative gates compared to the ReLU-based implementations. Therefore, Linear Gated RNNs (Eq. (4)) \u2014to which models with multiplicative gates can be compiled\u2014 are more likely than Linear RNNs (Eq. (3)) to exhibit universal approximation properties in practice. ", "page_idx": 9}, {"type": "text", "text": "6 Universal In-context Approximation with Non-linear (Gated) RNNs ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "Secs. 4 and 5 showed how universal approximation of continuous and token-to-token functions can be implemented in LSRL and compiled to respectively Linear RNNs and Linear Gated RNNs. This section aims to address the situation with non-linear state updates, that is, the cases of classic and gated RNNs (Eqs. (2) and (5)). Concretely, we show how every linear (Gated) RNN can be converted to a non-linear (Gated) RNN. The key idea is that the ReLU applied to the state updates in the non-linear architectures is an identity operation if its inputs are positive. Hence, we can split the states in positive and negative components, flip the sign of the negative component, pass them separately through the ReLU\u2014which will act as an identity as all elements will be non-negative\u2014 and then fuse the positive and negative components back together in the $\\pmb{A}$ matrix at the next time step: ", "page_idx": 9}, {"type": "equation", "text": "$$\n\\begin{array}{r l r}{s_{t}=A s_{t-1}+B x_{t}+b}&{\\equiv}&{\\left[s_{t}^{+}\\right]=\\mathsf{R e L U}\\left(\\left[-A\\mathrm{\\boldmath~\\sigma~}+A\\right]\\left[s_{t}^{+}\\right]+\\left[-B\\right]x_{t}+\\left[-b\\right]\\right)}\\\\ {y_{t}=\\phi(s_{t}).}&{}&{y_{t}=\\phi\\left([I\\mathrm{\\boldmath~\\sigma~}-I]\\left[s_{t}^{+}\\right]\\right).}\\end{array}\n$$", "text_format": "latex", "page_idx": 9}, {"type": "text", "text": "Using Eq. (11) we can compile any LSRL program to an RNN (Eq. (2)) or a Gated RNN (Eq. (5)). This includes Lsts. 1 and 2. Hence, RNNs and Gated RNNs can be universal in-context approximators for continuous and token-to-token functions. As any Gated RNN can be represented as a GRU model (App. C) or an LSTM (App. D), these models are too universal in-context approximators. ", "page_idx": 9}, {"type": "text", "text": "7 Discussion and Conclusions ", "text_level": 1, "page_idx": 9}, {"type": "text", "text": "We developed LSRL: a programming language for specifying programs expressible with recurrent neural architectures. We then used LSRL to show that various architectures \u2014from the humble RNN to the state-of-the-art Linear Gated RNNs\u2014 can all be universal approximators in-context. ", "page_idx": 9}, {"type": "text", "text": "Safety and security implications. If a model can be prompted to approximate any function, then preventing it from exhibiting undesirable behaviours (i.e., alignment) might be impossible. Therefore, it is important to further study the safety and security implications of these properties. ", "page_idx": 9}, {"type": "text", "text": "Limitations. In this work we provide constructive existence results: that is, we show that there can exist models with various recurrent architectures that are universal in-context approximators. However, the present theory is not sufficient to analyse whether a given model has this property. That is a much more difficult question that would require a very different approach. We also assume no restrictions on the $\\pmb{A}$ matrix in the state update equations. However, many state-of-the-art models impose structural constraints on $\\pmb{A}$ (e.g., it being diagonal) for the sake of fast training and inference (Gu et al., 2020, 2021; Gupta et al., 2022). It is not directly obvious whether such structural restrictions would affect the universal in-context approximation abilities of these architectures. In practice, however, the compiled matrices are very sparse and often diagonal. Therefore, it is highly likely that our results translate to models with structural restrictions. ", "page_idx": 9}, {"type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "We would like to thank Simon Schug for pointing us to relevant works on fully recurrent models. We are also extremely grateful to Juuso Haavisto for his insight on building compilers. This work is supported by a UKRI grant Turing AI Fellowship (EP/W002981/1) and the EPSRC Centre for Doctoral Training in Autonomous Intelligent Machines and Systems (EP/S024050/1). Adel Bibi acknowledges funding from the KAUST Office of Sponsored Research (OSR-CRG2021-4648) and support from Google Cloud through the Google Gemma 2 Academic Program GCP Credit Award. ", "page_idx": 10}, {"type": "text", "text": "References ", "text_level": 1, "page_idx": 10}, {"type": "text", "text": "Kwangjun Ahn, Xiang Cheng, Hadi Daneshmand, and Suvrit Sra. 2023. Transformers learn to implement preconditioned gradient descent for in-context learning. In Advances in Neural Information Processing Systems.   \nEkin Aky\u00fcrek, Dale Schuurmans, Jacob Andreas, Tengyu Ma, and Denny Zhou. 2022. What learning algorithm is in-context learning? Investigations with linear models. In The Eleventh International Conference on Learning Representations.   \nEkin Aky\u00fcrek, Bailin Wang, Yoon Kim, and Jacob Andreas. 2024. In-context language learning: Arhitectures and algorithms. arXiv preprint arXiv:2401.12973.   \nShun-ichi Amari. 1972. Learning patterns and pattern sequences by self-organizing nets of threshold elements. IEEE Transactions on Computers, C-21(11):1197\u20131206.   \nDzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2015. Neural machine translation by jointly learning to align and translate. In International Conference on Learning Representations.   \nYu Bai, Fan Chen, Huan Wang, Caiming Xiong, and Song Mei. 2023. Transformers as statisticians: Provable in-context learning with in-context algorithm selection. In Advances in neural information processing systems.   \nAndrew R Barron. 1993. Universal approximation bounds for superpositions of a sigmoidal function. IEEE Transactions on Information Theory, 39(3):930\u2013945.   \nIz Beltagy, Matthew E Peters, and Arman Cohan. 2020. Longformer: The long-document transformer. arXiv preprint arXiv:2004.05150.   \nYoshua Bengio, Patrice Simard, and Paolo Frasconi. 1994. Learning long-term dependencies with gradient descent is difficult. IEEE Transactions on Neural Networks, 5(2):157\u2013166.   \nEdward K Blum and Leong Kwan Li. 1991. Approximation theory and feedforward networks. Neural networks, 4(4):511\u2013515.   \nAleksandar Botev, Soham De, Samuel L Smith, Anushan Fernando, George-Cristian Muraru, Ruba Haroun, Leonard Berrada, Razvan Pascanu, Pier Giuseppe Sessa, Robert Dadashi, et al. 2024. RecurrentGemma: Moving past transformers for efficient open language models. arXiv preprint arXiv:2404.07839.   \nStephen Boyd and Leon Chua. 1985. Fading memory and the problem of approximating nonlinear operators with Volterra series. IEEE Transactions on Circuits and Systems, 32(11):1150\u20131161.   \nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. 2020. Language models are few-shot learners. In Advances in Neural Information Processing Systems.   \nKyunghyun Cho, Bart van Merri\u00ebnboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk, and Yoshua Bengio. 2014. Learning phrase representations using RNN encoder\u2013decoder for statistical machine translation. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP).   \nJulian Coda-Forno, Marcel Binz, Zeynep Akata, Matt Botvinick, Jane Wang, and Eric Schulz. 2023. Meta-in-context learning in large language models. In Advances in Neural Information Processing Systems, pages 65189\u201365201.   \nGeorge Cybenko. 1989. Approximation by superpositions of a sigmoidal function. Mathematics of control, signals and systems, 2(4):303\u2013314.   \nDamai Dai, Yutao Sun, Li Dong, Yaru Hao, Shuming Ma, Zhifang Sui, and Furu Wei. 2023. Why can GPT learn in-context? Language models secretly perform gradient descent as meta-optimizers. In Findings of the Association for Computational Linguistics: ACL 2023.   \nSoham De, Samuel L Smith, Anushan Fernando, Aleksandar Botev, George Cristian-Muraru, Albert Gu, Ruba Haroun, Leonard Berrada, Yutian Chen, Srivatsan Srinivasan, et al. 2024. Griffin: Mixing gated linear recurrences with local attention for efficient language models. arXiv preprint arXiv:2402.19427.   \nDaniel Y Fu, Tri Dao, Khaled Kamal Saab, Armin W Thomas, Atri Rudra, and Christopher Re. 2023a. Hungry Hungry Hippos: Towards language modeling with state space models. In International Conference on Learning Representations.   \nDeqing Fu, Tian-Qi Chen, Robin Jia, and Vatsal Sharan. 2023b. Transformers learn higher-order optimization methods for in-context learning: A study with linear models. arXiv preprint arXiv:2310.17086.   \nShivam Garg, Dimitris Tsipras, Percy S Liang, and Gregory Valiant. 2022. What can transformers learn in-context? A case study of simple function classes. In Advances in Neural Information Processing Systems.   \nFelix A Gers, J\u00fcrgen Schmidhuber, and Fred Cummins. 2000. Learning to forget: Continual prediction with lstm. Neural computation, 12(10):2451\u20132471.   \nAlbert Gu and Tri Dao. 2023. Mamba: Linear-time sequence modeling with selective state spaces. arXiv preprint arXiv:2312.00752.   \nAlbert Gu, Tri Dao, Stefano Ermon, Atri Rudra, and Christopher R\u00e9. 2020. HiPPO: Recurrent memory with optimal polynomial projections. In Advances in Neural Information Processing Systems.   \nAlbert Gu, Karan Goel, and Christopher Re. 2021. Efficiently modeling long sequences with structured state spaces. In International Conference on Learning Representations.   \nAnkit Gupta, Albert Gu, and Jonathan Berant. 2022. Diagonal state spaces are as effective as structured state spaces. In Advances in Neural Information Processing Systems.   \nChi Han, Ziqi Wang, Han Zhao, and Heng Ji. 2023. In-context learning of large language models explained as kernel regression. arXiv preprint arXiv:2305.12766.   \nSepp Hochreiter and J\u00fcrgen Schmidhuber. 1997. Long short-term memory. Neural Computation, 9(8):1735\u20131780.   \nKurt Hornik, Maxwell Stinchcombe, and Halbert White. 1989. Multilayer feedforward networks are universal approximators. Neural networks, 2(5):359\u2013366.   \nEmanuele La Malfa, Aleksandar Petrov, Simon Frieder, Christoph Weinhuber, Ryan Burnell, Raza Nazar, Anthony G. Cohn, Nigel Shadbolt, and Michael Wooldridge. 2023. Language Models as a Service: Overview of a new paradigm and its challenges. arXiv preprint arXiv:2309.16573.   \nIvan Lee, Nan Jiang, and Taylor Berg-Kirkpatrick. 2024. Exploring the relationship between model architecture and in-context learning ability. In International Conference on Learning Representations.   \nYingcong Li, Muhammed Emrullah Ildiz, Dimitris Papailiopoulos, and Samet Oymak. 2023. Transformers as algorithms: Generalization and stability in in-context learning. In International Conference on Machine Learning.   \nDavid Lindner, J\u00e1nos Kram\u00e1r, Sebastian Farquhar, Matthew Rahtz, Tom McGrath, and Vladimir Mikulik. 2023. Tracr: Compiled transformers as a laboratory for interpretability. In Advances in Neural Information Processing Systems.   \nAaron Meurer, Christopher P. Smith, Mateusz Paprocki, Ond\u02c7rej C\u02c7ert\u00edk, Sergey B. Kirpichev, Matthew Rocklin, AMiT Kumar, Sergiu Ivanov, Jason K. Moore, Sartaj Singh, Thilina Rathnayake, Sean Vig, Brian E. Granger, Richard P. Muller, Francesco Bonazzi, Harsh Gupta, Shivam Vats, Fredrik Johansson, Fabian Pedregosa, Matthew J. Curry, Andy R. Terrel, \u0160te\u02c7p\u00e1n Rouc\u02c7ka, Ashutosh Saboo, Isuru Fernando, Sumith Kulal, Robert Cimrman, and Anthony Scopatz. 2017. SymPy: Symbolic computing in Python. PeerJ Computer Science, 3.   \nAntonio Orvieto, Samuel L Smith, Albert Gu, Anushan Fernando, Caglar Gulcehre, Razvan Pascanu, and Soham De. 2023. Resurrecting recurrent neural networks for long sequences. In International Conference on Machine Learning.   \nAleksandar Petrov, Philip HS Torr, and Adel Bibi. 2024. Prompting a pretrained transformer can be a universal approximator. In International Conference on Machine Learning.   \nFranco Scarselli and Ah Chung Tsoi. 1998. Universal approximation using feedforward neural networks: A survey of some existing methods, and some new results. Neural networks, 11(1):15\u2013 37.   \nAnton Maximilian Sch\u00e4fer and Hans Georg Zimmermann. 2006. Recurrent neural networks are universal approximators. In Artificial Neural Networks\u2013ICANN 2006: 16th International Conference, Athens, Greece, September 10-14, 2006. Proceedings, Part I 16, pages 632\u2013640. Springer.   \nNoam Shazeer. 2019. Fast transformer decoding: One write-head is all you need. arXiv preprint arXiv:1911.02150.   \nMatus Telgarsky. 2015. Representation benefits of deep feedforward networks. arXiv preprint arXiv:1509.08101.   \nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems.   \nPauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren Weckesser, Jonathan Bright, St\u00e9fan J. van der Walt, Matthew Brett, Joshua Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew R. J. Nelson, Eric Jones, Robert Kern, Eric Larson, C J Carey, \u02d9Ilhan Polat, Yu Feng, Eric W. Moore, Jake VanderPlas, Denis Laxalde, Josef Perktold, Robert Cimrman, Ian Henriksen, E. A. Quintero, Charles R. Harris, Anne M. Archibald, Ant\u00f4nio H. Ribeiro, Fabian Pedregosa, Paul van Mulbregt, and SciPy 1.0 Contributors. 2020. SciPy 1.0: Fundamental algorithms for scientific computing in Python. Nature Methods, 17:261\u2013272.   \nJohannes von Oswald, Eyvind Niklasson, Ettore Randazzo, Jo\u00e3o Sacramento, Alexander Mordvintsev, Andrey Zhmoginov, and Max Vladymyrov. 2023a. Transformers learn in-context by gradient descent. In International Conference on Machine Learning.   \nJohannes von Oswald, Eyvind Niklasson, Maximilian Schlegel, Seijin Kobayashi, Nicolas Zucchet, Nino Scherrer, Nolan Miller, Mark Sandler, Max Vladymyrov, Razvan Pascanu, and Jo\u00e3o Sacramento. 2023b. Uncovering mesa-optimization algorithms in transformers. arXiv preprint arXiv:2309.05858.   \nShida Wang and Beichen Xue. 2023. State-space models with layer-wise nonlinearity are universal approximators with exponential decaying memory. In Advances in Neural Information Processing Systems.   \nYihan Wang, Jatin Chauhan, Wei Wang, and Cho-Jui Hsieh. 2023. Universality and limitations of prompt tuning. Advances in Neural Information Processing Systems.   \nJason Wei, Maarten Bosma, Vincent Zhao, Kelvin Guu, Adams Wei Yu, Brian Lester, Nan Du, Andrew M Dai, and Quoc V Le. 2021. Finetuned language models are zero-shot learners. In International Conference on Learning Representations.   \nGail Weiss, Yoav Goldberg, and Eran Yahav. 2021. Thinking like transformers. In International Conference on Machine Learning.   \nSang Michael Xie, Aditi Raghunathan, Percy Liang, and Tengyu Ma. 2022. An explanation of in-context learning as implicit Bayesian inference. In International Conference on Learning Representations.   \nChulhee Yun, Srinadh Bhojanapalli, Ankit Singh Rawat, Sashank Reddi, and Sanjiv Kumar. 2019. Are transformers universal approximators of sequence-to-sequence functions? In International Conference on Learning Representations.   \nRuiqi Zhang, Spencer Frei, and Peter L Bartlett. 2023. Trained transformers learn linear models in-context. arXiv preprint arXiv:2306.09927.   \nLiu Ziyin, Tilman Hartwig, and Masahito Ueda. 2020. Neural networks fail to learn periodic functions and how to fix it. In Advances in Neural Information Processing Systems. ", "page_idx": 10}, {"type": "text", "text": "", "page_idx": 11}, {"type": "text", "text": "", "page_idx": 12}, {"type": "text", "text": "", "page_idx": 13}, {"type": "text", "text": "A Computation Graph Debranching Rules ", "text_level": 1, "page_idx": 14}, {"type": "text", "text": "We convert the computation DAG resulting from the LSRL program into a path program by attending to the first node whose output is the input for multiple other nodes, i.e., the first branching node. ", "page_idx": 14}, {"type": "text", "text": "Preparation step. Before we even start debranching we first pre-process the graph by fusing consecutive nodes of the same type together. The specific rules are: ", "page_idx": 14}, {"type": "text", "text": "\u2022 If a Lin node is followed by a single other Lin node, then fuse them together. This follows directly from the classical result that composing linear functions is a linear function.   \n\u2022 If a ReLU node is followed by another ReLU node, we can drop one of them as ReLU is idempotent.   \n\u2022 If a Lin is followed by a LinState, we can subsume the weight matrix $\\pmb{A}$ of the linear node in the $_B$ matrix of the LinState, and the bias $^{b}$ of the Lin node in the bias $^{b}$ of the LinState.   \n\u2022 If all inputs of a Concat node are the same, then this node only duplicates the input and hence can be safely replaced with a Lin layer. ", "page_idx": 14}, {"type": "text", "text": "The debranching process goes through the following cases in order. And iterates until there are no branching nodes left, in other words, until the graph has become a path graph. We will refer to the nodes whose input is the branching node as subsequent nodes. ", "page_idx": 14}, {"type": "text", "text": "Case 1A: If all subsequent nodes are Multi. As all Multi nodes that have the same input (the branching node) they must all be producing the exact same output. Hence, only one can be kept. This removes one branch. ", "page_idx": 14}, {"type": "text", "text": "Case 1B: If subsequent nodes are a combination of Multi and other nodes. We add a single Lin layer that acts as a bypass for the non-Multi nodes using the fact that multiplicatin by 1 is identity. This is followed by a single Multi layer. We then add Slice operators between the new Lin layer and the non-Multi nodes. This keeps the number of branches unchanged but removes the Multi node and the new branch can be handled by the other rules. ", "page_idx": 14}, {"type": "text", "text": "Case 2: All subsequent nodes are LinState. LinState nodes can be fused into a single LinState node by combining their states and update matrices. As each LinState may have different subsequent nodes itself, we add Slice nodes to extract the respective subspaces of the state. This keeps the number of branches unchanged but puts the graph into Case 5A. ", "page_idx": 14}, {"type": "text", "text": "Case 3: All subsequent nodes are ReLU. We can replace them by a single ReLU node. This removes one branch. ", "page_idx": 14}, {"type": "text", "text": "Case 4: All subsequent nodes are Concat. One complication is that Concat nodes can depend on other Concat nodes. So, we will restrict ourselves at this step by only treating the Concat nodes that depend only on the branch node directly by replacing them with a single Lin node. The rest will be handled by the Lin and Concat case (Case 10) or the only Lin case (Cases 5A and 5B). See the following example: ", "page_idx": 14}, {"type": "image", "img_path": "GproaSYZk5/tmp/4c935fcb222438cf5a13342b698570a8662c1af34f0bdc85ff699ce129175691.jpg", "img_caption": [], "img_footnote": [], "page_idx": 14}, {"type": "text", "text": "Hence, this operation either reduces the number of branches by one or will be followed by a case that reduces the number of branches. ", "page_idx": 14}, {"type": "text", "text": "Case 5A: Only Lin nodes and they are all Slices. This is one of the more challenging cases. While the Slice nodes are simply Lin nodes with special structure, we cannot treat them like standard Lin nodes (see Case 5B). While we can merge them into a single Lin node, we will then need further Slices to extract the relevant subspaces for the subsequent nodes. Therefore, we would be simply replacing Slice nodes with Slice nodes. Instead, we use the observation that Slice nodes can be fused with subsequent Lin and LinState nodes and can be pushed after ReLU and Concat nodes. Therefore we treat each subsequent node differently, depending on its type: ", "page_idx": 15}, {"type": "text", "text": "\u2022 If there are Multi nodes after any of the Slice nodes, they can all be fused into a single Lin node followed by a single Multi node.   \n\u2022 If there are Lin or LinState nodes after any of the Slice nodes, the Slices can be fused with the $\\pmb{A}$ matrix of the Lin nodes and the $_B$ matrix of the LinState nodes. This uses the fact that composing linear functions results in a linear function.   \n\u2022 If there is a ReLU after a Slice node, their position can be switched without changing the nodes. That is because ReLU commutes with linear operations with $\\mathbf{\\delta}b=\\mathbf{0}$ and $\\pmb{A}$ with non-negative eigenvalues as is the case for Slice nodes.   \n\u2022 If there is a Concat node after a Slice node, we can similarly push the Slice as a new Lin node after the Concat. ", "page_idx": 15}, {"type": "text", "text": "This step does not reduce the number of branching nodes but prepares the graph for a removal, with the specific case depending on the remaining nodes. ", "page_idx": 15}, {"type": "text", "text": "Case 5B: Only Lin nodes and they are not all Slices. We can combine them into a single Lin node and then add Slices to extract the relevant subspaces for the subsequent nodes. These Slices can then be pushed into the next operations using Case 5A. ", "page_idx": 15}, {"type": "text", "text": "Case 6: Both LinState nodes and other nodes. If both LinState nodes and other nodes are present, we can pass through the other variables with dummy LinState variables using zero matrices for $\\pmb{A}$ and identities for $_B$ . Then, Case 2 can be used to fuse all the LinState variables together. ", "page_idx": 15}, {"type": "text", "text": "Case 7A: Only Lin and ReLU nodes where all Lin nodes are followed by only one node which is a ReLU. If we add Lin bypasses to the ReLUs we will have only Lin nodes left. Each one of them would be followed by a ReLU. Hence, Case 5B can be first applied, followed by Case 3. ", "page_idx": 15}, {"type": "text", "text": "Case 7B: Only Lin and ReLU nodes where some Lin nodes are not followed by only one node which is a ReLU. In this case we cannot apply the above strategy. Instead, we fuse the ReLUs by placing ReLU-based bypasses before the Lin nodes. We do this in a similar spirit to Eq. (11), by splitting the positive and negative components and treating them separately. See App. F.6 for the LSRL implementation. Our DAG will then be in Case 7A first, then Case 5B, and, finally, in Case 3. ", "page_idx": 15}, {"type": "text", "text": "Case 8: Only Lin and Concat nodes. We add Lin bypasses for the Concat nodes which can then be merged using Case 5B and then Case 5A. ", "page_idx": 15}, {"type": "text", "text": "Case 9: Only ReLU and Concat nodes. Same strategy as for Case 8 but with ReLU bypasses. ", "page_idx": 15}, {"type": "text", "text": "Case 10: Only Lin, ReLU or Concat nodes. We introduce ReLU bypasses to all Concat nodes and to the Lin branches which are not immediately followed by a ReLU. This will be followed by applying Case 5B and then Case 3. ", "page_idx": 15}, {"type": "text", "text": "The above 13 cases cover all possible branching configurations. After repeated application, they reduce any DAG corresponding to an LSRL program to a path graph that can be compiled to one of the recurrent models in Sec. 2. ", "page_idx": 15}, {"type": "text", "text": "B Error Bound on the Approximation Scheme for Continuous Functions ", "text_level": 1, "page_idx": 15}, {"type": "text", "text": "In Sec. 4.1 we outlined a strategy to perform universal in-context approximation for continuous functions with Linear RNNs. The full program is in Lst. 1 and an illustration of the scheme is presented in Fig. 2. In Sec. 4.1 we claimed that the prompt length required to approximate an $L$ -Lipschitz function $f$ (w.r.t. the $\\ell_{2}$ norm) to precision $\\epsilon$ is $N\\,=\\,(2\\epsilon/L\\sqrt{d_{\\mathrm{in}}})^{-d_{\\mathrm{in}}}\\,=\\,\\stackrel{\\cdot}{\\mathcal{O}}(\\epsilon^{-d_{\\mathrm{in}}})$ . The present appendix offers the formal proof of this claim. ", "page_idx": 15}, {"type": "text", "text": "", "page_idx": 16}, {"type": "text", "text": "The program in Lst. 1 approximates the value of a function ${\\pmb y}=f({\\pmb q})$ with the value $\\bar{\\pmb{y}}$ at the centre $^c$ of the cell that contains $\\pmb q$ . Therefore, the error of our approximation is the maximum difference between $f({\\pmb q})$ and $f(\\pmb{c})\\colon\\|\\bar{f}(\\pmb{q})-f(\\pmb{c})\\|_{2}$ . \u221aFirst, as the length of each side of the cell is $\\delta$ , that means that $\\|\\boldsymbol{q}-\\boldsymbol{c}\\|_{\\infty}\\leq\\delta/2$ . Thus, $\\lVert\\boldsymbol{q}-\\boldsymbol{c}\\rVert_{2}\\leq\\sqrt{d_{\\mathrm{in}}}\\delta/2$ . Therefore, thanks to $f$ being $L$ -Lipschitz we get: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\|f(\\pmb{q})-f(\\pmb{c})\\|_{2}\\leq\\frac{\\delta L\\sqrt{d_{\\mathrm{in}}}}{2}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "If we want to upper bound this approximation error by $\\epsilon$ , we need to have $\\delta$ small enough: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\delta\\leq\\frac{2\\epsilon}{L\\sqrt{d_{\\mathrm{in}}}}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Finally, as the number of cells we need to cover the whole domain is $N=(1/\\delta)^{d_{\\mathrm{in}}}$ , this corresponds to us needing sufficiently long prompt: ", "page_idx": 16}, {"type": "equation", "text": "$$\nN\\geq\\left(\\frac{1}{\\delta}\\right)^{d_{\\mathrm{in}}}\\geq\\left(\\frac{L\\sqrt{d_{\\mathrm{in}}}}{2\\epsilon}\\right)^{d_{\\mathrm{in}}}.\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Therefore, if we want our ap\u221aproximation to have error at most $\\epsilon$ anywhere in the domain, we need a prompt of length at least $(L\\dot{\\sqrt{d_{\\mathrm{in}}}}/2\\epsilon)^{d_{\\mathrm{in}}}$ . ", "page_idx": 16}, {"type": "text", "text": "C Gated RNNs are GRU models ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "A GRU layer (Cho et al., 2014) with input $\\mathbf{\\boldsymbol{a}}_{t}\\in\\mathbb{R}^{d_{\\mathrm{in}}}$ and hidden state $h_{t-1}\\in\\mathbb{R}^{d_{\\mathrm{hidden}}}$ , and output $\\boldsymbol{h}_{t}\\in\\mathbb{R}^{d_{\\mathrm{hidden}}}$ can be described as follows: ", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{z_{t}=\\mathsf{S i g m o i d}(W_{z}\\boldsymbol{a}_{t}+U_{z}\\boldsymbol{h}_{t-1}+\\boldsymbol{b}_{z}),}\\\\ &{\\boldsymbol{r}_{t}=\\mathsf{S i g m o i d}(W_{r}\\boldsymbol{a}_{t}+U_{r}\\boldsymbol{h}_{t-1}+\\boldsymbol{b}_{r}),}\\\\ &{\\hat{\\boldsymbol{h}}_{t}=\\mathsf{t a n h}(W_{h}\\boldsymbol{a}_{t}+U_{h}(\\boldsymbol{r}_{t}\\odot\\boldsymbol{h}_{t-1})+\\boldsymbol{b}_{h}),}\\\\ &{\\boldsymbol{h}_{t}=(1-z_{t})\\odot\\boldsymbol{h}_{t-1}+z_{t}\\odot\\hat{\\boldsymbol{h}}_{t},}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "equation", "text": "$$\n\\begin{array}{l}{{(\\mathrm{update~gate~vector})}}\\\\ {{(\\mathrm{reset~gate~vector})}}\\\\ {{(\\mathrm{candidate~activation~vector})}}\\\\ {{(\\mathrm{output~vector})}}\\end{array}\n$$", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "In this section, we show a conversion of a single Gated RNN layer (Eq. (5)) to $k+2$ GRU layers. Here, $k$ is the number of layers in the $\\gamma$ and $h$ MLPs in Eq. (5). We first show that a single GRU layer can be used to compute the updated state $\\scriptstyle s_{t}$ and the output of the first layer of $\\gamma$ when applied to $\\pmb{x}_{t}$ . Then, every pair of single layers of $\\gamma(\\pmb{x}_{t})$ and $\\phi\\!\\left(s_{t}\\right)$ can be represented as an individual GRU layer. Finally, a single layer can be used to compute the element-wise multiplication $\\gamma(\\pmb{x}_{t})\\odot\\phi(\\pmb{s}_{t})$ . For simplicity, we assume the Sigmoid and tanh nonlinearities are replaced by ReLUs. If not, they can each be approximated with MLPs and hence also with additional GRU layers. Additionally, for convenience we will assume $d_{\\mathrm{in}}=d_{\\mathrm{hiden}}$ . ", "page_idx": 16}, {"type": "text", "text": "C.1 Representing the state update as a GRU layer ", "text_level": 1, "page_idx": 16}, {"type": "text", "text": "For this layer we set $\\pmb{b}_{z}=\\pmb{1}$ , $W_{z}=\\mathbf{0}$ , $U_{z}=\\mathbf{0}$ giving $z_{t}=1$ . Similarly, we set $\\boldsymbol b_{r}={\\bf1}$ , $W_{r}=\\mathbf{0}$ , $U_{r}=\\mathbf{0}$ giving ${\\boldsymbol{r}}_{t}=\\mathbf{1}$ . Thus, Eq. (14) reduces to: ", "page_idx": 16}, {"type": "equation", "text": "", "text_format": "latex", "page_idx": 16}, {"type": "text", "text": "Setting ${\\mathbf{}}{\\mathbf{}}{\\mathbf{a}}_{t}={\\left[\\begin{array}{l}{{\\mathbf{0}}}\\\\ {x_{t}}\\end{array}\\right]}$ $\\begin{array}{r}{\\hat{h}_{t}=\\sigma(\\boldsymbol{W_{h}}\\boldsymbol{a_{t}}+\\boldsymbol{U_{h}}h_{t-1}+\\boldsymbol{b_{h}}),\\qquad\\qquad\\qquad\\qquad\\qquad(16)}\\\\ {\\mathrm{where~}\\boldsymbol{x_{t}}\\in\\mathbb{R}^{d_{\\mathrm{in}}/2},h_{t-1}=\\left[\\!\\!\\begin{array}{c}{\\boldsymbol{s}_{t-1}}\\\\ {0}\\end{array}\\!\\!\\right],\\mathrm{where~}\\boldsymbol{s}_{t-1}\\in\\mathbb{R}^{d_{\\mathrm{hiden}}/2},\\boldsymbol{W_{h}}=\\left[\\!\\!\\begin{array}{c c}{0}&{\\boldsymbol{B}}\\\\ {0}&{\\boldsymbol{I}}\\end{array}\\!\\!\\right],}\\end{array}$ $U_{h}={\\left[\\begin{array}{l l}{\\mathbf{{}}A}&{\\mathbf{{0}}{\\bar{\\right}}}\\\\ {\\mathbf{{0}}}&{\\mathbf{{0}}}\\end{array}\\right]},\\,{\\bar{\\mathbf{{b}}}}_{h}={\\left[\\begin{array}{l}{\\mathbf{{\\boldsymbol{b}}}}\\\\ {\\mathbf{-}k_{l b}}\\end{array}\\right]},$ , where $k_{l b}$ is a vector where every element in $\\pmb{k}$ is a lower bound on $\\pmb{x}_{t}$ . results in Eq. (15) becoming: $\\iota_{t}=\\sigma\\left(\\left[\\!\\!\\left[0\\!\\!\\!\\begin{array}{c c}{\\mathbf{\\bar{B}}}\\\\ {\\mathbf{\\bar{\\alpha}}}&{I}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{\\mathbf{0}}\\\\ {x_{t}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c c}{\\mathbf{A}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\mathbf{0}}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{s_{t-1}}\\\\ {\\mathbf{0}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{b}\\\\ {\\!\\!-k_{l b}}\\end{array}\\!\\!\\right]\\right)=\\left[\\!\\!\\begin{array}{c}{\\sigma(A s_{t-1}+B x_{t}+b)\\!\\!\\right]=\\left[\\!\\!\\begin{array}{c}{\\sigma(s_{t})}\\\\ {\\sigma(x_{t}-k_{l b})}\\end{array}\\!\\!\\right].$ ", "page_idx": 16}, {"type": "text", "text": "Note: if we do not want to assume a compact domain for $\\pmb{x}_{t}$ , it would be possible to use the same trick as in Equation $(I I)$ rather than subtracting $\\pmb{k}$ in this layer and adding in the next. However, we omit this approach for clarity of presentation. ", "page_idx": 16}, {"type": "text", "text": "C.2 Representing each MLP layer as a GRU layer ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In these layers, similarly to the recurrent layer, we set $\\boldsymbol b_{z}=\\boldsymbol1$ , $W_{z}=\\mathbf{0}$ , $U_{z}=\\mathbf{0}$ giving $\\boldsymbol{z}_{t}=\\boldsymbol{1}$ . In the same way, we set $b_{r}\\,=\\,1$ , $W_{r}\\,=\\,{\\bf0}$ , $U_{r}\\,=\\,{\\bf0}$ giving ${\\pmb r}_{t}\\,=\\,{\\bf1}$ . Here, however, we set $W_{h}\\,=\\,\\left[{W_{h}\\overset{}{\\underset{}{}}}\\quad\\,0\\,\\,\\right]\\!,\\,U_{h}$ $U_{h}\\,=\\,{\\bf0}$ and $b_{h}\\,=\\,\\left[\\!\\!\\begin{array}{c}{{{b_{h_{i}}}}}\\\\ {{{b_{\\gamma_{i}}}}}\\end{array}\\!\\!\\right]$ , except for the first of such layer where $b_{h}=$ $\\left[\\begin{array}{c}{\\pmb{b}_{h_{i}}}\\\\ {\\pmb{b}_{\\gamma_{i}}+\\pmb{W}_{\\gamma_{i}}\\pmb{k}_{l b}}\\end{array}\\right]$ . Thus, for an input $\\pmb{a}_{t}=\\left[\\pmb{a}_{1,t}\\right]$ the layer output (Eq. (15)) for layer $i$ is: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\boldsymbol{h}_{t}=\\sigma\\left(\\left[\\!\\!\\begin{array}{c c}{W_{\\phi_{i}}}&{\\boldsymbol{\\mathbf{0}}}\\\\ {\\boldsymbol{\\mathbf{0}}}&{W_{\\gamma_{i}}}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{a_{1,t}}\\\\ {a_{2,t}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{b_{\\phi_{i}}}\\\\ {b_{\\gamma_{i}}}\\end{array}\\!\\!\\right]\\right)=\\left[\\!\\!\\begin{array}{c}{\\phi_{i}(\\boldsymbol{a}_{1,t})}\\\\ {\\gamma_{i}(\\boldsymbol{a}_{1,t})}\\end{array}\\!\\!\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Here, $\\phi_{i}$ and $\\gamma_{i}$ are the $i$ -th layers (including the ReLU) of respectively $\\phi$ and $\\gamma$ in Eq. (5). ", "page_idx": 17}, {"type": "text", "text": "C.3 Representing the multiplicative gating with a single GRU layer ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "The only thing left is to model the element-wise multiplication of the outputs of $\\phi$ and $\\gamma$ in Eq. (5). We do this using a GRU layer with ${\\bf{b}}_{z}={\\bf{0}}$ , $W_{z}=\\mathbf{0}$ , $U_{z}={\\left[\\begin{array}{l l}{\\mathbf{0}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{I}\\end{array}\\right]}$ . We set ${\\pmb b}_{r}={\\bf0},{\\pmb W}_{r}={\\bf0}\\,,{\\pmb U}_{r}={\\bf0}$ giving ${\\mathbf{\\nabla}}r_{t}=\\mathbf{0}$ . We also set ${\\mathbf b}_{h}={\\mathbf0}$ , $W_{h}=\\left[\\!\\!{\\begin{array}{c c}{{{\\bf0}}}&{{{\\bf0}}}\\\\ {{{\\cal I}}}&{{{\\bf0}}}\\end{array}}\\!\\!\\right],U_{h}={\\bf0}$ . Thus, for an input ${\\bf{\\boldsymbol a}}_{t}=\\left[{\\pmb a}_{1,t}\\right]$ a1,t , the output $h_{t}$ (Eq. (15)) of this GRU layer becomes: ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{h_{t}=\\sigma\\left(\\left[\\!\\!\\begin{array}{c c}{\\mathbf{0}}&{\\mathbf{0}}\\\\ {I}&{\\mathbf{0}}\\end{array}\\!\\!\\right]\\left[a_{2,t}\\right]\\right)\\odot\\left[\\!\\!\\begin{array}{c c}{\\mathbf{0}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{I}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{a_{1,t}}\\\\ {a_{2,t}}\\end{array}\\!\\!\\right]=\\left[\\!\\!\\begin{array}{c}{\\mathbf{0}}\\\\ {\\sigma(a_{1,t})\\odot a_{2,t}\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "If $\\mathbf{\\deltaa}_{t}$ is the output of a GRU layer constructed as in Eq. (18) (as is in our case), then it must be non-negative. This is due to the ReLU application in Eq. (18). Hence, the application of another ReLU to $\\mathbf{\\delta}_{a_{1,t}}$ in Eq. (19) can be safely removed as ReLU is idempotent and Eq. (19) simplifies to ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{\\boldsymbol{h}}_{t}=\\left[\\begin{array}{c}{\\mathbf{\\boldsymbol{0}}}\\\\ {\\mathbf{\\boldsymbol{a}}_{1,t}\\odot\\mathbf{\\boldsymbol{a}}_{2,t}\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "Thus, this construction computes element-wise multiplication of $\\pmb{a}_{1,t}$ and $\\pmb{a}_{2,t}$ . ", "page_idx": 17}, {"type": "text", "text": "C.4 Composing the operations to model a single Gated RNN layer ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "In order to represent Eq. (5), we use one GRU layer for the recurrence (as described in App. C.1), followed by $k$ GRU layers modelling a pair of the $k$ MLP layers of $\\phi$ and $\\gamma$ (App. C.2), completed with a single mixing layer (App. C.3). This stack of $k+2$ layers models exactly the Gated RNN layer (Eq. (5)): ", "page_idx": 17}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\pmb{s}_{t}=\\sigma\\left(\\pmb{A}\\left[\\begin{array}{c}{\\mathbf{0}}\\\\ {\\pmb{s}_{t-1}}\\end{array}\\right]+\\pmb{B}\\left[\\begin{array}{c}{\\pmb{x}_{t}}\\\\ {\\mathbf{0}}\\end{array}\\right]+\\pmb{b}\\right)}\\\\ &{\\pmb{y}_{t}=\\left[\\gamma(\\pmb{x}_{t})\\odot\\phi(\\pmb{s}_{t})\\right],}\\end{array}\n$$", "text_format": "latex", "page_idx": 17}, {"type": "text", "text": "With this, we have shown that any Gated RNN (Eq. (5)) can be expressed as a GRU-based model. Hence, the two universal approximation programs in Lsts. 1 and 2 can be implemented also in GRU-based models. Thus, the GRU architecture can also be a universal in-context approximator. ", "page_idx": 17}, {"type": "text", "text": "D Gated RNNs are LSTMs ", "text_level": 1, "page_idx": 17}, {"type": "text", "text": "A single LSTM layer (Hochreiter and Schmidhuber, 1997; Gers et al., 2000) with input $\\mathbf{a}_{t}\\in\\mathbb{R}^{d_{\\mathrm{in}}}$ , hidden state $h_{t-1}\\dot{\\in}\\mathbb{R}^{d_{\\mathrm{hidden}}}$ , candidate memory cell $\\tilde{c}_{t}\\in\\mathbb{R}^{d_{\\mathrm{hiden}}}$ , memory cell $c_{t}\\in\\mathbb{R}^{\\hat{d}_{\\mathrm{hiden}}}$ and layer ", "page_idx": 17}, {"type": "text", "text": "output $\\boldsymbol{h}_{t}\\in\\mathbb{R}^{d_{\\mathrm{hidden}}}$ can be expressed as: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{f_{t}=\\mathrm{Sigmoid}(W_{f}a_{t}+U_{f}h_{t-1}+b_{f}),}\\\\ &{i_{t}=\\mathrm{Sigmoid}(W_{i}a_{t}+U_{i}h_{t-1}+b_{i}),}\\\\ &{o_{t}=\\mathrm{Sigmoid}(W_{o}a_{t}+U_{o}h_{t-1}+b_{o}),}\\\\ &{\\tilde{c}_{t}=\\mathsf{t a n h}(W_{c}a_{t}+U_{c}h_{t-1}+b_{c}),}\\\\ &{c_{t}=f_{t}\\odot c_{t-1}+i_{t}\\odot\\tilde{c}_{t},}\\\\ &{h_{t}=o_{t}\\odot\\mathsf{t a n h}(c_{t}),}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n{\\begin{array}{r l}&{(\\mathrm{forget~gate~vector})}\\\\ &{(\\mathrm{input~gate~vector})}\\\\ &{(\\mathrm{output~gate~vector})}\\\\ &{(\\mathrm{candidate~cell~vector})}\\\\ &{(\\mathrm{memory~cell~vector})}\\\\ &{(\\mathrm{output~vector})}\\end{array}}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "where $h_{0}=\\mathbf{0}$ and $c_{0}=\\mathbf{0}$ . ", "page_idx": 18}, {"type": "text", "text": "In a way analogous to App. C, we show that a single layer of a gated RNN (Eq. (5)) can be expressed using $k+2$ LSTM layers, where $k$ is the maximum depth of either of the MLP networks $\\phi$ or $\\gamma$ . We again follow the setup of replacing all Sigmoid and tanh activation functions with ReLU activations which we denote $\\sigma$ and we again assume that $d_{\\mathrm{in}}=d_{\\mathrm{hiden}}$ . The set up follows the same structure as in App. C. First, we show that the non-linear state update computing $\\pmb{s}_{t}$ can be expressed as a single LSTM layer. We then show that we can represent the layers in MLP networks $\\gamma(\\pmb{x}_{t})$ and $\\phi\\!\\left(s_{t}\\right)$ using single LSTM layers. Finally, a single layer can compute the Hadamard product between $\\gamma(\\pmb{x}_{t})$ and $\\bar{\\phi(s_{t})}$ . Therefore, any Gated RNN with ReLU activations can be expressed as a LSTM with ReLU activations. ", "page_idx": 18}, {"type": "text", "text": "For clarity of the exposition, we once again assume that our inputs belong to a compact domain $\\mathcal{X}$ of real vectors. This implies that the set is bounded and, in particular, that we can find a vector $k_{l b}$ such that $\\pmb{k}_{l b,i}\\leq(\\pmb{x}_{t})_{i}$ for $i\\in[d_{\\mathrm{in}}]$ for all $\\mathbf{\\boldsymbol{x}}_{t}\\in\\mathcal{X}$ . In other words, we have $(\\mathbf{\\boldsymbol{x}}_{t}-\\mathbf{\\boldsymbol{k}}_{l b})_{i}\\geq0$ for for $i\\in{1,\\dots,d_{\\mathrm{in}}}$ . We will make use of this fact several times when dealing with ReLU activations. ", "page_idx": 18}, {"type": "text", "text": "D.1 Representing the state update as an LSTM layer ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "We first represent the non-linear state update in Eq. (5) using a single layer of an LSTM. In particular, we set $W_{f}=\\mathbf{0}$ , $U_{f}=\\mathbf{0}$ and ${\\bf\\nabla}b_{f}={\\bf0}$ so that $\\mathbf{\\Deltaf}_{t}=\\mathbf{0}$ . We also set $W_{i}=\\mathbf{0}$ , $U_{i}=\\mathbf{0}$ , $b_{i}=\\mathbf{1}$ and ${\\cal W}_{c}={\\bf0},{\\cal U}_{c}={\\bf0},{\\bar{b}}_{c}={\\bf1}$ . This results in $\\boldsymbol{i}_{t}=\\mathbf{1}$ and $\\tilde{c}_{t}=1$ . We see from this that the LSTM layer with these weight settings reduces to ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\boldsymbol{h}_{t}=\\boldsymbol{o}_{t}=\\sigma(W_{o}\\boldsymbol{a}_{t}+U_{o}\\boldsymbol{h}_{t-1}+\\boldsymbol{b}_{o}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\iota_{t}=\\sigma\\left(\\left[\\!\\!\\left[0\\!\\!\\!\\begin{array}{c c}{\\mathbf{B}}\\\\ {\\mathbf{\\bar{\\alpha}}}&{I}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{\\mathbf{0}}\\\\ {x_{t}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c c}{A}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{\\mathbf{0}}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{s_{t-1}}\\\\ {\\mathbf{0}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{b}\\\\ {\\!\\!-k_{l b}}\\end{array}\\!\\!\\right]\\right)=\\left[\\!\\!\\begin{array}{c}{\\sigma(A s_{t-1}+B x_{t}+b)\\!\\!\\right]=\\left[\\!\\!\\begin{array}{c}{s_{t}}\\\\ {\\sigma(x_{t}-k_{l b})}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{s_{t}}\\\\ {s_{t}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{s_{t}}\\\\ {s_{t}}\\end{array}\\!\\!\\right]}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "D.2 Representing each MLP layer as an LSTM layer ", "text_level": 1, "page_idx": 18}, {"type": "text", "text": "Now we want to use an LSTM layers to model the MLP layers of both $\\gamma$ and $\\phi$ simultaneously. We set ${\\cal W}_{f}={\\bf0},{\\cal U}_{f}={\\bf0},b_{f}={\\bf0}$ and $W_{i}=\\mathbf{0}$ , $U_{i}=\\mathbf{0}$ , $b_{i}=\\mathbf{1}$ and $W_{c}=\\mathbf{0}$ , ${\\cal U}_{c}={\\bf0}$ , $\\mathbf{}b_{c}=1$ as before. We make a change for these LSTM layers by setting $W_{o}=\\left[\\pmb{W}_{\\phi_{i}}\\pmb{\\Omega}_{\\pmb{W}_{\\gamma_{i}}}^{\\mathbf{0}}\\right],\\pmb{U}_{o}=\\mathbf{0}$ and $\\pmb{b}_{o}=\\left[\\pmb{b}_{\\phi_{i}}\\right]_{.}$ , except for the first layer where b\u03d5 = b\u03b31 + \u03d51W\u03b31k . Thus, for an input $\\pmb{a}_{t}=\\left[\\pmb{a}_{1,t}\\right]$ the layer output is: ", "page_idx": 18}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{h}_{t}=\\sigma\\left(\\left[\\pmb{W}_{\\phi_{i}}\\quad\\ \\ \\mathbf{0}\\atop\\ \\mathbf{W}_{\\gamma_{i}}\\right]\\left[\\pmb{a}_{2,t}\\right]+\\left[\\pmb{b}_{\\phi_{i}}\\right]\\right)=\\left[\\phi_{i}(\\pmb{a}_{1,t})\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 18}, {"type": "text", "text": "Here, $\\phi_{i}$ and $\\gamma_{i}$ again refer to the $i$ -th layers (including the ReLU) of respectively $\\phi$ and $\\gamma$ in Eq. (5). ", "page_idx": 18}, {"type": "text", "text": "Note that, without a loss of generality, if we have that $\\phi$ has $m$ layers whereas $\\gamma$ has $k$ with $m<k$ , then we can also model this by simply adding additional layers to model additional layers for $\\gamma$ whilst ", "page_idx": 18}, {"type": "text", "text": "simply passing on $\\phi$ unchanged. Specifically, we set set the weights to ensure that $\\pmb{f}_{t}=0$ and that $\\mathbf{\\boldsymbol{i}}_{t}$ and $\\tilde{c_{t}}$ are $\\mathbf{1}$ so that $h_{t}=o_{t}$ . The input to this layer for $i>k$ is then given as $\\pmb{a}_{t}=\\left[\\pmb{\\phi}(\\pmb{s}_{t})\\right]$ \u03d5(st) . The we set the weights to compute $\\pmb{o}_{t}$ as ", "page_idx": 19}, {"type": "equation", "text": "$$\no_{t}=\\sigma\\left(\\left[\\!\\!\\left[\\begin{array}{c c}{\\mathbf{\\sigma}_{0}}\\\\ {\\mathbf{0}}&{W_{\\gamma_{i}}}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{\\phi(s_{t})}\\\\ {\\mathbf{\\sigma}_{a_{2,t}}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{\\mathbf{0}}\\\\ {b_{\\phi_{i}}}\\end{array}\\!\\!\\right]\\right)=\\left[\\!\\!\\begin{array}{c}{\\phi(s_{t})}\\\\ {\\gamma_{i}(\\mathbf{a}_{2,t})}\\end{array}\\!\\!\\right].\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "D.3 Representing the multiplicative gating with an LSTM layer ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "Finally, we model the element-wise multiplication of the outputs of $\\phi$ and $\\gamma$ in Eq. (5). To do this we set the weights of the input gate and candidate cell vectors for the final layers of of $\\gamma$ and $\\phi$ to be as follows: ", "page_idx": 19}, {"type": "equation", "text": "$$\ni_{t}=\\sigma\\left({\\left[\\!\\!\\begin{array}{l l}{0}&{0}\\\\ {I}&{0}\\end{array}\\!\\!\\right]}\\left[a_{2,t}\\right]+{\\left[\\!\\!\\begin{array}{l}{0}\\\\ {0}\\end{array}\\!\\!\\right]}\\right)={\\left[\\!\\!\\begin{array}{l}{\\mathbf{0}}\\\\ {a_{1,t}}\\end{array}\\!\\!\\right]}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "and ", "page_idx": 19}, {"type": "equation", "text": "$$\n{\\widetilde{c}}=\\sigma\\left(\\left[{\\bf{0}}\\quad0\\right]\\left[{a_{1,t}}\\right]+\\left[{\\bf{0}}\\right]\\right)=\\left[{\\bf{0}}\\atop{a_{2,t}}\\right].\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "Then by setting ${\\cal W}_{f}\\,=\\,{\\bf0},\\,{\\cal U}_{f}\\,=\\,{\\bf0},\\,b_{f}\\,=\\,{\\bf0}$ and ${\\cal W}_{o}={\\bf0},{\\cal U}_{o}={\\bf0},\\,b_{o}={\\bf1}$ to force $\\mathbf{\\Delta}f_{t}=\\mathbf{0}$ and $o_{t}=\\mathbf{1}$ , we get ", "page_idx": 19}, {"type": "equation", "text": "$$\ny_{t}=\\sigma(c_{t})=\\left[\\sigma(\\mathbf{0}\\odot\\mathbf{0})\\right]=\\left[\\sigma(\\mathbf{a}_{1,t}\\odot\\mathbf{a}_{2,t})\\right].\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "D.4 Composing the operations to model a single Gated RNN layer ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "To model the gated RNN described in Eq. (5), we again follow the same lines as described in App. C. In particular, we use one LSTM layer for the recurrent state updated as described in App. D.1. We then stack $k$ LSTM layers as described in App. D.2 to model the $k$ MLP layers of $\\phi$ and $\\gamma$ in parallel. We then use one final layer to both give the final MLP layer of $\\phi$ and $\\gamma$ and to compute their Hadamard product as set out in App. D.3 in order to match the output of the gated RNN in Eq. (5). Now, since we are working with $\\sigma=\\mathrm{ReLU}$ , both $\\gamma(\\pmb{x}_{t})$ and $\\phi\\!\\left(s_{t}\\right)$ are positive and therefore so is their product. Hence, applying $\\sigma$ to the product components in Eq. (33) leaves the the components invariant. Therefore, we output is ", "page_idx": 19}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{y}_{t}=\\left[\\underbrace{\\mathbf{0}}_{\\gamma(\\pmb{x}_{t})\\odot\\phi(\\pmb{s}_{t})}\\right],}\\end{array}\n$$", "text_format": "latex", "page_idx": 19}, {"type": "text", "text": "as required. ", "page_idx": 19}, {"type": "text", "text": "Hence, we have shown that a single layer of a gated RNN as described by Eq. (5) can be represented using $k+2$ LSTM layers where $k$ is the maximum depth of $\\phi$ and $\\gamma$ . Therefore, once again, the two universal approximation programs in Lsts. 1 and 2 can also be implemented for LSTMs. Hence, LSTM models are also universal approximators in the sense described in Sec. 4. ", "page_idx": 19}, {"type": "text", "text": "E Gated Linear RNNs are Hawk/Griffin Models ", "text_level": 1, "page_idx": 19}, {"type": "text", "text": "A single residual block of a Hawk/Griffin model (De et al., 2024) consists of two components, a recurrent block for temporal mixing which makes use of a one-dimensional temporal convolution, as well as real-gated linear recurrent unit (RG-LRU) and a gated MLP block. Specifically, we consider an input $\\mathbf{a}_{t}\\in\\mathbb{R}^{d_{\\mathrm{in}}}$ , inputs to the blocks of dimensions $d_{\\mathrm{in}}$ and outputs from each block of dimensions $d_{\\mathrm{in}}$ . Within blocks, all vectors have dimensionality $d_{\\mathsf{h i d d e n}}=E d_{\\mathsf{i n}}$ , where $E$ is denotes an expansion factor. Below, we formally describe the form of the recurrent and gated MLP blocks which are the two main components making up the residual blocks used for Hawk and Griffin. ", "page_idx": 19}, {"type": "text", "text": "Recurrent block. The recurrent block consists of two branches. The first applies a one-dimensional temporal convolution followed by a RG-LRU. The second branch simply performs a linear transformation followed by a non-linearity, i.e. applies a single layer of an MLP. ", "page_idx": 19}, {"type": "text", "text": "Consider the first branch of the recurrent block with an input $\\mathbf{\\deltaa}_{t}$ . The one-dimensional temporal convolution can be written as: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\boldsymbol{a}_{t}^{\\prime}=W_{a}\\boldsymbol{a}_{t},}\\\\ &{\\boldsymbol{g}_{t}=\\mathsf{G e L U}(W_{g}\\boldsymbol{a}_{t}+b_{g}),}\\\\ &{M_{t}=\\left[\\boldsymbol{a}_{t-(d_{\\mathrm{conv}}-1)}^{\\prime},\\ldots,\\boldsymbol{a}_{t-2}^{\\prime},\\boldsymbol{a}_{t-1}^{\\prime},\\boldsymbol{a}_{t}^{\\prime}\\right],}\\\\ &{\\;\\;\\;\\;\\boldsymbol{z}_{t}=\\displaystyle\\sum_{i=0}^{d_{\\mathrm{conv}}-1}W_{M}[i]M_{t}[t-i]\\;+b_{\\mathrm{conv}}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "where $b_{\\mathrm{conv}}$ is a bias vector and $W_{M}=\\left[\\tilde{B},\\tilde{A}\\tilde{B},\\tilde{A}^{2}\\tilde{B},\\cdot\\cdot\\cdot,\\tilde{A}^{t}\\tilde{B},\\cdot\\cdot\\cdot\\right]$ is the convolutional kernel for the one-dimensional temporal convolution. ", "page_idx": 20}, {"type": "text", "text": "The output of this convolution is then fed into a RG-LRU. We can write this down concretely using as an input $\\boldsymbol{z}_{t}$ from the one-dimensional convolution and with recurrent state $h_{t}\\in\\mathbb{R}^{d_{\\mathrm{model}}}$ : ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{{\\boldsymbol{r}}_{t}=\\mathsf{S i g m o i d}({\\boldsymbol{W}}_{r}{\\boldsymbol{z}}_{t}+{\\boldsymbol{b}}_{r}),}\\\\ &{~{\\boldsymbol{i}}_{t}=\\mathsf{S i g m o i d}({\\boldsymbol{W}}_{i}{\\boldsymbol{z}}_{t}+{\\boldsymbol{b}}_{i}),}\\\\ &{~{\\boldsymbol{a}}=\\mathsf{S i g m o i d}({\\boldsymbol{\\Lambda}}),}\\\\ &{{\\boldsymbol{a}}_{t}={\\boldsymbol{a}}^{c r_{t}},}\\\\ &{{\\boldsymbol{h}}_{t}={\\boldsymbol{a}}_{t}\\odot{\\boldsymbol{h}}_{t-1}+\\sqrt{1-{\\boldsymbol{a}}_{t}^{2}}\\odot({\\boldsymbol{i}}_{t}\\odot{\\boldsymbol{z}}_{t}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Now consider the second branch of the recurrent block. This performs a linear transformation followed by a non-linear activation: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{g}_{t}=\\mathsf{G e L U}(\\pmb{W}_{g}\\pmb{a}_{t}+\\pmb{b}_{g}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "To get the final output of the recurrent block, we multiply the components of the vectors computed from each branch within the recurrent block and then perform a non-linear transformation: ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{\\pmb{h}_{t}^{\\prime}=\\pmb{g}_{t}\\odot\\pmb{h}_{t},}\\\\ &{\\pmb{o}_{t}=\\pmb{W}_{o}\\pmb{h}_{t}^{\\prime}+\\pmb{b}_{o}.}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "Gated MLP block. After passing through the recurrent block, we pass the output $\\pmb{o}_{t}$ into a gated MLP block. Again we have two branches, the first where we linearly transform the input to this block ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\pmb{e}_{t}=\\pmb{W_{e}}\\pmb{o}_{t}+\\pmb{b}_{e},\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "and the second performs a single layer MLP transformation as ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{f}_{t}=\\mathsf{G e L U}(\\pmb{W}_{f}\\pmb{o}_{t}+\\pmb{b}_{f}).}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "These are then combined through a Hadamard product and linear transformation as ", "page_idx": 20}, {"type": "equation", "text": "$$\n\\begin{array}{c}{{e_{t}^{\\prime}=e_{t}\\odot f_{t},}}\\\\ {{m_{t}=W_{m}e_{t}^{\\prime}+b_{m}.}}\\end{array}\n$$", "text_format": "latex", "page_idx": 20}, {"type": "text", "text": "We then have that the vector $\\mathbf{\\nabla}m_{t}$ acts as the output of the residual block given the input $\\mathbf{\\deltaa}_{t}$ . ", "page_idx": 20}, {"type": "text", "text": "Distinction between the Griffin and Hawk models. Hawk is the more simple of the two architectures proposed in (De et al., 2024). Here, residual blocks using the recurrent block described above are simply stacked on top of each other to form the Hawk architecture. Griffin, on the other hand, mixes recurrent blocks and local attention. In particular, two residual blocks with recurrent blocks are followed by one residual block using local MQA attention (Beltagy et al., 2020; Shazeer, 2019). ", "page_idx": 20}, {"type": "text", "text": "Simplifying Assumptions. We again follow the setup of replacing all Sigmoid and tanh activation functions with ReLU activations which we denote $\\sigma$ . Furthermore, we assume for simplicity that $d_{\\mathrm{in}}=d_{\\mathrm{hiden}}$ by choosing $E=1$ . Moreover, the Hawk and Griffin architecture contains residual connections and normalising layers which we omit.4 We again assume compactness of the input domain $\\mathcal{X}$ and denote a vector of finite values $k_{l b}$ , such that $\\pmb{k}_{l b,i}\\,\\leq\\,(\\pmb{x}_{t})_{i}$ for $i\\,\\in\\,[d_{\\mathrm{in}}]$ and all $\\mathbf{\\boldsymbol{x}}_{t}\\in\\mathcal{X}$ , just as before. Finally, we assume that $d_{\\mathrm{conv}}=T$ where $T$ is the maximum sequence length. ", "page_idx": 20}, {"type": "text", "text": "E.1 Representing the state update using a recurrent block ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "Starting with the input to the Hawk model, which we denote $\\pmb{a}_{t}$ , we define this to be a function of the input to the Gated RNN $\\pmb{x}_{t}$ as ${\\mathbf{}}{\\mathbf{}}{\\mathbf{a}}_{t}={\\left[\\begin{array}{l}{{\\mathbf{0}}}\\\\ {x_{t}}\\end{array}\\right]}$ . First, we set $W_{a}=I$ so that $\\pmb{a}_{t}^{\\prime}=\\pmb{a}_{t}$ . Next we choose matrices $\\tilde{A}=\\left[\\!\\!{\\begin{array}{c c}{{\\mathbf{0}}}&{{A}}\\\\ {{\\mathbf{0}}}&{{\\mathbf{0}}}\\end{array}}\\right]$ and $\\tilde{B}=\\left[\\!\\!\\begin{array}{c c}{{{\\bf0}}}&{{B}}\\\\ {{{\\bf0}}}&{{{\\bf0}}}\\end{array}\\!\\!\\right]$ which we then use, with a convolutional window size of $d_{\\mathrm{conv}}=T$ to form the convolutional kernel $W_{M}=\\left[\\tilde{B},\\tilde{A}\\tilde{B},\\tilde{A}^{2}\\tilde{B},\\cdot\\cdot\\cdot,\\tilde{A}^{t}\\tilde{B},\\cdot\\cdot\\cdot\\right]$ . Setting the convolutional bias as $b_{\\mathrm{conv}}={\\binom{\\mathbf{0}}{\\mathbf{1}}}$ gives ", "page_idx": 21}, {"type": "equation", "text": "$$\n\\begin{array}{r l}&{z_{t}=\\displaystyle\\sum_{i=0}^{t-1}W_{M}[i]M_{t}[t-i]~+b_{\\mathrm{conv}},}\\\\ &{~~~=\\tilde{B}a_{t}+\\tilde{A}\\tilde{B}a_{t-1}+\\cdots+\\tilde{A}^{t-1}\\tilde{B}a_{1}+\\left[\\!\\!\\begin{array}{l}{0}\\\\ {1}\\end{array}\\!\\!\\right]}\\\\ &{~~~=\\left[\\!\\!\\begin{array}{l}{s_{t}}\\\\ {1}\\end{array}\\!\\!\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "Now, we pass $\\mathscr{z}_{t}$ through the RG-LRU. We set $\\Lambda=0$ so that $\\mathbf{\\boldsymbol{a}}_{t}=0$ . We also define $W_{i}=\\mathbf{0}$ and $\\mathbf{}b_{i}=\\mathbf{1}$ so that $\\dot{\\boldsymbol{\\imath}}_{t}=\\mathbf{1}$ . This gives us $\\pmb{h}_{t}\\,=\\,z_{t}$ , so that we pass the output of the one-dimensional convolution through he RG-LRU. ", "page_idx": 21}, {"type": "text", "text": "Next, let\u2019s focus on the second branch. Making use of the lower bound $k_{l b}$ on the domain $\\mathcal{X}$ , we set $W_{g}=I$ and $b_{g}=\\left[\\begin{array}{c}{{{\\bf1}}}\\\\ {{\\!-k_{l b}}}\\end{array}\\right]$ so that ", "page_idx": 21}, {"type": "equation", "text": "$$\ng_{t}=\\sigma\\left(I\\left[\\!\\!\\begin{array}{c}{{{\\bf0}}}\\\\ {{x_{t}}}\\end{array}\\!\\!\\right]+\\left[\\!\\!-{\\bf k}_{l b}\\right]\\right)=\\left[\\!\\!\\begin{array}{c}{{\\sigma({\\bf1})}}\\\\ {{\\sigma({\\bf x}_{t}-k_{l b})}}\\end{array}\\!\\!\\right]=\\left[\\!\\!\\begin{array}{c}{{{\\bf1}}}\\\\ {{{\\bf x}_{t}-k_{l b}}}\\end{array}\\!\\!\\right],\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "where we used that $(\\mathbf{x}_{t}-k_{l b})_{i}\\ge\\mathbf{0}$ for every $i$ . Combining the two branches gives ", "page_idx": 21}, {"type": "equation", "text": "$$\nh_{t}^{\\prime}=\\left[x_{t}-k_{l b}\\right]\\odot\\left[\\!\\!\\begin{array}{c}{{s_{t}}}\\\\ {{{\\bf1}}}\\end{array}\\!\\!\\right]=\\left[\\!\\!\\begin{array}{c}{{s_{t}}}\\\\ {{x_{t}-k_{l b}}}\\end{array}\\!\\!\\right].\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "We finally get the output of the recurrent block by defining $W_{o}=I$ and ${\\pmb b}_{0}=\\left[{\\pmb0}\\atop{\\pmb k}_{l b}\\right]$ so that ", "page_idx": 21}, {"type": "equation", "text": "$$\n{\\pmb o}_{t}=\\left[{\\pmb s}_{t}\\right].\n$$", "text_format": "latex", "page_idx": 21}, {"type": "text", "text": "E.2 Representing the identity function using a recurrent block ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "We now show that we can pass an input unchanged through a recurrent block. Assume that the input to the recurrent block is $\\pmb{a}_{t}=\\left[\\pmb{a}_{1,t}\\right]$ with $W_{a}=I$ so that $\\mathbf{a}_{t}^{\\prime}=\\mathbf{a}_{t}$ . Then we define matrices $\\tilde{A}={\\bf0}$ and ${\\tilde{B}}=I$ which we then use to form the convolutional kernel $W_{M}=\\left[\\tilde{B},\\tilde{A}\\tilde{B},\\tilde{A}^{2}\\tilde{B},\\cdot\\cdot\\cdot,\\tilde{A}^{t}\\tilde{B},\\cdot\\cdot\\cdot\\right]$ . Finally, setting the convolutional bias as ${\\pmb b}_{\\mathrm{conv}}={\\bf0}$ results in $\\pmb{z}_{t}=\\pmb{a}_{t}$ . From here, we can again set $\\Lambda=0$ , $W_{i}=\\mathbf{0}$ and $\\mathbf{}b_{i}=\\mathbf{1}$ so that $h_{t}=z_{t}$ . Looking at the second branch and setting $W_{g}=0$ and $b_{g}={\\bf1}$ so that $\\mathbf{}h_{t}^{\\prime}=h_{t}$ . Finally, we can simply output the input to the recurrent block by setting $W_{o}=I$ and $\\mathbf{}b_{o}=\\mathbf{0}$ so that $\\boldsymbol{o}_{t}=\\boldsymbol{h}_{t}$ which means that $\\pmb{o}_{t}=\\pmb{a}_{t}$ . ", "page_idx": 21}, {"type": "text", "text": "E.3 Representing each MLP layer as a gated MLP block ", "text_level": 1, "page_idx": 21}, {"type": "text", "text": "We can represent the MLP layers of the networks $\\phi\\!\\left(s_{t}\\right)$ and $\\gamma(\\pmb{x}_{t})$ as described in Eq. (4) using Gated MLP blocks. We again denote the $i$ -th layer of $\\phi$ and $\\gamma$ as $\\phi_{i}$ and $\\gamma_{i}$ . Assume that the input to the gated MLP block is $\\pmb{a}_{t}=\\left[\\pmb{a}_{1,t}\\right]$ aa1,t . Then, on the first purely linear branch, let us define We = I and ", "page_idx": 21}, {"type": "text", "text": "$\\boldsymbol b_{e}={\\bf1}$ so that $\\boldsymbol{e}_{t}=\\mathbf{1}$ . On the second non-linear branch, we can define $W_{f}=\\left[\\stackrel{W_{\\phi_{i}}}{\\mathbf{0}}\\quad\\stackrel{\\mathbf{0}}{W_{\\gamma_{i}}}\\right]$ and $\\pmb{b}_{f}=\\left[\\pmb{b}_{\\phi_{i}}\\right].$ This results in ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\mathbf{\\boldsymbol{f}}_{t}=\\sigma\\left(\\left[\\!\\!\\begin{array}{c c}{W_{\\phi_{i}}}&{\\mathbf{\\boldsymbol{0}}}\\\\ {\\mathbf{\\boldsymbol{0}}}&{W_{\\gamma_{i}}}\\end{array}\\!\\!\\right]\\left[\\!\\!\\begin{array}{c}{a_{1,t}}\\\\ {\\!\\!\\boldsymbol{a}_{2,t}}\\end{array}\\!\\!\\right]+\\left[\\!\\!\\begin{array}{c}{b_{\\phi_{i}}}\\\\ {b_{\\gamma_{i}}}\\end{array}\\!\\!\\right]\\right)=\\left[\\!\\!\\begin{array}{c}{\\phi_{i}(\\mathbf{\\boldsymbol{a}}_{1,t})}\\\\ {\\gamma_{i}(\\mathbf{\\boldsymbol{a}}_{2,t})}\\end{array}\\!\\!\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Due to our setting of $e_{t}$ , we get $e_{t}^{\\prime}=f_{t}$ . Further, defining $W_{m}=I$ and ${\\ b_{m}}={\\bf0}$ makes the output of the MLP block be ", "page_idx": 22}, {"type": "equation", "text": "$$\nm_{t}=\\left[\\begin{array}{c}{{\\phi_{i}({\\pmb a}_{1,t})}}\\\\ {{\\gamma_{i}({\\pmb a}_{2,t})}}\\end{array}\\right].\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Emulating the layers of only one the two networks. Suppose without loss of generality (WLOG) that $\\phi$ has $m$ layers and $\\gamma$ has $n$ layers where $m<n$ . Suppose also that our input to the MLP block $\\pmb{a}_{t}=\\left[\\begin{array}{c}{\\phi(\\pmb{x}_{t})}\\\\ {\\pmb{a}_{2,t}}\\end{array}\\right]$ . Again, on the first purely linear branch, let us define $W_{e}=I$ and $\\boldsymbol b_{e}=\\mathbf1$ so that $\\boldsymbol{e}_{t}=\\mathbf{1}$ . Now we modify the weights on the second non-linear branch by defining $W_{f}=\\left[\\!\\!\\begin{array}{c c}{{I}}&{{{\\bf0}}}\\\\ {{{\\bf0}}}&{{W_{\\gamma_{i}}}}\\end{array}\\!\\!\\right]$ and bf = $\\mathbf{\\delta}b_{f}=\\left[\\!\\!\\begin{array}{c}{\\mathbf{0}}\\\\ {b_{\\gamma_{i}}}\\end{array}\\!\\!\\right]$ . This gives us ", "page_idx": 22}, {"type": "equation", "text": "$$\nf_{t}=\\sigma\\left(\\left[\\!\\!{\\begin{array}{c c}{{\\cal I}}&{\\mathbf{0}}\\\\ {\\mathbf{0}}&{W_{\\gamma_{i}}}\\end{array}}\\!\\!\\right]\\left[\\!\\!{\\begin{array}{c}{\\phi({x_{t}})}\\\\ {\\mathbf{0}_{2,t}}\\end{array}}\\!\\!\\right]+\\left[\\!\\!{\\begin{array}{c}{\\mathbf{0}}\\\\ {\\mathbf{b}_{\\gamma_{i}}}\\end{array}}\\!\\!\\right]\\right)=\\left[\\!\\!{\\begin{array}{c}{\\sigma(\\phi({x_{t}}))}\\\\ {\\gamma_{i}(\\mathbf{a}_{2,t})}\\end{array}}\\!\\!\\right]=\\left[\\!\\!{\\begin{array}{c}{\\phi({x_{t}})}\\\\ {\\gamma_{i}(\\mathbf{a}_{2,t})}\\end{array}}\\!\\!\\right],\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "where we have used that since $\\phi(\\pmb{x}_{t})$ is a ReLU network whose final activation is a ReLU, we have that $\\phi(\\mathbf{\\boldsymbol{x}}_{t})=\\sigma(\\phi(\\mathbf{\\boldsymbol{x}}_{t}))$ . Hence, if our networks have different depths and we have fully emulated one of the networks, we can continue to emulate the remaining layers of the other network while keeping the fully emulated network fixed and unchanged. ", "page_idx": 22}, {"type": "text", "text": "E.4 Representing the identify function using a gated MLP block ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "In this section we show that we can represent an identity function using a gated MLP block. This can be simply done by setting $W_{f}=\\mathbf{0},b_{f}=\\mathbf{1},W_{e}=I,b_{e}=\\mathbf{0},W_{m}=I$ and ${\\boldsymbol b}_{m}={\\bf0}$ . This then gives us that for an input $\\pmb{a}_{t}=\\left[\\pmb{a}_{1,t}\\right]$ to the gated MLP block, the output of the gated MLP block is ${\\mathbf{}}m_{t}={\\mathbf{}}a_{t}$ . Thus, we pass the input through the gated MLP unchanged. ", "page_idx": 22}, {"type": "text", "text": "E.5 Representing multiplicative gating with a gated MLP block ", "text_level": 1, "page_idx": 22}, {"type": "text", "text": "The final thing we need to do is to compute an element-wise product of two vectors in order to match the output in Eq. (4). In other words, to match the $\\phi(\\mathbf{\\boldsymbol{x}}_{t})\\odot\\gamma(\\mathbf{\\boldsymbol{s}}_{t})$ operation. Again, assume that the input to the gated MLP block is $\\pmb{a}_{t}=\\left[\\pmb{a}_{1,t}\\right]$ . Working with the first linear branch, we define $W_{e}=\\left[\\!\\!{\\begin{array}{l l}{\\mathbf{0}}&{\\mathbf{0}}\\\\ {\\mathbf{}}&{\\mathbf{0}}\\end{array}}\\!\\!\\right]$ and ${\\bf{\\mathit{b}}}_{e}={\\bf{0}}$ , so that ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r}{e_{t}=\\left[\\!\\!\\begin{array}{l l}{\\mathbf{0}}&{\\mathbf{0}}\\\\ {I}&{\\mathbf{0}}\\end{array}\\!\\!\\right]\\left[\\!\\!a_{1,t}\\!\\!\\right]+\\mathbf{0}=\\left[\\!\\!\\begin{array}{l}{\\mathbf{0}}\\\\ {a_{1,t}}\\end{array}\\!\\!\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Next, we define $W_{f}=I$ and $b_{e}=\\mathbf{0}$ so that ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\pmb{f}_{t}=\\left[\\sigma(\\pmb{a}_{1,t})\\right].\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Setting $W_{m}=I$ and ${\\boldsymbol b}_{m}={\\bf0}$ gives the output of the gated MLP as ", "page_idx": 22}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{m}_{t}=\\left[\\begin{array}{c}{\\mathbf{0}}\\\\ {\\mathbf{a}_{1,t}\\odot\\sigma(\\mathbf{a}_{2,t})\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 22}, {"type": "text", "text": "Now that we have all the individual layers, we can combine them so that we can use a Hawk model to emulate a single Gated RNN layer. ", "page_idx": 23}, {"type": "text", "text": "First we start by taking the input of the form $\\mathbf{\\boldsymbol{a}}_{t}=\\left[\\!\\!\\begin{array}{l}{\\mathbf{0}}\\\\ {\\mathbf{\\boldsymbol{x}}_{t}}\\end{array}\\!\\!\\right]$ We use a residual block that consists of a recurrent block computing the state update as descried in App. E.1 and then a gated MLP block that computes the identity function as demonstrated in App. E.4. This gives an output from this first recurrent block as $\\pmb{o}_{t}=\\dot{\\left[\\pmb{s}_{t}\\right]}$ . ", "page_idx": 23}, {"type": "text", "text": "Next, we emulate the MLP layers of the networks $\\phi$ and $\\gamma$ in parallel. Suppose WLOG that $\\phi$ and $\\gamma$ have $m$ and $n$ MLP layers respectively, where $m\\leq n$ . We stack $m$ residual blocks using recurrent blocks that implement the identity function as described in App. E.2 followed by MLP blocks that apply the MLP layers of $\\phi$ and $\\gamma$ as described in App. E.3. Stacking $m$ such residual blocks results in the output $m_{t}=\\Bigg[\\gamma_{m}\\big({\\pmb{s}}_{t}\\big)\\Bigg]$ , where we can fully emulate the shallower network $\\phi(\\pmb{x}_{t})$ . ", "page_idx": 23}, {"type": "text", "text": "Now, for the remaining $k-m$ layers for the network $\\gamma(\\pmb{x}_{t})$ , we stack residual blocks with recurrent blocks implementing the identity function as described in App. E.2 and MLP blocks that leave $\\phi(\\pmb{x}_{t})$ unchanged whilst applying the additional layers needed to emulate $\\gamma(s_{t})$ as described at the end of App. E.3. After stacking $k-m$ additional residual layers in this fashion, the output of the final residual block will now be $\\begin{array}{r}{\\overbar{m}_{t}=\\left[\\gamma(\\pmb{s}_{t})\\right]}\\\\ {\\phi(\\pmb{x}_{t})\\right];}\\end{array}$ , which fully reconstructs the MLP networks $\\gamma$ and $\\phi$ . Finally, we utilise a residual block with a recurrent block that implements the identity function as described in App. E.2 followed by a gated MLP block that applies multiplicative gating as described in App. E.5. This then gives as an output of this final residual block mt = \u03b3(st) \u22990\u03c3(\u03d5(xt)) . Since $\\phi(\\pmb{x}_{t})$ is a MLP network with the final activation function being a ReLU activation, we have that $\\sigma(\\phi(\\mathbf{x}_{t}))=\\phi(\\mathbf{x}_{t})$ , giving the required final output from the stacked block of residual blocks as ", "page_idx": 23}, {"type": "equation", "text": "$$\n\\begin{array}{r}{\\pmb{m}_{t}=\\left[\\tilde{\\gamma}(\\pmb{s}_{t})\\odot\\phi(\\pmb{x}_{t})\\right].}\\end{array}\n$$", "text_format": "latex", "page_idx": 23}, {"type": "text", "text": "Hence, we have shown that a single layer of a gated RNN as described by Eq. (5) can be represented using $k+2$ Hawk residual blocks where $k$ is the maximum depth of $\\phi$ and $\\gamma$ . Once again, the two universal approximation programs in Lsts. 1 and 2 can also be applied to Hawk models as they can represent Gated Linear RNNs. Therefore, Hawk models are also universal approximators in the sense described in Sec. 4. ", "page_idx": 23}, {"type": "text", "text": "Gated Linear-RNNs are Griffin models too. The above argument extends to the Griffin architecture which uses stacks of two residual blocks with recurrent blocks followed by a residual block with attention. The only thing that changes is that for every third residual block, which in our argument will be used to compute the MLP layers of $\\phi$ and $\\gamma$ in parallel, the recurrent block is now replaced with a local MQA block. ", "page_idx": 23}, {"type": "text", "text": "We can set the key query and values matrices to implement the identity function which is to act input to the block. Hence, as a corollary of the above argument, we can also show that the universal approximation programs in Lsts. 1 and 2 can also be implemented as Griffin models. Therefore, Griffin models can also be universal approximators in the sense described in Sec. 4. ", "page_idx": 23}, {"type": "text", "text": "F Definitions for some helper functions in LSRL ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "F.1 f_not ", "text_level": 1, "page_idx": 23}, {"type": "text", "text": "This is a convenience function that creates a NOT function block. It assumes that $x$ is 0 or 1. Works with scalar and vector-valued inputs. With vector-valued inputs, it acts element-wise. ", "page_idx": 23}, {"type": "text", "text": "F.2 f_and ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "This is a convenience function that creates an AND function block. It assumes that $x$ and $y$ are 0 or 1. Works with scalar and vector-valued inputs. With vector-valued inputs, it acts element-wise. mu is the approximation parameter $\\mu$ for f_step as described in Sec. 3. ", "page_idx": 24}, {"type": "table", "img_path": "GproaSYZk5/tmp/7c5dc1863811c88e4daa23bb7dc34e3992f7b4b78e24b12ed9c5b43e96a7684c.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "F.3 f_or ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "This is a convenience function that creates an OR function block. It assumes that $x$ and $y$ are 0 or 1. Works with scalar and vector-valued inputs. With vector-valued inputs, it acts element-wise. mu is the approximation parameter $\\mu$ for $\\mathsf{f}_{\\phantom{\\,}.}$ _step as described in Sec. 3. ", "page_idx": 24}, {"type": "text", "text": "or_x_y = f_step(x + y, mu=mu) ", "page_idx": 24}, {"type": "text", "text": "F.4 f_smaller ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "This is a convenience function that a less than comparison block. Works with scalar and vector-valued inputs. With vector-valued inputs, it acts element-wise. mu is the approximation parameter $\\mu$ for f_step as described in Sec. 3. ", "page_idx": 24}, {"type": "table", "img_path": "GproaSYZk5/tmp/ee0a35782390f031860443fb02f3f210c9f17e670303311acc968af2b8f1eafa.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "F.5 f_larger ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "This is a convenience function that a more than comparison block. Works with scalar and vectorvalued inputs. With vector-valued inputs, it acts element-wise. mu is the approximation parameter $\\mu$ for f_step as described in Sec. 3. ", "page_idx": 24}, {"type": "table", "img_path": "GproaSYZk5/tmp/803658a35163845d9f82763fd7597953a79a6f3f318176a3ac3178b772cb1504.jpg", "table_caption": [], "table_footnote": [], "page_idx": 24}, {"type": "text", "text": "F.6 f_relu_identity ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Identity operation using ReLUs. This is useful for debranching when some of the branches have ReLUs but the other don\u2019t. We can add this as a bypass for the ones that do not and can then merge the ReLUs together (see App. A for details). ", "page_idx": 24}, {"type": "image", "img_path": "GproaSYZk5/tmp/c1b31f586d35d98056e981b54697549766d02afad025371008740a97d7d9d64f.jpg", "img_caption": [], "img_footnote": [], "page_idx": 24}, {"type": "text", "text": "F.7 f_modulo_counter ", "text_level": 1, "page_idx": 24}, {"type": "text", "text": "Computes the $x$ mod divisor where $x$ is a counter starting from zero. The idea is that we rotate a unit vector so that it makes a full revolution every divisor rotations. dummy_input can be any variable, we use it only to construct a constant. ", "page_idx": 24}, {"type": "text", "text": "angle = 2 \\* pi / divisor   \nR = [[cos(angle), sin(angle)], [sin(angle), cos(angle)]]   \nunit_vector $=$ [[1], [0]]   \n# we first rotate , then output so if we want the first output to be 0 we need to have the init_state one step before that   \ninit_state $=\\textsf{R}$ .inv() @ unit_vector ", "page_idx": 24}, {"type": "text", "text": "# this rotates a 2D vector 1/ divisor revolutions at a time   \ncycler $=$ LinState(   \n8 inpu $=$ dummy_input ,   \n9 $\\mathsf{A}\\!=\\!\\mathsf{R}$ ,   \n10 $\\mathsf{B}\\!=\\!:$ zeros(2, dummy_input.dim),   \n11 init_state=init_state ,   \n12 )   \n13 # we now need to extract the position of the cycler   \n14 extractor_matrix $=$ vstack $\\mathbf{\\mu}^{\\star}\\,[\\,(\\,{\\mathsf{R}}\\,^{\\star}\\,{\\mathsf{i}}\\,\\mathbf{\\Lambda}^{\\star}\\,\\mathbf{\\Lambda}$ unit_vector).T) for i in range(divisor)])   \n15 indicator $=$ Linear(   \n16 inpu $=\\cdot$ cycler ,   \n17 $\\mathsf{A}=$ extractor_matrix ,   \n18 $b=$ zeros(divisor , 1)   \n19   \n20 # the dot product with the row of extractor_matrix corresponding to the current position of the cycler is 1   \n21 # the dot product with the second highest is cos(angle)   \n22 # thus , we can threshold at 1-cos(angle /2) to get a one hot encoding of the current position of the cycler   \n23 one_hot $=$ f_larger(indicator , cos(angle / 2))   \n24 $\\#$ and to get an integer value we need one final linear layer   \n25 mod_value $=$ Linear(   \n26 one_hot ,   \n27 $\\mathsf{A}\\!=\\!\\!\\mathsf{\\Gamma}\\!\\left[\\,\\dot{\\mathsf{L}}\\,\\dot{\\mathsf{1}}\\,\\right]$ for i in range(divisor)]],   \n28 $b=$ zeros(1, 1)   \n29 ) ", "page_idx": 25}, {"type": "text", "text": "NeurIPS Paper Checklist ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "i. Claims ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Do the main claims made in the abstract and introduction accurately reflect the paper\u2019s contributions and scope? ", "page_idx": 26}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "Justification: The abstract and the introduction clearly state all the contributions of the paper and clearly differentiate the theoretical results which hold in general and the empirical phenomena that we observe, which may not generalize to all settings. ", "page_idx": 26}, {"type": "text", "text": "Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the abstract and introduction do not include the claims made in the paper.   \n\u2022 The abstract and/or introduction should clearly state the claims made, including the contributions made in the paper and important assumptions and limitations. A No or NA answer to this question will not be perceived well by the reviewers.   \n\u2022 The claims made should match theoretical and experimental results, and reflect how much the results can be expected to generalize to other settings.   \n\u2022 It is fine to include aspirational goals as motivation as long as it is clear that these goals are not attained by the paper. ", "page_idx": 26}, {"type": "text", "text": "ii. Limitations ", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Question: Does the paper discuss the limitations of the work performed by the authors? Answer: [Yes] ", "page_idx": 26}, {"type": "text", "text": "", "text_level": 1, "page_idx": 26}, {"type": "text", "text": "Justification: The paper discusses the limitations of the present work. There is a dedicated Limitations section in Sec. 7 that addresses the fact that we only provide constructive existence results but not necessary and sufficient conditions for universal in-context approximation to arise. We also highlight that our results might not hold to models with structural constraints on their parameters. Moreover, we have a dedicated section (Sec. 5) which addresses some of the limitations of constructing universal in-context approximators with fully recurrent architectures in practice. This section proposes solutions and demonstrates that they result in more numerically stable models which are more likely to occur in practice. Guidelines: ", "page_idx": 26}, {"type": "text", "text": "\u2022 The answer NA means that the paper has no limitation while the answer No means that the paper has limitations, but those are not discussed in the paper.   \n\u2022 The authors are encouraged to create a separate \"Limitations\" section in their paper.   \n\u2022 The paper should point out any strong assumptions and how robust the results are to violations of these assumptions (e.g., independence assumptions, noiseless settings, model well-specification, asymptotic approximations only holding locally). The authors should reflect on how these assumptions might be violated in practice and what the implications would be.   \n\u2022 The authors should reflect on the scope of the claims made, e.g., if the approach was only tested on a few datasets or with a few runs. In general, empirical results often depend on implicit assumptions, which should be articulated.   \n\u2022 The authors should reflect on the factors that influence the performance of the approach. For example, a facial recognition algorithm may perform poorly when image resolution is low or images are taken in low lighting. Or a speech-to-text system might not be used reliably to provide closed captions for online lectures because it fails to handle technical jargon.   \n\u2022 The authors should discuss the computational efficiency of the proposed algorithms and how they scale with dataset size.   \n\u2022 If applicable, the authors should discuss possible limitations of their approach to address problems of privacy and fairness.   \n\u2022 While the authors might fear that complete honesty about limitations might be used by reviewers as grounds for rejection, a worse outcome might be that reviewers discover limitations that aren\u2019t acknowledged in the paper. The authors should use their best ", "page_idx": 26}, {"type": "text", "text": "judgment and recognize that individual actions in favor of transparency play an important role in developing norms that preserve the integrity of the community. Reviewers will be specifically instructed to not penalize honesty concerning limitations. ", "page_idx": 27}, {"type": "text", "text": "iii. Theory Assumptions and Proofs ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: For each theoretical result, does the paper provide the full set of assumptions and a complete (and correct) proof? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: The paper has two main theoretical results: the constructions of universal incontext approximators for continuous and for discrete functions. Both results are presented as LSRL programs which compile to the architectures considered in this work. Furthermore, these programs have been implemented in Python, their correctness has been tested and they are available in the supplementary materials. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include theoretical results.   \n\u2022 All the theorems, formulas, and proofs in the paper should be numbered and crossreferenced.   \n\u2022 All assumptions should be clearly stated or referenced in the statement of any theorems.   \n\u2022 The proofs can either appear in the main paper or the supplemental material, but if they appear in the supplemental material, the authors are encouraged to provide a short proof sketch to provide intuition.   \n\u2022 Inversely, any informal proof provided in the core of the paper should be complemented by formal proofs provided in appendix or supplemental material.   \n\u2022 Theorems and Lemmas that the proof relies upon should be properly referenced. ", "page_idx": 27}, {"type": "text", "text": "iv. Experimental Result Reproducibility ", "text_level": 1, "page_idx": 27}, {"type": "text", "text": "Question: Does the paper fully disclose all the information needed to reproduce the main experimental results of the paper to the extent that it affects the main claims and/or conclusions of the paper (regardless of whether the code and data are provided or not)? ", "page_idx": 27}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 27}, {"type": "text", "text": "Justification: There are two experimental aspects to this work. First, there is the implementation of LSRL and the two universal approximation programs in Lsts. 1 and 2. The most critical aspect of implementing LSRL is the debranching algorithm which is described in detail in App. A. Additionally, the two programs are described in full in their corresponding listings. We also provide Python implementation for the LSRL compiler and the two programs. ", "page_idx": 27}, {"type": "text", "text": "Second, there is the study of how affected by parameter noise are the different implementations of the conditional assignment operator f_ifelse which was presented in Sec. 6. The details of this experiment are described in Fig. 4 and we also provide the code with which we did the experiment and our plots. ", "page_idx": 27}, {"type": "text", "text": "Guidelines: ", "page_idx": 27}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 If the paper includes experiments, a No answer to this question will not be perceived well by the reviewers: Making the paper reproducible is important, regardless of whether the code and data are provided or not.   \n\u2022 If the contribution is a dataset and/or model, the authors should describe the steps taken to make their results reproducible or verifiable.   \n\u2022 Depending on the contribution, reproducibility can be accomplished in various ways. For example, if the contribution is a novel architecture, describing the architecture fully might suffice, or if the contribution is a specific model and empirical evaluation, it may be necessary to either make it possible for others to replicate the model with the same dataset, or provide access to the model. In general. releasing code and data is often one good way to accomplish this, but reproducibility can also be provided via detailed instructions for how to replicate the results, access to a hosted model (e.g., in the case of a large language model), releasing of a model checkpoint, or other means that are appropriate to the research performed.   \nWhile NeurIPS does not require releasing code, the conference does require all submis  \nsions to provide some reasonable avenue for reproducibility, which may depend on the   \nnature of the contribution. For example   \n(a) If the contribution is primarily a new algorithm, the paper should make it clear how to reproduce that algorithm.   \n(b) If the contribution is primarily a new model architecture, the paper should describe the architecture clearly and fully.   \n(c) If the contribution is a new model (e.g., a large language model), then there should either be a way to access this model for reproducing the results or a way to reproduce the model (e.g., with an open-source dataset or instructions for how to construct the dataset).   \n(d) We recognize that reproducibility may be tricky in some cases, in which case authors are welcome to describe the particular way they provide for reproducibility. In the case of closed-source models, it may be that access to the model is limited in some way (e.g., to registered users), but it should be possible for other researchers to have some path to reproducing or verifying the results. ", "page_idx": 27}, {"type": "text", "text": "", "page_idx": 28}, {"type": "text", "text": "v. Open access to data and code ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper provide open access to the data and code, with sufficient instructions to faithfully reproduce the main experimental results, as described in supplemental material? ", "page_idx": 28}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 28}, {"type": "text", "text": "Justification: We are providing code that includes an implementation of LSRL, the two universal in-context approximation programs in Lsts. 1 and 2 and everything needed to reproduce the experiments in this work. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that paper does not include experiments requiring code.   \n\u2022 Please see the NeurIPS code and data submission guidelines (https://nips.cc/ public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 While we encourage the release of code and data, we understand that this might not be possible, so \u201cNo\u201d is an acceptable answer. Papers cannot be rejected simply for not including code, unless this is central to the contribution (e.g., for a new open-source benchmark).   \n\u2022 The instructions should contain the exact command and environment needed to run to reproduce the results. See the NeurIPS code and data submission guidelines (https: //nips.cc/public/guides/CodeSubmissionPolicy) for more details.   \n\u2022 The authors should provide instructions on data access and preparation, including how to access the raw data, preprocessed data, intermediate data, and generated data, etc.   \n\u2022 The authors should provide scripts to reproduce all experimental results for the new proposed method and baselines. If only a subset of experiments are reproducible, they should state which ones are omitted from the script and why.   \n\u2022 At submission time, to preserve anonymity, the authors should release anonymized versions (if applicable).   \n\u2022 Providing as much information as possible in supplemental material (appended to the paper) is recommended, but including URLs to data and code is permitted. ", "page_idx": 28}, {"type": "text", "text": "vi. Experimental Setting/Details ", "text_level": 1, "page_idx": 28}, {"type": "text", "text": "Question: Does the paper specify all the training and test details (e.g., data splits, hyperparameters, how they were chosen, type of optimizer, etc.) necessary to understand the results? ", "page_idx": 28}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 28}, {"type": "text", "text": "Justification: The experiments in our work are based on constructed models rather than trained models. Therefore, considerations such as dataset, optimizers and hyperparameters do not apply. ", "page_idx": 28}, {"type": "text", "text": "Guidelines: ", "page_idx": 28}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments. ", "page_idx": 28}, {"type": "text", "text": "\u2022 The experimental setting should be presented in the core of the paper to a level of detail that is necessary to appreciate the results and make sense of them. \u2022 The full details can be provided either with the code, in appendix, or as supplemental material. ", "page_idx": 29}, {"type": "text", "text": "vii. Experiment Statistical Significance ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the paper report error bars suitably and correctly defined or other appropriate information about the statistical significance of the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [No] ", "page_idx": 29}, {"type": "text", "text": "Justification: For this work, uncertainty quantification could only make sense in the context of Fig. 4. However, the behaviour we observe, especially for the continuous case, is bimodal. As bimodal distributions cannot be properly captured with error bars we decided against using them. Furthermore, we are studying whether a phenomenon occurs, rather than quantifying it. Therefore, we decided to instead use a strip plot instead as it explicitly shows all our results unabridged, clearly indicates the bimodal nature of the results, and distinctly showcases the noise robustness trends of the different approaches we consider. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The authors should answer \"Yes\" if the results are accompanied by error bars, confidence intervals, or statistical significance tests, at least for the experiments that support the main claims of the paper.   \n\u2022 The factors of variability that the error bars are capturing should be clearly stated (for example, train/test split, initialization, random drawing of some parameter, or overall run with given experimental conditions).   \n\u2022 The method for calculating the error bars should be explained (closed form formula, call to a library function, bootstrap, etc.)   \n\u2022 The assumptions made should be given (e.g., Normally distributed errors).   \n\u2022 It should be clear whether the error bar is the standard deviation or the standard error of the mean.   \n\u2022 It is OK to report 1-sigma error bars, but one should state it. The authors should preferably report a 2-sigma error bar than state that they have a $96\\%$ CI, if the hypothesis of Normality of errors is not verified.   \n\u2022 For asymmetric distributions, the authors should be careful not to show in tables or figures symmetric error bars that would yield results that are out of range (e.g. negative error rates).   \n\u2022 If error bars are reported in tables or plots, The authors should explain in the text how they were calculated and reference the corresponding figures or tables in the text. ", "page_idx": 29}, {"type": "text", "text": "viii. Experiments Compute Resources ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: For each experiment, does the paper provide sufficient information on the computer resources (type of compute workers, memory, time of execution) needed to reproduce the experiments? ", "page_idx": 29}, {"type": "text", "text": "Answer: [No] ", "page_idx": 29}, {"type": "text", "text": "Justification: Our experiments were ran on a single machine and using only CPU compute. Therefore, the compute required is negligible for the contemporary machine learning standards. ", "page_idx": 29}, {"type": "text", "text": "Guidelines: ", "page_idx": 29}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not include experiments.   \n\u2022 The paper should indicate the type of compute workers CPU or GPU, internal cluster, or cloud provider, including relevant memory and storage.   \n\u2022 The paper should provide the amount of compute required for each of the individual experimental runs as well as estimate the total compute.   \n\u2022 The paper should disclose whether the full research project required more compute than the experiments reported in the paper (e.g., preliminary or failed experiments that didn\u2019t make it into the paper). ", "page_idx": 29}, {"type": "text", "text": "ix. Code Of Ethics ", "text_level": 1, "page_idx": 29}, {"type": "text", "text": "Question: Does the research conducted in the paper conform, in every respect, with the NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines? ", "page_idx": 30}, {"type": "text", "text": "Answer: [Yes] ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Justification: This is a theoretical work with no human participants, datasets, or potential societal impact or harmful consequences. Therefore, the present work has no moral or ethical relevance or implications. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.   \n\u2022 If the authors answer No, they should explain the special circumstances that require a deviation from the Code of Ethics.   \n\u2022 The authors should make sure to preserve anonymity (e.g., if there is a special consideration due to laws or regulations in their jurisdiction). ", "page_idx": 30}, {"type": "text", "text": "x. Broader Impacts ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper discuss both potential positive societal impacts and negative societal impacts of the work performed? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: As mentioned above, this is a theoretical work which establishes theoretical properties of mathematical objects that are already used in practice. However, we do discuss the implications of our findings, namely that if models are universal in-context approximators, then it might be difficult to ensure that they are aligned and cannot be misused. Nevertheless, we only show that this is a property already present in existing models, and hence our work does not introduce new attack or misuse vectors. On the contrary, we hope that us highlighting this issues will help the community to develop safer and more secure generative AI systems. ", "page_idx": 30}, {"type": "text", "text": "Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that there is no societal impact of the work performed.   \n\u2022 If the authors answer NA or No, they should explain why their work has no societal impact or why the paper does not address societal impact.   \n\u2022 Examples of negative societal impacts include potential malicious or unintended uses (e.g., disinformation, generating fake profiles, surveillance), fairness considerations (e.g., deployment of technologies that could make decisions that unfairly impact specific groups), privacy considerations, and security considerations.   \n\u2022 The conference expects that many papers will be foundational research and not tied to particular applications, let alone deployments. However, if there is a direct path to any negative applications, the authors should point it out. For example, it is legitimate to point out that an improvement in the quality of generative models could be used to generate deepfakes for disinformation. On the other hand, it is not needed to point out that a generic algorithm for optimizing neural networks could enable people to train models that generate Deepfakes faster.   \n\u2022 The authors should consider possible harms that could arise when the technology is being used as intended and functioning correctly, harms that could arise when the technology is being used as intended but gives incorrect results, and harms following from (intentional or unintentional) misuse of the technology.   \n\u2022 If there are negative societal impacts, the authors could also discuss possible mitigation strategies (e.g., gated release of models, providing defenses in addition to attacks, mechanisms for monitoring misuse, mechanisms to monitor how a system learns from feedback over time, improving the efficiency and accessibility of ML). ", "page_idx": 30}, {"type": "text", "text": "xi. Safeguards ", "text_level": 1, "page_idx": 30}, {"type": "text", "text": "Question: Does the paper describe safeguards that have been put in place for responsible release of data or models that have a high risk for misuse (e.g., pretrained language models, image generators, or scraped datasets)? ", "page_idx": 30}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 30}, {"type": "text", "text": "Justification: We release no data or models. Guidelines: ", "page_idx": 30}, {"type": "text", "text": "\u2022 The answer NA means that the paper poses no such risks.   \n\u2022 Released models that have a high risk for misuse or dual-use should be released with necessary safeguards to allow for controlled use of the model, for example by requiring that users adhere to usage guidelines or restrictions to access the model or implementing safety filters.   \n\u2022 Datasets that have been scraped from the Internet could pose safety risks. The authors should describe how they avoided releasing unsafe images.   \n\u2022 We recognize that providing effective safeguards is challenging, and many papers do not require this, but we encourage authors to take this into account and make a best faith effort. ", "page_idx": 31}, {"type": "text", "text": "xii. Licenses for existing assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are the creators or original owners of assets (e.g., code, data, models), used in the paper, properly credited and are the license and terms of use explicitly mentioned and properly respected? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: The paper does not use existing assets beyond common Python libraries. Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not use existing assets.   \n\u2022 The authors should cite the original paper that produced the code package or dataset.   \n\u2022 The authors should state which version of the asset is used and, if possible, include a URL.   \n\u2022 The name of the license (e.g., CC-BY 4.0) should be included for each asset.   \n\u2022 For scraped data from a particular source (e.g., website), the copyright and terms of service of that source should be provided.   \n\u2022 If assets are released, the license, copyright information, and terms of use in the package should be provided. For popular datasets, paperswithcode.com/datasets has curated licenses for some datasets. Their licensing guide can help determine the license of a dataset.   \n\u2022 For existing datasets that are re-packaged, both the original license and the license of the derived asset (if it has changed) should be provided.   \n\u2022 If this information is not available online, the authors are encouraged to reach out to the asset\u2019s creators. ", "page_idx": 31}, {"type": "text", "text": "xiii. New Assets ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: Are new assets introduced in the paper well documented and is the documentation provided alongside the assets? ", "page_idx": 31}, {"type": "text", "text": "Answer: [Yes] ", "page_idx": 31}, {"type": "text", "text": "Justification: The only new asset arising from this work is the LSRL code base which we have ensured to be well-documented, accompanied by unit and integration tests, and with illustrative Jupyter notebooks. ", "page_idx": 31}, {"type": "text", "text": "Guidelines: ", "page_idx": 31}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not release new assets.   \n\u2022 Researchers should communicate the details of the dataset/code/model as part of their submissions via structured templates. This includes details about training, license, limitations, etc.   \n\u2022 The paper should discuss whether and how consent was obtained from people whose asset is used.   \n\u2022 At submission time, remember to anonymize your assets (if applicable). You can either create an anonymized URL or include an anonymized zip file. ", "page_idx": 31}, {"type": "text", "text": "xiv. Crowdsourcing and Research with Human Subjects ", "text_level": 1, "page_idx": 31}, {"type": "text", "text": "Question: For crowdsourcing experiments and research with human subjects, does the paper include the full text of instructions given to participants and screenshots, if applicable, as well as details about compensation (if any)? ", "page_idx": 31}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 31}, {"type": "text", "text": "Justification: There were no human participants involved in any part of this work. Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Including this information in the supplemental material is fine, but if the main contribution of the paper involves human subjects, then as much detail as possible should be included in the main paper.   \n\u2022 According to the NeurIPS Code of Ethics, workers involved in data collection, curation, or other labor should be paid at least the minimum wage in the country of the data collector. ", "page_idx": 32}, {"type": "text", "text": "xv. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human Subjects ", "text_level": 1, "page_idx": 32}, {"type": "text", "text": "Question: Does the paper describe potential risks incurred by study participants, whether such risks were disclosed to the subjects, and whether Institutional Review Board (IRB) approvals (or an equivalent approval/review based on the requirements of your country or institution) were obtained? ", "page_idx": 32}, {"type": "text", "text": "Answer: [NA] ", "page_idx": 32}, {"type": "text", "text": "Justification: This is a purely theoretical work and as such no IRB approval or equivalent was necessary or appropriate. ", "page_idx": 32}, {"type": "text", "text": "Guidelines: ", "page_idx": 32}, {"type": "text", "text": "\u2022 The answer NA means that the paper does not involve crowdsourcing nor research with human subjects.   \n\u2022 Depending on the country in which research is conducted, IRB approval (or equivalent) may be required for any human subjects research. If you obtained IRB approval, you should clearly state this in the paper.   \n\u2022 We recognize that the procedures for this may vary significantly between institutions and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the guidelines for their institution.   \n\u2022 For initial submissions, do not include any information that would break anonymity (if applicable), such as the institution conducting the review. ", "page_idx": 32}]