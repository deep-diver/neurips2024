[{"figure_path": "Y1rOWS2Z4i/figures/figures_3_1.jpg", "caption": "Figure 1: An overview of LLaMAR's modular cognitive architecture. LLaMAR leverages LMs within four key modules: Planner, Actor, Corrector, and Verifier, each with specific roles. The Planner breaks down the high-level language instruction into feasible subtasks to achieve the environment goal. The Actor determines the high-level actions each agent should perform. These actions trigger low-level policies that generate and execute a sequence of primitive actions in sync across all agents. Based on execution feedback, the Corrector suggests corrections for high-level actions and the Verifier Module validates completion of subtasks.", "description": "This figure presents a detailed diagram of LLaMAR's architecture, illustrating the interaction between four key modules: Planner, Actor, Corrector, and Verifier.  The Planner takes the high-level task instruction and breaks it down into manageable subtasks.  The Actor then decides on high-level actions for the agents to perform, triggering low-level policies for execution.  The Corrector module steps in when action execution fails, suggesting corrections based on the feedback received. Finally, the Verifier module assesses the completion of subtasks.  The diagram shows how each module interacts with the environment and with each other to achieve successful task completion.", "section": "4 Approach"}, {"figure_path": "Y1rOWS2Z4i/figures/figures_9_1.jpg", "caption": "Figure 1: An overview of LLaMAR's modular cognitive architecture. LLaMAR leverages LMs within four key modules: Planner, Actor, Corrector, and Verifier, each with specific roles. The Planner breaks down the high-level language instruction into feasible subtasks to achieve the environment goal. The Actor determines the high-level actions each agent should perform. These actions trigger low-level policies that generate and execute a sequence of primitive actions in sync across all agents. Based on execution feedback, the Corrector suggests corrections for high-level actions and the Verifier Module validates completion of subtasks.", "description": "LLaMAR uses four LMs working together to solve multi-agent tasks. The Planner LM determines subtasks; the Actor LM chooses actions; the Corrector LM corrects failed actions; and the Verifier LM checks if subtasks are complete. This modular design enables better performance than other methods.", "section": "4 Approach"}, {"figure_path": "Y1rOWS2Z4i/figures/figures_15_1.jpg", "caption": "Figure 1: An overview of LLaMAR's modular cognitive architecture. LLaMAR leverages LMs within four key modules: Planner, Actor, Corrector, and Verifier, each with specific roles. The Planner breaks down the high-level language instruction into feasible subtasks to achieve the environment goal. The Actor determines the high-level actions each agent should perform. These actions trigger low-level policies that generate and execute a sequence of primitive actions in sync across all agents. Based on execution feedback, the Corrector suggests corrections for high-level actions and the Verifier Module validates completion of subtasks.", "description": "This figure illustrates the modular cognitive architecture of LLaMAR, an LM-based long-horizon planner for multi-agent robotics.  It uses four Large Language Models (LLMs) working together:  The Planner decomposes the high-level task into subtasks; the Actor selects high-level actions for each agent; the Corrector identifies and corrects action failures; and the Verifier validates subtask completion. The diagram shows the flow of information and actions between the modules and the environment, highlighting the iterative plan-act-correct-verify framework.", "section": "4 Approach"}, {"figure_path": "Y1rOWS2Z4i/figures/figures_16_1.jpg", "caption": "Figure 1: An overview of LLaMAR's modular cognitive architecture. LLaMAR leverages LMs within four key modules: Planner, Actor, Corrector, and Verifier, each with specific roles. The Planner breaks down the high-level language instruction into feasible subtasks to achieve the environment goal. The Actor determines the high-level actions each agent should perform. These actions trigger low-level policies that generate and execute a sequence of primitive actions in sync across all agents. Based on execution feedback, the Corrector suggests corrections for high-level actions and the Verifier Module validates completion of subtasks.", "description": "This figure provides a visual representation of the LLaMAR architecture.  LLaMAR uses four Language Models (LMs) working together:  The Planner LM takes the user's high-level instructions and breaks them down into smaller, more manageable subtasks. The Actor LM determines the high-level actions each robot should perform to accomplish those subtasks, which are then converted to low-level actions.  The Corrector LM analyzes whether these actions were successful and suggests corrections if necessary. Finally, the Verifier LM validates if the subtasks have been successfully completed.  The diagram shows the data flow and interaction between these four modules, illustrating the plan-act-correct-verify framework of LLaMAR.", "section": "4 Approach"}, {"figure_path": "Y1rOWS2Z4i/figures/figures_18_1.jpg", "caption": "Figure 5: The search & rescue environment consists of multiple drones in an unknown environment with missing people, fires of different types, and water and sand reservoirs.", "description": "This figure illustrates the Search and Rescue (SAR) environment used in the paper's experiments.  The environment is a grid world containing multiple drones (agents) tasked with locating and rescuing missing people and extinguishing fires.  The fires are represented by flames of varying sizes and intensities, suggesting different levels of severity. The drones use their downward-facing cameras to detect and identify objects and people within their range.  The presence of water and sand reservoirs indicates available resources to extinguish the fires.  The overall setting showcases a partially observable multi-agent environment requiring long-horizon planning and coordination.", "section": "Search & Rescue Environment (SAR)"}, {"figure_path": "Y1rOWS2Z4i/figures/figures_23_1.jpg", "caption": "Figure 1: An overview of LLaMAR's modular cognitive architecture. LLaMAR leverages LMs within four key modules: Planner, Actor, Corrector, and Verifier, each with specific roles. The Planner breaks down the high-level language instruction into feasible subtasks to achieve the environment goal. The Actor determines the high-level actions each agent should perform. These actions trigger low-level policies that generate and execute a sequence of primitive actions in sync across all agents. Based on execution feedback, the Corrector suggests corrections for high-level actions and the Verifier Module validates completion of subtasks.", "description": "This figure presents a detailed breakdown of LLaMAR's architecture, highlighting the roles of each of its four core modules: Planner, Actor, Corrector, and Verifier.  The flow of information and decision-making within the system is shown, demonstrating how the high-level language instruction is decomposed into subtasks, executed, and validated through an iterative plan-act-correct-verify cycle. The figure provides a visual representation of how real-time execution feedback and agent observations are leveraged to refine the planning and execution process.", "section": "4 Approach"}, {"figure_path": "Y1rOWS2Z4i/figures/figures_29_1.jpg", "caption": "Figure 1: An overview of LLaMAR's modular cognitive architecture. LLaMAR leverages LMs within four key modules: Planner, Actor, Corrector, and Verifier, each with specific roles. The Planner breaks down the high-level language instruction into feasible subtasks to achieve the environment goal. The Actor determines the high-level actions each agent should perform. These actions trigger low-level policies that generate and execute a sequence of primitive actions in sync across all agents. Based on execution feedback, the Corrector suggests corrections for high-level actions and the Verifier Module validates completion of subtasks.", "description": "This figure provides a detailed overview of LLaMAR's architecture, illustrating the interaction between four core modules: Planner, Actor, Corrector, and Verifier.  Each module utilizes Large Language Models (LLMs) to perform specific tasks in the plan-act-correct-verify framework. The Planner decomposes high-level instructions into manageable subtasks. The Actor selects high-level actions based on the Planner's output, which are then translated into primitive actions by low-level policies. The Corrector identifies and corrects failures by suggesting alternative actions, and the Verifier assesses subtask completion based on observation. This process allows for iterative planning and self-correction.", "section": "4 Approach"}]